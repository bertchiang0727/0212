
0212.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013de8  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08013fb0  08013fb0  00023fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080143b8  080143b8  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  080143b8  080143b8  000243b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080143c0  080143c0  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080143c0  080143c0  000243c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080143c8  080143c8  000243c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  080143cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000178c  2000034c  08014718  0003034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ad8  08014718  00031ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dc89  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ed2  00000000  00000000  0005e005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be8  00000000  00000000  00062ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a30  00000000  00000000  00064ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a3f  00000000  00000000  000664f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002538d  00000000  00000000  0008ff2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5a3d  00000000  00000000  000b52bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001aacf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b08  00000000  00000000  001aad4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000034c 	.word	0x2000034c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08013f98 	.word	0x08013f98

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000350 	.word	0x20000350
 8000204:	08013f98 	.word	0x08013f98

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <strlen>:
 800021c:	4603      	mov	r3, r0
 800021e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000222:	2a00      	cmp	r2, #0
 8000224:	d1fb      	bne.n	800021e <strlen+0x2>
 8000226:	1a18      	subs	r0, r3, r0
 8000228:	3801      	subs	r0, #1
 800022a:	4770      	bx	lr

0800022c <__aeabi_drsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000230:	e002      	b.n	8000238 <__adddf3>
 8000232:	bf00      	nop

08000234 <__aeabi_dsub>:
 8000234:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000238 <__adddf3>:
 8000238:	b530      	push	{r4, r5, lr}
 800023a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000242:	ea94 0f05 	teq	r4, r5
 8000246:	bf08      	it	eq
 8000248:	ea90 0f02 	teqeq	r0, r2
 800024c:	bf1f      	itttt	ne
 800024e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000252:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000256:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025e:	f000 80e2 	beq.w	8000426 <__adddf3+0x1ee>
 8000262:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000266:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026a:	bfb8      	it	lt
 800026c:	426d      	neglt	r5, r5
 800026e:	dd0c      	ble.n	800028a <__adddf3+0x52>
 8000270:	442c      	add	r4, r5
 8000272:	ea80 0202 	eor.w	r2, r0, r2
 8000276:	ea81 0303 	eor.w	r3, r1, r3
 800027a:	ea82 0000 	eor.w	r0, r2, r0
 800027e:	ea83 0101 	eor.w	r1, r3, r1
 8000282:	ea80 0202 	eor.w	r2, r0, r2
 8000286:	ea81 0303 	eor.w	r3, r1, r3
 800028a:	2d36      	cmp	r5, #54	; 0x36
 800028c:	bf88      	it	hi
 800028e:	bd30      	pophi	{r4, r5, pc}
 8000290:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000294:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000298:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800029c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x70>
 80002a2:	4240      	negs	r0, r0
 80002a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x84>
 80002b6:	4252      	negs	r2, r2
 80002b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002bc:	ea94 0f05 	teq	r4, r5
 80002c0:	f000 80a7 	beq.w	8000412 <__adddf3+0x1da>
 80002c4:	f1a4 0401 	sub.w	r4, r4, #1
 80002c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002cc:	db0d      	blt.n	80002ea <__adddf3+0xb2>
 80002ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d2:	fa22 f205 	lsr.w	r2, r2, r5
 80002d6:	1880      	adds	r0, r0, r2
 80002d8:	f141 0100 	adc.w	r1, r1, #0
 80002dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e0:	1880      	adds	r0, r0, r2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	4159      	adcs	r1, r3
 80002e8:	e00e      	b.n	8000308 <__adddf3+0xd0>
 80002ea:	f1a5 0520 	sub.w	r5, r5, #32
 80002ee:	f10e 0e20 	add.w	lr, lr, #32
 80002f2:	2a01      	cmp	r2, #1
 80002f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f8:	bf28      	it	cs
 80002fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	18c0      	adds	r0, r0, r3
 8000304:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000308:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800030c:	d507      	bpl.n	800031e <__adddf3+0xe6>
 800030e:	f04f 0e00 	mov.w	lr, #0
 8000312:	f1dc 0c00 	rsbs	ip, ip, #0
 8000316:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031a:	eb6e 0101 	sbc.w	r1, lr, r1
 800031e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000322:	d31b      	bcc.n	800035c <__adddf3+0x124>
 8000324:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000328:	d30c      	bcc.n	8000344 <__adddf3+0x10c>
 800032a:	0849      	lsrs	r1, r1, #1
 800032c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000330:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000334:	f104 0401 	add.w	r4, r4, #1
 8000338:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800033c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000340:	f080 809a 	bcs.w	8000478 <__adddf3+0x240>
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	bf08      	it	eq
 800034a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034e:	f150 0000 	adcs.w	r0, r0, #0
 8000352:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000356:	ea41 0105 	orr.w	r1, r1, r5
 800035a:	bd30      	pop	{r4, r5, pc}
 800035c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000360:	4140      	adcs	r0, r0
 8000362:	eb41 0101 	adc.w	r1, r1, r1
 8000366:	3c01      	subs	r4, #1
 8000368:	bf28      	it	cs
 800036a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036e:	d2e9      	bcs.n	8000344 <__adddf3+0x10c>
 8000370:	f091 0f00 	teq	r1, #0
 8000374:	bf04      	itt	eq
 8000376:	4601      	moveq	r1, r0
 8000378:	2000      	moveq	r0, #0
 800037a:	fab1 f381 	clz	r3, r1
 800037e:	bf08      	it	eq
 8000380:	3320      	addeq	r3, #32
 8000382:	f1a3 030b 	sub.w	r3, r3, #11
 8000386:	f1b3 0220 	subs.w	r2, r3, #32
 800038a:	da0c      	bge.n	80003a6 <__adddf3+0x16e>
 800038c:	320c      	adds	r2, #12
 800038e:	dd08      	ble.n	80003a2 <__adddf3+0x16a>
 8000390:	f102 0c14 	add.w	ip, r2, #20
 8000394:	f1c2 020c 	rsb	r2, r2, #12
 8000398:	fa01 f00c 	lsl.w	r0, r1, ip
 800039c:	fa21 f102 	lsr.w	r1, r1, r2
 80003a0:	e00c      	b.n	80003bc <__adddf3+0x184>
 80003a2:	f102 0214 	add.w	r2, r2, #20
 80003a6:	bfd8      	it	le
 80003a8:	f1c2 0c20 	rsble	ip, r2, #32
 80003ac:	fa01 f102 	lsl.w	r1, r1, r2
 80003b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b4:	bfdc      	itt	le
 80003b6:	ea41 010c 	orrle.w	r1, r1, ip
 80003ba:	4090      	lslle	r0, r2
 80003bc:	1ae4      	subs	r4, r4, r3
 80003be:	bfa2      	ittt	ge
 80003c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c4:	4329      	orrge	r1, r5
 80003c6:	bd30      	popge	{r4, r5, pc}
 80003c8:	ea6f 0404 	mvn.w	r4, r4
 80003cc:	3c1f      	subs	r4, #31
 80003ce:	da1c      	bge.n	800040a <__adddf3+0x1d2>
 80003d0:	340c      	adds	r4, #12
 80003d2:	dc0e      	bgt.n	80003f2 <__adddf3+0x1ba>
 80003d4:	f104 0414 	add.w	r4, r4, #20
 80003d8:	f1c4 0220 	rsb	r2, r4, #32
 80003dc:	fa20 f004 	lsr.w	r0, r0, r4
 80003e0:	fa01 f302 	lsl.w	r3, r1, r2
 80003e4:	ea40 0003 	orr.w	r0, r0, r3
 80003e8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ec:	ea45 0103 	orr.w	r1, r5, r3
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	f1c4 040c 	rsb	r4, r4, #12
 80003f6:	f1c4 0220 	rsb	r2, r4, #32
 80003fa:	fa20 f002 	lsr.w	r0, r0, r2
 80003fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000402:	ea40 0003 	orr.w	r0, r0, r3
 8000406:	4629      	mov	r1, r5
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	fa21 f004 	lsr.w	r0, r1, r4
 800040e:	4629      	mov	r1, r5
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f094 0f00 	teq	r4, #0
 8000416:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041a:	bf06      	itte	eq
 800041c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000420:	3401      	addeq	r4, #1
 8000422:	3d01      	subne	r5, #1
 8000424:	e74e      	b.n	80002c4 <__adddf3+0x8c>
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf18      	it	ne
 800042c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000430:	d029      	beq.n	8000486 <__adddf3+0x24e>
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	d005      	beq.n	800044a <__adddf3+0x212>
 800043e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000442:	bf04      	itt	eq
 8000444:	4619      	moveq	r1, r3
 8000446:	4610      	moveq	r0, r2
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea91 0f03 	teq	r1, r3
 800044e:	bf1e      	ittt	ne
 8000450:	2100      	movne	r1, #0
 8000452:	2000      	movne	r0, #0
 8000454:	bd30      	popne	{r4, r5, pc}
 8000456:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045a:	d105      	bne.n	8000468 <__adddf3+0x230>
 800045c:	0040      	lsls	r0, r0, #1
 800045e:	4149      	adcs	r1, r1
 8000460:	bf28      	it	cs
 8000462:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000466:	bd30      	pop	{r4, r5, pc}
 8000468:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800046c:	bf3c      	itt	cc
 800046e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000472:	bd30      	popcc	{r4, r5, pc}
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800047c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048a:	bf1a      	itte	ne
 800048c:	4619      	movne	r1, r3
 800048e:	4610      	movne	r0, r2
 8000490:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000494:	bf1c      	itt	ne
 8000496:	460b      	movne	r3, r1
 8000498:	4602      	movne	r2, r0
 800049a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049e:	bf06      	itte	eq
 80004a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a4:	ea91 0f03 	teqeq	r1, r3
 80004a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	bf00      	nop

080004b0 <__aeabi_ui2d>:
 80004b0:	f090 0f00 	teq	r0, #0
 80004b4:	bf04      	itt	eq
 80004b6:	2100      	moveq	r1, #0
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c4:	f04f 0500 	mov.w	r5, #0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e750      	b.n	8000370 <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_i2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e8:	bf48      	it	mi
 80004ea:	4240      	negmi	r0, r0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e73e      	b.n	8000370 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_f2d>:
 80004f4:	0042      	lsls	r2, r0, #1
 80004f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000502:	bf1f      	itttt	ne
 8000504:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000508:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800050c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000510:	4770      	bxne	lr
 8000512:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000516:	bf08      	it	eq
 8000518:	4770      	bxeq	lr
 800051a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051e:	bf04      	itt	eq
 8000520:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 7460 	mov.w	r4, #896	; 0x380
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000534:	e71c      	b.n	8000370 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_ul2d>:
 8000538:	ea50 0201 	orrs.w	r2, r0, r1
 800053c:	bf08      	it	eq
 800053e:	4770      	bxeq	lr
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	f04f 0500 	mov.w	r5, #0
 8000546:	e00a      	b.n	800055e <__aeabi_l2d+0x16>

08000548 <__aeabi_l2d>:
 8000548:	ea50 0201 	orrs.w	r2, r0, r1
 800054c:	bf08      	it	eq
 800054e:	4770      	bxeq	lr
 8000550:	b530      	push	{r4, r5, lr}
 8000552:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000556:	d502      	bpl.n	800055e <__aeabi_l2d+0x16>
 8000558:	4240      	negs	r0, r0
 800055a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000562:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000566:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056a:	f43f aed8 	beq.w	800031e <__adddf3+0xe6>
 800056e:	f04f 0203 	mov.w	r2, #3
 8000572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000576:	bf18      	it	ne
 8000578:	3203      	addne	r2, #3
 800057a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057e:	bf18      	it	ne
 8000580:	3203      	addne	r2, #3
 8000582:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000586:	f1c2 0320 	rsb	r3, r2, #32
 800058a:	fa00 fc03 	lsl.w	ip, r0, r3
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 fe03 	lsl.w	lr, r1, r3
 8000596:	ea40 000e 	orr.w	r0, r0, lr
 800059a:	fa21 f102 	lsr.w	r1, r1, r2
 800059e:	4414      	add	r4, r2
 80005a0:	e6bd      	b.n	800031e <__adddf3+0xe6>
 80005a2:	bf00      	nop

080005a4 <__aeabi_dmul>:
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b2:	bf1d      	ittte	ne
 80005b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b8:	ea94 0f0c 	teqne	r4, ip
 80005bc:	ea95 0f0c 	teqne	r5, ip
 80005c0:	f000 f8de 	bleq	8000780 <__aeabi_dmul+0x1dc>
 80005c4:	442c      	add	r4, r5
 80005c6:	ea81 0603 	eor.w	r6, r1, r3
 80005ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d6:	bf18      	it	ne
 80005d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e4:	d038      	beq.n	8000658 <__aeabi_dmul+0xb4>
 80005e6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ea:	f04f 0500 	mov.w	r5, #0
 80005ee:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fa:	f04f 0600 	mov.w	r6, #0
 80005fe:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000602:	f09c 0f00 	teq	ip, #0
 8000606:	bf18      	it	ne
 8000608:	f04e 0e01 	orrne.w	lr, lr, #1
 800060c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000610:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000614:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000618:	d204      	bcs.n	8000624 <__aeabi_dmul+0x80>
 800061a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061e:	416d      	adcs	r5, r5
 8000620:	eb46 0606 	adc.w	r6, r6, r6
 8000624:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000628:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800062c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000630:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000634:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000638:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800063c:	bf88      	it	hi
 800063e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000642:	d81e      	bhi.n	8000682 <__aeabi_dmul+0xde>
 8000644:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000648:	bf08      	it	eq
 800064a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064e:	f150 0000 	adcs.w	r0, r0, #0
 8000652:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800065c:	ea46 0101 	orr.w	r1, r6, r1
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	ea81 0103 	eor.w	r1, r1, r3
 8000668:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800066c:	bfc2      	ittt	gt
 800066e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000672:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000676:	bd70      	popgt	{r4, r5, r6, pc}
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f04f 0e00 	mov.w	lr, #0
 8000680:	3c01      	subs	r4, #1
 8000682:	f300 80ab 	bgt.w	80007dc <__aeabi_dmul+0x238>
 8000686:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068a:	bfde      	ittt	le
 800068c:	2000      	movle	r0, #0
 800068e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000692:	bd70      	pople	{r4, r5, r6, pc}
 8000694:	f1c4 0400 	rsb	r4, r4, #0
 8000698:	3c20      	subs	r4, #32
 800069a:	da35      	bge.n	8000708 <__aeabi_dmul+0x164>
 800069c:	340c      	adds	r4, #12
 800069e:	dc1b      	bgt.n	80006d8 <__aeabi_dmul+0x134>
 80006a0:	f104 0414 	add.w	r4, r4, #20
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f305 	lsl.w	r3, r0, r5
 80006ac:	fa20 f004 	lsr.w	r0, r0, r4
 80006b0:	fa01 f205 	lsl.w	r2, r1, r5
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c4:	fa21 f604 	lsr.w	r6, r1, r4
 80006c8:	eb42 0106 	adc.w	r1, r2, r6
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 040c 	rsb	r4, r4, #12
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f304 	lsl.w	r3, r0, r4
 80006e4:	fa20 f005 	lsr.w	r0, r0, r5
 80006e8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f8:	f141 0100 	adc.w	r1, r1, #0
 80006fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000700:	bf08      	it	eq
 8000702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f205 	lsl.w	r2, r0, r5
 8000710:	ea4e 0e02 	orr.w	lr, lr, r2
 8000714:	fa20 f304 	lsr.w	r3, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea43 0302 	orr.w	r3, r3, r2
 8000720:	fa21 f004 	lsr.w	r0, r1, r4
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	fa21 f204 	lsr.w	r2, r1, r4
 800072c:	ea20 0002 	bic.w	r0, r0, r2
 8000730:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f094 0f00 	teq	r4, #0
 8000744:	d10f      	bne.n	8000766 <__aeabi_dmul+0x1c2>
 8000746:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074a:	0040      	lsls	r0, r0, #1
 800074c:	eb41 0101 	adc.w	r1, r1, r1
 8000750:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000754:	bf08      	it	eq
 8000756:	3c01      	subeq	r4, #1
 8000758:	d0f7      	beq.n	800074a <__aeabi_dmul+0x1a6>
 800075a:	ea41 0106 	orr.w	r1, r1, r6
 800075e:	f095 0f00 	teq	r5, #0
 8000762:	bf18      	it	ne
 8000764:	4770      	bxne	lr
 8000766:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076a:	0052      	lsls	r2, r2, #1
 800076c:	eb43 0303 	adc.w	r3, r3, r3
 8000770:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3d01      	subeq	r5, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1c6>
 800077a:	ea43 0306 	orr.w	r3, r3, r6
 800077e:	4770      	bx	lr
 8000780:	ea94 0f0c 	teq	r4, ip
 8000784:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000788:	bf18      	it	ne
 800078a:	ea95 0f0c 	teqne	r5, ip
 800078e:	d00c      	beq.n	80007aa <__aeabi_dmul+0x206>
 8000790:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000794:	bf18      	it	ne
 8000796:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079a:	d1d1      	bne.n	8000740 <__aeabi_dmul+0x19c>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ae:	bf06      	itte	eq
 80007b0:	4610      	moveq	r0, r2
 80007b2:	4619      	moveq	r1, r3
 80007b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b8:	d019      	beq.n	80007ee <__aeabi_dmul+0x24a>
 80007ba:	ea94 0f0c 	teq	r4, ip
 80007be:	d102      	bne.n	80007c6 <__aeabi_dmul+0x222>
 80007c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c4:	d113      	bne.n	80007ee <__aeabi_dmul+0x24a>
 80007c6:	ea95 0f0c 	teq	r5, ip
 80007ca:	d105      	bne.n	80007d8 <__aeabi_dmul+0x234>
 80007cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d0:	bf1c      	itt	ne
 80007d2:	4610      	movne	r0, r2
 80007d4:	4619      	movne	r1, r3
 80007d6:	d10a      	bne.n	80007ee <__aeabi_dmul+0x24a>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f6:	bd70      	pop	{r4, r5, r6, pc}

080007f8 <__aeabi_ddiv>:
 80007f8:	b570      	push	{r4, r5, r6, lr}
 80007fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000802:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000806:	bf1d      	ittte	ne
 8000808:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800080c:	ea94 0f0c 	teqne	r4, ip
 8000810:	ea95 0f0c 	teqne	r5, ip
 8000814:	f000 f8a7 	bleq	8000966 <__aeabi_ddiv+0x16e>
 8000818:	eba4 0405 	sub.w	r4, r4, r5
 800081c:	ea81 0e03 	eor.w	lr, r1, r3
 8000820:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000824:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000828:	f000 8088 	beq.w	800093c <__aeabi_ddiv+0x144>
 800082c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000830:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000834:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000838:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800083c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000840:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000844:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000848:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800084c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000850:	429d      	cmp	r5, r3
 8000852:	bf08      	it	eq
 8000854:	4296      	cmpeq	r6, r2
 8000856:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085e:	d202      	bcs.n	8000866 <__aeabi_ddiv+0x6e>
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	1ab6      	subs	r6, r6, r2
 8000868:	eb65 0503 	sbc.w	r5, r5, r3
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000876:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 000c 	orrcs.w	r0, r0, ip
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d8:	d018      	beq.n	800090c <__aeabi_ddiv+0x114>
 80008da:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f6:	d1c0      	bne.n	800087a <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	d10b      	bne.n	8000916 <__aeabi_ddiv+0x11e>
 80008fe:	ea41 0100 	orr.w	r1, r1, r0
 8000902:	f04f 0000 	mov.w	r0, #0
 8000906:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090a:	e7b6      	b.n	800087a <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	bf04      	itt	eq
 8000912:	4301      	orreq	r1, r0
 8000914:	2000      	moveq	r0, #0
 8000916:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091a:	bf88      	it	hi
 800091c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000920:	f63f aeaf 	bhi.w	8000682 <__aeabi_dmul+0xde>
 8000924:	ebb5 0c03 	subs.w	ip, r5, r3
 8000928:	bf04      	itt	eq
 800092a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000932:	f150 0000 	adcs.w	r0, r0, #0
 8000936:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093a:	bd70      	pop	{r4, r5, r6, pc}
 800093c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000940:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000944:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000948:	bfc2      	ittt	gt
 800094a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000952:	bd70      	popgt	{r4, r5, r6, pc}
 8000954:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000958:	f04f 0e00 	mov.w	lr, #0
 800095c:	3c01      	subs	r4, #1
 800095e:	e690      	b.n	8000682 <__aeabi_dmul+0xde>
 8000960:	ea45 0e06 	orr.w	lr, r5, r6
 8000964:	e68d      	b.n	8000682 <__aeabi_dmul+0xde>
 8000966:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096a:	ea94 0f0c 	teq	r4, ip
 800096e:	bf08      	it	eq
 8000970:	ea95 0f0c 	teqeq	r5, ip
 8000974:	f43f af3b 	beq.w	80007ee <__aeabi_dmul+0x24a>
 8000978:	ea94 0f0c 	teq	r4, ip
 800097c:	d10a      	bne.n	8000994 <__aeabi_ddiv+0x19c>
 800097e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000982:	f47f af34 	bne.w	80007ee <__aeabi_dmul+0x24a>
 8000986:	ea95 0f0c 	teq	r5, ip
 800098a:	f47f af25 	bne.w	80007d8 <__aeabi_dmul+0x234>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e72c      	b.n	80007ee <__aeabi_dmul+0x24a>
 8000994:	ea95 0f0c 	teq	r5, ip
 8000998:	d106      	bne.n	80009a8 <__aeabi_ddiv+0x1b0>
 800099a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099e:	f43f aefd 	beq.w	800079c <__aeabi_dmul+0x1f8>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e722      	b.n	80007ee <__aeabi_dmul+0x24a>
 80009a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b2:	f47f aec5 	bne.w	8000740 <__aeabi_dmul+0x19c>
 80009b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ba:	f47f af0d 	bne.w	80007d8 <__aeabi_dmul+0x234>
 80009be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c2:	f47f aeeb 	bne.w	800079c <__aeabi_dmul+0x1f8>
 80009c6:	e712      	b.n	80007ee <__aeabi_dmul+0x24a>

080009c8 <__aeabi_d2iz>:
 80009c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d0:	d215      	bcs.n	80009fe <__aeabi_d2iz+0x36>
 80009d2:	d511      	bpl.n	80009f8 <__aeabi_d2iz+0x30>
 80009d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009dc:	d912      	bls.n	8000a04 <__aeabi_d2iz+0x3c>
 80009de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	bf18      	it	ne
 80009f4:	4240      	negne	r0, r0
 80009f6:	4770      	bx	lr
 80009f8:	f04f 0000 	mov.w	r0, #0
 80009fc:	4770      	bx	lr
 80009fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a02:	d105      	bne.n	8000a10 <__aeabi_d2iz+0x48>
 8000a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	bf08      	it	eq
 8000a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a0e:	4770      	bx	lr
 8000a10:	f04f 0000 	mov.w	r0, #0
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_uldivmod>:
 8000a18:	b953      	cbnz	r3, 8000a30 <__aeabi_uldivmod+0x18>
 8000a1a:	b94a      	cbnz	r2, 8000a30 <__aeabi_uldivmod+0x18>
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	bf08      	it	eq
 8000a20:	2800      	cmpeq	r0, #0
 8000a22:	bf1c      	itt	ne
 8000a24:	f04f 31ff 	movne.w	r1, #4294967295
 8000a28:	f04f 30ff 	movne.w	r0, #4294967295
 8000a2c:	f000 b974 	b.w	8000d18 <__aeabi_idiv0>
 8000a30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a38:	f000 f806 	bl	8000a48 <__udivmoddi4>
 8000a3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a44:	b004      	add	sp, #16
 8000a46:	4770      	bx	lr

08000a48 <__udivmoddi4>:
 8000a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a4c:	9d08      	ldr	r5, [sp, #32]
 8000a4e:	4604      	mov	r4, r0
 8000a50:	468e      	mov	lr, r1
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d14d      	bne.n	8000af2 <__udivmoddi4+0xaa>
 8000a56:	428a      	cmp	r2, r1
 8000a58:	4694      	mov	ip, r2
 8000a5a:	d969      	bls.n	8000b30 <__udivmoddi4+0xe8>
 8000a5c:	fab2 f282 	clz	r2, r2
 8000a60:	b152      	cbz	r2, 8000a78 <__udivmoddi4+0x30>
 8000a62:	fa01 f302 	lsl.w	r3, r1, r2
 8000a66:	f1c2 0120 	rsb	r1, r2, #32
 8000a6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a72:	ea41 0e03 	orr.w	lr, r1, r3
 8000a76:	4094      	lsls	r4, r2
 8000a78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a7c:	0c21      	lsrs	r1, r4, #16
 8000a7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000a82:	fa1f f78c 	uxth.w	r7, ip
 8000a86:	fb08 e316 	mls	r3, r8, r6, lr
 8000a8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8e:	fb06 f107 	mul.w	r1, r6, r7
 8000a92:	4299      	cmp	r1, r3
 8000a94:	d90a      	bls.n	8000aac <__udivmoddi4+0x64>
 8000a96:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9e:	f080 811f 	bcs.w	8000ce0 <__udivmoddi4+0x298>
 8000aa2:	4299      	cmp	r1, r3
 8000aa4:	f240 811c 	bls.w	8000ce0 <__udivmoddi4+0x298>
 8000aa8:	3e02      	subs	r6, #2
 8000aaa:	4463      	add	r3, ip
 8000aac:	1a5b      	subs	r3, r3, r1
 8000aae:	b2a4      	uxth	r4, r4
 8000ab0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000abc:	fb00 f707 	mul.w	r7, r0, r7
 8000ac0:	42a7      	cmp	r7, r4
 8000ac2:	d90a      	bls.n	8000ada <__udivmoddi4+0x92>
 8000ac4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000acc:	f080 810a 	bcs.w	8000ce4 <__udivmoddi4+0x29c>
 8000ad0:	42a7      	cmp	r7, r4
 8000ad2:	f240 8107 	bls.w	8000ce4 <__udivmoddi4+0x29c>
 8000ad6:	4464      	add	r4, ip
 8000ad8:	3802      	subs	r0, #2
 8000ada:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ade:	1be4      	subs	r4, r4, r7
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	b11d      	cbz	r5, 8000aec <__udivmoddi4+0xa4>
 8000ae4:	40d4      	lsrs	r4, r2
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e9c5 4300 	strd	r4, r3, [r5]
 8000aec:	4631      	mov	r1, r6
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0xc2>
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	f000 80ef 	beq.w	8000cda <__udivmoddi4+0x292>
 8000afc:	2600      	movs	r6, #0
 8000afe:	e9c5 0100 	strd	r0, r1, [r5]
 8000b02:	4630      	mov	r0, r6
 8000b04:	4631      	mov	r1, r6
 8000b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0a:	fab3 f683 	clz	r6, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d14a      	bne.n	8000ba8 <__udivmoddi4+0x160>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d302      	bcc.n	8000b1c <__udivmoddi4+0xd4>
 8000b16:	4282      	cmp	r2, r0
 8000b18:	f200 80f9 	bhi.w	8000d0e <__udivmoddi4+0x2c6>
 8000b1c:	1a84      	subs	r4, r0, r2
 8000b1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b22:	2001      	movs	r0, #1
 8000b24:	469e      	mov	lr, r3
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	d0e0      	beq.n	8000aec <__udivmoddi4+0xa4>
 8000b2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2e:	e7dd      	b.n	8000aec <__udivmoddi4+0xa4>
 8000b30:	b902      	cbnz	r2, 8000b34 <__udivmoddi4+0xec>
 8000b32:	deff      	udf	#255	; 0xff
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	f040 8092 	bne.w	8000c62 <__udivmoddi4+0x21a>
 8000b3e:	eba1 010c 	sub.w	r1, r1, ip
 8000b42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b46:	fa1f fe8c 	uxth.w	lr, ip
 8000b4a:	2601      	movs	r6, #1
 8000b4c:	0c20      	lsrs	r0, r4, #16
 8000b4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b52:	fb07 1113 	mls	r1, r7, r3, r1
 8000b56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b5a:	fb0e f003 	mul.w	r0, lr, r3
 8000b5e:	4288      	cmp	r0, r1
 8000b60:	d908      	bls.n	8000b74 <__udivmoddi4+0x12c>
 8000b62:	eb1c 0101 	adds.w	r1, ip, r1
 8000b66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b6a:	d202      	bcs.n	8000b72 <__udivmoddi4+0x12a>
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	f200 80cb 	bhi.w	8000d08 <__udivmoddi4+0x2c0>
 8000b72:	4643      	mov	r3, r8
 8000b74:	1a09      	subs	r1, r1, r0
 8000b76:	b2a4      	uxth	r4, r4
 8000b78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000b80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b84:	fb0e fe00 	mul.w	lr, lr, r0
 8000b88:	45a6      	cmp	lr, r4
 8000b8a:	d908      	bls.n	8000b9e <__udivmoddi4+0x156>
 8000b8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b94:	d202      	bcs.n	8000b9c <__udivmoddi4+0x154>
 8000b96:	45a6      	cmp	lr, r4
 8000b98:	f200 80bb 	bhi.w	8000d12 <__udivmoddi4+0x2ca>
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ba2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba6:	e79c      	b.n	8000ae2 <__udivmoddi4+0x9a>
 8000ba8:	f1c6 0720 	rsb	r7, r6, #32
 8000bac:	40b3      	lsls	r3, r6
 8000bae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bb2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb6:	fa20 f407 	lsr.w	r4, r0, r7
 8000bba:	fa01 f306 	lsl.w	r3, r1, r6
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	40f9      	lsrs	r1, r7
 8000bc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000bca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bce:	0c20      	lsrs	r0, r4, #16
 8000bd0:	fa1f fe8c 	uxth.w	lr, ip
 8000bd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bdc:	fb08 f00e 	mul.w	r0, r8, lr
 8000be0:	4288      	cmp	r0, r1
 8000be2:	fa02 f206 	lsl.w	r2, r2, r6
 8000be6:	d90b      	bls.n	8000c00 <__udivmoddi4+0x1b8>
 8000be8:	eb1c 0101 	adds.w	r1, ip, r1
 8000bec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bf0:	f080 8088 	bcs.w	8000d04 <__udivmoddi4+0x2bc>
 8000bf4:	4288      	cmp	r0, r1
 8000bf6:	f240 8085 	bls.w	8000d04 <__udivmoddi4+0x2bc>
 8000bfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfe:	4461      	add	r1, ip
 8000c00:	1a09      	subs	r1, r1, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c08:	fb09 1110 	mls	r1, r9, r0, r1
 8000c0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c14:	458e      	cmp	lr, r1
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x1e2>
 8000c18:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c20:	d26c      	bcs.n	8000cfc <__udivmoddi4+0x2b4>
 8000c22:	458e      	cmp	lr, r1
 8000c24:	d96a      	bls.n	8000cfc <__udivmoddi4+0x2b4>
 8000c26:	3802      	subs	r0, #2
 8000c28:	4461      	add	r1, ip
 8000c2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000c32:	eba1 010e 	sub.w	r1, r1, lr
 8000c36:	42a1      	cmp	r1, r4
 8000c38:	46c8      	mov	r8, r9
 8000c3a:	46a6      	mov	lr, r4
 8000c3c:	d356      	bcc.n	8000cec <__udivmoddi4+0x2a4>
 8000c3e:	d053      	beq.n	8000ce8 <__udivmoddi4+0x2a0>
 8000c40:	b15d      	cbz	r5, 8000c5a <__udivmoddi4+0x212>
 8000c42:	ebb3 0208 	subs.w	r2, r3, r8
 8000c46:	eb61 010e 	sbc.w	r1, r1, lr
 8000c4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000c52:	40f1      	lsrs	r1, r6
 8000c54:	431f      	orrs	r7, r3
 8000c56:	e9c5 7100 	strd	r7, r1, [r5]
 8000c5a:	2600      	movs	r6, #0
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	f1c2 0320 	rsb	r3, r2, #32
 8000c66:	40d8      	lsrs	r0, r3
 8000c68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000c70:	4091      	lsls	r1, r2
 8000c72:	4301      	orrs	r1, r0
 8000c74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c78:	fa1f fe8c 	uxth.w	lr, ip
 8000c7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c80:	fb07 3610 	mls	r6, r7, r0, r3
 8000c84:	0c0b      	lsrs	r3, r1, #16
 8000c86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8e:	429e      	cmp	r6, r3
 8000c90:	fa04 f402 	lsl.w	r4, r4, r2
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x260>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9e:	d22f      	bcs.n	8000d00 <__udivmoddi4+0x2b8>
 8000ca0:	429e      	cmp	r6, r3
 8000ca2:	d92d      	bls.n	8000d00 <__udivmoddi4+0x2b8>
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	1b9b      	subs	r3, r3, r6
 8000caa:	b289      	uxth	r1, r1
 8000cac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x28a>
 8000cc0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc8:	d216      	bcs.n	8000cf8 <__udivmoddi4+0x2b0>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d914      	bls.n	8000cf8 <__udivmoddi4+0x2b0>
 8000cce:	3e02      	subs	r6, #2
 8000cd0:	4461      	add	r1, ip
 8000cd2:	1ac9      	subs	r1, r1, r3
 8000cd4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd8:	e738      	b.n	8000b4c <__udivmoddi4+0x104>
 8000cda:	462e      	mov	r6, r5
 8000cdc:	4628      	mov	r0, r5
 8000cde:	e705      	b.n	8000aec <__udivmoddi4+0xa4>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	e6e3      	b.n	8000aac <__udivmoddi4+0x64>
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	e6f8      	b.n	8000ada <__udivmoddi4+0x92>
 8000ce8:	454b      	cmp	r3, r9
 8000cea:	d2a9      	bcs.n	8000c40 <__udivmoddi4+0x1f8>
 8000cec:	ebb9 0802 	subs.w	r8, r9, r2
 8000cf0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf4:	3801      	subs	r0, #1
 8000cf6:	e7a3      	b.n	8000c40 <__udivmoddi4+0x1f8>
 8000cf8:	4646      	mov	r6, r8
 8000cfa:	e7ea      	b.n	8000cd2 <__udivmoddi4+0x28a>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	e794      	b.n	8000c2a <__udivmoddi4+0x1e2>
 8000d00:	4640      	mov	r0, r8
 8000d02:	e7d1      	b.n	8000ca8 <__udivmoddi4+0x260>
 8000d04:	46d0      	mov	r8, sl
 8000d06:	e77b      	b.n	8000c00 <__udivmoddi4+0x1b8>
 8000d08:	3b02      	subs	r3, #2
 8000d0a:	4461      	add	r1, ip
 8000d0c:	e732      	b.n	8000b74 <__udivmoddi4+0x12c>
 8000d0e:	4630      	mov	r0, r6
 8000d10:	e709      	b.n	8000b26 <__udivmoddi4+0xde>
 8000d12:	4464      	add	r4, ip
 8000d14:	3802      	subs	r0, #2
 8000d16:	e742      	b.n	8000b9e <__udivmoddi4+0x156>

08000d18 <__aeabi_idiv0>:
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	0a5a      	lsrs	r2, r3, #9
 8000d2c:	490f      	ldr	r1, [pc, #60]	; (8000d6c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000d2e:	fba1 1202 	umull	r1, r2, r1, r2
 8000d32:	09d2      	lsrs	r2, r2, #7
 8000d34:	490e      	ldr	r1, [pc, #56]	; (8000d70 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000d36:	fb01 f202 	mul.w	r2, r1, r2
 8000d3a:	1a9b      	subs	r3, r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	0a5b      	lsrs	r3, r3, #9
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000d46:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4a:	09db      	lsrs	r3, r3, #7
 8000d4c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	441a      	add	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	601a      	str	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	00044b83 	.word	0x00044b83
 8000d70:	3b9aca00 	.word	0x3b9aca00

08000d74 <UART_Send>:
#include "gpio.h"
#include <math.h>

extern UART_HandleTypeDef huart3;
int Checksum_Calc, count = 0;
void UART_Send(uint8_t u8_data) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	uint8_t *u8_pointer = &u8_data;
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, u8_pointer, 1, 100);
 8000d82:	2364      	movs	r3, #100	; 0x64
 8000d84:	2201      	movs	r2, #1
 8000d86:	68f9      	ldr	r1, [r7, #12]
 8000d88:	4806      	ldr	r0, [pc, #24]	; (8000da4 <UART_Send+0x30>)
 8000d8a:	f00c fef7 	bl	800db7c <HAL_UART_Transmit>

	Checksum_Calc += u8_data;
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <UART_Send+0x34>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a03      	ldr	r2, [pc, #12]	; (8000da8 <UART_Send+0x34>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200018c0 	.word	0x200018c0
 8000da8:	20000368 	.word	0x20000368

08000dac <UART_Send_SetMotorPosition>:

void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position,
		uint16_t Time) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
 8000db6:	460b      	mov	r3, r1
 8000db8:	80bb      	strh	r3, [r7, #4]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	807b      	strh	r3, [r7, #2]
	Checksum_Calc = 0;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <UART_Send_SetMotorPosition+0x84>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
	UART_Send(0x80 + motorId);    //header mark & broadcast ID
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	3b80      	subs	r3, #128	; 0x80
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ffd1 	bl	8000d74 <UART_Send>
	UART_Send(0x83);              //header mark & command code
 8000dd2:	2083      	movs	r0, #131	; 0x83
 8000dd4:	f7ff ffce 	bl	8000d74 <UART_Send>
	UART_Send(0x05);              //total data length
 8000dd8:	2005      	movs	r0, #5
 8000dda:	f7ff ffcb 	bl	8000d74 <UART_Send>
	UART_Send((Position / 256) & 0x7F);  //Servo Pos_H
 8000dde:	88bb      	ldrh	r3, [r7, #4]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ffc1 	bl	8000d74 <UART_Send>
	UART_Send(Position % 256);           //Servo Pos_L
 8000df2:	88bb      	ldrh	r3, [r7, #4]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ffbc 	bl	8000d74 <UART_Send>
	UART_Send((Time / 256) & 0x7F); //Servo Time_H
 8000dfc:	887b      	ldrh	r3, [r7, #2]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ffb2 	bl	8000d74 <UART_Send>
	UART_Send(Time % 256);          //Servo Time_L
 8000e10:	887b      	ldrh	r3, [r7, #2]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ffad 	bl	8000d74 <UART_Send>
	UART_Send(Checksum_Calc);     //data length (one servo with time and speed)
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <UART_Send_SetMotorPosition+0x84>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ffa7 	bl	8000d74 <UART_Send>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000368 	.word	0x20000368

08000e34 <VL53_Init>:
int GroundHeight[3];
int CakeStatus[3];

int CakeHeightGate[3][3];

void VL53_Init() {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
	uint32_t refSpadCount[3];
	uint8_t isApertureSpads[3];
	uint8_t VhvSettings[3];
	uint8_t PhaseCal[3];

	for (size_t i = 0; i < 3; i++) {
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e3e:	e01c      	b.n	8000e7a <VL53_Init+0x46>
		vl53_dev[i] = &vl53l0x_c[i];
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	4a6f      	ldr	r2, [pc, #444]	; (8001008 <VL53_Init+0x1d4>)
 8000e4c:	441a      	add	r2, r3
 8000e4e:	496f      	ldr	r1, [pc, #444]	; (800100c <VL53_Init+0x1d8>)
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_GPIO_WritePin(TOF_XSHUT_PORT[i], TOF_XSHUT_PIN[i], GPIO_PIN_RESET); // put XSHUT to low (Disable VL53)
 8000e56:	4a6e      	ldr	r2, [pc, #440]	; (8001010 <VL53_Init+0x1dc>)
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e5e:	4a6d      	ldr	r2, [pc, #436]	; (8001014 <VL53_Init+0x1e0>)
 8000e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e66:	2200      	movs	r2, #0
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f008 fafd 	bl	8009468 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000e6e:	2064      	movs	r0, #100	; 0x64
 8000e70:	f007 f82a 	bl	8007ec8 <HAL_Delay>
	for (size_t i = 0; i < 3; i++) {
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	3301      	adds	r3, #1
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d9df      	bls.n	8000e40 <VL53_Init+0xc>
	}

	for (size_t i = 0; i < 3; i++) {
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
 8000e84:	e0b6      	b.n	8000ff4 <VL53_Init+0x1c0>
		isVL53_InitSuccess[i] = 1;
 8000e86:	4a64      	ldr	r2, [pc, #400]	; (8001018 <VL53_Init+0x1e4>)
 8000e88:	6a3b      	ldr	r3, [r7, #32]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]
		VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	77fb      	strb	r3, [r7, #31]

		HAL_GPIO_WritePin(TOF_XSHUT_PORT[i], TOF_XSHUT_PIN[i], GPIO_PIN_SET); // put XSHUT to high (Enable VL53)
 8000e94:	4a5e      	ldr	r2, [pc, #376]	; (8001010 <VL53_Init+0x1dc>)
 8000e96:	6a3b      	ldr	r3, [r7, #32]
 8000e98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e9c:	4a5d      	ldr	r2, [pc, #372]	; (8001014 <VL53_Init+0x1e0>)
 8000e9e:	6a3b      	ldr	r3, [r7, #32]
 8000ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f008 fade 	bl	8009468 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000eac:	2064      	movs	r0, #100	; 0x64
 8000eae:	f007 f80b 	bl	8007ec8 <HAL_Delay>

		vl53_dev[i]->I2cHandle = &hi2c1;
 8000eb2:	4a56      	ldr	r2, [pc, #344]	; (800100c <VL53_Init+0x1d8>)
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
 8000eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eba:	4a58      	ldr	r2, [pc, #352]	; (800101c <VL53_Init+0x1e8>)
 8000ebc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
		vl53_dev[i]->I2cDevAddr = 0x29 << 1; // 0x52 -> Default address
 8000ec0:	4a52      	ldr	r2, [pc, #328]	; (800100c <VL53_Init+0x1d8>)
 8000ec2:	6a3b      	ldr	r3, [r7, #32]
 8000ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec8:	2252      	movs	r2, #82	; 0x52
 8000eca:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		Status = VL53L0X_SetDeviceAddress(vl53_dev[i],
 8000ece:	4a4f      	ldr	r2, [pc, #316]	; (800100c <VL53_Init+0x1d8>)
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
				(0x29 + VL53_ADDRESS[i] + 1) << 1);
 8000ed6:	4952      	ldr	r1, [pc, #328]	; (8001020 <VL53_Init+0x1ec>)
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
 8000eda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	332a      	adds	r3, #42	; 0x2a
 8000ee2:	b2db      	uxtb	r3, r3
		Status = VL53L0X_SetDeviceAddress(vl53_dev[i],
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4610      	mov	r0, r2
 8000eec:	f00e f92d 	bl	800f14a <VL53L0X_SetDeviceAddress>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	77fb      	strb	r3, [r7, #31]
		vl53_dev[i]->I2cDevAddr = (0x29 + VL53_ADDRESS[i] + 1) << 1;
 8000ef4:	4a4a      	ldr	r2, [pc, #296]	; (8001020 <VL53_Init+0x1ec>)
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	332a      	adds	r3, #42	; 0x2a
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4942      	ldr	r1, [pc, #264]	; (800100c <VL53_Init+0x1d8>)
 8000f04:	6a3b      	ldr	r3, [r7, #32]
 8000f06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f0a:	0052      	lsls	r2, r2, #1
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		if (Status != VL53L0X_ERROR_NONE) {
 8000f12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d004      	beq.n	8000f24 <VL53_Init+0xf0>
			isVL53_InitSuccess[i] = 0;
 8000f1a:	4a3f      	ldr	r2, [pc, #252]	; (8001018 <VL53_Init+0x1e4>)
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	4413      	add	r3, r2
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
		}

		// VL53L0X init for Single Measurement
		Status = VL53L0X_DataInit(vl53_dev[i]);
 8000f24:	4a39      	ldr	r2, [pc, #228]	; (800100c <VL53_Init+0x1d8>)
 8000f26:	6a3b      	ldr	r3, [r7, #32]
 8000f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f00e f925 	bl	800f17c <VL53L0X_DataInit>
 8000f32:	4603      	mov	r3, r0
 8000f34:	77fb      	strb	r3, [r7, #31]
		if (Status != VL53L0X_ERROR_NONE) {
 8000f36:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d004      	beq.n	8000f48 <VL53_Init+0x114>
			isVL53_InitSuccess[i] = 0;
 8000f3e:	4a36      	ldr	r2, [pc, #216]	; (8001018 <VL53_Init+0x1e4>)
 8000f40:	6a3b      	ldr	r3, [r7, #32]
 8000f42:	4413      	add	r3, r2
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
		}

		VL53L0X_StaticInit(vl53_dev[i]);
 8000f48:	4a30      	ldr	r2, [pc, #192]	; (800100c <VL53_Init+0x1d8>)
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00e fa77 	bl	800f444 <VL53L0X_StaticInit>
		VL53L0X_PerformRefCalibration(vl53_dev[i], &VhvSettings[i],
 8000f56:	4a2d      	ldr	r2, [pc, #180]	; (800100c <VL53_Init+0x1d8>)
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f5e:	f107 0208 	add.w	r2, r7, #8
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	18d1      	adds	r1, r2, r3
 8000f66:	1d3a      	adds	r2, r7, #4
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	f00f f8e5 	bl	801013c <VL53L0X_PerformRefCalibration>
				&PhaseCal[i]);
		VL53L0X_PerformRefSpadManagement(vl53_dev[i], &refSpadCount[i],
 8000f72:	4a26      	ldr	r2, [pc, #152]	; (800100c <VL53_Init+0x1d8>)
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f7a:	f107 0210 	add.w	r2, r7, #16
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	18d1      	adds	r1, r2, r3
 8000f84:	f107 020c 	add.w	r2, r7, #12
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	f00f fd63 	bl	8010a58 <VL53L0X_PerformRefSpadManagement>
		// Enable Sigma
		// Standard :      (18 * 65536)
		// High accuracy : (18 * 65536)
		// Long range :    (60 * 65536)
		// High speed :    (32 * 65536)
		VL53L0X_SetLimitCheckEnable(vl53_dev[i],
 8000f92:	4a1e      	ldr	r2, [pc, #120]	; (800100c <VL53_Init+0x1d8>)
 8000f94:	6a3b      	ldr	r3, [r7, #32]
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00e fec6 	bl	800fd30 <VL53L0X_SetLimitCheckEnable>
		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
		VL53L0X_SetLimitCheckValue(vl53_dev[i],
 8000fa4:	4a19      	ldr	r2, [pc, #100]	; (800100c <VL53_Init+0x1d8>)
 8000fa6:	6a3b      	ldr	r3, [r7, #32]
 8000fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fac:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f00e ff6c 	bl	800fe90 <VL53L0X_SetLimitCheckValue>
		// Enable Return Signal Rate
		// Standard :      (0.25 * 65536)
		// High accuracy : (0.25 * 65536)
		// Long range :    (0.10 * 65536)
		// High speed :    (0.25 * 65536)
		VL53L0X_SetLimitCheckEnable(vl53_dev[i],
 8000fb8:	4a14      	ldr	r2, [pc, #80]	; (800100c <VL53_Init+0x1d8>)
 8000fba:	6a3b      	ldr	r3, [r7, #32]
 8000fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f00e feb3 	bl	800fd30 <VL53L0X_SetLimitCheckEnable>
		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
		VL53L0X_SetLimitCheckValue(vl53_dev[i],
 8000fca:	4a10      	ldr	r2, [pc, #64]	; (800100c <VL53_Init+0x1d8>)
 8000fcc:	6a3b      	ldr	r3, [r7, #32]
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f00e ff59 	bl	800fe90 <VL53L0X_SetLimitCheckValue>
		// Set the total measurement time
		// Standard :       30000
		// High accuracy : 200000
		// Long range :     33000
		// High speed :     20000
		VL53L0X_SetMeasurementTimingBudgetMicroSeconds(vl53_dev[i], 200000);
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <VL53_Init+0x1d8>)
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe6:	490f      	ldr	r1, [pc, #60]	; (8001024 <VL53_Init+0x1f0>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f00e fc9b 	bl	800f924 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	for (size_t i = 0; i < 3; i++) {
 8000fee:	6a3b      	ldr	r3, [r7, #32]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	623b      	str	r3, [r7, #32]
 8000ff4:	6a3b      	ldr	r3, [r7, #32]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	f67f af45 	bls.w	8000e86 <VL53_Init+0x52>
		// Enable Long Distance
		// VL53L0X_SetVcselPulsePeriod(vl53_dev[i], VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
		// VL53L0X_SetVcselPulsePeriod(vl53_dev[i], VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
	}

}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200003d4 	.word	0x200003d4
 800100c:	20000884 	.word	0x20000884
 8001010:	20000000 	.word	0x20000000
 8001014:	08014238 	.word	0x08014238
 8001018:	2000036c 	.word	0x2000036c
 800101c:	200009e0 	.word	0x200009e0
 8001020:	08014240 	.word	0x08014240
 8001024:	00030d40 	.word	0x00030d40

08001028 <VL53_FirstMeasurement>:

void VL53_FirstMeasurement() {
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
	const int MeasurementTime = 3;
 800102e:	2303      	movs	r3, #3
 8001030:	60fb      	str	r3, [r7, #12]
	int AverageHeight[3] = { 0 };
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]

	for (size_t Time = 0; Time < MeasurementTime; Time++) {
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	e036      	b.n	80010b0 <VL53_FirstMeasurement+0x88>
		for (size_t i = 0; i < 3; i++) {
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
 8001046:	e02d      	b.n	80010a4 <VL53_FirstMeasurement+0x7c>
			VL53_Status[i] = VL53L0X_PerformSingleRangingMeasurement(
 8001048:	4a4e      	ldr	r2, [pc, #312]	; (8001184 <VL53_FirstMeasurement+0x15c>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4613      	mov	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4a4b      	ldr	r2, [pc, #300]	; (8001188 <VL53_FirstMeasurement+0x160>)
 800105c:	4413      	add	r3, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f00f fb0e 	bl	8010680 <VL53L0X_PerformSingleRangingMeasurement>
 8001064:	4603      	mov	r3, r0
 8001066:	4619      	mov	r1, r3
 8001068:	4a48      	ldr	r2, [pc, #288]	; (800118c <VL53_FirstMeasurement+0x164>)
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	4413      	add	r3, r2
 800106e:	460a      	mov	r2, r1
 8001070:	701a      	strb	r2, [r3, #0]
					vl53_dev[i], &(RangingData[i]));
			AverageHeight[i] += RangingData[i].RangeMilliMeter;
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	3320      	adds	r3, #32
 8001078:	443b      	add	r3, r7
 800107a:	f853 1c20 	ldr.w	r1, [r3, #-32]
 800107e:	4842      	ldr	r0, [pc, #264]	; (8001188 <VL53_FirstMeasurement+0x160>)
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4613      	mov	r3, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	1a9b      	subs	r3, r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4403      	add	r3, r0
 800108c:	3308      	adds	r3, #8
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	18ca      	adds	r2, r1, r3
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	3320      	adds	r3, #32
 8001098:	443b      	add	r3, r7
 800109a:	f843 2c20 	str.w	r2, [r3, #-32]
		for (size_t i = 0; i < 3; i++) {
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	3301      	adds	r3, #1
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d9ce      	bls.n	8001048 <VL53_FirstMeasurement+0x20>
	for (size_t Time = 0; Time < MeasurementTime; Time++) {
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3301      	adds	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d3c4      	bcc.n	8001042 <VL53_FirstMeasurement+0x1a>
		}
	}
	for (size_t i = 0; i < 3; i++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	e01b      	b.n	80010f6 <VL53_FirstMeasurement+0xce>
		GroundHeight[i] = AverageHeight[i] / 3.0;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	3320      	adds	r3, #32
 80010c4:	443b      	add	r3, r7
 80010c6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fa00 	bl	80004d0 <__aeabi_i2d>
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <VL53_FirstMeasurement+0x168>)
 80010d6:	f7ff fb8f 	bl	80007f8 <__aeabi_ddiv>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	f7ff fc71 	bl	80009c8 <__aeabi_d2iz>
 80010e6:	4602      	mov	r2, r0
 80010e8:	492a      	ldr	r1, [pc, #168]	; (8001194 <VL53_FirstMeasurement+0x16c>)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < 3; i++) {
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3301      	adds	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d9e0      	bls.n	80010be <VL53_FirstMeasurement+0x96>
	}

	for (size_t i = 0; i < 3; i++) {
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	e037      	b.n	8001172 <VL53_FirstMeasurement+0x14a>
		CakeHeightGate[i][0] = GroundHeight[i] - CAKE_HEIGHT / 2;
 8001102:	4a24      	ldr	r2, [pc, #144]	; (8001194 <VL53_FirstMeasurement+0x16c>)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110a:	f1a3 010a 	sub.w	r1, r3, #10
 800110e:	4822      	ldr	r0, [pc, #136]	; (8001198 <VL53_FirstMeasurement+0x170>)
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4403      	add	r3, r0
 800111c:	6019      	str	r1, [r3, #0]
		CakeHeightGate[i][1] = CakeHeightGate[i][0] - CAKE_HEIGHT;
 800111e:	491e      	ldr	r1, [pc, #120]	; (8001198 <VL53_FirstMeasurement+0x170>)
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4613      	mov	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f1a3 0114 	sub.w	r1, r3, #20
 8001132:	4819      	ldr	r0, [pc, #100]	; (8001198 <VL53_FirstMeasurement+0x170>)
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4613      	mov	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4403      	add	r3, r0
 8001140:	3304      	adds	r3, #4
 8001142:	6019      	str	r1, [r3, #0]
		CakeHeightGate[i][2] = CakeHeightGate[i][1] - CAKE_HEIGHT;
 8001144:	4914      	ldr	r1, [pc, #80]	; (8001198 <VL53_FirstMeasurement+0x170>)
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	3304      	adds	r3, #4
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f1a3 0114 	sub.w	r1, r3, #20
 800115a:	480f      	ldr	r0, [pc, #60]	; (8001198 <VL53_FirstMeasurement+0x170>)
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4613      	mov	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4413      	add	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4403      	add	r3, r0
 8001168:	3308      	adds	r3, #8
 800116a:	6019      	str	r1, [r3, #0]
	for (size_t i = 0; i < 3; i++) {
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	3301      	adds	r3, #1
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d9c4      	bls.n	8001102 <VL53_FirstMeasurement+0xda>
	}
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000884 	.word	0x20000884
 8001188:	20000380 	.word	0x20000380
 800118c:	20000370 	.word	0x20000370
 8001190:	40080000 	.word	0x40080000
 8001194:	20000890 	.word	0x20000890
 8001198:	200008a8 	.word	0x200008a8

0800119c <VL53_Update>:

// Measurement distance
void VL53_Update() {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	for (size_t i = 0; i < 3; i++) {
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	e025      	b.n	80011f4 <VL53_Update+0x58>
		VL53_Status[i] = VL53L0X_PerformSingleRangingMeasurement(vl53_dev[i],
 80011a8:	4a3c      	ldr	r2, [pc, #240]	; (800129c <VL53_Update+0x100>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	1a9b      	subs	r3, r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4a39      	ldr	r2, [pc, #228]	; (80012a0 <VL53_Update+0x104>)
 80011bc:	4413      	add	r3, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f00f fa5e 	bl	8010680 <VL53L0X_PerformSingleRangingMeasurement>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4619      	mov	r1, r3
 80011c8:	4a36      	ldr	r2, [pc, #216]	; (80012a4 <VL53_Update+0x108>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	460a      	mov	r2, r1
 80011d0:	701a      	strb	r2, [r3, #0]
				&(RangingData[i]));
		VL53_RangeResult[i] = RangingData[i].RangeMilliMeter;
 80011d2:	4933      	ldr	r1, [pc, #204]	; (80012a0 <VL53_Update+0x104>)
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	440b      	add	r3, r1
 80011e0:	3308      	adds	r3, #8
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	4a30      	ldr	r2, [pc, #192]	; (80012a8 <VL53_Update+0x10c>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (size_t i = 0; i < 3; i++) {
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3301      	adds	r3, #1
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d9d6      	bls.n	80011a8 <VL53_Update+0xc>
	}

	for (size_t i = 0; i < 3; i++) {
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	e045      	b.n	800128c <VL53_Update+0xf0>
		if (VL53_RangeResult[i] < CakeHeightGate[i][2]) {
 8001200:	4a29      	ldr	r2, [pc, #164]	; (80012a8 <VL53_Update+0x10c>)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001208:	4828      	ldr	r0, [pc, #160]	; (80012ac <VL53_Update+0x110>)
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4403      	add	r3, r0
 8001216:	3308      	adds	r3, #8
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4299      	cmp	r1, r3
 800121c:	da05      	bge.n	800122a <VL53_Update+0x8e>
			CakeStatus[i] = 3;
 800121e:	4a24      	ldr	r2, [pc, #144]	; (80012b0 <VL53_Update+0x114>)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	2103      	movs	r1, #3
 8001224:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001228:	e02d      	b.n	8001286 <VL53_Update+0xea>
		}
		else if (VL53_RangeResult[i] < CakeHeightGate[i][1]) {
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <VL53_Update+0x10c>)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001232:	481e      	ldr	r0, [pc, #120]	; (80012ac <VL53_Update+0x110>)
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4403      	add	r3, r0
 8001240:	3304      	adds	r3, #4
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4299      	cmp	r1, r3
 8001246:	da05      	bge.n	8001254 <VL53_Update+0xb8>
			CakeStatus[i] = 2;
 8001248:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <VL53_Update+0x114>)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2102      	movs	r1, #2
 800124e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001252:	e018      	b.n	8001286 <VL53_Update+0xea>
		}
		else if (VL53_RangeResult[i] < CakeHeightGate[i][0]) {
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <VL53_Update+0x10c>)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800125c:	4813      	ldr	r0, [pc, #76]	; (80012ac <VL53_Update+0x110>)
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4403      	add	r3, r0
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4299      	cmp	r1, r3
 800126e:	da05      	bge.n	800127c <VL53_Update+0xe0>
			CakeStatus[i] = 1;
 8001270:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <VL53_Update+0x114>)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	2101      	movs	r1, #1
 8001276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800127a:	e004      	b.n	8001286 <VL53_Update+0xea>
		}
		else {
			CakeStatus[i] = 0;
 800127c:	4a0c      	ldr	r2, [pc, #48]	; (80012b0 <VL53_Update+0x114>)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	2100      	movs	r1, #0
 8001282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (size_t i = 0; i < 3; i++) {
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d9b6      	bls.n	8001200 <VL53_Update+0x64>
		}
	}
}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000884 	.word	0x20000884
 80012a0:	20000380 	.word	0x20000380
 80012a4:	20000370 	.word	0x20000370
 80012a8:	20000374 	.word	0x20000374
 80012ac:	200008a8 	.word	0x200008a8
 80012b0:	2000089c 	.word	0x2000089c

080012b4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ba:	463b      	mov	r3, r7
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012c6:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <MX_ADC1_Init+0xd0>)
 80012c8:	4a2f      	ldr	r2, [pc, #188]	; (8001388 <MX_ADC1_Init+0xd4>)
 80012ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012cc:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <MX_ADC1_Init+0xd0>)
 80012ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <MX_ADC1_Init+0xd0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012da:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <MX_ADC1_Init+0xd0>)
 80012dc:	2201      	movs	r2, #1
 80012de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012e0:	4b28      	ldr	r3, [pc, #160]	; (8001384 <MX_ADC1_Init+0xd0>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012e6:	4b27      	ldr	r3, [pc, #156]	; (8001384 <MX_ADC1_Init+0xd0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ee:	4b25      	ldr	r3, [pc, #148]	; (8001384 <MX_ADC1_Init+0xd0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f4:	4b23      	ldr	r3, [pc, #140]	; (8001384 <MX_ADC1_Init+0xd0>)
 80012f6:	4a25      	ldr	r2, [pc, #148]	; (800138c <MX_ADC1_Init+0xd8>)
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012fa:	4b22      	ldr	r3, [pc, #136]	; (8001384 <MX_ADC1_Init+0xd0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001300:	4b20      	ldr	r3, [pc, #128]	; (8001384 <MX_ADC1_Init+0xd0>)
 8001302:	2203      	movs	r2, #3
 8001304:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <MX_ADC1_Init+0xd0>)
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_ADC1_Init+0xd0>)
 8001310:	2201      	movs	r2, #1
 8001312:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001314:	481b      	ldr	r0, [pc, #108]	; (8001384 <MX_ADC1_Init+0xd0>)
 8001316:	f006 fdfb 	bl	8007f10 <HAL_ADC_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001320:	f002 fa94 	bl	800384c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001324:	2305      	movs	r3, #5
 8001326:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001328:	2301      	movs	r3, #1
 800132a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	4619      	mov	r1, r3
 8001334:	4813      	ldr	r0, [pc, #76]	; (8001384 <MX_ADC1_Init+0xd0>)
 8001336:	f006 fe2f 	bl	8007f98 <HAL_ADC_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001340:	f002 fa84 	bl	800384c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001344:	2306      	movs	r3, #6
 8001346:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001348:	2302      	movs	r3, #2
 800134a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	4619      	mov	r1, r3
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <MX_ADC1_Init+0xd0>)
 8001352:	f006 fe21 	bl	8007f98 <HAL_ADC_ConfigChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800135c:	f002 fa76 	bl	800384c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001360:	2307      	movs	r3, #7
 8001362:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001364:	2303      	movs	r3, #3
 8001366:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001368:	463b      	mov	r3, r7
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_ADC1_Init+0xd0>)
 800136e:	f006 fe13 	bl	8007f98 <HAL_ADC_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001378:	f002 fa68 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200008cc 	.word	0x200008cc
 8001388:	40012000 	.word	0x40012000
 800138c:	0f000001 	.word	0x0f000001

08001390 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a2f      	ldr	r2, [pc, #188]	; (800146c <HAL_ADC_MspInit+0xdc>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d157      	bne.n	8001462 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <HAL_ADC_MspInit+0xe0>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a2d      	ldr	r2, [pc, #180]	; (8001470 <HAL_ADC_MspInit+0xe0>)
 80013bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <HAL_ADC_MspInit+0xe0>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b27      	ldr	r3, [pc, #156]	; (8001470 <HAL_ADC_MspInit+0xe0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a26      	ldr	r2, [pc, #152]	; (8001470 <HAL_ADC_MspInit+0xe0>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b24      	ldr	r3, [pc, #144]	; (8001470 <HAL_ADC_MspInit+0xe0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013ea:	23e0      	movs	r3, #224	; 0xe0
 80013ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ee:	2303      	movs	r3, #3
 80013f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	481d      	ldr	r0, [pc, #116]	; (8001474 <HAL_ADC_MspInit+0xe4>)
 80013fe:	f007 fdab 	bl	8008f58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001402:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_ADC_MspInit+0xe8>)
 8001404:	4a1d      	ldr	r2, [pc, #116]	; (800147c <HAL_ADC_MspInit+0xec>)
 8001406:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_ADC_MspInit+0xe8>)
 800140a:	2200      	movs	r2, #0
 800140c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <HAL_ADC_MspInit+0xe8>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_ADC_MspInit+0xe8>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_ADC_MspInit+0xe8>)
 800141c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001420:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_ADC_MspInit+0xe8>)
 8001424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001428:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800142a:	4b13      	ldr	r3, [pc, #76]	; (8001478 <HAL_ADC_MspInit+0xe8>)
 800142c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001430:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_ADC_MspInit+0xe8>)
 8001434:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001438:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_ADC_MspInit+0xe8>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_ADC_MspInit+0xe8>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001446:	480c      	ldr	r0, [pc, #48]	; (8001478 <HAL_ADC_MspInit+0xe8>)
 8001448:	f007 f918 	bl	800867c <HAL_DMA_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001452:	f002 f9fb 	bl	800384c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a07      	ldr	r2, [pc, #28]	; (8001478 <HAL_ADC_MspInit+0xe8>)
 800145a:	639a      	str	r2, [r3, #56]	; 0x38
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <HAL_ADC_MspInit+0xe8>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001462:	bf00      	nop
 8001464:	3728      	adds	r7, #40	; 0x28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40012000 	.word	0x40012000
 8001470:	40023800 	.word	0x40023800
 8001474:	40020000 	.word	0x40020000
 8001478:	20000914 	.word	0x20000914
 800147c:	40026410 	.word	0x40026410

08001480 <bee>:
#include <string.h>

#ifndef __BEE_H__
#define __BEE_H__

uint8_t bee(char *str) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

	uint8_t data = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]

	if (strcmp((char*) str, (char*) "one") == 0) {
 800148c:	4930      	ldr	r1, [pc, #192]	; (8001550 <bee+0xd0>)
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7fe feba 	bl	8000208 <strcmp>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d102      	bne.n	80014a0 <bee+0x20>
		data = 'a';
 800149a:	2361      	movs	r3, #97	; 0x61
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	e051      	b.n	8001544 <bee+0xc4>
	}
	else if (strcmp((char*) str, (char*) "two") == 0) {
 80014a0:	492c      	ldr	r1, [pc, #176]	; (8001554 <bee+0xd4>)
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7fe feb0 	bl	8000208 <strcmp>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <bee+0x34>
		data = 'b';
 80014ae:	2362      	movs	r3, #98	; 0x62
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	e047      	b.n	8001544 <bee+0xc4>
	}
	else if (strcmp((char*) str, (char*) "three") == 0) {
 80014b4:	4928      	ldr	r1, [pc, #160]	; (8001558 <bee+0xd8>)
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7fe fea6 	bl	8000208 <strcmp>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d102      	bne.n	80014c8 <bee+0x48>
		data = 'c';
 80014c2:	2363      	movs	r3, #99	; 0x63
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	e03d      	b.n	8001544 <bee+0xc4>
	}
	else if (strcmp((char*) str, (char*) "legend") == 0) {
 80014c8:	4924      	ldr	r1, [pc, #144]	; (800155c <bee+0xdc>)
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7fe fe9c 	bl	8000208 <strcmp>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <bee+0x5c>
		data = 'l';
 80014d6:	236c      	movs	r3, #108	; 0x6c
 80014d8:	73fb      	strb	r3, [r7, #15]
 80014da:	e033      	b.n	8001544 <bee+0xc4>
	}
	else if (strcmp((char*) str, (char*) "cherry") == 0) {
 80014dc:	4920      	ldr	r1, [pc, #128]	; (8001560 <bee+0xe0>)
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7fe fe92 	bl	8000208 <strcmp>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <bee+0x70>
		data = 'r';
 80014ea:	2372      	movs	r3, #114	; 0x72
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	e029      	b.n	8001544 <bee+0xc4>
	}
	else if (strcmp((char*) str, (char*) "funny") == 0) {
 80014f0:	491c      	ldr	r1, [pc, #112]	; (8001564 <bee+0xe4>)
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7fe fe88 	bl	8000208 <strcmp>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <bee+0x84>
		data = 'f';
 80014fe:	2366      	movs	r3, #102	; 0x66
 8001500:	73fb      	strb	r3, [r7, #15]
 8001502:	e01f      	b.n	8001544 <bee+0xc4>
	}
	else if (strcmp((char*) str, (char*) "steal") == 0) {
 8001504:	4918      	ldr	r1, [pc, #96]	; (8001568 <bee+0xe8>)
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7fe fe7e 	bl	8000208 <strcmp>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d102      	bne.n	8001518 <bee+0x98>
		data = 's';
 8001512:	2373      	movs	r3, #115	; 0x73
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	e015      	b.n	8001544 <bee+0xc4>
	}
	else if (strcmp((char*) str, (char*) "home") == 0) {
 8001518:	4914      	ldr	r1, [pc, #80]	; (800156c <bee+0xec>)
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7fe fe74 	bl	8000208 <strcmp>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <bee+0xac>
		data = 'h';
 8001526:	2368      	movs	r3, #104	; 0x68
 8001528:	73fb      	strb	r3, [r7, #15]
 800152a:	e00b      	b.n	8001544 <bee+0xc4>
	}
	else if (strcmp((char*) str, (char*) "end") == 0) {
 800152c:	4910      	ldr	r1, [pc, #64]	; (8001570 <bee+0xf0>)
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7fe fe6a 	bl	8000208 <strcmp>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d102      	bne.n	8001540 <bee+0xc0>
		data = 'o';
 800153a:	236f      	movs	r3, #111	; 0x6f
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	e001      	b.n	8001544 <bee+0xc4>
	}
	else {
		data = 'X';
 8001540:	2358      	movs	r3, #88	; 0x58
 8001542:	73fb      	strb	r3, [r7, #15]
	}

	return data;
 8001544:	7bfb      	ldrb	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	08013fb0 	.word	0x08013fb0
 8001554:	08013fb4 	.word	0x08013fb4
 8001558:	08013fb8 	.word	0x08013fb8
 800155c:	08013fc0 	.word	0x08013fc0
 8001560:	08013fc8 	.word	0x08013fc8
 8001564:	08013fd0 	.word	0x08013fd0
 8001568:	08013fd8 	.word	0x08013fd8
 800156c:	08013fe0 	.word	0x08013fe0
 8001570:	08013fe8 	.word	0x08013fe8

08001574 <score_transfer>:
extern int steady;
int first_state[3] = { 0 };
extern int disguise, home, steal, putcherry, score_flag[10];
extern uint8_t score;
char scorecount[15] = { 0 };
void score_transfer() {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
	if (steady == 1
 800157a:	4ba1      	ldr	r3, [pc, #644]	; (8001800 <score_transfer+0x28c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d13b      	bne.n	80015fa <score_transfer+0x86>
			&& (score_flag[0] == 1 || score_flag[1] == 1 || score_flag[2] == 1
 8001582:	4ba0      	ldr	r3, [pc, #640]	; (8001804 <score_transfer+0x290>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d00b      	beq.n	80015a2 <score_transfer+0x2e>
 800158a:	4b9e      	ldr	r3, [pc, #632]	; (8001804 <score_transfer+0x290>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d007      	beq.n	80015a2 <score_transfer+0x2e>
 8001592:	4b9c      	ldr	r3, [pc, #624]	; (8001804 <score_transfer+0x290>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d003      	beq.n	80015a2 <score_transfer+0x2e>
					|| score_flag[3] == 1)) {
 800159a:	4b9a      	ldr	r3, [pc, #616]	; (8001804 <score_transfer+0x290>)
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d12b      	bne.n	80015fa <score_transfer+0x86>

		strcpy(scorecount, "legend");
 80015a2:	4b99      	ldr	r3, [pc, #612]	; (8001808 <score_transfer+0x294>)
 80015a4:	4a99      	ldr	r2, [pc, #612]	; (800180c <score_transfer+0x298>)
 80015a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015aa:	6018      	str	r0, [r3, #0]
 80015ac:	3304      	adds	r3, #4
 80015ae:	8019      	strh	r1, [r3, #0]
 80015b0:	3302      	adds	r3, #2
 80015b2:	0c0a      	lsrs	r2, r1, #16
 80015b4:	701a      	strb	r2, [r3, #0]
		score = bee(scorecount);
 80015b6:	4894      	ldr	r0, [pc, #592]	; (8001808 <score_transfer+0x294>)
 80015b8:	f7ff ff62 	bl	8001480 <bee>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	4b93      	ldr	r3, [pc, #588]	; (8001810 <score_transfer+0x29c>)
 80015c2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));
 80015c4:	2201      	movs	r2, #1
 80015c6:	4992      	ldr	r1, [pc, #584]	; (8001810 <score_transfer+0x29c>)
 80015c8:	4892      	ldr	r0, [pc, #584]	; (8001814 <score_transfer+0x2a0>)
 80015ca:	f00c fb69 	bl	800dca0 <HAL_UART_Transmit_IT>

		strcpy(scorecount, "cherry");
 80015ce:	4b8e      	ldr	r3, [pc, #568]	; (8001808 <score_transfer+0x294>)
 80015d0:	4a91      	ldr	r2, [pc, #580]	; (8001818 <score_transfer+0x2a4>)
 80015d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015d6:	6018      	str	r0, [r3, #0]
 80015d8:	3304      	adds	r3, #4
 80015da:	8019      	strh	r1, [r3, #0]
 80015dc:	3302      	adds	r3, #2
 80015de:	0c0a      	lsrs	r2, r1, #16
 80015e0:	701a      	strb	r2, [r3, #0]
		score = bee(scorecount);
 80015e2:	4889      	ldr	r0, [pc, #548]	; (8001808 <score_transfer+0x294>)
 80015e4:	f7ff ff4c 	bl	8001480 <bee>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b88      	ldr	r3, [pc, #544]	; (8001810 <score_transfer+0x29c>)
 80015ee:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));
 80015f0:	2201      	movs	r2, #1
 80015f2:	4987      	ldr	r1, [pc, #540]	; (8001810 <score_transfer+0x29c>)
 80015f4:	4887      	ldr	r0, [pc, #540]	; (8001814 <score_transfer+0x2a0>)
 80015f6:	f00c fb53 	bl	800dca0 <HAL_UART_Transmit_IT>

	}
	if (steady == 0) {
 80015fa:	4b81      	ldr	r3, [pc, #516]	; (8001800 <score_transfer+0x28c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f040 80a6 	bne.w	8001750 <score_transfer+0x1dc>
		for (int i = 0; i < 4; i++) {
 8001604:	2300      	movs	r3, #0
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	e09e      	b.n	8001748 <score_transfer+0x1d4>
			if (first_state[i] == 1 && score_flag[i] == 1) {
 800160a:	4a84      	ldr	r2, [pc, #528]	; (800181c <score_transfer+0x2a8>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d12b      	bne.n	800166e <score_transfer+0xfa>
 8001616:	4a7b      	ldr	r2, [pc, #492]	; (8001804 <score_transfer+0x290>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d125      	bne.n	800166e <score_transfer+0xfa>
				strcpy(scorecount, "one");
 8001622:	4b79      	ldr	r3, [pc, #484]	; (8001808 <score_transfer+0x294>)
 8001624:	4a7e      	ldr	r2, [pc, #504]	; (8001820 <score_transfer+0x2ac>)
 8001626:	601a      	str	r2, [r3, #0]
				score = bee(scorecount);
 8001628:	4877      	ldr	r0, [pc, #476]	; (8001808 <score_transfer+0x294>)
 800162a:	f7ff ff29 	bl	8001480 <bee>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	4b77      	ldr	r3, [pc, #476]	; (8001810 <score_transfer+0x29c>)
 8001634:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));
 8001636:	2201      	movs	r2, #1
 8001638:	4975      	ldr	r1, [pc, #468]	; (8001810 <score_transfer+0x29c>)
 800163a:	4876      	ldr	r0, [pc, #472]	; (8001814 <score_transfer+0x2a0>)
 800163c:	f00c fb30 	bl	800dca0 <HAL_UART_Transmit_IT>
				strcpy(scorecount, "cherry");
 8001640:	4b71      	ldr	r3, [pc, #452]	; (8001808 <score_transfer+0x294>)
 8001642:	4a75      	ldr	r2, [pc, #468]	; (8001818 <score_transfer+0x2a4>)
 8001644:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001648:	6018      	str	r0, [r3, #0]
 800164a:	3304      	adds	r3, #4
 800164c:	8019      	strh	r1, [r3, #0]
 800164e:	3302      	adds	r3, #2
 8001650:	0c0a      	lsrs	r2, r1, #16
 8001652:	701a      	strb	r2, [r3, #0]
				score = bee(scorecount);
 8001654:	486c      	ldr	r0, [pc, #432]	; (8001808 <score_transfer+0x294>)
 8001656:	f7ff ff13 	bl	8001480 <bee>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	4b6c      	ldr	r3, [pc, #432]	; (8001810 <score_transfer+0x29c>)
 8001660:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));
 8001662:	2201      	movs	r2, #1
 8001664:	496a      	ldr	r1, [pc, #424]	; (8001810 <score_transfer+0x29c>)
 8001666:	486b      	ldr	r0, [pc, #428]	; (8001814 <score_transfer+0x2a0>)
 8001668:	f00c fb1a 	bl	800dca0 <HAL_UART_Transmit_IT>
 800166c:	e069      	b.n	8001742 <score_transfer+0x1ce>
			}
			else if (first_state[i] == 2 && score_flag[i] == 1) {
 800166e:	4a6b      	ldr	r2, [pc, #428]	; (800181c <score_transfer+0x2a8>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d12b      	bne.n	80016d2 <score_transfer+0x15e>
 800167a:	4a62      	ldr	r2, [pc, #392]	; (8001804 <score_transfer+0x290>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d125      	bne.n	80016d2 <score_transfer+0x15e>
				strcpy(scorecount, "two");
 8001686:	4b60      	ldr	r3, [pc, #384]	; (8001808 <score_transfer+0x294>)
 8001688:	4a66      	ldr	r2, [pc, #408]	; (8001824 <score_transfer+0x2b0>)
 800168a:	601a      	str	r2, [r3, #0]
				score = bee(scorecount);
 800168c:	485e      	ldr	r0, [pc, #376]	; (8001808 <score_transfer+0x294>)
 800168e:	f7ff fef7 	bl	8001480 <bee>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	4b5e      	ldr	r3, [pc, #376]	; (8001810 <score_transfer+0x29c>)
 8001698:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));
 800169a:	2201      	movs	r2, #1
 800169c:	495c      	ldr	r1, [pc, #368]	; (8001810 <score_transfer+0x29c>)
 800169e:	485d      	ldr	r0, [pc, #372]	; (8001814 <score_transfer+0x2a0>)
 80016a0:	f00c fafe 	bl	800dca0 <HAL_UART_Transmit_IT>
				strcpy(scorecount, "cherry");
 80016a4:	4b58      	ldr	r3, [pc, #352]	; (8001808 <score_transfer+0x294>)
 80016a6:	4a5c      	ldr	r2, [pc, #368]	; (8001818 <score_transfer+0x2a4>)
 80016a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016ac:	6018      	str	r0, [r3, #0]
 80016ae:	3304      	adds	r3, #4
 80016b0:	8019      	strh	r1, [r3, #0]
 80016b2:	3302      	adds	r3, #2
 80016b4:	0c0a      	lsrs	r2, r1, #16
 80016b6:	701a      	strb	r2, [r3, #0]
				score = bee(scorecount);
 80016b8:	4853      	ldr	r0, [pc, #332]	; (8001808 <score_transfer+0x294>)
 80016ba:	f7ff fee1 	bl	8001480 <bee>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b53      	ldr	r3, [pc, #332]	; (8001810 <score_transfer+0x29c>)
 80016c4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));
 80016c6:	2201      	movs	r2, #1
 80016c8:	4951      	ldr	r1, [pc, #324]	; (8001810 <score_transfer+0x29c>)
 80016ca:	4852      	ldr	r0, [pc, #328]	; (8001814 <score_transfer+0x2a0>)
 80016cc:	f00c fae8 	bl	800dca0 <HAL_UART_Transmit_IT>
 80016d0:	e037      	b.n	8001742 <score_transfer+0x1ce>
			}
			else if (first_state[i] == 3 && score_flag[i] == 1) {
 80016d2:	4a52      	ldr	r2, [pc, #328]	; (800181c <score_transfer+0x2a8>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d131      	bne.n	8001742 <score_transfer+0x1ce>
 80016de:	4a49      	ldr	r2, [pc, #292]	; (8001804 <score_transfer+0x290>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d12b      	bne.n	8001742 <score_transfer+0x1ce>
				strcpy(scorecount, "legend");
 80016ea:	4b47      	ldr	r3, [pc, #284]	; (8001808 <score_transfer+0x294>)
 80016ec:	4a47      	ldr	r2, [pc, #284]	; (800180c <score_transfer+0x298>)
 80016ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016f2:	6018      	str	r0, [r3, #0]
 80016f4:	3304      	adds	r3, #4
 80016f6:	8019      	strh	r1, [r3, #0]
 80016f8:	3302      	adds	r3, #2
 80016fa:	0c0a      	lsrs	r2, r1, #16
 80016fc:	701a      	strb	r2, [r3, #0]
				score = bee(scorecount);
 80016fe:	4842      	ldr	r0, [pc, #264]	; (8001808 <score_transfer+0x294>)
 8001700:	f7ff febe 	bl	8001480 <bee>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	4b41      	ldr	r3, [pc, #260]	; (8001810 <score_transfer+0x29c>)
 800170a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));
 800170c:	2201      	movs	r2, #1
 800170e:	4940      	ldr	r1, [pc, #256]	; (8001810 <score_transfer+0x29c>)
 8001710:	4840      	ldr	r0, [pc, #256]	; (8001814 <score_transfer+0x2a0>)
 8001712:	f00c fac5 	bl	800dca0 <HAL_UART_Transmit_IT>
				strcpy(scorecount, "cherry");
 8001716:	4b3c      	ldr	r3, [pc, #240]	; (8001808 <score_transfer+0x294>)
 8001718:	4a3f      	ldr	r2, [pc, #252]	; (8001818 <score_transfer+0x2a4>)
 800171a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800171e:	6018      	str	r0, [r3, #0]
 8001720:	3304      	adds	r3, #4
 8001722:	8019      	strh	r1, [r3, #0]
 8001724:	3302      	adds	r3, #2
 8001726:	0c0a      	lsrs	r2, r1, #16
 8001728:	701a      	strb	r2, [r3, #0]
				score = bee(scorecount);
 800172a:	4837      	ldr	r0, [pc, #220]	; (8001808 <score_transfer+0x294>)
 800172c:	f7ff fea8 	bl	8001480 <bee>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	4b36      	ldr	r3, [pc, #216]	; (8001810 <score_transfer+0x29c>)
 8001736:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));
 8001738:	2201      	movs	r2, #1
 800173a:	4935      	ldr	r1, [pc, #212]	; (8001810 <score_transfer+0x29c>)
 800173c:	4835      	ldr	r0, [pc, #212]	; (8001814 <score_transfer+0x2a0>)
 800173e:	f00c faaf 	bl	800dca0 <HAL_UART_Transmit_IT>
		for (int i = 0; i < 4; i++) {
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3301      	adds	r3, #1
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b03      	cmp	r3, #3
 800174c:	f77f af5d 	ble.w	800160a <score_transfer+0x96>
			}
		}
	}
	if (disguise == 1 && score_flag[4] == 1) {
 8001750:	4b35      	ldr	r3, [pc, #212]	; (8001828 <score_transfer+0x2b4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d116      	bne.n	8001786 <score_transfer+0x212>
 8001758:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <score_transfer+0x290>)
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d112      	bne.n	8001786 <score_transfer+0x212>
		strcpy(scorecount, "funny");
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <score_transfer+0x294>)
 8001762:	4a32      	ldr	r2, [pc, #200]	; (800182c <score_transfer+0x2b8>)
 8001764:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001768:	6018      	str	r0, [r3, #0]
 800176a:	3304      	adds	r3, #4
 800176c:	8019      	strh	r1, [r3, #0]
		score = bee(scorecount);
 800176e:	4826      	ldr	r0, [pc, #152]	; (8001808 <score_transfer+0x294>)
 8001770:	f7ff fe86 	bl	8001480 <bee>
 8001774:	4603      	mov	r3, r0
 8001776:	461a      	mov	r2, r3
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <score_transfer+0x29c>)
 800177a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));
 800177c:	2201      	movs	r2, #1
 800177e:	4924      	ldr	r1, [pc, #144]	; (8001810 <score_transfer+0x29c>)
 8001780:	4824      	ldr	r0, [pc, #144]	; (8001814 <score_transfer+0x2a0>)
 8001782:	f00c fa8d 	bl	800dca0 <HAL_UART_Transmit_IT>
	}
	if (finish == 1 && score_flag[5] == 1) {
 8001786:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <score_transfer+0x2bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d112      	bne.n	80017b4 <score_transfer+0x240>
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <score_transfer+0x290>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d10e      	bne.n	80017b4 <score_transfer+0x240>
		strcpy(scorecount, "end");
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <score_transfer+0x294>)
 8001798:	4a26      	ldr	r2, [pc, #152]	; (8001834 <score_transfer+0x2c0>)
 800179a:	601a      	str	r2, [r3, #0]
		score = bee(scorecount);
 800179c:	481a      	ldr	r0, [pc, #104]	; (8001808 <score_transfer+0x294>)
 800179e:	f7ff fe6f 	bl	8001480 <bee>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <score_transfer+0x29c>)
 80017a8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));
 80017aa:	2201      	movs	r2, #1
 80017ac:	4918      	ldr	r1, [pc, #96]	; (8001810 <score_transfer+0x29c>)
 80017ae:	4819      	ldr	r0, [pc, #100]	; (8001814 <score_transfer+0x2a0>)
 80017b0:	f00c fa76 	bl	800dca0 <HAL_UART_Transmit_IT>
	}
	if (home == 1 && score_flag[6] == 1) {
 80017b4:	4b20      	ldr	r3, [pc, #128]	; (8001838 <score_transfer+0x2c4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d116      	bne.n	80017ea <score_transfer+0x276>
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <score_transfer+0x290>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d112      	bne.n	80017ea <score_transfer+0x276>
		strcpy(scorecount, "home");
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <score_transfer+0x294>)
 80017c6:	4a1d      	ldr	r2, [pc, #116]	; (800183c <score_transfer+0x2c8>)
 80017c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017cc:	6018      	str	r0, [r3, #0]
 80017ce:	3304      	adds	r3, #4
 80017d0:	7019      	strb	r1, [r3, #0]
		score = bee(scorecount);
 80017d2:	480d      	ldr	r0, [pc, #52]	; (8001808 <score_transfer+0x294>)
 80017d4:	f7ff fe54 	bl	8001480 <bee>
 80017d8:	4603      	mov	r3, r0
 80017da:	461a      	mov	r2, r3
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <score_transfer+0x29c>)
 80017de:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));
 80017e0:	2201      	movs	r2, #1
 80017e2:	490b      	ldr	r1, [pc, #44]	; (8001810 <score_transfer+0x29c>)
 80017e4:	480b      	ldr	r0, [pc, #44]	; (8001814 <score_transfer+0x2a0>)
 80017e6:	f00c fa5b 	bl	800dca0 <HAL_UART_Transmit_IT>
	}
	if (steal != 0 && score_flag[7] == 1) {
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <score_transfer+0x2cc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d049      	beq.n	8001886 <score_transfer+0x312>
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <score_transfer+0x290>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d145      	bne.n	8001886 <score_transfer+0x312>
		for (int i = 1; i < 4; i++) {
 80017fa:	2301      	movs	r3, #1
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	e03c      	b.n	800187a <score_transfer+0x306>
 8001800:	20000018 	.word	0x20000018
 8001804:	200014fc 	.word	0x200014fc
 8001808:	200009cc 	.word	0x200009cc
 800180c:	08013fc0 	.word	0x08013fc0
 8001810:	200015a8 	.word	0x200015a8
 8001814:	20001838 	.word	0x20001838
 8001818:	08013fc8 	.word	0x08013fc8
 800181c:	200009c0 	.word	0x200009c0
 8001820:	00656e6f 	.word	0x00656e6f
 8001824:	006f7774 	.word	0x006f7774
 8001828:	20001590 	.word	0x20001590
 800182c:	08013fd0 	.word	0x08013fd0
 8001830:	200014f4 	.word	0x200014f4
 8001834:	00646e65 	.word	0x00646e65
 8001838:	20001594 	.word	0x20001594
 800183c:	08013fe0 	.word	0x08013fe0
 8001840:	20001598 	.word	0x20001598
			if (steal >= i) {
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <score_transfer+0x31c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	dc12      	bgt.n	8001874 <score_transfer+0x300>
				strcpy(scorecount, "steal");
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <score_transfer+0x320>)
 8001850:	4a11      	ldr	r2, [pc, #68]	; (8001898 <score_transfer+0x324>)
 8001852:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001856:	6018      	str	r0, [r3, #0]
 8001858:	3304      	adds	r3, #4
 800185a:	8019      	strh	r1, [r3, #0]
				score = bee(scorecount);
 800185c:	480d      	ldr	r0, [pc, #52]	; (8001894 <score_transfer+0x320>)
 800185e:	f7ff fe0f 	bl	8001480 <bee>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <score_transfer+0x328>)
 8001868:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));
 800186a:	2201      	movs	r2, #1
 800186c:	490b      	ldr	r1, [pc, #44]	; (800189c <score_transfer+0x328>)
 800186e:	480c      	ldr	r0, [pc, #48]	; (80018a0 <score_transfer+0x32c>)
 8001870:	f00c fa16 	bl	800dca0 <HAL_UART_Transmit_IT>
		for (int i = 1; i < 4; i++) {
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2b03      	cmp	r3, #3
 800187e:	dde1      	ble.n	8001844 <score_transfer+0x2d0>
			}
		}
		steal = 0;
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <score_transfer+0x31c>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
//	HAL_Delay(2000);
//	strcpy(scorecount, "end");
//	score = bee(scorecount);
//	HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));

}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20001598 	.word	0x20001598
 8001894:	200009cc 	.word	0x200009cc
 8001898:	08013fd8 	.word	0x08013fd8
 800189c:	200015a8 	.word	0x200015a8
 80018a0:	20001838 	.word	0x20001838

080018a4 <hand_transfer_fn>:
void hand_transfer_fn() {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	e02d      	b.n	800190c <hand_transfer_fn+0x68>
		if (unsuck[i] == 1 || suck[i] == 1) {
 80018b0:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <hand_transfer_fn+0x7c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d005      	beq.n	80018c8 <hand_transfer_fn+0x24>
 80018bc:	4a19      	ldr	r2, [pc, #100]	; (8001924 <hand_transfer_fn+0x80>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d10f      	bne.n	80018e8 <hand_transfer_fn+0x44>
			hand_transfer[(i + rotate_offset) % 4] = 0;
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <hand_transfer_fn+0x84>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4413      	add	r3, r2
 80018d0:	425a      	negs	r2, r3
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	f002 0203 	and.w	r2, r2, #3
 80018da:	bf58      	it	pl
 80018dc:	4253      	negpl	r3, r2
 80018de:	4a13      	ldr	r2, [pc, #76]	; (800192c <hand_transfer_fn+0x88>)
 80018e0:	2100      	movs	r1, #0
 80018e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80018e6:	e00e      	b.n	8001906 <hand_transfer_fn+0x62>
		}
		else {
			hand_transfer[(i + rotate_offset) % 4] = 1;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <hand_transfer_fn+0x84>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4413      	add	r3, r2
 80018f0:	425a      	negs	r2, r3
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	f002 0203 	and.w	r2, r2, #3
 80018fa:	bf58      	it	pl
 80018fc:	4253      	negpl	r3, r2
 80018fe:	4a0b      	ldr	r2, [pc, #44]	; (800192c <hand_transfer_fn+0x88>)
 8001900:	2101      	movs	r1, #1
 8001902:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 4; i++) {
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3301      	adds	r3, #1
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b03      	cmp	r3, #3
 8001910:	ddce      	ble.n	80018b0 <hand_transfer_fn+0xc>
		}
	}
}
 8001912:	bf00      	nop
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	200014a0 	.word	0x200014a0
 8001924:	20001494 	.word	0x20001494
 8001928:	2000097c 	.word	0x2000097c
 800192c:	20000980 	.word	0x20000980

08001930 <suck_the_cake>:
void suck_the_cake(int servonum, int order) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
	if (finish == 1)
 800193a:	4b5a      	ldr	r3, [pc, #360]	; (8001aa4 <suck_the_cake+0x174>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b01      	cmp	r3, #1
 8001940:	f000 80ac 	beq.w	8001a9c <suck_the_cake+0x16c>
		return;

	while (1) {
		if (step == 0) {
 8001944:	4b58      	ldr	r3, [pc, #352]	; (8001aa8 <suck_the_cake+0x178>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d000      	beq.n	800194e <suck_the_cake+0x1e>
 800194c:	e7fa      	b.n	8001944 <suck_the_cake+0x14>
			break;
 800194e:	bf00      	nop
		}

	}
	if (servonum == 7) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b07      	cmp	r3, #7
 8001954:	d122      	bne.n	800199c <suck_the_cake+0x6c>
		cake_layer[(0 + rotate_offset) % 4] -= 1;
 8001956:	4b55      	ldr	r3, [pc, #340]	; (8001aac <suck_the_cake+0x17c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	425a      	negs	r2, r3
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	f002 0203 	and.w	r2, r2, #3
 8001964:	bf58      	it	pl
 8001966:	4253      	negpl	r3, r2
 8001968:	4a51      	ldr	r2, [pc, #324]	; (8001ab0 <suck_the_cake+0x180>)
 800196a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800196e:	3a01      	subs	r2, #1
 8001970:	494f      	ldr	r1, [pc, #316]	; (8001ab0 <suck_the_cake+0x180>)
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 20000 * 255); // open pump1
 8001976:	4b4f      	ldr	r3, [pc, #316]	; (8001ab4 <suck_the_cake+0x184>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a4f      	ldr	r2, [pc, #316]	; (8001ab8 <suck_the_cake+0x188>)
 800197c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);        // close valve1
 800197e:	4b4d      	ldr	r3, [pc, #308]	; (8001ab4 <suck_the_cake+0x184>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2200      	movs	r2, #0
 8001984:	639a      	str	r2, [r3, #56]	; 0x38
		suck[0] = 1;
 8001986:	4b4d      	ldr	r3, [pc, #308]	; (8001abc <suck_the_cake+0x18c>)
 8001988:	2201      	movs	r2, #1
 800198a:	601a      	str	r2, [r3, #0]
		handStatus[0] = 1;
 800198c:	4b4c      	ldr	r3, [pc, #304]	; (8001ac0 <suck_the_cake+0x190>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]
		suck_temp++;
 8001992:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <suck_the_cake+0x194>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3301      	adds	r3, #1
 8001998:	4a4a      	ldr	r2, [pc, #296]	; (8001ac4 <suck_the_cake+0x194>)
 800199a:	6013      	str	r3, [r2, #0]
	}
	if (servonum == 4) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d123      	bne.n	80019ea <suck_the_cake+0xba>
		cake_layer[(1 + rotate_offset) % 4] -= 1;
 80019a2:	4b42      	ldr	r3, [pc, #264]	; (8001aac <suck_the_cake+0x17c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	3301      	adds	r3, #1
 80019a8:	425a      	negs	r2, r3
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	f002 0203 	and.w	r2, r2, #3
 80019b2:	bf58      	it	pl
 80019b4:	4253      	negpl	r3, r2
 80019b6:	4a3e      	ldr	r2, [pc, #248]	; (8001ab0 <suck_the_cake+0x180>)
 80019b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019bc:	3a01      	subs	r2, #1
 80019be:	493c      	ldr	r1, [pc, #240]	; (8001ab0 <suck_the_cake+0x180>)
 80019c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 20000 * 255); // open pump4
 80019c4:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <suck_the_cake+0x198>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a3b      	ldr	r2, [pc, #236]	; (8001ab8 <suck_the_cake+0x188>)
 80019ca:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);         // close valve4
 80019cc:	4b3e      	ldr	r3, [pc, #248]	; (8001ac8 <suck_the_cake+0x198>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2200      	movs	r2, #0
 80019d2:	639a      	str	r2, [r3, #56]	; 0x38
		suck[1] = 1;
 80019d4:	4b39      	ldr	r3, [pc, #228]	; (8001abc <suck_the_cake+0x18c>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	605a      	str	r2, [r3, #4]
		handStatus[1] = 1;
 80019da:	4b39      	ldr	r3, [pc, #228]	; (8001ac0 <suck_the_cake+0x190>)
 80019dc:	2201      	movs	r2, #1
 80019de:	605a      	str	r2, [r3, #4]
		suck_temp++;
 80019e0:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <suck_the_cake+0x194>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	4a37      	ldr	r2, [pc, #220]	; (8001ac4 <suck_the_cake+0x194>)
 80019e8:	6013      	str	r3, [r2, #0]
	}
	if (servonum == 3) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d123      	bne.n	8001a38 <suck_the_cake+0x108>
		cake_layer[(2 + rotate_offset) % 4] -= 1;
 80019f0:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <suck_the_cake+0x17c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3302      	adds	r3, #2
 80019f6:	425a      	negs	r2, r3
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	f002 0203 	and.w	r2, r2, #3
 8001a00:	bf58      	it	pl
 8001a02:	4253      	negpl	r3, r2
 8001a04:	4a2a      	ldr	r2, [pc, #168]	; (8001ab0 <suck_the_cake+0x180>)
 8001a06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a0a:	3a01      	subs	r2, #1
 8001a0c:	4928      	ldr	r1, [pc, #160]	; (8001ab0 <suck_the_cake+0x180>)
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 20000 * 255); // open pump3
 8001a12:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <suck_the_cake+0x198>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a28      	ldr	r2, [pc, #160]	; (8001ab8 <suck_the_cake+0x188>)
 8001a18:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);         // close valve3
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <suck_the_cake+0x198>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	641a      	str	r2, [r3, #64]	; 0x40
		suck[2] = 1;
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <suck_the_cake+0x18c>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	609a      	str	r2, [r3, #8]
		handStatus[2] = 1;
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <suck_the_cake+0x190>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	609a      	str	r2, [r3, #8]
		suck_temp++;
 8001a2e:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <suck_the_cake+0x194>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	3301      	adds	r3, #1
 8001a34:	4a23      	ldr	r2, [pc, #140]	; (8001ac4 <suck_the_cake+0x194>)
 8001a36:	6013      	str	r3, [r2, #0]
	}
	hand_transfer_fn();
 8001a38:	f7ff ff34 	bl	80018a4 <hand_transfer_fn>
	if (order == 1)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d108      	bne.n	8001a54 <suck_the_cake+0x124>
		UART_Send_SetMotorPosition(servonum, 1510, 200); // suck the top cake
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	22c8      	movs	r2, #200	; 0xc8
 8001a48:	f240 51e6 	movw	r1, #1510	; 0x5e6
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f9ad 	bl	8000dac <UART_Send_SetMotorPosition>
 8001a52:	e024      	b.n	8001a9e <suck_the_cake+0x16e>
	else if (order == 2)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d108      	bne.n	8001a6c <suck_the_cake+0x13c>
		UART_Send_SetMotorPosition(servonum, 1600, 200); // suck the middle cake
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	22c8      	movs	r2, #200	; 0xc8
 8001a60:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff f9a1 	bl	8000dac <UART_Send_SetMotorPosition>
 8001a6a:	e018      	b.n	8001a9e <suck_the_cake+0x16e>
	else if (order == 3)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d108      	bne.n	8001a84 <suck_the_cake+0x154>
		UART_Send_SetMotorPosition(servonum, 1730, 200); // suck the bottom cake
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	22c8      	movs	r2, #200	; 0xc8
 8001a78:	f240 61c2 	movw	r1, #1730	; 0x6c2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff f995 	bl	8000dac <UART_Send_SetMotorPosition>
 8001a82:	e00c      	b.n	8001a9e <suck_the_cake+0x16e>
	else if (order == 0)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d109      	bne.n	8001a9e <suck_the_cake+0x16e>
		UART_Send_SetMotorPosition(servonum, 1440, 200);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	22c8      	movs	r2, #200	; 0xc8
 8001a90:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff f989 	bl	8000dac <UART_Send_SetMotorPosition>
 8001a9a:	e000      	b.n	8001a9e <suck_the_cake+0x16e>
		return;
 8001a9c:	bf00      	nop
//	HAL_Delay(1000);
}
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200014f4 	.word	0x200014f4
 8001aa8:	200014e4 	.word	0x200014e4
 8001aac:	2000097c 	.word	0x2000097c
 8001ab0:	20000988 	.word	0x20000988
 8001ab4:	200015f8 	.word	0x200015f8
 8001ab8:	004dd1e0 	.word	0x004dd1e0
 8001abc:	20001494 	.word	0x20001494
 8001ac0:	20000998 	.word	0x20000998
 8001ac4:	200014ac 	.word	0x200014ac
 8001ac8:	20001640 	.word	0x20001640

08001acc <press_sensor_feedback>:

void press_sensor_feedback() {          // wait for press_sensor feedback
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	if (finish == 1)
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <press_sensor_feedback+0x68>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d02b      	beq.n	8001b30 <press_sensor_feedback+0x64>
		return;

	if (suck_temp != 0) {
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <press_sensor_feedback+0x6c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d014      	beq.n	8001b0a <press_sensor_feedback+0x3e>
		suck_delay_temp = -1;
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <press_sensor_feedback+0x70>)
 8001ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae6:	601a      	str	r2, [r3, #0]
		while (1) {
			if (suck_temp == 0) {
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <press_sensor_feedback+0x6c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1fb      	bne.n	8001ae8 <press_sensor_feedback+0x1c>
				if (suck_delay_temp == -1)
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <press_sensor_feedback+0x70>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d102      	bne.n	8001b00 <press_sensor_feedback+0x34>
					suck_delay_temp = 1;
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <press_sensor_feedback+0x70>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
				if (suck_delay_temp == 0)
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <press_sensor_feedback+0x70>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00d      	beq.n	8001b24 <press_sensor_feedback+0x58>
			if (suck_temp == 0) {
 8001b08:	e7ee      	b.n	8001ae8 <press_sensor_feedback+0x1c>
					break;
			}
		}
	}
	else if (unsuck_temp != 0) {
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <press_sensor_feedback+0x74>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00b      	beq.n	8001b2a <press_sensor_feedback+0x5e>
		while (1) {
			if (unsuck_temp == 0) {
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <press_sensor_feedback+0x74>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1fb      	bne.n	8001b12 <press_sensor_feedback+0x46>
				if (unsuck_delay_temp == 0)
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <press_sensor_feedback+0x78>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <press_sensor_feedback+0x5c>
			if (unsuck_temp == 0) {
 8001b22:	e7f6      	b.n	8001b12 <press_sensor_feedback+0x46>
					break;
 8001b24:	bf00      	nop
 8001b26:	e000      	b.n	8001b2a <press_sensor_feedback+0x5e>
					break;
 8001b28:	bf00      	nop
			}
		}
	}
	hand_transfer_fn();
 8001b2a:	f7ff febb 	bl	80018a4 <hand_transfer_fn>
 8001b2e:	e000      	b.n	8001b32 <press_sensor_feedback+0x66>
		return;
 8001b30:	bf00      	nop
}
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200014f4 	.word	0x200014f4
 8001b38:	200014ac 	.word	0x200014ac
 8001b3c:	20001550 	.word	0x20001550
 8001b40:	200014b0 	.word	0x200014b0
 8001b44:	2000154c 	.word	0x2000154c

08001b48 <cake_check>:
void cake_check(int VL53_check, int order) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
	if (finish == 1)
 8001b52:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <cake_check+0x13c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	f000 808f 	beq.w	8001c7a <cake_check+0x132>
		return;

	if (VL53_check == 0) {
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10f      	bne.n	8001b82 <cake_check+0x3a>
		VL53_Update();
 8001b62:	f7ff fb1b 	bl	800119c <VL53_Update>
		if (CakeStatus[0] != (4 - order)) {
 8001b66:	4b48      	ldr	r3, [pc, #288]	; (8001c88 <cake_check+0x140>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	f1c3 0304 	rsb	r3, r3, #4
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d006      	beq.n	8001b82 <cake_check+0x3a>
			order_arror[0] = CakeStatus[0];
 8001b74:	4b44      	ldr	r3, [pc, #272]	; (8001c88 <cake_check+0x140>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a44      	ldr	r2, [pc, #272]	; (8001c8c <cake_check+0x144>)
 8001b7a:	6013      	str	r3, [r2, #0]
			CakeStatus[0] = 0;
 8001b7c:	4b42      	ldr	r3, [pc, #264]	; (8001c88 <cake_check+0x140>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
		}
	}
	if (VL53_check == 1) {
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d10b      	bne.n	8001ba0 <cake_check+0x58>
		VL53_Update();
 8001b88:	f7ff fb08 	bl	800119c <VL53_Update>
		if (CakeStatus[1] != (4 - order)) {
 8001b8c:	4b3e      	ldr	r3, [pc, #248]	; (8001c88 <cake_check+0x140>)
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	f1c3 0304 	rsb	r3, r3, #4
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d002      	beq.n	8001ba0 <cake_check+0x58>
			CakeStatus[1] = 0;
 8001b9a:	4b3b      	ldr	r3, [pc, #236]	; (8001c88 <cake_check+0x140>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	605a      	str	r2, [r3, #4]
		}
	}
	if (VL53_check == 2) {
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d10f      	bne.n	8001bc6 <cake_check+0x7e>
		VL53_Update();
 8001ba6:	f7ff faf9 	bl	800119c <VL53_Update>
		if (CakeStatus[2] != (4 - order)) {
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <cake_check+0x140>)
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f1c3 0304 	rsb	r3, r3, #4
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d006      	beq.n	8001bc6 <cake_check+0x7e>
			order_arror[2] = CakeStatus[2];
 8001bb8:	4b33      	ldr	r3, [pc, #204]	; (8001c88 <cake_check+0x140>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	4a33      	ldr	r2, [pc, #204]	; (8001c8c <cake_check+0x144>)
 8001bbe:	6093      	str	r3, [r2, #8]
			CakeStatus[2] = 0;
 8001bc0:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <cake_check+0x140>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
		}
	}
	if (VL53_check == 3) {
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d129      	bne.n	8001c20 <cake_check+0xd8>
		rotate_the_ring((rotate_offset + 1) % 4);
 8001bcc:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <cake_check+0x148>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	425a      	negs	r2, r3
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	f002 0203 	and.w	r2, r2, #3
 8001bdc:	bf58      	it	pl
 8001bde:	4253      	negpl	r3, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 f959 	bl	8001e98 <rotate_the_ring>
		VL53_Update();
 8001be6:	f7ff fad9 	bl	800119c <VL53_Update>
		if (CakeStatus[2] != (4 - order)) {
 8001bea:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <cake_check+0x140>)
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	f1c3 0304 	rsb	r3, r3, #4
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d006      	beq.n	8001c06 <cake_check+0xbe>
			order_arror[3] = CakeStatus[2];
 8001bf8:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <cake_check+0x140>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <cake_check+0x144>)
 8001bfe:	60d3      	str	r3, [r2, #12]
			CakeStatus[2] = 0;
 8001c00:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <cake_check+0x140>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
		}
		rotate_the_ring((rotate_offset - 1) % 4);
 8001c06:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <cake_check+0x148>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	425a      	negs	r2, r3
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	f002 0203 	and.w	r2, r2, #3
 8001c16:	bf58      	it	pl
 8001c18:	4253      	negpl	r3, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f93c 	bl	8001e98 <rotate_the_ring>
	}
	if (VL53_check == 4) {
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d12a      	bne.n	8001c7c <cake_check+0x134>
		VL53_Update();
 8001c26:	f7ff fab9 	bl	800119c <VL53_Update>
		for (int i = 0; i < 3; i++) {
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	e00b      	b.n	8001c48 <cake_check+0x100>
			if (CakeStatus[i] != 3) {
 8001c30:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <cake_check+0x140>)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d002      	beq.n	8001c42 <cake_check+0xfa>
				steady = 0;
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <cake_check+0x14c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 3; i++) {
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	3301      	adds	r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	ddf0      	ble.n	8001c30 <cake_check+0xe8>
			}
		}
		if (steady == 0) {
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <cake_check+0x14c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d112      	bne.n	8001c7c <cake_check+0x134>
			for (int i = 0; i < 3; i++) {
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	e00a      	b.n	8001c72 <cake_check+0x12a>
				first_state[i] = CakeStatus[i];
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <cake_check+0x140>)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c64:	490c      	ldr	r1, [pc, #48]	; (8001c98 <cake_check+0x150>)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = 0; i < 3; i++) {
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	ddf1      	ble.n	8001c5c <cake_check+0x114>
 8001c78:	e000      	b.n	8001c7c <cake_check+0x134>
		return;
 8001c7a:	bf00      	nop
			}
		}
	}

}
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200014f4 	.word	0x200014f4
 8001c88:	2000089c 	.word	0x2000089c
 8001c8c:	200009b0 	.word	0x200009b0
 8001c90:	2000097c 	.word	0x2000097c
 8001c94:	20000018 	.word	0x20000018
 8001c98:	200009c0 	.word	0x200009c0

08001c9c <unsuck_the_cake>:
void unsuck_the_cake(int servonum, int order) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
	if (finish == 1)
 8001ca6:	4b6f      	ldr	r3, [pc, #444]	; (8001e64 <unsuck_the_cake+0x1c8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	f000 80d5 	beq.w	8001e5a <unsuck_the_cake+0x1be>
		return;

	if (servonum == 7 && handStatus[0] == 0) {
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b07      	cmp	r3, #7
 8001cb4:	d107      	bne.n	8001cc6 <unsuck_the_cake+0x2a>
 8001cb6:	4b6c      	ldr	r3, [pc, #432]	; (8001e68 <unsuck_the_cake+0x1cc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d103      	bne.n	8001cc6 <unsuck_the_cake+0x2a>
		dont_go_down[0] = 1;
 8001cbe:	4b6b      	ldr	r3, [pc, #428]	; (8001e6c <unsuck_the_cake+0x1d0>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
		return;
 8001cc4:	e0ca      	b.n	8001e5c <unsuck_the_cake+0x1c0>
	}

	if (servonum == 4 && handStatus[1] == 0) {
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d107      	bne.n	8001cdc <unsuck_the_cake+0x40>
 8001ccc:	4b66      	ldr	r3, [pc, #408]	; (8001e68 <unsuck_the_cake+0x1cc>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d103      	bne.n	8001cdc <unsuck_the_cake+0x40>
		dont_go_down[1] = 1;
 8001cd4:	4b65      	ldr	r3, [pc, #404]	; (8001e6c <unsuck_the_cake+0x1d0>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	605a      	str	r2, [r3, #4]
		return;
 8001cda:	e0bf      	b.n	8001e5c <unsuck_the_cake+0x1c0>
	}

	if (servonum == 3 && handStatus[2] == 0) {
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d107      	bne.n	8001cf2 <unsuck_the_cake+0x56>
 8001ce2:	4b61      	ldr	r3, [pc, #388]	; (8001e68 <unsuck_the_cake+0x1cc>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d103      	bne.n	8001cf2 <unsuck_the_cake+0x56>
		dont_go_down[2] = 1;
 8001cea:	4b60      	ldr	r3, [pc, #384]	; (8001e6c <unsuck_the_cake+0x1d0>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	609a      	str	r2, [r3, #8]
		return;
 8001cf0:	e0b4      	b.n	8001e5c <unsuck_the_cake+0x1c0>
	}

	while (1) {
		if (step == 0)
 8001cf2:	4b5f      	ldr	r3, [pc, #380]	; (8001e70 <unsuck_the_cake+0x1d4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d000      	beq.n	8001cfc <unsuck_the_cake+0x60>
 8001cfa:	e7fa      	b.n	8001cf2 <unsuck_the_cake+0x56>
			break;
 8001cfc:	bf00      	nop
	}
	if (servonum == 7) {
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b07      	cmp	r3, #7
 8001d02:	d11a      	bne.n	8001d3a <unsuck_the_cake+0x9e>
		cake_layer[(0 + rotate_offset) % 4] += 1;
 8001d04:	4b5b      	ldr	r3, [pc, #364]	; (8001e74 <unsuck_the_cake+0x1d8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	425a      	negs	r2, r3
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	f002 0203 	and.w	r2, r2, #3
 8001d12:	bf58      	it	pl
 8001d14:	4253      	negpl	r3, r2
 8001d16:	4a58      	ldr	r2, [pc, #352]	; (8001e78 <unsuck_the_cake+0x1dc>)
 8001d18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d1c:	3201      	adds	r2, #1
 8001d1e:	4956      	ldr	r1, [pc, #344]	; (8001e78 <unsuck_the_cake+0x1dc>)
 8001d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		unsuck[0] = 1;
 8001d24:	4b55      	ldr	r3, [pc, #340]	; (8001e7c <unsuck_the_cake+0x1e0>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
		unsuck_temp++;
 8001d2a:	4b55      	ldr	r3, [pc, #340]	; (8001e80 <unsuck_the_cake+0x1e4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	4a53      	ldr	r2, [pc, #332]	; (8001e80 <unsuck_the_cake+0x1e4>)
 8001d32:	6013      	str	r3, [r2, #0]
		handStatus[0] = 0;
 8001d34:	4b4c      	ldr	r3, [pc, #304]	; (8001e68 <unsuck_the_cake+0x1cc>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
	}
	if (servonum == 4) {
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d11b      	bne.n	8001d78 <unsuck_the_cake+0xdc>
		cake_layer[(1 + rotate_offset) % 4] += 1;
 8001d40:	4b4c      	ldr	r3, [pc, #304]	; (8001e74 <unsuck_the_cake+0x1d8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	3301      	adds	r3, #1
 8001d46:	425a      	negs	r2, r3
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	f002 0203 	and.w	r2, r2, #3
 8001d50:	bf58      	it	pl
 8001d52:	4253      	negpl	r3, r2
 8001d54:	4a48      	ldr	r2, [pc, #288]	; (8001e78 <unsuck_the_cake+0x1dc>)
 8001d56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d5a:	3201      	adds	r2, #1
 8001d5c:	4946      	ldr	r1, [pc, #280]	; (8001e78 <unsuck_the_cake+0x1dc>)
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		unsuck[1] = 1;
 8001d62:	4b46      	ldr	r3, [pc, #280]	; (8001e7c <unsuck_the_cake+0x1e0>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	605a      	str	r2, [r3, #4]
		unsuck_temp++;
 8001d68:	4b45      	ldr	r3, [pc, #276]	; (8001e80 <unsuck_the_cake+0x1e4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	4a44      	ldr	r2, [pc, #272]	; (8001e80 <unsuck_the_cake+0x1e4>)
 8001d70:	6013      	str	r3, [r2, #0]
		handStatus[1] = 0;
 8001d72:	4b3d      	ldr	r3, [pc, #244]	; (8001e68 <unsuck_the_cake+0x1cc>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	605a      	str	r2, [r3, #4]
	}
	if (servonum == 3) {
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d11b      	bne.n	8001db6 <unsuck_the_cake+0x11a>
		cake_layer[(2 + rotate_offset) % 4] += 1;
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <unsuck_the_cake+0x1d8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3302      	adds	r3, #2
 8001d84:	425a      	negs	r2, r3
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	f002 0203 	and.w	r2, r2, #3
 8001d8e:	bf58      	it	pl
 8001d90:	4253      	negpl	r3, r2
 8001d92:	4a39      	ldr	r2, [pc, #228]	; (8001e78 <unsuck_the_cake+0x1dc>)
 8001d94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d98:	3201      	adds	r2, #1
 8001d9a:	4937      	ldr	r1, [pc, #220]	; (8001e78 <unsuck_the_cake+0x1dc>)
 8001d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		unsuck[2] = 1;
 8001da0:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <unsuck_the_cake+0x1e0>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	609a      	str	r2, [r3, #8]
		unsuck_temp++;
 8001da6:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <unsuck_the_cake+0x1e4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	3301      	adds	r3, #1
 8001dac:	4a34      	ldr	r2, [pc, #208]	; (8001e80 <unsuck_the_cake+0x1e4>)
 8001dae:	6013      	str	r3, [r2, #0]
		handStatus[2] = 0;
 8001db0:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <unsuck_the_cake+0x1cc>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
	}
	hand_transfer_fn();
 8001db6:	f7ff fd75 	bl	80018a4 <hand_transfer_fn>
	if (order == 1)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d108      	bne.n	8001dd2 <unsuck_the_cake+0x136>
		UART_Send_SetMotorPosition(servonum, 1480, 200); // put the cake to the top 1320
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	22c8      	movs	r2, #200	; 0xc8
 8001dc6:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe ffee 	bl	8000dac <UART_Send_SetMotorPosition>
 8001dd0:	e016      	b.n	8001e00 <unsuck_the_cake+0x164>
	else if (order == 2)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d108      	bne.n	8001dea <unsuck_the_cake+0x14e>
		UART_Send_SetMotorPosition(servonum, 1480, 200); // put the cake to the middle 1225
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	22c8      	movs	r2, #200	; 0xc8
 8001dde:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe ffe2 	bl	8000dac <UART_Send_SetMotorPosition>
 8001de8:	e00a      	b.n	8001e00 <unsuck_the_cake+0x164>
	else if (order == 3)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d107      	bne.n	8001e00 <unsuck_the_cake+0x164>
		UART_Send_SetMotorPosition(servonum, 1480, 200); // put the cake to the bottom 1100
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	22c8      	movs	r2, #200	; 0xc8
 8001df6:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe ffd6 	bl	8000dac <UART_Send_SetMotorPosition>

	servo_delay_temp = 1;
 8001e00:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <unsuck_the_cake+0x1e8>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0)
 8001e06:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <unsuck_the_cake+0x1e8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d000      	beq.n	8001e10 <unsuck_the_cake+0x174>
 8001e0e:	e7fa      	b.n	8001e06 <unsuck_the_cake+0x16a>
			break;
 8001e10:	bf00      	nop
	}
	if (servonum == 7) {
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b07      	cmp	r3, #7
 8001e16:	d108      	bne.n	8001e2a <unsuck_the_cake+0x18e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 2000 * 255); // open valve1
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <unsuck_the_cake+0x1ec>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a1b      	ldr	r2, [pc, #108]	; (8001e8c <unsuck_the_cake+0x1f0>)
 8001e1e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);      // close pump1
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <unsuck_the_cake+0x1ec>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2200      	movs	r2, #0
 8001e26:	635a      	str	r2, [r3, #52]	; 0x34
 8001e28:	e018      	b.n	8001e5c <unsuck_the_cake+0x1c0>

	}
	else if (servonum == 4) {
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d108      	bne.n	8001e42 <unsuck_the_cake+0x1a6>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2000 * 255); // open valve4
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <unsuck_the_cake+0x1f4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a15      	ldr	r2, [pc, #84]	; (8001e8c <unsuck_the_cake+0x1f0>)
 8001e36:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);      // close pump4
 8001e38:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <unsuck_the_cake+0x1f4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e40:	e00c      	b.n	8001e5c <unsuck_the_cake+0x1c0>

	}
	else if (servonum == 3) {
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d109      	bne.n	8001e5c <unsuck_the_cake+0x1c0>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 2000 * 255); // open valve3
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <unsuck_the_cake+0x1f4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <unsuck_the_cake+0x1f0>)
 8001e4e:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);      // close pump3
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <unsuck_the_cake+0x1f4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2200      	movs	r2, #0
 8001e56:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e58:	e000      	b.n	8001e5c <unsuck_the_cake+0x1c0>
		return;
 8001e5a:	bf00      	nop

	}

}
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200014f4 	.word	0x200014f4
 8001e68:	20000998 	.word	0x20000998
 8001e6c:	200009a4 	.word	0x200009a4
 8001e70:	200014e4 	.word	0x200014e4
 8001e74:	2000097c 	.word	0x2000097c
 8001e78:	20000988 	.word	0x20000988
 8001e7c:	200014a0 	.word	0x200014a0
 8001e80:	200014b0 	.word	0x200014b0
 8001e84:	20001554 	.word	0x20001554
 8001e88:	200015f8 	.word	0x200015f8
 8001e8c:	0007c830 	.word	0x0007c830
 8001e90:	20001640 	.word	0x20001640
 8001e94:	00000000 	.word	0x00000000

08001e98 <rotate_the_ring>:
void rotate_the_ring(int numb) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	if (num == 1 && cake_order != -1) {
 8001ea0:	4b93      	ldr	r3, [pc, #588]	; (80020f0 <rotate_the_ring+0x258>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d113      	bne.n	8001ed0 <rotate_the_ring+0x38>
 8001ea8:	4b92      	ldr	r3, [pc, #584]	; (80020f4 <rotate_the_ring+0x25c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d00e      	beq.n	8001ed0 <rotate_the_ring+0x38>
		rotate_offset = ((numb + 1) % 4);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	425a      	negs	r2, r3
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	f002 0203 	and.w	r2, r2, #3
 8001ec0:	bf58      	it	pl
 8001ec2:	4253      	negpl	r3, r2
 8001ec4:	4a8c      	ldr	r2, [pc, #560]	; (80020f8 <rotate_the_ring+0x260>)
 8001ec6:	6013      	str	r3, [r2, #0]
//		if (rotate_offset == 0)
//			rotate_offset = 4;

		numb = rotate_offset;
 8001ec8:	4b8b      	ldr	r3, [pc, #556]	; (80020f8 <rotate_the_ring+0x260>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	e03f      	b.n	8001f50 <rotate_the_ring+0xb8>
	}
	else if (num == 2 && cake_order != -1) {
 8001ed0:	4b87      	ldr	r3, [pc, #540]	; (80020f0 <rotate_the_ring+0x258>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d113      	bne.n	8001f00 <rotate_the_ring+0x68>
 8001ed8:	4b86      	ldr	r3, [pc, #536]	; (80020f4 <rotate_the_ring+0x25c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee0:	d00e      	beq.n	8001f00 <rotate_the_ring+0x68>
		rotate_offset = (numb + 2) % 4;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	425a      	negs	r2, r3
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	f002 0203 	and.w	r2, r2, #3
 8001ef0:	bf58      	it	pl
 8001ef2:	4253      	negpl	r3, r2
 8001ef4:	4a80      	ldr	r2, [pc, #512]	; (80020f8 <rotate_the_ring+0x260>)
 8001ef6:	6013      	str	r3, [r2, #0]
//		if (rotate_offset == 0)
//			rotate_offset = 4;

		numb = rotate_offset;
 8001ef8:	4b7f      	ldr	r3, [pc, #508]	; (80020f8 <rotate_the_ring+0x260>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	e027      	b.n	8001f50 <rotate_the_ring+0xb8>
	}
	else if (num == 3 && cake_order != -1) {
 8001f00:	4b7b      	ldr	r3, [pc, #492]	; (80020f0 <rotate_the_ring+0x258>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d113      	bne.n	8001f30 <rotate_the_ring+0x98>
 8001f08:	4b7a      	ldr	r3, [pc, #488]	; (80020f4 <rotate_the_ring+0x25c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f10:	d00e      	beq.n	8001f30 <rotate_the_ring+0x98>
		rotate_offset = (numb + 3) % 4;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3303      	adds	r3, #3
 8001f16:	425a      	negs	r2, r3
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	f002 0203 	and.w	r2, r2, #3
 8001f20:	bf58      	it	pl
 8001f22:	4253      	negpl	r3, r2
 8001f24:	4a74      	ldr	r2, [pc, #464]	; (80020f8 <rotate_the_ring+0x260>)
 8001f26:	6013      	str	r3, [r2, #0]
//		if (rotate_offset == 0)
//			rotate_offset = 4;

		numb = rotate_offset;
 8001f28:	4b73      	ldr	r3, [pc, #460]	; (80020f8 <rotate_the_ring+0x260>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	e00f      	b.n	8001f50 <rotate_the_ring+0xb8>
	}
	else if (num == 4 && cake_order != -1)
 8001f30:	4b6f      	ldr	r3, [pc, #444]	; (80020f0 <rotate_the_ring+0x258>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d108      	bne.n	8001f4a <rotate_the_ring+0xb2>
 8001f38:	4b6e      	ldr	r3, [pc, #440]	; (80020f4 <rotate_the_ring+0x25c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f40:	d003      	beq.n	8001f4a <rotate_the_ring+0xb2>
		rotate_offset = numb;
 8001f42:	4a6d      	ldr	r2, [pc, #436]	; (80020f8 <rotate_the_ring+0x260>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	e002      	b.n	8001f50 <rotate_the_ring+0xb8>
	else
		rotate_offset = numb;
 8001f4a:	4a6b      	ldr	r2, [pc, #428]	; (80020f8 <rotate_the_ring+0x260>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6013      	str	r3, [r2, #0]
	rotate_state[0] = 0;
 8001f50:	4b6a      	ldr	r3, [pc, #424]	; (80020fc <rotate_the_ring+0x264>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
	rotate_state[1] = 0;
 8001f56:	4b69      	ldr	r3, [pc, #420]	; (80020fc <rotate_the_ring+0x264>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	605a      	str	r2, [r3, #4]
	rotate_state[2] = 0;
 8001f5c:	4b67      	ldr	r3, [pc, #412]	; (80020fc <rotate_the_ring+0x264>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
	if (numb == 0) {
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d106      	bne.n	8001f76 <rotate_the_ring+0xde>
		step1 = 0;
 8001f68:	4b65      	ldr	r3, [pc, #404]	; (8002100 <rotate_the_ring+0x268>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
		anglegoal = 0;
 8001f6e:	4b65      	ldr	r3, [pc, #404]	; (8002104 <rotate_the_ring+0x26c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	e01d      	b.n	8001fb2 <rotate_the_ring+0x11a>

	}
	else if (numb == 1) {
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d106      	bne.n	8001f8a <rotate_the_ring+0xf2>
		step1 = 0;
 8001f7c:	4b60      	ldr	r3, [pc, #384]	; (8002100 <rotate_the_ring+0x268>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
		anglegoal = 90;
 8001f82:	4b60      	ldr	r3, [pc, #384]	; (8002104 <rotate_the_ring+0x26c>)
 8001f84:	225a      	movs	r2, #90	; 0x5a
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	e013      	b.n	8001fb2 <rotate_the_ring+0x11a>
	}
	else if (numb == 2) {
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d106      	bne.n	8001f9e <rotate_the_ring+0x106>
		step1 = 0;
 8001f90:	4b5b      	ldr	r3, [pc, #364]	; (8002100 <rotate_the_ring+0x268>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
		anglegoal = 180;
 8001f96:	4b5b      	ldr	r3, [pc, #364]	; (8002104 <rotate_the_ring+0x26c>)
 8001f98:	22b4      	movs	r2, #180	; 0xb4
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	e009      	b.n	8001fb2 <rotate_the_ring+0x11a>
	}
	else if (numb == 3) {
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d106      	bne.n	8001fb2 <rotate_the_ring+0x11a>
		step1 = 0;
 8001fa4:	4b56      	ldr	r3, [pc, #344]	; (8002100 <rotate_the_ring+0x268>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
		anglegoal = 270;
 8001faa:	4b56      	ldr	r3, [pc, #344]	; (8002104 <rotate_the_ring+0x26c>)
 8001fac:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001fb0:	601a      	str	r2, [r3, #0]
//	}
//	else if (numb == 7) {
//		step1 = 0;
//		anglegoal = -270;
//	}
	step1 = (anglegoal - anglebefore) * 5 * 8 / 1.8; // calculate the step1
 8001fb2:	4b54      	ldr	r3, [pc, #336]	; (8002104 <rotate_the_ring+0x26c>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4b54      	ldr	r3, [pc, #336]	; (8002108 <rotate_the_ring+0x270>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	1ad2      	subs	r2, r2, r3
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fa83 	bl	80004d0 <__aeabi_i2d>
 8001fca:	a347      	add	r3, pc, #284	; (adr r3, 80020e8 <rotate_the_ring+0x250>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	f7fe fc12 	bl	80007f8 <__aeabi_ddiv>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f7fe fcf4 	bl	80009c8 <__aeabi_d2iz>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4a47      	ldr	r2, [pc, #284]	; (8002100 <rotate_the_ring+0x268>)
 8001fe4:	6013      	str	r3, [r2, #0]
	if (step1 > 4000) {
 8001fe6:	4b46      	ldr	r3, [pc, #280]	; (8002100 <rotate_the_ring+0x268>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001fee:	dd06      	ble.n	8001ffe <rotate_the_ring+0x166>
		step1 = step1 - 8000;
 8001ff0:	4b43      	ldr	r3, [pc, #268]	; (8002100 <rotate_the_ring+0x268>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f5a3 53fa 	sub.w	r3, r3, #8000	; 0x1f40
 8001ff8:	4a41      	ldr	r2, [pc, #260]	; (8002100 <rotate_the_ring+0x268>)
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	e00a      	b.n	8002014 <rotate_the_ring+0x17c>
	}
	else if (step1 < -4000) {
 8001ffe:	4b40      	ldr	r3, [pc, #256]	; (8002100 <rotate_the_ring+0x268>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 8002006:	da05      	bge.n	8002014 <rotate_the_ring+0x17c>
		step1 = 8000 + step1;
 8002008:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <rotate_the_ring+0x268>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8002010:	4a3b      	ldr	r2, [pc, #236]	; (8002100 <rotate_the_ring+0x268>)
 8002012:	6013      	str	r3, [r2, #0]
	}

	rotate_temp = 0;
 8002014:	4b3d      	ldr	r3, [pc, #244]	; (800210c <rotate_the_ring+0x274>)
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
	anglebefore = anglegoal;
 800201a:	4b3a      	ldr	r3, [pc, #232]	; (8002104 <rotate_the_ring+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a3a      	ldr	r2, [pc, #232]	; (8002108 <rotate_the_ring+0x270>)
 8002020:	6013      	str	r3, [r2, #0]
	if (step1 >= 0) {
 8002022:	4b37      	ldr	r3, [pc, #220]	; (8002100 <rotate_the_ring+0x268>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	db03      	blt.n	8002032 <rotate_the_ring+0x19a>
		dir_state1 = 1;
 800202a:	4b39      	ldr	r3, [pc, #228]	; (8002110 <rotate_the_ring+0x278>)
 800202c:	2201      	movs	r2, #1
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	e00b      	b.n	800204a <rotate_the_ring+0x1b2>

	}

	else if (step1 < 0) {
 8002032:	4b33      	ldr	r3, [pc, #204]	; (8002100 <rotate_the_ring+0x268>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	da07      	bge.n	800204a <rotate_the_ring+0x1b2>
		step1 = -step1;
 800203a:	4b31      	ldr	r3, [pc, #196]	; (8002100 <rotate_the_ring+0x268>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	425b      	negs	r3, r3
 8002040:	4a2f      	ldr	r2, [pc, #188]	; (8002100 <rotate_the_ring+0x268>)
 8002042:	6013      	str	r3, [r2, #0]

		dir_state1 = 0;
 8002044:	4b32      	ldr	r3, [pc, #200]	; (8002110 <rotate_the_ring+0x278>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
	}
	step1 = step1 + 500;
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <rotate_the_ring+0x268>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002052:	4a2b      	ldr	r2, [pc, #172]	; (8002100 <rotate_the_ring+0x268>)
 8002054:	6013      	str	r3, [r2, #0]
	step = step1;
 8002056:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <rotate_the_ring+0x268>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a2e      	ldr	r2, [pc, #184]	; (8002114 <rotate_the_ring+0x27c>)
 800205c:	6013      	str	r3, [r2, #0]
	step_debug = step;
 800205e:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <rotate_the_ring+0x27c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a2d      	ldr	r2, [pc, #180]	; (8002118 <rotate_the_ring+0x280>)
 8002064:	6013      	str	r3, [r2, #0]
	while (1) {
		if (finish == 1) {
 8002066:	4b2d      	ldr	r3, [pc, #180]	; (800211c <rotate_the_ring+0x284>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d106      	bne.n	800207c <rotate_the_ring+0x1e4>
			finish_all_motion();
 800206e:	f001 f963 	bl	8003338 <finish_all_motion>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20000 * 255);
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <rotate_the_ring+0x288>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a2b      	ldr	r2, [pc, #172]	; (8002124 <rotate_the_ring+0x28c>)
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800207a:	e02e      	b.n	80020da <rotate_the_ring+0x242>
		}
		if (numb == rotate_dir) {
 800207c:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <rotate_the_ring+0x290>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	d10d      	bne.n	80020a2 <rotate_the_ring+0x20a>

			step = 2.86 * 5 * 8 / 1.8;
 8002086:	4b23      	ldr	r3, [pc, #140]	; (8002114 <rotate_the_ring+0x27c>)
 8002088:	223f      	movs	r2, #63	; 0x3f
 800208a:	601a      	str	r2, [r3, #0]
			step_debug = step;
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <rotate_the_ring+0x27c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a21      	ldr	r2, [pc, #132]	; (8002118 <rotate_the_ring+0x280>)
 8002092:	6013      	str	r3, [r2, #0]
			s++;
 8002094:	4b25      	ldr	r3, [pc, #148]	; (800212c <rotate_the_ring+0x294>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	4a24      	ldr	r2, [pc, #144]	; (800212c <rotate_the_ring+0x294>)
 800209c:	6013      	str	r3, [r2, #0]
			numb = 5;
 800209e:	2305      	movs	r3, #5
 80020a0:	607b      	str	r3, [r7, #4]
		}
		if (step == 0 && numb == 5) {
 80020a2:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <rotate_the_ring+0x27c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d107      	bne.n	80020ba <rotate_the_ring+0x222>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b05      	cmp	r3, #5
 80020ae:	d104      	bne.n	80020ba <rotate_the_ring+0x222>
			arr = 1000;
 80020b0:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <rotate_the_ring+0x298>)
 80020b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020b6:	601a      	str	r2, [r3, #0]

			break;
 80020b8:	e00f      	b.n	80020da <rotate_the_ring+0x242>
		}
		else if (step == 0 && numb != 5) {
 80020ba:	4b16      	ldr	r3, [pc, #88]	; (8002114 <rotate_the_ring+0x27c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1d1      	bne.n	8002066 <rotate_the_ring+0x1ce>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d0ce      	beq.n	8002066 <rotate_the_ring+0x1ce>

			step = 90 * 5 * 8 / 1.8;
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <rotate_the_ring+0x27c>)
 80020ca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80020ce:	601a      	str	r2, [r3, #0]
			step_debug = step;
 80020d0:	4b10      	ldr	r3, [pc, #64]	; (8002114 <rotate_the_ring+0x27c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a10      	ldr	r2, [pc, #64]	; (8002118 <rotate_the_ring+0x280>)
 80020d6:	6013      	str	r3, [r2, #0]
		if (finish == 1) {
 80020d8:	e7c5      	b.n	8002066 <rotate_the_ring+0x1ce>
		}
	}
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	f3af 8000 	nop.w
 80020e8:	cccccccd 	.word	0xcccccccd
 80020ec:	3ffccccc 	.word	0x3ffccccc
 80020f0:	200014f8 	.word	0x200014f8
 80020f4:	20000010 	.word	0x20000010
 80020f8:	2000097c 	.word	0x2000097c
 80020fc:	2000156c 	.word	0x2000156c
 8002100:	2000147c 	.word	0x2000147c
 8002104:	20001484 	.word	0x20001484
 8002108:	20001488 	.word	0x20001488
 800210c:	2000157c 	.word	0x2000157c
 8002110:	20001480 	.word	0x20001480
 8002114:	200014e4 	.word	0x200014e4
 8002118:	20000978 	.word	0x20000978
 800211c:	200014f4 	.word	0x200014f4
 8002120:	200015b0 	.word	0x200015b0
 8002124:	004dd1e0 	.word	0x004dd1e0
 8002128:	20001578 	.word	0x20001578
 800212c:	20000974 	.word	0x20000974
 8002130:	2000000c 	.word	0x2000000c

08002134 <put_the_cherry>:
void put_the_cherry(int numb) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	if (finish == 1)
 800213c:	4b56      	ldr	r3, [pc, #344]	; (8002298 <put_the_cherry+0x164>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b01      	cmp	r3, #1
 8002142:	f000 80a3 	beq.w	800228c <put_the_cherry+0x158>
		return;
	rotate_the_ring(numb);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fea6 	bl	8001e98 <rotate_the_ring>
	while (1) {
		if (step == 0) {
 800214c:	4b53      	ldr	r3, [pc, #332]	; (800229c <put_the_cherry+0x168>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d000      	beq.n	8002156 <put_the_cherry+0x22>
 8002154:	e7fa      	b.n	800214c <put_the_cherry+0x18>
			break;
 8002156:	bf00      	nop
		}
	}

	if (steady == 0) {
 8002158:	4b51      	ldr	r3, [pc, #324]	; (80022a0 <put_the_cherry+0x16c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d149      	bne.n	80021f4 <put_the_cherry+0xc0>
		if (order_arror[(4 + rotate_offset) % 4] == 1)
 8002160:	4b50      	ldr	r3, [pc, #320]	; (80022a4 <put_the_cherry+0x170>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3304      	adds	r3, #4
 8002166:	425a      	negs	r2, r3
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	f002 0203 	and.w	r2, r2, #3
 8002170:	bf58      	it	pl
 8002172:	4253      	negpl	r3, r2
 8002174:	4a4c      	ldr	r2, [pc, #304]	; (80022a8 <put_the_cherry+0x174>)
 8002176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d106      	bne.n	800218c <put_the_cherry+0x58>
			UART_Send_SetMotorPosition(5, 1330, 300);
 800217e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002182:	f240 5132 	movw	r1, #1330	; 0x532
 8002186:	2005      	movs	r0, #5
 8002188:	f7fe fe10 	bl	8000dac <UART_Send_SetMotorPosition>
		if (order_arror[(4 + rotate_offset) % 4] == 2)
 800218c:	4b45      	ldr	r3, [pc, #276]	; (80022a4 <put_the_cherry+0x170>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	3304      	adds	r3, #4
 8002192:	425a      	negs	r2, r3
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	f002 0203 	and.w	r2, r2, #3
 800219c:	bf58      	it	pl
 800219e:	4253      	negpl	r3, r2
 80021a0:	4a41      	ldr	r2, [pc, #260]	; (80022a8 <put_the_cherry+0x174>)
 80021a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d106      	bne.n	80021b8 <put_the_cherry+0x84>
			UART_Send_SetMotorPosition(5, 1330, 300);
 80021aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021ae:	f240 5132 	movw	r1, #1330	; 0x532
 80021b2:	2005      	movs	r0, #5
 80021b4:	f7fe fdfa 	bl	8000dac <UART_Send_SetMotorPosition>
		if (order_arror[(4 + rotate_offset) % 4] == 3)
 80021b8:	4b3a      	ldr	r3, [pc, #232]	; (80022a4 <put_the_cherry+0x170>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3304      	adds	r3, #4
 80021be:	425a      	negs	r2, r3
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	f002 0203 	and.w	r2, r2, #3
 80021c8:	bf58      	it	pl
 80021ca:	4253      	negpl	r3, r2
 80021cc:	4a36      	ldr	r2, [pc, #216]	; (80022a8 <put_the_cherry+0x174>)
 80021ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d107      	bne.n	80021e6 <put_the_cherry+0xb2>
			UART_Send_SetMotorPosition(5, 1450, 300);
 80021d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021da:	f240 51aa 	movw	r1, #1450	; 0x5aa
 80021de:	2005      	movs	r0, #5
 80021e0:	f7fe fde4 	bl	8000dac <UART_Send_SetMotorPosition>
 80021e4:	e006      	b.n	80021f4 <put_the_cherry+0xc0>
		else
			UART_Send_SetMotorPosition(5, 1330, 300);
 80021e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021ea:	f240 5132 	movw	r1, #1330	; 0x532
 80021ee:	2005      	movs	r0, #5
 80021f0:	f7fe fddc 	bl	8000dac <UART_Send_SetMotorPosition>
	}
	if (steady == 1)
 80021f4:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <put_the_cherry+0x16c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d106      	bne.n	800220a <put_the_cherry+0xd6>
		UART_Send_SetMotorPosition(5, 1330, 300);
 80021fc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002200:	f240 5132 	movw	r1, #1330	; 0x532
 8002204:	2005      	movs	r0, #5
 8002206:	f7fe fdd1 	bl	8000dac <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 800220a:	4b28      	ldr	r3, [pc, #160]	; (80022ac <put_the_cherry+0x178>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0)
 8002210:	4b26      	ldr	r3, [pc, #152]	; (80022ac <put_the_cherry+0x178>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d000      	beq.n	800221a <put_the_cherry+0xe6>
 8002218:	e7fa      	b.n	8002210 <put_the_cherry+0xdc>
			break;
 800221a:	bf00      	nop
	}
	UART_Send_SetMotorPosition(6, 2100, 500);
 800221c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002220:	f640 0134 	movw	r1, #2100	; 0x834
 8002224:	2006      	movs	r0, #6
 8002226:	f7fe fdc1 	bl	8000dac <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <put_the_cherry+0x178>)
 800222c:	2201      	movs	r2, #1
 800222e:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0)
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <put_the_cherry+0x178>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d000      	beq.n	800223a <put_the_cherry+0x106>
 8002238:	e7fa      	b.n	8002230 <put_the_cherry+0xfc>
			break;
 800223a:	bf00      	nop
	}
	cherry_delay_temp = 1;
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <put_the_cherry+0x17c>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]
	while (1) {
		if (cherry_delay_temp == 0)
 8002242:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <put_the_cherry+0x17c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d000      	beq.n	800224c <put_the_cherry+0x118>
 800224a:	e7fa      	b.n	8002242 <put_the_cherry+0x10e>
			break;
 800224c:	bf00      	nop
	}
	UART_Send_SetMotorPosition(5, 1200, 300);
 800224e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002252:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8002256:	2005      	movs	r0, #5
 8002258:	f7fe fda8 	bl	8000dac <UART_Send_SetMotorPosition>

	servo_delay_temp = 1;
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <put_the_cherry+0x178>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0)
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <put_the_cherry+0x178>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d000      	beq.n	800226c <put_the_cherry+0x138>
 800226a:	e7fa      	b.n	8002262 <put_the_cherry+0x12e>
			break;
 800226c:	bf00      	nop
	}
	UART_Send_SetMotorPosition(6, 1000, 500);
 800226e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002272:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002276:	2006      	movs	r0, #6
 8002278:	f7fe fd98 	bl	8000dac <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <put_the_cherry+0x178>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0)
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <put_the_cherry+0x178>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <put_the_cherry+0x15c>
 800228a:	e7fa      	b.n	8002282 <put_the_cherry+0x14e>
		return;
 800228c:	bf00      	nop
 800228e:	e000      	b.n	8002292 <put_the_cherry+0x15e>
			break;
 8002290:	bf00      	nop
	}

}
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200014f4 	.word	0x200014f4
 800229c:	200014e4 	.word	0x200014e4
 80022a0:	20000018 	.word	0x20000018
 80022a4:	2000097c 	.word	0x2000097c
 80022a8:	200009b0 	.word	0x200009b0
 80022ac:	20001554 	.word	0x20001554
 80022b0:	2000155c 	.word	0x2000155c

080022b4 <judge_the_empty_and_order>:
void judge_the_empty_and_order() {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
//1=leftfront,2=rightfront,3=rightback,4=leftback
// let three servo turn to the correct side
	if (if_gate_ok == 0)
 80022ba:	4b84      	ldr	r3, [pc, #528]	; (80024cc <judge_the_empty_and_order+0x218>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 8317 	beq.w	80028f2 <judge_the_empty_and_order+0x63e>
		return;
	for (int i = 0; i < 4; i++) {
 80022c4:	2300      	movs	r3, #0
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	e01c      	b.n	8002304 <judge_the_empty_and_order+0x50>
		if (hole[i] != 0)
 80022ca:	4a81      	ldr	r2, [pc, #516]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4413      	add	r3, r2
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d004      	beq.n	80022e0 <judge_the_empty_and_order+0x2c>
			cake_layer[i] = 3;
 80022d6:	4a7f      	ldr	r2, [pc, #508]	; (80024d4 <judge_the_empty_and_order+0x220>)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2103      	movs	r1, #3
 80022dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (hole[i] == 0) {
 80022e0:	4a7b      	ldr	r2, [pc, #492]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d108      	bne.n	80022fe <judge_the_empty_and_order+0x4a>
			num = i + 1;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3301      	adds	r3, #1
 80022f0:	4a79      	ldr	r2, [pc, #484]	; (80024d8 <judge_the_empty_and_order+0x224>)
 80022f2:	6013      	str	r3, [r2, #0]
			cake_layer[i] = 0;
 80022f4:	4a77      	ldr	r2, [pc, #476]	; (80024d4 <judge_the_empty_and_order+0x220>)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2100      	movs	r1, #0
 80022fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3301      	adds	r3, #1
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b03      	cmp	r3, #3
 8002308:	dddf      	ble.n	80022ca <judge_the_empty_and_order+0x16>
		}
	}

	if (num == 1) {
 800230a:	4b73      	ldr	r3, [pc, #460]	; (80024d8 <judge_the_empty_and_order+0x224>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b01      	cmp	r3, #1
 8002310:	f040 80b1 	bne.w	8002476 <judge_the_empty_and_order+0x1c2>
		rotate_the_ring(1);       //90
 8002314:	2001      	movs	r0, #1
 8002316:	f7ff fdbf 	bl	8001e98 <rotate_the_ring>
		rotate_offset = 1;
 800231a:	4b70      	ldr	r3, [pc, #448]	; (80024dc <judge_the_empty_and_order+0x228>)
 800231c:	2201      	movs	r2, #1
 800231e:	601a      	str	r2, [r3, #0]
		if (hole[1] == 'b' && hole[2] == 'y' && hole[3] == 'p') {
 8002320:	4b6b      	ldr	r3, [pc, #428]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 8002322:	785b      	ldrb	r3, [r3, #1]
 8002324:	2b62      	cmp	r3, #98	; 0x62
 8002326:	d117      	bne.n	8002358 <judge_the_empty_and_order+0xa4>
 8002328:	4b69      	ldr	r3, [pc, #420]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 800232a:	789b      	ldrb	r3, [r3, #2]
 800232c:	2b79      	cmp	r3, #121	; 0x79
 800232e:	d113      	bne.n	8002358 <judge_the_empty_and_order+0xa4>
 8002330:	4b67      	ldr	r3, [pc, #412]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 8002332:	78db      	ldrb	r3, [r3, #3]
 8002334:	2b70      	cmp	r3, #112	; 0x70
 8002336:	d10f      	bne.n	8002358 <judge_the_empty_and_order+0xa4>
			cake_order = 1;
 8002338:	4b69      	ldr	r3, [pc, #420]	; (80024e0 <judge_the_empty_and_order+0x22c>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800233e:	4b69      	ldr	r3, [pc, #420]	; (80024e4 <judge_the_empty_and_order+0x230>)
 8002340:	2201      	movs	r2, #1
 8002342:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8002344:	4b67      	ldr	r3, [pc, #412]	; (80024e4 <judge_the_empty_and_order+0x230>)
 8002346:	2201      	movs	r2, #1
 8002348:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800234a:	4b66      	ldr	r3, [pc, #408]	; (80024e4 <judge_the_empty_and_order+0x230>)
 800234c:	2201      	movs	r2, #1
 800234e:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 8002350:	4b64      	ldr	r3, [pc, #400]	; (80024e4 <judge_the_empty_and_order+0x230>)
 8002352:	2200      	movs	r2, #0
 8002354:	811a      	strh	r2, [r3, #8]
 8002356:	e2c7      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
		else if (hole[1] == 'p' && hole[2] == 'y' && hole[3] == 'b') {
 8002358:	4b5d      	ldr	r3, [pc, #372]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 800235a:	785b      	ldrb	r3, [r3, #1]
 800235c:	2b70      	cmp	r3, #112	; 0x70
 800235e:	d117      	bne.n	8002390 <judge_the_empty_and_order+0xdc>
 8002360:	4b5b      	ldr	r3, [pc, #364]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 8002362:	789b      	ldrb	r3, [r3, #2]
 8002364:	2b79      	cmp	r3, #121	; 0x79
 8002366:	d113      	bne.n	8002390 <judge_the_empty_and_order+0xdc>
 8002368:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 800236a:	78db      	ldrb	r3, [r3, #3]
 800236c:	2b62      	cmp	r3, #98	; 0x62
 800236e:	d10f      	bne.n	8002390 <judge_the_empty_and_order+0xdc>
			cake_order = 2;
 8002370:	4b5b      	ldr	r3, [pc, #364]	; (80024e0 <judge_the_empty_and_order+0x22c>)
 8002372:	2202      	movs	r2, #2
 8002374:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8002376:	4b5b      	ldr	r3, [pc, #364]	; (80024e4 <judge_the_empty_and_order+0x230>)
 8002378:	2201      	movs	r2, #1
 800237a:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 800237c:	4b59      	ldr	r3, [pc, #356]	; (80024e4 <judge_the_empty_and_order+0x230>)
 800237e:	2200      	movs	r2, #0
 8002380:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8002382:	4b58      	ldr	r3, [pc, #352]	; (80024e4 <judge_the_empty_and_order+0x230>)
 8002384:	2201      	movs	r2, #1
 8002386:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8002388:	4b56      	ldr	r3, [pc, #344]	; (80024e4 <judge_the_empty_and_order+0x230>)
 800238a:	2201      	movs	r2, #1
 800238c:	811a      	strh	r2, [r3, #8]
 800238e:	e2ab      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
		else if (hole[1] == 'y' && hole[2] == 'b' && hole[3] == 'p') {
 8002390:	4b4f      	ldr	r3, [pc, #316]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 8002392:	785b      	ldrb	r3, [r3, #1]
 8002394:	2b79      	cmp	r3, #121	; 0x79
 8002396:	d117      	bne.n	80023c8 <judge_the_empty_and_order+0x114>
 8002398:	4b4d      	ldr	r3, [pc, #308]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 800239a:	789b      	ldrb	r3, [r3, #2]
 800239c:	2b62      	cmp	r3, #98	; 0x62
 800239e:	d113      	bne.n	80023c8 <judge_the_empty_and_order+0x114>
 80023a0:	4b4b      	ldr	r3, [pc, #300]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 80023a2:	78db      	ldrb	r3, [r3, #3]
 80023a4:	2b70      	cmp	r3, #112	; 0x70
 80023a6:	d10f      	bne.n	80023c8 <judge_the_empty_and_order+0x114>
			cake_order = 3;
 80023a8:	4b4d      	ldr	r3, [pc, #308]	; (80024e0 <judge_the_empty_and_order+0x22c>)
 80023aa:	2203      	movs	r2, #3
 80023ac:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80023ae:	4b4d      	ldr	r3, [pc, #308]	; (80024e4 <judge_the_empty_and_order+0x230>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 80023b4:	4b4b      	ldr	r3, [pc, #300]	; (80024e4 <judge_the_empty_and_order+0x230>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80023ba:	4b4a      	ldr	r3, [pc, #296]	; (80024e4 <judge_the_empty_and_order+0x230>)
 80023bc:	2201      	movs	r2, #1
 80023be:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80023c0:	4b48      	ldr	r3, [pc, #288]	; (80024e4 <judge_the_empty_and_order+0x230>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	811a      	strh	r2, [r3, #8]
 80023c6:	e28f      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
		else if (hole[1] == 'p' && hole[2] == 'b' && hole[3] == 'y') {
 80023c8:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 80023ca:	785b      	ldrb	r3, [r3, #1]
 80023cc:	2b70      	cmp	r3, #112	; 0x70
 80023ce:	d117      	bne.n	8002400 <judge_the_empty_and_order+0x14c>
 80023d0:	4b3f      	ldr	r3, [pc, #252]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 80023d2:	789b      	ldrb	r3, [r3, #2]
 80023d4:	2b62      	cmp	r3, #98	; 0x62
 80023d6:	d113      	bne.n	8002400 <judge_the_empty_and_order+0x14c>
 80023d8:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 80023da:	78db      	ldrb	r3, [r3, #3]
 80023dc:	2b79      	cmp	r3, #121	; 0x79
 80023de:	d10f      	bne.n	8002400 <judge_the_empty_and_order+0x14c>
			cake_order = 4;
 80023e0:	4b3f      	ldr	r3, [pc, #252]	; (80024e0 <judge_the_empty_and_order+0x22c>)
 80023e2:	2204      	movs	r2, #4
 80023e4:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80023e6:	4b3f      	ldr	r3, [pc, #252]	; (80024e4 <judge_the_empty_and_order+0x230>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80023ec:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <judge_the_empty_and_order+0x230>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80023f2:	4b3c      	ldr	r3, [pc, #240]	; (80024e4 <judge_the_empty_and_order+0x230>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 80023f8:	4b3a      	ldr	r3, [pc, #232]	; (80024e4 <judge_the_empty_and_order+0x230>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	811a      	strh	r2, [r3, #8]
 80023fe:	e273      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
		else if (hole[1] == 'b' && hole[2] == 'p' && hole[3] == 'y') {
 8002400:	4b33      	ldr	r3, [pc, #204]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 8002402:	785b      	ldrb	r3, [r3, #1]
 8002404:	2b62      	cmp	r3, #98	; 0x62
 8002406:	d117      	bne.n	8002438 <judge_the_empty_and_order+0x184>
 8002408:	4b31      	ldr	r3, [pc, #196]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 800240a:	789b      	ldrb	r3, [r3, #2]
 800240c:	2b70      	cmp	r3, #112	; 0x70
 800240e:	d113      	bne.n	8002438 <judge_the_empty_and_order+0x184>
 8002410:	4b2f      	ldr	r3, [pc, #188]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 8002412:	78db      	ldrb	r3, [r3, #3]
 8002414:	2b79      	cmp	r3, #121	; 0x79
 8002416:	d10f      	bne.n	8002438 <judge_the_empty_and_order+0x184>
			cake_order = 5;
 8002418:	4b31      	ldr	r3, [pc, #196]	; (80024e0 <judge_the_empty_and_order+0x22c>)
 800241a:	2205      	movs	r2, #5
 800241c:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800241e:	4b31      	ldr	r3, [pc, #196]	; (80024e4 <judge_the_empty_and_order+0x230>)
 8002420:	2201      	movs	r2, #1
 8002422:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8002424:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <judge_the_empty_and_order+0x230>)
 8002426:	2201      	movs	r2, #1
 8002428:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800242a:	4b2e      	ldr	r3, [pc, #184]	; (80024e4 <judge_the_empty_and_order+0x230>)
 800242c:	2201      	movs	r2, #1
 800242e:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 8002430:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <judge_the_empty_and_order+0x230>)
 8002432:	2200      	movs	r2, #0
 8002434:	811a      	strh	r2, [r3, #8]
 8002436:	e257      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
		else if (hole[1] == 'y' && hole[2] == 'p' && hole[3] == 'b') {
 8002438:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 800243a:	785b      	ldrb	r3, [r3, #1]
 800243c:	2b79      	cmp	r3, #121	; 0x79
 800243e:	f040 8253 	bne.w	80028e8 <judge_the_empty_and_order+0x634>
 8002442:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 8002444:	789b      	ldrb	r3, [r3, #2]
 8002446:	2b70      	cmp	r3, #112	; 0x70
 8002448:	f040 824e 	bne.w	80028e8 <judge_the_empty_and_order+0x634>
 800244c:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 800244e:	78db      	ldrb	r3, [r3, #3]
 8002450:	2b62      	cmp	r3, #98	; 0x62
 8002452:	f040 8249 	bne.w	80028e8 <judge_the_empty_and_order+0x634>
			cake_order = 6;
 8002456:	4b22      	ldr	r3, [pc, #136]	; (80024e0 <judge_the_empty_and_order+0x22c>)
 8002458:	2206      	movs	r2, #6
 800245a:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800245c:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <judge_the_empty_and_order+0x230>)
 800245e:	2201      	movs	r2, #1
 8002460:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 8002462:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <judge_the_empty_and_order+0x230>)
 8002464:	2200      	movs	r2, #0
 8002466:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8002468:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <judge_the_empty_and_order+0x230>)
 800246a:	2201      	movs	r2, #1
 800246c:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 800246e:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <judge_the_empty_and_order+0x230>)
 8002470:	2201      	movs	r2, #1
 8002472:	811a      	strh	r2, [r3, #8]
 8002474:	e238      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
	}
	else if (num == 2) {
 8002476:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <judge_the_empty_and_order+0x224>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b02      	cmp	r3, #2
 800247c:	f040 80c5 	bne.w	800260a <judge_the_empty_and_order+0x356>
		rotate = 2;
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <judge_the_empty_and_order+0x234>)
 8002482:	2202      	movs	r2, #2
 8002484:	601a      	str	r2, [r3, #0]
		rotate_the_ring(2);       //-180
 8002486:	2002      	movs	r0, #2
 8002488:	f7ff fd06 	bl	8001e98 <rotate_the_ring>
		rotate_offset = 2;
 800248c:	4b13      	ldr	r3, [pc, #76]	; (80024dc <judge_the_empty_and_order+0x228>)
 800248e:	2202      	movs	r2, #2
 8002490:	601a      	str	r2, [r3, #0]
		if (hole[2] == 'b' && hole[3] == 'y' && hole[0] == 'p') {
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 8002494:	789b      	ldrb	r3, [r3, #2]
 8002496:	2b62      	cmp	r3, #98	; 0x62
 8002498:	d128      	bne.n	80024ec <judge_the_empty_and_order+0x238>
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 800249c:	78db      	ldrb	r3, [r3, #3]
 800249e:	2b79      	cmp	r3, #121	; 0x79
 80024a0:	d124      	bne.n	80024ec <judge_the_empty_and_order+0x238>
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <judge_the_empty_and_order+0x21c>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b70      	cmp	r3, #112	; 0x70
 80024a8:	d120      	bne.n	80024ec <judge_the_empty_and_order+0x238>
			cake_order = 1;
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <judge_the_empty_and_order+0x22c>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <judge_the_empty_and_order+0x230>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <judge_the_empty_and_order+0x230>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <judge_the_empty_and_order+0x230>)
 80024be:	2201      	movs	r2, #1
 80024c0:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <judge_the_empty_and_order+0x230>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	811a      	strh	r2, [r3, #8]
 80024c8:	e20e      	b.n	80028e8 <judge_the_empty_and_order+0x634>
 80024ca:	bf00      	nop
 80024cc:	20000014 	.word	0x20000014
 80024d0:	200014e8 	.word	0x200014e8
 80024d4:	20000988 	.word	0x20000988
 80024d8:	200014f8 	.word	0x200014f8
 80024dc:	2000097c 	.word	0x2000097c
 80024e0:	20000010 	.word	0x20000010
 80024e4:	20001560 	.word	0x20001560
 80024e8:	20001574 	.word	0x20001574
		}
		else if (hole[2] == 'p' && hole[3] == 'y' && hole[0] == 'b') {
 80024ec:	4b84      	ldr	r3, [pc, #528]	; (8002700 <judge_the_empty_and_order+0x44c>)
 80024ee:	789b      	ldrb	r3, [r3, #2]
 80024f0:	2b70      	cmp	r3, #112	; 0x70
 80024f2:	d117      	bne.n	8002524 <judge_the_empty_and_order+0x270>
 80024f4:	4b82      	ldr	r3, [pc, #520]	; (8002700 <judge_the_empty_and_order+0x44c>)
 80024f6:	78db      	ldrb	r3, [r3, #3]
 80024f8:	2b79      	cmp	r3, #121	; 0x79
 80024fa:	d113      	bne.n	8002524 <judge_the_empty_and_order+0x270>
 80024fc:	4b80      	ldr	r3, [pc, #512]	; (8002700 <judge_the_empty_and_order+0x44c>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b62      	cmp	r3, #98	; 0x62
 8002502:	d10f      	bne.n	8002524 <judge_the_empty_and_order+0x270>
			cake_order = 2;
 8002504:	4b7f      	ldr	r3, [pc, #508]	; (8002704 <judge_the_empty_and_order+0x450>)
 8002506:	2202      	movs	r2, #2
 8002508:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800250a:	4b7f      	ldr	r3, [pc, #508]	; (8002708 <judge_the_empty_and_order+0x454>)
 800250c:	2201      	movs	r2, #1
 800250e:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8002510:	4b7d      	ldr	r3, [pc, #500]	; (8002708 <judge_the_empty_and_order+0x454>)
 8002512:	2201      	movs	r2, #1
 8002514:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 8002516:	4b7c      	ldr	r3, [pc, #496]	; (8002708 <judge_the_empty_and_order+0x454>)
 8002518:	2200      	movs	r2, #0
 800251a:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 800251c:	4b7a      	ldr	r3, [pc, #488]	; (8002708 <judge_the_empty_and_order+0x454>)
 800251e:	2201      	movs	r2, #1
 8002520:	811a      	strh	r2, [r3, #8]
 8002522:	e1e1      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
		else if (hole[2] == 'y' && hole[3] == 'b' && hole[0] == 'p') {
 8002524:	4b76      	ldr	r3, [pc, #472]	; (8002700 <judge_the_empty_and_order+0x44c>)
 8002526:	789b      	ldrb	r3, [r3, #2]
 8002528:	2b79      	cmp	r3, #121	; 0x79
 800252a:	d117      	bne.n	800255c <judge_the_empty_and_order+0x2a8>
 800252c:	4b74      	ldr	r3, [pc, #464]	; (8002700 <judge_the_empty_and_order+0x44c>)
 800252e:	78db      	ldrb	r3, [r3, #3]
 8002530:	2b62      	cmp	r3, #98	; 0x62
 8002532:	d113      	bne.n	800255c <judge_the_empty_and_order+0x2a8>
 8002534:	4b72      	ldr	r3, [pc, #456]	; (8002700 <judge_the_empty_and_order+0x44c>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b70      	cmp	r3, #112	; 0x70
 800253a:	d10f      	bne.n	800255c <judge_the_empty_and_order+0x2a8>
			cake_order = 3;
 800253c:	4b71      	ldr	r3, [pc, #452]	; (8002704 <judge_the_empty_and_order+0x450>)
 800253e:	2203      	movs	r2, #3
 8002540:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8002542:	4b71      	ldr	r3, [pc, #452]	; (8002708 <judge_the_empty_and_order+0x454>)
 8002544:	2201      	movs	r2, #1
 8002546:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8002548:	4b6f      	ldr	r3, [pc, #444]	; (8002708 <judge_the_empty_and_order+0x454>)
 800254a:	2201      	movs	r2, #1
 800254c:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 800254e:	4b6e      	ldr	r3, [pc, #440]	; (8002708 <judge_the_empty_and_order+0x454>)
 8002550:	2200      	movs	r2, #0
 8002552:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8002554:	4b6c      	ldr	r3, [pc, #432]	; (8002708 <judge_the_empty_and_order+0x454>)
 8002556:	2201      	movs	r2, #1
 8002558:	811a      	strh	r2, [r3, #8]
 800255a:	e1c5      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
		else if (hole[2] == 'p' && hole[3] == 'b' && hole[0] == 'y') {
 800255c:	4b68      	ldr	r3, [pc, #416]	; (8002700 <judge_the_empty_and_order+0x44c>)
 800255e:	789b      	ldrb	r3, [r3, #2]
 8002560:	2b70      	cmp	r3, #112	; 0x70
 8002562:	d117      	bne.n	8002594 <judge_the_empty_and_order+0x2e0>
 8002564:	4b66      	ldr	r3, [pc, #408]	; (8002700 <judge_the_empty_and_order+0x44c>)
 8002566:	78db      	ldrb	r3, [r3, #3]
 8002568:	2b62      	cmp	r3, #98	; 0x62
 800256a:	d113      	bne.n	8002594 <judge_the_empty_and_order+0x2e0>
 800256c:	4b64      	ldr	r3, [pc, #400]	; (8002700 <judge_the_empty_and_order+0x44c>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b79      	cmp	r3, #121	; 0x79
 8002572:	d10f      	bne.n	8002594 <judge_the_empty_and_order+0x2e0>
			cake_order = 4;
 8002574:	4b63      	ldr	r3, [pc, #396]	; (8002704 <judge_the_empty_and_order+0x450>)
 8002576:	2204      	movs	r2, #4
 8002578:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 800257a:	4b63      	ldr	r3, [pc, #396]	; (8002708 <judge_the_empty_and_order+0x454>)
 800257c:	2200      	movs	r2, #0
 800257e:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8002580:	4b61      	ldr	r3, [pc, #388]	; (8002708 <judge_the_empty_and_order+0x454>)
 8002582:	2201      	movs	r2, #1
 8002584:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8002586:	4b60      	ldr	r3, [pc, #384]	; (8002708 <judge_the_empty_and_order+0x454>)
 8002588:	2201      	movs	r2, #1
 800258a:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 800258c:	4b5e      	ldr	r3, [pc, #376]	; (8002708 <judge_the_empty_and_order+0x454>)
 800258e:	2201      	movs	r2, #1
 8002590:	811a      	strh	r2, [r3, #8]
 8002592:	e1a9      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
		else if (hole[2] == 'b' && hole[3] == 'p' && hole[0] == 'y') {
 8002594:	4b5a      	ldr	r3, [pc, #360]	; (8002700 <judge_the_empty_and_order+0x44c>)
 8002596:	789b      	ldrb	r3, [r3, #2]
 8002598:	2b62      	cmp	r3, #98	; 0x62
 800259a:	d117      	bne.n	80025cc <judge_the_empty_and_order+0x318>
 800259c:	4b58      	ldr	r3, [pc, #352]	; (8002700 <judge_the_empty_and_order+0x44c>)
 800259e:	78db      	ldrb	r3, [r3, #3]
 80025a0:	2b70      	cmp	r3, #112	; 0x70
 80025a2:	d113      	bne.n	80025cc <judge_the_empty_and_order+0x318>
 80025a4:	4b56      	ldr	r3, [pc, #344]	; (8002700 <judge_the_empty_and_order+0x44c>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b79      	cmp	r3, #121	; 0x79
 80025aa:	d10f      	bne.n	80025cc <judge_the_empty_and_order+0x318>
			cake_order = 5;
 80025ac:	4b55      	ldr	r3, [pc, #340]	; (8002704 <judge_the_empty_and_order+0x450>)
 80025ae:	2205      	movs	r2, #5
 80025b0:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 80025b2:	4b55      	ldr	r3, [pc, #340]	; (8002708 <judge_the_empty_and_order+0x454>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80025b8:	4b53      	ldr	r3, [pc, #332]	; (8002708 <judge_the_empty_and_order+0x454>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80025be:	4b52      	ldr	r3, [pc, #328]	; (8002708 <judge_the_empty_and_order+0x454>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <judge_the_empty_and_order+0x454>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	811a      	strh	r2, [r3, #8]
 80025ca:	e18d      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
		else if (hole[2] == 'y' && hole[3] == 'p' && hole[0] == 'b') {
 80025cc:	4b4c      	ldr	r3, [pc, #304]	; (8002700 <judge_the_empty_and_order+0x44c>)
 80025ce:	789b      	ldrb	r3, [r3, #2]
 80025d0:	2b79      	cmp	r3, #121	; 0x79
 80025d2:	f040 8189 	bne.w	80028e8 <judge_the_empty_and_order+0x634>
 80025d6:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <judge_the_empty_and_order+0x44c>)
 80025d8:	78db      	ldrb	r3, [r3, #3]
 80025da:	2b70      	cmp	r3, #112	; 0x70
 80025dc:	f040 8184 	bne.w	80028e8 <judge_the_empty_and_order+0x634>
 80025e0:	4b47      	ldr	r3, [pc, #284]	; (8002700 <judge_the_empty_and_order+0x44c>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b62      	cmp	r3, #98	; 0x62
 80025e6:	f040 817f 	bne.w	80028e8 <judge_the_empty_and_order+0x634>
			cake_order = 6;
 80025ea:	4b46      	ldr	r3, [pc, #280]	; (8002704 <judge_the_empty_and_order+0x450>)
 80025ec:	2206      	movs	r2, #6
 80025ee:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80025f0:	4b45      	ldr	r3, [pc, #276]	; (8002708 <judge_the_empty_and_order+0x454>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80025f6:	4b44      	ldr	r3, [pc, #272]	; (8002708 <judge_the_empty_and_order+0x454>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 80025fc:	4b42      	ldr	r3, [pc, #264]	; (8002708 <judge_the_empty_and_order+0x454>)
 80025fe:	2200      	movs	r2, #0
 8002600:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8002602:	4b41      	ldr	r3, [pc, #260]	; (8002708 <judge_the_empty_and_order+0x454>)
 8002604:	2201      	movs	r2, #1
 8002606:	811a      	strh	r2, [r3, #8]
 8002608:	e16e      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
	}
	else if (num == 3) {
 800260a:	4b40      	ldr	r3, [pc, #256]	; (800270c <judge_the_empty_and_order+0x458>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b03      	cmp	r3, #3
 8002610:	f040 80bb 	bne.w	800278a <judge_the_empty_and_order+0x4d6>
		rotate_the_ring(3);
 8002614:	2003      	movs	r0, #3
 8002616:	f7ff fc3f 	bl	8001e98 <rotate_the_ring>
		rotate_offset = 3;
 800261a:	4b3d      	ldr	r3, [pc, #244]	; (8002710 <judge_the_empty_and_order+0x45c>)
 800261c:	2203      	movs	r2, #3
 800261e:	601a      	str	r2, [r3, #0]

		if (hole[3] == 'b' && hole[0] == 'y' && hole[1] == 'p') {
 8002620:	4b37      	ldr	r3, [pc, #220]	; (8002700 <judge_the_empty_and_order+0x44c>)
 8002622:	78db      	ldrb	r3, [r3, #3]
 8002624:	2b62      	cmp	r3, #98	; 0x62
 8002626:	d117      	bne.n	8002658 <judge_the_empty_and_order+0x3a4>
 8002628:	4b35      	ldr	r3, [pc, #212]	; (8002700 <judge_the_empty_and_order+0x44c>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b79      	cmp	r3, #121	; 0x79
 800262e:	d113      	bne.n	8002658 <judge_the_empty_and_order+0x3a4>
 8002630:	4b33      	ldr	r3, [pc, #204]	; (8002700 <judge_the_empty_and_order+0x44c>)
 8002632:	785b      	ldrb	r3, [r3, #1]
 8002634:	2b70      	cmp	r3, #112	; 0x70
 8002636:	d10f      	bne.n	8002658 <judge_the_empty_and_order+0x3a4>
			cake_order = 1;
 8002638:	4b32      	ldr	r3, [pc, #200]	; (8002704 <judge_the_empty_and_order+0x450>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800263e:	4b32      	ldr	r3, [pc, #200]	; (8002708 <judge_the_empty_and_order+0x454>)
 8002640:	2201      	movs	r2, #1
 8002642:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 8002644:	4b30      	ldr	r3, [pc, #192]	; (8002708 <judge_the_empty_and_order+0x454>)
 8002646:	2200      	movs	r2, #0
 8002648:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800264a:	4b2f      	ldr	r3, [pc, #188]	; (8002708 <judge_the_empty_and_order+0x454>)
 800264c:	2201      	movs	r2, #1
 800264e:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8002650:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <judge_the_empty_and_order+0x454>)
 8002652:	2201      	movs	r2, #1
 8002654:	811a      	strh	r2, [r3, #8]
 8002656:	e147      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
		else if (hole[3] == 'p' && hole[0] == 'y' && hole[1] == 'b') {
 8002658:	4b29      	ldr	r3, [pc, #164]	; (8002700 <judge_the_empty_and_order+0x44c>)
 800265a:	78db      	ldrb	r3, [r3, #3]
 800265c:	2b70      	cmp	r3, #112	; 0x70
 800265e:	d117      	bne.n	8002690 <judge_the_empty_and_order+0x3dc>
 8002660:	4b27      	ldr	r3, [pc, #156]	; (8002700 <judge_the_empty_and_order+0x44c>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b79      	cmp	r3, #121	; 0x79
 8002666:	d113      	bne.n	8002690 <judge_the_empty_and_order+0x3dc>
 8002668:	4b25      	ldr	r3, [pc, #148]	; (8002700 <judge_the_empty_and_order+0x44c>)
 800266a:	785b      	ldrb	r3, [r3, #1]
 800266c:	2b62      	cmp	r3, #98	; 0x62
 800266e:	d10f      	bne.n	8002690 <judge_the_empty_and_order+0x3dc>
			cake_order = 2;
 8002670:	4b24      	ldr	r3, [pc, #144]	; (8002704 <judge_the_empty_and_order+0x450>)
 8002672:	2202      	movs	r2, #2
 8002674:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8002676:	4b24      	ldr	r3, [pc, #144]	; (8002708 <judge_the_empty_and_order+0x454>)
 8002678:	2201      	movs	r2, #1
 800267a:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 800267c:	4b22      	ldr	r3, [pc, #136]	; (8002708 <judge_the_empty_and_order+0x454>)
 800267e:	2201      	movs	r2, #1
 8002680:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8002682:	4b21      	ldr	r3, [pc, #132]	; (8002708 <judge_the_empty_and_order+0x454>)
 8002684:	2201      	movs	r2, #1
 8002686:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 8002688:	4b1f      	ldr	r3, [pc, #124]	; (8002708 <judge_the_empty_and_order+0x454>)
 800268a:	2200      	movs	r2, #0
 800268c:	811a      	strh	r2, [r3, #8]
 800268e:	e12b      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
		else if (hole[3] == 'y' && hole[0] == 'b' && hole[1] == 'p') {
 8002690:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <judge_the_empty_and_order+0x44c>)
 8002692:	78db      	ldrb	r3, [r3, #3]
 8002694:	2b79      	cmp	r3, #121	; 0x79
 8002696:	d117      	bne.n	80026c8 <judge_the_empty_and_order+0x414>
 8002698:	4b19      	ldr	r3, [pc, #100]	; (8002700 <judge_the_empty_and_order+0x44c>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b62      	cmp	r3, #98	; 0x62
 800269e:	d113      	bne.n	80026c8 <judge_the_empty_and_order+0x414>
 80026a0:	4b17      	ldr	r3, [pc, #92]	; (8002700 <judge_the_empty_and_order+0x44c>)
 80026a2:	785b      	ldrb	r3, [r3, #1]
 80026a4:	2b70      	cmp	r3, #112	; 0x70
 80026a6:	d10f      	bne.n	80026c8 <judge_the_empty_and_order+0x414>
			cake_order = 3;
 80026a8:	4b16      	ldr	r3, [pc, #88]	; (8002704 <judge_the_empty_and_order+0x450>)
 80026aa:	2203      	movs	r2, #3
 80026ac:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80026ae:	4b16      	ldr	r3, [pc, #88]	; (8002708 <judge_the_empty_and_order+0x454>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <judge_the_empty_and_order+0x454>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80026ba:	4b13      	ldr	r3, [pc, #76]	; (8002708 <judge_the_empty_and_order+0x454>)
 80026bc:	2201      	movs	r2, #1
 80026be:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <judge_the_empty_and_order+0x454>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	811a      	strh	r2, [r3, #8]
 80026c6:	e10f      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
		else if (hole[3] == 'p' && hole[0] == 'b' && hole[1] == 'y') {
 80026c8:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <judge_the_empty_and_order+0x44c>)
 80026ca:	78db      	ldrb	r3, [r3, #3]
 80026cc:	2b70      	cmp	r3, #112	; 0x70
 80026ce:	d121      	bne.n	8002714 <judge_the_empty_and_order+0x460>
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <judge_the_empty_and_order+0x44c>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b62      	cmp	r3, #98	; 0x62
 80026d6:	d11d      	bne.n	8002714 <judge_the_empty_and_order+0x460>
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <judge_the_empty_and_order+0x44c>)
 80026da:	785b      	ldrb	r3, [r3, #1]
 80026dc:	2b79      	cmp	r3, #121	; 0x79
 80026de:	d119      	bne.n	8002714 <judge_the_empty_and_order+0x460>
			cake_order = 4;
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <judge_the_empty_and_order+0x450>)
 80026e2:	2204      	movs	r2, #4
 80026e4:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <judge_the_empty_and_order+0x454>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <judge_the_empty_and_order+0x454>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <judge_the_empty_and_order+0x454>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <judge_the_empty_and_order+0x454>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	811a      	strh	r2, [r3, #8]
 80026fe:	e0f3      	b.n	80028e8 <judge_the_empty_and_order+0x634>
 8002700:	200014e8 	.word	0x200014e8
 8002704:	20000010 	.word	0x20000010
 8002708:	20001560 	.word	0x20001560
 800270c:	200014f8 	.word	0x200014f8
 8002710:	2000097c 	.word	0x2000097c
		}
		else if (hole[3] == 'b' && hole[0] == 'p' && hole[1] == 'y') {
 8002714:	4b7a      	ldr	r3, [pc, #488]	; (8002900 <judge_the_empty_and_order+0x64c>)
 8002716:	78db      	ldrb	r3, [r3, #3]
 8002718:	2b62      	cmp	r3, #98	; 0x62
 800271a:	d117      	bne.n	800274c <judge_the_empty_and_order+0x498>
 800271c:	4b78      	ldr	r3, [pc, #480]	; (8002900 <judge_the_empty_and_order+0x64c>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b70      	cmp	r3, #112	; 0x70
 8002722:	d113      	bne.n	800274c <judge_the_empty_and_order+0x498>
 8002724:	4b76      	ldr	r3, [pc, #472]	; (8002900 <judge_the_empty_and_order+0x64c>)
 8002726:	785b      	ldrb	r3, [r3, #1]
 8002728:	2b79      	cmp	r3, #121	; 0x79
 800272a:	d10f      	bne.n	800274c <judge_the_empty_and_order+0x498>
			cake_order = 5;
 800272c:	4b75      	ldr	r3, [pc, #468]	; (8002904 <judge_the_empty_and_order+0x650>)
 800272e:	2205      	movs	r2, #5
 8002730:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8002732:	4b75      	ldr	r3, [pc, #468]	; (8002908 <judge_the_empty_and_order+0x654>)
 8002734:	2201      	movs	r2, #1
 8002736:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 8002738:	4b73      	ldr	r3, [pc, #460]	; (8002908 <judge_the_empty_and_order+0x654>)
 800273a:	2200      	movs	r2, #0
 800273c:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800273e:	4b72      	ldr	r3, [pc, #456]	; (8002908 <judge_the_empty_and_order+0x654>)
 8002740:	2201      	movs	r2, #1
 8002742:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8002744:	4b70      	ldr	r3, [pc, #448]	; (8002908 <judge_the_empty_and_order+0x654>)
 8002746:	2201      	movs	r2, #1
 8002748:	811a      	strh	r2, [r3, #8]
 800274a:	e0cd      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
		else if (hole[3] == 'y' && hole[0] == 'p' && hole[1] == 'b') {
 800274c:	4b6c      	ldr	r3, [pc, #432]	; (8002900 <judge_the_empty_and_order+0x64c>)
 800274e:	78db      	ldrb	r3, [r3, #3]
 8002750:	2b79      	cmp	r3, #121	; 0x79
 8002752:	f040 80c9 	bne.w	80028e8 <judge_the_empty_and_order+0x634>
 8002756:	4b6a      	ldr	r3, [pc, #424]	; (8002900 <judge_the_empty_and_order+0x64c>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b70      	cmp	r3, #112	; 0x70
 800275c:	f040 80c4 	bne.w	80028e8 <judge_the_empty_and_order+0x634>
 8002760:	4b67      	ldr	r3, [pc, #412]	; (8002900 <judge_the_empty_and_order+0x64c>)
 8002762:	785b      	ldrb	r3, [r3, #1]
 8002764:	2b62      	cmp	r3, #98	; 0x62
 8002766:	f040 80bf 	bne.w	80028e8 <judge_the_empty_and_order+0x634>
			cake_order = 6;
 800276a:	4b66      	ldr	r3, [pc, #408]	; (8002904 <judge_the_empty_and_order+0x650>)
 800276c:	2206      	movs	r2, #6
 800276e:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8002770:	4b65      	ldr	r3, [pc, #404]	; (8002908 <judge_the_empty_and_order+0x654>)
 8002772:	2201      	movs	r2, #1
 8002774:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8002776:	4b64      	ldr	r3, [pc, #400]	; (8002908 <judge_the_empty_and_order+0x654>)
 8002778:	2201      	movs	r2, #1
 800277a:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800277c:	4b62      	ldr	r3, [pc, #392]	; (8002908 <judge_the_empty_and_order+0x654>)
 800277e:	2201      	movs	r2, #1
 8002780:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 8002782:	4b61      	ldr	r3, [pc, #388]	; (8002908 <judge_the_empty_and_order+0x654>)
 8002784:	2200      	movs	r2, #0
 8002786:	811a      	strh	r2, [r3, #8]
 8002788:	e0ae      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
	}
	else if (num == 4) {
 800278a:	4b60      	ldr	r3, [pc, #384]	; (800290c <judge_the_empty_and_order+0x658>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b04      	cmp	r3, #4
 8002790:	f040 80aa 	bne.w	80028e8 <judge_the_empty_and_order+0x634>
		rotate_offset = 0;
 8002794:	4b5e      	ldr	r3, [pc, #376]	; (8002910 <judge_the_empty_and_order+0x65c>)
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
		if (hole[0] == 'b' && hole[1] == 'y' && hole[2] == 'p') {
 800279a:	4b59      	ldr	r3, [pc, #356]	; (8002900 <judge_the_empty_and_order+0x64c>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b62      	cmp	r3, #98	; 0x62
 80027a0:	d117      	bne.n	80027d2 <judge_the_empty_and_order+0x51e>
 80027a2:	4b57      	ldr	r3, [pc, #348]	; (8002900 <judge_the_empty_and_order+0x64c>)
 80027a4:	785b      	ldrb	r3, [r3, #1]
 80027a6:	2b79      	cmp	r3, #121	; 0x79
 80027a8:	d113      	bne.n	80027d2 <judge_the_empty_and_order+0x51e>
 80027aa:	4b55      	ldr	r3, [pc, #340]	; (8002900 <judge_the_empty_and_order+0x64c>)
 80027ac:	789b      	ldrb	r3, [r3, #2]
 80027ae:	2b70      	cmp	r3, #112	; 0x70
 80027b0:	d10f      	bne.n	80027d2 <judge_the_empty_and_order+0x51e>
			cake_order = 1;
 80027b2:	4b54      	ldr	r3, [pc, #336]	; (8002904 <judge_the_empty_and_order+0x650>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80027b8:	4b53      	ldr	r3, [pc, #332]	; (8002908 <judge_the_empty_and_order+0x654>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80027be:	4b52      	ldr	r3, [pc, #328]	; (8002908 <judge_the_empty_and_order+0x654>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 80027c4:	4b50      	ldr	r3, [pc, #320]	; (8002908 <judge_the_empty_and_order+0x654>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80027ca:	4b4f      	ldr	r3, [pc, #316]	; (8002908 <judge_the_empty_and_order+0x654>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	811a      	strh	r2, [r3, #8]
 80027d0:	e08a      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
		else if (hole[0] == 'p' && hole[1] == 'y' && hole[2] == 'b') {
 80027d2:	4b4b      	ldr	r3, [pc, #300]	; (8002900 <judge_the_empty_and_order+0x64c>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b70      	cmp	r3, #112	; 0x70
 80027d8:	d117      	bne.n	800280a <judge_the_empty_and_order+0x556>
 80027da:	4b49      	ldr	r3, [pc, #292]	; (8002900 <judge_the_empty_and_order+0x64c>)
 80027dc:	785b      	ldrb	r3, [r3, #1]
 80027de:	2b79      	cmp	r3, #121	; 0x79
 80027e0:	d113      	bne.n	800280a <judge_the_empty_and_order+0x556>
 80027e2:	4b47      	ldr	r3, [pc, #284]	; (8002900 <judge_the_empty_and_order+0x64c>)
 80027e4:	789b      	ldrb	r3, [r3, #2]
 80027e6:	2b62      	cmp	r3, #98	; 0x62
 80027e8:	d10f      	bne.n	800280a <judge_the_empty_and_order+0x556>
			cake_order = 2;
 80027ea:	4b46      	ldr	r3, [pc, #280]	; (8002904 <judge_the_empty_and_order+0x650>)
 80027ec:	2202      	movs	r2, #2
 80027ee:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 80027f0:	4b45      	ldr	r3, [pc, #276]	; (8002908 <judge_the_empty_and_order+0x654>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80027f6:	4b44      	ldr	r3, [pc, #272]	; (8002908 <judge_the_empty_and_order+0x654>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80027fc:	4b42      	ldr	r3, [pc, #264]	; (8002908 <judge_the_empty_and_order+0x654>)
 80027fe:	2201      	movs	r2, #1
 8002800:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8002802:	4b41      	ldr	r3, [pc, #260]	; (8002908 <judge_the_empty_and_order+0x654>)
 8002804:	2201      	movs	r2, #1
 8002806:	811a      	strh	r2, [r3, #8]
 8002808:	e06e      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
		else if (hole[0] == 'y' && hole[1] == 'b' && hole[2] == 'p') {
 800280a:	4b3d      	ldr	r3, [pc, #244]	; (8002900 <judge_the_empty_and_order+0x64c>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b79      	cmp	r3, #121	; 0x79
 8002810:	d117      	bne.n	8002842 <judge_the_empty_and_order+0x58e>
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <judge_the_empty_and_order+0x64c>)
 8002814:	785b      	ldrb	r3, [r3, #1]
 8002816:	2b62      	cmp	r3, #98	; 0x62
 8002818:	d113      	bne.n	8002842 <judge_the_empty_and_order+0x58e>
 800281a:	4b39      	ldr	r3, [pc, #228]	; (8002900 <judge_the_empty_and_order+0x64c>)
 800281c:	789b      	ldrb	r3, [r3, #2]
 800281e:	2b70      	cmp	r3, #112	; 0x70
 8002820:	d10f      	bne.n	8002842 <judge_the_empty_and_order+0x58e>
			cake_order = 3;
 8002822:	4b38      	ldr	r3, [pc, #224]	; (8002904 <judge_the_empty_and_order+0x650>)
 8002824:	2203      	movs	r2, #3
 8002826:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 8002828:	4b37      	ldr	r3, [pc, #220]	; (8002908 <judge_the_empty_and_order+0x654>)
 800282a:	2200      	movs	r2, #0
 800282c:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 800282e:	4b36      	ldr	r3, [pc, #216]	; (8002908 <judge_the_empty_and_order+0x654>)
 8002830:	2201      	movs	r2, #1
 8002832:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8002834:	4b34      	ldr	r3, [pc, #208]	; (8002908 <judge_the_empty_and_order+0x654>)
 8002836:	2201      	movs	r2, #1
 8002838:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 800283a:	4b33      	ldr	r3, [pc, #204]	; (8002908 <judge_the_empty_and_order+0x654>)
 800283c:	2201      	movs	r2, #1
 800283e:	811a      	strh	r2, [r3, #8]
 8002840:	e052      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
		else if (hole[0] == 'p' && hole[1] == 'b' && hole[2] == 'y') {
 8002842:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <judge_the_empty_and_order+0x64c>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b70      	cmp	r3, #112	; 0x70
 8002848:	d117      	bne.n	800287a <judge_the_empty_and_order+0x5c6>
 800284a:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <judge_the_empty_and_order+0x64c>)
 800284c:	785b      	ldrb	r3, [r3, #1]
 800284e:	2b62      	cmp	r3, #98	; 0x62
 8002850:	d113      	bne.n	800287a <judge_the_empty_and_order+0x5c6>
 8002852:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <judge_the_empty_and_order+0x64c>)
 8002854:	789b      	ldrb	r3, [r3, #2]
 8002856:	2b79      	cmp	r3, #121	; 0x79
 8002858:	d10f      	bne.n	800287a <judge_the_empty_and_order+0x5c6>
			cake_order = 4;
 800285a:	4b2a      	ldr	r3, [pc, #168]	; (8002904 <judge_the_empty_and_order+0x650>)
 800285c:	2204      	movs	r2, #4
 800285e:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8002860:	4b29      	ldr	r3, [pc, #164]	; (8002908 <judge_the_empty_and_order+0x654>)
 8002862:	2201      	movs	r2, #1
 8002864:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8002866:	4b28      	ldr	r3, [pc, #160]	; (8002908 <judge_the_empty_and_order+0x654>)
 8002868:	2201      	movs	r2, #1
 800286a:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 800286c:	4b26      	ldr	r3, [pc, #152]	; (8002908 <judge_the_empty_and_order+0x654>)
 800286e:	2200      	movs	r2, #0
 8002870:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8002872:	4b25      	ldr	r3, [pc, #148]	; (8002908 <judge_the_empty_and_order+0x654>)
 8002874:	2201      	movs	r2, #1
 8002876:	811a      	strh	r2, [r3, #8]
 8002878:	e036      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
		else if (hole[0] == 'b' && hole[1] == 'p' && hole[2] == 'y') {
 800287a:	4b21      	ldr	r3, [pc, #132]	; (8002900 <judge_the_empty_and_order+0x64c>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b62      	cmp	r3, #98	; 0x62
 8002880:	d117      	bne.n	80028b2 <judge_the_empty_and_order+0x5fe>
 8002882:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <judge_the_empty_and_order+0x64c>)
 8002884:	785b      	ldrb	r3, [r3, #1]
 8002886:	2b70      	cmp	r3, #112	; 0x70
 8002888:	d113      	bne.n	80028b2 <judge_the_empty_and_order+0x5fe>
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <judge_the_empty_and_order+0x64c>)
 800288c:	789b      	ldrb	r3, [r3, #2]
 800288e:	2b79      	cmp	r3, #121	; 0x79
 8002890:	d10f      	bne.n	80028b2 <judge_the_empty_and_order+0x5fe>
			cake_order = 5;
 8002892:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <judge_the_empty_and_order+0x650>)
 8002894:	2205      	movs	r2, #5
 8002896:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <judge_the_empty_and_order+0x654>)
 800289a:	2201      	movs	r2, #1
 800289c:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <judge_the_empty_and_order+0x654>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80028a4:	4b18      	ldr	r3, [pc, #96]	; (8002908 <judge_the_empty_and_order+0x654>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <judge_the_empty_and_order+0x654>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	811a      	strh	r2, [r3, #8]
 80028b0:	e01a      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		}
		else if (hole[0] == 'y' && hole[1] == 'p' && hole[2] == 'b') {
 80028b2:	4b13      	ldr	r3, [pc, #76]	; (8002900 <judge_the_empty_and_order+0x64c>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b79      	cmp	r3, #121	; 0x79
 80028b8:	d116      	bne.n	80028e8 <judge_the_empty_and_order+0x634>
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <judge_the_empty_and_order+0x64c>)
 80028bc:	785b      	ldrb	r3, [r3, #1]
 80028be:	2b70      	cmp	r3, #112	; 0x70
 80028c0:	d112      	bne.n	80028e8 <judge_the_empty_and_order+0x634>
 80028c2:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <judge_the_empty_and_order+0x64c>)
 80028c4:	789b      	ldrb	r3, [r3, #2]
 80028c6:	2b62      	cmp	r3, #98	; 0x62
 80028c8:	d10e      	bne.n	80028e8 <judge_the_empty_and_order+0x634>
			cake_order = 6;
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <judge_the_empty_and_order+0x650>)
 80028cc:	2206      	movs	r2, #6
 80028ce:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 80028d0:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <judge_the_empty_and_order+0x654>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <judge_the_empty_and_order+0x654>)
 80028d8:	2201      	movs	r2, #1
 80028da:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <judge_the_empty_and_order+0x654>)
 80028de:	2201      	movs	r2, #1
 80028e0:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <judge_the_empty_and_order+0x654>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	811a      	strh	r2, [r3, #8]
		}
	}
	while (1) {
		if (step == 0)
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <judge_the_empty_and_order+0x660>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <judge_the_empty_and_order+0x642>
 80028f0:	e7fa      	b.n	80028e8 <judge_the_empty_and_order+0x634>
		return;
 80028f2:	bf00      	nop
 80028f4:	e000      	b.n	80028f8 <judge_the_empty_and_order+0x644>
			break;
 80028f6:	bf00      	nop
	}
}
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	200014e8 	.word	0x200014e8
 8002904:	20000010 	.word	0x20000010
 8002908:	20001560 	.word	0x20001560
 800290c:	200014f8 	.word	0x200014f8
 8002910:	2000097c 	.word	0x2000097c
 8002914:	200014e4 	.word	0x200014e4

08002918 <pauseHanoiing>:

void pauseHanoiing() {
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
	if (finish == 1)
 800291e:	4b53      	ldr	r3, [pc, #332]	; (8002a6c <pauseHanoiing+0x154>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b01      	cmp	r3, #1
 8002924:	f000 809d 	beq.w	8002a62 <pauseHanoiing+0x14a>
		return;

	int paused = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	607b      	str	r3, [r7, #4]
	if (pauseHanoi == 1) {
 800292c:	4b50      	ldr	r3, [pc, #320]	; (8002a70 <pauseHanoiing+0x158>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d137      	bne.n	80029a4 <pauseHanoiing+0x8c>
		mission_array[0] = 1;
 8002934:	4b4f      	ldr	r3, [pc, #316]	; (8002a74 <pauseHanoiing+0x15c>)
 8002936:	2201      	movs	r2, #1
 8002938:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 800293a:	4b4f      	ldr	r3, [pc, #316]	; (8002a78 <pauseHanoiing+0x160>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
		paused = 1;
 8002940:	2301      	movs	r3, #1
 8002942:	607b      	str	r3, [r7, #4]
		unsuck_the_cake(7, 1);
 8002944:	2101      	movs	r1, #1
 8002946:	2007      	movs	r0, #7
 8002948:	f7ff f9a8 	bl	8001c9c <unsuck_the_cake>
		unsuck_the_cake(4, 1);
 800294c:	2101      	movs	r1, #1
 800294e:	2004      	movs	r0, #4
 8002950:	f7ff f9a4 	bl	8001c9c <unsuck_the_cake>
		unsuck_the_cake(3, 1);
 8002954:	2101      	movs	r1, #1
 8002956:	2003      	movs	r0, #3
 8002958:	f7ff f9a0 	bl	8001c9c <unsuck_the_cake>
		cake_check(0, cake_layer[0]);
 800295c:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <pauseHanoiing+0x164>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4619      	mov	r1, r3
 8002962:	2000      	movs	r0, #0
 8002964:	f7ff f8f0 	bl	8001b48 <cake_check>
		cake_check(1, cake_layer[1]);
 8002968:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <pauseHanoiing+0x164>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4619      	mov	r1, r3
 800296e:	2001      	movs	r0, #1
 8002970:	f7ff f8ea 	bl	8001b48 <cake_check>
		cake_check(2, cake_layer[2]);
 8002974:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <pauseHanoiing+0x164>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	4619      	mov	r1, r3
 800297a:	2002      	movs	r0, #2
 800297c:	f7ff f8e4 	bl	8001b48 <cake_check>
		cake_check(3, cake_layer[3]);
 8002980:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <pauseHanoiing+0x164>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4619      	mov	r1, r3
 8002986:	2003      	movs	r0, #3
 8002988:	f7ff f8de 	bl	8001b48 <cake_check>
	}

	while (pauseHanoi != 0) {
 800298c:	e00a      	b.n	80029a4 <pauseHanoiing+0x8c>
		if (finish == 1) {
 800298e:	4b37      	ldr	r3, [pc, #220]	; (8002a6c <pauseHanoiing+0x154>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d106      	bne.n	80029a4 <pauseHanoiing+0x8c>
			finish_all_motion();
 8002996:	f000 fccf 	bl	8003338 <finish_all_motion>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20000 * 255);
 800299a:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <pauseHanoiing+0x168>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a39      	ldr	r2, [pc, #228]	; (8002a84 <pauseHanoiing+0x16c>)
 80029a0:	641a      	str	r2, [r3, #64]	; 0x40
			return;
 80029a2:	e05f      	b.n	8002a64 <pauseHanoiing+0x14c>
	while (pauseHanoi != 0) {
 80029a4:	4b32      	ldr	r3, [pc, #200]	; (8002a70 <pauseHanoiing+0x158>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f0      	bne.n	800298e <pauseHanoiing+0x76>
			break;
		}
	}

	if (paused == 1) {
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d158      	bne.n	8002a64 <pauseHanoiing+0x14c>
		mission_array[0] = 0;
 80029b2:	4b30      	ldr	r3, [pc, #192]	; (8002a74 <pauseHanoiing+0x15c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	801a      	strh	r2, [r3, #0]
		if (dont_go_down[0] == 0) {
 80029b8:	4b33      	ldr	r3, [pc, #204]	; (8002a88 <pauseHanoiing+0x170>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d111      	bne.n	80029e4 <pauseHanoiing+0xcc>
			suck_the_cake(7, (4 - cake_layer[(0 + rotate_offset) % 4]));
 80029c0:	4b32      	ldr	r3, [pc, #200]	; (8002a8c <pauseHanoiing+0x174>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	425a      	negs	r2, r3
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	f002 0203 	and.w	r2, r2, #3
 80029ce:	bf58      	it	pl
 80029d0:	4253      	negpl	r3, r2
 80029d2:	4a2a      	ldr	r2, [pc, #168]	; (8002a7c <pauseHanoiing+0x164>)
 80029d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d8:	f1c3 0304 	rsb	r3, r3, #4
 80029dc:	4619      	mov	r1, r3
 80029de:	2007      	movs	r0, #7
 80029e0:	f7fe ffa6 	bl	8001930 <suck_the_cake>

		}
		if (dont_go_down[1] == 0) {
 80029e4:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <pauseHanoiing+0x170>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d112      	bne.n	8002a12 <pauseHanoiing+0xfa>
			suck_the_cake(4, (4 - cake_layer[(1 + rotate_offset) % 4]));
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <pauseHanoiing+0x174>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3301      	adds	r3, #1
 80029f2:	425a      	negs	r2, r3
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	f002 0203 	and.w	r2, r2, #3
 80029fc:	bf58      	it	pl
 80029fe:	4253      	negpl	r3, r2
 8002a00:	4a1e      	ldr	r2, [pc, #120]	; (8002a7c <pauseHanoiing+0x164>)
 8002a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a06:	f1c3 0304 	rsb	r3, r3, #4
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	2004      	movs	r0, #4
 8002a0e:	f7fe ff8f 	bl	8001930 <suck_the_cake>

		}

		if (dont_go_down[2] == 0) {
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <pauseHanoiing+0x170>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d112      	bne.n	8002a40 <pauseHanoiing+0x128>
			suck_the_cake(3, (4 - cake_layer[(2 + rotate_offset) % 4]));
 8002a1a:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <pauseHanoiing+0x174>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3302      	adds	r3, #2
 8002a20:	425a      	negs	r2, r3
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	f002 0203 	and.w	r2, r2, #3
 8002a2a:	bf58      	it	pl
 8002a2c:	4253      	negpl	r3, r2
 8002a2e:	4a13      	ldr	r2, [pc, #76]	; (8002a7c <pauseHanoiing+0x164>)
 8002a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a34:	f1c3 0304 	rsb	r3, r3, #4
 8002a38:	4619      	mov	r1, r3
 8002a3a:	2003      	movs	r0, #3
 8002a3c:	f7fe ff78 	bl	8001930 <suck_the_cake>

		}
		for (int i = 0; i < 3; i++)
 8002a40:	2300      	movs	r3, #0
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	e007      	b.n	8002a56 <pauseHanoiing+0x13e>
			dont_go_down[i] = 0;
 8002a46:	4a10      	ldr	r2, [pc, #64]	; (8002a88 <pauseHanoiing+0x170>)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 3; i++)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	ddf4      	ble.n	8002a46 <pauseHanoiing+0x12e>

		press_sensor_feedback();
 8002a5c:	f7ff f836 	bl	8001acc <press_sensor_feedback>
 8002a60:	e000      	b.n	8002a64 <pauseHanoiing+0x14c>
		return;
 8002a62:	bf00      	nop
	}
}
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200014f4 	.word	0x200014f4
 8002a70:	20001534 	.word	0x20001534
 8002a74:	20001560 	.word	0x20001560
 8002a78:	20001558 	.word	0x20001558
 8002a7c:	20000988 	.word	0x20000988
 8002a80:	200015b0 	.word	0x200015b0
 8002a84:	004dd1e0 	.word	0x004dd1e0
 8002a88:	200009a4 	.word	0x200009a4
 8002a8c:	2000097c 	.word	0x2000097c

08002a90 <Tower_of_Hanoi>:

int tower_step = 0;
void Tower_of_Hanoi(int cake_order) {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	if (if_gate_ok == 0)
 8002a98:	4bc1      	ldr	r3, [pc, #772]	; (8002da0 <Tower_of_Hanoi+0x310>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 843f 	beq.w	8003320 <Tower_of_Hanoi+0x890>
		return;
	if (cake_order == -1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	f000 843c 	beq.w	8003324 <Tower_of_Hanoi+0x894>
		return;
	suck_the_cake(7, 1);
 8002aac:	2101      	movs	r1, #1
 8002aae:	2007      	movs	r0, #7
 8002ab0:	f7fe ff3e 	bl	8001930 <suck_the_cake>
	suck_the_cake(4, 1);
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	2004      	movs	r0, #4
 8002ab8:	f7fe ff3a 	bl	8001930 <suck_the_cake>

	suck_the_cake(3, 1);
 8002abc:	2101      	movs	r1, #1
 8002abe:	2003      	movs	r0, #3
 8002ac0:	f7fe ff36 	bl	8001930 <suck_the_cake>

	press_sensor_feedback();
 8002ac4:	f7ff f802 	bl	8001acc <press_sensor_feedback>
	pauseHanoiing();
 8002ac8:	f7ff ff26 	bl	8002918 <pauseHanoiing>
	if (cake_order == 1) {
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	f040 80c1 	bne.w	8002c56 <Tower_of_Hanoi+0x1c6>

		rotate_the_ring(3);
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	f7ff f9df 	bl	8001e98 <rotate_the_ring>
		tower_step = 1;
 8002ada:	4bb2      	ldr	r3, [pc, #712]	; (8002da4 <Tower_of_Hanoi+0x314>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

		unsuck_the_cake(7, 3);
 8002ae0:	2103      	movs	r1, #3
 8002ae2:	2007      	movs	r0, #7
 8002ae4:	f7ff f8da 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002ae8:	f7fe fff0 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002aec:	f7ff ff14 	bl	8002918 <pauseHanoiing>
		tower_step = 2;
 8002af0:	4bac      	ldr	r3, [pc, #688]	; (8002da4 <Tower_of_Hanoi+0x314>)
 8002af2:	2202      	movs	r2, #2
 8002af4:	601a      	str	r2, [r3, #0]

		rotate_the_ring(2);
 8002af6:	2002      	movs	r0, #2
 8002af8:	f7ff f9ce 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8002afc:	2102      	movs	r1, #2
 8002afe:	2004      	movs	r0, #4
 8002b00:	f7ff f8cc 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002b04:	f7fe ffe2 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002b08:	f7ff ff06 	bl	8002918 <pauseHanoiing>
		tower_step = 3;
 8002b0c:	4ba5      	ldr	r3, [pc, #660]	; (8002da4 <Tower_of_Hanoi+0x314>)
 8002b0e:	2203      	movs	r2, #3
 8002b10:	601a      	str	r2, [r3, #0]

		rotate_the_ring(1);
 8002b12:	2001      	movs	r0, #1
 8002b14:	f7ff f9c0 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8002b18:	2101      	movs	r1, #1
 8002b1a:	2003      	movs	r0, #3
 8002b1c:	f7ff f8be 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002b20:	f7fe ffd4 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002b24:	f7ff fef8 	bl	8002918 <pauseHanoiing>
		tower_step = 4;
 8002b28:	4b9e      	ldr	r3, [pc, #632]	; (8002da4 <Tower_of_Hanoi+0x314>)
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	601a      	str	r2, [r3, #0]

		rotate_the_ring(0);
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7ff f9b2 	bl	8001e98 <rotate_the_ring>
		suck_the_cake(7, 2);
 8002b34:	2102      	movs	r1, #2
 8002b36:	2007      	movs	r0, #7
 8002b38:	f7fe fefa 	bl	8001930 <suck_the_cake>
		suck_the_cake(4, 2);
 8002b3c:	2102      	movs	r1, #2
 8002b3e:	2004      	movs	r0, #4
 8002b40:	f7fe fef6 	bl	8001930 <suck_the_cake>
		suck_the_cake(3, 2);
 8002b44:	2102      	movs	r1, #2
 8002b46:	2003      	movs	r0, #3
 8002b48:	f7fe fef2 	bl	8001930 <suck_the_cake>
		press_sensor_feedback();
 8002b4c:	f7fe ffbe 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002b50:	f7ff fee2 	bl	8002918 <pauseHanoiing>
		tower_step = 5;
 8002b54:	4b93      	ldr	r3, [pc, #588]	; (8002da4 <Tower_of_Hanoi+0x314>)
 8002b56:	2205      	movs	r2, #5
 8002b58:	601a      	str	r2, [r3, #0]

		rotate_the_ring(3);
 8002b5a:	2003      	movs	r0, #3
 8002b5c:	f7ff f99c 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8002b60:	2102      	movs	r1, #2
 8002b62:	2004      	movs	r0, #4
 8002b64:	f7ff f89a 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002b68:	f7fe ffb0 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002b6c:	f7ff fed4 	bl	8002918 <pauseHanoiing>
		tower_step = 6;
 8002b70:	4b8c      	ldr	r3, [pc, #560]	; (8002da4 <Tower_of_Hanoi+0x314>)
 8002b72:	2206      	movs	r2, #6
 8002b74:	601a      	str	r2, [r3, #0]

		rotate_the_ring(2);
 8002b76:	2002      	movs	r0, #2
 8002b78:	f7ff f98e 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	2003      	movs	r0, #3
 8002b80:	f7ff f88c 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002b84:	f7fe ffa2 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002b88:	f7ff fec6 	bl	8002918 <pauseHanoiing>
		tower_step = 7;
 8002b8c:	4b85      	ldr	r3, [pc, #532]	; (8002da4 <Tower_of_Hanoi+0x314>)
 8002b8e:	2207      	movs	r2, #7
 8002b90:	601a      	str	r2, [r3, #0]

		rotate_the_ring(0);
 8002b92:	2000      	movs	r0, #0
 8002b94:	f7ff f980 	bl	8001e98 <rotate_the_ring>
		suck_the_cake(4, 3);
 8002b98:	2103      	movs	r1, #3
 8002b9a:	2004      	movs	r0, #4
 8002b9c:	f7fe fec8 	bl	8001930 <suck_the_cake>
		suck_the_cake(3, 3);
 8002ba0:	2103      	movs	r1, #3
 8002ba2:	2003      	movs	r0, #3
 8002ba4:	f7fe fec4 	bl	8001930 <suck_the_cake>
		press_sensor_feedback();
 8002ba8:	f7fe ff90 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002bac:	f7ff feb4 	bl	8002918 <pauseHanoiing>
		tower_step = 8;
 8002bb0:	4b7c      	ldr	r3, [pc, #496]	; (8002da4 <Tower_of_Hanoi+0x314>)
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	601a      	str	r2, [r3, #0]

		rotate_the_ring(1);
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f7ff f96e 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(7, 3);
 8002bbc:	2103      	movs	r1, #3
 8002bbe:	2007      	movs	r0, #7
 8002bc0:	f7ff f86c 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002bc4:	f7fe ff82 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002bc8:	f7ff fea6 	bl	8002918 <pauseHanoiing>
		tower_step = 9;
 8002bcc:	4b75      	ldr	r3, [pc, #468]	; (8002da4 <Tower_of_Hanoi+0x314>)
 8002bce:	2209      	movs	r2, #9
 8002bd0:	601a      	str	r2, [r3, #0]

		rotate_the_ring(0);
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	f7ff f960 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8002bd8:	2102      	movs	r1, #2
 8002bda:	2004      	movs	r0, #4
 8002bdc:	f7ff f85e 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002be0:	f7fe ff74 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002be4:	f7ff fe98 	bl	8002918 <pauseHanoiing>
		tower_step = 10;
 8002be8:	4b6e      	ldr	r3, [pc, #440]	; (8002da4 <Tower_of_Hanoi+0x314>)
 8002bea:	220a      	movs	r2, #10
 8002bec:	601a      	str	r2, [r3, #0]

		rotate_the_ring(3);
 8002bee:	2003      	movs	r0, #3
 8002bf0:	f7ff f952 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	2003      	movs	r0, #3
 8002bf8:	f7ff f850 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002bfc:	f7fe ff66 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002c00:	f7ff fe8a 	bl	8002918 <pauseHanoiing>
		homefree = 1;
 8002c04:	4b68      	ldr	r3, [pc, #416]	; (8002da8 <Tower_of_Hanoi+0x318>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
		tower_step = 11;
 8002c0a:	4b66      	ldr	r3, [pc, #408]	; (8002da4 <Tower_of_Hanoi+0x314>)
 8002c0c:	220b      	movs	r2, #11
 8002c0e:	601a      	str	r2, [r3, #0]
		cake_check(0, 0);
 8002c10:	2100      	movs	r1, #0
 8002c12:	2000      	movs	r0, #0
 8002c14:	f7fe ff98 	bl	8001b48 <cake_check>
		cake_check(1, 0);
 8002c18:	2100      	movs	r1, #0
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	f7fe ff94 	bl	8001b48 <cake_check>
		cake_check(2, 0);
 8002c20:	2100      	movs	r1, #0
 8002c22:	2002      	movs	r0, #2
 8002c24:	f7fe ff90 	bl	8001b48 <cake_check>
		cake_check(3, 0);
 8002c28:	2100      	movs	r1, #0
 8002c2a:	2003      	movs	r0, #3
 8002c2c:	f7fe ff8c 	bl	8001b48 <cake_check>
		put_the_cherry(0);
 8002c30:	2000      	movs	r0, #0
 8002c32:	f7ff fa7f 	bl	8002134 <put_the_cherry>
		put_the_cherry(1);
 8002c36:	2001      	movs	r0, #1
 8002c38:	f7ff fa7c 	bl	8002134 <put_the_cherry>
		put_the_cherry(2);
 8002c3c:	2002      	movs	r0, #2
 8002c3e:	f7ff fa79 	bl	8002134 <put_the_cherry>

		rotate_the_ring(0);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7ff f928 	bl	8001e98 <rotate_the_ring>
		mission_array[0] = 2;
 8002c48:	4b58      	ldr	r3, [pc, #352]	; (8002dac <Tower_of_Hanoi+0x31c>)
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 8002c4e:	4b58      	ldr	r3, [pc, #352]	; (8002db0 <Tower_of_Hanoi+0x320>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e367      	b.n	8003326 <Tower_of_Hanoi+0x896>
	}

	else if (cake_order == 2) {
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	f040 80ab 	bne.w	8002db4 <Tower_of_Hanoi+0x324>
		rotate_the_ring(1);
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f7ff f91a 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(3, 3);
 8002c64:	2103      	movs	r1, #3
 8002c66:	2003      	movs	r0, #3
 8002c68:	f7ff f818 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002c6c:	f7fe ff2e 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002c70:	f7ff fe52 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(2);
 8002c74:	2002      	movs	r0, #2
 8002c76:	f7ff f90f 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	2004      	movs	r0, #4
 8002c7e:	f7ff f80d 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002c82:	f7fe ff23 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002c86:	f7ff fe47 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(3);
 8002c8a:	2003      	movs	r0, #3
 8002c8c:	f7ff f904 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(7, 1);
 8002c90:	2101      	movs	r1, #1
 8002c92:	2007      	movs	r0, #7
 8002c94:	f7ff f802 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002c98:	f7fe ff18 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002c9c:	f7ff fe3c 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(0);
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f7ff f8f9 	bl	8001e98 <rotate_the_ring>
		suck_the_cake(7, 2);
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	2007      	movs	r0, #7
 8002caa:	f7fe fe41 	bl	8001930 <suck_the_cake>
		suck_the_cake(4, 2);
 8002cae:	2102      	movs	r1, #2
 8002cb0:	2004      	movs	r0, #4
 8002cb2:	f7fe fe3d 	bl	8001930 <suck_the_cake>
		suck_the_cake(3, 2);
 8002cb6:	2102      	movs	r1, #2
 8002cb8:	2003      	movs	r0, #3
 8002cba:	f7fe fe39 	bl	8001930 <suck_the_cake>
		press_sensor_feedback();
 8002cbe:	f7fe ff05 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002cc2:	f7ff fe29 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(1);
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f7ff f8e6 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8002ccc:	2102      	movs	r1, #2
 8002cce:	2004      	movs	r0, #4
 8002cd0:	f7fe ffe4 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002cd4:	f7fe fefa 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002cd8:	f7ff fe1e 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(2);
 8002cdc:	2002      	movs	r0, #2
 8002cde:	f7ff f8db 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(7, 1);
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	2007      	movs	r0, #7
 8002ce6:	f7fe ffd9 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002cea:	f7fe feef 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002cee:	f7ff fe13 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(0);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f7ff f8d0 	bl	8001e98 <rotate_the_ring>
		suck_the_cake(4, 3);
 8002cf8:	2103      	movs	r1, #3
 8002cfa:	2004      	movs	r0, #4
 8002cfc:	f7fe fe18 	bl	8001930 <suck_the_cake>
		suck_the_cake(7, 3);
 8002d00:	2103      	movs	r1, #3
 8002d02:	2007      	movs	r0, #7
 8002d04:	f7fe fe14 	bl	8001930 <suck_the_cake>
		press_sensor_feedback();
 8002d08:	f7fe fee0 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002d0c:	f7ff fe04 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(3);
 8002d10:	2003      	movs	r0, #3
 8002d12:	f7ff f8c1 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(3, 3);
 8002d16:	2103      	movs	r1, #3
 8002d18:	2003      	movs	r0, #3
 8002d1a:	f7fe ffbf 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002d1e:	f7fe fed5 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002d22:	f7ff fdf9 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(0);
 8002d26:	2000      	movs	r0, #0
 8002d28:	f7ff f8b6 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8002d2c:	2102      	movs	r1, #2
 8002d2e:	2004      	movs	r0, #4
 8002d30:	f7fe ffb4 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002d34:	f7fe feca 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002d38:	f7ff fdee 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(1);
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	f7ff f8ab 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(7, 1);
 8002d42:	2101      	movs	r1, #1
 8002d44:	2007      	movs	r0, #7
 8002d46:	f7fe ffa9 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002d4a:	f7fe febf 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002d4e:	f7ff fde3 	bl	8002918 <pauseHanoiing>
		homefree = 1;
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <Tower_of_Hanoi+0x318>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	601a      	str	r2, [r3, #0]
		cake_check(0, 0);
 8002d58:	2100      	movs	r1, #0
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f7fe fef4 	bl	8001b48 <cake_check>
		cake_check(1, 0);
 8002d60:	2100      	movs	r1, #0
 8002d62:	2001      	movs	r0, #1
 8002d64:	f7fe fef0 	bl	8001b48 <cake_check>
		cake_check(2, 0);
 8002d68:	2100      	movs	r1, #0
 8002d6a:	2002      	movs	r0, #2
 8002d6c:	f7fe feec 	bl	8001b48 <cake_check>
		cake_check(3, 0);
 8002d70:	2100      	movs	r1, #0
 8002d72:	2003      	movs	r0, #3
 8002d74:	f7fe fee8 	bl	8001b48 <cake_check>
		put_the_cherry(0);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f7ff f9db 	bl	8002134 <put_the_cherry>
		put_the_cherry(3);
 8002d7e:	2003      	movs	r0, #3
 8002d80:	f7ff f9d8 	bl	8002134 <put_the_cherry>
		put_the_cherry(2);
 8002d84:	2002      	movs	r0, #2
 8002d86:	f7ff f9d5 	bl	8002134 <put_the_cherry>

		rotate_the_ring(0);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7ff f884 	bl	8001e98 <rotate_the_ring>
		mission_array[0] = 2;
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <Tower_of_Hanoi+0x31c>)
 8002d92:	2202      	movs	r2, #2
 8002d94:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <Tower_of_Hanoi+0x320>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	e2c3      	b.n	8003326 <Tower_of_Hanoi+0x896>
 8002d9e:	bf00      	nop
 8002da0:	20000014 	.word	0x20000014
 8002da4:	200009dc 	.word	0x200009dc
 8002da8:	20001538 	.word	0x20001538
 8002dac:	20001560 	.word	0x20001560
 8002db0:	20001558 	.word	0x20001558
	}

	else if (cake_order == 3) {
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	f040 80a0 	bne.w	8002efc <Tower_of_Hanoi+0x46c>
		rotate_the_ring(2);
 8002dbc:	2002      	movs	r0, #2
 8002dbe:	f7ff f86b 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(4, 3);
 8002dc2:	2103      	movs	r1, #3
 8002dc4:	2004      	movs	r0, #4
 8002dc6:	f7fe ff69 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002dca:	f7fe fe7f 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002dce:	f7ff fda3 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(3);
 8002dd2:	2003      	movs	r0, #3
 8002dd4:	f7ff f860 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(7, 2);
 8002dd8:	2102      	movs	r1, #2
 8002dda:	2007      	movs	r0, #7
 8002ddc:	f7fe ff5e 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002de0:	f7fe fe74 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002de4:	f7ff fd98 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(1);
 8002de8:	2001      	movs	r0, #1
 8002dea:	f7ff f855 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8002dee:	2101      	movs	r1, #1
 8002df0:	2003      	movs	r0, #3
 8002df2:	f7fe ff53 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002df6:	f7fe fe69 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002dfa:	f7ff fd8d 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(0);
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f7ff f84a 	bl	8001e98 <rotate_the_ring>
		suck_the_cake(7, 2);
 8002e04:	2102      	movs	r1, #2
 8002e06:	2007      	movs	r0, #7
 8002e08:	f7fe fd92 	bl	8001930 <suck_the_cake>
		suck_the_cake(4, 2);
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	2004      	movs	r0, #4
 8002e10:	f7fe fd8e 	bl	8001930 <suck_the_cake>
		suck_the_cake(3, 2);
 8002e14:	2102      	movs	r1, #2
 8002e16:	2003      	movs	r0, #3
 8002e18:	f7fe fd8a 	bl	8001930 <suck_the_cake>
		press_sensor_feedback();
 8002e1c:	f7fe fe56 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002e20:	f7ff fd7a 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(1);
 8002e24:	2001      	movs	r0, #1
 8002e26:	f7ff f837 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(7, 2);
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	2007      	movs	r0, #7
 8002e2e:	f7fe ff35 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002e32:	f7fe fe4b 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002e36:	f7ff fd6f 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(3);
 8002e3a:	2003      	movs	r0, #3
 8002e3c:	f7ff f82c 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8002e40:	2101      	movs	r1, #1
 8002e42:	2003      	movs	r0, #3
 8002e44:	f7fe ff2a 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002e48:	f7fe fe40 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002e4c:	f7ff fd64 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(0);
 8002e50:	2000      	movs	r0, #0
 8002e52:	f7ff f821 	bl	8001e98 <rotate_the_ring>
		suck_the_cake(7, 3);
 8002e56:	2103      	movs	r1, #3
 8002e58:	2007      	movs	r0, #7
 8002e5a:	f7fe fd69 	bl	8001930 <suck_the_cake>
		suck_the_cake(3, 3);
 8002e5e:	2103      	movs	r1, #3
 8002e60:	2003      	movs	r0, #3
 8002e62:	f7fe fd65 	bl	8001930 <suck_the_cake>
		press_sensor_feedback();
 8002e66:	f7fe fe31 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002e6a:	f7ff fd55 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(1);
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f7ff f812 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(4, 3);
 8002e74:	2103      	movs	r1, #3
 8002e76:	2004      	movs	r0, #4
 8002e78:	f7fe ff10 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002e7c:	f7fe fe26 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002e80:	f7ff fd4a 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(2);
 8002e84:	2002      	movs	r0, #2
 8002e86:	f7ff f807 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(7, 2);
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	2007      	movs	r0, #7
 8002e8e:	f7fe ff05 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002e92:	f7fe fe1b 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002e96:	f7ff fd3f 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(0);
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7fe fffc 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	2003      	movs	r0, #3
 8002ea4:	f7fe fefa 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002ea8:	f7fe fe10 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002eac:	f7ff fd34 	bl	8002918 <pauseHanoiing>
		homefree = 1;
 8002eb0:	4bc5      	ldr	r3, [pc, #788]	; (80031c8 <Tower_of_Hanoi+0x738>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
		cake_check(0, 0);
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f7fe fe45 	bl	8001b48 <cake_check>
		cake_check(1, 0);
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	f7fe fe41 	bl	8001b48 <cake_check>
		cake_check(2, 0);
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	2002      	movs	r0, #2
 8002eca:	f7fe fe3d 	bl	8001b48 <cake_check>
		cake_check(3, 0);
 8002ece:	2100      	movs	r1, #0
 8002ed0:	2003      	movs	r0, #3
 8002ed2:	f7fe fe39 	bl	8001b48 <cake_check>
		put_the_cherry(0);
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f7ff f92c 	bl	8002134 <put_the_cherry>
		put_the_cherry(3);
 8002edc:	2003      	movs	r0, #3
 8002ede:	f7ff f929 	bl	8002134 <put_the_cherry>
		put_the_cherry(2);
 8002ee2:	2002      	movs	r0, #2
 8002ee4:	f7ff f926 	bl	8002134 <put_the_cherry>

		rotate_the_ring(0);
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f7fe ffd5 	bl	8001e98 <rotate_the_ring>
		mission_array[0] = 2;
 8002eee:	4bb7      	ldr	r3, [pc, #732]	; (80031cc <Tower_of_Hanoi+0x73c>)
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 8002ef4:	4bb6      	ldr	r3, [pc, #728]	; (80031d0 <Tower_of_Hanoi+0x740>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e214      	b.n	8003326 <Tower_of_Hanoi+0x896>
	}

	else if (cake_order == 4) {
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	f040 80be 	bne.w	8003080 <Tower_of_Hanoi+0x5f0>
		rotate = 2;
 8002f04:	4bb3      	ldr	r3, [pc, #716]	; (80031d4 <Tower_of_Hanoi+0x744>)
 8002f06:	2202      	movs	r2, #2
 8002f08:	601a      	str	r2, [r3, #0]
		rotate_the_ring(2);
 8002f0a:	2002      	movs	r0, #2
 8002f0c:	f7fe ffc4 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(4, 3);
 8002f10:	2103      	movs	r1, #3
 8002f12:	2004      	movs	r0, #4
 8002f14:	f7fe fec2 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002f18:	f7fe fdd8 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002f1c:	f7ff fcfc 	bl	8002918 <pauseHanoiing>
		rotate = 1;
 8002f20:	4bac      	ldr	r3, [pc, #688]	; (80031d4 <Tower_of_Hanoi+0x744>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
		rotate_the_ring(1);
 8002f26:	2001      	movs	r0, #1
 8002f28:	f7fe ffb6 	bl	8001e98 <rotate_the_ring>

		unsuck_the_cake(3, 2);
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	2003      	movs	r0, #3
 8002f30:	f7fe feb4 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002f34:	f7fe fdca 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002f38:	f7ff fcee 	bl	8002918 <pauseHanoiing>
		rotate = 3;
 8002f3c:	4ba5      	ldr	r3, [pc, #660]	; (80031d4 <Tower_of_Hanoi+0x744>)
 8002f3e:	2203      	movs	r2, #3
 8002f40:	601a      	str	r2, [r3, #0]
		rotate_the_ring(3);
 8002f42:	2003      	movs	r0, #3
 8002f44:	f7fe ffa8 	bl	8001e98 <rotate_the_ring>

		unsuck_the_cake(7, 1);
 8002f48:	2101      	movs	r1, #1
 8002f4a:	2007      	movs	r0, #7
 8002f4c:	f7fe fea6 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002f50:	f7fe fdbc 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002f54:	f7ff fce0 	bl	8002918 <pauseHanoiing>
		rotate = 0;
 8002f58:	4b9e      	ldr	r3, [pc, #632]	; (80031d4 <Tower_of_Hanoi+0x744>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
		rotate_the_ring(0);
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7fe ff9a 	bl	8001e98 <rotate_the_ring>

		suck_the_cake(7, 2);
 8002f64:	2102      	movs	r1, #2
 8002f66:	2007      	movs	r0, #7
 8002f68:	f7fe fce2 	bl	8001930 <suck_the_cake>
		suck_the_cake(4, 2);
 8002f6c:	2102      	movs	r1, #2
 8002f6e:	2004      	movs	r0, #4
 8002f70:	f7fe fcde 	bl	8001930 <suck_the_cake>
		suck_the_cake(3, 2);
 8002f74:	2102      	movs	r1, #2
 8002f76:	2003      	movs	r0, #3
 8002f78:	f7fe fcda 	bl	8001930 <suck_the_cake>
		press_sensor_feedback();
 8002f7c:	f7fe fda6 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002f80:	f7ff fcca 	bl	8002918 <pauseHanoiing>
		rotate = 3;
 8002f84:	4b93      	ldr	r3, [pc, #588]	; (80031d4 <Tower_of_Hanoi+0x744>)
 8002f86:	2203      	movs	r2, #3
 8002f88:	601a      	str	r2, [r3, #0]
		rotate_the_ring(3);
 8002f8a:	2003      	movs	r0, #3
 8002f8c:	f7fe ff84 	bl	8001e98 <rotate_the_ring>

		unsuck_the_cake(3, 2);
 8002f90:	2102      	movs	r1, #2
 8002f92:	2003      	movs	r0, #3
 8002f94:	f7fe fe82 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002f98:	f7fe fd98 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002f9c:	f7ff fcbc 	bl	8002918 <pauseHanoiing>
		rotate = 1;
 8002fa0:	4b8c      	ldr	r3, [pc, #560]	; (80031d4 <Tower_of_Hanoi+0x744>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
		rotate_the_ring(1);
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f7fe ff76 	bl	8001e98 <rotate_the_ring>

		unsuck_the_cake(7, 1);
 8002fac:	2101      	movs	r1, #1
 8002fae:	2007      	movs	r0, #7
 8002fb0:	f7fe fe74 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002fb4:	f7fe fd8a 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002fb8:	f7ff fcae 	bl	8002918 <pauseHanoiing>
		rotate = 0;
 8002fbc:	4b85      	ldr	r3, [pc, #532]	; (80031d4 <Tower_of_Hanoi+0x744>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
		rotate_the_ring(0);
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f7fe ff68 	bl	8001e98 <rotate_the_ring>

		suck_the_cake(7, 3);
 8002fc8:	2103      	movs	r1, #3
 8002fca:	2007      	movs	r0, #7
 8002fcc:	f7fe fcb0 	bl	8001930 <suck_the_cake>
		suck_the_cake(3, 3);
 8002fd0:	2103      	movs	r1, #3
 8002fd2:	2003      	movs	r0, #3
 8002fd4:	f7fe fcac 	bl	8001930 <suck_the_cake>
		press_sensor_feedback();
 8002fd8:	f7fe fd78 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002fdc:	f7ff fc9c 	bl	8002918 <pauseHanoiing>
		rotate = 3;
 8002fe0:	4b7c      	ldr	r3, [pc, #496]	; (80031d4 <Tower_of_Hanoi+0x744>)
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	601a      	str	r2, [r3, #0]
		rotate_the_ring(3);
 8002fe6:	2003      	movs	r0, #3
 8002fe8:	f7fe ff56 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(4, 3);
 8002fec:	2103      	movs	r1, #3
 8002fee:	2004      	movs	r0, #4
 8002ff0:	f7fe fe54 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8002ff4:	f7fe fd6a 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8002ff8:	f7ff fc8e 	bl	8002918 <pauseHanoiing>
		rotate = 2;
 8002ffc:	4b75      	ldr	r3, [pc, #468]	; (80031d4 <Tower_of_Hanoi+0x744>)
 8002ffe:	2202      	movs	r2, #2
 8003000:	601a      	str	r2, [r3, #0]
		rotate_the_ring(2);
 8003002:	2002      	movs	r0, #2
 8003004:	f7fe ff48 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(3, 2);
 8003008:	2102      	movs	r1, #2
 800300a:	2003      	movs	r0, #3
 800300c:	f7fe fe46 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8003010:	f7fe fd5c 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8003014:	f7ff fc80 	bl	8002918 <pauseHanoiing>
		rotate = 0;
 8003018:	4b6e      	ldr	r3, [pc, #440]	; (80031d4 <Tower_of_Hanoi+0x744>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
		rotate_the_ring(0);
 800301e:	2000      	movs	r0, #0
 8003020:	f7fe ff3a 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(7, 1);
 8003024:	2101      	movs	r1, #1
 8003026:	2007      	movs	r0, #7
 8003028:	f7fe fe38 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 800302c:	f7fe fd4e 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8003030:	f7ff fc72 	bl	8002918 <pauseHanoiing>
		homefree = 1;
 8003034:	4b64      	ldr	r3, [pc, #400]	; (80031c8 <Tower_of_Hanoi+0x738>)
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]
		cake_check(0, 0);
 800303a:	2100      	movs	r1, #0
 800303c:	2000      	movs	r0, #0
 800303e:	f7fe fd83 	bl	8001b48 <cake_check>
		cake_check(1, 0);
 8003042:	2100      	movs	r1, #0
 8003044:	2001      	movs	r0, #1
 8003046:	f7fe fd7f 	bl	8001b48 <cake_check>
		cake_check(2, 0);
 800304a:	2100      	movs	r1, #0
 800304c:	2002      	movs	r0, #2
 800304e:	f7fe fd7b 	bl	8001b48 <cake_check>
		cake_check(3, 0);
 8003052:	2100      	movs	r1, #0
 8003054:	2003      	movs	r0, #3
 8003056:	f7fe fd77 	bl	8001b48 <cake_check>
		put_the_cherry(0);
 800305a:	2000      	movs	r0, #0
 800305c:	f7ff f86a 	bl	8002134 <put_the_cherry>
		put_the_cherry(1);
 8003060:	2001      	movs	r0, #1
 8003062:	f7ff f867 	bl	8002134 <put_the_cherry>
		put_the_cherry(2);
 8003066:	2002      	movs	r0, #2
 8003068:	f7ff f864 	bl	8002134 <put_the_cherry>

		rotate_the_ring(0);
 800306c:	2000      	movs	r0, #0
 800306e:	f7fe ff13 	bl	8001e98 <rotate_the_ring>
		mission_array[0] = 2;
 8003072:	4b56      	ldr	r3, [pc, #344]	; (80031cc <Tower_of_Hanoi+0x73c>)
 8003074:	2202      	movs	r2, #2
 8003076:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 8003078:	4b55      	ldr	r3, [pc, #340]	; (80031d0 <Tower_of_Hanoi+0x740>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	e152      	b.n	8003326 <Tower_of_Hanoi+0x896>
	}

	else if (cake_order == 5) {
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b05      	cmp	r3, #5
 8003084:	f040 80a8 	bne.w	80031d8 <Tower_of_Hanoi+0x748>
		rotate_the_ring(3);
 8003088:	2003      	movs	r0, #3
 800308a:	f7fe ff05 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(7, 3);
 800308e:	2103      	movs	r1, #3
 8003090:	2007      	movs	r0, #7
 8003092:	f7fe fe03 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8003096:	f7fe fd19 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 800309a:	f7ff fc3d 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(1);
 800309e:	2001      	movs	r0, #1
 80030a0:	f7fe fefa 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(3, 2);
 80030a4:	2102      	movs	r1, #2
 80030a6:	2003      	movs	r0, #3
 80030a8:	f7fe fdf8 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 80030ac:	f7fe fd0e 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 80030b0:	f7ff fc32 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(2);
 80030b4:	2002      	movs	r0, #2
 80030b6:	f7fe feef 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 80030ba:	2101      	movs	r1, #1
 80030bc:	2004      	movs	r0, #4
 80030be:	f7fe fded 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 80030c2:	f7fe fd03 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 80030c6:	f7ff fc27 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(0);
 80030ca:	2000      	movs	r0, #0
 80030cc:	f7fe fee4 	bl	8001e98 <rotate_the_ring>
		suck_the_cake(7, 2);
 80030d0:	2102      	movs	r1, #2
 80030d2:	2007      	movs	r0, #7
 80030d4:	f7fe fc2c 	bl	8001930 <suck_the_cake>
		suck_the_cake(4, 2);
 80030d8:	2102      	movs	r1, #2
 80030da:	2004      	movs	r0, #4
 80030dc:	f7fe fc28 	bl	8001930 <suck_the_cake>
		suck_the_cake(3, 2);
 80030e0:	2102      	movs	r1, #2
 80030e2:	2003      	movs	r0, #3
 80030e4:	f7fe fc24 	bl	8001930 <suck_the_cake>
		press_sensor_feedback();
 80030e8:	f7fe fcf0 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 80030ec:	f7ff fc14 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(2);
 80030f0:	2002      	movs	r0, #2
 80030f2:	f7fe fed1 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(3, 2);
 80030f6:	2102      	movs	r1, #2
 80030f8:	2003      	movs	r0, #3
 80030fa:	f7fe fdcf 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 80030fe:	f7fe fce5 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8003102:	f7ff fc09 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(3);
 8003106:	2003      	movs	r0, #3
 8003108:	f7fe fec6 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 800310c:	2101      	movs	r1, #1
 800310e:	2004      	movs	r0, #4
 8003110:	f7fe fdc4 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8003114:	f7fe fcda 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8003118:	f7ff fbfe 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(0);
 800311c:	2000      	movs	r0, #0
 800311e:	f7fe febb 	bl	8001e98 <rotate_the_ring>
		suck_the_cake(4, 3);
 8003122:	2103      	movs	r1, #3
 8003124:	2004      	movs	r0, #4
 8003126:	f7fe fc03 	bl	8001930 <suck_the_cake>
		suck_the_cake(3, 3);
 800312a:	2103      	movs	r1, #3
 800312c:	2003      	movs	r0, #3
 800312e:	f7fe fbff 	bl	8001930 <suck_the_cake>
		press_sensor_feedback();
 8003132:	f7fe fccb 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8003136:	f7ff fbef 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(1);
 800313a:	2001      	movs	r0, #1
 800313c:	f7fe feac 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(7, 3);
 8003140:	2103      	movs	r1, #3
 8003142:	2007      	movs	r0, #7
 8003144:	f7fe fdaa 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8003148:	f7fe fcc0 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 800314c:	f7ff fbe4 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(3);
 8003150:	2003      	movs	r0, #3
 8003152:	f7fe fea1 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(3, 2);
 8003156:	2102      	movs	r1, #2
 8003158:	2003      	movs	r0, #3
 800315a:	f7fe fd9f 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 800315e:	f7fe fcb5 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8003162:	f7ff fbd9 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(0);
 8003166:	2000      	movs	r0, #0
 8003168:	f7fe fe96 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 800316c:	2101      	movs	r1, #1
 800316e:	2004      	movs	r0, #4
 8003170:	f7fe fd94 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8003174:	f7fe fcaa 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8003178:	f7ff fbce 	bl	8002918 <pauseHanoiing>
		homefree = 1;
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <Tower_of_Hanoi+0x738>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]
		cake_check(0, 0);
 8003182:	2100      	movs	r1, #0
 8003184:	2000      	movs	r0, #0
 8003186:	f7fe fcdf 	bl	8001b48 <cake_check>
		cake_check(1, 0);
 800318a:	2100      	movs	r1, #0
 800318c:	2001      	movs	r0, #1
 800318e:	f7fe fcdb 	bl	8001b48 <cake_check>
		cake_check(2, 0);
 8003192:	2100      	movs	r1, #0
 8003194:	2002      	movs	r0, #2
 8003196:	f7fe fcd7 	bl	8001b48 <cake_check>
		cake_check(3, 0);
 800319a:	2100      	movs	r1, #0
 800319c:	2003      	movs	r0, #3
 800319e:	f7fe fcd3 	bl	8001b48 <cake_check>
		put_the_cherry(0);
 80031a2:	2000      	movs	r0, #0
 80031a4:	f7fe ffc6 	bl	8002134 <put_the_cherry>
		put_the_cherry(1);
 80031a8:	2001      	movs	r0, #1
 80031aa:	f7fe ffc3 	bl	8002134 <put_the_cherry>
		put_the_cherry(2);
 80031ae:	2002      	movs	r0, #2
 80031b0:	f7fe ffc0 	bl	8002134 <put_the_cherry>

		rotate_the_ring(0);
 80031b4:	2000      	movs	r0, #0
 80031b6:	f7fe fe6f 	bl	8001e98 <rotate_the_ring>
		mission_array[0] = 2;
 80031ba:	4b04      	ldr	r3, [pc, #16]	; (80031cc <Tower_of_Hanoi+0x73c>)
 80031bc:	2202      	movs	r2, #2
 80031be:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 80031c0:	4b03      	ldr	r3, [pc, #12]	; (80031d0 <Tower_of_Hanoi+0x740>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	e0ae      	b.n	8003326 <Tower_of_Hanoi+0x896>
 80031c8:	20001538 	.word	0x20001538
 80031cc:	20001560 	.word	0x20001560
 80031d0:	20001558 	.word	0x20001558
 80031d4:	20001574 	.word	0x20001574
	}

	else if (cake_order == 6) {
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b06      	cmp	r3, #6
 80031dc:	f040 80a3 	bne.w	8003326 <Tower_of_Hanoi+0x896>
		rotate_the_ring(1);
 80031e0:	2001      	movs	r0, #1
 80031e2:	f7fe fe59 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(3, 3);
 80031e6:	2103      	movs	r1, #3
 80031e8:	2003      	movs	r0, #3
 80031ea:	f7fe fd57 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 80031ee:	f7fe fc6d 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 80031f2:	f7ff fb91 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(3);
 80031f6:	2003      	movs	r0, #3
 80031f8:	f7fe fe4e 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(7, 2);
 80031fc:	2102      	movs	r1, #2
 80031fe:	2007      	movs	r0, #7
 8003200:	f7fe fd4c 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8003204:	f7fe fc62 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8003208:	f7ff fb86 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(2);
 800320c:	2002      	movs	r0, #2
 800320e:	f7fe fe43 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 8003212:	2101      	movs	r1, #1
 8003214:	2004      	movs	r0, #4
 8003216:	f7fe fd41 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 800321a:	f7fe fc57 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 800321e:	f7ff fb7b 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(0);
 8003222:	2000      	movs	r0, #0
 8003224:	f7fe fe38 	bl	8001e98 <rotate_the_ring>
		suck_the_cake(7, 2);
 8003228:	2102      	movs	r1, #2
 800322a:	2007      	movs	r0, #7
 800322c:	f7fe fb80 	bl	8001930 <suck_the_cake>
		suck_the_cake(4, 2);
 8003230:	2102      	movs	r1, #2
 8003232:	2004      	movs	r0, #4
 8003234:	f7fe fb7c 	bl	8001930 <suck_the_cake>
		suck_the_cake(3, 2);
 8003238:	2102      	movs	r1, #2
 800323a:	2003      	movs	r0, #3
 800323c:	f7fe fb78 	bl	8001930 <suck_the_cake>
		press_sensor_feedback();
 8003240:	f7fe fc44 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8003244:	f7ff fb68 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(2);
 8003248:	2002      	movs	r0, #2
 800324a:	f7fe fe25 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(7, 2);
 800324e:	2102      	movs	r1, #2
 8003250:	2007      	movs	r0, #7
 8003252:	f7fe fd23 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 8003256:	f7fe fc39 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 800325a:	f7ff fb5d 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(1);
 800325e:	2001      	movs	r0, #1
 8003260:	f7fe fe1a 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 8003264:	2101      	movs	r1, #1
 8003266:	2004      	movs	r0, #4
 8003268:	f7fe fd18 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 800326c:	f7fe fc2e 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 8003270:	f7ff fb52 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(0);
 8003274:	2000      	movs	r0, #0
 8003276:	f7fe fe0f 	bl	8001e98 <rotate_the_ring>
		suck_the_cake(4, 3);
 800327a:	2103      	movs	r1, #3
 800327c:	2004      	movs	r0, #4
 800327e:	f7fe fb57 	bl	8001930 <suck_the_cake>
		suck_the_cake(7, 3);
 8003282:	2103      	movs	r1, #3
 8003284:	2007      	movs	r0, #7
 8003286:	f7fe fb53 	bl	8001930 <suck_the_cake>
		press_sensor_feedback();
 800328a:	f7fe fc1f 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 800328e:	f7ff fb43 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(3);
 8003292:	2003      	movs	r0, #3
 8003294:	f7fe fe00 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(3, 3);
 8003298:	2103      	movs	r1, #3
 800329a:	2003      	movs	r0, #3
 800329c:	f7fe fcfe 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 80032a0:	f7fe fc14 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 80032a4:	f7ff fb38 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(1);
 80032a8:	2001      	movs	r0, #1
 80032aa:	f7fe fdf5 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(7, 2);
 80032ae:	2102      	movs	r1, #2
 80032b0:	2007      	movs	r0, #7
 80032b2:	f7fe fcf3 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 80032b6:	f7fe fc09 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 80032ba:	f7ff fb2d 	bl	8002918 <pauseHanoiing>
		rotate_the_ring(0);
 80032be:	2000      	movs	r0, #0
 80032c0:	f7fe fdea 	bl	8001e98 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 80032c4:	2101      	movs	r1, #1
 80032c6:	2004      	movs	r0, #4
 80032c8:	f7fe fce8 	bl	8001c9c <unsuck_the_cake>
		press_sensor_feedback();
 80032cc:	f7fe fbfe 	bl	8001acc <press_sensor_feedback>
		pauseHanoiing();
 80032d0:	f7ff fb22 	bl	8002918 <pauseHanoiing>
		homefree = 1;
 80032d4:	4b15      	ldr	r3, [pc, #84]	; (800332c <Tower_of_Hanoi+0x89c>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
		cake_check(0, 0);
 80032da:	2100      	movs	r1, #0
 80032dc:	2000      	movs	r0, #0
 80032de:	f7fe fc33 	bl	8001b48 <cake_check>
		cake_check(1, 0);
 80032e2:	2100      	movs	r1, #0
 80032e4:	2001      	movs	r0, #1
 80032e6:	f7fe fc2f 	bl	8001b48 <cake_check>
		cake_check(2, 0);
 80032ea:	2100      	movs	r1, #0
 80032ec:	2002      	movs	r0, #2
 80032ee:	f7fe fc2b 	bl	8001b48 <cake_check>
		cake_check(3, 0);
 80032f2:	2100      	movs	r1, #0
 80032f4:	2003      	movs	r0, #3
 80032f6:	f7fe fc27 	bl	8001b48 <cake_check>
		put_the_cherry(0);
 80032fa:	2000      	movs	r0, #0
 80032fc:	f7fe ff1a 	bl	8002134 <put_the_cherry>
		put_the_cherry(3);
 8003300:	2003      	movs	r0, #3
 8003302:	f7fe ff17 	bl	8002134 <put_the_cherry>
		put_the_cherry(2);
 8003306:	2002      	movs	r0, #2
 8003308:	f7fe ff14 	bl	8002134 <put_the_cherry>

		rotate_the_ring(0);
 800330c:	2000      	movs	r0, #0
 800330e:	f7fe fdc3 	bl	8001e98 <rotate_the_ring>
		mission_array[0] = 2;
 8003312:	4b07      	ldr	r3, [pc, #28]	; (8003330 <Tower_of_Hanoi+0x8a0>)
 8003314:	2202      	movs	r2, #2
 8003316:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <Tower_of_Hanoi+0x8a4>)
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e002      	b.n	8003326 <Tower_of_Hanoi+0x896>
		return;
 8003320:	bf00      	nop
 8003322:	e000      	b.n	8003326 <Tower_of_Hanoi+0x896>
		return;
 8003324:	bf00      	nop
	}
}
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20001538 	.word	0x20001538
 8003330:	20001560 	.word	0x20001560
 8003334:	20001558 	.word	0x20001558

08003338 <finish_all_motion>:
void finish_all_motion() {
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
	UART_Send_SetMotorPosition(1, 0, 0);
 800333c:	2200      	movs	r2, #0
 800333e:	2100      	movs	r1, #0
 8003340:	2001      	movs	r0, #1
 8003342:	f7fd fd33 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(4, 0, 0);
 8003346:	2200      	movs	r2, #0
 8003348:	2100      	movs	r1, #0
 800334a:	2004      	movs	r0, #4
 800334c:	f7fd fd2e 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(3, 0, 0);
 8003350:	2200      	movs	r2, #0
 8003352:	2100      	movs	r1, #0
 8003354:	2003      	movs	r0, #3
 8003356:	f7fd fd29 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(5, 0, 0);
 800335a:	2200      	movs	r2, #0
 800335c:	2100      	movs	r1, #0
 800335e:	2005      	movs	r0, #5
 8003360:	f7fd fd24 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(6, 0, 0);
 8003364:	2200      	movs	r2, #0
 8003366:	2100      	movs	r1, #0
 8003368:	2006      	movs	r0, #6
 800336a:	f7fd fd1f 	bl	8000dac <UART_Send_SetMotorPosition>
	HAL_GPIO_WritePin(Step1_EN_Port, Step1_EN_Pin, GPIO_PIN_SET);
 800336e:	2201      	movs	r2, #1
 8003370:	2108      	movs	r1, #8
 8003372:	480e      	ldr	r0, [pc, #56]	; (80033ac <finish_all_motion+0x74>)
 8003374:	f006 f878 	bl	8009468 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8003378:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <finish_all_motion+0x78>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2200      	movs	r2, #0
 800337e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <finish_all_motion+0x78>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2200      	movs	r2, #0
 8003386:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003388:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <finish_all_motion+0x7c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2200      	movs	r2, #0
 800338e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8003390:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <finish_all_motion+0x7c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2200      	movs	r2, #0
 8003396:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <finish_all_motion+0x7c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2200      	movs	r2, #0
 800339e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <finish_all_motion+0x7c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2200      	movs	r2, #0
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80033a8:	bf00      	nop
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40020400 	.word	0x40020400
 80033b0:	200015f8 	.word	0x200015f8
 80033b4:	20001640 	.word	0x20001640

080033b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	4b23      	ldr	r3, [pc, #140]	; (8003450 <MX_DMA_Init+0x98>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	4a22      	ldr	r2, [pc, #136]	; (8003450 <MX_DMA_Init+0x98>)
 80033c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033cc:	6313      	str	r3, [r2, #48]	; 0x30
 80033ce:	4b20      	ldr	r3, [pc, #128]	; (8003450 <MX_DMA_Init+0x98>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d6:	607b      	str	r3, [r7, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4b1c      	ldr	r3, [pc, #112]	; (8003450 <MX_DMA_Init+0x98>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	4a1b      	ldr	r2, [pc, #108]	; (8003450 <MX_DMA_Init+0x98>)
 80033e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033e8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ea:	4b19      	ldr	r3, [pc, #100]	; (8003450 <MX_DMA_Init+0x98>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80033f6:	2200      	movs	r2, #0
 80033f8:	2100      	movs	r1, #0
 80033fa:	2010      	movs	r0, #16
 80033fc:	f005 f8f9 	bl	80085f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003400:	2010      	movs	r0, #16
 8003402:	f005 f912 	bl	800862a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003406:	2200      	movs	r2, #0
 8003408:	2100      	movs	r1, #0
 800340a:	2011      	movs	r0, #17
 800340c:	f005 f8f1 	bl	80085f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003410:	2011      	movs	r0, #17
 8003412:	f005 f90a 	bl	800862a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003416:	2200      	movs	r2, #0
 8003418:	2100      	movs	r1, #0
 800341a:	2038      	movs	r0, #56	; 0x38
 800341c:	f005 f8e9 	bl	80085f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003420:	2038      	movs	r0, #56	; 0x38
 8003422:	f005 f902 	bl	800862a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003426:	2200      	movs	r2, #0
 8003428:	2100      	movs	r1, #0
 800342a:	203a      	movs	r0, #58	; 0x3a
 800342c:	f005 f8e1 	bl	80085f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003430:	203a      	movs	r0, #58	; 0x3a
 8003432:	f005 f8fa 	bl	800862a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003436:	2200      	movs	r2, #0
 8003438:	2100      	movs	r1, #0
 800343a:	2046      	movs	r0, #70	; 0x46
 800343c:	f005 f8d9 	bl	80085f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003440:	2046      	movs	r0, #70	; 0x46
 8003442:	f005 f8f2 	bl	800862a <HAL_NVIC_EnableIRQ>

}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800

08003454 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	; 0x28
 8003458:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345a:	f107 0314 	add.w	r3, r7, #20
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	605a      	str	r2, [r3, #4]
 8003464:	609a      	str	r2, [r3, #8]
 8003466:	60da      	str	r2, [r3, #12]
 8003468:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	4b64      	ldr	r3, [pc, #400]	; (8003600 <MX_GPIO_Init+0x1ac>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	4a63      	ldr	r2, [pc, #396]	; (8003600 <MX_GPIO_Init+0x1ac>)
 8003474:	f043 0304 	orr.w	r3, r3, #4
 8003478:	6313      	str	r3, [r2, #48]	; 0x30
 800347a:	4b61      	ldr	r3, [pc, #388]	; (8003600 <MX_GPIO_Init+0x1ac>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	4b5d      	ldr	r3, [pc, #372]	; (8003600 <MX_GPIO_Init+0x1ac>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	4a5c      	ldr	r2, [pc, #368]	; (8003600 <MX_GPIO_Init+0x1ac>)
 8003490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003494:	6313      	str	r3, [r2, #48]	; 0x30
 8003496:	4b5a      	ldr	r3, [pc, #360]	; (8003600 <MX_GPIO_Init+0x1ac>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	4b56      	ldr	r3, [pc, #344]	; (8003600 <MX_GPIO_Init+0x1ac>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	4a55      	ldr	r2, [pc, #340]	; (8003600 <MX_GPIO_Init+0x1ac>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6313      	str	r3, [r2, #48]	; 0x30
 80034b2:	4b53      	ldr	r3, [pc, #332]	; (8003600 <MX_GPIO_Init+0x1ac>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	4b4f      	ldr	r3, [pc, #316]	; (8003600 <MX_GPIO_Init+0x1ac>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a4e      	ldr	r2, [pc, #312]	; (8003600 <MX_GPIO_Init+0x1ac>)
 80034c8:	f043 0302 	orr.w	r3, r3, #2
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
 80034ce:	4b4c      	ldr	r3, [pc, #304]	; (8003600 <MX_GPIO_Init+0x1ac>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	607b      	str	r3, [r7, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	603b      	str	r3, [r7, #0]
 80034de:	4b48      	ldr	r3, [pc, #288]	; (8003600 <MX_GPIO_Init+0x1ac>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	4a47      	ldr	r2, [pc, #284]	; (8003600 <MX_GPIO_Init+0x1ac>)
 80034e4:	f043 0308 	orr.w	r3, r3, #8
 80034e8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ea:	4b45      	ldr	r3, [pc, #276]	; (8003600 <MX_GPIO_Init+0x1ac>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80034f6:	2200      	movs	r2, #0
 80034f8:	f243 0128 	movw	r1, #12328	; 0x3028
 80034fc:	4841      	ldr	r0, [pc, #260]	; (8003604 <MX_GPIO_Init+0x1b0>)
 80034fe:	f005 ffb3 	bl	8009468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8003502:	2200      	movs	r2, #0
 8003504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003508:	483f      	ldr	r0, [pc, #252]	; (8003608 <MX_GPIO_Init+0x1b4>)
 800350a:	f005 ffad 	bl	8009468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800350e:	2200      	movs	r2, #0
 8003510:	2104      	movs	r1, #4
 8003512:	483e      	ldr	r0, [pc, #248]	; (800360c <MX_GPIO_Init+0x1b8>)
 8003514:	f005 ffa8 	bl	8009468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800351c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800351e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003528:	f107 0314 	add.w	r3, r7, #20
 800352c:	4619      	mov	r1, r3
 800352e:	4836      	ldr	r0, [pc, #216]	; (8003608 <MX_GPIO_Init+0x1b4>)
 8003530:	f005 fd12 	bl	8008f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003534:	2303      	movs	r3, #3
 8003536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003538:	2300      	movs	r3, #0
 800353a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353c:	2300      	movs	r3, #0
 800353e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	4619      	mov	r1, r3
 8003546:	4830      	ldr	r0, [pc, #192]	; (8003608 <MX_GPIO_Init+0x1b4>)
 8003548:	f005 fd06 	bl	8008f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_11;
 800354c:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8003550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003552:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	2300      	movs	r3, #0
 800355a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800355c:	f107 0314 	add.w	r3, r7, #20
 8003560:	4619      	mov	r1, r3
 8003562:	4829      	ldr	r0, [pc, #164]	; (8003608 <MX_GPIO_Init+0x1b4>)
 8003564:	f005 fcf8 	bl	8008f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003568:	2301      	movs	r3, #1
 800356a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003570:	2300      	movs	r3, #0
 8003572:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	4619      	mov	r1, r3
 800357a:	4822      	ldr	r0, [pc, #136]	; (8003604 <MX_GPIO_Init+0x1b0>)
 800357c:	f005 fcec 	bl	8008f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_5;
 8003580:	f243 0328 	movw	r3, #12328	; 0x3028
 8003584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003586:	2301      	movs	r3, #1
 8003588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358e:	2300      	movs	r3, #0
 8003590:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003592:	f107 0314 	add.w	r3, r7, #20
 8003596:	4619      	mov	r1, r3
 8003598:	481a      	ldr	r0, [pc, #104]	; (8003604 <MX_GPIO_Init+0x1b0>)
 800359a:	f005 fcdd 	bl	8008f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800359e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a4:	2301      	movs	r3, #1
 80035a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ac:	2300      	movs	r3, #0
 80035ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	4619      	mov	r1, r3
 80035b6:	4814      	ldr	r0, [pc, #80]	; (8003608 <MX_GPIO_Init+0x1b4>)
 80035b8:	f005 fcce 	bl	8008f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035bc:	2304      	movs	r3, #4
 80035be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035c0:	2301      	movs	r3, #1
 80035c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c8:	2300      	movs	r3, #0
 80035ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	4619      	mov	r1, r3
 80035d2:	480e      	ldr	r0, [pc, #56]	; (800360c <MX_GPIO_Init+0x1b8>)
 80035d4:	f005 fcc0 	bl	8008f58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80035d8:	2200      	movs	r2, #0
 80035da:	2100      	movs	r1, #0
 80035dc:	200a      	movs	r0, #10
 80035de:	f005 f808 	bl	80085f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80035e2:	200a      	movs	r0, #10
 80035e4:	f005 f821 	bl	800862a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80035e8:	2200      	movs	r2, #0
 80035ea:	2100      	movs	r1, #0
 80035ec:	2028      	movs	r0, #40	; 0x28
 80035ee:	f005 f800 	bl	80085f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80035f2:	2028      	movs	r0, #40	; 0x28
 80035f4:	f005 f819 	bl	800862a <HAL_NVIC_EnableIRQ>

}
 80035f8:	bf00      	nop
 80035fa:	3728      	adds	r7, #40	; 0x28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40023800 	.word	0x40023800
 8003604:	40020400 	.word	0x40020400
 8003608:	40020800 	.word	0x40020800
 800360c:	40020c00 	.word	0x40020c00

08003610 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003614:	4b12      	ldr	r3, [pc, #72]	; (8003660 <MX_I2C1_Init+0x50>)
 8003616:	4a13      	ldr	r2, [pc, #76]	; (8003664 <MX_I2C1_Init+0x54>)
 8003618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800361a:	4b11      	ldr	r3, [pc, #68]	; (8003660 <MX_I2C1_Init+0x50>)
 800361c:	4a12      	ldr	r2, [pc, #72]	; (8003668 <MX_I2C1_Init+0x58>)
 800361e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003620:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <MX_I2C1_Init+0x50>)
 8003622:	2200      	movs	r2, #0
 8003624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003626:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <MX_I2C1_Init+0x50>)
 8003628:	2200      	movs	r2, #0
 800362a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <MX_I2C1_Init+0x50>)
 800362e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003632:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003634:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <MX_I2C1_Init+0x50>)
 8003636:	2200      	movs	r2, #0
 8003638:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800363a:	4b09      	ldr	r3, [pc, #36]	; (8003660 <MX_I2C1_Init+0x50>)
 800363c:	2200      	movs	r2, #0
 800363e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003640:	4b07      	ldr	r3, [pc, #28]	; (8003660 <MX_I2C1_Init+0x50>)
 8003642:	2200      	movs	r2, #0
 8003644:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003646:	4b06      	ldr	r3, [pc, #24]	; (8003660 <MX_I2C1_Init+0x50>)
 8003648:	2200      	movs	r2, #0
 800364a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800364c:	4804      	ldr	r0, [pc, #16]	; (8003660 <MX_I2C1_Init+0x50>)
 800364e:	f005 ff3d 	bl	80094cc <HAL_I2C_Init>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003658:	f000 f8f8 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800365c:	bf00      	nop
 800365e:	bd80      	pop	{r7, pc}
 8003660:	200009e0 	.word	0x200009e0
 8003664:	40005400 	.word	0x40005400
 8003668:	000186a0 	.word	0x000186a0

0800366c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	; 0x28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003674:	f107 0314 	add.w	r3, r7, #20
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a21      	ldr	r2, [pc, #132]	; (8003710 <HAL_I2C_MspInit+0xa4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d13c      	bne.n	8003708 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	4b20      	ldr	r3, [pc, #128]	; (8003714 <HAL_I2C_MspInit+0xa8>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	4a1f      	ldr	r2, [pc, #124]	; (8003714 <HAL_I2C_MspInit+0xa8>)
 8003698:	f043 0302 	orr.w	r3, r3, #2
 800369c:	6313      	str	r3, [r2, #48]	; 0x30
 800369e:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_I2C_MspInit+0xa8>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80036aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036b0:	2312      	movs	r3, #18
 80036b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b8:	2303      	movs	r3, #3
 80036ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036bc:	2304      	movs	r3, #4
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c0:	f107 0314 	add.w	r3, r7, #20
 80036c4:	4619      	mov	r1, r3
 80036c6:	4814      	ldr	r0, [pc, #80]	; (8003718 <HAL_I2C_MspInit+0xac>)
 80036c8:	f005 fc46 	bl	8008f58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036cc:	2300      	movs	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	4b10      	ldr	r3, [pc, #64]	; (8003714 <HAL_I2C_MspInit+0xa8>)
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	4a0f      	ldr	r2, [pc, #60]	; (8003714 <HAL_I2C_MspInit+0xa8>)
 80036d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036da:	6413      	str	r3, [r2, #64]	; 0x40
 80036dc:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <HAL_I2C_MspInit+0xa8>)
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80036e8:	2200      	movs	r2, #0
 80036ea:	2100      	movs	r1, #0
 80036ec:	201f      	movs	r0, #31
 80036ee:	f004 ff80 	bl	80085f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80036f2:	201f      	movs	r0, #31
 80036f4:	f004 ff99 	bl	800862a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80036f8:	2200      	movs	r2, #0
 80036fa:	2100      	movs	r1, #0
 80036fc:	2020      	movs	r0, #32
 80036fe:	f004 ff78 	bl	80085f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003702:	2020      	movs	r0, #32
 8003704:	f004 ff91 	bl	800862a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003708:	bf00      	nop
 800370a:	3728      	adds	r7, #40	; 0x28
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40005400 	.word	0x40005400
 8003714:	40023800 	.word	0x40023800
 8003718:	40020400 	.word	0x40020400

0800371c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003720:	f004 fb60 	bl	8007de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003724:	f000 f826 	bl	8003774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003728:	f7ff fe94 	bl	8003454 <MX_GPIO_Init>
  MX_DMA_Init();
 800372c:	f7ff fe44 	bl	80033b8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003730:	f004 f8e8 	bl	8007904 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8003734:	f003 fd42 	bl	80071bc <MX_TIM3_Init>
  MX_ADC1_Init();
 8003738:	f7fd fdbc 	bl	80012b4 <MX_ADC1_Init>
  MX_TIM6_Init();
 800373c:	f003 fdb8 	bl	80072b0 <MX_TIM6_Init>
  MX_TIM2_Init();
 8003740:	f003 fcd8 	bl	80070f4 <MX_TIM2_Init>
  MX_TIM7_Init();
 8003744:	f003 fdea 	bl	800731c <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8003748:	f004 f888 	bl	800785c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800374c:	f004 f8b0 	bl	80078b0 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8003750:	f003 fe6a 	bl	8007428 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003754:	f003 fe8c 	bl	8007470 <MX_TIM11_Init>
  MX_I2C1_Init();
 8003758:	f7ff ff5a 	bl	8003610 <MX_I2C1_Init>
  MX_TIM13_Init();
 800375c:	f003 feaa 	bl	80074b4 <MX_TIM13_Init>
  MX_TIM8_Init();
 8003760:	f003 fe12 	bl	8007388 <MX_TIM8_Init>
  MX_TIM1_Init();
 8003764:	f003 fc44 	bl	8006ff0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	// DMA_init is in front of ADC
	setup();
 8003768:	f001 fe80 	bl	800546c <setup>
	mainrun();
 800376c:	f002 fd10 	bl	8006190 <mainrun>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8003770:	e7fe      	b.n	8003770 <main+0x54>
	...

08003774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b094      	sub	sp, #80	; 0x50
 8003778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800377a:	f107 031c 	add.w	r3, r7, #28
 800377e:	2234      	movs	r2, #52	; 0x34
 8003780:	2100      	movs	r1, #0
 8003782:	4618      	mov	r0, r3
 8003784:	f010 fa76 	bl	8013c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003788:	f107 0308 	add.w	r3, r7, #8
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003798:	2300      	movs	r3, #0
 800379a:	607b      	str	r3, [r7, #4]
 800379c:	4b29      	ldr	r3, [pc, #164]	; (8003844 <SystemClock_Config+0xd0>)
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	4a28      	ldr	r2, [pc, #160]	; (8003844 <SystemClock_Config+0xd0>)
 80037a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a6:	6413      	str	r3, [r2, #64]	; 0x40
 80037a8:	4b26      	ldr	r3, [pc, #152]	; (8003844 <SystemClock_Config+0xd0>)
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037b4:	2300      	movs	r3, #0
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	4b23      	ldr	r3, [pc, #140]	; (8003848 <SystemClock_Config+0xd4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a22      	ldr	r2, [pc, #136]	; (8003848 <SystemClock_Config+0xd4>)
 80037be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	4b20      	ldr	r3, [pc, #128]	; (8003848 <SystemClock_Config+0xd4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037d0:	2301      	movs	r3, #1
 80037d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80037d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80037d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037da:	2302      	movs	r3, #2
 80037dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80037e4:	2304      	movs	r3, #4
 80037e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80037e8:	23a8      	movs	r3, #168	; 0xa8
 80037ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037ec:	2302      	movs	r3, #2
 80037ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80037f0:	2302      	movs	r3, #2
 80037f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80037f4:	2302      	movs	r3, #2
 80037f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037f8:	f107 031c 	add.w	r3, r7, #28
 80037fc:	4618      	mov	r0, r3
 80037fe:	f008 fe1f 	bl	800c440 <HAL_RCC_OscConfig>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003808:	f000 f820 	bl	800384c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800380c:	230f      	movs	r3, #15
 800380e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8003810:	2303      	movs	r3, #3
 8003812:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003814:	2300      	movs	r3, #0
 8003816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003818:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800381c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800381e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003822:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003824:	f107 0308 	add.w	r3, r7, #8
 8003828:	2105      	movs	r1, #5
 800382a:	4618      	mov	r0, r3
 800382c:	f008 fabe 	bl	800bdac <HAL_RCC_ClockConfig>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003836:	f000 f809 	bl	800384c <Error_Handler>
  }
}
 800383a:	bf00      	nop
 800383c:	3750      	adds	r7, #80	; 0x50
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800
 8003848:	40007000 	.word	0x40007000

0800384c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003850:	b672      	cpsid	i
}
 8003852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003854:	e7fe      	b.n	8003854 <Error_Handler+0x8>

08003856 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	4a04      	ldr	r2, [pc, #16]	; (8003894 <_ZN3ros3MsgC1Ev+0x1c>)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	08014388 	.word	0x08014388

08003898 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
      data()
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff ffe8 	bl	8003878 <_ZN3ros3MsgC1Ev>
 80038a8:	4a06      	ldr	r2, [pc, #24]	; (80038c4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3304      	adds	r3, #4
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff ffcf 	bl	8003856 <_ZN3ros4TimeC1Ev>
    {
    }
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	08014370 	.word	0x08014370

080038c8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6859      	ldr	r1, [r3, #4]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	4413      	add	r3, r2
 80038e0:	b2ca      	uxtb	r2, r1
 80038e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	0a19      	lsrs	r1, r3, #8
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	3301      	adds	r3, #1
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	4413      	add	r3, r2
 80038f2:	b2ca      	uxtb	r2, r1
 80038f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	0c19      	lsrs	r1, r3, #16
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3302      	adds	r3, #2
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	4413      	add	r3, r2
 8003904:	b2ca      	uxtb	r2, r1
 8003906:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	0e19      	lsrs	r1, r3, #24
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3303      	adds	r3, #3
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	4413      	add	r3, r2
 8003916:	b2ca      	uxtb	r2, r1
 8003918:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3304      	adds	r3, #4
 800391e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6899      	ldr	r1, [r3, #8]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	4413      	add	r3, r2
 800392a:	b2ca      	uxtb	r2, r1
 800392c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	0a19      	lsrs	r1, r3, #8
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3301      	adds	r3, #1
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	4413      	add	r3, r2
 800393c:	b2ca      	uxtb	r2, r1
 800393e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	0c19      	lsrs	r1, r3, #16
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3302      	adds	r3, #2
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	4413      	add	r3, r2
 800394e:	b2ca      	uxtb	r2, r1
 8003950:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	0e19      	lsrs	r1, r3, #24
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	3303      	adds	r3, #3
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	4413      	add	r3, r2
 8003960:	b2ca      	uxtb	r2, r1
 8003962:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	3304      	adds	r3, #4
 8003968:	60fb      	str	r3, [r7, #12]
      return offset;
 800396a:	68fb      	ldr	r3, [r7, #12]
    }
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	4413      	add	r3, r2
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3301      	adds	r3, #1
 800399c:	6839      	ldr	r1, [r7, #0]
 800399e:	440b      	add	r3, r1
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3302      	adds	r3, #2
 80039b2:	6839      	ldr	r1, [r7, #0]
 80039b4:	440b      	add	r3, r1
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	041b      	lsls	r3, r3, #16
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3303      	adds	r3, #3
 80039c8:	6839      	ldr	r1, [r7, #0]
 80039ca:	440b      	add	r3, r1
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	061b      	lsls	r3, r3, #24
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	3304      	adds	r3, #4
 80039da:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	4413      	add	r3, r2
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	3301      	adds	r3, #1
 80039f2:	6839      	ldr	r1, [r7, #0]
 80039f4:	440b      	add	r3, r1
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3302      	adds	r3, #2
 8003a08:	6839      	ldr	r1, [r7, #0]
 8003a0a:	440b      	add	r3, r1
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	041b      	lsls	r3, r3, #16
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3303      	adds	r3, #3
 8003a1e:	6839      	ldr	r1, [r7, #0]
 8003a20:	440b      	add	r3, r1
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	061b      	lsls	r3, r3, #24
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	60fb      	str	r3, [r7, #12]
     return offset;
 8003a32:	68fb      	ldr	r3, [r7, #12]
    }
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	08013fec 	.word	0x08013fec

08003a5c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	08013ffc 	.word	0x08013ffc

08003a78 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff fef8 	bl	8003878 <_ZN3ros3MsgC1Ev>
 8003a88:	4a0b      	ldr	r2, [pc, #44]	; (8003ab8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	809a      	strh	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a09      	ldr	r2, [pc, #36]	; (8003abc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003a98:	609a      	str	r2, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a07      	ldr	r2, [pc, #28]	; (8003abc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003a9e:	60da      	str	r2, [r3, #12]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a06      	ldr	r2, [pc, #24]	; (8003abc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003aa4:	611a      	str	r2, [r3, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	615a      	str	r2, [r3, #20]
    {
    }
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	08014358 	.word	0x08014358
 8003abc:	08014020 	.word	0x08014020

08003ac0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	8899      	ldrh	r1, [r3, #4]
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	b2ca      	uxtb	r2, r1
 8003ada:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	889b      	ldrh	r3, [r3, #4]
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	b299      	uxth	r1, r3
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	4413      	add	r3, r2
 8003aec:	b2ca      	uxtb	r2, r1
 8003aee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	3302      	adds	r3, #2
 8003af4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fc fb8e 	bl	800021c <strlen>
 8003b00:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	4413      	add	r3, r2
 8003b08:	69b9      	ldr	r1, [r7, #24]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 fce6 	bl	80054dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	3304      	adds	r3, #4
 8003b14:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	18d0      	adds	r0, r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4619      	mov	r1, r3
 8003b24:	f010 f898 	bl	8013c58 <memcpy>
      offset += length_topic_name;
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fc fb71 	bl	800021c <strlen>
 8003b3a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	4413      	add	r3, r2
 8003b42:	6979      	ldr	r1, [r7, #20]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f001 fcc9 	bl	80054dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	18d0      	adds	r0, r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f010 f87b 	bl	8013c58 <memcpy>
      offset += length_message_type;
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	4413      	add	r3, r2
 8003b68:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fc fb54 	bl	800021c <strlen>
 8003b74:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	6939      	ldr	r1, [r7, #16]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 fcac 	bl	80054dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	3304      	adds	r3, #4
 8003b88:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	18d0      	adds	r0, r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4619      	mov	r1, r3
 8003b98:	f010 f85e 	bl	8013c58 <memcpy>
      offset += length_md5sum;
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8003baa:	68f9      	ldr	r1, [r7, #12]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	b2ca      	uxtb	r2, r1
 8003bb4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	0a19      	lsrs	r1, r3, #8
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	b2ca      	uxtb	r2, r1
 8003bc4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	0c19      	lsrs	r1, r3, #16
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	3302      	adds	r3, #2
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	b2ca      	uxtb	r2, r1
 8003bd4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	0e19      	lsrs	r1, r3, #24
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	3303      	adds	r3, #3
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	4413      	add	r3, r2
 8003be2:	b2ca      	uxtb	r2, r1
 8003be4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	3304      	adds	r3, #4
 8003bea:	61fb      	str	r3, [r7, #28]
      return offset;
 8003bec:	69fb      	ldr	r3, [r7, #28]
    }
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b08a      	sub	sp, #40	; 0x28
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	4413      	add	r3, r2
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	889b      	ldrh	r3, [r3, #4]
 8003c16:	b21a      	sxth	r2, r3
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	6839      	ldr	r1, [r7, #0]
 8003c1e:	440b      	add	r3, r1
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	b21b      	sxth	r3, r3
 8003c26:	4313      	orrs	r3, r2
 8003c28:	b21b      	sxth	r3, r3
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	3302      	adds	r3, #2
 8003c34:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	441a      	add	r2, r3
 8003c3c:	f107 0314 	add.w	r3, r7, #20
 8003c40:	4611      	mov	r1, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f001 fc68 	bl	8005518 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4413      	add	r3, r2
 8003c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d20c      	bcs.n	8003c78 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	441a      	add	r2, r3
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	3b01      	subs	r3, #1
 8003c68:	6839      	ldr	r1, [r7, #0]
 8003c6a:	440b      	add	r3, r1
 8003c6c:	7812      	ldrb	r2, [r2, #0]
 8003c6e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	3301      	adds	r3, #1
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
 8003c76:	e7ec      	b.n	8003c52 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	4413      	add	r3, r2
 8003c84:	2200      	movs	r2, #0
 8003c86:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	441a      	add	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	4413      	add	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	441a      	add	r2, r3
 8003ca2:	f107 0310 	add.w	r3, r7, #16
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f001 fc35 	bl	8005518 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	623b      	str	r3, [r7, #32]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	6a3a      	ldr	r2, [r7, #32]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d20c      	bcs.n	8003cde <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	441a      	add	r2, r3
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	6839      	ldr	r1, [r7, #0]
 8003cd0:	440b      	add	r3, r1
 8003cd2:	7812      	ldrb	r2, [r2, #0]
 8003cd4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	623b      	str	r3, [r7, #32]
 8003cdc:	e7ec      	b.n	8003cb8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	4413      	add	r3, r2
 8003cea:	2200      	movs	r2, #0
 8003cec:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	441a      	add	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4413      	add	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	441a      	add	r2, r3
 8003d08:	f107 030c 	add.w	r3, r7, #12
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f001 fc02 	bl	8005518 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	3304      	adds	r3, #4
 8003d18:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d20c      	bcs.n	8003d44 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	441a      	add	r2, r3
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	6839      	ldr	r1, [r7, #0]
 8003d36:	440b      	add	r3, r1
 8003d38:	7812      	ldrb	r2, [r2, #0]
 8003d3a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	61fb      	str	r3, [r7, #28]
 8003d42:	e7ec      	b.n	8003d1e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4413      	add	r3, r2
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	4413      	add	r3, r2
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	441a      	add	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4413      	add	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	6839      	ldr	r1, [r7, #0]
 8003d72:	440a      	add	r2, r1
 8003d74:	7812      	ldrb	r2, [r2, #0]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	6839      	ldr	r1, [r7, #0]
 8003d82:	440b      	add	r3, r1
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	3302      	adds	r3, #2
 8003d92:	6839      	ldr	r1, [r7, #0]
 8003d94:	440b      	add	r3, r1
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	041b      	lsls	r3, r3, #16
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	3303      	adds	r3, #3
 8003da4:	6839      	ldr	r1, [r7, #0]
 8003da6:	440b      	add	r3, r1
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	061b      	lsls	r3, r3, #24
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	3304      	adds	r3, #4
 8003dba:	61bb      	str	r3, [r7, #24]
     return offset;
 8003dbc:	69bb      	ldr	r3, [r7, #24]
    }
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3728      	adds	r7, #40	; 0x28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	08014024 	.word	0x08014024

08003de4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8003dee:	4618      	mov	r0, r3
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	08014040 	.word	0x08014040

08003e00 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fd34 	bl	8003878 <_ZN3ros3MsgC1Ev>
 8003e10:	4a06      	ldr	r2, [pc, #24]	; (8003e2c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	711a      	strb	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8003e20:	609a      	str	r2, [r3, #8]
    {
    }
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	08014340 	.word	0x08014340
 8003e30:	08014020 	.word	0x08014020

08003e34 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	4413      	add	r3, r2
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	7912      	ldrb	r2, [r2, #4]
 8003e4c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3301      	adds	r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fc f9df 	bl	800021c <strlen>
 8003e5e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	4413      	add	r3, r2
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f001 fb37 	bl	80054dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3304      	adds	r3, #4
 8003e72:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	18d0      	adds	r0, r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	4619      	mov	r1, r3
 8003e82:	f00f fee9 	bl	8013c58 <memcpy>
      offset += length_msg;
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
      return offset;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
    }
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	4413      	add	r3, r2
 8003eac:	781a      	ldrb	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	441a      	add	r2, r3
 8003ebe:	f107 030c 	add.w	r3, r7, #12
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f001 fb27 	bl	8005518 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4413      	add	r3, r2
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d20c      	bcs.n	8003efa <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	441a      	add	r2, r3
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	6839      	ldr	r1, [r7, #0]
 8003eec:	440b      	add	r3, r1
 8003eee:	7812      	ldrb	r2, [r2, #0]
 8003ef0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	e7ec      	b.n	8003ed4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	3b01      	subs	r3, #1
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	4413      	add	r3, r2
 8003f06:	2200      	movs	r2, #0
 8003f08:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	441a      	add	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
     return offset;
 8003f1e:	693b      	ldr	r3, [r7, #16]
    }
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8003f32:	4618      	mov	r0, r3
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	08014064 	.word	0x08014064

08003f44 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8003f4e:	4618      	mov	r0, r3
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	08014078 	.word	0x08014078

08003f60 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff fc84 	bl	8003878 <_ZN3ros3MsgC1Ev>
 8003f70:	4a0c      	ldr	r2, [pc, #48]	; (8003fa4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	605a      	str	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	60da      	str	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	611a      	str	r2, [r3, #16]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	619a      	str	r2, [r3, #24]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	61da      	str	r2, [r3, #28]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	08014328 	.word	0x08014328

08003fa8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6859      	ldr	r1, [r3, #4]
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	b2ca      	uxtb	r2, r1
 8003fc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	0a19      	lsrs	r1, r3, #8
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	3301      	adds	r3, #1
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	b2ca      	uxtb	r2, r1
 8003fd4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	0c19      	lsrs	r1, r3, #16
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	3302      	adds	r3, #2
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	b2ca      	uxtb	r2, r1
 8003fe6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	0e19      	lsrs	r1, r3, #24
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	3303      	adds	r3, #3
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	b2ca      	uxtb	r2, r1
 8003ff8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8004000:	2300      	movs	r3, #0
 8004002:	623b      	str	r3, [r7, #32]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	6a3a      	ldr	r2, [r7, #32]
 800400a:	429a      	cmp	r2, r3
 800400c:	d22b      	bcs.n	8004066 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800401c:	6939      	ldr	r1, [r7, #16]
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	4413      	add	r3, r2
 8004024:	b2ca      	uxtb	r2, r1
 8004026:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	0a19      	lsrs	r1, r3, #8
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	3301      	adds	r3, #1
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	4413      	add	r3, r2
 8004034:	b2ca      	uxtb	r2, r1
 8004036:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	0c19      	lsrs	r1, r3, #16
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	3302      	adds	r3, #2
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	4413      	add	r3, r2
 8004044:	b2ca      	uxtb	r2, r1
 8004046:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	0e19      	lsrs	r1, r3, #24
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	3303      	adds	r3, #3
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	4413      	add	r3, r2
 8004054:	b2ca      	uxtb	r2, r1
 8004056:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	3304      	adds	r3, #4
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	3301      	adds	r3, #1
 8004062:	623b      	str	r3, [r7, #32]
 8004064:	e7ce      	b.n	8004004 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6919      	ldr	r1, [r3, #16]
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	4413      	add	r3, r2
 8004070:	b2ca      	uxtb	r2, r1
 8004072:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	0a19      	lsrs	r1, r3, #8
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	3301      	adds	r3, #1
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	4413      	add	r3, r2
 8004082:	b2ca      	uxtb	r2, r1
 8004084:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	0c19      	lsrs	r1, r3, #16
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	3302      	adds	r3, #2
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	4413      	add	r3, r2
 8004094:	b2ca      	uxtb	r2, r1
 8004096:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	0e19      	lsrs	r1, r3, #24
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	3303      	adds	r3, #3
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	4413      	add	r3, r2
 80040a6:	b2ca      	uxtb	r2, r1
 80040a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	3304      	adds	r3, #4
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80040b0:	2300      	movs	r3, #0
 80040b2:	61fb      	str	r3, [r7, #28]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d22b      	bcs.n	8004116 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80040cc:	68f9      	ldr	r1, [r7, #12]
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	4413      	add	r3, r2
 80040d4:	b2ca      	uxtb	r2, r1
 80040d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	0a19      	lsrs	r1, r3, #8
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	3301      	adds	r3, #1
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	4413      	add	r3, r2
 80040e4:	b2ca      	uxtb	r2, r1
 80040e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	0c19      	lsrs	r1, r3, #16
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	3302      	adds	r3, #2
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	4413      	add	r3, r2
 80040f4:	b2ca      	uxtb	r2, r1
 80040f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	0e19      	lsrs	r1, r3, #24
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	3303      	adds	r3, #3
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	4413      	add	r3, r2
 8004104:	b2ca      	uxtb	r2, r1
 8004106:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	3304      	adds	r3, #4
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3301      	adds	r3, #1
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	e7ce      	b.n	80040b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69d9      	ldr	r1, [r3, #28]
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	4413      	add	r3, r2
 8004120:	b2ca      	uxtb	r2, r1
 8004122:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	0a19      	lsrs	r1, r3, #8
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	3301      	adds	r3, #1
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	4413      	add	r3, r2
 8004132:	b2ca      	uxtb	r2, r1
 8004134:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	0c19      	lsrs	r1, r3, #16
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	3302      	adds	r3, #2
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	4413      	add	r3, r2
 8004144:	b2ca      	uxtb	r2, r1
 8004146:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	0e19      	lsrs	r1, r3, #24
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	3303      	adds	r3, #3
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	4413      	add	r3, r2
 8004156:	b2ca      	uxtb	r2, r1
 8004158:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	3304      	adds	r3, #4
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8004160:	2300      	movs	r3, #0
 8004162:	61bb      	str	r3, [r7, #24]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	429a      	cmp	r2, r3
 800416c:	d228      	bcs.n	80041c0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc f84e 	bl	800021c <strlen>
 8004180:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	4413      	add	r3, r2
 8004188:	6979      	ldr	r1, [r7, #20]
 800418a:	4618      	mov	r0, r3
 800418c:	f001 f9a6 	bl	80054dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	3304      	adds	r3, #4
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	18d0      	adds	r0, r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4619      	mov	r1, r3
 80041ac:	f00f fd54 	bl	8013c58 <memcpy>
      offset += length_stringsi;
 80041b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	4413      	add	r3, r2
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	3301      	adds	r3, #1
 80041bc:	61bb      	str	r3, [r7, #24]
 80041be:	e7d1      	b.n	8004164 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80041c2:	4618      	mov	r0, r3
 80041c4:	3728      	adds	r7, #40	; 0x28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b08e      	sub	sp, #56	; 0x38
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80041d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	4413      	add	r3, r2
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80041e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e4:	3301      	adds	r3, #1
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	4413      	add	r3, r2
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	6a3a      	ldr	r2, [r7, #32]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80041f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f6:	3302      	adds	r3, #2
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	4413      	add	r3, r2
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	041b      	lsls	r3, r3, #16
 8004200:	6a3a      	ldr	r2, [r7, #32]
 8004202:	4313      	orrs	r3, r2
 8004204:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004208:	3303      	adds	r3, #3
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	4413      	add	r3, r2
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	061b      	lsls	r3, r3, #24
 8004212:	6a3a      	ldr	r2, [r7, #32]
 8004214:	4313      	orrs	r3, r2
 8004216:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8004218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800421a:	3304      	adds	r3, #4
 800421c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	6a3a      	ldr	r2, [r7, #32]
 8004224:	429a      	cmp	r2, r3
 8004226:	d90a      	bls.n	800423e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4619      	mov	r1, r3
 8004232:	4610      	mov	r0, r2
 8004234:	f00f fd26 	bl	8013c84 <realloc>
 8004238:	4602      	mov	r2, r0
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a3a      	ldr	r2, [r7, #32]
 8004242:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8004244:	2300      	movs	r3, #0
 8004246:	633b      	str	r3, [r7, #48]	; 0x30
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800424e:	429a      	cmp	r2, r3
 8004250:	d236      	bcs.n	80042c0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800425a:	6839      	ldr	r1, [r7, #0]
 800425c:	440a      	add	r2, r1
 800425e:	7812      	ldrb	r2, [r2, #0]
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004268:	3301      	adds	r3, #1
 800426a:	6839      	ldr	r1, [r7, #0]
 800426c:	440b      	add	r3, r1
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	4313      	orrs	r3, r2
 8004274:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427a:	3302      	adds	r3, #2
 800427c:	6839      	ldr	r1, [r7, #0]
 800427e:	440b      	add	r3, r1
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	041b      	lsls	r3, r3, #16
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428c:	3303      	adds	r3, #3
 800428e:	6839      	ldr	r1, [r7, #0]
 8004290:	440b      	add	r3, r1
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	061b      	lsls	r3, r3, #24
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80042a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a2:	3304      	adds	r3, #4
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	3208      	adds	r2, #8
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	3301      	adds	r3, #1
 80042bc:	633b      	str	r3, [r7, #48]	; 0x30
 80042be:	e7c3      	b.n	8004248 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80042c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	4413      	add	r3, r2
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80042ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042cc:	3301      	adds	r3, #1
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	4413      	add	r3, r2
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	021b      	lsls	r3, r3, #8
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	4313      	orrs	r3, r2
 80042da:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80042dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042de:	3302      	adds	r3, #2
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	4413      	add	r3, r2
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	041b      	lsls	r3, r3, #16
 80042e8:	69fa      	ldr	r2, [r7, #28]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80042ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f0:	3303      	adds	r3, #3
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	4413      	add	r3, r2
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	061b      	lsls	r3, r3, #24
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8004300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004302:	3304      	adds	r3, #4
 8004304:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	429a      	cmp	r2, r3
 800430e:	d90a      	bls.n	8004326 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699a      	ldr	r2, [r3, #24]
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f00f fcb2 	bl	8013c84 <realloc>
 8004320:	4602      	mov	r2, r0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800432c:	2300      	movs	r3, #0
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004336:	429a      	cmp	r2, r3
 8004338:	d236      	bcs.n	80043a8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004342:	6839      	ldr	r1, [r7, #0]
 8004344:	440a      	add	r2, r1
 8004346:	7812      	ldrb	r2, [r2, #0]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004350:	3301      	adds	r3, #1
 8004352:	6839      	ldr	r1, [r7, #0]
 8004354:	440b      	add	r3, r1
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004362:	3302      	adds	r3, #2
 8004364:	6839      	ldr	r1, [r7, #0]
 8004366:	440b      	add	r3, r1
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004374:	3303      	adds	r3, #3
 8004376:	6839      	ldr	r1, [r7, #0]
 8004378:	440b      	add	r3, r1
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	061b      	lsls	r3, r3, #24
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8004388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438a:	3304      	adds	r3, #4
 800438c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699a      	ldr	r2, [r3, #24]
 8004392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	3214      	adds	r2, #20
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80043a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a2:	3301      	adds	r3, #1
 80043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043a6:	e7c3      	b.n	8004330 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80043a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	4413      	add	r3, r2
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80043b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b4:	3301      	adds	r3, #1
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	4413      	add	r3, r2
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80043c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c6:	3302      	adds	r3, #2
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	4413      	add	r3, r2
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	041b      	lsls	r3, r3, #16
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80043d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d8:	3303      	adds	r3, #3
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	4413      	add	r3, r2
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	3304      	adds	r3, #4
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d90a      	bls.n	800440e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f00f fc3e 	bl	8013c84 <realloc>
 8004408:	4602      	mov	r2, r0
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8004414:	2300      	movs	r3, #0
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800441e:	429a      	cmp	r2, r3
 8004420:	d23f      	bcs.n	80044a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8004422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	441a      	add	r2, r3
 8004428:	f107 030c 	add.w	r3, r7, #12
 800442c:	4611      	mov	r1, r2
 800442e:	4618      	mov	r0, r3
 8004430:	f001 f872 	bl	8005518 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004436:	3304      	adds	r3, #4
 8004438:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800443a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
 800443e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4413      	add	r3, r2
 8004444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004446:	429a      	cmp	r2, r3
 8004448:	d20c      	bcs.n	8004464 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	441a      	add	r2, r3
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	3b01      	subs	r3, #1
 8004454:	6839      	ldr	r1, [r7, #0]
 8004456:	440b      	add	r3, r1
 8004458:	7812      	ldrb	r2, [r2, #0]
 800445a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	3301      	adds	r3, #1
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
 8004462:	e7ec      	b.n	800443e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8004464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4413      	add	r3, r2
 800446a:	3b01      	subs	r3, #1
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	4413      	add	r3, r2
 8004470:	2200      	movs	r2, #0
 8004472:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8004474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004476:	3b01      	subs	r3, #1
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	441a      	add	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8004480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4413      	add	r3, r2
 8004486:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	3220      	adds	r2, #32
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449c:	3301      	adds	r3, #1
 800449e:	62bb      	str	r3, [r7, #40]	; 0x28
 80044a0:	e7ba      	b.n	8004418 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80044a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80044a4:	4618      	mov	r0, r3
 80044a6:	3738      	adds	r7, #56	; 0x38
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80044b6:	4618      	mov	r0, r3
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	0801424c 	.word	0x0801424c

080044c8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	4b03      	ldr	r3, [pc, #12]	; (80044e0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80044d2:	4618      	mov	r0, r3
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	0801409c 	.word	0x0801409c

080044e4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	605a      	str	r2, [r3, #4]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	611a      	str	r2, [r3, #16]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4618      	mov	r0, r3
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8004512:	b580      	push	{r7, lr}
 8004514:	b082      	sub	sp, #8
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68d8      	ldr	r0, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6891      	ldr	r1, [r2, #8]
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	4798      	blx	r3
 8004530:	4603      	mov	r3, r0
  };
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
  }
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <_ZN13STM32Hardware10getRdmaIndEv>:
	UART_HandleTypeDef *huart;

	const static uint16_t rbuflen = 512;
	uint8_t rbuf[rbuflen];
	uint32_t rind;
	inline uint32_t getRdmaInd(void) {
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
		return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004568:	f3c3 0308 	ubfx	r3, r3, #0, #9
	}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <_ZN13STM32HardwareC1Ev>:
	const static uint16_t tbuflen = 512;
	uint8_t tbuf[tbuflen];
	uint32_t twind, tfind;

public:
	STM32Hardware() :
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
			huart(&huart2), rind(0), twind(0), tfind(0) {
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a0a      	ldr	r2, [pc, #40]	; (80045ac <_ZN13STM32HardwareC1Ev+0x34>)
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	}
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	2000187c 	.word	0x2000187c

080045b0 <_ZN13STM32Hardware4initEv>:

	STM32Hardware(UART_HandleTypeDef *huart_) :
			huart(huart_), rind(0), twind(0), tfind(0) {
	}

	void init() {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
		reset_rbuf();
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f804 	bl	80045c6 <_ZN13STM32Hardware10reset_rbufEv>
	}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <_ZN13STM32Hardware10reset_rbufEv>:

	void reset_rbuf(void) {
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
		HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3304      	adds	r3, #4
 80045d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045da:	4619      	mov	r1, r3
 80045dc:	f009 fc24 	bl	800de28 <HAL_UART_Receive_DMA>
	}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <_ZN13STM32Hardware4readEv>:

	int read() {
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
		int c = -1;
 80045f0:	f04f 33ff 	mov.w	r3, #4294967295
 80045f4:	60fb      	str	r3, [r7, #12]
		if (rind != getRdmaInd()) {
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff ffa8 	bl	8004552 <_ZN13STM32Hardware10getRdmaIndEv>
 8004602:	4603      	mov	r3, r0
 8004604:	429c      	cmp	r4, r3
 8004606:	bf14      	ite	ne
 8004608:	2301      	movne	r3, #1
 800460a:	2300      	moveq	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d012      	beq.n	8004638 <_ZN13STM32Hardware4readEv+0x50>
			c = rbuf[rind++];
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004618:	1c59      	adds	r1, r3, #1
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	4413      	add	r3, r2
 8004624:	791b      	ldrb	r3, [r3, #4]
 8004626:	60fb      	str	r3, [r7, #12]
			rind &= rbuflen - 1;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800462e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		}
		return c;
 8004638:	68fb      	ldr	r3, [r7, #12]
	}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	bd90      	pop	{r4, r7, pc}
	...

08004644 <_ZN13STM32Hardware5flushEv>:

	void flush(void) {
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
		static bool mutex = false;

		if ((huart->gState == HAL_UART_STATE_READY) && !mutex) {
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b20      	cmp	r3, #32
 8004658:	d108      	bne.n	800466c <_ZN13STM32Hardware5flushEv+0x28>
 800465a:	4b28      	ldr	r3, [pc, #160]	; (80046fc <_ZN13STM32Hardware5flushEv+0xb8>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	f083 0301 	eor.w	r3, r3, #1
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <_ZN13STM32Hardware5flushEv+0x28>
 8004668:	2301      	movs	r3, #1
 800466a:	e000      	b.n	800466e <_ZN13STM32Hardware5flushEv+0x2a>
 800466c:	2300      	movs	r3, #0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d03f      	beq.n	80046f2 <_ZN13STM32Hardware5flushEv+0xae>
			mutex = true;
 8004672:	4b22      	ldr	r3, [pc, #136]	; (80046fc <_ZN13STM32Hardware5flushEv+0xb8>)
 8004674:	2201      	movs	r2, #1
 8004676:	701a      	strb	r2, [r3, #0]

			if (twind != tfind) {
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004684:	429a      	cmp	r2, r3
 8004686:	d031      	beq.n	80046ec <_ZN13STM32Hardware5flushEv+0xa8>
				uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004694:	429a      	cmp	r2, r3
 8004696:	d20a      	bcs.n	80046ae <_ZN13STM32Hardware5flushEv+0x6a>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800469e:	b29a      	uxth	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	e006      	b.n	80046bc <_ZN13STM32Hardware5flushEv+0x78>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	81fb      	strh	r3, [r7, #14]
				HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80046c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	4413      	add	r3, r2
 80046d0:	89fa      	ldrh	r2, [r7, #14]
 80046d2:	4619      	mov	r1, r3
 80046d4:	f009 fb2a 	bl	800dd2c <HAL_UART_Transmit_DMA>
				tfind = (tfind + len) & (tbuflen - 1);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80046de:	89fb      	ldrh	r3, [r7, #14]
 80046e0:	4413      	add	r3, r2
 80046e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			}
			mutex = false;
 80046ec:	4b03      	ldr	r3, [pc, #12]	; (80046fc <_ZN13STM32Hardware5flushEv+0xb8>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	701a      	strb	r2, [r3, #0]
		}
	}
 80046f2:	bf00      	nop
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20000a34 	.word	0x20000a34

08004700 <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t *data, int length) {
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
		int n = length;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	617b      	str	r3, [r7, #20]
		n = n <= tbuflen ? n : tbuflen;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004716:	bfa8      	it	ge
 8004718:	f44f 7300 	movge.w	r3, #512	; 0x200
 800471c:	617b      	str	r3, [r7, #20]

		int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004724:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	4293      	cmp	r3, r2
 800472c:	bf28      	it	cs
 800472e:	4613      	movcs	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
		memcpy(&(tbuf[twind]), data, n_tail);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004738:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	4618      	mov	r0, r3
 8004746:	f00f fa87 	bl	8013c58 <memcpy>
		twind = (twind + n) & (tbuflen - 1);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	4413      	add	r3, r2
 8004754:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

		if (n != n_tail) {
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	429a      	cmp	r2, r3
 8004764:	d00b      	beq.n	800477e <_ZN13STM32Hardware5writeEPhi+0x7e>
			memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	18d1      	adds	r1, r2, r3
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	461a      	mov	r2, r3
 800477a:	f00f fa6d 	bl	8013c58 <memcpy>
		}

		flush();
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f7ff ff60 	bl	8004644 <_ZN13STM32Hardware5flushEv>
	}
 8004784:	bf00      	nop
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <_ZN13STM32Hardware4timeEv>:

	unsigned long time() {
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
		return HAL_GetTick();;
 8004794:	f003 fb8c 	bl	8007eb0 <HAL_GetTick>
 8004798:	4603      	mov	r3, r0
	}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff f862 	bl	8003878 <_ZN3ros3MsgC1Ev>
 80047b4:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a07      	ldr	r2, [pc, #28]	; (80047dc <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 80047be:	605a      	str	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	60da      	str	r2, [r3, #12]
    {
    }
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	080142e4 	.word	0x080142e4
 80047dc:	08014020 	.word	0x08014020

080047e0 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fb fd12 	bl	800021c <strlen>
 80047f8:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	4413      	add	r3, r2
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fe6a 	bl	80054dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3304      	adds	r3, #4
 800480c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	18d0      	adds	r0, r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	4619      	mov	r1, r3
 800481c:	f00f fa1c 	bl	8013c58 <memcpy>
      offset += length_label;
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4413      	add	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6899      	ldr	r1, [r3, #8]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	4413      	add	r3, r2
 8004832:	b2ca      	uxtb	r2, r1
 8004834:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	0a19      	lsrs	r1, r3, #8
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3301      	adds	r3, #1
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	4413      	add	r3, r2
 8004844:	b2ca      	uxtb	r2, r1
 8004846:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	0c19      	lsrs	r1, r3, #16
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3302      	adds	r3, #2
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	4413      	add	r3, r2
 8004856:	b2ca      	uxtb	r2, r1
 8004858:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	0e19      	lsrs	r1, r3, #24
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3303      	adds	r3, #3
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	4413      	add	r3, r2
 8004868:	b2ca      	uxtb	r2, r1
 800486a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3304      	adds	r3, #4
 8004870:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68d9      	ldr	r1, [r3, #12]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	4413      	add	r3, r2
 800487c:	b2ca      	uxtb	r2, r1
 800487e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	0a19      	lsrs	r1, r3, #8
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3301      	adds	r3, #1
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	4413      	add	r3, r2
 800488e:	b2ca      	uxtb	r2, r1
 8004890:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	0c19      	lsrs	r1, r3, #16
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3302      	adds	r3, #2
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	4413      	add	r3, r2
 80048a0:	b2ca      	uxtb	r2, r1
 80048a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	0e19      	lsrs	r1, r3, #24
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3303      	adds	r3, #3
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	4413      	add	r3, r2
 80048b2:	b2ca      	uxtb	r2, r1
 80048b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3304      	adds	r3, #4
 80048ba:	60fb      	str	r3, [r7, #12]
      return offset;
 80048bc:	68fb      	ldr	r3, [r7, #12]
    }
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b086      	sub	sp, #24
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	441a      	add	r2, r3
 80048da:	f107 030c 	add.w	r3, r7, #12
 80048de:	4611      	mov	r1, r2
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fe19 	bl	8005518 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	3304      	adds	r3, #4
 80048ea:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4413      	add	r3, r2
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d20c      	bcs.n	8004916 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	441a      	add	r2, r3
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	3b01      	subs	r3, #1
 8004906:	6839      	ldr	r1, [r7, #0]
 8004908:	440b      	add	r3, r1
 800490a:	7812      	ldrb	r2, [r2, #0]
 800490c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	3301      	adds	r3, #1
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	e7ec      	b.n	80048f0 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	3b01      	subs	r3, #1
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	4413      	add	r3, r2
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	3b01      	subs	r3, #1
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	441a      	add	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	4413      	add	r3, r2
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	3301      	adds	r3, #1
 8004950:	6839      	ldr	r1, [r7, #0]
 8004952:	440b      	add	r3, r1
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	3302      	adds	r3, #2
 8004966:	6839      	ldr	r1, [r7, #0]
 8004968:	440b      	add	r3, r1
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	041b      	lsls	r3, r3, #16
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	3303      	adds	r3, #3
 800497c:	6839      	ldr	r1, [r7, #0]
 800497e:	440b      	add	r3, r1
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	061b      	lsls	r3, r3, #24
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	3304      	adds	r3, #4
 800498e:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	4413      	add	r3, r2
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	3301      	adds	r3, #1
 80049a6:	6839      	ldr	r1, [r7, #0]
 80049a8:	440b      	add	r3, r1
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	021b      	lsls	r3, r3, #8
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	3302      	adds	r3, #2
 80049bc:	6839      	ldr	r1, [r7, #0]
 80049be:	440b      	add	r3, r1
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	041b      	lsls	r3, r3, #16
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	3303      	adds	r3, #3
 80049d2:	6839      	ldr	r1, [r7, #0]
 80049d4:	440b      	add	r3, r1
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	061b      	lsls	r3, r3, #24
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	3304      	adds	r3, #4
 80049e4:	613b      	str	r3, [r7, #16]
     return offset;
 80049e6:	693b      	ldr	r3, [r7, #16]
    }
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	4b03      	ldr	r3, [pc, #12]	; (8004a08 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	080140c0 	.word	0x080140c0

08004a0c <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	080140e0 	.word	0x080140e0

08004a28 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fe ff20 	bl	8003878 <_ZN3ros3MsgC1Ev>
 8004a38:	4a0a      	ldr	r2, [pc, #40]	; (8004a64 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	605a      	str	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3308      	adds	r3, #8
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff feab 	bl	80047a4 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	619a      	str	r2, [r3, #24]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	61da      	str	r2, [r3, #28]
    {
    }
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	080142cc 	.word	0x080142cc

08004a68 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6859      	ldr	r1, [r3, #4]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	4413      	add	r3, r2
 8004a80:	b2ca      	uxtb	r2, r1
 8004a82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	0a19      	lsrs	r1, r3, #8
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	4413      	add	r3, r2
 8004a92:	b2ca      	uxtb	r2, r1
 8004a94:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	0c19      	lsrs	r1, r3, #16
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3302      	adds	r3, #2
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	b2ca      	uxtb	r2, r1
 8004aa6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	0e19      	lsrs	r1, r3, #24
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3303      	adds	r3, #3
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	b2ca      	uxtb	r2, r1
 8004ab8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3304      	adds	r3, #4
 8004abe:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60bb      	str	r3, [r7, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d218      	bcs.n	8004b00 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	18d0      	adds	r0, r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699a      	ldr	r2, [r3, #24]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	4413      	add	r3, r2
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	6839      	ldr	r1, [r7, #0]
 8004aea:	440a      	add	r2, r1
 8004aec:	4611      	mov	r1, r2
 8004aee:	4798      	blx	r3
 8004af0:	4602      	mov	r2, r0
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4413      	add	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	3301      	adds	r3, #1
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	e7e1      	b.n	8004ac4 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69d9      	ldr	r1, [r3, #28]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	4413      	add	r3, r2
 8004b0a:	b2ca      	uxtb	r2, r1
 8004b0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	0a19      	lsrs	r1, r3, #8
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3301      	adds	r3, #1
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	b2ca      	uxtb	r2, r1
 8004b1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	0c19      	lsrs	r1, r3, #16
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3302      	adds	r3, #2
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	b2ca      	uxtb	r2, r1
 8004b30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	0e19      	lsrs	r1, r3, #24
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3303      	adds	r3, #3
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	4413      	add	r3, r2
 8004b40:	b2ca      	uxtb	r2, r1
 8004b42:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3304      	adds	r3, #4
 8004b48:	60fb      	str	r3, [r7, #12]
      return offset;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
    }
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	4413      	add	r3, r2
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	4413      	add	r3, r2
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	3302      	adds	r3, #2
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	4413      	add	r3, r2
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	041b      	lsls	r3, r3, #16
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	3303      	adds	r3, #3
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	4413      	add	r3, r2
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	061b      	lsls	r3, r3, #24
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d90a      	bls.n	8004bc8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699a      	ldr	r2, [r3, #24]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	f00f f861 	bl	8013c84 <realloc>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8004bce:	2300      	movs	r3, #0
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d21b      	bcs.n	8004c14 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f103 0008 	add.w	r0, r3, #8
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	4413      	add	r3, r2
 8004be8:	4619      	mov	r1, r3
 8004bea:	f7ff fe6c 	bl	80048c6 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	18d0      	adds	r0, r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3308      	adds	r3, #8
 8004c04:	2210      	movs	r2, #16
 8004c06:	4619      	mov	r1, r3
 8004c08:	f00f f826 	bl	8013c58 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	e7de      	b.n	8004bd2 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	4413      	add	r3, r2
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69da      	ldr	r2, [r3, #28]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	6839      	ldr	r1, [r7, #0]
 8004c2c:	440b      	add	r3, r1
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69da      	ldr	r2, [r3, #28]
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	3302      	adds	r3, #2
 8004c40:	6839      	ldr	r1, [r7, #0]
 8004c42:	440b      	add	r3, r1
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	041b      	lsls	r3, r3, #16
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69da      	ldr	r2, [r3, #28]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	3303      	adds	r3, #3
 8004c56:	6839      	ldr	r1, [r7, #0]
 8004c58:	440b      	add	r3, r1
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	061b      	lsls	r3, r3, #24
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	3304      	adds	r3, #4
 8004c68:	617b      	str	r3, [r7, #20]
     return offset;
 8004c6a:	697b      	ldr	r3, [r7, #20]
    }
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	4b03      	ldr	r3, [pc, #12]	; (8004c8c <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8004c7e:	4618      	mov	r0, r3
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	08014104 	.word	0x08014104

08004c90 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	4b03      	ldr	r3, [pc, #12]	; (8004ca8 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	08014120 	.word	0x08014120

08004cac <_ZN8std_msgs15Int16MultiArrayC1Ev>:
      uint32_t data_length;
      typedef int16_t _data_type;
      _data_type st_data;
      _data_type * data;

    Int16MultiArray():
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe fdde 	bl	8003878 <_ZN3ros3MsgC1Ev>
 8004cbc:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <_ZN8std_msgs15Int16MultiArrayC1Ev+0x38>)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff feae 	bl	8004a28 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	625a      	str	r2, [r3, #36]	; 0x24
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	080142b4 	.word	0x080142b4

08004ce8 <_ZNK8std_msgs15Int16MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	1d18      	adds	r0, r3, #4
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	4413      	add	r3, r2
 8004d00:	4619      	mov	r1, r3
 8004d02:	f7ff feb1 	bl	8004a68 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8004d06:	4602      	mov	r2, r0
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	4413      	add	r3, r2
 8004d18:	b2ca      	uxtb	r2, r1
 8004d1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	0a19      	lsrs	r1, r3, #8
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	3301      	adds	r3, #1
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	4413      	add	r3, r2
 8004d2a:	b2ca      	uxtb	r2, r1
 8004d2c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	0c19      	lsrs	r1, r3, #16
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	3302      	adds	r3, #2
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	b2ca      	uxtb	r2, r1
 8004d3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	0e19      	lsrs	r1, r3, #24
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	3303      	adds	r3, #3
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	b2ca      	uxtb	r2, r1
 8004d50:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	3304      	adds	r3, #4
 8004d56:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8004d58:	2300      	movs	r3, #0
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d21d      	bcs.n	8004da2 <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0xba>
      union {
        int16_t real;
        uint16_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	4413      	add	r3, r2
 8004d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d74:	81bb      	strh	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8004d76:	89b9      	ldrh	r1, [r7, #12]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	b2ca      	uxtb	r2, r1
 8004d80:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8004d82:	89bb      	ldrh	r3, [r7, #12]
 8004d84:	0a1b      	lsrs	r3, r3, #8
 8004d86:	b299      	uxth	r1, r3
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	4413      	add	r3, r2
 8004d90:	b2ca      	uxtb	r2, r1
 8004d92:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	3302      	adds	r3, #2
 8004d98:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	e7dc      	b.n	8004d5c <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0x74>
      }
      return offset;
 8004da2:	697b      	ldr	r3, [r7, #20]
    }
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <_ZN8std_msgs15Int16MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	1d18      	adds	r0, r3, #4
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	f7ff fec5 	bl	8004b54 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	4413      	add	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	3301      	adds	r3, #1
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	4413      	add	r3, r2
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	3302      	adds	r3, #2
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	4413      	add	r3, r2
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	041b      	lsls	r3, r3, #16
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	3303      	adds	r3, #3
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	4413      	add	r3, r2
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	061b      	lsls	r3, r3, #24
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	3304      	adds	r3, #4
 8004e16:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d90a      	bls.n	8004e38 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x8c>
        this->data = (int16_t*)realloc(this->data, data_lengthT * sizeof(int16_t));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	f00e ff29 	bl	8013c84 <realloc>
 8004e32:	4602      	mov	r2, r0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8004e3e:	2300      	movs	r3, #0
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d22c      	bcs.n	8004ea6 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0xfa>
      union {
        int16_t real;
        uint16_t base;
      } u_st_data;
      u_st_data.base = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004e50:	893a      	ldrh	r2, [r7, #8]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	6839      	ldr	r1, [r7, #0]
 8004e56:	440b      	add	r3, r1
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004e62:	893b      	ldrh	r3, [r7, #8]
 8004e64:	b21a      	sxth	r2, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	440b      	add	r3, r1
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	b21b      	sxth	r3, r3
 8004e74:	4313      	orrs	r3, r2
 8004e76:	b21b      	sxth	r3, r3
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	813b      	strh	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8004e7c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	851a      	strh	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	3302      	adds	r3, #2
 8004e88:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int16_t));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	4413      	add	r3, r2
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	3228      	adds	r2, #40	; 0x28
 8004e98:	8812      	ldrh	r2, [r2, #0]
 8004e9a:	b292      	uxth	r2, r2
 8004e9c:	801a      	strh	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	613b      	str	r3, [r7, #16]
 8004ea4:	e7cd      	b.n	8004e42 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x96>
      }
     return offset;
 8004ea6:	697b      	ldr	r3, [r7, #20]
    }
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <_ZN8std_msgs15Int16MultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/Int16MultiArray"; };
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <_ZN8std_msgs15Int16MultiArray7getTypeEv+0x18>)
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	08014144 	.word	0x08014144

08004ecc <_ZN8std_msgs15Int16MultiArray6getMD5Ev>:
    const char * getMD5(){ return "d9338d7f523fcb692fae9d0a0e9f067c"; };
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	4b03      	ldr	r3, [pc, #12]	; (8004ee4 <_ZN8std_msgs15Int16MultiArray6getMD5Ev+0x18>)
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	08014160 	.word	0x08014160

08004ee8 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
      data("")
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fe fcc0 	bl	8003878 <_ZN3ros3MsgC1Ev>
 8004ef8:	4a05      	ldr	r2, [pc, #20]	; (8004f10 <_ZN8std_msgs6StringC1Ev+0x28>)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a04      	ldr	r2, [pc, #16]	; (8004f14 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8004f02:	605a      	str	r2, [r3, #4]
    {
    }
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	0801429c 	.word	0x0801429c
 8004f14:	08014020 	.word	0x08014020

08004f18 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fb f976 	bl	800021c <strlen>
 8004f30:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	4413      	add	r3, r2
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 face 	bl	80054dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3304      	adds	r3, #4
 8004f44:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	18d0      	adds	r0, r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	4619      	mov	r1, r3
 8004f54:	f00e fe80 	bl	8013c58 <memcpy>
      offset += length_data;
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]
      return offset;
 8004f60:	68fb      	ldr	r3, [r7, #12]
    }
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b086      	sub	sp, #24
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	441a      	add	r2, r3
 8004f7e:	f107 030c 	add.w	r3, r7, #12
 8004f82:	4611      	mov	r1, r2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fac7 	bl	8005518 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4413      	add	r3, r2
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d20c      	bcs.n	8004fba <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	441a      	add	r2, r3
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	6839      	ldr	r1, [r7, #0]
 8004fac:	440b      	add	r3, r1
 8004fae:	7812      	ldrb	r2, [r2, #0]
 8004fb0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	e7ec      	b.n	8004f94 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	441a      	add	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4413      	add	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
     return offset;
 8004fde:	693b      	ldr	r3, [r7, #16]
    }
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	4b03      	ldr	r3, [pc, #12]	; (8005000 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	08014184 	.word	0x08014184

08005004 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	4b03      	ldr	r3, [pc, #12]	; (800501c <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800500e:	4618      	mov	r0, r3
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	08014194 	.word	0x08014194

08005020 <_Z13cake_callbackRKN8std_msgs6StringE>:
char handshake[2] = { 0 };
extern int counttry;
extern int tower_step, temp_pub;
extern int finish, disguise, home, steal, putcherry, score_flag[10], unload,
		unload_temp;
void cake_callback(const std_msgs::String &msg) {
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
	handshake[0] = msg.data[0];
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	781a      	ldrb	r2, [r3, #0]
 800502e:	4b87      	ldr	r3, [pc, #540]	; (800524c <_Z13cake_callbackRKN8std_msgs6StringE+0x22c>)
 8005030:	701a      	strb	r2, [r3, #0]
	handshake[1] = msg.data[1];
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	3301      	adds	r3, #1
 8005038:	781a      	ldrb	r2, [r3, #0]
 800503a:	4b84      	ldr	r3, [pc, #528]	; (800524c <_Z13cake_callbackRKN8std_msgs6StringE+0x22c>)
 800503c:	705a      	strb	r2, [r3, #1]
//	std::string str = msg.data; // string data
	if (msg.data[0] == 'b' || msg.data[0] == 'y' || msg.data[0] == 'p') {
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b62      	cmp	r3, #98	; 0x62
 8005046:	d00a      	beq.n	800505e <_Z13cake_callbackRKN8std_msgs6StringE+0x3e>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b79      	cmp	r3, #121	; 0x79
 8005050:	d005      	beq.n	800505e <_Z13cake_callbackRKN8std_msgs6StringE+0x3e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b70      	cmp	r3, #112	; 0x70
 800505a:	f040 80c1 	bne.w	80051e0 <_Z13cake_callbackRKN8std_msgs6StringE+0x1c0>
		mission_array[0] = 0;
 800505e:	4b7c      	ldr	r3, [pc, #496]	; (8005250 <_Z13cake_callbackRKN8std_msgs6StringE+0x230>)
 8005060:	2200      	movs	r2, #0
 8005062:	801a      	strh	r2, [r3, #0]
		if (msg.data[0] == 'b' && b_bool == 1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b62      	cmp	r3, #98	; 0x62
 800506c:	d128      	bne.n	80050c0 <_Z13cake_callbackRKN8std_msgs6StringE+0xa0>
 800506e:	4b79      	ldr	r3, [pc, #484]	; (8005254 <_Z13cake_callbackRKN8std_msgs6StringE+0x234>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d124      	bne.n	80050c0 <_Z13cake_callbackRKN8std_msgs6StringE+0xa0>
				&& hole[(size_t) (msg.data[1] - '0')] != msg.data[0]) {
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	3301      	adds	r3, #1
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	3b30      	subs	r3, #48	; 0x30
 8005080:	461a      	mov	r2, r3
 8005082:	4b75      	ldr	r3, [pc, #468]	; (8005258 <_Z13cake_callbackRKN8std_msgs6StringE+0x238>)
 8005084:	5c9a      	ldrb	r2, [r3, r2]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d017      	beq.n	80050c0 <_Z13cake_callbackRKN8std_msgs6StringE+0xa0>
			b_bool = 0;
 8005090:	4b70      	ldr	r3, [pc, #448]	; (8005254 <_Z13cake_callbackRKN8std_msgs6StringE+0x234>)
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b03      	cmp	r3, #3
 800509e:	dc0f      	bgt.n	80050c0 <_Z13cake_callbackRKN8std_msgs6StringE+0xa0>
				if (hole[i] == 'b') {
 80050a0:	4a6d      	ldr	r2, [pc, #436]	; (8005258 <_Z13cake_callbackRKN8std_msgs6StringE+0x238>)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	4413      	add	r3, r2
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b62      	cmp	r3, #98	; 0x62
 80050aa:	d105      	bne.n	80050b8 <_Z13cake_callbackRKN8std_msgs6StringE+0x98>
					hole[i] = 0;
 80050ac:	4a6a      	ldr	r2, [pc, #424]	; (8005258 <_Z13cake_callbackRKN8std_msgs6StringE+0x238>)
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	4413      	add	r3, r2
 80050b2:	2200      	movs	r2, #0
 80050b4:	701a      	strb	r2, [r3, #0]
					break;
 80050b6:	e003      	b.n	80050c0 <_Z13cake_callbackRKN8std_msgs6StringE+0xa0>
			for (int i = 0; i < 4; i++) {
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	3301      	adds	r3, #1
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	e7ec      	b.n	800509a <_Z13cake_callbackRKN8std_msgs6StringE+0x7a>
				}
			}
		}
		if (msg.data[0] == 'y' && y_bool == 1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b79      	cmp	r3, #121	; 0x79
 80050c8:	d128      	bne.n	800511c <_Z13cake_callbackRKN8std_msgs6StringE+0xfc>
 80050ca:	4b64      	ldr	r3, [pc, #400]	; (800525c <_Z13cake_callbackRKN8std_msgs6StringE+0x23c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d124      	bne.n	800511c <_Z13cake_callbackRKN8std_msgs6StringE+0xfc>
				&& hole[(size_t) (msg.data[1] - '0')] != msg.data[0]) {
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	3301      	adds	r3, #1
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	3b30      	subs	r3, #48	; 0x30
 80050dc:	461a      	mov	r2, r3
 80050de:	4b5e      	ldr	r3, [pc, #376]	; (8005258 <_Z13cake_callbackRKN8std_msgs6StringE+0x238>)
 80050e0:	5c9a      	ldrb	r2, [r3, r2]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d017      	beq.n	800511c <_Z13cake_callbackRKN8std_msgs6StringE+0xfc>
			y_bool = 0;
 80050ec:	4b5b      	ldr	r3, [pc, #364]	; (800525c <_Z13cake_callbackRKN8std_msgs6StringE+0x23c>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 80050f2:	2300      	movs	r3, #0
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	dc0f      	bgt.n	800511c <_Z13cake_callbackRKN8std_msgs6StringE+0xfc>
				if (hole[i] == 'y') {
 80050fc:	4a56      	ldr	r2, [pc, #344]	; (8005258 <_Z13cake_callbackRKN8std_msgs6StringE+0x238>)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4413      	add	r3, r2
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b79      	cmp	r3, #121	; 0x79
 8005106:	d105      	bne.n	8005114 <_Z13cake_callbackRKN8std_msgs6StringE+0xf4>
					hole[i] = 0;
 8005108:	4a53      	ldr	r2, [pc, #332]	; (8005258 <_Z13cake_callbackRKN8std_msgs6StringE+0x238>)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4413      	add	r3, r2
 800510e:	2200      	movs	r2, #0
 8005110:	701a      	strb	r2, [r3, #0]
					break;
 8005112:	e003      	b.n	800511c <_Z13cake_callbackRKN8std_msgs6StringE+0xfc>
			for (int i = 0; i < 4; i++) {
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	3301      	adds	r3, #1
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	e7ec      	b.n	80050f6 <_Z13cake_callbackRKN8std_msgs6StringE+0xd6>
				}
			}
		}
		if (msg.data[0] == 'p' && p_bool == 1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b70      	cmp	r3, #112	; 0x70
 8005124:	d128      	bne.n	8005178 <_Z13cake_callbackRKN8std_msgs6StringE+0x158>
 8005126:	4b4e      	ldr	r3, [pc, #312]	; (8005260 <_Z13cake_callbackRKN8std_msgs6StringE+0x240>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d124      	bne.n	8005178 <_Z13cake_callbackRKN8std_msgs6StringE+0x158>
				&& hole[(size_t) (msg.data[1] - '0')] != msg.data[0]) {
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	3301      	adds	r3, #1
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	3b30      	subs	r3, #48	; 0x30
 8005138:	461a      	mov	r2, r3
 800513a:	4b47      	ldr	r3, [pc, #284]	; (8005258 <_Z13cake_callbackRKN8std_msgs6StringE+0x238>)
 800513c:	5c9a      	ldrb	r2, [r3, r2]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d017      	beq.n	8005178 <_Z13cake_callbackRKN8std_msgs6StringE+0x158>
			p_bool = 0;
 8005148:	4b45      	ldr	r3, [pc, #276]	; (8005260 <_Z13cake_callbackRKN8std_msgs6StringE+0x240>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b03      	cmp	r3, #3
 8005156:	dc0f      	bgt.n	8005178 <_Z13cake_callbackRKN8std_msgs6StringE+0x158>
				if (hole[i] == 'p') {
 8005158:	4a3f      	ldr	r2, [pc, #252]	; (8005258 <_Z13cake_callbackRKN8std_msgs6StringE+0x238>)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4413      	add	r3, r2
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b70      	cmp	r3, #112	; 0x70
 8005162:	d105      	bne.n	8005170 <_Z13cake_callbackRKN8std_msgs6StringE+0x150>
					hole[i] = 0;
 8005164:	4a3c      	ldr	r2, [pc, #240]	; (8005258 <_Z13cake_callbackRKN8std_msgs6StringE+0x238>)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	2200      	movs	r2, #0
 800516c:	701a      	strb	r2, [r3, #0]
					break;
 800516e:	e003      	b.n	8005178 <_Z13cake_callbackRKN8std_msgs6StringE+0x158>
			for (int i = 0; i < 4; i++) {
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3301      	adds	r3, #1
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	e7ec      	b.n	8005152 <_Z13cake_callbackRKN8std_msgs6StringE+0x132>
				}
			}
		}
		hole[(size_t) (msg.data[1] - '0')] = msg.data[0];
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6852      	ldr	r2, [r2, #4]
 8005180:	3201      	adds	r2, #1
 8005182:	7812      	ldrb	r2, [r2, #0]
 8005184:	3a30      	subs	r2, #48	; 0x30
 8005186:	7819      	ldrb	r1, [r3, #0]
 8005188:	4b33      	ldr	r3, [pc, #204]	; (8005258 <_Z13cake_callbackRKN8std_msgs6StringE+0x238>)
 800518a:	5499      	strb	r1, [r3, r2]
		temp_pub = 0;
 800518c:	4b35      	ldr	r3, [pc, #212]	; (8005264 <_Z13cake_callbackRKN8std_msgs6StringE+0x244>)
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
//		mission_array[(size_t) (msg.data[1] - '0')] = 1;
		if (msg.data[0] == 'b' && b_bool == 0) {
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b62      	cmp	r3, #98	; 0x62
 800519a:	d106      	bne.n	80051aa <_Z13cake_callbackRKN8std_msgs6StringE+0x18a>
 800519c:	4b2d      	ldr	r3, [pc, #180]	; (8005254 <_Z13cake_callbackRKN8std_msgs6StringE+0x234>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <_Z13cake_callbackRKN8std_msgs6StringE+0x18a>
			b_bool = 1;
 80051a4:	4b2b      	ldr	r3, [pc, #172]	; (8005254 <_Z13cake_callbackRKN8std_msgs6StringE+0x234>)
 80051a6:	2201      	movs	r2, #1
 80051a8:	601a      	str	r2, [r3, #0]

		}

		if (msg.data[0] == 'y' && y_bool == 0) {
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b79      	cmp	r3, #121	; 0x79
 80051b2:	d106      	bne.n	80051c2 <_Z13cake_callbackRKN8std_msgs6StringE+0x1a2>
 80051b4:	4b29      	ldr	r3, [pc, #164]	; (800525c <_Z13cake_callbackRKN8std_msgs6StringE+0x23c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d102      	bne.n	80051c2 <_Z13cake_callbackRKN8std_msgs6StringE+0x1a2>
			y_bool = 1;
 80051bc:	4b27      	ldr	r3, [pc, #156]	; (800525c <_Z13cake_callbackRKN8std_msgs6StringE+0x23c>)
 80051be:	2201      	movs	r2, #1
 80051c0:	601a      	str	r2, [r3, #0]

		}

		if (msg.data[0] == 'p' && p_bool == 0) {
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b70      	cmp	r3, #112	; 0x70
 80051ca:	f040 80b9 	bne.w	8005340 <_Z13cake_callbackRKN8std_msgs6StringE+0x320>
 80051ce:	4b24      	ldr	r3, [pc, #144]	; (8005260 <_Z13cake_callbackRKN8std_msgs6StringE+0x240>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f040 80b4 	bne.w	8005340 <_Z13cake_callbackRKN8std_msgs6StringE+0x320>
			p_bool = 1;
 80051d8:	4b21      	ldr	r3, [pc, #132]	; (8005260 <_Z13cake_callbackRKN8std_msgs6StringE+0x240>)
 80051da:	2201      	movs	r2, #1
 80051dc:	601a      	str	r2, [r3, #0]

		}
 80051de:	e0af      	b.n	8005340 <_Z13cake_callbackRKN8std_msgs6StringE+0x320>

	}
	else if (msg.data[0] == 'h') {
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b68      	cmp	r3, #104	; 0x68
 80051e8:	d144      	bne.n	8005274 <_Z13cake_callbackRKN8std_msgs6StringE+0x254>
		if ((msg.data[1] == '0' || msg.data[1] == '3') && h_bool == 0) {
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	3301      	adds	r3, #1
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b30      	cmp	r3, #48	; 0x30
 80051f4:	d005      	beq.n	8005202 <_Z13cake_callbackRKN8std_msgs6StringE+0x1e2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	3301      	adds	r3, #1
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b33      	cmp	r3, #51	; 0x33
 8005200:	d10c      	bne.n	800521c <_Z13cake_callbackRKN8std_msgs6StringE+0x1fc>
 8005202:	4b19      	ldr	r3, [pc, #100]	; (8005268 <_Z13cake_callbackRKN8std_msgs6StringE+0x248>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d108      	bne.n	800521c <_Z13cake_callbackRKN8std_msgs6StringE+0x1fc>
			h_bool = 1;
 800520a:	4b17      	ldr	r3, [pc, #92]	; (8005268 <_Z13cake_callbackRKN8std_msgs6StringE+0x248>)
 800520c:	2201      	movs	r2, #1
 800520e:	601a      	str	r2, [r3, #0]
			mission_array[0] = 0;
 8005210:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <_Z13cake_callbackRKN8std_msgs6StringE+0x230>)
 8005212:	2200      	movs	r2, #0
 8005214:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8005216:	4b13      	ldr	r3, [pc, #76]	; (8005264 <_Z13cake_callbackRKN8std_msgs6StringE+0x244>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
		}
		if (msg.data[1] == '1' && homefree == 0) {
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	3301      	adds	r3, #1
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b31      	cmp	r3, #49	; 0x31
 8005226:	d106      	bne.n	8005236 <_Z13cake_callbackRKN8std_msgs6StringE+0x216>
 8005228:	4b10      	ldr	r3, [pc, #64]	; (800526c <_Z13cake_callbackRKN8std_msgs6StringE+0x24c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d102      	bne.n	8005236 <_Z13cake_callbackRKN8std_msgs6StringE+0x216>
			pauseHanoi = 1;
 8005230:	4b0f      	ldr	r3, [pc, #60]	; (8005270 <_Z13cake_callbackRKN8std_msgs6StringE+0x250>)
 8005232:	2201      	movs	r2, #1
 8005234:	601a      	str	r2, [r3, #0]
		}
		if (msg.data[1] == '2') {
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	3301      	adds	r3, #1
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	2b32      	cmp	r3, #50	; 0x32
 8005240:	d17f      	bne.n	8005342 <_Z13cake_callbackRKN8std_msgs6StringE+0x322>
			pauseHanoi = 0;
 8005242:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <_Z13cake_callbackRKN8std_msgs6StringE+0x250>)
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]
	else if (msg.data[0] == 'r') {

		putcherry = 1;
	}

}
 8005248:	e07b      	b.n	8005342 <_Z13cake_callbackRKN8std_msgs6StringE+0x322>
 800524a:	bf00      	nop
 800524c:	20000a38 	.word	0x20000a38
 8005250:	20001560 	.word	0x20001560
 8005254:	20001524 	.word	0x20001524
 8005258:	200014e8 	.word	0x200014e8
 800525c:	20001528 	.word	0x20001528
 8005260:	2000152c 	.word	0x2000152c
 8005264:	20001558 	.word	0x20001558
 8005268:	20001530 	.word	0x20001530
 800526c:	20001538 	.word	0x20001538
 8005270:	20001534 	.word	0x20001534
	else if (msg.data[0] == '0') {
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b30      	cmp	r3, #48	; 0x30
 800527c:	d119      	bne.n	80052b2 <_Z13cake_callbackRKN8std_msgs6StringE+0x292>
		if (mission_array[(size_t) (msg.data[1] - '0')] == 1) {
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	3301      	adds	r3, #1
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	3b30      	subs	r3, #48	; 0x30
 8005288:	461a      	mov	r2, r3
 800528a:	4b31      	ldr	r3, [pc, #196]	; (8005350 <_Z13cake_callbackRKN8std_msgs6StringE+0x330>)
 800528c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d156      	bne.n	8005342 <_Z13cake_callbackRKN8std_msgs6StringE+0x322>
			score_flag[mission_array[(size_t) (msg.data[1] - '0')]] = 1;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	3301      	adds	r3, #1
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	3b30      	subs	r3, #48	; 0x30
 800529e:	461a      	mov	r2, r3
 80052a0:	4b2b      	ldr	r3, [pc, #172]	; (8005350 <_Z13cake_callbackRKN8std_msgs6StringE+0x330>)
 80052a2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80052a6:	4619      	mov	r1, r3
 80052a8:	4b2a      	ldr	r3, [pc, #168]	; (8005354 <_Z13cake_callbackRKN8std_msgs6StringE+0x334>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80052b0:	e047      	b.n	8005342 <_Z13cake_callbackRKN8std_msgs6StringE+0x322>
	else if (msg.data[0] == 'u') {
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b75      	cmp	r3, #117	; 0x75
 80052ba:	d106      	bne.n	80052ca <_Z13cake_callbackRKN8std_msgs6StringE+0x2aa>
		unload = 1;
 80052bc:	4b26      	ldr	r3, [pc, #152]	; (8005358 <_Z13cake_callbackRKN8std_msgs6StringE+0x338>)
 80052be:	2201      	movs	r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
		unload_temp = 0;
 80052c2:	4b26      	ldr	r3, [pc, #152]	; (800535c <_Z13cake_callbackRKN8std_msgs6StringE+0x33c>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]
}
 80052c8:	e03b      	b.n	8005342 <_Z13cake_callbackRKN8std_msgs6StringE+0x322>
	else if (msg.data[0] == 'd') {
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b64      	cmp	r3, #100	; 0x64
 80052d2:	d106      	bne.n	80052e2 <_Z13cake_callbackRKN8std_msgs6StringE+0x2c2>
		score_flag[4] = 1;
 80052d4:	4b1f      	ldr	r3, [pc, #124]	; (8005354 <_Z13cake_callbackRKN8std_msgs6StringE+0x334>)
 80052d6:	2201      	movs	r2, #1
 80052d8:	611a      	str	r2, [r3, #16]
		disguise = 1;
 80052da:	4b21      	ldr	r3, [pc, #132]	; (8005360 <_Z13cake_callbackRKN8std_msgs6StringE+0x340>)
 80052dc:	2201      	movs	r2, #1
 80052de:	601a      	str	r2, [r3, #0]
}
 80052e0:	e02f      	b.n	8005342 <_Z13cake_callbackRKN8std_msgs6StringE+0x322>
	else if (msg.data[0] == 'f') {
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b66      	cmp	r3, #102	; 0x66
 80052ea:	d106      	bne.n	80052fa <_Z13cake_callbackRKN8std_msgs6StringE+0x2da>
		score_flag[5] = 1;
 80052ec:	4b19      	ldr	r3, [pc, #100]	; (8005354 <_Z13cake_callbackRKN8std_msgs6StringE+0x334>)
 80052ee:	2201      	movs	r2, #1
 80052f0:	615a      	str	r2, [r3, #20]
		finish = 1;
 80052f2:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <_Z13cake_callbackRKN8std_msgs6StringE+0x344>)
 80052f4:	2201      	movs	r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
}
 80052f8:	e023      	b.n	8005342 <_Z13cake_callbackRKN8std_msgs6StringE+0x322>
	else if (msg.data[0] == 'A') {
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b41      	cmp	r3, #65	; 0x41
 8005302:	d106      	bne.n	8005312 <_Z13cake_callbackRKN8std_msgs6StringE+0x2f2>
		score_flag[6] = 1;
 8005304:	4b13      	ldr	r3, [pc, #76]	; (8005354 <_Z13cake_callbackRKN8std_msgs6StringE+0x334>)
 8005306:	2201      	movs	r2, #1
 8005308:	619a      	str	r2, [r3, #24]
		home = 1;
 800530a:	4b17      	ldr	r3, [pc, #92]	; (8005368 <_Z13cake_callbackRKN8std_msgs6StringE+0x348>)
 800530c:	2201      	movs	r2, #1
 800530e:	601a      	str	r2, [r3, #0]
}
 8005310:	e017      	b.n	8005342 <_Z13cake_callbackRKN8std_msgs6StringE+0x322>
	else if (msg.data[0] == 't') {
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b74      	cmp	r3, #116	; 0x74
 800531a:	d108      	bne.n	800532e <_Z13cake_callbackRKN8std_msgs6StringE+0x30e>
		score_flag[7] = 1;
 800531c:	4b0d      	ldr	r3, [pc, #52]	; (8005354 <_Z13cake_callbackRKN8std_msgs6StringE+0x334>)
 800531e:	2201      	movs	r2, #1
 8005320:	61da      	str	r2, [r3, #28]
		steal++;
 8005322:	4b12      	ldr	r3, [pc, #72]	; (800536c <_Z13cake_callbackRKN8std_msgs6StringE+0x34c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3301      	adds	r3, #1
 8005328:	4a10      	ldr	r2, [pc, #64]	; (800536c <_Z13cake_callbackRKN8std_msgs6StringE+0x34c>)
 800532a:	6013      	str	r3, [r2, #0]
}
 800532c:	e009      	b.n	8005342 <_Z13cake_callbackRKN8std_msgs6StringE+0x322>
	else if (msg.data[0] == 'r') {
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b72      	cmp	r3, #114	; 0x72
 8005336:	d104      	bne.n	8005342 <_Z13cake_callbackRKN8std_msgs6StringE+0x322>
		putcherry = 1;
 8005338:	4b0d      	ldr	r3, [pc, #52]	; (8005370 <_Z13cake_callbackRKN8std_msgs6StringE+0x350>)
 800533a:	2201      	movs	r2, #1
 800533c:	601a      	str	r2, [r3, #0]
}
 800533e:	e000      	b.n	8005342 <_Z13cake_callbackRKN8std_msgs6StringE+0x322>
		}
 8005340:	bf00      	nop
}
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	20001560 	.word	0x20001560
 8005354:	200014fc 	.word	0x200014fc
 8005358:	200015a0 	.word	0x200015a0
 800535c:	200015a4 	.word	0x200015a4
 8005360:	20001590 	.word	0x20001590
 8005364:	200014f4 	.word	0x200014f4
 8005368:	20001594 	.word	0x20001594
 800536c:	20001598 	.word	0x20001598
 8005370:	2000159c 	.word	0x2000159c

08005374 <HAL_UART_TxCpltCallback>:
// (2) Create a publisher
ros::Publisher pub("donefullness1", &feedback);
ros::Publisher pub1("lightgate1", &gate);
ros::Publisher pub2("hand_door1", &door);
ros::Publisher pub3("handshakier1", &check);
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 800537c:	4805      	ldr	r0, [pc, #20]	; (8005394 <HAL_UART_TxCpltCallback+0x20>)
 800537e:	f000 f9b5 	bl	80056ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8005382:	4603      	mov	r3, r0
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff f95d 	bl	8004644 <_ZN13STM32Hardware5flushEv>
}
 800538a:	bf00      	nop
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20000ad4 	.word	0x20000ad4

08005398 <HAL_UART_ErrorCallback>:
//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
//	nh.getHardware()->reset_rbuf();
//}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a09      	ldr	r2, [pc, #36]	; (80053c8 <HAL_UART_ErrorCallback+0x30>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d10b      	bne.n	80053c0 <HAL_UART_ErrorCallback+0x28>
		HAL_UART_DeInit(&huart2);
 80053a8:	4807      	ldr	r0, [pc, #28]	; (80053c8 <HAL_UART_ErrorCallback+0x30>)
 80053aa:	f008 fbb8 	bl	800db1e <HAL_UART_DeInit>
		MX_USART2_UART_Init();
 80053ae:	f002 fa7f 	bl	80078b0 <MX_USART2_UART_Init>
		nh.getHardware()->init();
 80053b2:	4806      	ldr	r0, [pc, #24]	; (80053cc <HAL_UART_ErrorCallback+0x34>)
 80053b4:	f000 f99a 	bl	80056ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80053b8:	4603      	mov	r3, r0
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff f8f8 	bl	80045b0 <_ZN13STM32Hardware4initEv>
	}
}
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	2000187c 	.word	0x2000187c
 80053cc:	20000ad4 	.word	0x20000ad4

080053d0 <pub_to_ros>:

void pub_to_ros() {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
	// (4) Publish your data
//	feedback.data = (std_msgs::Int16MultiArray::_data_type*) malloc(
//			5 * sizeof(std_msgs::Int16MultiArray::_data_type));
	feedback.data_length = 5;
 80053d4:	4b05      	ldr	r3, [pc, #20]	; (80053ec <pub_to_ros+0x1c>)
 80053d6:	2205      	movs	r2, #5
 80053d8:	625a      	str	r2, [r3, #36]	; 0x24
	feedback.data = mission_array;
 80053da:	4b04      	ldr	r3, [pc, #16]	; (80053ec <pub_to_ros+0x1c>)
 80053dc:	4a04      	ldr	r2, [pc, #16]	; (80053f0 <pub_to_ros+0x20>)
 80053de:	62da      	str	r2, [r3, #44]	; 0x2c
//	feedback.data[5] = tower_step;

	pub.publish(&feedback);
 80053e0:	4902      	ldr	r1, [pc, #8]	; (80053ec <pub_to_ros+0x1c>)
 80053e2:	4804      	ldr	r0, [pc, #16]	; (80053f4 <pub_to_ros+0x24>)
 80053e4:	f7ff f895 	bl	8004512 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80053e8:	bf00      	nop
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	20000a3c 	.word	0x20000a3c
 80053f0:	20001560 	.word	0x20001560
 80053f4:	2000142c 	.word	0x2000142c

080053f8 <pub_the_gate>:
void pub_the_gate() {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
	gate.data_length = 3;
 80053fc:	4b05      	ldr	r3, [pc, #20]	; (8005414 <pub_the_gate+0x1c>)
 80053fe:	2203      	movs	r2, #3
 8005400:	625a      	str	r2, [r3, #36]	; 0x24
	gate.data = rotate_state;
 8005402:	4b04      	ldr	r3, [pc, #16]	; (8005414 <pub_the_gate+0x1c>)
 8005404:	4a04      	ldr	r2, [pc, #16]	; (8005418 <pub_the_gate+0x20>)
 8005406:	62da      	str	r2, [r3, #44]	; 0x2c
	pub1.publish(&gate);
 8005408:	4902      	ldr	r1, [pc, #8]	; (8005414 <pub_the_gate+0x1c>)
 800540a:	4804      	ldr	r0, [pc, #16]	; (800541c <pub_the_gate+0x24>)
 800540c:	f7ff f881 	bl	8004512 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8005410:	bf00      	nop
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20000a6c 	.word	0x20000a6c
 8005418:	2000156c 	.word	0x2000156c
 800541c:	20001440 	.word	0x20001440

08005420 <pub_the_hand_transfer>:
void pub_the_hand_transfer() {
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
	door.data_length = 4;
 8005424:	4b05      	ldr	r3, [pc, #20]	; (800543c <pub_the_hand_transfer+0x1c>)
 8005426:	2204      	movs	r2, #4
 8005428:	625a      	str	r2, [r3, #36]	; 0x24
	door.data = hand_transfer;
 800542a:	4b04      	ldr	r3, [pc, #16]	; (800543c <pub_the_hand_transfer+0x1c>)
 800542c:	4a04      	ldr	r2, [pc, #16]	; (8005440 <pub_the_hand_transfer+0x20>)
 800542e:	62da      	str	r2, [r3, #44]	; 0x2c
	pub2.publish(&door);
 8005430:	4902      	ldr	r1, [pc, #8]	; (800543c <pub_the_hand_transfer+0x1c>)
 8005432:	4804      	ldr	r0, [pc, #16]	; (8005444 <pub_the_hand_transfer+0x24>)
 8005434:	f7ff f86d 	bl	8004512 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8005438:	bf00      	nop
 800543a:	bd80      	pop	{r7, pc}
 800543c:	20000a9c 	.word	0x20000a9c
 8005440:	20000980 	.word	0x20000980
 8005444:	20001454 	.word	0x20001454

08005448 <hand_shake>:
void hand_shake() {
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
	check.data = handshake;
 800544c:	4b04      	ldr	r3, [pc, #16]	; (8005460 <hand_shake+0x18>)
 800544e:	4a05      	ldr	r2, [pc, #20]	; (8005464 <hand_shake+0x1c>)
 8005450:	605a      	str	r2, [r3, #4]
	pub3.publish(&check);
 8005452:	4903      	ldr	r1, [pc, #12]	; (8005460 <hand_shake+0x18>)
 8005454:	4804      	ldr	r0, [pc, #16]	; (8005468 <hand_shake+0x20>)
 8005456:	f7ff f85c 	bl	8004512 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 800545a:	bf00      	nop
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000acc 	.word	0x20000acc
 8005464:	20000a38 	.word	0x20000a38
 8005468:	20001468 	.word	0x20001468

0800546c <setup>:
void setup(void) {
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
	nh.initNode();
 8005470:	480c      	ldr	r0, [pc, #48]	; (80054a4 <setup+0x38>)
 8005472:	f000 f947 	bl	8005704 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.subscribe(sub);
 8005476:	490c      	ldr	r1, [pc, #48]	; (80054a8 <setup+0x3c>)
 8005478:	480a      	ldr	r0, [pc, #40]	; (80054a4 <setup+0x38>)
 800547a:	f000 f960 	bl	800573e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_>

	// (3) Init your publisher with roscore
	nh.advertise(pub);
 800547e:	490b      	ldr	r1, [pc, #44]	; (80054ac <setup+0x40>)
 8005480:	4808      	ldr	r0, [pc, #32]	; (80054a4 <setup+0x38>)
 8005482:	f000 f987 	bl	8005794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(pub1);
 8005486:	490a      	ldr	r1, [pc, #40]	; (80054b0 <setup+0x44>)
 8005488:	4806      	ldr	r0, [pc, #24]	; (80054a4 <setup+0x38>)
 800548a:	f000 f983 	bl	8005794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(pub2);
 800548e:	4909      	ldr	r1, [pc, #36]	; (80054b4 <setup+0x48>)
 8005490:	4804      	ldr	r0, [pc, #16]	; (80054a4 <setup+0x38>)
 8005492:	f000 f97f 	bl	8005794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(pub3);
 8005496:	4908      	ldr	r1, [pc, #32]	; (80054b8 <setup+0x4c>)
 8005498:	4802      	ldr	r0, [pc, #8]	; (80054a4 <setup+0x38>)
 800549a:	f000 f97b 	bl	8005794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 800549e:	bf00      	nop
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000ad4 	.word	0x20000ad4
 80054a8:	20001410 	.word	0x20001410
 80054ac:	2000142c 	.word	0x2000142c
 80054b0:	20001440 	.word	0x20001440
 80054b4:	20001454 	.word	0x20001454
 80054b8:	20001468 	.word	0x20001468

080054bc <loop>:
void loop(void) {
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
	nh.spinOnce();
 80054c0:	4804      	ldr	r0, [pc, #16]	; (80054d4 <loop+0x18>)
 80054c2:	f000 f997 	bl	80057f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	counttry++;
 80054c6:	4b04      	ldr	r3, [pc, #16]	; (80054d8 <loop+0x1c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3301      	adds	r3, #1
 80054cc:	4a02      	ldr	r2, [pc, #8]	; (80054d8 <loop+0x1c>)
 80054ce:	6013      	str	r3, [r2, #0]
}
 80054d0:	bf00      	nop
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20000ad4 	.word	0x20000ad4
 80054d8:	200014f0 	.word	0x200014f0

080054dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80054e6:	2300      	movs	r3, #0
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d80d      	bhi.n	800550c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	fa22 f103 	lsr.w	r1, r2, r3
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	b2ca      	uxtb	r2, r1
 8005502:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3301      	adds	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	e7ee      	b.n	80054ea <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800550c:	bf00      	nop
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b03      	cmp	r3, #3
 8005530:	d811      	bhi.n	8005556 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6839      	ldr	r1, [r7, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	440a      	add	r2, r1
 800553c:	7812      	ldrb	r2, [r2, #0]
 800553e:	4611      	mov	r1, r2
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	00d2      	lsls	r2, r2, #3
 8005544:	fa01 f202 	lsl.w	r2, r1, r2
 8005548:	431a      	orrs	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	3301      	adds	r3, #1
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	e7ea      	b.n	800552c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8005556:	bf00      	nop
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
	...

08005564 <_ZN3ros15NodeHandleBase_C1Ev>:

#include "ros/msg.h"

namespace ros {

class NodeHandleBase_ {
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	4a04      	ldr	r2, [pc, #16]	; (8005580 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	08014314 	.word	0x08014314

08005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

	/*
	 * Setup Functions
	 */
public:
	NodeHandle_() :
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
			configured_(false) {
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff ffe8 	bl	8005564 <_ZN3ros15NodeHandleBase_C1Ev>
 8005594:	4a3a      	ldr	r2, [pc, #232]	; (8005680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3304      	adds	r3, #4
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe ffea 	bl	8004578 <_ZN13STM32HardwareC1Ev>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe fcd4 	bl	8003f60 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>

		for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2b18      	cmp	r3, #24
 80055c0:	d80b      	bhi.n	80055da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
			publishers[i] = 0;
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	2200      	movs	r2, #0
 80055d0:	605a      	str	r2, [r3, #4]
		for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	3301      	adds	r3, #1
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	e7f0      	b.n	80055bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

		for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80055da:	2300      	movs	r3, #0
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b18      	cmp	r3, #24
 80055e2:	d80a      	bhi.n	80055fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
			subscribers[i] = 0;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80055ec:	2100      	movs	r1, #0
 80055ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	3301      	adds	r3, #1
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	e7f1      	b.n	80055de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

		for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005604:	d20a      	bcs.n	800561c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
			message_in[i] = 0;
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005610:	2200      	movs	r2, #0
 8005612:	701a      	strb	r2, [r3, #0]
		for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	3301      	adds	r3, #1
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	e7f0      	b.n	80055fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

		for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800561c:	2300      	movs	r3, #0
 800561e:	60bb      	str	r3, [r7, #8]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005626:	d20a      	bcs.n	800563e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
			message_out[i] = 0;
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	4413      	add	r3, r2
 800562e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005632:	2200      	movs	r2, #0
 8005634:	701a      	strb	r2, [r3, #0]
		for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	3301      	adds	r3, #1
 800563a:	60bb      	str	r3, [r7, #8]
 800563c:	e7f0      	b.n	8005620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

		req_param_resp.ints_length = 0;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
		req_param_resp.ints = NULL;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
		req_param_resp.floats_length = 0;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
		req_param_resp.floats = NULL;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
		req_param_resp.ints_length = 0;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
		req_param_resp.ints = NULL;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

		spin_timeout_ = 0;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	}
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	08014288 	.word	0x08014288

08005684 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	4a04      	ldr	r2, [pc, #16]	; (80056a0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	080142fc 	.word	0x080142fc

080056a4 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff ffe5 	bl	8005684 <_ZN3ros11Subscriber_C1Ev>
 80056ba:	4a0b      	ldr	r2, [pc, #44]	; (80056e8 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei+0x44>)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	330c      	adds	r3, #12
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff fc0f 	bl	8004ee8 <_ZN8std_msgs6StringC1Ev>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	615a      	str	r2, [r3, #20]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	609a      	str	r2, [r3, #8]
  };
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	08014270 	.word	0x08014270

080056ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

	Hardware* getHardware() {
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
		return &hardware_;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3304      	adds	r3, #4
	}
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

	/* Start serial, initialize buffers */
	void initNode() {
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
		hardware_.init();
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3304      	adds	r3, #4
 8005710:	4618      	mov	r0, r3
 8005712:	f7fe ff4d 	bl	80045b0 <_ZN13STM32Hardware4initEv>
		mode_ = 0;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
		bytes_ = 0;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
		index_ = 0;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		topic_ = 0;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
	}
 8005736:	bf00      	nop
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_>:
		return false;
	}

	/* Register a new subscriber */
	template<typename SubscriberT>
	bool subscribe(SubscriberT &s) {
 800573e:	b480      	push	{r7}
 8005740:	b085      	sub	sp, #20
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	6039      	str	r1, [r7, #0]
		for (int i = 0; i < MAX_SUBSCRIBERS; i++) {
 8005748:	2300      	movs	r3, #0
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b18      	cmp	r3, #24
 8005750:	dc19      	bgt.n	8005786 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_+0x48>
			if (subscribers[i] == 0) // empty slot
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	f202 2222 	addw	r2, r2, #546	; 0x222
 800575a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10d      	bne.n	800577e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_+0x40>
					{
				subscribers[i] = static_cast<Subscriber_*>(&s);
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	f202 2222 	addw	r2, r2, #546	; 0x222
 800576c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				s.id_ = i + 100;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	605a      	str	r2, [r3, #4]
				return true;
 800577a:	2301      	movs	r3, #1
 800577c:	e004      	b.n	8005788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_+0x4a>
		for (int i = 0; i < MAX_SUBSCRIBERS; i++) {
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3301      	adds	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e7e2      	b.n	800574c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_+0xe>
			}
		}
		return false;
 8005786:	2300      	movs	r3, #0
	}
 8005788:	4618      	mov	r0, r3
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
	bool advertise(Publisher &p) {
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
		for (int i = 0; i < MAX_PUBLISHERS; i++) {
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b18      	cmp	r3, #24
 80057a6:	dc1e      	bgt.n	80057e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
			if (publishers[i] == 0) // empty slot
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d111      	bne.n	80057de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
				publishers[i] = &p;
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	605a      	str	r2, [r3, #4]
				p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	609a      	str	r2, [r3, #8]
				p.nh_ = this;
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	60da      	str	r2, [r3, #12]
				return true;
 80057da:	2301      	movs	r3, #1
 80057dc:	e004      	b.n	80057e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
		for (int i = 0; i < MAX_PUBLISHERS; i++) {
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3301      	adds	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	e7dd      	b.n	80057a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
		return false;
 80057e6:	2300      	movs	r3, #0
	}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
	virtual int spinOnce() {
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
		uint32_t c_time = hardware_.time();
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3304      	adds	r3, #4
 8005800:	4618      	mov	r0, r3
 8005802:	f7fe ffc3 	bl	800478c <_ZN13STM32Hardware4timeEv>
 8005806:	60f8      	str	r0, [r7, #12]
		if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200)) {
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	f640 0298 	movw	r2, #2200	; 0x898
 8005816:	4293      	cmp	r3, r2
 8005818:	d903      	bls.n	8005822 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
			configured_ = false;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
		if (mode_ != MODE_FIRST_FF) {
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005828:	2b00      	cmp	r3, #0
 800582a:	d009      	beq.n	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
			if (c_time > last_msg_timeout_time) {
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	429a      	cmp	r2, r3
 8005836:	d903      	bls.n	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
				mode_ = MODE_FIRST_FF;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
			if (spin_timeout_ > 0) {
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005846:	2b00      	cmp	r3, #0
 8005848:	d014      	beq.n	8005874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
				if ((hardware_.time() - c_time) > spin_timeout_) {
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3304      	adds	r3, #4
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe ff9c 	bl	800478c <_ZN13STM32Hardware4timeEv>
 8005854:	4602      	mov	r2, r0
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1ad2      	subs	r2, r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005860:	429a      	cmp	r2, r3
 8005862:	bf8c      	ite	hi
 8005864:	2301      	movhi	r3, #1
 8005866:	2300      	movls	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d002      	beq.n	8005874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
					return SPIN_TIMEOUT;
 800586e:	f06f 0301 	mvn.w	r3, #1
 8005872:	e192      	b.n	8005b9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a6>
			int data = hardware_.read();
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3304      	adds	r3, #4
 8005878:	4618      	mov	r0, r3
 800587a:	f7fe feb5 	bl	80045e8 <_ZN13STM32Hardware4readEv>
 800587e:	60b8      	str	r0, [r7, #8]
			if (data < 0)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	f2c0 8173 	blt.w	8005b6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37a>
			checksum_ += data;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	441a      	add	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
			if (mode_ == MODE_MESSAGE) /* message data being recieved */
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800589e:	2b07      	cmp	r3, #7
 80058a0:	d11e      	bne.n	80058e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
				message_in[index_++] = data;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80058a8:	1c59      	adds	r1, r3, #1
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	b2d1      	uxtb	r1, r2
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	4413      	add	r3, r2
 80058b8:	460a      	mov	r2, r1
 80058ba:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
				bytes_--;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80058c4:	1e5a      	subs	r2, r3, #1
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
				if (bytes_ == 0) /* is message complete? if so, checksum */
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1b4      	bne.n	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
					mode_ = MODE_MSG_CHECKSUM;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2208      	movs	r2, #8
 80058da:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80058de:	e7af      	b.n	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
			else if (mode_ == MODE_FIRST_FF) {
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d127      	bne.n	800593a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x146>
				if (data == 0xff) {
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2bff      	cmp	r3, #255	; 0xff
 80058ee:	d10d      	bne.n	800590c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
					mode_++;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
					last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f103 0214 	add.w	r2, r3, #20
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800590a:	e799      	b.n	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
				else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000)) {
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3304      	adds	r3, #4
 8005910:	4618      	mov	r0, r3
 8005912:	f7fe ff3b 	bl	800478c <_ZN13STM32Hardware4timeEv>
 8005916:	4602      	mov	r2, r0
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005920:	bf8c      	ite	hi
 8005922:	2301      	movhi	r3, #1
 8005924:	2300      	movls	r3, #0
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d089      	beq.n	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
					configured_ = false;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
					return SPIN_TIMEOUT;
 8005934:	f06f 0301 	mvn.w	r3, #1
 8005938:	e12f      	b.n	8005b9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a6>
			else if (mode_ == MODE_PROTOCOL_VER) {
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005940:	2b01      	cmp	r3, #1
 8005942:	d118      	bne.n	8005976 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x182>
				if (data == PROTOCOL_VER) {
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2bfe      	cmp	r3, #254	; 0xfe
 8005948:	d107      	bne.n	800595a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x166>
					mode_++;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005958:	e772      	b.n	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
					mode_ = MODE_FIRST_FF;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
					if (configured_ == false)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8005968:	2b00      	cmp	r3, #0
 800596a:	f47f af69 	bne.w	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
						requestSyncTime(); /* send a msg back showing our protocol version */
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f917 	bl	8005ba2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8005974:	e764      	b.n	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
			else if (mode_ == MODE_SIZE_L) /* bottom half of message size */
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800597c:	2b02      	cmp	r3, #2
 800597e:	d113      	bne.n	80059a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b4>
				bytes_ = data;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
				index_ = 0;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
				mode_++;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
				checksum_ = data; /* first byte for calculating size checksum */
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80059a6:	e74b      	b.n	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
			else if (mode_ == MODE_SIZE_H) /* top half of message size */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	d110      	bne.n	80059d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e0>
				bytes_ += data << 8;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	021b      	lsls	r3, r3, #8
 80059bc:	441a      	add	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
				mode_++;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80059d2:	e735      	b.n	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
			else if (mode_ == MODE_SIZE_CHECKSUM) {
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d116      	bne.n	8005a0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x218>
				if ((checksum_ % 256) == 255)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80059e4:	425a      	negs	r2, r3
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	bf58      	it	pl
 80059ec:	4253      	negpl	r3, r2
 80059ee:	2bff      	cmp	r3, #255	; 0xff
 80059f0:	d107      	bne.n	8005a02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20e>
					mode_++;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005a00:	e71e      	b.n	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
					mode_ = MODE_FIRST_FF; /* Abandon the frame if the msg len is wrong */
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005a0a:	e719      	b.n	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
			else if (mode_ == MODE_TOPIC_L) /* bottom half of topic id */
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005a12:	2b05      	cmp	r3, #5
 8005a14:	d10f      	bne.n	8005a36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
				topic_ = data;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
				mode_++;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
				checksum_ = data; /* first byte included in checksum */
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8005a34:	e704      	b.n	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
			else if (mode_ == MODE_TOPIC_H) /* top half of topic id */
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005a3c:	2b06      	cmp	r3, #6
 8005a3e:	d117      	bne.n	8005a70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27c>
				topic_ += data << 8;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	441a      	add	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
				mode_ = MODE_MESSAGE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2207      	movs	r2, #7
 8005a56:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
				if (bytes_ == 0)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f47f aeed 	bne.w	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
					mode_ = MODE_MSG_CHECKSUM;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2208      	movs	r2, #8
 8005a6a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005a6e:	e6e7      	b.n	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
			else if (mode_ == MODE_MSG_CHECKSUM) /* do checksum */
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	f47f aee2 	bne.w	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
				mode_ = MODE_FIRST_FF;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
				if ((checksum_ % 256) == 255) {
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8005a8a:	425a      	negs	r2, r3
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	bf58      	it	pl
 8005a92:	4253      	negpl	r3, r2
 8005a94:	2bff      	cmp	r3, #255	; 0xff
 8005a96:	f47f aed3 	bne.w	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
					if (topic_ == TopicInfo::ID_PUBLISHER) {
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d110      	bne.n	8005ac6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d2>
						requestSyncTime();
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f87c 	bl	8005ba2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
						negotiateTopics();
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f897 	bl	8005bde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
						last_sync_time = c_time;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
						last_sync_receive_time = c_time;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
						return SPIN_ERR;
 8005ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac4:	e069      	b.n	8005b9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a6>
					else if (topic_ == TopicInfo::ID_TIME) {
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005acc:	2b0a      	cmp	r3, #10
 8005ace:	d107      	bne.n	8005ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ec>
						syncTime(message_in);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f95f 	bl	8005d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8005ade:	e6af      	b.n	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
					else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST) {
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005ae6:	2b06      	cmp	r3, #6
 8005ae8:	d10e      	bne.n	8005b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x314>
						req_param_resp.deserialize(message_in);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005af6:	4619      	mov	r1, r3
 8005af8:	4610      	mov	r0, r2
 8005afa:	f7fe fb66 	bl	80041ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
						param_recieved = true;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8005b06:	e69b      	b.n	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
					else if (topic_ == TopicInfo::ID_TX_STOP) {
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005b0e:	2b0b      	cmp	r3, #11
 8005b10:	d104      	bne.n	8005b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x328>
						configured_ = false;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8005b1a:	e691      	b.n	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
						if (subscribers[topic_ - 100])
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005b22:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f43f ae85 	beq.w	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
							subscribers[topic_ - 100]->callback(message_in);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005b3c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005b46:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005b50:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8005b68:	4611      	mov	r1, r2
 8005b6a:	4798      	blx	r3
		while (true) {
 8005b6c:	e668      	b.n	8005840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
				break;
 8005b6e:	bf00      	nop
		if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500))) {
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00e      	beq.n	8005b98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005b88:	d906      	bls.n	8005b98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
			requestSyncTime();
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f809 	bl	8005ba2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
			last_sync_time = c_time;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
		return SPIN_OK;
 8005b98:	2300      	movs	r3, #0
	}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
	void requestSyncTime() {
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b086      	sub	sp, #24
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
		std_msgs::Time t;
 8005baa:	f107 030c 	add.w	r3, r7, #12
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fd fe72 	bl	8003898 <_ZN8std_msgs4TimeC1Ev>
		publish(TopicInfo::ID_TIME, &t);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f107 020c 	add.w	r2, r7, #12
 8005bbe:	210a      	movs	r1, #10
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	4798      	blx	r3
		rt_time = hardware_.time();
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fe fddf 	bl	800478c <_ZN13STM32Hardware4timeEv>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	}
 8005bd6:	bf00      	nop
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
			}
		}
		return false;
	}

	void negotiateTopics() {
 8005bde:	b590      	push	{r4, r7, lr}
 8005be0:	b08b      	sub	sp, #44	; 0x2c
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
		rosserial_msgs::TopicInfo ti;
 8005be6:	f107 030c 	add.w	r3, r7, #12
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fd ff44 	bl	8003a78 <_ZN14rosserial_msgs9TopicInfoC1Ev>
		int i;
		for (i = 0; i < MAX_PUBLISHERS; i++) {
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	2b18      	cmp	r3, #24
 8005bf8:	dc63      	bgt.n	8005cc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
			if (publishers[i] != 0) // non-empty slot
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d056      	beq.n	8005cba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
					{
				ti.topic_id = publishers[i]->id_;
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	823b      	strh	r3, [r7, #16]
				ti.topic_name = (char*) publishers[i]->topic_;
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	617b      	str	r3, [r7, #20]
				ti.message_type = (char*) publishers[i]->msg_->getType();
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	6859      	ldr	r1, [r3, #4]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3308      	adds	r3, #8
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4608      	mov	r0, r1
 8005c5a:	4798      	blx	r3
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	61bb      	str	r3, [r7, #24]
				ti.md5sum = (char*) publishers[i]->msg_->getMD5();
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	6859      	ldr	r1, [r3, #4]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	330c      	adds	r3, #12
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4608      	mov	r0, r1
 8005c88:	4798      	blx	r3
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	61fb      	str	r3, [r7, #28]
				ti.buffer_size = OUTPUT_SIZE;
 8005c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c92:	623b      	str	r3, [r7, #32]
				publish(publishers[i]->getEndpointType(), &ti);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681c      	ldr	r4, [r3, #0]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fe fc46 	bl	800453a <_ZN3ros9Publisher15getEndpointTypeEv>
 8005cae:	4601      	mov	r1, r0
 8005cb0:	f107 030c 	add.w	r3, r7, #12
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	47a0      	blx	r4
		for (i = 0; i < MAX_PUBLISHERS; i++) {
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc0:	e798      	b.n	8005bf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
			}
		}
		for (i = 0; i < MAX_SUBSCRIBERS; i++) {
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	2b18      	cmp	r3, #24
 8005cca:	dc5f      	bgt.n	8005d8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
			if (subscribers[i] != 0) // non-empty slot
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d053      	beq.n	8005d84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
					{
				ti.topic_id = subscribers[i]->id_;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	823b      	strh	r3, [r7, #16]
				ti.topic_name = (char*) subscribers[i]->topic_;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	617b      	str	r3, [r7, #20]
				ti.message_type = (char*) subscribers[i]->getMsgType();
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d02:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005d06:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3308      	adds	r3, #8
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4608      	mov	r0, r1
 8005d1e:	4798      	blx	r3
 8005d20:	4603      	mov	r3, r0
 8005d22:	61bb      	str	r3, [r7, #24]
				ti.md5sum = (char*) subscribers[i]->getMsgMD5();
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d28:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005d2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d34:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	330c      	adds	r3, #12
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4608      	mov	r0, r1
 8005d44:	4798      	blx	r3
 8005d46:	4603      	mov	r3, r0
 8005d48:	61fb      	str	r3, [r7, #28]
				ti.buffer_size = INPUT_SIZE;
 8005d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d4e:	623b      	str	r3, [r7, #32]
				publish(subscribers[i]->getEndpointType(), &ti);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681c      	ldr	r4, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d5a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005d5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d66:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3304      	adds	r3, #4
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4608      	mov	r0, r1
 8005d76:	4798      	blx	r3
 8005d78:	4601      	mov	r1, r0
 8005d7a:	f107 030c 	add.w	r3, r7, #12
 8005d7e:	461a      	mov	r2, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	47a0      	blx	r4
		for (i = 0; i < MAX_SUBSCRIBERS; i++) {
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	3301      	adds	r3, #1
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
 8005d8a:	e79c      	b.n	8005cc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
			}
		}
		configured_ = true;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
	}
 8005d94:	bf00      	nop
 8005d96:	372c      	adds	r7, #44	; 0x2c
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd90      	pop	{r4, r7, pc}

08005d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
	void syncTime(uint8_t *data) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
		std_msgs::Time t;
 8005da6:	f107 0308 	add.w	r3, r7, #8
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fd fd74 	bl	8003898 <_ZN8std_msgs4TimeC1Ev>
		uint32_t offset = hardware_.time() - rt_time;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3304      	adds	r3, #4
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fe fce9 	bl	800478c <_ZN13STM32Hardware4timeEv>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]
		t.deserialize(data);
 8005dc6:	f107 0308 	add.w	r3, r7, #8
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fd fdd3 	bl	8003978 <_ZN8std_msgs4Time11deserializeEPh>
		t.data.sec += offset / 1000;
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	4915      	ldr	r1, [pc, #84]	; (8005e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8005dd8:	fba1 1303 	umull	r1, r3, r1, r3
 8005ddc:	099b      	lsrs	r3, r3, #6
 8005dde:	4413      	add	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]
		t.data.nsec += (offset % 1000) * 1000000UL;
 8005de2:	6939      	ldr	r1, [r7, #16]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4b11      	ldr	r3, [pc, #68]	; (8005e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8005de8:	fba3 0302 	umull	r0, r3, r3, r2
 8005dec:	099b      	lsrs	r3, r3, #6
 8005dee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005df2:	fb00 f303 	mul.w	r3, r0, r3
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	4a0d      	ldr	r2, [pc, #52]	; (8005e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8005dfa:	fb02 f303 	mul.w	r3, r2, r3
 8005dfe:	440b      	add	r3, r1
 8005e00:	613b      	str	r3, [r7, #16]
		this->setNow(t.data);
 8005e02:	f107 0308 	add.w	r3, r7, #8
 8005e06:	3304      	adds	r3, #4
 8005e08:	4619      	mov	r1, r3
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f8a6 	bl	8005f5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
		last_sync_receive_time = hardware_.time();
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3304      	adds	r3, #4
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fe fcb9 	bl	800478c <_ZN13STM32Hardware4timeEv>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
	}
 8005e22:	bf00      	nop
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	10624dd3 	.word	0x10624dd3
 8005e30:	000f4240 	.word	0x000f4240

08005e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

	virtual int publish(int id, const Msg *msg) {
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
		if (id >= 100 && !configured_)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b63      	cmp	r3, #99	; 0x63
 8005e44:	dd09      	ble.n	8005e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8005e4c:	f083 0301 	eor.w	r3, r3, #1
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
			return 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	e079      	b.n	8005f4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

		/* serialize message */
		int l = msg->serialize(message_out + 7);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8005e66:	3207      	adds	r2, #7
 8005e68:	4611      	mov	r1, r2
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	4798      	blx	r3
 8005e6e:	6178      	str	r0, [r7, #20]

		/* setup the header */
		message_out[0] = 0xff;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	22ff      	movs	r2, #255	; 0xff
 8005e74:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
		message_out[1] = PROTOCOL_VER;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	22fe      	movs	r2, #254	; 0xfe
 8005e7c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
		message_out[2] = (uint8_t) ((uint16_t) l & 255);
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
		message_out[3] = (uint8_t) ((uint16_t) l >> 8);
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
		message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8005ea6:	4413      	add	r3, r2
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	43db      	mvns	r3, r3
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
		message_out[5] = (uint8_t) ((int16_t) id & 255);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
		message_out[6] = (uint8_t) ((int16_t) id >> 8);
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	b21b      	sxth	r3, r3
 8005ec2:	121b      	asrs	r3, r3, #8
 8005ec4:	b21b      	sxth	r3, r3
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

		/* calculate checksum */
		int chk = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	61fb      	str	r3, [r7, #28]
		for (int i = 5; i < l + 7; i++)
 8005ed2:	2305      	movs	r3, #5
 8005ed4:	61bb      	str	r3, [r7, #24]
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	3306      	adds	r3, #6
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	dc0d      	bgt.n	8005efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
			chk += message_out[i];
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	461a      	mov	r2, r3
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	61fb      	str	r3, [r7, #28]
		for (int i = 5; i < l + 7; i++)
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	61bb      	str	r3, [r7, #24]
 8005efa:	e7ec      	b.n	8005ed6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
		l += 7;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	3307      	adds	r3, #7
 8005f00:	617b      	str	r3, [r7, #20]
		message_out[l++] = 255 - (chk % 256);
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	425a      	negs	r2, r3
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	bf58      	it	pl
 8005f0c:	4253      	negpl	r3, r2
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	1c59      	adds	r1, r3, #1
 8005f14:	6179      	str	r1, [r7, #20]
 8005f16:	43d2      	mvns	r2, r2
 8005f18:	b2d1      	uxtb	r1, r2
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	460a      	mov	r2, r1
 8005f20:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

		if (l <= OUTPUT_SIZE) {
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f2a:	dc0a      	bgt.n	8005f42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
			hardware_.write(message_out, l);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	1d18      	adds	r0, r3, #4
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	f7fe fbe1 	bl	8004700 <_ZN13STM32Hardware5writeEPhi>
			return l;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	e005      	b.n	8005f4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
		}
		else {
			logerror(
 8005f42:	4905      	ldr	r1, [pc, #20]	; (8005f58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 f849 	bl	8005fdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
					"Message from device dropped: message larger than buffer.");
			return -1;
 8005f4a:	f04f 33ff 	mov.w	r3, #4294967295
		}
	}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3720      	adds	r7, #32
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	080141b8 	.word	0x080141b8

08005f5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
	void setNow(Time &new_now) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
		uint32_t ms = hardware_.time();
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe fc0e 	bl	800478c <_ZN13STM32Hardware4timeEv>
 8005f70:	60f8      	str	r0, [r7, #12]
		sec_offset = new_now.sec - ms / 1000 - 1;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4915      	ldr	r1, [pc, #84]	; (8005fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8005f7a:	fba1 1303 	umull	r1, r3, r1, r3
 8005f7e:	099b      	lsrs	r3, r3, #6
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	1e5a      	subs	r2, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	6859      	ldr	r1, [r3, #4]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4b0f      	ldr	r3, [pc, #60]	; (8005fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8005f92:	fba3 0302 	umull	r0, r3, r3, r2
 8005f96:	099b      	lsrs	r3, r3, #6
 8005f98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f9c:	fb00 f303 	mul.w	r3, r0, r3
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	4a0c      	ldr	r2, [pc, #48]	; (8005fd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8005fa4:	fb02 f303 	mul.w	r3, r2, r3
 8005fa8:	1aca      	subs	r2, r1, r3
 8005faa:	4b0b      	ldr	r3, [pc, #44]	; (8005fd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8005fac:	4413      	add	r3, r2
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
		normalizeSecNSec(sec_offset, nsec_offset);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f7fa feaa 	bl	8000d1c <_ZN3ros16normalizeSecNSecERmS0_>
	}
 8005fc8:	bf00      	nop
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	10624dd3 	.word	0x10624dd3
 8005fd4:	000f4240 	.word	0x000f4240
 8005fd8:	3b9aca00 	.word	0x3b9aca00

08005fdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
		log(rosserial_msgs::Log::INFO, msg);
	}
	void logwarn(const char *msg) {
		log(rosserial_msgs::Log::WARN, msg);
	}
	void logerror(const char *msg) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
		log(rosserial_msgs::Log::ERROR, msg);
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	2103      	movs	r1, #3
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f804 	bl	8005ff8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
	}
 8005ff0:	bf00      	nop
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
	void log(char byte, const char *msg) {
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b088      	sub	sp, #32
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	460b      	mov	r3, r1
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	72fb      	strb	r3, [r7, #11]
		rosserial_msgs::Log l;
 8006006:	f107 0314 	add.w	r3, r7, #20
 800600a:	4618      	mov	r0, r3
 800600c:	f7fd fef8 	bl	8003e00 <_ZN14rosserial_msgs3LogC1Ev>
		l.level = byte;
 8006010:	7afb      	ldrb	r3, [r7, #11]
 8006012:	763b      	strb	r3, [r7, #24]
		l.msg = (char*) msg;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	61fb      	str	r3, [r7, #28]
		publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f107 0214 	add.w	r2, r7, #20
 8006022:	2107      	movs	r1, #7
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	4798      	blx	r3
	}
 8006028:	bf00      	nop
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <_Z41__static_initialization_and_destruction_0ii>:
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d131      	bne.n	80060a4 <_Z41__static_initialization_and_destruction_0ii+0x74>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006046:	4293      	cmp	r3, r2
 8006048:	d12c      	bne.n	80060a4 <_Z41__static_initialization_and_destruction_0ii+0x74>
std_msgs::Int16MultiArray feedback;
 800604a:	4818      	ldr	r0, [pc, #96]	; (80060ac <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800604c:	f7fe fe2e 	bl	8004cac <_ZN8std_msgs15Int16MultiArrayC1Ev>
std_msgs::Int16MultiArray gate;
 8006050:	4817      	ldr	r0, [pc, #92]	; (80060b0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006052:	f7fe fe2b 	bl	8004cac <_ZN8std_msgs15Int16MultiArrayC1Ev>
std_msgs::Int16MultiArray door;
 8006056:	4817      	ldr	r0, [pc, #92]	; (80060b4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006058:	f7fe fe28 	bl	8004cac <_ZN8std_msgs15Int16MultiArrayC1Ev>
std_msgs::String check;
 800605c:	4816      	ldr	r0, [pc, #88]	; (80060b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800605e:	f7fe ff43 	bl	8004ee8 <_ZN8std_msgs6StringC1Ev>
ros::NodeHandle nh;
 8006062:	4816      	ldr	r0, [pc, #88]	; (80060bc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006064:	f7ff fa8e 	bl	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::String> sub("mission1", cake_callback);
 8006068:	2301      	movs	r3, #1
 800606a:	4a15      	ldr	r2, [pc, #84]	; (80060c0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800606c:	4915      	ldr	r1, [pc, #84]	; (80060c4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800606e:	4816      	ldr	r0, [pc, #88]	; (80060c8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006070:	f7ff fb18 	bl	80056a4 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub("donefullness1", &feedback);
 8006074:	2300      	movs	r3, #0
 8006076:	4a0d      	ldr	r2, [pc, #52]	; (80060ac <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8006078:	4914      	ldr	r1, [pc, #80]	; (80060cc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800607a:	4815      	ldr	r0, [pc, #84]	; (80060d0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800607c:	f7fe fa32 	bl	80044e4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub1("lightgate1", &gate);
 8006080:	2300      	movs	r3, #0
 8006082:	4a0b      	ldr	r2, [pc, #44]	; (80060b0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006084:	4913      	ldr	r1, [pc, #76]	; (80060d4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8006086:	4814      	ldr	r0, [pc, #80]	; (80060d8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8006088:	f7fe fa2c 	bl	80044e4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub2("hand_door1", &door);
 800608c:	2300      	movs	r3, #0
 800608e:	4a09      	ldr	r2, [pc, #36]	; (80060b4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006090:	4912      	ldr	r1, [pc, #72]	; (80060dc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8006092:	4813      	ldr	r0, [pc, #76]	; (80060e0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8006094:	f7fe fa26 	bl	80044e4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub3("handshakier1", &check);
 8006098:	2300      	movs	r3, #0
 800609a:	4a07      	ldr	r2, [pc, #28]	; (80060b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800609c:	4911      	ldr	r1, [pc, #68]	; (80060e4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800609e:	4812      	ldr	r0, [pc, #72]	; (80060e8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80060a0:	f7fe fa20 	bl	80044e4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80060a4:	bf00      	nop
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20000a3c 	.word	0x20000a3c
 80060b0:	20000a6c 	.word	0x20000a6c
 80060b4:	20000a9c 	.word	0x20000a9c
 80060b8:	20000acc 	.word	0x20000acc
 80060bc:	20000ad4 	.word	0x20000ad4
 80060c0:	08005021 	.word	0x08005021
 80060c4:	080141f4 	.word	0x080141f4
 80060c8:	20001410 	.word	0x20001410
 80060cc:	08014200 	.word	0x08014200
 80060d0:	2000142c 	.word	0x2000142c
 80060d4:	08014210 	.word	0x08014210
 80060d8:	20001440 	.word	0x20001440
 80060dc:	0801421c 	.word	0x0801421c
 80060e0:	20001454 	.word	0x20001454
 80060e4:	08014228 	.word	0x08014228
 80060e8:	20001468 	.word	0x20001468

080060ec <_ZN3ros10SubscriberIN8std_msgs6StringEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	330c      	adds	r3, #12
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fe ff34 	bl	8004f6a <_ZN8std_msgs6String11deserializeEPh>
    this->cb_(msg);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	320c      	adds	r2, #12
 800610a:	4610      	mov	r0, r2
 800610c:	4798      	blx	r3
  }
 800610e:	bf00      	nop
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <_ZN3ros10SubscriberIN8std_msgs6StringEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	699b      	ldr	r3, [r3, #24]
  }
 8006122:	4618      	mov	r0, r3
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <_ZN3ros10SubscriberIN8std_msgs6StringEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800612e:	b580      	push	{r7, lr}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	330c      	adds	r3, #12
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe ff54 	bl	8004fe8 <_ZN8std_msgs6String7getTypeEv>
 8006140:	4603      	mov	r3, r0
  }
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <_ZN3ros10SubscriberIN8std_msgs6StringEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	330c      	adds	r3, #12
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe ff54 	bl	8005004 <_ZN8std_msgs6String6getMD5Ev>
 800615c:	4603      	mov	r3, r0
  }
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
	virtual bool connected() {
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
		return configured_;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
	}
 8006174:	4618      	mov	r0, r3
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <_GLOBAL__sub_I_handshake>:
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
 8006184:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006188:	2001      	movs	r0, #1
 800618a:	f7ff ff51 	bl	8006030 <_Z41__static_initialization_and_destruction_0ii>
 800618e:	bd80      	pop	{r7, pc}

08006190 <mainrun>:
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart3;
extern ADC_HandleTypeDef hadc1;
extern DMA_HandleTypeDef hdma_adc1;

void mainrun() {
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Step1_EN_Port, Step1_EN_Pin, GPIO_PIN_RESET);
 8006194:	2200      	movs	r2, #0
 8006196:	2108      	movs	r1, #8
 8006198:	4889      	ldr	r0, [pc, #548]	; (80063c0 <mainrun+0x230>)
 800619a:	f003 f965 	bl	8009468 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim6); //clock for step1
 800619e:	4889      	ldr	r0, [pc, #548]	; (80063c4 <mainrun+0x234>)
 80061a0:	f006 fc3c 	bl	800ca1c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7); //clock for feedback
 80061a4:	4888      	ldr	r0, [pc, #544]	; (80063c8 <mainrun+0x238>)
 80061a6:	f006 fc39 	bl	800ca1c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 80061aa:	4888      	ldr	r0, [pc, #544]	; (80063cc <mainrun+0x23c>)
 80061ac:	f006 fc36 	bl	800ca1c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10); //clock for communicate
 80061b0:	4887      	ldr	r0, [pc, #540]	; (80063d0 <mainrun+0x240>)
 80061b2:	f006 fc33 	bl	800ca1c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80061b6:	4887      	ldr	r0, [pc, #540]	; (80063d4 <mainrun+0x244>)
 80061b8:	f006 fc30 	bl	800ca1c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); //for pump1 PA0
 80061bc:	210c      	movs	r1, #12
 80061be:	4886      	ldr	r0, [pc, #536]	; (80063d8 <mainrun+0x248>)
 80061c0:	f006 fcec 	bl	800cb9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //for pump1 PA0
 80061c4:	2100      	movs	r1, #0
 80061c6:	4885      	ldr	r0, [pc, #532]	; (80063dc <mainrun+0x24c>)
 80061c8:	f006 fce8 	bl	800cb9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //for valve1 PA1
 80061cc:	2104      	movs	r1, #4
 80061ce:	4883      	ldr	r0, [pc, #524]	; (80063dc <mainrun+0x24c>)
 80061d0:	f006 fce4 	bl	800cb9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for pump4 PC6
 80061d4:	2100      	movs	r1, #0
 80061d6:	4882      	ldr	r0, [pc, #520]	; (80063e0 <mainrun+0x250>)
 80061d8:	f006 fce0 	bl	800cb9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for valve4 PC7
 80061dc:	2104      	movs	r1, #4
 80061de:	4880      	ldr	r0, [pc, #512]	; (80063e0 <mainrun+0x250>)
 80061e0:	f006 fcdc 	bl	800cb9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //for pump3 PC8
 80061e4:	2108      	movs	r1, #8
 80061e6:	487e      	ldr	r0, [pc, #504]	; (80063e0 <mainrun+0x250>)
 80061e8:	f006 fcd8 	bl	800cb9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); //for valve3 Pc9
 80061ec:	210c      	movs	r1, #12
 80061ee:	487c      	ldr	r0, [pc, #496]	; (80063e0 <mainrun+0x250>)
 80061f0:	f006 fcd4 	bl	800cb9c <HAL_TIM_PWM_Start>
//	hole[1] = 'y';
//	hole[2] = 'p';
//	hole[3] = 'b';
	//initialization all the mosfet
	//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_cake, 3);
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80061f4:	4b78      	ldr	r3, [pc, #480]	; (80063d8 <mainrun+0x248>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2200      	movs	r2, #0
 80061fa:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80061fc:	4b77      	ldr	r3, [pc, #476]	; (80063dc <mainrun+0x24c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2200      	movs	r2, #0
 8006202:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8006204:	4b75      	ldr	r3, [pc, #468]	; (80063dc <mainrun+0x24c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2200      	movs	r2, #0
 800620a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800620c:	4b74      	ldr	r3, [pc, #464]	; (80063e0 <mainrun+0x250>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2200      	movs	r2, #0
 8006212:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8006214:	4b72      	ldr	r3, [pc, #456]	; (80063e0 <mainrun+0x250>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2200      	movs	r2, #0
 800621a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 800621c:	4b70      	ldr	r3, [pc, #448]	; (80063e0 <mainrun+0x250>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2200      	movs	r2, #0
 8006222:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8006224:	4b6e      	ldr	r3, [pc, #440]	; (80063e0 <mainrun+0x250>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2200      	movs	r2, #0
 800622a:	641a      	str	r2, [r3, #64]	; 0x40
	VL53_Init();
 800622c:	f7fa fe02 	bl	8000e34 <VL53_Init>
	//initialization all the servo
	UART_Send_SetMotorPosition(7, 1200, 300);
 8006230:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006234:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006238:	2007      	movs	r0, #7
 800623a:	f7fa fdb7 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(4, 1200, 300);
 800623e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006242:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006246:	2004      	movs	r0, #4
 8006248:	f7fa fdb0 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(3, 1200, 300);
 800624c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006250:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006254:	2003      	movs	r0, #3
 8006256:	f7fa fda9 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(5, 1200, 300);
 800625a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800625e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006262:	2005      	movs	r0, #5
 8006264:	f7fa fda2 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(6, 1000, 300);
 8006268:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800626c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006270:	2006      	movs	r0, #6
 8006272:	f7fa fd9b 	bl	8000dac <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 8006276:	4b5b      	ldr	r3, [pc, #364]	; (80063e4 <mainrun+0x254>)
 8006278:	2201      	movs	r2, #1
 800627a:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0) {
 800627c:	4b59      	ldr	r3, [pc, #356]	; (80063e4 <mainrun+0x254>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d000      	beq.n	8006286 <mainrun+0xf6>
 8006284:	e7fa      	b.n	800627c <mainrun+0xec>
			break;
 8006286:	bf00      	nop
		}

	}
	UART_Send_SetMotorPosition(7, 1250, 300);
 8006288:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800628c:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8006290:	2007      	movs	r0, #7
 8006292:	f7fa fd8b 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(4, 1250, 300);
 8006296:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800629a:	f240 41e2 	movw	r1, #1250	; 0x4e2
 800629e:	2004      	movs	r0, #4
 80062a0:	f7fa fd84 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(3, 1250, 300);
 80062a4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80062a8:	f240 41e2 	movw	r1, #1250	; 0x4e2
 80062ac:	2003      	movs	r0, #3
 80062ae:	f7fa fd7d 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(5, 1250, 300);
 80062b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80062b6:	f240 41e2 	movw	r1, #1250	; 0x4e2
 80062ba:	2005      	movs	r0, #5
 80062bc:	f7fa fd76 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(6, 2100, 300);
 80062c0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80062c4:	f640 0134 	movw	r1, #2100	; 0x834
 80062c8:	2006      	movs	r0, #6
 80062ca:	f7fa fd6f 	bl	8000dac <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 80062ce:	4b45      	ldr	r3, [pc, #276]	; (80063e4 <mainrun+0x254>)
 80062d0:	2201      	movs	r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0) {
 80062d4:	4b43      	ldr	r3, [pc, #268]	; (80063e4 <mainrun+0x254>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d000      	beq.n	80062de <mainrun+0x14e>
 80062dc:	e7fa      	b.n	80062d4 <mainrun+0x144>
			break;
 80062de:	bf00      	nop
		}

	}
	UART_Send_SetMotorPosition(7, 1300, 300);
 80062e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80062e4:	f240 5114 	movw	r1, #1300	; 0x514
 80062e8:	2007      	movs	r0, #7
 80062ea:	f7fa fd5f 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(4, 1200, 300);
 80062ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80062f2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80062f6:	2004      	movs	r0, #4
 80062f8:	f7fa fd58 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(3, 1200, 300);
 80062fc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006300:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006304:	2003      	movs	r0, #3
 8006306:	f7fa fd51 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(5, 1200, 300);
 800630a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800630e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006312:	2005      	movs	r0, #5
 8006314:	f7fa fd4a 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(6, 1000, 300);
 8006318:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800631c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006320:	2006      	movs	r0, #6
 8006322:	f7fa fd43 	bl	8000dac <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 8006326:	4b2f      	ldr	r3, [pc, #188]	; (80063e4 <mainrun+0x254>)
 8006328:	2201      	movs	r2, #1
 800632a:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0) {
 800632c:	4b2d      	ldr	r3, [pc, #180]	; (80063e4 <mainrun+0x254>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d000      	beq.n	8006336 <mainrun+0x1a6>
 8006334:	e7fa      	b.n	800632c <mainrun+0x19c>
			break;
 8006336:	bf00      	nop
		}

	}
	VL53_FirstMeasurement();
 8006338:	f7fa fe76 	bl	8001028 <VL53_FirstMeasurement>
//		}
//		HAL_Delay(1000);
//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20000 * 255);

//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
		HAL_GPIO_WritePin(Step1_EN_Port, Step1_EN_Pin, GPIO_PIN_RESET);
 800633c:	2200      	movs	r2, #0
 800633e:	2108      	movs	r1, #8
 8006340:	481f      	ldr	r0, [pc, #124]	; (80063c0 <mainrun+0x230>)
 8006342:	f003 f891 	bl	8009468 <HAL_GPIO_WritePin>
//			k = 1;
//		}
//		rotate_the_ring(rotate);
//		states = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
//		HAL_Delay(5000);
		if (servo_delay_temp == 0) {
 8006346:	4b27      	ldr	r3, [pc, #156]	; (80063e4 <mainrun+0x254>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	f040 809e 	bne.w	800648c <mainrun+0x2fc>

			if (b_bool == 1 && y_bool == 1 && p_bool == 1 && h_bool == 1) {
 8006350:	4b25      	ldr	r3, [pc, #148]	; (80063e8 <mainrun+0x258>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b01      	cmp	r3, #1
 8006356:	f040 8081 	bne.w	800645c <mainrun+0x2cc>
 800635a:	4b24      	ldr	r3, [pc, #144]	; (80063ec <mainrun+0x25c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d17c      	bne.n	800645c <mainrun+0x2cc>
 8006362:	4b23      	ldr	r3, [pc, #140]	; (80063f0 <mainrun+0x260>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d178      	bne.n	800645c <mainrun+0x2cc>
 800636a:	4b22      	ldr	r3, [pc, #136]	; (80063f4 <mainrun+0x264>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d174      	bne.n	800645c <mainrun+0x2cc>

				judge_the_empty_and_order();
 8006372:	f7fb ff9f 	bl	80022b4 <judge_the_empty_and_order>
				cake_check(4, 0);
 8006376:	2100      	movs	r1, #0
 8006378:	2004      	movs	r0, #4
 800637a:	f7fb fbe5 	bl	8001b48 <cake_check>

				mission_array[0] = 3;
 800637e:	4b1e      	ldr	r3, [pc, #120]	; (80063f8 <mainrun+0x268>)
 8006380:	2203      	movs	r2, #3
 8006382:	801a      	strh	r2, [r3, #0]
				temp_pub = 0;
 8006384:	4b1d      	ldr	r3, [pc, #116]	; (80063fc <mainrun+0x26c>)
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]
				//	rotate_the_ring(2);
				//	UART_Send_SetMotorPosition(5, 1800, 1500);

				Tower_of_Hanoi(cake_order);
 800638a:	4b1d      	ldr	r3, [pc, #116]	; (8006400 <mainrun+0x270>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4618      	mov	r0, r3
 8006390:	f7fc fb7e 	bl	8002a90 <Tower_of_Hanoi>
				mission_array[0] = 2;
 8006394:	4b18      	ldr	r3, [pc, #96]	; (80063f8 <mainrun+0x268>)
 8006396:	2202      	movs	r2, #2
 8006398:	801a      	strh	r2, [r3, #0]
				temp_pub = 0;
 800639a:	4b18      	ldr	r3, [pc, #96]	; (80063fc <mainrun+0x26c>)
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
				if (num == 1) {
 80063a0:	4b18      	ldr	r3, [pc, #96]	; (8006404 <mainrun+0x274>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d103      	bne.n	80063b0 <mainrun+0x220>
					rotate_the_ring(3);
 80063a8:	2003      	movs	r0, #3
 80063aa:	f7fb fd75 	bl	8001e98 <rotate_the_ring>
 80063ae:	e032      	b.n	8006416 <mainrun+0x286>
				}
				else if (num == 2) {
 80063b0:	4b14      	ldr	r3, [pc, #80]	; (8006404 <mainrun+0x274>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d127      	bne.n	8006408 <mainrun+0x278>
					rotate_the_ring(2);
 80063b8:	2002      	movs	r0, #2
 80063ba:	f7fb fd6d 	bl	8001e98 <rotate_the_ring>
 80063be:	e02a      	b.n	8006416 <mainrun+0x286>
 80063c0:	40020400 	.word	0x40020400
 80063c4:	20001688 	.word	0x20001688
 80063c8:	200016d0 	.word	0x200016d0
 80063cc:	20001718 	.word	0x20001718
 80063d0:	20001760 	.word	0x20001760
 80063d4:	200017f0 	.word	0x200017f0
 80063d8:	200015b0 	.word	0x200015b0
 80063dc:	200015f8 	.word	0x200015f8
 80063e0:	20001640 	.word	0x20001640
 80063e4:	20001554 	.word	0x20001554
 80063e8:	20001524 	.word	0x20001524
 80063ec:	20001528 	.word	0x20001528
 80063f0:	2000152c 	.word	0x2000152c
 80063f4:	20001530 	.word	0x20001530
 80063f8:	20001560 	.word	0x20001560
 80063fc:	20001558 	.word	0x20001558
 8006400:	20000010 	.word	0x20000010
 8006404:	200014f8 	.word	0x200014f8
				}
				else if (num == 3) {
 8006408:	4b3f      	ldr	r3, [pc, #252]	; (8006508 <mainrun+0x378>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b03      	cmp	r3, #3
 800640e:	d102      	bne.n	8006416 <mainrun+0x286>
					rotate_the_ring(1);
 8006410:	2001      	movs	r0, #1
 8006412:	f7fb fd41 	bl	8001e98 <rotate_the_ring>
				}
				HAL_Delay(5000);
 8006416:	f241 3088 	movw	r0, #5000	; 0x1388
 800641a:	f001 fd55 	bl	8007ec8 <HAL_Delay>
				anglebefore = 0;
 800641e:	4b3b      	ldr	r3, [pc, #236]	; (800650c <mainrun+0x37c>)
 8006420:	2200      	movs	r2, #0
 8006422:	601a      	str	r2, [r3, #0]
				rotate_dir = 1;
 8006424:	4b3a      	ldr	r3, [pc, #232]	; (8006510 <mainrun+0x380>)
 8006426:	2201      	movs	r2, #1
 8006428:	601a      	str	r2, [r3, #0]
				cake_order = -1;
 800642a:	4b3a      	ldr	r3, [pc, #232]	; (8006514 <mainrun+0x384>)
 800642c:	f04f 32ff 	mov.w	r2, #4294967295
 8006430:	601a      	str	r2, [r3, #0]
				rotate_state[0] = 0;
 8006432:	4b39      	ldr	r3, [pc, #228]	; (8006518 <mainrun+0x388>)
 8006434:	2200      	movs	r2, #0
 8006436:	801a      	strh	r2, [r3, #0]
				rotate_state[1] = 0;
 8006438:	4b37      	ldr	r3, [pc, #220]	; (8006518 <mainrun+0x388>)
 800643a:	2200      	movs	r2, #0
 800643c:	805a      	strh	r2, [r3, #2]
				rotate_state[2] = 0;
 800643e:	4b36      	ldr	r3, [pc, #216]	; (8006518 <mainrun+0x388>)
 8006440:	2200      	movs	r2, #0
 8006442:	809a      	strh	r2, [r3, #4]
				b_bool = 0;
 8006444:	4b35      	ldr	r3, [pc, #212]	; (800651c <mainrun+0x38c>)
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
				y_bool = 0;
 800644a:	4b35      	ldr	r3, [pc, #212]	; (8006520 <mainrun+0x390>)
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]
				p_bool = 0;
 8006450:	4b34      	ldr	r3, [pc, #208]	; (8006524 <mainrun+0x394>)
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]
				h_bool = 0;
 8006456:	4b34      	ldr	r3, [pc, #208]	; (8006528 <mainrun+0x398>)
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
			}

//		 close all the mosfet
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800645c:	4b33      	ldr	r3, [pc, #204]	; (800652c <mainrun+0x39c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2200      	movs	r2, #0
 8006462:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8006464:	4b31      	ldr	r3, [pc, #196]	; (800652c <mainrun+0x39c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2200      	movs	r2, #0
 800646a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800646c:	4b30      	ldr	r3, [pc, #192]	; (8006530 <mainrun+0x3a0>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2200      	movs	r2, #0
 8006472:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8006474:	4b2e      	ldr	r3, [pc, #184]	; (8006530 <mainrun+0x3a0>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2200      	movs	r2, #0
 800647a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 800647c:	4b2c      	ldr	r3, [pc, #176]	; (8006530 <mainrun+0x3a0>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2200      	movs	r2, #0
 8006482:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8006484:	4b2a      	ldr	r3, [pc, #168]	; (8006530 <mainrun+0x3a0>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2200      	movs	r2, #0
 800648a:	641a      	str	r2, [r3, #64]	; 0x40
//			finish_all_motion();

		}
		if (putcherry == 1 && finish != 1) {
 800648c:	4b29      	ldr	r3, [pc, #164]	; (8006534 <mainrun+0x3a4>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d128      	bne.n	80064e6 <mainrun+0x356>
 8006494:	4b28      	ldr	r3, [pc, #160]	; (8006538 <mainrun+0x3a8>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d024      	beq.n	80064e6 <mainrun+0x356>
			steady = 0;
 800649c:	4b27      	ldr	r3, [pc, #156]	; (800653c <mainrun+0x3ac>)
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]
			cake_check(0, 0);
 80064a2:	2100      	movs	r1, #0
 80064a4:	2000      	movs	r0, #0
 80064a6:	f7fb fb4f 	bl	8001b48 <cake_check>
			cake_check(1, 0);
 80064aa:	2100      	movs	r1, #0
 80064ac:	2001      	movs	r0, #1
 80064ae:	f7fb fb4b 	bl	8001b48 <cake_check>
			cake_check(2, 0);
 80064b2:	2100      	movs	r1, #0
 80064b4:	2002      	movs	r0, #2
 80064b6:	f7fb fb47 	bl	8001b48 <cake_check>
			cake_check(3, 0);
 80064ba:	2100      	movs	r1, #0
 80064bc:	2003      	movs	r0, #3
 80064be:	f7fb fb43 	bl	8001b48 <cake_check>
			put_the_cherry(0);
 80064c2:	2000      	movs	r0, #0
 80064c4:	f7fb fe36 	bl	8002134 <put_the_cherry>
			put_the_cherry(1);
 80064c8:	2001      	movs	r0, #1
 80064ca:	f7fb fe33 	bl	8002134 <put_the_cherry>
			put_the_cherry(2);
 80064ce:	2002      	movs	r0, #2
 80064d0:	f7fb fe30 	bl	8002134 <put_the_cherry>
			put_the_cherry(3);
 80064d4:	2003      	movs	r0, #3
 80064d6:	f7fb fe2d 	bl	8002134 <put_the_cherry>
			rotate_the_ring(0);
 80064da:	2000      	movs	r0, #0
 80064dc:	f7fb fcdc 	bl	8001e98 <rotate_the_ring>
			putcherry = 0;
 80064e0:	4b14      	ldr	r3, [pc, #80]	; (8006534 <mainrun+0x3a4>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	601a      	str	r2, [r3, #0]
//			UART_Send_SetMotorPosition(4, 1200, 300);
//			UART_Send_SetMotorPosition(3, 1200, 300);
//			UART_Send_SetMotorPosition(5, 1200, 300);
//			UART_Send_SetMotorPosition(6, 950, 300);
//		}
		if (finish == 1) {
 80064e6:	4b14      	ldr	r3, [pc, #80]	; (8006538 <mainrun+0x3a8>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d101      	bne.n	80064f2 <mainrun+0x362>
			finish_all_motion();
 80064ee:	f7fc ff23 	bl	8003338 <finish_all_motion>
		}
		if (disguise == 1) {
 80064f2:	4b13      	ldr	r3, [pc, #76]	; (8006540 <mainrun+0x3b0>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	f47f af20 	bne.w	800633c <mainrun+0x1ac>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20000 * 255);
 80064fc:	4b11      	ldr	r3, [pc, #68]	; (8006544 <mainrun+0x3b4>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a11      	ldr	r2, [pc, #68]	; (8006548 <mainrun+0x3b8>)
 8006502:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(Step1_EN_Port, Step1_EN_Pin, GPIO_PIN_RESET);
 8006504:	e71a      	b.n	800633c <mainrun+0x1ac>
 8006506:	bf00      	nop
 8006508:	200014f8 	.word	0x200014f8
 800650c:	20001488 	.word	0x20001488
 8006510:	20001578 	.word	0x20001578
 8006514:	20000010 	.word	0x20000010
 8006518:	2000156c 	.word	0x2000156c
 800651c:	20001524 	.word	0x20001524
 8006520:	20001528 	.word	0x20001528
 8006524:	2000152c 	.word	0x2000152c
 8006528:	20001530 	.word	0x20001530
 800652c:	200015f8 	.word	0x200015f8
 8006530:	20001640 	.word	0x20001640
 8006534:	2000159c 	.word	0x2000159c
 8006538:	200014f4 	.word	0x200014f4
 800653c:	20000018 	.word	0x20000018
 8006540:	20001590 	.word	0x20001590
 8006544:	200015b0 	.word	0x200015b0
 8006548:	004dd1e0 	.word	0x004dd1e0

0800654c <HAL_GPIO_EXTI_Callback>:

		}
	}

}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	4603      	mov	r3, r0
 8006554:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_4) {            //1
 8006556:	88fb      	ldrh	r3, [r7, #6]
 8006558:	2b10      	cmp	r3, #16
 800655a:	d102      	bne.n	8006562 <HAL_GPIO_EXTI_Callback+0x16>
		rotate_state[0] = 1;
 800655c:	4b0b      	ldr	r3, [pc, #44]	; (800658c <HAL_GPIO_EXTI_Callback+0x40>)
 800655e:	2201      	movs	r2, #1
 8006560:	801a      	strh	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_10) {            //2
 8006562:	88fb      	ldrh	r3, [r7, #6]
 8006564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006568:	d102      	bne.n	8006570 <HAL_GPIO_EXTI_Callback+0x24>
		rotate_state[1] = 1;
 800656a:	4b08      	ldr	r3, [pc, #32]	; (800658c <HAL_GPIO_EXTI_Callback+0x40>)
 800656c:	2201      	movs	r2, #1
 800656e:	805a      	strh	r2, [r3, #2]
	}

	if (GPIO_Pin == GPIO_PIN_11) {            //3
 8006570:	88fb      	ldrh	r3, [r7, #6]
 8006572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006576:	d102      	bne.n	800657e <HAL_GPIO_EXTI_Callback+0x32>
		rotate_state[2] = 1;
 8006578:	4b04      	ldr	r3, [pc, #16]	; (800658c <HAL_GPIO_EXTI_Callback+0x40>)
 800657a:	2201      	movs	r2, #1
 800657c:	809a      	strh	r2, [r3, #4]
	}

}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	2000156c 	.word	0x2000156c

08006590 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a8f      	ldr	r2, [pc, #572]	; (80067dc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	f040 8195 	bne.w	80068ce <HAL_TIM_PeriodElapsedCallback+0x33e>

		ms1++;
 80065a4:	4b8e      	ldr	r3, [pc, #568]	; (80067e0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3301      	adds	r3, #1
 80065aa:	4a8d      	ldr	r2, [pc, #564]	; (80067e0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80065ac:	6013      	str	r3, [r2, #0]
		if (step != 0) {
 80065ae:	4b8d      	ldr	r3, [pc, #564]	; (80067e4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 818b 	beq.w	80068ce <HAL_TIM_PeriodElapsedCallback+0x33e>
			HAL_GPIO_WritePin(Step1_EN_Port, Step1_EN_Pin, GPIO_PIN_RESET);
 80065b8:	2200      	movs	r2, #0
 80065ba:	2108      	movs	r1, #8
 80065bc:	488a      	ldr	r0, [pc, #552]	; (80067e8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80065be:	f002 ff53 	bl	8009468 <HAL_GPIO_WritePin>
			if (dir_state1 == 1)
 80065c2:	4b8a      	ldr	r3, [pc, #552]	; (80067ec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d106      	bne.n	80065d8 <HAL_TIM_PeriodElapsedCallback+0x48>
				HAL_GPIO_WritePin(Step1_DIR_Port, Step1_DIR_Pin, GPIO_PIN_SET);
 80065ca:	2201      	movs	r2, #1
 80065cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80065d0:	4887      	ldr	r0, [pc, #540]	; (80067f0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80065d2:	f002 ff49 	bl	8009468 <HAL_GPIO_WritePin>
 80065d6:	e009      	b.n	80065ec <HAL_TIM_PeriodElapsedCallback+0x5c>
			else if (dir_state1 == 0)
 80065d8:	4b84      	ldr	r3, [pc, #528]	; (80067ec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d105      	bne.n	80065ec <HAL_TIM_PeriodElapsedCallback+0x5c>
				HAL_GPIO_WritePin(Step1_DIR_Port, Step1_DIR_Pin,
 80065e0:	2200      	movs	r2, #0
 80065e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80065e6:	4882      	ldr	r0, [pc, #520]	; (80067f0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80065e8:	f002 ff3e 	bl	8009468 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
			temp++;
 80065ec:	4b81      	ldr	r3, [pc, #516]	; (80067f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3301      	adds	r3, #1
 80065f2:	4a80      	ldr	r2, [pc, #512]	; (80067f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80065f4:	6013      	str	r3, [r2, #0]
			if (step_state1 == 1) {
 80065f6:	4b80      	ldr	r3, [pc, #512]	; (80067f8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d108      	bne.n	8006610 <HAL_TIM_PeriodElapsedCallback+0x80>
				HAL_GPIO_WritePin(Step1_STEP_Port, Step1_STEP_Pin,
 80065fe:	2200      	movs	r2, #0
 8006600:	2104      	movs	r1, #4
 8006602:	487e      	ldr	r0, [pc, #504]	; (80067fc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8006604:	f002 ff30 	bl	8009468 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);

				step_state1 = 0;
 8006608:	4b7b      	ldr	r3, [pc, #492]	; (80067f8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	e015      	b.n	800663c <HAL_TIM_PeriodElapsedCallback+0xac>
			}
			else if (step_state1 == 0) {
 8006610:	4b79      	ldr	r3, [pc, #484]	; (80067f8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d111      	bne.n	800663c <HAL_TIM_PeriodElapsedCallback+0xac>
				HAL_GPIO_WritePin(Step1_STEP_Port, Step1_STEP_Pin,
 8006618:	2201      	movs	r2, #1
 800661a:	2104      	movs	r1, #4
 800661c:	4877      	ldr	r0, [pc, #476]	; (80067fc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800661e:	f002 ff23 	bl	8009468 <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
				step_state1 = 1;
 8006622:	4b75      	ldr	r3, [pc, #468]	; (80067f8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006624:	2201      	movs	r2, #1
 8006626:	601a      	str	r2, [r3, #0]
				step--;
 8006628:	4b6e      	ldr	r3, [pc, #440]	; (80067e4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3b01      	subs	r3, #1
 800662e:	4a6d      	ldr	r2, [pc, #436]	; (80067e4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006630:	6013      	str	r3, [r2, #0]
				rotate_temp++;
 8006632:	4b73      	ldr	r3, [pc, #460]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3301      	adds	r3, #1
 8006638:	4a71      	ldr	r2, [pc, #452]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800663a:	6013      	str	r3, [r2, #0]
			}
			if (temp == 2) {
 800663c:	4b6d      	ldr	r3, [pc, #436]	; (80067f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d134      	bne.n	80066ae <HAL_TIM_PeriodElapsedCallback+0x11e>
				if (step > 300) {
 8006644:	4b67      	ldr	r3, [pc, #412]	; (80067e4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800664c:	dd18      	ble.n	8006680 <HAL_TIM_PeriodElapsedCallback+0xf0>
					arr = arr - 4;
 800664e:	4b6d      	ldr	r3, [pc, #436]	; (8006804 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3b04      	subs	r3, #4
 8006654:	4a6b      	ldr	r2, [pc, #428]	; (8006804 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8006656:	6013      	str	r3, [r2, #0]
					if (arr < 150)
 8006658:	4b6a      	ldr	r3, [pc, #424]	; (8006804 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b95      	cmp	r3, #149	; 0x95
 800665e:	dc02      	bgt.n	8006666 <HAL_TIM_PeriodElapsedCallback+0xd6>
						arr = 150;
 8006660:	4b68      	ldr	r3, [pc, #416]	; (8006804 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8006662:	2296      	movs	r2, #150	; 0x96
 8006664:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_AUTORELOAD(&htim6, arr);
 8006666:	4b67      	ldr	r3, [pc, #412]	; (8006804 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	4b67      	ldr	r3, [pc, #412]	; (8006808 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006670:	4b64      	ldr	r3, [pc, #400]	; (8006804 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	461a      	mov	r2, r3
 8006676:	4b64      	ldr	r3, [pc, #400]	; (8006808 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8006678:	60da      	str	r2, [r3, #12]
					temp = 0;
 800667a:	4b5e      	ldr	r3, [pc, #376]	; (80067f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800667c:	2200      	movs	r2, #0
 800667e:	601a      	str	r2, [r3, #0]
				}

				if (step <= 300) {
 8006680:	4b58      	ldr	r3, [pc, #352]	; (80067e4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006688:	dc11      	bgt.n	80066ae <HAL_TIM_PeriodElapsedCallback+0x11e>
					arr = arr + 4;
 800668a:	4b5e      	ldr	r3, [pc, #376]	; (8006804 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3304      	adds	r3, #4
 8006690:	4a5c      	ldr	r2, [pc, #368]	; (8006804 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8006692:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_AUTORELOAD(&htim6, arr);
 8006694:	4b5b      	ldr	r3, [pc, #364]	; (8006804 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	4b5b      	ldr	r3, [pc, #364]	; (8006808 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	62da      	str	r2, [r3, #44]	; 0x2c
 800669e:	4b59      	ldr	r3, [pc, #356]	; (8006804 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	4b58      	ldr	r3, [pc, #352]	; (8006808 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80066a6:	60da      	str	r2, [r3, #12]
					temp = 0;
 80066a8:	4b52      	ldr	r3, [pc, #328]	; (80067f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]

				}
			}
			if (flag == 0 && rotate_temp >= 444) {
 80066ae:	4b57      	ldr	r3, [pc, #348]	; (800680c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d110      	bne.n	80066d8 <HAL_TIM_PeriodElapsedCallback+0x148>
 80066b6:	4b52      	ldr	r3, [pc, #328]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 80066be:	db0b      	blt.n	80066d8 <HAL_TIM_PeriodElapsedCallback+0x148>
				flag = 1;
 80066c0:	4b52      	ldr	r3, [pc, #328]	; (800680c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80066c2:	2201      	movs	r2, #1
 80066c4:	601a      	str	r2, [r3, #0]
				rotate_state[0] = 0;
 80066c6:	4b52      	ldr	r3, [pc, #328]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	801a      	strh	r2, [r3, #0]
				rotate_state[1] = 0;
 80066cc:	4b50      	ldr	r3, [pc, #320]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	805a      	strh	r2, [r3, #2]
				rotate_state[2] = 0;
 80066d2:	4b4f      	ldr	r3, [pc, #316]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	809a      	strh	r2, [r3, #4]
			}
			if (rotate_state[0] + rotate_state[1] + rotate_state[2] == 3
 80066d8:	4b4d      	ldr	r3, [pc, #308]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80066da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066de:	461a      	mov	r2, r3
 80066e0:	4b4b      	ldr	r3, [pc, #300]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80066e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80066e6:	4413      	add	r3, r2
 80066e8:	4a49      	ldr	r2, [pc, #292]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80066ea:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80066ee:	4413      	add	r3, r2
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d113      	bne.n	800671c <HAL_TIM_PeriodElapsedCallback+0x18c>
					&& rotate_temp >= 444) {
 80066f4:	4b42      	ldr	r3, [pc, #264]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 80066fc:	db0e      	blt.n	800671c <HAL_TIM_PeriodElapsedCallback+0x18c>
				rotate_state[0] = 0;
 80066fe:	4b44      	ldr	r3, [pc, #272]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8006700:	2200      	movs	r2, #0
 8006702:	801a      	strh	r2, [r3, #0]
				rotate_state[1] = 0;
 8006704:	4b42      	ldr	r3, [pc, #264]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8006706:	2200      	movs	r2, #0
 8006708:	805a      	strh	r2, [r3, #2]
				rotate_state[2] = 0;
 800670a:	4b41      	ldr	r3, [pc, #260]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800670c:	2200      	movs	r2, #0
 800670e:	809a      	strh	r2, [r3, #4]
				rotate_temp = 0;
 8006710:	4b3b      	ldr	r3, [pc, #236]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]
				flag = 0;
 8006716:	4b3d      	ldr	r3, [pc, #244]	; (800680c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8006718:	2200      	movs	r2, #0
 800671a:	601a      	str	r2, [r3, #0]

			}
			if (rotate_temp >= 444 && flag == 1) {
 800671c:	4b38      	ldr	r3, [pc, #224]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 8006724:	f2c0 80d3 	blt.w	80068ce <HAL_TIM_PeriodElapsedCallback+0x33e>
 8006728:	4b38      	ldr	r3, [pc, #224]	; (800680c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b01      	cmp	r3, #1
 800672e:	f040 80ce 	bne.w	80068ce <HAL_TIM_PeriodElapsedCallback+0x33e>
				if (rotate_state[0] == 0 && rotate_state[1] == 1
 8006732:	4b37      	ldr	r3, [pc, #220]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8006734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d124      	bne.n	8006786 <HAL_TIM_PeriodElapsedCallback+0x1f6>
 800673c:	4b34      	ldr	r3, [pc, #208]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800673e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d11f      	bne.n	8006786 <HAL_TIM_PeriodElapsedCallback+0x1f6>
						&& rotate_state[2] == 1
 8006746:	4b32      	ldr	r3, [pc, #200]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8006748:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d11a      	bne.n	8006786 <HAL_TIM_PeriodElapsedCallback+0x1f6>
						&& (rotate_dir == 3 || rotate_dir == 1)) {
 8006750:	4b30      	ldr	r3, [pc, #192]	; (8006814 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b03      	cmp	r3, #3
 8006756:	d003      	beq.n	8006760 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 8006758:	4b2e      	ldr	r3, [pc, #184]	; (8006814 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d112      	bne.n	8006786 <HAL_TIM_PeriodElapsedCallback+0x1f6>
//						step1 = 2.86 * 5 * 8 / 1.8;
					rotate_dir = 0;
 8006760:	4b2c      	ldr	r3, [pc, #176]	; (8006814 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
					rotate_state[0] = 0;
 8006766:	4b2a      	ldr	r3, [pc, #168]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8006768:	2200      	movs	r2, #0
 800676a:	801a      	strh	r2, [r3, #0]
					rotate_state[1] = 0;
 800676c:	4b28      	ldr	r3, [pc, #160]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800676e:	2200      	movs	r2, #0
 8006770:	805a      	strh	r2, [r3, #2]
					rotate_state[2] = 0;
 8006772:	4b27      	ldr	r3, [pc, #156]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8006774:	2200      	movs	r2, #0
 8006776:	809a      	strh	r2, [r3, #4]
					rotate_temp = 0;
 8006778:	4b21      	ldr	r3, [pc, #132]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]
					flag = 0;
 800677e:	4b23      	ldr	r3, [pc, #140]	; (800680c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	e0a3      	b.n	80068ce <HAL_TIM_PeriodElapsedCallback+0x33e>

				}
				else if (rotate_state[0] == 1 && rotate_state[1] == 1
 8006786:	4b22      	ldr	r3, [pc, #136]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8006788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d143      	bne.n	8006818 <HAL_TIM_PeriodElapsedCallback+0x288>
 8006790:	4b1f      	ldr	r3, [pc, #124]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8006792:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d13e      	bne.n	8006818 <HAL_TIM_PeriodElapsedCallback+0x288>
						&& rotate_state[2] == 0
 800679a:	4b1d      	ldr	r3, [pc, #116]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800679c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d139      	bne.n	8006818 <HAL_TIM_PeriodElapsedCallback+0x288>
						&& (rotate_dir == 0 || rotate_dir == 2)) {
 80067a4:	4b1b      	ldr	r3, [pc, #108]	; (8006814 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <HAL_TIM_PeriodElapsedCallback+0x224>
 80067ac:	4b19      	ldr	r3, [pc, #100]	; (8006814 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d131      	bne.n	8006818 <HAL_TIM_PeriodElapsedCallback+0x288>
//						step1 = 2.86 * 5 * 8 / 1.8;
					rotate_dir = 1;
 80067b4:	4b17      	ldr	r3, [pc, #92]	; (8006814 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80067b6:	2201      	movs	r2, #1
 80067b8:	601a      	str	r2, [r3, #0]
					rotate_state[0] = 0;
 80067ba:	4b15      	ldr	r3, [pc, #84]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80067bc:	2200      	movs	r2, #0
 80067be:	801a      	strh	r2, [r3, #0]
					rotate_state[1] = 0;
 80067c0:	4b13      	ldr	r3, [pc, #76]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	805a      	strh	r2, [r3, #2]
					rotate_state[2] = 0;
 80067c6:	4b12      	ldr	r3, [pc, #72]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	809a      	strh	r2, [r3, #4]
					rotate_temp = 0;
 80067cc:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]
					flag = 0;
 80067d2:	4b0e      	ldr	r3, [pc, #56]	; (800680c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	e079      	b.n	80068ce <HAL_TIM_PeriodElapsedCallback+0x33e>
 80067da:	bf00      	nop
 80067dc:	40001000 	.word	0x40001000
 80067e0:	20001490 	.word	0x20001490
 80067e4:	200014e4 	.word	0x200014e4
 80067e8:	40020400 	.word	0x40020400
 80067ec:	20001480 	.word	0x20001480
 80067f0:	40020800 	.word	0x40020800
 80067f4:	200014ec 	.word	0x200014ec
 80067f8:	2000148c 	.word	0x2000148c
 80067fc:	40020c00 	.word	0x40020c00
 8006800:	2000157c 	.word	0x2000157c
 8006804:	2000000c 	.word	0x2000000c
 8006808:	20001688 	.word	0x20001688
 800680c:	20001580 	.word	0x20001580
 8006810:	2000156c 	.word	0x2000156c
 8006814:	20001578 	.word	0x20001578

				}
				else if (rotate_state[0] == 1 && rotate_state[1] == 0
 8006818:	4b14      	ldr	r3, [pc, #80]	; (800686c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800681a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d12c      	bne.n	800687c <HAL_TIM_PeriodElapsedCallback+0x2ec>
 8006822:	4b12      	ldr	r3, [pc, #72]	; (800686c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8006824:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d127      	bne.n	800687c <HAL_TIM_PeriodElapsedCallback+0x2ec>
						&& rotate_state[2] == 0
 800682c:	4b0f      	ldr	r3, [pc, #60]	; (800686c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800682e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d122      	bne.n	800687c <HAL_TIM_PeriodElapsedCallback+0x2ec>
						&& (rotate_dir == 1 || rotate_dir == 3)) {
 8006836:	4b0e      	ldr	r3, [pc, #56]	; (8006870 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d003      	beq.n	8006846 <HAL_TIM_PeriodElapsedCallback+0x2b6>
 800683e:	4b0c      	ldr	r3, [pc, #48]	; (8006870 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b03      	cmp	r3, #3
 8006844:	d11a      	bne.n	800687c <HAL_TIM_PeriodElapsedCallback+0x2ec>
//						step1 = 2.86 * 5 * 8 / 1.8;
					rotate_dir = 2;
 8006846:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8006848:	2202      	movs	r2, #2
 800684a:	601a      	str	r2, [r3, #0]
					rotate_state[0] = 0;
 800684c:	4b07      	ldr	r3, [pc, #28]	; (800686c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800684e:	2200      	movs	r2, #0
 8006850:	801a      	strh	r2, [r3, #0]
					rotate_state[1] = 0;
 8006852:	4b06      	ldr	r3, [pc, #24]	; (800686c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8006854:	2200      	movs	r2, #0
 8006856:	805a      	strh	r2, [r3, #2]
					rotate_state[2] = 0;
 8006858:	4b04      	ldr	r3, [pc, #16]	; (800686c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800685a:	2200      	movs	r2, #0
 800685c:	809a      	strh	r2, [r3, #4]
					rotate_temp = 0;
 800685e:	4b05      	ldr	r3, [pc, #20]	; (8006874 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]
					flag = 0;
 8006864:	4b04      	ldr	r3, [pc, #16]	; (8006878 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8006866:	2200      	movs	r2, #0
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	e030      	b.n	80068ce <HAL_TIM_PeriodElapsedCallback+0x33e>
 800686c:	2000156c 	.word	0x2000156c
 8006870:	20001578 	.word	0x20001578
 8006874:	2000157c 	.word	0x2000157c
 8006878:	20001580 	.word	0x20001580

				}
				else if (rotate_state[0] == 0 && rotate_state[1] == 0
 800687c:	4b96      	ldr	r3, [pc, #600]	; (8006ad8 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800687e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d123      	bne.n	80068ce <HAL_TIM_PeriodElapsedCallback+0x33e>
 8006886:	4b94      	ldr	r3, [pc, #592]	; (8006ad8 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8006888:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d11e      	bne.n	80068ce <HAL_TIM_PeriodElapsedCallback+0x33e>
						&& rotate_state[2] == 1
 8006890:	4b91      	ldr	r3, [pc, #580]	; (8006ad8 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8006892:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d119      	bne.n	80068ce <HAL_TIM_PeriodElapsedCallback+0x33e>
						&& (rotate_dir == 2 || rotate_dir == 0)) {
 800689a:	4b90      	ldr	r3, [pc, #576]	; (8006adc <HAL_TIM_PeriodElapsedCallback+0x54c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d003      	beq.n	80068aa <HAL_TIM_PeriodElapsedCallback+0x31a>
 80068a2:	4b8e      	ldr	r3, [pc, #568]	; (8006adc <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d111      	bne.n	80068ce <HAL_TIM_PeriodElapsedCallback+0x33e>
//						step1 = 2.86 * 5 * 8 / 1.8;
					rotate_dir = 3;
 80068aa:	4b8c      	ldr	r3, [pc, #560]	; (8006adc <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80068ac:	2203      	movs	r2, #3
 80068ae:	601a      	str	r2, [r3, #0]
					rotate_state[0] = 0;
 80068b0:	4b89      	ldr	r3, [pc, #548]	; (8006ad8 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	801a      	strh	r2, [r3, #0]
					rotate_state[1] = 0;
 80068b6:	4b88      	ldr	r3, [pc, #544]	; (8006ad8 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	805a      	strh	r2, [r3, #2]
					rotate_state[2] = 0;
 80068bc:	4b86      	ldr	r3, [pc, #536]	; (8006ad8 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80068be:	2200      	movs	r2, #0
 80068c0:	809a      	strh	r2, [r3, #4]
					rotate_temp = 0;
 80068c2:	4b87      	ldr	r3, [pc, #540]	; (8006ae0 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]
					flag = 0;
 80068c8:	4b86      	ldr	r3, [pc, #536]	; (8006ae4 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
//				}
			}

		}
	}
	if (htim->Instance == TIM7) {
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a85      	ldr	r2, [pc, #532]	; (8006ae8 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	f040 80cc 	bne.w	8006a72 <HAL_TIM_PeriodElapsedCallback+0x4e2>

		if (suck[0] == 1) {           //press_sensor1 feedback(suck)
 80068da:	4b84      	ldr	r3, [pc, #528]	; (8006aec <HAL_TIM_PeriodElapsedCallback+0x55c>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d11d      	bne.n	800691e <HAL_TIM_PeriodElapsedCallback+0x38e>
			i1++;
 80068e2:	4b83      	ldr	r3, [pc, #524]	; (8006af0 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3301      	adds	r3, #1
 80068e8:	4a81      	ldr	r2, [pc, #516]	; (8006af0 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80068ea:	6013      	str	r3, [r2, #0]
//			if (ADC_cake[0] < 200) {        //PA5
			if (i1 == 500) {
 80068ec:	4b80      	ldr	r3, [pc, #512]	; (8006af0 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80068f4:	d113      	bne.n	800691e <HAL_TIM_PeriodElapsedCallback+0x38e>
				suck_success1 = 1;
 80068f6:	4b7f      	ldr	r3, [pc, #508]	; (8006af4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80068f8:	2201      	movs	r2, #1
 80068fa:	601a      	str	r2, [r3, #0]
				suck[0] = 0;
 80068fc:	4b7b      	ldr	r3, [pc, #492]	; (8006aec <HAL_TIM_PeriodElapsedCallback+0x55c>)
 80068fe:	2200      	movs	r2, #0
 8006900:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(7, 1300, 200);
 8006902:	22c8      	movs	r2, #200	; 0xc8
 8006904:	f240 5114 	movw	r1, #1300	; 0x514
 8006908:	2007      	movs	r0, #7
 800690a:	f7fa fa4f 	bl	8000dac <UART_Send_SetMotorPosition>
				i1 = 0;
 800690e:	4b78      	ldr	r3, [pc, #480]	; (8006af0 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8006910:	2200      	movs	r2, #0
 8006912:	601a      	str	r2, [r3, #0]
				suck_temp--;
 8006914:	4b78      	ldr	r3, [pc, #480]	; (8006af8 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3b01      	subs	r3, #1
 800691a:	4a77      	ldr	r2, [pc, #476]	; (8006af8 <HAL_TIM_PeriodElapsedCallback+0x568>)
 800691c:	6013      	str	r3, [r2, #0]
				//			}
			}
		}
		if (suck[1] == 1) {             //press_sensor4 feedback(suck)
 800691e:	4b73      	ldr	r3, [pc, #460]	; (8006aec <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d11d      	bne.n	8006962 <HAL_TIM_PeriodElapsedCallback+0x3d2>
			i2++;
 8006926:	4b75      	ldr	r3, [pc, #468]	; (8006afc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3301      	adds	r3, #1
 800692c:	4a73      	ldr	r2, [pc, #460]	; (8006afc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 800692e:	6013      	str	r3, [r2, #0]
//			if (ADC_cake[1] < 200) {     //PA6
			if (i2 == 500) {
 8006930:	4b72      	ldr	r3, [pc, #456]	; (8006afc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006938:	d113      	bne.n	8006962 <HAL_TIM_PeriodElapsedCallback+0x3d2>
				suck_success4 = 1;
 800693a:	4b71      	ldr	r3, [pc, #452]	; (8006b00 <HAL_TIM_PeriodElapsedCallback+0x570>)
 800693c:	2201      	movs	r2, #1
 800693e:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(4, 1200, 200);
 8006940:	22c8      	movs	r2, #200	; 0xc8
 8006942:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006946:	2004      	movs	r0, #4
 8006948:	f7fa fa30 	bl	8000dac <UART_Send_SetMotorPosition>
				i2 = 0;
 800694c:	4b6b      	ldr	r3, [pc, #428]	; (8006afc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 800694e:	2200      	movs	r2, #0
 8006950:	601a      	str	r2, [r3, #0]
				suck_temp--;
 8006952:	4b69      	ldr	r3, [pc, #420]	; (8006af8 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3b01      	subs	r3, #1
 8006958:	4a67      	ldr	r2, [pc, #412]	; (8006af8 <HAL_TIM_PeriodElapsedCallback+0x568>)
 800695a:	6013      	str	r3, [r2, #0]
				suck[1] = 0;
 800695c:	4b63      	ldr	r3, [pc, #396]	; (8006aec <HAL_TIM_PeriodElapsedCallback+0x55c>)
 800695e:	2200      	movs	r2, #0
 8006960:	605a      	str	r2, [r3, #4]
				//			}
			}
		}
		if (suck[2] == 1) {             //press_sensor3 feedback(suck)
 8006962:	4b62      	ldr	r3, [pc, #392]	; (8006aec <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d11d      	bne.n	80069a6 <HAL_TIM_PeriodElapsedCallback+0x416>
			i3++;
 800696a:	4b66      	ldr	r3, [pc, #408]	; (8006b04 <HAL_TIM_PeriodElapsedCallback+0x574>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3301      	adds	r3, #1
 8006970:	4a64      	ldr	r2, [pc, #400]	; (8006b04 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8006972:	6013      	str	r3, [r2, #0]
//			if (ADC_cake[2] < 200) {      //PA7
			if (i3 == 500) {
 8006974:	4b63      	ldr	r3, [pc, #396]	; (8006b04 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800697c:	d113      	bne.n	80069a6 <HAL_TIM_PeriodElapsedCallback+0x416>
				suck_success3 = 1;
 800697e:	4b62      	ldr	r3, [pc, #392]	; (8006b08 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8006980:	2201      	movs	r2, #1
 8006982:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(3, 1200, 200);
 8006984:	22c8      	movs	r2, #200	; 0xc8
 8006986:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800698a:	2003      	movs	r0, #3
 800698c:	f7fa fa0e 	bl	8000dac <UART_Send_SetMotorPosition>
				i3 = 0;
 8006990:	4b5c      	ldr	r3, [pc, #368]	; (8006b04 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]
				suck_temp--;
 8006996:	4b58      	ldr	r3, [pc, #352]	; (8006af8 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3b01      	subs	r3, #1
 800699c:	4a56      	ldr	r2, [pc, #344]	; (8006af8 <HAL_TIM_PeriodElapsedCallback+0x568>)
 800699e:	6013      	str	r3, [r2, #0]
				suck[2] = 0;
 80069a0:	4b52      	ldr	r3, [pc, #328]	; (8006aec <HAL_TIM_PeriodElapsedCallback+0x55c>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	609a      	str	r2, [r3, #8]
				//			}
			}
		}
		if (unsuck[0] == 1) {         //press_sensor1 feedback(unsuck)
 80069a6:	4b59      	ldr	r3, [pc, #356]	; (8006b0c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d11d      	bne.n	80069ea <HAL_TIM_PeriodElapsedCallback+0x45a>
			i4++;
 80069ae:	4b58      	ldr	r3, [pc, #352]	; (8006b10 <HAL_TIM_PeriodElapsedCallback+0x580>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3301      	adds	r3, #1
 80069b4:	4a56      	ldr	r2, [pc, #344]	; (8006b10 <HAL_TIM_PeriodElapsedCallback+0x580>)
 80069b6:	6013      	str	r3, [r2, #0]

//			if (ADC_cake[0] > 1900) {       //PA5
			if (i4 == 500) {
 80069b8:	4b55      	ldr	r3, [pc, #340]	; (8006b10 <HAL_TIM_PeriodElapsedCallback+0x580>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80069c0:	d113      	bne.n	80069ea <HAL_TIM_PeriodElapsedCallback+0x45a>
				unsuck_success1 = 1;
 80069c2:	4b54      	ldr	r3, [pc, #336]	; (8006b14 <HAL_TIM_PeriodElapsedCallback+0x584>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(7, 1300, 200);
 80069c8:	22c8      	movs	r2, #200	; 0xc8
 80069ca:	f240 5114 	movw	r1, #1300	; 0x514
 80069ce:	2007      	movs	r0, #7
 80069d0:	f7fa f9ec 	bl	8000dac <UART_Send_SetMotorPosition>
				i4 = 0;
 80069d4:	4b4e      	ldr	r3, [pc, #312]	; (8006b10 <HAL_TIM_PeriodElapsedCallback+0x580>)
 80069d6:	2200      	movs	r2, #0
 80069d8:	601a      	str	r2, [r3, #0]
				unsuck_temp--;
 80069da:	4b4f      	ldr	r3, [pc, #316]	; (8006b18 <HAL_TIM_PeriodElapsedCallback+0x588>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3b01      	subs	r3, #1
 80069e0:	4a4d      	ldr	r2, [pc, #308]	; (8006b18 <HAL_TIM_PeriodElapsedCallback+0x588>)
 80069e2:	6013      	str	r3, [r2, #0]
				unsuck[0] = 0;
 80069e4:	4b49      	ldr	r3, [pc, #292]	; (8006b0c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	601a      	str	r2, [r3, #0]
				//			}
			}
		}
		if (unsuck[1] == 1) {        // press_sensor4 feedback(unsuck)
 80069ea:	4b48      	ldr	r3, [pc, #288]	; (8006b0c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d11d      	bne.n	8006a2e <HAL_TIM_PeriodElapsedCallback+0x49e>
			i5++;
 80069f2:	4b4a      	ldr	r3, [pc, #296]	; (8006b1c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3301      	adds	r3, #1
 80069f8:	4a48      	ldr	r2, [pc, #288]	; (8006b1c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80069fa:	6013      	str	r3, [r2, #0]
//			if (ADC_cake[1] > 1900) {               //PA6
			if (i5 == 500) {
 80069fc:	4b47      	ldr	r3, [pc, #284]	; (8006b1c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006a04:	d113      	bne.n	8006a2e <HAL_TIM_PeriodElapsedCallback+0x49e>
				unsuck_success4 = 1;
 8006a06:	4b46      	ldr	r3, [pc, #280]	; (8006b20 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8006a08:	2201      	movs	r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(4, 1200, 200);
 8006a0c:	22c8      	movs	r2, #200	; 0xc8
 8006a0e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006a12:	2004      	movs	r0, #4
 8006a14:	f7fa f9ca 	bl	8000dac <UART_Send_SetMotorPosition>
				i5 = 0;
 8006a18:	4b40      	ldr	r3, [pc, #256]	; (8006b1c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]
				unsuck_temp--;
 8006a1e:	4b3e      	ldr	r3, [pc, #248]	; (8006b18 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	4a3c      	ldr	r2, [pc, #240]	; (8006b18 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8006a26:	6013      	str	r3, [r2, #0]
				unsuck[1] = 0;
 8006a28:	4b38      	ldr	r3, [pc, #224]	; (8006b0c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	605a      	str	r2, [r3, #4]
				//			}
			}
		}
		if (unsuck[2] == 1) {      //press_sensor3 feedback(unsuck)
 8006a2e:	4b37      	ldr	r3, [pc, #220]	; (8006b0c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d11d      	bne.n	8006a72 <HAL_TIM_PeriodElapsedCallback+0x4e2>
			i6++;
 8006a36:	4b3b      	ldr	r3, [pc, #236]	; (8006b24 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	4a39      	ldr	r2, [pc, #228]	; (8006b24 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8006a3e:	6013      	str	r3, [r2, #0]
//			if (ADC_cake[2] > 1900) {          //PA7
			if (i6 == 500) {
 8006a40:	4b38      	ldr	r3, [pc, #224]	; (8006b24 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006a48:	d113      	bne.n	8006a72 <HAL_TIM_PeriodElapsedCallback+0x4e2>
				unsuck_success3 = 1;
 8006a4a:	4b37      	ldr	r3, [pc, #220]	; (8006b28 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(3, 1200, 200);
 8006a50:	22c8      	movs	r2, #200	; 0xc8
 8006a52:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006a56:	2003      	movs	r0, #3
 8006a58:	f7fa f9a8 	bl	8000dac <UART_Send_SetMotorPosition>
				i6 = 0;
 8006a5c:	4b31      	ldr	r3, [pc, #196]	; (8006b24 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	601a      	str	r2, [r3, #0]
				unsuck_temp--;
 8006a62:	4b2d      	ldr	r3, [pc, #180]	; (8006b18 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	4a2b      	ldr	r2, [pc, #172]	; (8006b18 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8006a6a:	6013      	str	r3, [r2, #0]
				unsuck[2] = 0;
 8006a6c:	4b27      	ldr	r3, [pc, #156]	; (8006b0c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	609a      	str	r2, [r3, #8]

	}
//	if (htim->Instance == TIM8) {
//
//	}
	if (htim->Instance == TIM10) {
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a2d      	ldr	r2, [pc, #180]	; (8006b2c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	f040 80ef 	bne.w	8006c5c <HAL_TIM_PeriodElapsedCallback+0x6cc>
		the_gate++;
 8006a7e:	4b2c      	ldr	r3, [pc, #176]	; (8006b30 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3301      	adds	r3, #1
 8006a84:	4a2a      	ldr	r2, [pc, #168]	; (8006b30 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8006a86:	6013      	str	r3, [r2, #0]
		door_temp++;
 8006a88:	4b2a      	ldr	r3, [pc, #168]	; (8006b34 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	4a29      	ldr	r2, [pc, #164]	; (8006b34 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8006a90:	6013      	str	r3, [r2, #0]
		handshake_temp++;
 8006a92:	4b29      	ldr	r3, [pc, #164]	; (8006b38 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3301      	adds	r3, #1
 8006a98:	4a27      	ldr	r2, [pc, #156]	; (8006b38 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8006a9a:	6013      	str	r3, [r2, #0]
		if (suck_delay_temp == 1) {
 8006a9c:	4b27      	ldr	r3, [pc, #156]	; (8006b3c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d10e      	bne.n	8006ac2 <HAL_TIM_PeriodElapsedCallback+0x532>
			suck_delay++;
 8006aa4:	4b26      	ldr	r3, [pc, #152]	; (8006b40 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	4a25      	ldr	r2, [pc, #148]	; (8006b40 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8006aac:	6013      	str	r3, [r2, #0]
			if (suck_delay == 30) {
 8006aae:	4b24      	ldr	r3, [pc, #144]	; (8006b40 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b1e      	cmp	r3, #30
 8006ab4:	d105      	bne.n	8006ac2 <HAL_TIM_PeriodElapsedCallback+0x532>
				suck_delay = 0;
 8006ab6:	4b22      	ldr	r3, [pc, #136]	; (8006b40 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]
				suck_delay_temp = 0;
 8006abc:	4b1f      	ldr	r3, [pc, #124]	; (8006b3c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	601a      	str	r2, [r3, #0]
			}
		}
		if (unsuck_delay_temp == 1) {
 8006ac2:	4b20      	ldr	r3, [pc, #128]	; (8006b44 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d14a      	bne.n	8006b60 <HAL_TIM_PeriodElapsedCallback+0x5d0>
			unsuck_delay++;
 8006aca:	4b1f      	ldr	r3, [pc, #124]	; (8006b48 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	4a1d      	ldr	r2, [pc, #116]	; (8006b48 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	e03a      	b.n	8006b4c <HAL_TIM_PeriodElapsedCallback+0x5bc>
 8006ad6:	bf00      	nop
 8006ad8:	2000156c 	.word	0x2000156c
 8006adc:	20001578 	.word	0x20001578
 8006ae0:	2000157c 	.word	0x2000157c
 8006ae4:	20001580 	.word	0x20001580
 8006ae8:	40001400 	.word	0x40001400
 8006aec:	20001494 	.word	0x20001494
 8006af0:	200014cc 	.word	0x200014cc
 8006af4:	200014b4 	.word	0x200014b4
 8006af8:	200014ac 	.word	0x200014ac
 8006afc:	200014d0 	.word	0x200014d0
 8006b00:	200014b8 	.word	0x200014b8
 8006b04:	200014d4 	.word	0x200014d4
 8006b08:	200014bc 	.word	0x200014bc
 8006b0c:	200014a0 	.word	0x200014a0
 8006b10:	200014d8 	.word	0x200014d8
 8006b14:	200014c0 	.word	0x200014c0
 8006b18:	200014b0 	.word	0x200014b0
 8006b1c:	200014dc 	.word	0x200014dc
 8006b20:	200014c4 	.word	0x200014c4
 8006b24:	200014e0 	.word	0x200014e0
 8006b28:	200014c8 	.word	0x200014c8
 8006b2c:	40014400 	.word	0x40014400
 8006b30:	2000158c 	.word	0x2000158c
 8006b34:	20001584 	.word	0x20001584
 8006b38:	20001588 	.word	0x20001588
 8006b3c:	20001550 	.word	0x20001550
 8006b40:	20001540 	.word	0x20001540
 8006b44:	2000154c 	.word	0x2000154c
 8006b48:	2000153c 	.word	0x2000153c
			if (unsuck_delay == 30) {
 8006b4c:	4b4b      	ldr	r3, [pc, #300]	; (8006c7c <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b1e      	cmp	r3, #30
 8006b52:	d105      	bne.n	8006b60 <HAL_TIM_PeriodElapsedCallback+0x5d0>
				unsuck_delay = 0;
 8006b54:	4b49      	ldr	r3, [pc, #292]	; (8006c7c <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]
				unsuck_delay_temp = 0;
 8006b5a:	4b49      	ldr	r3, [pc, #292]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]
			}
		}
		if (servo_delay_temp == 1) {
 8006b60:	4b48      	ldr	r3, [pc, #288]	; (8006c84 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d10e      	bne.n	8006b86 <HAL_TIM_PeriodElapsedCallback+0x5f6>
			servo_delay++;
 8006b68:	4b47      	ldr	r3, [pc, #284]	; (8006c88 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	4a46      	ldr	r2, [pc, #280]	; (8006c88 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8006b70:	6013      	str	r3, [r2, #0]
			if (servo_delay == 50) {
 8006b72:	4b45      	ldr	r3, [pc, #276]	; (8006c88 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b32      	cmp	r3, #50	; 0x32
 8006b78:	d105      	bne.n	8006b86 <HAL_TIM_PeriodElapsedCallback+0x5f6>
				servo_delay = 0;
 8006b7a:	4b43      	ldr	r3, [pc, #268]	; (8006c88 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	601a      	str	r2, [r3, #0]
				servo_delay_temp = 0;
 8006b80:	4b40      	ldr	r3, [pc, #256]	; (8006c84 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
			}
		}
		if (door_temp == 1) {
 8006b86:	4b41      	ldr	r3, [pc, #260]	; (8006c8c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d104      	bne.n	8006b98 <HAL_TIM_PeriodElapsedCallback+0x608>
			pub_the_hand_transfer();
 8006b8e:	f7fe fc47 	bl	8005420 <pub_the_hand_transfer>
			door_temp = 0;
 8006b92:	4b3e      	ldr	r3, [pc, #248]	; (8006c8c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	601a      	str	r2, [r3, #0]

		}
		if (cherry_delay_temp == 1) {
 8006b98:	4b3d      	ldr	r3, [pc, #244]	; (8006c90 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d10e      	bne.n	8006bbe <HAL_TIM_PeriodElapsedCallback+0x62e>
			cherry_delay++;
 8006ba0:	4b3c      	ldr	r3, [pc, #240]	; (8006c94 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	4a3b      	ldr	r2, [pc, #236]	; (8006c94 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8006ba8:	6013      	str	r3, [r2, #0]
			if (cherry_delay == 80) {
 8006baa:	4b3a      	ldr	r3, [pc, #232]	; (8006c94 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b50      	cmp	r3, #80	; 0x50
 8006bb0:	d105      	bne.n	8006bbe <HAL_TIM_PeriodElapsedCallback+0x62e>
				cherry_delay = 0;
 8006bb2:	4b38      	ldr	r3, [pc, #224]	; (8006c94 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]
				cherry_delay_temp = 0;
 8006bb8:	4b35      	ldr	r3, [pc, #212]	; (8006c90 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]
			}
		}
		if (handshake_temp == 10) {
 8006bbe:	4b36      	ldr	r3, [pc, #216]	; (8006c98 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b0a      	cmp	r3, #10
 8006bc4:	d104      	bne.n	8006bd0 <HAL_TIM_PeriodElapsedCallback+0x640>
			hand_shake();
 8006bc6:	f7fe fc3f 	bl	8005448 <hand_shake>
			handshake_temp = 0;
 8006bca:	4b33      	ldr	r3, [pc, #204]	; (8006c98 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	601a      	str	r2, [r3, #0]
		}
		if (the_gate == 1) {
 8006bd0:	4b32      	ldr	r3, [pc, #200]	; (8006c9c <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d104      	bne.n	8006be2 <HAL_TIM_PeriodElapsedCallback+0x652>
			pub_the_gate();
 8006bd8:	f7fe fc0e 	bl	80053f8 <pub_the_gate>
			the_gate = 0;
 8006bdc:	4b2f      	ldr	r3, [pc, #188]	; (8006c9c <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]
		}
		if (mission_array[0] >= 1 && temp_pub < 1) {
 8006be2:	4b2f      	ldr	r3, [pc, #188]	; (8006ca0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8006be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	dd0a      	ble.n	8006c02 <HAL_TIM_PeriodElapsedCallback+0x672>
 8006bec:	4b2d      	ldr	r3, [pc, #180]	; (8006ca4 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	dc06      	bgt.n	8006c02 <HAL_TIM_PeriodElapsedCallback+0x672>
			pub_to_ros();
 8006bf4:	f7fe fbec 	bl	80053d0 <pub_to_ros>
			temp_pub++;
 8006bf8:	4b2a      	ldr	r3, [pc, #168]	; (8006ca4 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	4a29      	ldr	r2, [pc, #164]	; (8006ca4 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8006c00:	6013      	str	r3, [r2, #0]
		}
		if (unload == 1) {
 8006c02:	4b29      	ldr	r3, [pc, #164]	; (8006ca8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d111      	bne.n	8006c2e <HAL_TIM_PeriodElapsedCallback+0x69e>
			unload_temp++;
 8006c0a:	4b28      	ldr	r3, [pc, #160]	; (8006cac <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	4a26      	ldr	r2, [pc, #152]	; (8006cac <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8006c12:	6013      	str	r3, [r2, #0]
			if (unload_temp == 300) {
 8006c14:	4b25      	ldr	r3, [pc, #148]	; (8006cac <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006c1c:	d107      	bne.n	8006c2e <HAL_TIM_PeriodElapsedCallback+0x69e>
				score = 'i';
 8006c1e:	4b24      	ldr	r3, [pc, #144]	; (8006cb0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8006c20:	2269      	movs	r2, #105	; 0x69
 8006c22:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));
 8006c24:	2201      	movs	r2, #1
 8006c26:	4922      	ldr	r1, [pc, #136]	; (8006cb0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8006c28:	4822      	ldr	r0, [pc, #136]	; (8006cb4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8006c2a:	f007 f839 	bl	800dca0 <HAL_UART_Transmit_IT>
			}
		}
		for (int i = 0; i < 10; i++) {
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	e00f      	b.n	8006c54 <HAL_TIM_PeriodElapsedCallback+0x6c4>
			if (score_flag[i] == 1) {
 8006c34:	4a20      	ldr	r2, [pc, #128]	; (8006cb8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d106      	bne.n	8006c4e <HAL_TIM_PeriodElapsedCallback+0x6be>
				score_transfer();
 8006c40:	f7fa fc98 	bl	8001574 <score_transfer>
				score_flag[i] = 0;
 8006c44:	4a1c      	ldr	r2, [pc, #112]	; (8006cb8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2100      	movs	r1, #0
 8006c4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 10; i++) {
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3301      	adds	r3, #1
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b09      	cmp	r3, #9
 8006c58:	ddec      	ble.n	8006c34 <HAL_TIM_PeriodElapsedCallback+0x6a4>
	}
	else if (htim->Instance == TIM13) {
		loop();
		counttry++;
	}
}
 8006c5a:	e00b      	b.n	8006c74 <HAL_TIM_PeriodElapsedCallback+0x6e4>
	else if (htim->Instance == TIM13) {
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a16      	ldr	r2, [pc, #88]	; (8006cbc <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d106      	bne.n	8006c74 <HAL_TIM_PeriodElapsedCallback+0x6e4>
		loop();
 8006c66:	f7fe fc29 	bl	80054bc <loop>
		counttry++;
 8006c6a:	4b15      	ldr	r3, [pc, #84]	; (8006cc0 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	4a13      	ldr	r2, [pc, #76]	; (8006cc0 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8006c72:	6013      	str	r3, [r2, #0]
}
 8006c74:	bf00      	nop
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	2000153c 	.word	0x2000153c
 8006c80:	2000154c 	.word	0x2000154c
 8006c84:	20001554 	.word	0x20001554
 8006c88:	20001544 	.word	0x20001544
 8006c8c:	20001584 	.word	0x20001584
 8006c90:	2000155c 	.word	0x2000155c
 8006c94:	20001548 	.word	0x20001548
 8006c98:	20001588 	.word	0x20001588
 8006c9c:	2000158c 	.word	0x2000158c
 8006ca0:	20001560 	.word	0x20001560
 8006ca4:	20001558 	.word	0x20001558
 8006ca8:	200015a0 	.word	0x200015a0
 8006cac:	200015a4 	.word	0x200015a4
 8006cb0:	200015a8 	.word	0x200015a8
 8006cb4:	20001838 	.word	0x20001838
 8006cb8:	200014fc 	.word	0x200014fc
 8006cbc:	40001c00 	.word	0x40001c00
 8006cc0:	200014f0 	.word	0x200014f0

08006cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cca:	2300      	movs	r3, #0
 8006ccc:	607b      	str	r3, [r7, #4]
 8006cce:	4b18      	ldr	r3, [pc, #96]	; (8006d30 <HAL_MspInit+0x6c>)
 8006cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd2:	4a17      	ldr	r2, [pc, #92]	; (8006d30 <HAL_MspInit+0x6c>)
 8006cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8006cda:	4b15      	ldr	r3, [pc, #84]	; (8006d30 <HAL_MspInit+0x6c>)
 8006cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ce2:	607b      	str	r3, [r7, #4]
 8006ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	603b      	str	r3, [r7, #0]
 8006cea:	4b11      	ldr	r3, [pc, #68]	; (8006d30 <HAL_MspInit+0x6c>)
 8006cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cee:	4a10      	ldr	r2, [pc, #64]	; (8006d30 <HAL_MspInit+0x6c>)
 8006cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8006cf6:	4b0e      	ldr	r3, [pc, #56]	; (8006d30 <HAL_MspInit+0x6c>)
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cfe:	603b      	str	r3, [r7, #0]
 8006d00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006d02:	2007      	movs	r0, #7
 8006d04:	f001 fc6a 	bl	80085dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8006d08:	2200      	movs	r2, #0
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	2005      	movs	r0, #5
 8006d0e:	f001 fc70 	bl	80085f2 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8006d12:	2005      	movs	r0, #5
 8006d14:	f001 fc89 	bl	800862a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	2005      	movs	r0, #5
 8006d1e:	f001 fc68 	bl	80085f2 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8006d22:	2005      	movs	r0, #5
 8006d24:	f001 fc81 	bl	800862a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d28:	bf00      	nop
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40023800 	.word	0x40023800

08006d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006d38:	e7fe      	b.n	8006d38 <NMI_Handler+0x4>

08006d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d3e:	e7fe      	b.n	8006d3e <HardFault_Handler+0x4>

08006d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d40:	b480      	push	{r7}
 8006d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d44:	e7fe      	b.n	8006d44 <MemManage_Handler+0x4>

08006d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d46:	b480      	push	{r7}
 8006d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d4a:	e7fe      	b.n	8006d4a <BusFault_Handler+0x4>

08006d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d50:	e7fe      	b.n	8006d50 <UsageFault_Handler+0x4>

08006d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006d52:	b480      	push	{r7}
 8006d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006d56:	bf00      	nop
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d64:	bf00      	nop
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006d72:	bf00      	nop
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006d80:	f001 f882 	bl	8007e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006d84:	bf00      	nop
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8006d8c:	bf00      	nop
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8006d9a:	2010      	movs	r0, #16
 8006d9c:	f002 fb7e 	bl	800949c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006da0:	bf00      	nop
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006da8:	4802      	ldr	r0, [pc, #8]	; (8006db4 <DMA1_Stream5_IRQHandler+0x10>)
 8006daa:	f001 fe5d 	bl	8008a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006dae:	bf00      	nop
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20001a24 	.word	0x20001a24

08006db8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006dbc:	4802      	ldr	r0, [pc, #8]	; (8006dc8 <DMA1_Stream6_IRQHandler+0x10>)
 8006dbe:	f001 fe53 	bl	8008a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8006dc2:	bf00      	nop
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	200019c4 	.word	0x200019c4

08006dcc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006dd0:	4802      	ldr	r0, [pc, #8]	; (8006ddc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8006dd2:	f005 ffab 	bl	800cd2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8006dd6:	bf00      	nop
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	200015b0 	.word	0x200015b0

08006de0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006de4:	4803      	ldr	r0, [pc, #12]	; (8006df4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8006de6:	f005 ffa1 	bl	800cd2c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8006dea:	4803      	ldr	r0, [pc, #12]	; (8006df8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8006dec:	f005 ff9e 	bl	800cd2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006df0:	bf00      	nop
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	200015b0 	.word	0x200015b0
 8006df8:	20001760 	.word	0x20001760

08006dfc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006e00:	4803      	ldr	r0, [pc, #12]	; (8006e10 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8006e02:	f005 ff93 	bl	800cd2c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8006e06:	4803      	ldr	r0, [pc, #12]	; (8006e14 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8006e08:	f005 ff90 	bl	800cd2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006e0c:	bf00      	nop
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	200015b0 	.word	0x200015b0
 8006e14:	200017a8 	.word	0x200017a8

08006e18 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006e1c:	4802      	ldr	r0, [pc, #8]	; (8006e28 <TIM1_CC_IRQHandler+0x10>)
 8006e1e:	f005 ff85 	bl	800cd2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8006e22:	bf00      	nop
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	200015b0 	.word	0x200015b0

08006e2c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006e30:	4802      	ldr	r0, [pc, #8]	; (8006e3c <I2C1_EV_IRQHandler+0x10>)
 8006e32:	f002 ffb3 	bl	8009d9c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006e36:	bf00      	nop
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	200009e0 	.word	0x200009e0

08006e40 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006e44:	4802      	ldr	r0, [pc, #8]	; (8006e50 <I2C1_ER_IRQHandler+0x10>)
 8006e46:	f003 f91a 	bl	800a07e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8006e4a:	bf00      	nop
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	200009e0 	.word	0x200009e0

08006e54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006e58:	4802      	ldr	r0, [pc, #8]	; (8006e64 <USART1_IRQHandler+0x10>)
 8006e5a:	f007 f815 	bl	800de88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006e5e:	bf00      	nop
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20001838 	.word	0x20001838

08006e68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006e6c:	4802      	ldr	r0, [pc, #8]	; (8006e78 <USART2_IRQHandler+0x10>)
 8006e6e:	f007 f80b 	bl	800de88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006e72:	bf00      	nop
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	2000187c 	.word	0x2000187c

08006e7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8006e80:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006e84:	f002 fb0a 	bl	800949c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8006e88:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006e8c:	f002 fb06 	bl	800949c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8006e90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006e94:	f002 fb02 	bl	800949c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006e98:	bf00      	nop
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006ea0:	4803      	ldr	r0, [pc, #12]	; (8006eb0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8006ea2:	f005 ff43 	bl	800cd2c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8006ea6:	4803      	ldr	r0, [pc, #12]	; (8006eb4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8006ea8:	f005 ff40 	bl	800cd2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8006eac:	bf00      	nop
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	20001718 	.word	0x20001718
 8006eb4:	200017f0 	.word	0x200017f0

08006eb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006ebc:	4802      	ldr	r0, [pc, #8]	; (8006ec8 <TIM6_DAC_IRQHandler+0x10>)
 8006ebe:	f005 ff35 	bl	800cd2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006ec2:	bf00      	nop
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20001688 	.word	0x20001688

08006ecc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006ed0:	4802      	ldr	r0, [pc, #8]	; (8006edc <TIM7_IRQHandler+0x10>)
 8006ed2:	f005 ff2b 	bl	800cd2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006ed6:	bf00      	nop
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	200016d0 	.word	0x200016d0

08006ee0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006ee4:	4802      	ldr	r0, [pc, #8]	; (8006ef0 <DMA2_Stream0_IRQHandler+0x10>)
 8006ee6:	f001 fdbf 	bl	8008a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006eea:	bf00      	nop
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000914 	.word	0x20000914

08006ef4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006ef8:	4802      	ldr	r0, [pc, #8]	; (8006f04 <DMA2_Stream2_IRQHandler+0x10>)
 8006efa:	f001 fdb5 	bl	8008a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006efe:	bf00      	nop
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20001904 	.word	0x20001904

08006f08 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006f0c:	4802      	ldr	r0, [pc, #8]	; (8006f18 <DMA2_Stream7_IRQHandler+0x10>)
 8006f0e:	f001 fdab 	bl	8008a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8006f12:	bf00      	nop
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20001964 	.word	0x20001964

08006f1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
	return 1;
 8006f20:	2301      	movs	r3, #1
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <_kill>:

int _kill(int pid, int sig)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006f36:	f00c fe65 	bl	8013c04 <__errno>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2216      	movs	r2, #22
 8006f3e:	601a      	str	r2, [r3, #0]
	return -1;
 8006f40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <_exit>:

void _exit (int status)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006f54:	f04f 31ff 	mov.w	r1, #4294967295
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff ffe7 	bl	8006f2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8006f5e:	e7fe      	b.n	8006f5e <_exit+0x12>

08006f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f68:	4a14      	ldr	r2, [pc, #80]	; (8006fbc <_sbrk+0x5c>)
 8006f6a:	4b15      	ldr	r3, [pc, #84]	; (8006fc0 <_sbrk+0x60>)
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f74:	4b13      	ldr	r3, [pc, #76]	; (8006fc4 <_sbrk+0x64>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d102      	bne.n	8006f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006f7c:	4b11      	ldr	r3, [pc, #68]	; (8006fc4 <_sbrk+0x64>)
 8006f7e:	4a12      	ldr	r2, [pc, #72]	; (8006fc8 <_sbrk+0x68>)
 8006f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f82:	4b10      	ldr	r3, [pc, #64]	; (8006fc4 <_sbrk+0x64>)
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4413      	add	r3, r2
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d207      	bcs.n	8006fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006f90:	f00c fe38 	bl	8013c04 <__errno>
 8006f94:	4603      	mov	r3, r0
 8006f96:	220c      	movs	r2, #12
 8006f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f9e:	e009      	b.n	8006fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006fa0:	4b08      	ldr	r3, [pc, #32]	; (8006fc4 <_sbrk+0x64>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006fa6:	4b07      	ldr	r3, [pc, #28]	; (8006fc4 <_sbrk+0x64>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4413      	add	r3, r2
 8006fae:	4a05      	ldr	r2, [pc, #20]	; (8006fc4 <_sbrk+0x64>)
 8006fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	20020000 	.word	0x20020000
 8006fc0:	00000400 	.word	0x00000400
 8006fc4:	200015ac 	.word	0x200015ac
 8006fc8:	20001ad8 	.word	0x20001ad8

08006fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006fd0:	4b06      	ldr	r3, [pc, #24]	; (8006fec <SystemInit+0x20>)
 8006fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd6:	4a05      	ldr	r2, [pc, #20]	; (8006fec <SystemInit+0x20>)
 8006fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006fe0:	bf00      	nop
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	e000ed00 	.word	0xe000ed00

08006ff0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b092      	sub	sp, #72	; 0x48
 8006ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ff6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	605a      	str	r2, [r3, #4]
 800700a:	609a      	str	r2, [r3, #8]
 800700c:	60da      	str	r2, [r3, #12]
 800700e:	611a      	str	r2, [r3, #16]
 8007010:	615a      	str	r2, [r3, #20]
 8007012:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007014:	1d3b      	adds	r3, r7, #4
 8007016:	2220      	movs	r2, #32
 8007018:	2100      	movs	r1, #0
 800701a:	4618      	mov	r0, r3
 800701c:	f00c fe2a 	bl	8013c74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007020:	4b32      	ldr	r3, [pc, #200]	; (80070ec <MX_TIM1_Init+0xfc>)
 8007022:	4a33      	ldr	r2, [pc, #204]	; (80070f0 <MX_TIM1_Init+0x100>)
 8007024:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8007026:	4b31      	ldr	r3, [pc, #196]	; (80070ec <MX_TIM1_Init+0xfc>)
 8007028:	22a7      	movs	r2, #167	; 0xa7
 800702a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800702c:	4b2f      	ldr	r3, [pc, #188]	; (80070ec <MX_TIM1_Init+0xfc>)
 800702e:	2200      	movs	r2, #0
 8007030:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8007032:	4b2e      	ldr	r3, [pc, #184]	; (80070ec <MX_TIM1_Init+0xfc>)
 8007034:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8007038:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800703a:	4b2c      	ldr	r3, [pc, #176]	; (80070ec <MX_TIM1_Init+0xfc>)
 800703c:	2200      	movs	r2, #0
 800703e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007040:	4b2a      	ldr	r3, [pc, #168]	; (80070ec <MX_TIM1_Init+0xfc>)
 8007042:	2200      	movs	r2, #0
 8007044:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007046:	4b29      	ldr	r3, [pc, #164]	; (80070ec <MX_TIM1_Init+0xfc>)
 8007048:	2200      	movs	r2, #0
 800704a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800704c:	4827      	ldr	r0, [pc, #156]	; (80070ec <MX_TIM1_Init+0xfc>)
 800704e:	f005 fd55 	bl	800cafc <HAL_TIM_PWM_Init>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8007058:	f7fc fbf8 	bl	800384c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800705c:	2300      	movs	r3, #0
 800705e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007060:	2300      	movs	r3, #0
 8007062:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007064:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007068:	4619      	mov	r1, r3
 800706a:	4820      	ldr	r0, [pc, #128]	; (80070ec <MX_TIM1_Init+0xfc>)
 800706c:	f006 fc28 	bl	800d8c0 <HAL_TIMEx_MasterConfigSynchronization>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8007076:	f7fc fbe9 	bl	800384c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800707a:	2360      	movs	r3, #96	; 0x60
 800707c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800707e:	2300      	movs	r3, #0
 8007080:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007082:	2300      	movs	r3, #0
 8007084:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007086:	2300      	movs	r3, #0
 8007088:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800708a:	2300      	movs	r3, #0
 800708c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800708e:	2300      	movs	r3, #0
 8007090:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007096:	220c      	movs	r2, #12
 8007098:	4619      	mov	r1, r3
 800709a:	4814      	ldr	r0, [pc, #80]	; (80070ec <MX_TIM1_Init+0xfc>)
 800709c:	f005 ff4e 	bl	800cf3c <HAL_TIM_PWM_ConfigChannel>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80070a6:	f7fc fbd1 	bl	800384c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80070aa:	2300      	movs	r3, #0
 80070ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80070ae:	2300      	movs	r3, #0
 80070b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80070ba:	2300      	movs	r3, #0
 80070bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80070be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80070c4:	2300      	movs	r3, #0
 80070c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80070c8:	1d3b      	adds	r3, r7, #4
 80070ca:	4619      	mov	r1, r3
 80070cc:	4807      	ldr	r0, [pc, #28]	; (80070ec <MX_TIM1_Init+0xfc>)
 80070ce:	f006 fc73 	bl	800d9b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80070d8:	f7fc fbb8 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80070dc:	4803      	ldr	r0, [pc, #12]	; (80070ec <MX_TIM1_Init+0xfc>)
 80070de:	f000 fb35 	bl	800774c <HAL_TIM_MspPostInit>

}
 80070e2:	bf00      	nop
 80070e4:	3748      	adds	r7, #72	; 0x48
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	200015b0 	.word	0x200015b0
 80070f0:	40010000 	.word	0x40010000

080070f4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b08a      	sub	sp, #40	; 0x28
 80070f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80070fa:	f107 0320 	add.w	r3, r7, #32
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007104:	1d3b      	adds	r3, r7, #4
 8007106:	2200      	movs	r2, #0
 8007108:	601a      	str	r2, [r3, #0]
 800710a:	605a      	str	r2, [r3, #4]
 800710c:	609a      	str	r2, [r3, #8]
 800710e:	60da      	str	r2, [r3, #12]
 8007110:	611a      	str	r2, [r3, #16]
 8007112:	615a      	str	r2, [r3, #20]
 8007114:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007116:	4b28      	ldr	r3, [pc, #160]	; (80071b8 <MX_TIM2_Init+0xc4>)
 8007118:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800711c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 179;
 800711e:	4b26      	ldr	r3, [pc, #152]	; (80071b8 <MX_TIM2_Init+0xc4>)
 8007120:	22b3      	movs	r2, #179	; 0xb3
 8007122:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007124:	4b24      	ldr	r3, [pc, #144]	; (80071b8 <MX_TIM2_Init+0xc4>)
 8007126:	2200      	movs	r2, #0
 8007128:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800712a:	4b23      	ldr	r3, [pc, #140]	; (80071b8 <MX_TIM2_Init+0xc4>)
 800712c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8007130:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007132:	4b21      	ldr	r3, [pc, #132]	; (80071b8 <MX_TIM2_Init+0xc4>)
 8007134:	2200      	movs	r2, #0
 8007136:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007138:	4b1f      	ldr	r3, [pc, #124]	; (80071b8 <MX_TIM2_Init+0xc4>)
 800713a:	2200      	movs	r2, #0
 800713c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800713e:	481e      	ldr	r0, [pc, #120]	; (80071b8 <MX_TIM2_Init+0xc4>)
 8007140:	f005 fcdc 	bl	800cafc <HAL_TIM_PWM_Init>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800714a:	f7fc fb7f 	bl	800384c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800714e:	2300      	movs	r3, #0
 8007150:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007152:	2300      	movs	r3, #0
 8007154:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007156:	f107 0320 	add.w	r3, r7, #32
 800715a:	4619      	mov	r1, r3
 800715c:	4816      	ldr	r0, [pc, #88]	; (80071b8 <MX_TIM2_Init+0xc4>)
 800715e:	f006 fbaf 	bl	800d8c0 <HAL_TIMEx_MasterConfigSynchronization>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8007168:	f7fc fb70 	bl	800384c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800716c:	2360      	movs	r3, #96	; 0x60
 800716e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007174:	2300      	movs	r3, #0
 8007176:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007178:	2300      	movs	r3, #0
 800717a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800717c:	1d3b      	adds	r3, r7, #4
 800717e:	2200      	movs	r2, #0
 8007180:	4619      	mov	r1, r3
 8007182:	480d      	ldr	r0, [pc, #52]	; (80071b8 <MX_TIM2_Init+0xc4>)
 8007184:	f005 feda 	bl	800cf3c <HAL_TIM_PWM_ConfigChannel>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800718e:	f7fc fb5d 	bl	800384c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007192:	1d3b      	adds	r3, r7, #4
 8007194:	2204      	movs	r2, #4
 8007196:	4619      	mov	r1, r3
 8007198:	4807      	ldr	r0, [pc, #28]	; (80071b8 <MX_TIM2_Init+0xc4>)
 800719a:	f005 fecf 	bl	800cf3c <HAL_TIM_PWM_ConfigChannel>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80071a4:	f7fc fb52 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80071a8:	4803      	ldr	r0, [pc, #12]	; (80071b8 <MX_TIM2_Init+0xc4>)
 80071aa:	f000 facf 	bl	800774c <HAL_TIM_MspPostInit>

}
 80071ae:	bf00      	nop
 80071b0:	3728      	adds	r7, #40	; 0x28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	200015f8 	.word	0x200015f8

080071bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08a      	sub	sp, #40	; 0x28
 80071c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80071c2:	f107 0320 	add.w	r3, r7, #32
 80071c6:	2200      	movs	r2, #0
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80071cc:	1d3b      	adds	r3, r7, #4
 80071ce:	2200      	movs	r2, #0
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	605a      	str	r2, [r3, #4]
 80071d4:	609a      	str	r2, [r3, #8]
 80071d6:	60da      	str	r2, [r3, #12]
 80071d8:	611a      	str	r2, [r3, #16]
 80071da:	615a      	str	r2, [r3, #20]
 80071dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80071de:	4b32      	ldr	r3, [pc, #200]	; (80072a8 <MX_TIM3_Init+0xec>)
 80071e0:	4a32      	ldr	r2, [pc, #200]	; (80072ac <MX_TIM3_Init+0xf0>)
 80071e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 179;
 80071e4:	4b30      	ldr	r3, [pc, #192]	; (80072a8 <MX_TIM3_Init+0xec>)
 80071e6:	22b3      	movs	r2, #179	; 0xb3
 80071e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071ea:	4b2f      	ldr	r3, [pc, #188]	; (80072a8 <MX_TIM3_Init+0xec>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80071f0:	4b2d      	ldr	r3, [pc, #180]	; (80072a8 <MX_TIM3_Init+0xec>)
 80071f2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80071f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80071f8:	4b2b      	ldr	r3, [pc, #172]	; (80072a8 <MX_TIM3_Init+0xec>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80071fe:	4b2a      	ldr	r3, [pc, #168]	; (80072a8 <MX_TIM3_Init+0xec>)
 8007200:	2200      	movs	r2, #0
 8007202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007204:	4828      	ldr	r0, [pc, #160]	; (80072a8 <MX_TIM3_Init+0xec>)
 8007206:	f005 fc79 	bl	800cafc <HAL_TIM_PWM_Init>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8007210:	f7fc fb1c 	bl	800384c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007214:	2300      	movs	r3, #0
 8007216:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007218:	2300      	movs	r3, #0
 800721a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800721c:	f107 0320 	add.w	r3, r7, #32
 8007220:	4619      	mov	r1, r3
 8007222:	4821      	ldr	r0, [pc, #132]	; (80072a8 <MX_TIM3_Init+0xec>)
 8007224:	f006 fb4c 	bl	800d8c0 <HAL_TIMEx_MasterConfigSynchronization>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800722e:	f7fc fb0d 	bl	800384c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007232:	2360      	movs	r3, #96	; 0x60
 8007234:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800723e:	2300      	movs	r3, #0
 8007240:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007242:	1d3b      	adds	r3, r7, #4
 8007244:	2200      	movs	r2, #0
 8007246:	4619      	mov	r1, r3
 8007248:	4817      	ldr	r0, [pc, #92]	; (80072a8 <MX_TIM3_Init+0xec>)
 800724a:	f005 fe77 	bl	800cf3c <HAL_TIM_PWM_ConfigChannel>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d001      	beq.n	8007258 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8007254:	f7fc fafa 	bl	800384c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007258:	1d3b      	adds	r3, r7, #4
 800725a:	2204      	movs	r2, #4
 800725c:	4619      	mov	r1, r3
 800725e:	4812      	ldr	r0, [pc, #72]	; (80072a8 <MX_TIM3_Init+0xec>)
 8007260:	f005 fe6c 	bl	800cf3c <HAL_TIM_PWM_ConfigChannel>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800726a:	f7fc faef 	bl	800384c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800726e:	1d3b      	adds	r3, r7, #4
 8007270:	2208      	movs	r2, #8
 8007272:	4619      	mov	r1, r3
 8007274:	480c      	ldr	r0, [pc, #48]	; (80072a8 <MX_TIM3_Init+0xec>)
 8007276:	f005 fe61 	bl	800cf3c <HAL_TIM_PWM_ConfigChannel>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8007280:	f7fc fae4 	bl	800384c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007284:	1d3b      	adds	r3, r7, #4
 8007286:	220c      	movs	r2, #12
 8007288:	4619      	mov	r1, r3
 800728a:	4807      	ldr	r0, [pc, #28]	; (80072a8 <MX_TIM3_Init+0xec>)
 800728c:	f005 fe56 	bl	800cf3c <HAL_TIM_PWM_ConfigChannel>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8007296:	f7fc fad9 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800729a:	4803      	ldr	r0, [pc, #12]	; (80072a8 <MX_TIM3_Init+0xec>)
 800729c:	f000 fa56 	bl	800774c <HAL_TIM_MspPostInit>

}
 80072a0:	bf00      	nop
 80072a2:	3728      	adds	r7, #40	; 0x28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	20001640 	.word	0x20001640
 80072ac:	40000400 	.word	0x40000400

080072b0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80072b6:	463b      	mov	r3, r7
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80072be:	4b15      	ldr	r3, [pc, #84]	; (8007314 <MX_TIM6_Init+0x64>)
 80072c0:	4a15      	ldr	r2, [pc, #84]	; (8007318 <MX_TIM6_Init+0x68>)
 80072c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 120;
 80072c4:	4b13      	ldr	r3, [pc, #76]	; (8007314 <MX_TIM6_Init+0x64>)
 80072c6:	2278      	movs	r2, #120	; 0x78
 80072c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072ca:	4b12      	ldr	r3, [pc, #72]	; (8007314 <MX_TIM6_Init+0x64>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80072d0:	4b10      	ldr	r3, [pc, #64]	; (8007314 <MX_TIM6_Init+0x64>)
 80072d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80072d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80072d8:	4b0e      	ldr	r3, [pc, #56]	; (8007314 <MX_TIM6_Init+0x64>)
 80072da:	2200      	movs	r2, #0
 80072dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80072de:	480d      	ldr	r0, [pc, #52]	; (8007314 <MX_TIM6_Init+0x64>)
 80072e0:	f005 fb4c 	bl	800c97c <HAL_TIM_Base_Init>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80072ea:	f7fc faaf 	bl	800384c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80072ee:	2300      	movs	r3, #0
 80072f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80072f2:	2300      	movs	r3, #0
 80072f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80072f6:	463b      	mov	r3, r7
 80072f8:	4619      	mov	r1, r3
 80072fa:	4806      	ldr	r0, [pc, #24]	; (8007314 <MX_TIM6_Init+0x64>)
 80072fc:	f006 fae0 	bl	800d8c0 <HAL_TIMEx_MasterConfigSynchronization>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8007306:	f7fc faa1 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800730a:	bf00      	nop
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20001688 	.word	0x20001688
 8007318:	40001000 	.word	0x40001000

0800731c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007322:	463b      	mov	r3, r7
 8007324:	2200      	movs	r2, #0
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800732a:	4b15      	ldr	r3, [pc, #84]	; (8007380 <MX_TIM7_Init+0x64>)
 800732c:	4a15      	ldr	r2, [pc, #84]	; (8007384 <MX_TIM7_Init+0x68>)
 800732e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 167;
 8007330:	4b13      	ldr	r3, [pc, #76]	; (8007380 <MX_TIM7_Init+0x64>)
 8007332:	22a7      	movs	r2, #167	; 0xa7
 8007334:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007336:	4b12      	ldr	r3, [pc, #72]	; (8007380 <MX_TIM7_Init+0x64>)
 8007338:	2200      	movs	r2, #0
 800733a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 800733c:	4b10      	ldr	r3, [pc, #64]	; (8007380 <MX_TIM7_Init+0x64>)
 800733e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007342:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007344:	4b0e      	ldr	r3, [pc, #56]	; (8007380 <MX_TIM7_Init+0x64>)
 8007346:	2200      	movs	r2, #0
 8007348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800734a:	480d      	ldr	r0, [pc, #52]	; (8007380 <MX_TIM7_Init+0x64>)
 800734c:	f005 fb16 	bl	800c97c <HAL_TIM_Base_Init>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8007356:	f7fc fa79 	bl	800384c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800735a:	2300      	movs	r3, #0
 800735c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800735e:	2300      	movs	r3, #0
 8007360:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8007362:	463b      	mov	r3, r7
 8007364:	4619      	mov	r1, r3
 8007366:	4806      	ldr	r0, [pc, #24]	; (8007380 <MX_TIM7_Init+0x64>)
 8007368:	f006 faaa 	bl	800d8c0 <HAL_TIMEx_MasterConfigSynchronization>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8007372:	f7fc fa6b 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8007376:	bf00      	nop
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	200016d0 	.word	0x200016d0
 8007384:	40001400 	.word	0x40001400

08007388 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800738e:	f107 0308 	add.w	r3, r7, #8
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	605a      	str	r2, [r3, #4]
 8007398:	609a      	str	r2, [r3, #8]
 800739a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800739c:	463b      	mov	r3, r7
 800739e:	2200      	movs	r2, #0
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80073a4:	4b1e      	ldr	r3, [pc, #120]	; (8007420 <MX_TIM8_Init+0x98>)
 80073a6:	4a1f      	ldr	r2, [pc, #124]	; (8007424 <MX_TIM8_Init+0x9c>)
 80073a8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 80073aa:	4b1d      	ldr	r3, [pc, #116]	; (8007420 <MX_TIM8_Init+0x98>)
 80073ac:	223f      	movs	r2, #63	; 0x3f
 80073ae:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073b0:	4b1b      	ldr	r3, [pc, #108]	; (8007420 <MX_TIM8_Init+0x98>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 80073b6:	4b1a      	ldr	r3, [pc, #104]	; (8007420 <MX_TIM8_Init+0x98>)
 80073b8:	2263      	movs	r2, #99	; 0x63
 80073ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80073bc:	4b18      	ldr	r3, [pc, #96]	; (8007420 <MX_TIM8_Init+0x98>)
 80073be:	2200      	movs	r2, #0
 80073c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80073c2:	4b17      	ldr	r3, [pc, #92]	; (8007420 <MX_TIM8_Init+0x98>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80073c8:	4b15      	ldr	r3, [pc, #84]	; (8007420 <MX_TIM8_Init+0x98>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80073ce:	4814      	ldr	r0, [pc, #80]	; (8007420 <MX_TIM8_Init+0x98>)
 80073d0:	f005 fad4 	bl	800c97c <HAL_TIM_Base_Init>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <MX_TIM8_Init+0x56>
  {
    Error_Handler();
 80073da:	f7fc fa37 	bl	800384c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80073de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80073e4:	f107 0308 	add.w	r3, r7, #8
 80073e8:	4619      	mov	r1, r3
 80073ea:	480d      	ldr	r0, [pc, #52]	; (8007420 <MX_TIM8_Init+0x98>)
 80073ec:	f005 fe68 	bl	800d0c0 <HAL_TIM_ConfigClockSource>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <MX_TIM8_Init+0x72>
  {
    Error_Handler();
 80073f6:	f7fc fa29 	bl	800384c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80073fa:	2300      	movs	r3, #0
 80073fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80073fe:	2300      	movs	r3, #0
 8007400:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007402:	463b      	mov	r3, r7
 8007404:	4619      	mov	r1, r3
 8007406:	4806      	ldr	r0, [pc, #24]	; (8007420 <MX_TIM8_Init+0x98>)
 8007408:	f006 fa5a 	bl	800d8c0 <HAL_TIMEx_MasterConfigSynchronization>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8007412:	f7fc fa1b 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8007416:	bf00      	nop
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20001718 	.word	0x20001718
 8007424:	40010400 	.word	0x40010400

08007428 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800742c:	4b0e      	ldr	r3, [pc, #56]	; (8007468 <MX_TIM10_Init+0x40>)
 800742e:	4a0f      	ldr	r2, [pc, #60]	; (800746c <MX_TIM10_Init+0x44>)
 8007430:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 167;
 8007432:	4b0d      	ldr	r3, [pc, #52]	; (8007468 <MX_TIM10_Init+0x40>)
 8007434:	22a7      	movs	r2, #167	; 0xa7
 8007436:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007438:	4b0b      	ldr	r3, [pc, #44]	; (8007468 <MX_TIM10_Init+0x40>)
 800743a:	2200      	movs	r2, #0
 800743c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 800743e:	4b0a      	ldr	r3, [pc, #40]	; (8007468 <MX_TIM10_Init+0x40>)
 8007440:	f242 720f 	movw	r2, #9999	; 0x270f
 8007444:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007446:	4b08      	ldr	r3, [pc, #32]	; (8007468 <MX_TIM10_Init+0x40>)
 8007448:	2200      	movs	r2, #0
 800744a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800744c:	4b06      	ldr	r3, [pc, #24]	; (8007468 <MX_TIM10_Init+0x40>)
 800744e:	2200      	movs	r2, #0
 8007450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8007452:	4805      	ldr	r0, [pc, #20]	; (8007468 <MX_TIM10_Init+0x40>)
 8007454:	f005 fa92 	bl	800c97c <HAL_TIM_Base_Init>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800745e:	f7fc f9f5 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8007462:	bf00      	nop
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20001760 	.word	0x20001760
 800746c:	40014400 	.word	0x40014400

08007470 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8007474:	4b0d      	ldr	r3, [pc, #52]	; (80074ac <MX_TIM11_Init+0x3c>)
 8007476:	4a0e      	ldr	r2, [pc, #56]	; (80074b0 <MX_TIM11_Init+0x40>)
 8007478:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 63;
 800747a:	4b0c      	ldr	r3, [pc, #48]	; (80074ac <MX_TIM11_Init+0x3c>)
 800747c:	223f      	movs	r2, #63	; 0x3f
 800747e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007480:	4b0a      	ldr	r3, [pc, #40]	; (80074ac <MX_TIM11_Init+0x3c>)
 8007482:	2200      	movs	r2, #0
 8007484:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8007486:	4b09      	ldr	r3, [pc, #36]	; (80074ac <MX_TIM11_Init+0x3c>)
 8007488:	2263      	movs	r2, #99	; 0x63
 800748a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800748c:	4b07      	ldr	r3, [pc, #28]	; (80074ac <MX_TIM11_Init+0x3c>)
 800748e:	2200      	movs	r2, #0
 8007490:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007492:	4b06      	ldr	r3, [pc, #24]	; (80074ac <MX_TIM11_Init+0x3c>)
 8007494:	2200      	movs	r2, #0
 8007496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8007498:	4804      	ldr	r0, [pc, #16]	; (80074ac <MX_TIM11_Init+0x3c>)
 800749a:	f005 fa6f 	bl	800c97c <HAL_TIM_Base_Init>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 80074a4:	f7fc f9d2 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80074a8:	bf00      	nop
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	200017a8 	.word	0x200017a8
 80074b0:	40014800 	.word	0x40014800

080074b4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80074b8:	4b0e      	ldr	r3, [pc, #56]	; (80074f4 <MX_TIM13_Init+0x40>)
 80074ba:	4a0f      	ldr	r2, [pc, #60]	; (80074f8 <MX_TIM13_Init+0x44>)
 80074bc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 167;
 80074be:	4b0d      	ldr	r3, [pc, #52]	; (80074f4 <MX_TIM13_Init+0x40>)
 80074c0:	22a7      	movs	r2, #167	; 0xa7
 80074c2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80074c4:	4b0b      	ldr	r3, [pc, #44]	; (80074f4 <MX_TIM13_Init+0x40>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 80074ca:	4b0a      	ldr	r3, [pc, #40]	; (80074f4 <MX_TIM13_Init+0x40>)
 80074cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80074d0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80074d2:	4b08      	ldr	r3, [pc, #32]	; (80074f4 <MX_TIM13_Init+0x40>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80074d8:	4b06      	ldr	r3, [pc, #24]	; (80074f4 <MX_TIM13_Init+0x40>)
 80074da:	2200      	movs	r2, #0
 80074dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80074de:	4805      	ldr	r0, [pc, #20]	; (80074f4 <MX_TIM13_Init+0x40>)
 80074e0:	f005 fa4c 	bl	800c97c <HAL_TIM_Base_Init>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80074ea:	f7fc f9af 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80074ee:	bf00      	nop
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	200017f0 	.word	0x200017f0
 80074f8:	40001c00 	.word	0x40001c00

080074fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a2e      	ldr	r2, [pc, #184]	; (80075c4 <HAL_TIM_PWM_MspInit+0xc8>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d12e      	bne.n	800756c <HAL_TIM_PWM_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800750e:	2300      	movs	r3, #0
 8007510:	617b      	str	r3, [r7, #20]
 8007512:	4b2d      	ldr	r3, [pc, #180]	; (80075c8 <HAL_TIM_PWM_MspInit+0xcc>)
 8007514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007516:	4a2c      	ldr	r2, [pc, #176]	; (80075c8 <HAL_TIM_PWM_MspInit+0xcc>)
 8007518:	f043 0301 	orr.w	r3, r3, #1
 800751c:	6453      	str	r3, [r2, #68]	; 0x44
 800751e:	4b2a      	ldr	r3, [pc, #168]	; (80075c8 <HAL_TIM_PWM_MspInit+0xcc>)
 8007520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800752a:	2200      	movs	r2, #0
 800752c:	2100      	movs	r1, #0
 800752e:	2018      	movs	r0, #24
 8007530:	f001 f85f 	bl	80085f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8007534:	2018      	movs	r0, #24
 8007536:	f001 f878 	bl	800862a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800753a:	2200      	movs	r2, #0
 800753c:	2100      	movs	r1, #0
 800753e:	2019      	movs	r0, #25
 8007540:	f001 f857 	bl	80085f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007544:	2019      	movs	r0, #25
 8007546:	f001 f870 	bl	800862a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800754a:	2200      	movs	r2, #0
 800754c:	2100      	movs	r1, #0
 800754e:	201a      	movs	r0, #26
 8007550:	f001 f84f 	bl	80085f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8007554:	201a      	movs	r0, #26
 8007556:	f001 f868 	bl	800862a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800755a:	2200      	movs	r2, #0
 800755c:	2100      	movs	r1, #0
 800755e:	201b      	movs	r0, #27
 8007560:	f001 f847 	bl	80085f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8007564:	201b      	movs	r0, #27
 8007566:	f001 f860 	bl	800862a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800756a:	e026      	b.n	80075ba <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM2)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007574:	d10e      	bne.n	8007594 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007576:	2300      	movs	r3, #0
 8007578:	613b      	str	r3, [r7, #16]
 800757a:	4b13      	ldr	r3, [pc, #76]	; (80075c8 <HAL_TIM_PWM_MspInit+0xcc>)
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	4a12      	ldr	r2, [pc, #72]	; (80075c8 <HAL_TIM_PWM_MspInit+0xcc>)
 8007580:	f043 0301 	orr.w	r3, r3, #1
 8007584:	6413      	str	r3, [r2, #64]	; 0x40
 8007586:	4b10      	ldr	r3, [pc, #64]	; (80075c8 <HAL_TIM_PWM_MspInit+0xcc>)
 8007588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	613b      	str	r3, [r7, #16]
 8007590:	693b      	ldr	r3, [r7, #16]
}
 8007592:	e012      	b.n	80075ba <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM3)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a0c      	ldr	r2, [pc, #48]	; (80075cc <HAL_TIM_PWM_MspInit+0xd0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d10d      	bne.n	80075ba <HAL_TIM_PWM_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <HAL_TIM_PWM_MspInit+0xcc>)
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	4a08      	ldr	r2, [pc, #32]	; (80075c8 <HAL_TIM_PWM_MspInit+0xcc>)
 80075a8:	f043 0302 	orr.w	r3, r3, #2
 80075ac:	6413      	str	r3, [r2, #64]	; 0x40
 80075ae:	4b06      	ldr	r3, [pc, #24]	; (80075c8 <HAL_TIM_PWM_MspInit+0xcc>)
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	f003 0302 	and.w	r3, r3, #2
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	68fb      	ldr	r3, [r7, #12]
}
 80075ba:	bf00      	nop
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	40010000 	.word	0x40010000
 80075c8:	40023800 	.word	0x40023800
 80075cc:	40000400 	.word	0x40000400

080075d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a54      	ldr	r2, [pc, #336]	; (8007730 <HAL_TIM_Base_MspInit+0x160>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d116      	bne.n	8007610 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80075e2:	2300      	movs	r3, #0
 80075e4:	61fb      	str	r3, [r7, #28]
 80075e6:	4b53      	ldr	r3, [pc, #332]	; (8007734 <HAL_TIM_Base_MspInit+0x164>)
 80075e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ea:	4a52      	ldr	r2, [pc, #328]	; (8007734 <HAL_TIM_Base_MspInit+0x164>)
 80075ec:	f043 0310 	orr.w	r3, r3, #16
 80075f0:	6413      	str	r3, [r2, #64]	; 0x40
 80075f2:	4b50      	ldr	r3, [pc, #320]	; (8007734 <HAL_TIM_Base_MspInit+0x164>)
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	f003 0310 	and.w	r3, r3, #16
 80075fa:	61fb      	str	r3, [r7, #28]
 80075fc:	69fb      	ldr	r3, [r7, #28]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80075fe:	2200      	movs	r2, #0
 8007600:	2100      	movs	r1, #0
 8007602:	2036      	movs	r0, #54	; 0x36
 8007604:	f000 fff5 	bl	80085f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007608:	2036      	movs	r0, #54	; 0x36
 800760a:	f001 f80e 	bl	800862a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800760e:	e08a      	b.n	8007726 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM7)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a48      	ldr	r2, [pc, #288]	; (8007738 <HAL_TIM_Base_MspInit+0x168>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d116      	bne.n	8007648 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800761a:	2300      	movs	r3, #0
 800761c:	61bb      	str	r3, [r7, #24]
 800761e:	4b45      	ldr	r3, [pc, #276]	; (8007734 <HAL_TIM_Base_MspInit+0x164>)
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	4a44      	ldr	r2, [pc, #272]	; (8007734 <HAL_TIM_Base_MspInit+0x164>)
 8007624:	f043 0320 	orr.w	r3, r3, #32
 8007628:	6413      	str	r3, [r2, #64]	; 0x40
 800762a:	4b42      	ldr	r3, [pc, #264]	; (8007734 <HAL_TIM_Base_MspInit+0x164>)
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	61bb      	str	r3, [r7, #24]
 8007634:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007636:	2200      	movs	r2, #0
 8007638:	2100      	movs	r1, #0
 800763a:	2037      	movs	r0, #55	; 0x37
 800763c:	f000 ffd9 	bl	80085f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007640:	2037      	movs	r0, #55	; 0x37
 8007642:	f000 fff2 	bl	800862a <HAL_NVIC_EnableIRQ>
}
 8007646:	e06e      	b.n	8007726 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM8)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a3b      	ldr	r2, [pc, #236]	; (800773c <HAL_TIM_Base_MspInit+0x16c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d116      	bne.n	8007680 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007652:	2300      	movs	r3, #0
 8007654:	617b      	str	r3, [r7, #20]
 8007656:	4b37      	ldr	r3, [pc, #220]	; (8007734 <HAL_TIM_Base_MspInit+0x164>)
 8007658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765a:	4a36      	ldr	r2, [pc, #216]	; (8007734 <HAL_TIM_Base_MspInit+0x164>)
 800765c:	f043 0302 	orr.w	r3, r3, #2
 8007660:	6453      	str	r3, [r2, #68]	; 0x44
 8007662:	4b34      	ldr	r3, [pc, #208]	; (8007734 <HAL_TIM_Base_MspInit+0x164>)
 8007664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	617b      	str	r3, [r7, #20]
 800766c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800766e:	2200      	movs	r2, #0
 8007670:	2100      	movs	r1, #0
 8007672:	202c      	movs	r0, #44	; 0x2c
 8007674:	f000 ffbd 	bl	80085f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007678:	202c      	movs	r0, #44	; 0x2c
 800767a:	f000 ffd6 	bl	800862a <HAL_NVIC_EnableIRQ>
}
 800767e:	e052      	b.n	8007726 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM10)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a2e      	ldr	r2, [pc, #184]	; (8007740 <HAL_TIM_Base_MspInit+0x170>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d116      	bne.n	80076b8 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800768a:	2300      	movs	r3, #0
 800768c:	613b      	str	r3, [r7, #16]
 800768e:	4b29      	ldr	r3, [pc, #164]	; (8007734 <HAL_TIM_Base_MspInit+0x164>)
 8007690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007692:	4a28      	ldr	r2, [pc, #160]	; (8007734 <HAL_TIM_Base_MspInit+0x164>)
 8007694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007698:	6453      	str	r3, [r2, #68]	; 0x44
 800769a:	4b26      	ldr	r3, [pc, #152]	; (8007734 <HAL_TIM_Base_MspInit+0x164>)
 800769c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800769e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a2:	613b      	str	r3, [r7, #16]
 80076a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80076a6:	2200      	movs	r2, #0
 80076a8:	2100      	movs	r1, #0
 80076aa:	2019      	movs	r0, #25
 80076ac:	f000 ffa1 	bl	80085f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80076b0:	2019      	movs	r0, #25
 80076b2:	f000 ffba 	bl	800862a <HAL_NVIC_EnableIRQ>
}
 80076b6:	e036      	b.n	8007726 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM11)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a21      	ldr	r2, [pc, #132]	; (8007744 <HAL_TIM_Base_MspInit+0x174>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d116      	bne.n	80076f0 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80076c2:	2300      	movs	r3, #0
 80076c4:	60fb      	str	r3, [r7, #12]
 80076c6:	4b1b      	ldr	r3, [pc, #108]	; (8007734 <HAL_TIM_Base_MspInit+0x164>)
 80076c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ca:	4a1a      	ldr	r2, [pc, #104]	; (8007734 <HAL_TIM_Base_MspInit+0x164>)
 80076cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076d0:	6453      	str	r3, [r2, #68]	; 0x44
 80076d2:	4b18      	ldr	r3, [pc, #96]	; (8007734 <HAL_TIM_Base_MspInit+0x164>)
 80076d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80076de:	2200      	movs	r2, #0
 80076e0:	2100      	movs	r1, #0
 80076e2:	201a      	movs	r0, #26
 80076e4:	f000 ff85 	bl	80085f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80076e8:	201a      	movs	r0, #26
 80076ea:	f000 ff9e 	bl	800862a <HAL_NVIC_EnableIRQ>
}
 80076ee:	e01a      	b.n	8007726 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM13)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a14      	ldr	r2, [pc, #80]	; (8007748 <HAL_TIM_Base_MspInit+0x178>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d115      	bne.n	8007726 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80076fa:	2300      	movs	r3, #0
 80076fc:	60bb      	str	r3, [r7, #8]
 80076fe:	4b0d      	ldr	r3, [pc, #52]	; (8007734 <HAL_TIM_Base_MspInit+0x164>)
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	4a0c      	ldr	r2, [pc, #48]	; (8007734 <HAL_TIM_Base_MspInit+0x164>)
 8007704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007708:	6413      	str	r3, [r2, #64]	; 0x40
 800770a:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <HAL_TIM_Base_MspInit+0x164>)
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007712:	60bb      	str	r3, [r7, #8]
 8007714:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007716:	2200      	movs	r2, #0
 8007718:	2100      	movs	r1, #0
 800771a:	202c      	movs	r0, #44	; 0x2c
 800771c:	f000 ff69 	bl	80085f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007720:	202c      	movs	r0, #44	; 0x2c
 8007722:	f000 ff82 	bl	800862a <HAL_NVIC_EnableIRQ>
}
 8007726:	bf00      	nop
 8007728:	3720      	adds	r7, #32
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	40001000 	.word	0x40001000
 8007734:	40023800 	.word	0x40023800
 8007738:	40001400 	.word	0x40001400
 800773c:	40010400 	.word	0x40010400
 8007740:	40014400 	.word	0x40014400
 8007744:	40014800 	.word	0x40014800
 8007748:	40001c00 	.word	0x40001c00

0800774c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08a      	sub	sp, #40	; 0x28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007754:	f107 0314 	add.w	r3, r7, #20
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	605a      	str	r2, [r3, #4]
 800775e:	609a      	str	r2, [r3, #8]
 8007760:	60da      	str	r2, [r3, #12]
 8007762:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a37      	ldr	r2, [pc, #220]	; (8007848 <HAL_TIM_MspPostInit+0xfc>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d11f      	bne.n	80077ae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800776e:	2300      	movs	r3, #0
 8007770:	613b      	str	r3, [r7, #16]
 8007772:	4b36      	ldr	r3, [pc, #216]	; (800784c <HAL_TIM_MspPostInit+0x100>)
 8007774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007776:	4a35      	ldr	r2, [pc, #212]	; (800784c <HAL_TIM_MspPostInit+0x100>)
 8007778:	f043 0301 	orr.w	r3, r3, #1
 800777c:	6313      	str	r3, [r2, #48]	; 0x30
 800777e:	4b33      	ldr	r3, [pc, #204]	; (800784c <HAL_TIM_MspPostInit+0x100>)
 8007780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	613b      	str	r3, [r7, #16]
 8007788:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800778a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800778e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007790:	2302      	movs	r3, #2
 8007792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007794:	2300      	movs	r3, #0
 8007796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007798:	2300      	movs	r3, #0
 800779a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800779c:	2301      	movs	r3, #1
 800779e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077a0:	f107 0314 	add.w	r3, r7, #20
 80077a4:	4619      	mov	r1, r3
 80077a6:	482a      	ldr	r0, [pc, #168]	; (8007850 <HAL_TIM_MspPostInit+0x104>)
 80077a8:	f001 fbd6 	bl	8008f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80077ac:	e047      	b.n	800783e <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM2)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b6:	d11e      	bne.n	80077f6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	4b23      	ldr	r3, [pc, #140]	; (800784c <HAL_TIM_MspPostInit+0x100>)
 80077be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c0:	4a22      	ldr	r2, [pc, #136]	; (800784c <HAL_TIM_MspPostInit+0x100>)
 80077c2:	f043 0301 	orr.w	r3, r3, #1
 80077c6:	6313      	str	r3, [r2, #48]	; 0x30
 80077c8:	4b20      	ldr	r3, [pc, #128]	; (800784c <HAL_TIM_MspPostInit+0x100>)
 80077ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80077d4:	2303      	movs	r3, #3
 80077d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077d8:	2302      	movs	r3, #2
 80077da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077e0:	2300      	movs	r3, #0
 80077e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80077e4:	2301      	movs	r3, #1
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077e8:	f107 0314 	add.w	r3, r7, #20
 80077ec:	4619      	mov	r1, r3
 80077ee:	4818      	ldr	r0, [pc, #96]	; (8007850 <HAL_TIM_MspPostInit+0x104>)
 80077f0:	f001 fbb2 	bl	8008f58 <HAL_GPIO_Init>
}
 80077f4:	e023      	b.n	800783e <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a16      	ldr	r2, [pc, #88]	; (8007854 <HAL_TIM_MspPostInit+0x108>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d11e      	bne.n	800783e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007800:	2300      	movs	r3, #0
 8007802:	60bb      	str	r3, [r7, #8]
 8007804:	4b11      	ldr	r3, [pc, #68]	; (800784c <HAL_TIM_MspPostInit+0x100>)
 8007806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007808:	4a10      	ldr	r2, [pc, #64]	; (800784c <HAL_TIM_MspPostInit+0x100>)
 800780a:	f043 0304 	orr.w	r3, r3, #4
 800780e:	6313      	str	r3, [r2, #48]	; 0x30
 8007810:	4b0e      	ldr	r3, [pc, #56]	; (800784c <HAL_TIM_MspPostInit+0x100>)
 8007812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007814:	f003 0304 	and.w	r3, r3, #4
 8007818:	60bb      	str	r3, [r7, #8]
 800781a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800781c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8007820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007822:	2302      	movs	r3, #2
 8007824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007826:	2300      	movs	r3, #0
 8007828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800782a:	2300      	movs	r3, #0
 800782c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800782e:	2302      	movs	r3, #2
 8007830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007832:	f107 0314 	add.w	r3, r7, #20
 8007836:	4619      	mov	r1, r3
 8007838:	4807      	ldr	r0, [pc, #28]	; (8007858 <HAL_TIM_MspPostInit+0x10c>)
 800783a:	f001 fb8d 	bl	8008f58 <HAL_GPIO_Init>
}
 800783e:	bf00      	nop
 8007840:	3728      	adds	r7, #40	; 0x28
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	40010000 	.word	0x40010000
 800784c:	40023800 	.word	0x40023800
 8007850:	40020000 	.word	0x40020000
 8007854:	40000400 	.word	0x40000400
 8007858:	40020800 	.word	0x40020800

0800785c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007860:	4b11      	ldr	r3, [pc, #68]	; (80078a8 <MX_USART1_UART_Init+0x4c>)
 8007862:	4a12      	ldr	r2, [pc, #72]	; (80078ac <MX_USART1_UART_Init+0x50>)
 8007864:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8007866:	4b10      	ldr	r3, [pc, #64]	; (80078a8 <MX_USART1_UART_Init+0x4c>)
 8007868:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800786c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800786e:	4b0e      	ldr	r3, [pc, #56]	; (80078a8 <MX_USART1_UART_Init+0x4c>)
 8007870:	2200      	movs	r2, #0
 8007872:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007874:	4b0c      	ldr	r3, [pc, #48]	; (80078a8 <MX_USART1_UART_Init+0x4c>)
 8007876:	2200      	movs	r2, #0
 8007878:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800787a:	4b0b      	ldr	r3, [pc, #44]	; (80078a8 <MX_USART1_UART_Init+0x4c>)
 800787c:	2200      	movs	r2, #0
 800787e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007880:	4b09      	ldr	r3, [pc, #36]	; (80078a8 <MX_USART1_UART_Init+0x4c>)
 8007882:	220c      	movs	r2, #12
 8007884:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007886:	4b08      	ldr	r3, [pc, #32]	; (80078a8 <MX_USART1_UART_Init+0x4c>)
 8007888:	2200      	movs	r2, #0
 800788a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800788c:	4b06      	ldr	r3, [pc, #24]	; (80078a8 <MX_USART1_UART_Init+0x4c>)
 800788e:	2200      	movs	r2, #0
 8007890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007892:	4805      	ldr	r0, [pc, #20]	; (80078a8 <MX_USART1_UART_Init+0x4c>)
 8007894:	f006 f8f6 	bl	800da84 <HAL_UART_Init>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800789e:	f7fb ffd5 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80078a2:	bf00      	nop
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20001838 	.word	0x20001838
 80078ac:	40011000 	.word	0x40011000

080078b0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80078b4:	4b11      	ldr	r3, [pc, #68]	; (80078fc <MX_USART2_UART_Init+0x4c>)
 80078b6:	4a12      	ldr	r2, [pc, #72]	; (8007900 <MX_USART2_UART_Init+0x50>)
 80078b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80078ba:	4b10      	ldr	r3, [pc, #64]	; (80078fc <MX_USART2_UART_Init+0x4c>)
 80078bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80078c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80078c2:	4b0e      	ldr	r3, [pc, #56]	; (80078fc <MX_USART2_UART_Init+0x4c>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80078c8:	4b0c      	ldr	r3, [pc, #48]	; (80078fc <MX_USART2_UART_Init+0x4c>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80078ce:	4b0b      	ldr	r3, [pc, #44]	; (80078fc <MX_USART2_UART_Init+0x4c>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80078d4:	4b09      	ldr	r3, [pc, #36]	; (80078fc <MX_USART2_UART_Init+0x4c>)
 80078d6:	220c      	movs	r2, #12
 80078d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80078da:	4b08      	ldr	r3, [pc, #32]	; (80078fc <MX_USART2_UART_Init+0x4c>)
 80078dc:	2200      	movs	r2, #0
 80078de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80078e0:	4b06      	ldr	r3, [pc, #24]	; (80078fc <MX_USART2_UART_Init+0x4c>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80078e6:	4805      	ldr	r0, [pc, #20]	; (80078fc <MX_USART2_UART_Init+0x4c>)
 80078e8:	f006 f8cc 	bl	800da84 <HAL_UART_Init>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80078f2:	f7fb ffab 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80078f6:	bf00      	nop
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	2000187c 	.word	0x2000187c
 8007900:	40004400 	.word	0x40004400

08007904 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007908:	4b10      	ldr	r3, [pc, #64]	; (800794c <MX_USART3_UART_Init+0x48>)
 800790a:	4a11      	ldr	r2, [pc, #68]	; (8007950 <MX_USART3_UART_Init+0x4c>)
 800790c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 800790e:	4b0f      	ldr	r3, [pc, #60]	; (800794c <MX_USART3_UART_Init+0x48>)
 8007910:	4a10      	ldr	r2, [pc, #64]	; (8007954 <MX_USART3_UART_Init+0x50>)
 8007912:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007914:	4b0d      	ldr	r3, [pc, #52]	; (800794c <MX_USART3_UART_Init+0x48>)
 8007916:	2200      	movs	r2, #0
 8007918:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800791a:	4b0c      	ldr	r3, [pc, #48]	; (800794c <MX_USART3_UART_Init+0x48>)
 800791c:	2200      	movs	r2, #0
 800791e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007920:	4b0a      	ldr	r3, [pc, #40]	; (800794c <MX_USART3_UART_Init+0x48>)
 8007922:	2200      	movs	r2, #0
 8007924:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007926:	4b09      	ldr	r3, [pc, #36]	; (800794c <MX_USART3_UART_Init+0x48>)
 8007928:	220c      	movs	r2, #12
 800792a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800792c:	4b07      	ldr	r3, [pc, #28]	; (800794c <MX_USART3_UART_Init+0x48>)
 800792e:	2200      	movs	r2, #0
 8007930:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007932:	4b06      	ldr	r3, [pc, #24]	; (800794c <MX_USART3_UART_Init+0x48>)
 8007934:	2200      	movs	r2, #0
 8007936:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007938:	4804      	ldr	r0, [pc, #16]	; (800794c <MX_USART3_UART_Init+0x48>)
 800793a:	f006 f8a3 	bl	800da84 <HAL_UART_Init>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8007944:	f7fb ff82 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007948:	bf00      	nop
 800794a:	bd80      	pop	{r7, pc}
 800794c:	200018c0 	.word	0x200018c0
 8007950:	40004800 	.word	0x40004800
 8007954:	0007a120 	.word	0x0007a120

08007958 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08e      	sub	sp, #56	; 0x38
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	605a      	str	r2, [r3, #4]
 800796a:	609a      	str	r2, [r3, #8]
 800796c:	60da      	str	r2, [r3, #12]
 800796e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a99      	ldr	r2, [pc, #612]	; (8007bdc <HAL_UART_MspInit+0x284>)
 8007976:	4293      	cmp	r3, r2
 8007978:	f040 8096 	bne.w	8007aa8 <HAL_UART_MspInit+0x150>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800797c:	2300      	movs	r3, #0
 800797e:	623b      	str	r3, [r7, #32]
 8007980:	4b97      	ldr	r3, [pc, #604]	; (8007be0 <HAL_UART_MspInit+0x288>)
 8007982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007984:	4a96      	ldr	r2, [pc, #600]	; (8007be0 <HAL_UART_MspInit+0x288>)
 8007986:	f043 0310 	orr.w	r3, r3, #16
 800798a:	6453      	str	r3, [r2, #68]	; 0x44
 800798c:	4b94      	ldr	r3, [pc, #592]	; (8007be0 <HAL_UART_MspInit+0x288>)
 800798e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007990:	f003 0310 	and.w	r3, r3, #16
 8007994:	623b      	str	r3, [r7, #32]
 8007996:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007998:	2300      	movs	r3, #0
 800799a:	61fb      	str	r3, [r7, #28]
 800799c:	4b90      	ldr	r3, [pc, #576]	; (8007be0 <HAL_UART_MspInit+0x288>)
 800799e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a0:	4a8f      	ldr	r2, [pc, #572]	; (8007be0 <HAL_UART_MspInit+0x288>)
 80079a2:	f043 0301 	orr.w	r3, r3, #1
 80079a6:	6313      	str	r3, [r2, #48]	; 0x30
 80079a8:	4b8d      	ldr	r3, [pc, #564]	; (8007be0 <HAL_UART_MspInit+0x288>)
 80079aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	61fb      	str	r3, [r7, #28]
 80079b2:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80079b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80079b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079ba:	2302      	movs	r3, #2
 80079bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079be:	2300      	movs	r3, #0
 80079c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079c2:	2303      	movs	r3, #3
 80079c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80079c6:	2307      	movs	r3, #7
 80079c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079ce:	4619      	mov	r1, r3
 80079d0:	4884      	ldr	r0, [pc, #528]	; (8007be4 <HAL_UART_MspInit+0x28c>)
 80079d2:	f001 fac1 	bl	8008f58 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80079d6:	4b84      	ldr	r3, [pc, #528]	; (8007be8 <HAL_UART_MspInit+0x290>)
 80079d8:	4a84      	ldr	r2, [pc, #528]	; (8007bec <HAL_UART_MspInit+0x294>)
 80079da:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80079dc:	4b82      	ldr	r3, [pc, #520]	; (8007be8 <HAL_UART_MspInit+0x290>)
 80079de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80079e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80079e4:	4b80      	ldr	r3, [pc, #512]	; (8007be8 <HAL_UART_MspInit+0x290>)
 80079e6:	2200      	movs	r2, #0
 80079e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80079ea:	4b7f      	ldr	r3, [pc, #508]	; (8007be8 <HAL_UART_MspInit+0x290>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80079f0:	4b7d      	ldr	r3, [pc, #500]	; (8007be8 <HAL_UART_MspInit+0x290>)
 80079f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80079f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80079f8:	4b7b      	ldr	r3, [pc, #492]	; (8007be8 <HAL_UART_MspInit+0x290>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80079fe:	4b7a      	ldr	r3, [pc, #488]	; (8007be8 <HAL_UART_MspInit+0x290>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8007a04:	4b78      	ldr	r3, [pc, #480]	; (8007be8 <HAL_UART_MspInit+0x290>)
 8007a06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a0a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8007a0c:	4b76      	ldr	r3, [pc, #472]	; (8007be8 <HAL_UART_MspInit+0x290>)
 8007a0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007a12:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007a14:	4b74      	ldr	r3, [pc, #464]	; (8007be8 <HAL_UART_MspInit+0x290>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007a1a:	4873      	ldr	r0, [pc, #460]	; (8007be8 <HAL_UART_MspInit+0x290>)
 8007a1c:	f000 fe2e 	bl	800867c <HAL_DMA_Init>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8007a26:	f7fb ff11 	bl	800384c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a6e      	ldr	r2, [pc, #440]	; (8007be8 <HAL_UART_MspInit+0x290>)
 8007a2e:	639a      	str	r2, [r3, #56]	; 0x38
 8007a30:	4a6d      	ldr	r2, [pc, #436]	; (8007be8 <HAL_UART_MspInit+0x290>)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8007a36:	4b6e      	ldr	r3, [pc, #440]	; (8007bf0 <HAL_UART_MspInit+0x298>)
 8007a38:	4a6e      	ldr	r2, [pc, #440]	; (8007bf4 <HAL_UART_MspInit+0x29c>)
 8007a3a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8007a3c:	4b6c      	ldr	r3, [pc, #432]	; (8007bf0 <HAL_UART_MspInit+0x298>)
 8007a3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a42:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007a44:	4b6a      	ldr	r3, [pc, #424]	; (8007bf0 <HAL_UART_MspInit+0x298>)
 8007a46:	2240      	movs	r2, #64	; 0x40
 8007a48:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a4a:	4b69      	ldr	r3, [pc, #420]	; (8007bf0 <HAL_UART_MspInit+0x298>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007a50:	4b67      	ldr	r3, [pc, #412]	; (8007bf0 <HAL_UART_MspInit+0x298>)
 8007a52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a56:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007a58:	4b65      	ldr	r3, [pc, #404]	; (8007bf0 <HAL_UART_MspInit+0x298>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007a5e:	4b64      	ldr	r3, [pc, #400]	; (8007bf0 <HAL_UART_MspInit+0x298>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8007a64:	4b62      	ldr	r3, [pc, #392]	; (8007bf0 <HAL_UART_MspInit+0x298>)
 8007a66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a6a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8007a6c:	4b60      	ldr	r3, [pc, #384]	; (8007bf0 <HAL_UART_MspInit+0x298>)
 8007a6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007a72:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007a74:	4b5e      	ldr	r3, [pc, #376]	; (8007bf0 <HAL_UART_MspInit+0x298>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007a7a:	485d      	ldr	r0, [pc, #372]	; (8007bf0 <HAL_UART_MspInit+0x298>)
 8007a7c:	f000 fdfe 	bl	800867c <HAL_DMA_Init>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8007a86:	f7fb fee1 	bl	800384c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a58      	ldr	r2, [pc, #352]	; (8007bf0 <HAL_UART_MspInit+0x298>)
 8007a8e:	635a      	str	r2, [r3, #52]	; 0x34
 8007a90:	4a57      	ldr	r2, [pc, #348]	; (8007bf0 <HAL_UART_MspInit+0x298>)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007a96:	2200      	movs	r2, #0
 8007a98:	2100      	movs	r1, #0
 8007a9a:	2025      	movs	r0, #37	; 0x25
 8007a9c:	f000 fda9 	bl	80085f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007aa0:	2025      	movs	r0, #37	; 0x25
 8007aa2:	f000 fdc2 	bl	800862a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8007aa6:	e101      	b.n	8007cac <HAL_UART_MspInit+0x354>
  else if(uartHandle->Instance==USART2)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a52      	ldr	r2, [pc, #328]	; (8007bf8 <HAL_UART_MspInit+0x2a0>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	f040 80ac 	bne.w	8007c0c <HAL_UART_MspInit+0x2b4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	61bb      	str	r3, [r7, #24]
 8007ab8:	4b49      	ldr	r3, [pc, #292]	; (8007be0 <HAL_UART_MspInit+0x288>)
 8007aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abc:	4a48      	ldr	r2, [pc, #288]	; (8007be0 <HAL_UART_MspInit+0x288>)
 8007abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8007ac4:	4b46      	ldr	r3, [pc, #280]	; (8007be0 <HAL_UART_MspInit+0x288>)
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007acc:	61bb      	str	r3, [r7, #24]
 8007ace:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	617b      	str	r3, [r7, #20]
 8007ad4:	4b42      	ldr	r3, [pc, #264]	; (8007be0 <HAL_UART_MspInit+0x288>)
 8007ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad8:	4a41      	ldr	r2, [pc, #260]	; (8007be0 <HAL_UART_MspInit+0x288>)
 8007ada:	f043 0301 	orr.w	r3, r3, #1
 8007ade:	6313      	str	r3, [r2, #48]	; 0x30
 8007ae0:	4b3f      	ldr	r3, [pc, #252]	; (8007be0 <HAL_UART_MspInit+0x288>)
 8007ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	617b      	str	r3, [r7, #20]
 8007aea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007aec:	230c      	movs	r3, #12
 8007aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007af0:	2302      	movs	r3, #2
 8007af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007af4:	2300      	movs	r3, #0
 8007af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007af8:	2303      	movs	r3, #3
 8007afa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007afc:	2307      	movs	r3, #7
 8007afe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b04:	4619      	mov	r1, r3
 8007b06:	4837      	ldr	r0, [pc, #220]	; (8007be4 <HAL_UART_MspInit+0x28c>)
 8007b08:	f001 fa26 	bl	8008f58 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8007b0c:	4b3b      	ldr	r3, [pc, #236]	; (8007bfc <HAL_UART_MspInit+0x2a4>)
 8007b0e:	4a3c      	ldr	r2, [pc, #240]	; (8007c00 <HAL_UART_MspInit+0x2a8>)
 8007b10:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8007b12:	4b3a      	ldr	r3, [pc, #232]	; (8007bfc <HAL_UART_MspInit+0x2a4>)
 8007b14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007b18:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007b1a:	4b38      	ldr	r3, [pc, #224]	; (8007bfc <HAL_UART_MspInit+0x2a4>)
 8007b1c:	2240      	movs	r2, #64	; 0x40
 8007b1e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b20:	4b36      	ldr	r3, [pc, #216]	; (8007bfc <HAL_UART_MspInit+0x2a4>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007b26:	4b35      	ldr	r3, [pc, #212]	; (8007bfc <HAL_UART_MspInit+0x2a4>)
 8007b28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007b2e:	4b33      	ldr	r3, [pc, #204]	; (8007bfc <HAL_UART_MspInit+0x2a4>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007b34:	4b31      	ldr	r3, [pc, #196]	; (8007bfc <HAL_UART_MspInit+0x2a4>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007b3a:	4b30      	ldr	r3, [pc, #192]	; (8007bfc <HAL_UART_MspInit+0x2a4>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8007b40:	4b2e      	ldr	r3, [pc, #184]	; (8007bfc <HAL_UART_MspInit+0x2a4>)
 8007b42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007b46:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007b48:	4b2c      	ldr	r3, [pc, #176]	; (8007bfc <HAL_UART_MspInit+0x2a4>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007b4e:	482b      	ldr	r0, [pc, #172]	; (8007bfc <HAL_UART_MspInit+0x2a4>)
 8007b50:	f000 fd94 	bl	800867c <HAL_DMA_Init>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <HAL_UART_MspInit+0x206>
      Error_Handler();
 8007b5a:	f7fb fe77 	bl	800384c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a26      	ldr	r2, [pc, #152]	; (8007bfc <HAL_UART_MspInit+0x2a4>)
 8007b62:	635a      	str	r2, [r3, #52]	; 0x34
 8007b64:	4a25      	ldr	r2, [pc, #148]	; (8007bfc <HAL_UART_MspInit+0x2a4>)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8007b6a:	4b26      	ldr	r3, [pc, #152]	; (8007c04 <HAL_UART_MspInit+0x2ac>)
 8007b6c:	4a26      	ldr	r2, [pc, #152]	; (8007c08 <HAL_UART_MspInit+0x2b0>)
 8007b6e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007b70:	4b24      	ldr	r3, [pc, #144]	; (8007c04 <HAL_UART_MspInit+0x2ac>)
 8007b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007b76:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007b78:	4b22      	ldr	r3, [pc, #136]	; (8007c04 <HAL_UART_MspInit+0x2ac>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b7e:	4b21      	ldr	r3, [pc, #132]	; (8007c04 <HAL_UART_MspInit+0x2ac>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007b84:	4b1f      	ldr	r3, [pc, #124]	; (8007c04 <HAL_UART_MspInit+0x2ac>)
 8007b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b8a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007b8c:	4b1d      	ldr	r3, [pc, #116]	; (8007c04 <HAL_UART_MspInit+0x2ac>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007b92:	4b1c      	ldr	r3, [pc, #112]	; (8007c04 <HAL_UART_MspInit+0x2ac>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8007b98:	4b1a      	ldr	r3, [pc, #104]	; (8007c04 <HAL_UART_MspInit+0x2ac>)
 8007b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b9e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8007ba0:	4b18      	ldr	r3, [pc, #96]	; (8007c04 <HAL_UART_MspInit+0x2ac>)
 8007ba2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007ba6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007ba8:	4b16      	ldr	r3, [pc, #88]	; (8007c04 <HAL_UART_MspInit+0x2ac>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007bae:	4815      	ldr	r0, [pc, #84]	; (8007c04 <HAL_UART_MspInit+0x2ac>)
 8007bb0:	f000 fd64 	bl	800867c <HAL_DMA_Init>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <HAL_UART_MspInit+0x266>
      Error_Handler();
 8007bba:	f7fb fe47 	bl	800384c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a10      	ldr	r2, [pc, #64]	; (8007c04 <HAL_UART_MspInit+0x2ac>)
 8007bc2:	639a      	str	r2, [r3, #56]	; 0x38
 8007bc4:	4a0f      	ldr	r2, [pc, #60]	; (8007c04 <HAL_UART_MspInit+0x2ac>)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2100      	movs	r1, #0
 8007bce:	2026      	movs	r0, #38	; 0x26
 8007bd0:	f000 fd0f 	bl	80085f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007bd4:	2026      	movs	r0, #38	; 0x26
 8007bd6:	f000 fd28 	bl	800862a <HAL_NVIC_EnableIRQ>
}
 8007bda:	e067      	b.n	8007cac <HAL_UART_MspInit+0x354>
 8007bdc:	40011000 	.word	0x40011000
 8007be0:	40023800 	.word	0x40023800
 8007be4:	40020000 	.word	0x40020000
 8007be8:	20001904 	.word	0x20001904
 8007bec:	40026440 	.word	0x40026440
 8007bf0:	20001964 	.word	0x20001964
 8007bf4:	400264b8 	.word	0x400264b8
 8007bf8:	40004400 	.word	0x40004400
 8007bfc:	200019c4 	.word	0x200019c4
 8007c00:	400260a0 	.word	0x400260a0
 8007c04:	20001a24 	.word	0x20001a24
 8007c08:	40026088 	.word	0x40026088
  else if(uartHandle->Instance==USART3)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a28      	ldr	r2, [pc, #160]	; (8007cb4 <HAL_UART_MspInit+0x35c>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d14a      	bne.n	8007cac <HAL_UART_MspInit+0x354>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007c16:	2300      	movs	r3, #0
 8007c18:	613b      	str	r3, [r7, #16]
 8007c1a:	4b27      	ldr	r3, [pc, #156]	; (8007cb8 <HAL_UART_MspInit+0x360>)
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1e:	4a26      	ldr	r2, [pc, #152]	; (8007cb8 <HAL_UART_MspInit+0x360>)
 8007c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c24:	6413      	str	r3, [r2, #64]	; 0x40
 8007c26:	4b24      	ldr	r3, [pc, #144]	; (8007cb8 <HAL_UART_MspInit+0x360>)
 8007c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c2e:	613b      	str	r3, [r7, #16]
 8007c30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	4b20      	ldr	r3, [pc, #128]	; (8007cb8 <HAL_UART_MspInit+0x360>)
 8007c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3a:	4a1f      	ldr	r2, [pc, #124]	; (8007cb8 <HAL_UART_MspInit+0x360>)
 8007c3c:	f043 0304 	orr.w	r3, r3, #4
 8007c40:	6313      	str	r3, [r2, #48]	; 0x30
 8007c42:	4b1d      	ldr	r3, [pc, #116]	; (8007cb8 <HAL_UART_MspInit+0x360>)
 8007c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c46:	f003 0304 	and.w	r3, r3, #4
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60bb      	str	r3, [r7, #8]
 8007c52:	4b19      	ldr	r3, [pc, #100]	; (8007cb8 <HAL_UART_MspInit+0x360>)
 8007c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c56:	4a18      	ldr	r2, [pc, #96]	; (8007cb8 <HAL_UART_MspInit+0x360>)
 8007c58:	f043 0302 	orr.w	r3, r3, #2
 8007c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c5e:	4b16      	ldr	r3, [pc, #88]	; (8007cb8 <HAL_UART_MspInit+0x360>)
 8007c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	60bb      	str	r3, [r7, #8]
 8007c68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007c6a:	2320      	movs	r3, #32
 8007c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c6e:	2302      	movs	r3, #2
 8007c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c72:	2300      	movs	r3, #0
 8007c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c76:	2303      	movs	r3, #3
 8007c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007c7a:	2307      	movs	r3, #7
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c82:	4619      	mov	r1, r3
 8007c84:	480d      	ldr	r0, [pc, #52]	; (8007cbc <HAL_UART_MspInit+0x364>)
 8007c86:	f001 f967 	bl	8008f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c90:	2302      	movs	r3, #2
 8007c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c94:	2300      	movs	r3, #0
 8007c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007c9c:	2307      	movs	r3, #7
 8007c9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	4806      	ldr	r0, [pc, #24]	; (8007cc0 <HAL_UART_MspInit+0x368>)
 8007ca8:	f001 f956 	bl	8008f58 <HAL_GPIO_Init>
}
 8007cac:	bf00      	nop
 8007cae:	3738      	adds	r7, #56	; 0x38
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	40004800 	.word	0x40004800
 8007cb8:	40023800 	.word	0x40023800
 8007cbc:	40020800 	.word	0x40020800
 8007cc0:	40020400 	.word	0x40020400

08007cc4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a28      	ldr	r2, [pc, #160]	; (8007d74 <HAL_UART_MspDeInit+0xb0>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d118      	bne.n	8007d08 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8007cd6:	4b28      	ldr	r3, [pc, #160]	; (8007d78 <HAL_UART_MspDeInit+0xb4>)
 8007cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cda:	4a27      	ldr	r2, [pc, #156]	; (8007d78 <HAL_UART_MspDeInit+0xb4>)
 8007cdc:	f023 0310 	bic.w	r3, r3, #16
 8007ce0:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8007ce2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007ce6:	4825      	ldr	r0, [pc, #148]	; (8007d7c <HAL_UART_MspDeInit+0xb8>)
 8007ce8:	f001 faca 	bl	8009280 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 fd71 	bl	80087d8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 fd6c 	bl	80087d8 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8007d00:	2025      	movs	r0, #37	; 0x25
 8007d02:	f000 fca0 	bl	8008646 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8007d06:	e030      	b.n	8007d6a <HAL_UART_MspDeInit+0xa6>
  else if(uartHandle->Instance==USART2)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a1c      	ldr	r2, [pc, #112]	; (8007d80 <HAL_UART_MspDeInit+0xbc>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d117      	bne.n	8007d42 <HAL_UART_MspDeInit+0x7e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8007d12:	4b19      	ldr	r3, [pc, #100]	; (8007d78 <HAL_UART_MspDeInit+0xb4>)
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	4a18      	ldr	r2, [pc, #96]	; (8007d78 <HAL_UART_MspDeInit+0xb4>)
 8007d18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d1c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8007d1e:	210c      	movs	r1, #12
 8007d20:	4816      	ldr	r0, [pc, #88]	; (8007d7c <HAL_UART_MspDeInit+0xb8>)
 8007d22:	f001 faad 	bl	8009280 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 fd54 	bl	80087d8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d34:	4618      	mov	r0, r3
 8007d36:	f000 fd4f 	bl	80087d8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8007d3a:	2026      	movs	r0, #38	; 0x26
 8007d3c:	f000 fc83 	bl	8008646 <HAL_NVIC_DisableIRQ>
}
 8007d40:	e013      	b.n	8007d6a <HAL_UART_MspDeInit+0xa6>
  else if(uartHandle->Instance==USART3)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a0f      	ldr	r2, [pc, #60]	; (8007d84 <HAL_UART_MspDeInit+0xc0>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d10e      	bne.n	8007d6a <HAL_UART_MspDeInit+0xa6>
    __HAL_RCC_USART3_CLK_DISABLE();
 8007d4c:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <HAL_UART_MspDeInit+0xb4>)
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d50:	4a09      	ldr	r2, [pc, #36]	; (8007d78 <HAL_UART_MspDeInit+0xb4>)
 8007d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d56:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_5);
 8007d58:	2120      	movs	r1, #32
 8007d5a:	480b      	ldr	r0, [pc, #44]	; (8007d88 <HAL_UART_MspDeInit+0xc4>)
 8007d5c:	f001 fa90 	bl	8009280 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8007d60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d64:	4809      	ldr	r0, [pc, #36]	; (8007d8c <HAL_UART_MspDeInit+0xc8>)
 8007d66:	f001 fa8b 	bl	8009280 <HAL_GPIO_DeInit>
}
 8007d6a:	bf00      	nop
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	40011000 	.word	0x40011000
 8007d78:	40023800 	.word	0x40023800
 8007d7c:	40020000 	.word	0x40020000
 8007d80:	40004400 	.word	0x40004400
 8007d84:	40004800 	.word	0x40004800
 8007d88:	40020800 	.word	0x40020800
 8007d8c:	40020400 	.word	0x40020400

08007d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007dc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007d94:	480d      	ldr	r0, [pc, #52]	; (8007dcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007d96:	490e      	ldr	r1, [pc, #56]	; (8007dd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007d98:	4a0e      	ldr	r2, [pc, #56]	; (8007dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007d9c:	e002      	b.n	8007da4 <LoopCopyDataInit>

08007d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007da2:	3304      	adds	r3, #4

08007da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007da8:	d3f9      	bcc.n	8007d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007daa:	4a0b      	ldr	r2, [pc, #44]	; (8007dd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007dac:	4c0b      	ldr	r4, [pc, #44]	; (8007ddc <LoopFillZerobss+0x26>)
  movs r3, #0
 8007dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007db0:	e001      	b.n	8007db6 <LoopFillZerobss>

08007db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007db4:	3204      	adds	r2, #4

08007db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007db8:	d3fb      	bcc.n	8007db2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007dba:	f7ff f907 	bl	8006fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007dbe:	f00b ff27 	bl	8013c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007dc2:	f7fb fcab 	bl	800371c <main>
  bx  lr    
 8007dc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007dc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007dd0:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8007dd4:	080143cc 	.word	0x080143cc
  ldr r2, =_sbss
 8007dd8:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 8007ddc:	20001ad8 	.word	0x20001ad8

08007de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007de0:	e7fe      	b.n	8007de0 <ADC_IRQHandler>
	...

08007de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007de8:	4b0e      	ldr	r3, [pc, #56]	; (8007e24 <HAL_Init+0x40>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a0d      	ldr	r2, [pc, #52]	; (8007e24 <HAL_Init+0x40>)
 8007dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007df2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007df4:	4b0b      	ldr	r3, [pc, #44]	; (8007e24 <HAL_Init+0x40>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a0a      	ldr	r2, [pc, #40]	; (8007e24 <HAL_Init+0x40>)
 8007dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007dfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007e00:	4b08      	ldr	r3, [pc, #32]	; (8007e24 <HAL_Init+0x40>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a07      	ldr	r2, [pc, #28]	; (8007e24 <HAL_Init+0x40>)
 8007e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007e0c:	2003      	movs	r0, #3
 8007e0e:	f000 fbe5 	bl	80085dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007e12:	2000      	movs	r0, #0
 8007e14:	f000 f808 	bl	8007e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007e18:	f7fe ff54 	bl	8006cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	40023c00 	.word	0x40023c00

08007e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007e30:	4b12      	ldr	r3, [pc, #72]	; (8007e7c <HAL_InitTick+0x54>)
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	4b12      	ldr	r3, [pc, #72]	; (8007e80 <HAL_InitTick+0x58>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 fc0b 	bl	8008662 <HAL_SYSTICK_Config>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e00e      	b.n	8007e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b0f      	cmp	r3, #15
 8007e5a:	d80a      	bhi.n	8007e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	f04f 30ff 	mov.w	r0, #4294967295
 8007e64:	f000 fbc5 	bl	80085f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007e68:	4a06      	ldr	r2, [pc, #24]	; (8007e84 <HAL_InitTick+0x5c>)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e000      	b.n	8007e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	2000001c 	.word	0x2000001c
 8007e80:	20000024 	.word	0x20000024
 8007e84:	20000020 	.word	0x20000020

08007e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007e8c:	4b06      	ldr	r3, [pc, #24]	; (8007ea8 <HAL_IncTick+0x20>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	461a      	mov	r2, r3
 8007e92:	4b06      	ldr	r3, [pc, #24]	; (8007eac <HAL_IncTick+0x24>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4413      	add	r3, r2
 8007e98:	4a04      	ldr	r2, [pc, #16]	; (8007eac <HAL_IncTick+0x24>)
 8007e9a:	6013      	str	r3, [r2, #0]
}
 8007e9c:	bf00      	nop
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	20000024 	.word	0x20000024
 8007eac:	20001a84 	.word	0x20001a84

08007eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8007eb4:	4b03      	ldr	r3, [pc, #12]	; (8007ec4 <HAL_GetTick+0x14>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	20001a84 	.word	0x20001a84

08007ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007ed0:	f7ff ffee 	bl	8007eb0 <HAL_GetTick>
 8007ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee0:	d005      	beq.n	8007eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007ee2:	4b0a      	ldr	r3, [pc, #40]	; (8007f0c <HAL_Delay+0x44>)
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4413      	add	r3, r2
 8007eec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007eee:	bf00      	nop
 8007ef0:	f7ff ffde 	bl	8007eb0 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d8f7      	bhi.n	8007ef0 <HAL_Delay+0x28>
  {
  }
}
 8007f00:	bf00      	nop
 8007f02:	bf00      	nop
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20000024 	.word	0x20000024

08007f10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e033      	b.n	8007f8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d109      	bne.n	8007f42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7f9 fa2e 	bl	8001390 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f46:	f003 0310 	and.w	r3, r3, #16
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d118      	bne.n	8007f80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007f56:	f023 0302 	bic.w	r3, r3, #2
 8007f5a:	f043 0202 	orr.w	r2, r3, #2
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f94a 	bl	80081fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	f023 0303 	bic.w	r3, r3, #3
 8007f76:	f043 0201 	orr.w	r2, r3, #1
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	641a      	str	r2, [r3, #64]	; 0x40
 8007f7e:	e001      	b.n	8007f84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d101      	bne.n	8007fb4 <HAL_ADC_ConfigChannel+0x1c>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e113      	b.n	80081dc <HAL_ADC_ConfigChannel+0x244>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b09      	cmp	r3, #9
 8007fc2:	d925      	bls.n	8008010 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68d9      	ldr	r1, [r3, #12]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	005b      	lsls	r3, r3, #1
 8007fd6:	4413      	add	r3, r2
 8007fd8:	3b1e      	subs	r3, #30
 8007fda:	2207      	movs	r2, #7
 8007fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe0:	43da      	mvns	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	400a      	ands	r2, r1
 8007fe8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68d9      	ldr	r1, [r3, #12]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	4403      	add	r3, r0
 8008002:	3b1e      	subs	r3, #30
 8008004:	409a      	lsls	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	60da      	str	r2, [r3, #12]
 800800e:	e022      	b.n	8008056 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6919      	ldr	r1, [r3, #16]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	b29b      	uxth	r3, r3
 800801c:	461a      	mov	r2, r3
 800801e:	4613      	mov	r3, r2
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	4413      	add	r3, r2
 8008024:	2207      	movs	r2, #7
 8008026:	fa02 f303 	lsl.w	r3, r2, r3
 800802a:	43da      	mvns	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	400a      	ands	r2, r1
 8008032:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6919      	ldr	r1, [r3, #16]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	b29b      	uxth	r3, r3
 8008044:	4618      	mov	r0, r3
 8008046:	4603      	mov	r3, r0
 8008048:	005b      	lsls	r3, r3, #1
 800804a:	4403      	add	r3, r0
 800804c:	409a      	lsls	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	430a      	orrs	r2, r1
 8008054:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	2b06      	cmp	r3, #6
 800805c:	d824      	bhi.n	80080a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	4613      	mov	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	3b05      	subs	r3, #5
 8008070:	221f      	movs	r2, #31
 8008072:	fa02 f303 	lsl.w	r3, r2, r3
 8008076:	43da      	mvns	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	400a      	ands	r2, r1
 800807e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	b29b      	uxth	r3, r3
 800808c:	4618      	mov	r0, r3
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	4613      	mov	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	3b05      	subs	r3, #5
 800809a:	fa00 f203 	lsl.w	r2, r0, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	635a      	str	r2, [r3, #52]	; 0x34
 80080a6:	e04c      	b.n	8008142 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	2b0c      	cmp	r3, #12
 80080ae:	d824      	bhi.n	80080fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	4613      	mov	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	4413      	add	r3, r2
 80080c0:	3b23      	subs	r3, #35	; 0x23
 80080c2:	221f      	movs	r2, #31
 80080c4:	fa02 f303 	lsl.w	r3, r2, r3
 80080c8:	43da      	mvns	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	400a      	ands	r2, r1
 80080d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	b29b      	uxth	r3, r3
 80080de:	4618      	mov	r0, r3
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	4613      	mov	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	3b23      	subs	r3, #35	; 0x23
 80080ec:	fa00 f203 	lsl.w	r2, r0, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	631a      	str	r2, [r3, #48]	; 0x30
 80080f8:	e023      	b.n	8008142 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	4613      	mov	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	3b41      	subs	r3, #65	; 0x41
 800810c:	221f      	movs	r2, #31
 800810e:	fa02 f303 	lsl.w	r3, r2, r3
 8008112:	43da      	mvns	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	400a      	ands	r2, r1
 800811a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	b29b      	uxth	r3, r3
 8008128:	4618      	mov	r0, r3
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	4613      	mov	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	3b41      	subs	r3, #65	; 0x41
 8008136:	fa00 f203 	lsl.w	r2, r0, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008142:	4b29      	ldr	r3, [pc, #164]	; (80081e8 <HAL_ADC_ConfigChannel+0x250>)
 8008144:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a28      	ldr	r2, [pc, #160]	; (80081ec <HAL_ADC_ConfigChannel+0x254>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d10f      	bne.n	8008170 <HAL_ADC_ConfigChannel+0x1d8>
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b12      	cmp	r3, #18
 8008156:	d10b      	bne.n	8008170 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a1d      	ldr	r2, [pc, #116]	; (80081ec <HAL_ADC_ConfigChannel+0x254>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d12b      	bne.n	80081d2 <HAL_ADC_ConfigChannel+0x23a>
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a1c      	ldr	r2, [pc, #112]	; (80081f0 <HAL_ADC_ConfigChannel+0x258>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d003      	beq.n	800818c <HAL_ADC_ConfigChannel+0x1f4>
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b11      	cmp	r3, #17
 800818a:	d122      	bne.n	80081d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a11      	ldr	r2, [pc, #68]	; (80081f0 <HAL_ADC_ConfigChannel+0x258>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d111      	bne.n	80081d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80081ae:	4b11      	ldr	r3, [pc, #68]	; (80081f4 <HAL_ADC_ConfigChannel+0x25c>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a11      	ldr	r2, [pc, #68]	; (80081f8 <HAL_ADC_ConfigChannel+0x260>)
 80081b4:	fba2 2303 	umull	r2, r3, r2, r3
 80081b8:	0c9a      	lsrs	r2, r3, #18
 80081ba:	4613      	mov	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	005b      	lsls	r3, r3, #1
 80081c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80081c4:	e002      	b.n	80081cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	3b01      	subs	r3, #1
 80081ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1f9      	bne.n	80081c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr
 80081e8:	40012300 	.word	0x40012300
 80081ec:	40012000 	.word	0x40012000
 80081f0:	10000012 	.word	0x10000012
 80081f4:	2000001c 	.word	0x2000001c
 80081f8:	431bde83 	.word	0x431bde83

080081fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008204:	4b79      	ldr	r3, [pc, #484]	; (80083ec <ADC_Init+0x1f0>)
 8008206:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	431a      	orrs	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	685a      	ldr	r2, [r3, #4]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008230:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6859      	ldr	r1, [r3, #4]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	021a      	lsls	r2, r3, #8
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	430a      	orrs	r2, r1
 8008244:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008254:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6859      	ldr	r1, [r3, #4]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689a      	ldr	r2, [r3, #8]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689a      	ldr	r2, [r3, #8]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008276:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6899      	ldr	r1, [r3, #8]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828e:	4a58      	ldr	r2, [pc, #352]	; (80083f0 <ADC_Init+0x1f4>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d022      	beq.n	80082da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689a      	ldr	r2, [r3, #8]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80082a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6899      	ldr	r1, [r3, #8]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	430a      	orrs	r2, r1
 80082b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80082c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	6899      	ldr	r1, [r3, #8]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	430a      	orrs	r2, r1
 80082d6:	609a      	str	r2, [r3, #8]
 80082d8:	e00f      	b.n	80082fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	689a      	ldr	r2, [r3, #8]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80082e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689a      	ldr	r2, [r3, #8]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80082f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 0202 	bic.w	r2, r2, #2
 8008308:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6899      	ldr	r1, [r3, #8]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	7e1b      	ldrb	r3, [r3, #24]
 8008314:	005a      	lsls	r2, r3, #1
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d01b      	beq.n	8008360 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008336:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	685a      	ldr	r2, [r3, #4]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008346:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6859      	ldr	r1, [r3, #4]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	3b01      	subs	r3, #1
 8008354:	035a      	lsls	r2, r3, #13
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	605a      	str	r2, [r3, #4]
 800835e:	e007      	b.n	8008370 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800836e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800837e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	69db      	ldr	r3, [r3, #28]
 800838a:	3b01      	subs	r3, #1
 800838c:	051a      	lsls	r2, r3, #20
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80083a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6899      	ldr	r1, [r3, #8]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083b2:	025a      	lsls	r2, r3, #9
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	430a      	orrs	r2, r1
 80083ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	689a      	ldr	r2, [r3, #8]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6899      	ldr	r1, [r3, #8]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	029a      	lsls	r2, r3, #10
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	609a      	str	r2, [r3, #8]
}
 80083e0:	bf00      	nop
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	40012300 	.word	0x40012300
 80083f0:	0f000001 	.word	0x0f000001

080083f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008404:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <__NVIC_SetPriorityGrouping+0x44>)
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008410:	4013      	ands	r3, r2
 8008412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800841c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008426:	4a04      	ldr	r2, [pc, #16]	; (8008438 <__NVIC_SetPriorityGrouping+0x44>)
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	60d3      	str	r3, [r2, #12]
}
 800842c:	bf00      	nop
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	e000ed00 	.word	0xe000ed00

0800843c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800843c:	b480      	push	{r7}
 800843e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008440:	4b04      	ldr	r3, [pc, #16]	; (8008454 <__NVIC_GetPriorityGrouping+0x18>)
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	0a1b      	lsrs	r3, r3, #8
 8008446:	f003 0307 	and.w	r3, r3, #7
}
 800844a:	4618      	mov	r0, r3
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	e000ed00 	.word	0xe000ed00

08008458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	4603      	mov	r3, r0
 8008460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008466:	2b00      	cmp	r3, #0
 8008468:	db0b      	blt.n	8008482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800846a:	79fb      	ldrb	r3, [r7, #7]
 800846c:	f003 021f 	and.w	r2, r3, #31
 8008470:	4907      	ldr	r1, [pc, #28]	; (8008490 <__NVIC_EnableIRQ+0x38>)
 8008472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008476:	095b      	lsrs	r3, r3, #5
 8008478:	2001      	movs	r0, #1
 800847a:	fa00 f202 	lsl.w	r2, r0, r2
 800847e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	e000e100 	.word	0xe000e100

08008494 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	4603      	mov	r3, r0
 800849c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800849e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	db12      	blt.n	80084cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80084a6:	79fb      	ldrb	r3, [r7, #7]
 80084a8:	f003 021f 	and.w	r2, r3, #31
 80084ac:	490a      	ldr	r1, [pc, #40]	; (80084d8 <__NVIC_DisableIRQ+0x44>)
 80084ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084b2:	095b      	lsrs	r3, r3, #5
 80084b4:	2001      	movs	r0, #1
 80084b6:	fa00 f202 	lsl.w	r2, r0, r2
 80084ba:	3320      	adds	r3, #32
 80084bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80084c0:	f3bf 8f4f 	dsb	sy
}
 80084c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80084c6:	f3bf 8f6f 	isb	sy
}
 80084ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	e000e100 	.word	0xe000e100

080084dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	4603      	mov	r3, r0
 80084e4:	6039      	str	r1, [r7, #0]
 80084e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	db0a      	blt.n	8008506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	490c      	ldr	r1, [pc, #48]	; (8008528 <__NVIC_SetPriority+0x4c>)
 80084f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084fa:	0112      	lsls	r2, r2, #4
 80084fc:	b2d2      	uxtb	r2, r2
 80084fe:	440b      	add	r3, r1
 8008500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008504:	e00a      	b.n	800851c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	b2da      	uxtb	r2, r3
 800850a:	4908      	ldr	r1, [pc, #32]	; (800852c <__NVIC_SetPriority+0x50>)
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	f003 030f 	and.w	r3, r3, #15
 8008512:	3b04      	subs	r3, #4
 8008514:	0112      	lsls	r2, r2, #4
 8008516:	b2d2      	uxtb	r2, r2
 8008518:	440b      	add	r3, r1
 800851a:	761a      	strb	r2, [r3, #24]
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	e000e100 	.word	0xe000e100
 800852c:	e000ed00 	.word	0xe000ed00

08008530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008530:	b480      	push	{r7}
 8008532:	b089      	sub	sp, #36	; 0x24
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f003 0307 	and.w	r3, r3, #7
 8008542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	f1c3 0307 	rsb	r3, r3, #7
 800854a:	2b04      	cmp	r3, #4
 800854c:	bf28      	it	cs
 800854e:	2304      	movcs	r3, #4
 8008550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	3304      	adds	r3, #4
 8008556:	2b06      	cmp	r3, #6
 8008558:	d902      	bls.n	8008560 <NVIC_EncodePriority+0x30>
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	3b03      	subs	r3, #3
 800855e:	e000      	b.n	8008562 <NVIC_EncodePriority+0x32>
 8008560:	2300      	movs	r3, #0
 8008562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008564:	f04f 32ff 	mov.w	r2, #4294967295
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	fa02 f303 	lsl.w	r3, r2, r3
 800856e:	43da      	mvns	r2, r3
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	401a      	ands	r2, r3
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008578:	f04f 31ff 	mov.w	r1, #4294967295
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	fa01 f303 	lsl.w	r3, r1, r3
 8008582:	43d9      	mvns	r1, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008588:	4313      	orrs	r3, r2
         );
}
 800858a:	4618      	mov	r0, r3
 800858c:	3724      	adds	r7, #36	; 0x24
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
	...

08008598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3b01      	subs	r3, #1
 80085a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085a8:	d301      	bcc.n	80085ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80085aa:	2301      	movs	r3, #1
 80085ac:	e00f      	b.n	80085ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80085ae:	4a0a      	ldr	r2, [pc, #40]	; (80085d8 <SysTick_Config+0x40>)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	3b01      	subs	r3, #1
 80085b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80085b6:	210f      	movs	r1, #15
 80085b8:	f04f 30ff 	mov.w	r0, #4294967295
 80085bc:	f7ff ff8e 	bl	80084dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80085c0:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <SysTick_Config+0x40>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80085c6:	4b04      	ldr	r3, [pc, #16]	; (80085d8 <SysTick_Config+0x40>)
 80085c8:	2207      	movs	r2, #7
 80085ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	e000e010 	.word	0xe000e010

080085dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7ff ff05 	bl	80083f4 <__NVIC_SetPriorityGrouping>
}
 80085ea:	bf00      	nop
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b086      	sub	sp, #24
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	4603      	mov	r3, r0
 80085fa:	60b9      	str	r1, [r7, #8]
 80085fc:	607a      	str	r2, [r7, #4]
 80085fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008600:	2300      	movs	r3, #0
 8008602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008604:	f7ff ff1a 	bl	800843c <__NVIC_GetPriorityGrouping>
 8008608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	68b9      	ldr	r1, [r7, #8]
 800860e:	6978      	ldr	r0, [r7, #20]
 8008610:	f7ff ff8e 	bl	8008530 <NVIC_EncodePriority>
 8008614:	4602      	mov	r2, r0
 8008616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800861a:	4611      	mov	r1, r2
 800861c:	4618      	mov	r0, r3
 800861e:	f7ff ff5d 	bl	80084dc <__NVIC_SetPriority>
}
 8008622:	bf00      	nop
 8008624:	3718      	adds	r7, #24
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	4603      	mov	r3, r0
 8008632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff ff0d 	bl	8008458 <__NVIC_EnableIRQ>
}
 800863e:	bf00      	nop
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b082      	sub	sp, #8
 800864a:	af00      	add	r7, sp, #0
 800864c:	4603      	mov	r3, r0
 800864e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008654:	4618      	mov	r0, r3
 8008656:	f7ff ff1d 	bl	8008494 <__NVIC_DisableIRQ>
}
 800865a:	bf00      	nop
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b082      	sub	sp, #8
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff ff94 	bl	8008598 <SysTick_Config>
 8008670:	4603      	mov	r3, r0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
	...

0800867c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008684:	2300      	movs	r3, #0
 8008686:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008688:	f7ff fc12 	bl	8007eb0 <HAL_GetTick>
 800868c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d101      	bne.n	8008698 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e099      	b.n	80087cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2202      	movs	r2, #2
 800869c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f022 0201 	bic.w	r2, r2, #1
 80086b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80086b8:	e00f      	b.n	80086da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80086ba:	f7ff fbf9 	bl	8007eb0 <HAL_GetTick>
 80086be:	4602      	mov	r2, r0
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	2b05      	cmp	r3, #5
 80086c6:	d908      	bls.n	80086da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2220      	movs	r2, #32
 80086cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2203      	movs	r2, #3
 80086d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e078      	b.n	80087cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0301 	and.w	r3, r3, #1
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1e8      	bne.n	80086ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	4b38      	ldr	r3, [pc, #224]	; (80087d4 <HAL_DMA_Init+0x158>)
 80086f4:	4013      	ands	r3, r2
 80086f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008706:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008712:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800871e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a1b      	ldr	r3, [r3, #32]
 8008724:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	4313      	orrs	r3, r2
 800872a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008730:	2b04      	cmp	r3, #4
 8008732:	d107      	bne.n	8008744 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873c:	4313      	orrs	r3, r2
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	4313      	orrs	r3, r2
 8008742:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f023 0307 	bic.w	r3, r3, #7
 800875a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	4313      	orrs	r3, r2
 8008764:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876a:	2b04      	cmp	r3, #4
 800876c:	d117      	bne.n	800879e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008772:	697a      	ldr	r2, [r7, #20]
 8008774:	4313      	orrs	r3, r2
 8008776:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00e      	beq.n	800879e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fb6d 	bl	8008e60 <DMA_CheckFifoParam>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d008      	beq.n	800879e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2240      	movs	r2, #64	; 0x40
 8008790:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800879a:	2301      	movs	r3, #1
 800879c:	e016      	b.n	80087cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fb24 	bl	8008df4 <DMA_CalcBaseAndBitshift>
 80087ac:	4603      	mov	r3, r0
 80087ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087b4:	223f      	movs	r2, #63	; 0x3f
 80087b6:	409a      	lsls	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	f010803f 	.word	0xf010803f

080087d8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e050      	b.n	800888c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d101      	bne.n	80087fa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80087f6:	2302      	movs	r3, #2
 80087f8:	e048      	b.n	800888c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f022 0201 	bic.w	r2, r2, #1
 8008808:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2200      	movs	r2, #0
 8008818:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2200      	movs	r2, #0
 8008820:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2200      	movs	r2, #0
 8008828:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2200      	movs	r2, #0
 8008830:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2221      	movs	r2, #33	; 0x21
 8008838:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fada 	bl	8008df4 <DMA_CalcBaseAndBitshift>
 8008840:	4603      	mov	r3, r0
 8008842:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800886c:	223f      	movs	r2, #63	; 0x3f
 800886e:	409a      	lsls	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
 80088a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d101      	bne.n	80088ba <HAL_DMA_Start_IT+0x26>
 80088b6:	2302      	movs	r3, #2
 80088b8:	e040      	b.n	800893c <HAL_DMA_Start_IT+0xa8>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d12f      	bne.n	800892e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2202      	movs	r2, #2
 80088d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	68b9      	ldr	r1, [r7, #8]
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 fa58 	bl	8008d98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ec:	223f      	movs	r2, #63	; 0x3f
 80088ee:	409a      	lsls	r2, r3
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f042 0216 	orr.w	r2, r2, #22
 8008902:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008908:	2b00      	cmp	r3, #0
 800890a:	d007      	beq.n	800891c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0208 	orr.w	r2, r2, #8
 800891a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f042 0201 	orr.w	r2, r2, #1
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	e005      	b.n	800893a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008936:	2302      	movs	r3, #2
 8008938:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800893a:	7dfb      	ldrb	r3, [r7, #23]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008950:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008952:	f7ff faad 	bl	8007eb0 <HAL_GetTick>
 8008956:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b02      	cmp	r3, #2
 8008962:	d008      	beq.n	8008976 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2280      	movs	r2, #128	; 0x80
 8008968:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e052      	b.n	8008a1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f022 0216 	bic.w	r2, r2, #22
 8008984:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	695a      	ldr	r2, [r3, #20]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008994:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899a:	2b00      	cmp	r3, #0
 800899c:	d103      	bne.n	80089a6 <HAL_DMA_Abort+0x62>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d007      	beq.n	80089b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f022 0208 	bic.w	r2, r2, #8
 80089b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f022 0201 	bic.w	r2, r2, #1
 80089c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80089c6:	e013      	b.n	80089f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80089c8:	f7ff fa72 	bl	8007eb0 <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	2b05      	cmp	r3, #5
 80089d4:	d90c      	bls.n	80089f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2220      	movs	r2, #32
 80089da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2203      	movs	r2, #3
 80089e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e015      	b.n	8008a1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1e4      	bne.n	80089c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a02:	223f      	movs	r2, #63	; 0x3f
 8008a04:	409a      	lsls	r2, r3
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d004      	beq.n	8008a42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2280      	movs	r2, #128	; 0x80
 8008a3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e00c      	b.n	8008a5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2205      	movs	r2, #5
 8008a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f022 0201 	bic.w	r2, r2, #1
 8008a58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008a70:	2300      	movs	r3, #0
 8008a72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008a74:	4b8e      	ldr	r3, [pc, #568]	; (8008cb0 <HAL_DMA_IRQHandler+0x248>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a8e      	ldr	r2, [pc, #568]	; (8008cb4 <HAL_DMA_IRQHandler+0x24c>)
 8008a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a7e:	0a9b      	lsrs	r3, r3, #10
 8008a80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a92:	2208      	movs	r2, #8
 8008a94:	409a      	lsls	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4013      	ands	r3, r2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d01a      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0304 	and.w	r3, r3, #4
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d013      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f022 0204 	bic.w	r2, r2, #4
 8008aba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ac0:	2208      	movs	r2, #8
 8008ac2:	409a      	lsls	r2, r3
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008acc:	f043 0201 	orr.w	r2, r3, #1
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ad8:	2201      	movs	r2, #1
 8008ada:	409a      	lsls	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4013      	ands	r3, r2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d012      	beq.n	8008b0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00b      	beq.n	8008b0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008af6:	2201      	movs	r2, #1
 8008af8:	409a      	lsls	r2, r3
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b02:	f043 0202 	orr.w	r2, r3, #2
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b0e:	2204      	movs	r2, #4
 8008b10:	409a      	lsls	r2, r3
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4013      	ands	r3, r2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d012      	beq.n	8008b40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b2c:	2204      	movs	r2, #4
 8008b2e:	409a      	lsls	r2, r3
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b38:	f043 0204 	orr.w	r2, r3, #4
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b44:	2210      	movs	r2, #16
 8008b46:	409a      	lsls	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d043      	beq.n	8008bd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0308 	and.w	r3, r3, #8
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d03c      	beq.n	8008bd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b62:	2210      	movs	r2, #16
 8008b64:	409a      	lsls	r2, r3
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d018      	beq.n	8008baa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d108      	bne.n	8008b98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d024      	beq.n	8008bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	4798      	blx	r3
 8008b96:	e01f      	b.n	8008bd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d01b      	beq.n	8008bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	4798      	blx	r3
 8008ba8:	e016      	b.n	8008bd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d107      	bne.n	8008bc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f022 0208 	bic.w	r2, r2, #8
 8008bc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d003      	beq.n	8008bd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bdc:	2220      	movs	r2, #32
 8008bde:	409a      	lsls	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	4013      	ands	r3, r2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 808f 	beq.w	8008d08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0310 	and.w	r3, r3, #16
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 8087 	beq.w	8008d08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bfe:	2220      	movs	r2, #32
 8008c00:	409a      	lsls	r2, r3
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b05      	cmp	r3, #5
 8008c10:	d136      	bne.n	8008c80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f022 0216 	bic.w	r2, r2, #22
 8008c20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	695a      	ldr	r2, [r3, #20]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d103      	bne.n	8008c42 <HAL_DMA_IRQHandler+0x1da>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d007      	beq.n	8008c52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f022 0208 	bic.w	r2, r2, #8
 8008c50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c56:	223f      	movs	r2, #63	; 0x3f
 8008c58:	409a      	lsls	r2, r3
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d07e      	beq.n	8008d74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	4798      	blx	r3
        }
        return;
 8008c7e:	e079      	b.n	8008d74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d01d      	beq.n	8008cca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10d      	bne.n	8008cb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d031      	beq.n	8008d08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	4798      	blx	r3
 8008cac:	e02c      	b.n	8008d08 <HAL_DMA_IRQHandler+0x2a0>
 8008cae:	bf00      	nop
 8008cb0:	2000001c 	.word	0x2000001c
 8008cb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d023      	beq.n	8008d08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	4798      	blx	r3
 8008cc8:	e01e      	b.n	8008d08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10f      	bne.n	8008cf8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f022 0210 	bic.w	r2, r2, #16
 8008ce6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d003      	beq.n	8008d08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d032      	beq.n	8008d76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d022      	beq.n	8008d62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2205      	movs	r2, #5
 8008d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f022 0201 	bic.w	r2, r2, #1
 8008d32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	3301      	adds	r3, #1
 8008d38:	60bb      	str	r3, [r7, #8]
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d307      	bcc.n	8008d50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1f2      	bne.n	8008d34 <HAL_DMA_IRQHandler+0x2cc>
 8008d4e:	e000      	b.n	8008d52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008d50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d005      	beq.n	8008d76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	4798      	blx	r3
 8008d72:	e000      	b.n	8008d76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008d74:	bf00      	nop
    }
  }
}
 8008d76:	3718      	adds	r7, #24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d8a:	b2db      	uxtb	r3, r3
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
 8008da4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008db4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	683a      	ldr	r2, [r7, #0]
 8008dbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	2b40      	cmp	r3, #64	; 0x40
 8008dc4:	d108      	bne.n	8008dd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008dd6:	e007      	b.n	8008de8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	60da      	str	r2, [r3, #12]
}
 8008de8:	bf00      	nop
 8008dea:	3714      	adds	r7, #20
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	3b10      	subs	r3, #16
 8008e04:	4a14      	ldr	r2, [pc, #80]	; (8008e58 <DMA_CalcBaseAndBitshift+0x64>)
 8008e06:	fba2 2303 	umull	r2, r3, r2, r3
 8008e0a:	091b      	lsrs	r3, r3, #4
 8008e0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008e0e:	4a13      	ldr	r2, [pc, #76]	; (8008e5c <DMA_CalcBaseAndBitshift+0x68>)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	4413      	add	r3, r2
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	d909      	bls.n	8008e36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008e2a:	f023 0303 	bic.w	r3, r3, #3
 8008e2e:	1d1a      	adds	r2, r3, #4
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	659a      	str	r2, [r3, #88]	; 0x58
 8008e34:	e007      	b.n	8008e46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008e3e:	f023 0303 	bic.w	r3, r3, #3
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	aaaaaaab 	.word	0xaaaaaaab
 8008e5c:	080143b0 	.word	0x080143b0

08008e60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d11f      	bne.n	8008eba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d856      	bhi.n	8008f2e <DMA_CheckFifoParam+0xce>
 8008e80:	a201      	add	r2, pc, #4	; (adr r2, 8008e88 <DMA_CheckFifoParam+0x28>)
 8008e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e86:	bf00      	nop
 8008e88:	08008e99 	.word	0x08008e99
 8008e8c:	08008eab 	.word	0x08008eab
 8008e90:	08008e99 	.word	0x08008e99
 8008e94:	08008f2f 	.word	0x08008f2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d046      	beq.n	8008f32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ea8:	e043      	b.n	8008f32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008eb2:	d140      	bne.n	8008f36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008eb8:	e03d      	b.n	8008f36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ec2:	d121      	bne.n	8008f08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2b03      	cmp	r3, #3
 8008ec8:	d837      	bhi.n	8008f3a <DMA_CheckFifoParam+0xda>
 8008eca:	a201      	add	r2, pc, #4	; (adr r2, 8008ed0 <DMA_CheckFifoParam+0x70>)
 8008ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed0:	08008ee1 	.word	0x08008ee1
 8008ed4:	08008ee7 	.word	0x08008ee7
 8008ed8:	08008ee1 	.word	0x08008ee1
 8008edc:	08008ef9 	.word	0x08008ef9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ee4:	e030      	b.n	8008f48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d025      	beq.n	8008f3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ef6:	e022      	b.n	8008f3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008f00:	d11f      	bne.n	8008f42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008f06:	e01c      	b.n	8008f42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d903      	bls.n	8008f16 <DMA_CheckFifoParam+0xb6>
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b03      	cmp	r3, #3
 8008f12:	d003      	beq.n	8008f1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008f14:	e018      	b.n	8008f48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	73fb      	strb	r3, [r7, #15]
      break;
 8008f1a:	e015      	b.n	8008f48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00e      	beq.n	8008f46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f2c:	e00b      	b.n	8008f46 <DMA_CheckFifoParam+0xe6>
      break;
 8008f2e:	bf00      	nop
 8008f30:	e00a      	b.n	8008f48 <DMA_CheckFifoParam+0xe8>
      break;
 8008f32:	bf00      	nop
 8008f34:	e008      	b.n	8008f48 <DMA_CheckFifoParam+0xe8>
      break;
 8008f36:	bf00      	nop
 8008f38:	e006      	b.n	8008f48 <DMA_CheckFifoParam+0xe8>
      break;
 8008f3a:	bf00      	nop
 8008f3c:	e004      	b.n	8008f48 <DMA_CheckFifoParam+0xe8>
      break;
 8008f3e:	bf00      	nop
 8008f40:	e002      	b.n	8008f48 <DMA_CheckFifoParam+0xe8>
      break;   
 8008f42:	bf00      	nop
 8008f44:	e000      	b.n	8008f48 <DMA_CheckFifoParam+0xe8>
      break;
 8008f46:	bf00      	nop
    }
  } 
  
  return status; 
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop

08008f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b089      	sub	sp, #36	; 0x24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008f62:	2300      	movs	r3, #0
 8008f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008f66:	2300      	movs	r3, #0
 8008f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f6e:	2300      	movs	r3, #0
 8008f70:	61fb      	str	r3, [r7, #28]
 8008f72:	e165      	b.n	8009240 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008f74:	2201      	movs	r2, #1
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	4013      	ands	r3, r2
 8008f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	f040 8154 	bne.w	800923a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f003 0303 	and.w	r3, r3, #3
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d005      	beq.n	8008faa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d130      	bne.n	800900c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	005b      	lsls	r3, r3, #1
 8008fb4:	2203      	movs	r2, #3
 8008fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fba:	43db      	mvns	r3, r3
 8008fbc:	69ba      	ldr	r2, [r7, #24]
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	68da      	ldr	r2, [r3, #12]
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	fa02 f303 	lsl.w	r3, r2, r3
 8008fce:	69ba      	ldr	r2, [r7, #24]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	69ba      	ldr	r2, [r7, #24]
 8008fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe8:	43db      	mvns	r3, r3
 8008fea:	69ba      	ldr	r2, [r7, #24]
 8008fec:	4013      	ands	r3, r2
 8008fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	091b      	lsrs	r3, r3, #4
 8008ff6:	f003 0201 	and.w	r2, r3, #1
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8009000:	69ba      	ldr	r2, [r7, #24]
 8009002:	4313      	orrs	r3, r2
 8009004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	69ba      	ldr	r2, [r7, #24]
 800900a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f003 0303 	and.w	r3, r3, #3
 8009014:	2b03      	cmp	r3, #3
 8009016:	d017      	beq.n	8009048 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	005b      	lsls	r3, r3, #1
 8009022:	2203      	movs	r2, #3
 8009024:	fa02 f303 	lsl.w	r3, r2, r3
 8009028:	43db      	mvns	r3, r3
 800902a:	69ba      	ldr	r2, [r7, #24]
 800902c:	4013      	ands	r3, r2
 800902e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	689a      	ldr	r2, [r3, #8]
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	005b      	lsls	r3, r3, #1
 8009038:	fa02 f303 	lsl.w	r3, r2, r3
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	4313      	orrs	r3, r2
 8009040:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f003 0303 	and.w	r3, r3, #3
 8009050:	2b02      	cmp	r3, #2
 8009052:	d123      	bne.n	800909c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	08da      	lsrs	r2, r3, #3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3208      	adds	r2, #8
 800905c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009060:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	f003 0307 	and.w	r3, r3, #7
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	220f      	movs	r2, #15
 800906c:	fa02 f303 	lsl.w	r3, r2, r3
 8009070:	43db      	mvns	r3, r3
 8009072:	69ba      	ldr	r2, [r7, #24]
 8009074:	4013      	ands	r3, r2
 8009076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	691a      	ldr	r2, [r3, #16]
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	f003 0307 	and.w	r3, r3, #7
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	fa02 f303 	lsl.w	r3, r2, r3
 8009088:	69ba      	ldr	r2, [r7, #24]
 800908a:	4313      	orrs	r3, r2
 800908c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	08da      	lsrs	r2, r3, #3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	3208      	adds	r2, #8
 8009096:	69b9      	ldr	r1, [r7, #24]
 8009098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	005b      	lsls	r3, r3, #1
 80090a6:	2203      	movs	r2, #3
 80090a8:	fa02 f303 	lsl.w	r3, r2, r3
 80090ac:	43db      	mvns	r3, r3
 80090ae:	69ba      	ldr	r2, [r7, #24]
 80090b0:	4013      	ands	r3, r2
 80090b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	f003 0203 	and.w	r2, r3, #3
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	005b      	lsls	r3, r3, #1
 80090c0:	fa02 f303 	lsl.w	r3, r2, r3
 80090c4:	69ba      	ldr	r2, [r7, #24]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	69ba      	ldr	r2, [r7, #24]
 80090ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 80ae 	beq.w	800923a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090de:	2300      	movs	r3, #0
 80090e0:	60fb      	str	r3, [r7, #12]
 80090e2:	4b5d      	ldr	r3, [pc, #372]	; (8009258 <HAL_GPIO_Init+0x300>)
 80090e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e6:	4a5c      	ldr	r2, [pc, #368]	; (8009258 <HAL_GPIO_Init+0x300>)
 80090e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090ec:	6453      	str	r3, [r2, #68]	; 0x44
 80090ee:	4b5a      	ldr	r3, [pc, #360]	; (8009258 <HAL_GPIO_Init+0x300>)
 80090f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090f6:	60fb      	str	r3, [r7, #12]
 80090f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80090fa:	4a58      	ldr	r2, [pc, #352]	; (800925c <HAL_GPIO_Init+0x304>)
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	089b      	lsrs	r3, r3, #2
 8009100:	3302      	adds	r3, #2
 8009102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	f003 0303 	and.w	r3, r3, #3
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	220f      	movs	r2, #15
 8009112:	fa02 f303 	lsl.w	r3, r2, r3
 8009116:	43db      	mvns	r3, r3
 8009118:	69ba      	ldr	r2, [r7, #24]
 800911a:	4013      	ands	r3, r2
 800911c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a4f      	ldr	r2, [pc, #316]	; (8009260 <HAL_GPIO_Init+0x308>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d025      	beq.n	8009172 <HAL_GPIO_Init+0x21a>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a4e      	ldr	r2, [pc, #312]	; (8009264 <HAL_GPIO_Init+0x30c>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d01f      	beq.n	800916e <HAL_GPIO_Init+0x216>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a4d      	ldr	r2, [pc, #308]	; (8009268 <HAL_GPIO_Init+0x310>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d019      	beq.n	800916a <HAL_GPIO_Init+0x212>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a4c      	ldr	r2, [pc, #304]	; (800926c <HAL_GPIO_Init+0x314>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d013      	beq.n	8009166 <HAL_GPIO_Init+0x20e>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a4b      	ldr	r2, [pc, #300]	; (8009270 <HAL_GPIO_Init+0x318>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d00d      	beq.n	8009162 <HAL_GPIO_Init+0x20a>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a4a      	ldr	r2, [pc, #296]	; (8009274 <HAL_GPIO_Init+0x31c>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d007      	beq.n	800915e <HAL_GPIO_Init+0x206>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a49      	ldr	r2, [pc, #292]	; (8009278 <HAL_GPIO_Init+0x320>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d101      	bne.n	800915a <HAL_GPIO_Init+0x202>
 8009156:	2306      	movs	r3, #6
 8009158:	e00c      	b.n	8009174 <HAL_GPIO_Init+0x21c>
 800915a:	2307      	movs	r3, #7
 800915c:	e00a      	b.n	8009174 <HAL_GPIO_Init+0x21c>
 800915e:	2305      	movs	r3, #5
 8009160:	e008      	b.n	8009174 <HAL_GPIO_Init+0x21c>
 8009162:	2304      	movs	r3, #4
 8009164:	e006      	b.n	8009174 <HAL_GPIO_Init+0x21c>
 8009166:	2303      	movs	r3, #3
 8009168:	e004      	b.n	8009174 <HAL_GPIO_Init+0x21c>
 800916a:	2302      	movs	r3, #2
 800916c:	e002      	b.n	8009174 <HAL_GPIO_Init+0x21c>
 800916e:	2301      	movs	r3, #1
 8009170:	e000      	b.n	8009174 <HAL_GPIO_Init+0x21c>
 8009172:	2300      	movs	r3, #0
 8009174:	69fa      	ldr	r2, [r7, #28]
 8009176:	f002 0203 	and.w	r2, r2, #3
 800917a:	0092      	lsls	r2, r2, #2
 800917c:	4093      	lsls	r3, r2
 800917e:	69ba      	ldr	r2, [r7, #24]
 8009180:	4313      	orrs	r3, r2
 8009182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009184:	4935      	ldr	r1, [pc, #212]	; (800925c <HAL_GPIO_Init+0x304>)
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	089b      	lsrs	r3, r3, #2
 800918a:	3302      	adds	r3, #2
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009192:	4b3a      	ldr	r3, [pc, #232]	; (800927c <HAL_GPIO_Init+0x324>)
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	43db      	mvns	r3, r3
 800919c:	69ba      	ldr	r2, [r7, #24]
 800919e:	4013      	ands	r3, r2
 80091a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80091ae:	69ba      	ldr	r2, [r7, #24]
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80091b6:	4a31      	ldr	r2, [pc, #196]	; (800927c <HAL_GPIO_Init+0x324>)
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80091bc:	4b2f      	ldr	r3, [pc, #188]	; (800927c <HAL_GPIO_Init+0x324>)
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	43db      	mvns	r3, r3
 80091c6:	69ba      	ldr	r2, [r7, #24]
 80091c8:	4013      	ands	r3, r2
 80091ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d003      	beq.n	80091e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80091d8:	69ba      	ldr	r2, [r7, #24]
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	4313      	orrs	r3, r2
 80091de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80091e0:	4a26      	ldr	r2, [pc, #152]	; (800927c <HAL_GPIO_Init+0x324>)
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80091e6:	4b25      	ldr	r3, [pc, #148]	; (800927c <HAL_GPIO_Init+0x324>)
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	43db      	mvns	r3, r3
 80091f0:	69ba      	ldr	r2, [r7, #24]
 80091f2:	4013      	ands	r3, r2
 80091f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8009202:	69ba      	ldr	r2, [r7, #24]
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	4313      	orrs	r3, r2
 8009208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800920a:	4a1c      	ldr	r2, [pc, #112]	; (800927c <HAL_GPIO_Init+0x324>)
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009210:	4b1a      	ldr	r3, [pc, #104]	; (800927c <HAL_GPIO_Init+0x324>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	43db      	mvns	r3, r3
 800921a:	69ba      	ldr	r2, [r7, #24]
 800921c:	4013      	ands	r3, r2
 800921e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d003      	beq.n	8009234 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	4313      	orrs	r3, r2
 8009232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009234:	4a11      	ldr	r2, [pc, #68]	; (800927c <HAL_GPIO_Init+0x324>)
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	3301      	adds	r3, #1
 800923e:	61fb      	str	r3, [r7, #28]
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	2b0f      	cmp	r3, #15
 8009244:	f67f ae96 	bls.w	8008f74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009248:	bf00      	nop
 800924a:	bf00      	nop
 800924c:	3724      	adds	r7, #36	; 0x24
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	40023800 	.word	0x40023800
 800925c:	40013800 	.word	0x40013800
 8009260:	40020000 	.word	0x40020000
 8009264:	40020400 	.word	0x40020400
 8009268:	40020800 	.word	0x40020800
 800926c:	40020c00 	.word	0x40020c00
 8009270:	40021000 	.word	0x40021000
 8009274:	40021400 	.word	0x40021400
 8009278:	40021800 	.word	0x40021800
 800927c:	40013c00 	.word	0x40013c00

08009280 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009280:	b480      	push	{r7}
 8009282:	b087      	sub	sp, #28
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800928a:	2300      	movs	r3, #0
 800928c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800928e:	2300      	movs	r3, #0
 8009290:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8009292:	2300      	movs	r3, #0
 8009294:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009296:	2300      	movs	r3, #0
 8009298:	617b      	str	r3, [r7, #20]
 800929a:	e0c7      	b.n	800942c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800929c:	2201      	movs	r2, #1
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	fa02 f303 	lsl.w	r3, r2, r3
 80092a4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	4013      	ands	r3, r2
 80092ac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	f040 80b7 	bne.w	8009426 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80092b8:	4a62      	ldr	r2, [pc, #392]	; (8009444 <HAL_GPIO_DeInit+0x1c4>)
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	089b      	lsrs	r3, r3, #2
 80092be:	3302      	adds	r3, #2
 80092c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092c4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f003 0303 	and.w	r3, r3, #3
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	220f      	movs	r2, #15
 80092d0:	fa02 f303 	lsl.w	r3, r2, r3
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	4013      	ands	r3, r2
 80092d8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a5a      	ldr	r2, [pc, #360]	; (8009448 <HAL_GPIO_DeInit+0x1c8>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d025      	beq.n	800932e <HAL_GPIO_DeInit+0xae>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a59      	ldr	r2, [pc, #356]	; (800944c <HAL_GPIO_DeInit+0x1cc>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d01f      	beq.n	800932a <HAL_GPIO_DeInit+0xaa>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a58      	ldr	r2, [pc, #352]	; (8009450 <HAL_GPIO_DeInit+0x1d0>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d019      	beq.n	8009326 <HAL_GPIO_DeInit+0xa6>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a57      	ldr	r2, [pc, #348]	; (8009454 <HAL_GPIO_DeInit+0x1d4>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d013      	beq.n	8009322 <HAL_GPIO_DeInit+0xa2>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a56      	ldr	r2, [pc, #344]	; (8009458 <HAL_GPIO_DeInit+0x1d8>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d00d      	beq.n	800931e <HAL_GPIO_DeInit+0x9e>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a55      	ldr	r2, [pc, #340]	; (800945c <HAL_GPIO_DeInit+0x1dc>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d007      	beq.n	800931a <HAL_GPIO_DeInit+0x9a>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a54      	ldr	r2, [pc, #336]	; (8009460 <HAL_GPIO_DeInit+0x1e0>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d101      	bne.n	8009316 <HAL_GPIO_DeInit+0x96>
 8009312:	2306      	movs	r3, #6
 8009314:	e00c      	b.n	8009330 <HAL_GPIO_DeInit+0xb0>
 8009316:	2307      	movs	r3, #7
 8009318:	e00a      	b.n	8009330 <HAL_GPIO_DeInit+0xb0>
 800931a:	2305      	movs	r3, #5
 800931c:	e008      	b.n	8009330 <HAL_GPIO_DeInit+0xb0>
 800931e:	2304      	movs	r3, #4
 8009320:	e006      	b.n	8009330 <HAL_GPIO_DeInit+0xb0>
 8009322:	2303      	movs	r3, #3
 8009324:	e004      	b.n	8009330 <HAL_GPIO_DeInit+0xb0>
 8009326:	2302      	movs	r3, #2
 8009328:	e002      	b.n	8009330 <HAL_GPIO_DeInit+0xb0>
 800932a:	2301      	movs	r3, #1
 800932c:	e000      	b.n	8009330 <HAL_GPIO_DeInit+0xb0>
 800932e:	2300      	movs	r3, #0
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	f002 0203 	and.w	r2, r2, #3
 8009336:	0092      	lsls	r2, r2, #2
 8009338:	4093      	lsls	r3, r2
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	429a      	cmp	r2, r3
 800933e:	d132      	bne.n	80093a6 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009340:	4b48      	ldr	r3, [pc, #288]	; (8009464 <HAL_GPIO_DeInit+0x1e4>)
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	43db      	mvns	r3, r3
 8009348:	4946      	ldr	r1, [pc, #280]	; (8009464 <HAL_GPIO_DeInit+0x1e4>)
 800934a:	4013      	ands	r3, r2
 800934c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800934e:	4b45      	ldr	r3, [pc, #276]	; (8009464 <HAL_GPIO_DeInit+0x1e4>)
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	43db      	mvns	r3, r3
 8009356:	4943      	ldr	r1, [pc, #268]	; (8009464 <HAL_GPIO_DeInit+0x1e4>)
 8009358:	4013      	ands	r3, r2
 800935a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800935c:	4b41      	ldr	r3, [pc, #260]	; (8009464 <HAL_GPIO_DeInit+0x1e4>)
 800935e:	68da      	ldr	r2, [r3, #12]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	43db      	mvns	r3, r3
 8009364:	493f      	ldr	r1, [pc, #252]	; (8009464 <HAL_GPIO_DeInit+0x1e4>)
 8009366:	4013      	ands	r3, r2
 8009368:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800936a:	4b3e      	ldr	r3, [pc, #248]	; (8009464 <HAL_GPIO_DeInit+0x1e4>)
 800936c:	689a      	ldr	r2, [r3, #8]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	43db      	mvns	r3, r3
 8009372:	493c      	ldr	r1, [pc, #240]	; (8009464 <HAL_GPIO_DeInit+0x1e4>)
 8009374:	4013      	ands	r3, r2
 8009376:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	f003 0303 	and.w	r3, r3, #3
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	220f      	movs	r2, #15
 8009382:	fa02 f303 	lsl.w	r3, r2, r3
 8009386:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009388:	4a2e      	ldr	r2, [pc, #184]	; (8009444 <HAL_GPIO_DeInit+0x1c4>)
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	089b      	lsrs	r3, r3, #2
 800938e:	3302      	adds	r3, #2
 8009390:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	43da      	mvns	r2, r3
 8009398:	482a      	ldr	r0, [pc, #168]	; (8009444 <HAL_GPIO_DeInit+0x1c4>)
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	089b      	lsrs	r3, r3, #2
 800939e:	400a      	ands	r2, r1
 80093a0:	3302      	adds	r3, #2
 80093a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	005b      	lsls	r3, r3, #1
 80093ae:	2103      	movs	r1, #3
 80093b0:	fa01 f303 	lsl.w	r3, r1, r3
 80093b4:	43db      	mvns	r3, r3
 80093b6:	401a      	ands	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	08da      	lsrs	r2, r3, #3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3208      	adds	r2, #8
 80093c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	f003 0307 	and.w	r3, r3, #7
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	220f      	movs	r2, #15
 80093d2:	fa02 f303 	lsl.w	r3, r2, r3
 80093d6:	43db      	mvns	r3, r3
 80093d8:	697a      	ldr	r2, [r7, #20]
 80093da:	08d2      	lsrs	r2, r2, #3
 80093dc:	4019      	ands	r1, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	3208      	adds	r2, #8
 80093e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68da      	ldr	r2, [r3, #12]
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	005b      	lsls	r3, r3, #1
 80093ee:	2103      	movs	r1, #3
 80093f0:	fa01 f303 	lsl.w	r3, r1, r3
 80093f4:	43db      	mvns	r3, r3
 80093f6:	401a      	ands	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685a      	ldr	r2, [r3, #4]
 8009400:	2101      	movs	r1, #1
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	fa01 f303 	lsl.w	r3, r1, r3
 8009408:	43db      	mvns	r3, r3
 800940a:	401a      	ands	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	689a      	ldr	r2, [r3, #8]
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	005b      	lsls	r3, r3, #1
 8009418:	2103      	movs	r1, #3
 800941a:	fa01 f303 	lsl.w	r3, r1, r3
 800941e:	43db      	mvns	r3, r3
 8009420:	401a      	ands	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	3301      	adds	r3, #1
 800942a:	617b      	str	r3, [r7, #20]
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	2b0f      	cmp	r3, #15
 8009430:	f67f af34 	bls.w	800929c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop
 8009438:	371c      	adds	r7, #28
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	40013800 	.word	0x40013800
 8009448:	40020000 	.word	0x40020000
 800944c:	40020400 	.word	0x40020400
 8009450:	40020800 	.word	0x40020800
 8009454:	40020c00 	.word	0x40020c00
 8009458:	40021000 	.word	0x40021000
 800945c:	40021400 	.word	0x40021400
 8009460:	40021800 	.word	0x40021800
 8009464:	40013c00 	.word	0x40013c00

08009468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	807b      	strh	r3, [r7, #2]
 8009474:	4613      	mov	r3, r2
 8009476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009478:	787b      	ldrb	r3, [r7, #1]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d003      	beq.n	8009486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800947e:	887a      	ldrh	r2, [r7, #2]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009484:	e003      	b.n	800948e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009486:	887b      	ldrh	r3, [r7, #2]
 8009488:	041a      	lsls	r2, r3, #16
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	619a      	str	r2, [r3, #24]
}
 800948e:	bf00      	nop
 8009490:	370c      	adds	r7, #12
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
	...

0800949c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	4603      	mov	r3, r0
 80094a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80094a6:	4b08      	ldr	r3, [pc, #32]	; (80094c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80094a8:	695a      	ldr	r2, [r3, #20]
 80094aa:	88fb      	ldrh	r3, [r7, #6]
 80094ac:	4013      	ands	r3, r2
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d006      	beq.n	80094c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80094b2:	4a05      	ldr	r2, [pc, #20]	; (80094c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80094b4:	88fb      	ldrh	r3, [r7, #6]
 80094b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80094b8:	88fb      	ldrh	r3, [r7, #6]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fd f846 	bl	800654c <HAL_GPIO_EXTI_Callback>
  }
}
 80094c0:	bf00      	nop
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	40013c00 	.word	0x40013c00

080094cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e12b      	b.n	8009736 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d106      	bne.n	80094f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7fa f8ba 	bl	800366c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2224      	movs	r2, #36	; 0x24
 80094fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f022 0201 	bic.w	r2, r2, #1
 800950e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800951e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800952e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009530:	f002 fd2e 	bl	800bf90 <HAL_RCC_GetPCLK1Freq>
 8009534:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	4a81      	ldr	r2, [pc, #516]	; (8009740 <HAL_I2C_Init+0x274>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d807      	bhi.n	8009550 <HAL_I2C_Init+0x84>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4a80      	ldr	r2, [pc, #512]	; (8009744 <HAL_I2C_Init+0x278>)
 8009544:	4293      	cmp	r3, r2
 8009546:	bf94      	ite	ls
 8009548:	2301      	movls	r3, #1
 800954a:	2300      	movhi	r3, #0
 800954c:	b2db      	uxtb	r3, r3
 800954e:	e006      	b.n	800955e <HAL_I2C_Init+0x92>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	4a7d      	ldr	r2, [pc, #500]	; (8009748 <HAL_I2C_Init+0x27c>)
 8009554:	4293      	cmp	r3, r2
 8009556:	bf94      	ite	ls
 8009558:	2301      	movls	r3, #1
 800955a:	2300      	movhi	r3, #0
 800955c:	b2db      	uxtb	r3, r3
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e0e7      	b.n	8009736 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	4a78      	ldr	r2, [pc, #480]	; (800974c <HAL_I2C_Init+0x280>)
 800956a:	fba2 2303 	umull	r2, r3, r2, r3
 800956e:	0c9b      	lsrs	r3, r3, #18
 8009570:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	430a      	orrs	r2, r1
 8009584:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	6a1b      	ldr	r3, [r3, #32]
 800958c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	4a6a      	ldr	r2, [pc, #424]	; (8009740 <HAL_I2C_Init+0x274>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d802      	bhi.n	80095a0 <HAL_I2C_Init+0xd4>
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	3301      	adds	r3, #1
 800959e:	e009      	b.n	80095b4 <HAL_I2C_Init+0xe8>
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80095a6:	fb02 f303 	mul.w	r3, r2, r3
 80095aa:	4a69      	ldr	r2, [pc, #420]	; (8009750 <HAL_I2C_Init+0x284>)
 80095ac:	fba2 2303 	umull	r2, r3, r2, r3
 80095b0:	099b      	lsrs	r3, r3, #6
 80095b2:	3301      	adds	r3, #1
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	6812      	ldr	r2, [r2, #0]
 80095b8:	430b      	orrs	r3, r1
 80095ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	69db      	ldr	r3, [r3, #28]
 80095c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80095c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	495c      	ldr	r1, [pc, #368]	; (8009740 <HAL_I2C_Init+0x274>)
 80095d0:	428b      	cmp	r3, r1
 80095d2:	d819      	bhi.n	8009608 <HAL_I2C_Init+0x13c>
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	1e59      	subs	r1, r3, #1
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	005b      	lsls	r3, r3, #1
 80095de:	fbb1 f3f3 	udiv	r3, r1, r3
 80095e2:	1c59      	adds	r1, r3, #1
 80095e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80095e8:	400b      	ands	r3, r1
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00a      	beq.n	8009604 <HAL_I2C_Init+0x138>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	1e59      	subs	r1, r3, #1
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	005b      	lsls	r3, r3, #1
 80095f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80095fc:	3301      	adds	r3, #1
 80095fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009602:	e051      	b.n	80096a8 <HAL_I2C_Init+0x1dc>
 8009604:	2304      	movs	r3, #4
 8009606:	e04f      	b.n	80096a8 <HAL_I2C_Init+0x1dc>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d111      	bne.n	8009634 <HAL_I2C_Init+0x168>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	1e58      	subs	r0, r3, #1
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6859      	ldr	r1, [r3, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	005b      	lsls	r3, r3, #1
 800961c:	440b      	add	r3, r1
 800961e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009622:	3301      	adds	r3, #1
 8009624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009628:	2b00      	cmp	r3, #0
 800962a:	bf0c      	ite	eq
 800962c:	2301      	moveq	r3, #1
 800962e:	2300      	movne	r3, #0
 8009630:	b2db      	uxtb	r3, r3
 8009632:	e012      	b.n	800965a <HAL_I2C_Init+0x18e>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	1e58      	subs	r0, r3, #1
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6859      	ldr	r1, [r3, #4]
 800963c:	460b      	mov	r3, r1
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	440b      	add	r3, r1
 8009642:	0099      	lsls	r1, r3, #2
 8009644:	440b      	add	r3, r1
 8009646:	fbb0 f3f3 	udiv	r3, r0, r3
 800964a:	3301      	adds	r3, #1
 800964c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009650:	2b00      	cmp	r3, #0
 8009652:	bf0c      	ite	eq
 8009654:	2301      	moveq	r3, #1
 8009656:	2300      	movne	r3, #0
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2b00      	cmp	r3, #0
 800965c:	d001      	beq.n	8009662 <HAL_I2C_Init+0x196>
 800965e:	2301      	movs	r3, #1
 8009660:	e022      	b.n	80096a8 <HAL_I2C_Init+0x1dc>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10e      	bne.n	8009688 <HAL_I2C_Init+0x1bc>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	1e58      	subs	r0, r3, #1
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6859      	ldr	r1, [r3, #4]
 8009672:	460b      	mov	r3, r1
 8009674:	005b      	lsls	r3, r3, #1
 8009676:	440b      	add	r3, r1
 8009678:	fbb0 f3f3 	udiv	r3, r0, r3
 800967c:	3301      	adds	r3, #1
 800967e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009686:	e00f      	b.n	80096a8 <HAL_I2C_Init+0x1dc>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	1e58      	subs	r0, r3, #1
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6859      	ldr	r1, [r3, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	440b      	add	r3, r1
 8009696:	0099      	lsls	r1, r3, #2
 8009698:	440b      	add	r3, r1
 800969a:	fbb0 f3f3 	udiv	r3, r0, r3
 800969e:	3301      	adds	r3, #1
 80096a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096a8:	6879      	ldr	r1, [r7, #4]
 80096aa:	6809      	ldr	r1, [r1, #0]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	69da      	ldr	r2, [r3, #28]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	431a      	orrs	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	430a      	orrs	r2, r1
 80096ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80096d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	6911      	ldr	r1, [r2, #16]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	68d2      	ldr	r2, [r2, #12]
 80096e2:	4311      	orrs	r1, r2
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	6812      	ldr	r2, [r2, #0]
 80096e8:	430b      	orrs	r3, r1
 80096ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	695a      	ldr	r2, [r3, #20]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	431a      	orrs	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	430a      	orrs	r2, r1
 8009706:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f042 0201 	orr.w	r2, r2, #1
 8009716:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2220      	movs	r2, #32
 8009722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	000186a0 	.word	0x000186a0
 8009744:	001e847f 	.word	0x001e847f
 8009748:	003d08ff 	.word	0x003d08ff
 800974c:	431bde83 	.word	0x431bde83
 8009750:	10624dd3 	.word	0x10624dd3

08009754 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b088      	sub	sp, #32
 8009758:	af02      	add	r7, sp, #8
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	607a      	str	r2, [r7, #4]
 800975e:	461a      	mov	r2, r3
 8009760:	460b      	mov	r3, r1
 8009762:	817b      	strh	r3, [r7, #10]
 8009764:	4613      	mov	r3, r2
 8009766:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009768:	f7fe fba2 	bl	8007eb0 <HAL_GetTick>
 800976c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009774:	b2db      	uxtb	r3, r3
 8009776:	2b20      	cmp	r3, #32
 8009778:	f040 80e0 	bne.w	800993c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	2319      	movs	r3, #25
 8009782:	2201      	movs	r2, #1
 8009784:	4970      	ldr	r1, [pc, #448]	; (8009948 <HAL_I2C_Master_Transmit+0x1f4>)
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f002 f8e6 	bl	800b958 <I2C_WaitOnFlagUntilTimeout>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009792:	2302      	movs	r3, #2
 8009794:	e0d3      	b.n	800993e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800979c:	2b01      	cmp	r3, #1
 800979e:	d101      	bne.n	80097a4 <HAL_I2C_Master_Transmit+0x50>
 80097a0:	2302      	movs	r3, #2
 80097a2:	e0cc      	b.n	800993e <HAL_I2C_Master_Transmit+0x1ea>
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d007      	beq.n	80097ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f042 0201 	orr.w	r2, r2, #1
 80097c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2221      	movs	r2, #33	; 0x21
 80097de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2210      	movs	r2, #16
 80097e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	893a      	ldrh	r2, [r7, #8]
 80097fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009800:	b29a      	uxth	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	4a50      	ldr	r2, [pc, #320]	; (800994c <HAL_I2C_Master_Transmit+0x1f8>)
 800980a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800980c:	8979      	ldrh	r1, [r7, #10]
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	6a3a      	ldr	r2, [r7, #32]
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f001 fea8 	bl	800b568 <I2C_MasterRequestWrite>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d001      	beq.n	8009822 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e08d      	b.n	800993e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009822:	2300      	movs	r3, #0
 8009824:	613b      	str	r3, [r7, #16]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	613b      	str	r3, [r7, #16]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	613b      	str	r3, [r7, #16]
 8009836:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009838:	e066      	b.n	8009908 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	6a39      	ldr	r1, [r7, #32]
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f002 f960 	bl	800bb04 <I2C_WaitOnTXEFlagUntilTimeout>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00d      	beq.n	8009866 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984e:	2b04      	cmp	r3, #4
 8009850:	d107      	bne.n	8009862 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009860:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e06b      	b.n	800993e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986a:	781a      	ldrb	r2, [r3, #0]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009876:	1c5a      	adds	r2, r3, #1
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009880:	b29b      	uxth	r3, r3
 8009882:	3b01      	subs	r3, #1
 8009884:	b29a      	uxth	r2, r3
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800988e:	3b01      	subs	r3, #1
 8009890:	b29a      	uxth	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	695b      	ldr	r3, [r3, #20]
 800989c:	f003 0304 	and.w	r3, r3, #4
 80098a0:	2b04      	cmp	r3, #4
 80098a2:	d11b      	bne.n	80098dc <HAL_I2C_Master_Transmit+0x188>
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d017      	beq.n	80098dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b0:	781a      	ldrb	r2, [r3, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098bc:	1c5a      	adds	r2, r3, #1
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	3b01      	subs	r3, #1
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098d4:	3b01      	subs	r3, #1
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098dc:	697a      	ldr	r2, [r7, #20]
 80098de:	6a39      	ldr	r1, [r7, #32]
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f002 f950 	bl	800bb86 <I2C_WaitOnBTFFlagUntilTimeout>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00d      	beq.n	8009908 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f0:	2b04      	cmp	r3, #4
 80098f2:	d107      	bne.n	8009904 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009902:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e01a      	b.n	800993e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800990c:	2b00      	cmp	r3, #0
 800990e:	d194      	bne.n	800983a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800991e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2220      	movs	r2, #32
 8009924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2200      	movs	r2, #0
 800992c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	e000      	b.n	800993e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800993c:	2302      	movs	r3, #2
  }
}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	00100002 	.word	0x00100002
 800994c:	ffff0000 	.word	0xffff0000

08009950 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08c      	sub	sp, #48	; 0x30
 8009954:	af02      	add	r7, sp, #8
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	607a      	str	r2, [r7, #4]
 800995a:	461a      	mov	r2, r3
 800995c:	460b      	mov	r3, r1
 800995e:	817b      	strh	r3, [r7, #10]
 8009960:	4613      	mov	r3, r2
 8009962:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009964:	f7fe faa4 	bl	8007eb0 <HAL_GetTick>
 8009968:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b20      	cmp	r3, #32
 8009974:	f040 820b 	bne.w	8009d8e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	2319      	movs	r3, #25
 800997e:	2201      	movs	r2, #1
 8009980:	497c      	ldr	r1, [pc, #496]	; (8009b74 <HAL_I2C_Master_Receive+0x224>)
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f001 ffe8 	bl	800b958 <I2C_WaitOnFlagUntilTimeout>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800998e:	2302      	movs	r3, #2
 8009990:	e1fe      	b.n	8009d90 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009998:	2b01      	cmp	r3, #1
 800999a:	d101      	bne.n	80099a0 <HAL_I2C_Master_Receive+0x50>
 800999c:	2302      	movs	r3, #2
 800999e:	e1f7      	b.n	8009d90 <HAL_I2C_Master_Receive+0x440>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 0301 	and.w	r3, r3, #1
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d007      	beq.n	80099c6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f042 0201 	orr.w	r2, r2, #1
 80099c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2222      	movs	r2, #34	; 0x22
 80099da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2210      	movs	r2, #16
 80099e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	893a      	ldrh	r2, [r7, #8]
 80099f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	4a5c      	ldr	r2, [pc, #368]	; (8009b78 <HAL_I2C_Master_Receive+0x228>)
 8009a06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009a08:	8979      	ldrh	r1, [r7, #10]
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f001 fe2c 	bl	800b66c <I2C_MasterRequestRead>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e1b8      	b.n	8009d90 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d113      	bne.n	8009a4e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a26:	2300      	movs	r3, #0
 8009a28:	623b      	str	r3, [r7, #32]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	623b      	str	r3, [r7, #32]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	623b      	str	r3, [r7, #32]
 8009a3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a4a:	601a      	str	r2, [r3, #0]
 8009a4c:	e18c      	b.n	8009d68 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d11b      	bne.n	8009a8e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a66:	2300      	movs	r3, #0
 8009a68:	61fb      	str	r3, [r7, #28]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	695b      	ldr	r3, [r3, #20]
 8009a70:	61fb      	str	r3, [r7, #28]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	61fb      	str	r3, [r7, #28]
 8009a7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a8a:	601a      	str	r2, [r3, #0]
 8009a8c:	e16c      	b.n	8009d68 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	d11b      	bne.n	8009ace <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009aa4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ab4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	61bb      	str	r3, [r7, #24]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	695b      	ldr	r3, [r3, #20]
 8009ac0:	61bb      	str	r3, [r7, #24]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	61bb      	str	r3, [r7, #24]
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	e14c      	b.n	8009d68 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009adc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ade:	2300      	movs	r3, #0
 8009ae0:	617b      	str	r3, [r7, #20]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	695b      	ldr	r3, [r3, #20]
 8009ae8:	617b      	str	r3, [r7, #20]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	699b      	ldr	r3, [r3, #24]
 8009af0:	617b      	str	r3, [r7, #20]
 8009af2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009af4:	e138      	b.n	8009d68 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009afa:	2b03      	cmp	r3, #3
 8009afc:	f200 80f1 	bhi.w	8009ce2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d123      	bne.n	8009b50 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f002 f8ad 	bl	800bc6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e139      	b.n	8009d90 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	691a      	ldr	r2, [r3, #16]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b26:	b2d2      	uxtb	r2, r2
 8009b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2e:	1c5a      	adds	r2, r3, #1
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	3b01      	subs	r3, #1
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b4e:	e10b      	b.n	8009d68 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d14e      	bne.n	8009bf6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5e:	2200      	movs	r2, #0
 8009b60:	4906      	ldr	r1, [pc, #24]	; (8009b7c <HAL_I2C_Master_Receive+0x22c>)
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f001 fef8 	bl	800b958 <I2C_WaitOnFlagUntilTimeout>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d008      	beq.n	8009b80 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e10e      	b.n	8009d90 <HAL_I2C_Master_Receive+0x440>
 8009b72:	bf00      	nop
 8009b74:	00100002 	.word	0x00100002
 8009b78:	ffff0000 	.word	0xffff0000
 8009b7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	691a      	ldr	r2, [r3, #16]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9a:	b2d2      	uxtb	r2, r2
 8009b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba2:	1c5a      	adds	r2, r3, #1
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bac:	3b01      	subs	r3, #1
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	691a      	ldr	r2, [r3, #16]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bcc:	b2d2      	uxtb	r2, r2
 8009bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd4:	1c5a      	adds	r2, r3, #1
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bde:	3b01      	subs	r3, #1
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	3b01      	subs	r3, #1
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009bf4:	e0b8      	b.n	8009d68 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	4966      	ldr	r1, [pc, #408]	; (8009d98 <HAL_I2C_Master_Receive+0x448>)
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f001 fea9 	bl	800b958 <I2C_WaitOnFlagUntilTimeout>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d001      	beq.n	8009c10 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e0bf      	b.n	8009d90 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	691a      	ldr	r2, [r3, #16]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2a:	b2d2      	uxtb	r2, r2
 8009c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c32:	1c5a      	adds	r2, r3, #1
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c58:	2200      	movs	r2, #0
 8009c5a:	494f      	ldr	r1, [pc, #316]	; (8009d98 <HAL_I2C_Master_Receive+0x448>)
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f001 fe7b 	bl	800b958 <I2C_WaitOnFlagUntilTimeout>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e091      	b.n	8009d90 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	691a      	ldr	r2, [r3, #16]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c86:	b2d2      	uxtb	r2, r2
 8009c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	1c5a      	adds	r2, r3, #1
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	691a      	ldr	r2, [r3, #16]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb8:	b2d2      	uxtb	r2, r2
 8009cba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc0:	1c5a      	adds	r2, r3, #1
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ce0:	e042      	b.n	8009d68 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ce4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f001 ffc0 	bl	800bc6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d001      	beq.n	8009cf6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e04c      	b.n	8009d90 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	691a      	ldr	r2, [r3, #16]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d00:	b2d2      	uxtb	r2, r2
 8009d02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d08:	1c5a      	adds	r2, r3, #1
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d12:	3b01      	subs	r3, #1
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	3b01      	subs	r3, #1
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	f003 0304 	and.w	r3, r3, #4
 8009d32:	2b04      	cmp	r3, #4
 8009d34:	d118      	bne.n	8009d68 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	691a      	ldr	r2, [r3, #16]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d40:	b2d2      	uxtb	r2, r2
 8009d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	1c5a      	adds	r2, r3, #1
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d52:	3b01      	subs	r3, #1
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	3b01      	subs	r3, #1
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f47f aec2 	bne.w	8009af6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2220      	movs	r2, #32
 8009d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	e000      	b.n	8009d90 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009d8e:	2302      	movs	r3, #2
  }
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3728      	adds	r7, #40	; 0x28
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	00010004 	.word	0x00010004

08009d9c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b088      	sub	sp, #32
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8009da4:	2300      	movs	r3, #0
 8009da6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009dbc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dc4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
 8009dc8:	2b10      	cmp	r3, #16
 8009dca:	d003      	beq.n	8009dd4 <HAL_I2C_EV_IRQHandler+0x38>
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
 8009dce:	2b40      	cmp	r3, #64	; 0x40
 8009dd0:	f040 80c1 	bne.w	8009f56 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	695b      	ldr	r3, [r3, #20]
 8009de2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d10d      	bne.n	8009e0a <HAL_I2C_EV_IRQHandler+0x6e>
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009df4:	d003      	beq.n	8009dfe <HAL_I2C_EV_IRQHandler+0x62>
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009dfc:	d101      	bne.n	8009e02 <HAL_I2C_EV_IRQHandler+0x66>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e000      	b.n	8009e04 <HAL_I2C_EV_IRQHandler+0x68>
 8009e02:	2300      	movs	r3, #0
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	f000 8132 	beq.w	800a06e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	f003 0301 	and.w	r3, r3, #1
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d00c      	beq.n	8009e2e <HAL_I2C_EV_IRQHandler+0x92>
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	0a5b      	lsrs	r3, r3, #9
 8009e18:	f003 0301 	and.w	r3, r3, #1
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d006      	beq.n	8009e2e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f001 ffa8 	bl	800bd76 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fd83 	bl	800a932 <I2C_Master_SB>
 8009e2c:	e092      	b.n	8009f54 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	08db      	lsrs	r3, r3, #3
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d009      	beq.n	8009e4e <HAL_I2C_EV_IRQHandler+0xb2>
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	0a5b      	lsrs	r3, r3, #9
 8009e3e:	f003 0301 	and.w	r3, r3, #1
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d003      	beq.n	8009e4e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fdf9 	bl	800aa3e <I2C_Master_ADD10>
 8009e4c:	e082      	b.n	8009f54 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	085b      	lsrs	r3, r3, #1
 8009e52:	f003 0301 	and.w	r3, r3, #1
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d009      	beq.n	8009e6e <HAL_I2C_EV_IRQHandler+0xd2>
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	0a5b      	lsrs	r3, r3, #9
 8009e5e:	f003 0301 	and.w	r3, r3, #1
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d003      	beq.n	8009e6e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fe13 	bl	800aa92 <I2C_Master_ADDR>
 8009e6c:	e072      	b.n	8009f54 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	089b      	lsrs	r3, r3, #2
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d03b      	beq.n	8009ef2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e88:	f000 80f3 	beq.w	800a072 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	09db      	lsrs	r3, r3, #7
 8009e90:	f003 0301 	and.w	r3, r3, #1
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00f      	beq.n	8009eb8 <HAL_I2C_EV_IRQHandler+0x11c>
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	0a9b      	lsrs	r3, r3, #10
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d009      	beq.n	8009eb8 <HAL_I2C_EV_IRQHandler+0x11c>
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	089b      	lsrs	r3, r3, #2
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d103      	bne.n	8009eb8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f9f3 	bl	800a29c <I2C_MasterTransmit_TXE>
 8009eb6:	e04d      	b.n	8009f54 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	089b      	lsrs	r3, r3, #2
 8009ebc:	f003 0301 	and.w	r3, r3, #1
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f000 80d6 	beq.w	800a072 <HAL_I2C_EV_IRQHandler+0x2d6>
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	0a5b      	lsrs	r3, r3, #9
 8009eca:	f003 0301 	and.w	r3, r3, #1
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	f000 80cf 	beq.w	800a072 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009ed4:	7bbb      	ldrb	r3, [r7, #14]
 8009ed6:	2b21      	cmp	r3, #33	; 0x21
 8009ed8:	d103      	bne.n	8009ee2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fa7a 	bl	800a3d4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009ee0:	e0c7      	b.n	800a072 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8009ee2:	7bfb      	ldrb	r3, [r7, #15]
 8009ee4:	2b40      	cmp	r3, #64	; 0x40
 8009ee6:	f040 80c4 	bne.w	800a072 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fae8 	bl	800a4c0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009ef0:	e0bf      	b.n	800a072 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f00:	f000 80b7 	beq.w	800a072 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	099b      	lsrs	r3, r3, #6
 8009f08:	f003 0301 	and.w	r3, r3, #1
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00f      	beq.n	8009f30 <HAL_I2C_EV_IRQHandler+0x194>
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	0a9b      	lsrs	r3, r3, #10
 8009f14:	f003 0301 	and.w	r3, r3, #1
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d009      	beq.n	8009f30 <HAL_I2C_EV_IRQHandler+0x194>
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	089b      	lsrs	r3, r3, #2
 8009f20:	f003 0301 	and.w	r3, r3, #1
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d103      	bne.n	8009f30 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 fb5d 	bl	800a5e8 <I2C_MasterReceive_RXNE>
 8009f2e:	e011      	b.n	8009f54 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	089b      	lsrs	r3, r3, #2
 8009f34:	f003 0301 	and.w	r3, r3, #1
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f000 809a 	beq.w	800a072 <HAL_I2C_EV_IRQHandler+0x2d6>
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	0a5b      	lsrs	r3, r3, #9
 8009f42:	f003 0301 	and.w	r3, r3, #1
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f000 8093 	beq.w	800a072 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fc06 	bl	800a75e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009f52:	e08e      	b.n	800a072 <HAL_I2C_EV_IRQHandler+0x2d6>
 8009f54:	e08d      	b.n	800a072 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d004      	beq.n	8009f68 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	695b      	ldr	r3, [r3, #20]
 8009f64:	61fb      	str	r3, [r7, #28]
 8009f66:	e007      	b.n	8009f78 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	699b      	ldr	r3, [r3, #24]
 8009f6e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	695b      	ldr	r3, [r3, #20]
 8009f76:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	085b      	lsrs	r3, r3, #1
 8009f7c:	f003 0301 	and.w	r3, r3, #1
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d012      	beq.n	8009faa <HAL_I2C_EV_IRQHandler+0x20e>
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	0a5b      	lsrs	r3, r3, #9
 8009f88:	f003 0301 	and.w	r3, r3, #1
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00c      	beq.n	8009faa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d003      	beq.n	8009fa0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	699b      	ldr	r3, [r3, #24]
 8009f9e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8009fa0:	69b9      	ldr	r1, [r7, #24]
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 ffc4 	bl	800af30 <I2C_Slave_ADDR>
 8009fa8:	e066      	b.n	800a078 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	091b      	lsrs	r3, r3, #4
 8009fae:	f003 0301 	and.w	r3, r3, #1
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d009      	beq.n	8009fca <HAL_I2C_EV_IRQHandler+0x22e>
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	0a5b      	lsrs	r3, r3, #9
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d003      	beq.n	8009fca <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fffe 	bl	800afc4 <I2C_Slave_STOPF>
 8009fc8:	e056      	b.n	800a078 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009fca:	7bbb      	ldrb	r3, [r7, #14]
 8009fcc:	2b21      	cmp	r3, #33	; 0x21
 8009fce:	d002      	beq.n	8009fd6 <HAL_I2C_EV_IRQHandler+0x23a>
 8009fd0:	7bbb      	ldrb	r3, [r7, #14]
 8009fd2:	2b29      	cmp	r3, #41	; 0x29
 8009fd4:	d125      	bne.n	800a022 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	09db      	lsrs	r3, r3, #7
 8009fda:	f003 0301 	and.w	r3, r3, #1
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00f      	beq.n	800a002 <HAL_I2C_EV_IRQHandler+0x266>
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	0a9b      	lsrs	r3, r3, #10
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d009      	beq.n	800a002 <HAL_I2C_EV_IRQHandler+0x266>
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	089b      	lsrs	r3, r3, #2
 8009ff2:	f003 0301 	and.w	r3, r3, #1
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d103      	bne.n	800a002 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 feda 	bl	800adb4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a000:	e039      	b.n	800a076 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	089b      	lsrs	r3, r3, #2
 800a006:	f003 0301 	and.w	r3, r3, #1
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d033      	beq.n	800a076 <HAL_I2C_EV_IRQHandler+0x2da>
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	0a5b      	lsrs	r3, r3, #9
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	2b00      	cmp	r3, #0
 800a018:	d02d      	beq.n	800a076 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 ff07 	bl	800ae2e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a020:	e029      	b.n	800a076 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	099b      	lsrs	r3, r3, #6
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00f      	beq.n	800a04e <HAL_I2C_EV_IRQHandler+0x2b2>
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	0a9b      	lsrs	r3, r3, #10
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	2b00      	cmp	r3, #0
 800a038:	d009      	beq.n	800a04e <HAL_I2C_EV_IRQHandler+0x2b2>
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	089b      	lsrs	r3, r3, #2
 800a03e:	f003 0301 	and.w	r3, r3, #1
 800a042:	2b00      	cmp	r3, #0
 800a044:	d103      	bne.n	800a04e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 ff12 	bl	800ae70 <I2C_SlaveReceive_RXNE>
 800a04c:	e014      	b.n	800a078 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	089b      	lsrs	r3, r3, #2
 800a052:	f003 0301 	and.w	r3, r3, #1
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00e      	beq.n	800a078 <HAL_I2C_EV_IRQHandler+0x2dc>
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	0a5b      	lsrs	r3, r3, #9
 800a05e:	f003 0301 	and.w	r3, r3, #1
 800a062:	2b00      	cmp	r3, #0
 800a064:	d008      	beq.n	800a078 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 ff40 	bl	800aeec <I2C_SlaveReceive_BTF>
 800a06c:	e004      	b.n	800a078 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800a06e:	bf00      	nop
 800a070:	e002      	b.n	800a078 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a072:	bf00      	nop
 800a074:	e000      	b.n	800a078 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a076:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800a078:	3720      	adds	r7, #32
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b08a      	sub	sp, #40	; 0x28
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800a096:	2300      	movs	r3, #0
 800a098:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0a0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	0a1b      	lsrs	r3, r3, #8
 800a0a6:	f003 0301 	and.w	r3, r3, #1
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00e      	beq.n	800a0cc <HAL_I2C_ER_IRQHandler+0x4e>
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	0a1b      	lsrs	r3, r3, #8
 800a0b2:	f003 0301 	and.w	r3, r3, #1
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d008      	beq.n	800a0cc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0bc:	f043 0301 	orr.w	r3, r3, #1
 800a0c0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a0ca:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	0a5b      	lsrs	r3, r3, #9
 800a0d0:	f003 0301 	and.w	r3, r3, #1
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00e      	beq.n	800a0f6 <HAL_I2C_ER_IRQHandler+0x78>
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	0a1b      	lsrs	r3, r3, #8
 800a0dc:	f003 0301 	and.w	r3, r3, #1
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d008      	beq.n	800a0f6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e6:	f043 0302 	orr.w	r3, r3, #2
 800a0ea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800a0f4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a0f6:	6a3b      	ldr	r3, [r7, #32]
 800a0f8:	0a9b      	lsrs	r3, r3, #10
 800a0fa:	f003 0301 	and.w	r3, r3, #1
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d03f      	beq.n	800a182 <HAL_I2C_ER_IRQHandler+0x104>
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	0a1b      	lsrs	r3, r3, #8
 800a106:	f003 0301 	and.w	r3, r3, #1
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d039      	beq.n	800a182 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800a10e:	7efb      	ldrb	r3, [r7, #27]
 800a110:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a116:	b29b      	uxth	r3, r3
 800a118:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a120:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a126:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800a128:	7ebb      	ldrb	r3, [r7, #26]
 800a12a:	2b20      	cmp	r3, #32
 800a12c:	d112      	bne.n	800a154 <HAL_I2C_ER_IRQHandler+0xd6>
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10f      	bne.n	800a154 <HAL_I2C_ER_IRQHandler+0xd6>
 800a134:	7cfb      	ldrb	r3, [r7, #19]
 800a136:	2b21      	cmp	r3, #33	; 0x21
 800a138:	d008      	beq.n	800a14c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800a13a:	7cfb      	ldrb	r3, [r7, #19]
 800a13c:	2b29      	cmp	r3, #41	; 0x29
 800a13e:	d005      	beq.n	800a14c <HAL_I2C_ER_IRQHandler+0xce>
 800a140:	7cfb      	ldrb	r3, [r7, #19]
 800a142:	2b28      	cmp	r3, #40	; 0x28
 800a144:	d106      	bne.n	800a154 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2b21      	cmp	r3, #33	; 0x21
 800a14a:	d103      	bne.n	800a154 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f001 f869 	bl	800b224 <I2C_Slave_AF>
 800a152:	e016      	b.n	800a182 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a15c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	f043 0304 	orr.w	r3, r3, #4
 800a164:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a166:	7efb      	ldrb	r3, [r7, #27]
 800a168:	2b10      	cmp	r3, #16
 800a16a:	d002      	beq.n	800a172 <HAL_I2C_ER_IRQHandler+0xf4>
 800a16c:	7efb      	ldrb	r3, [r7, #27]
 800a16e:	2b40      	cmp	r3, #64	; 0x40
 800a170:	d107      	bne.n	800a182 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a180:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a182:	6a3b      	ldr	r3, [r7, #32]
 800a184:	0adb      	lsrs	r3, r3, #11
 800a186:	f003 0301 	and.w	r3, r3, #1
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00e      	beq.n	800a1ac <HAL_I2C_ER_IRQHandler+0x12e>
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	0a1b      	lsrs	r3, r3, #8
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	2b00      	cmp	r3, #0
 800a198:	d008      	beq.n	800a1ac <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19c:	f043 0308 	orr.w	r3, r3, #8
 800a1a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800a1aa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d008      	beq.n	800a1c4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	431a      	orrs	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f001 f8a0 	bl	800b304 <I2C_ITError>
  }
}
 800a1c4:	bf00      	nop
 800a1c6:	3728      	adds	r7, #40	; 0x28
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	70fb      	strb	r3, [r7, #3]
 800a228:	4613      	mov	r3, r2
 800a22a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a22c:	bf00      	nop
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800a240:	bf00      	nop
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a268:	bf00      	nop
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a27c:	bf00      	nop
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d150      	bne.n	800a364 <I2C_MasterTransmit_TXE+0xc8>
 800a2c2:	7bfb      	ldrb	r3, [r7, #15]
 800a2c4:	2b21      	cmp	r3, #33	; 0x21
 800a2c6:	d14d      	bne.n	800a364 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	2b08      	cmp	r3, #8
 800a2cc:	d01d      	beq.n	800a30a <I2C_MasterTransmit_TXE+0x6e>
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	2b20      	cmp	r3, #32
 800a2d2:	d01a      	beq.n	800a30a <I2C_MasterTransmit_TXE+0x6e>
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a2da:	d016      	beq.n	800a30a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	685a      	ldr	r2, [r3, #4]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a2ea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2211      	movs	r2, #17
 800a2f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2220      	movs	r2, #32
 800a2fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f7ff ff62 	bl	800a1cc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a308:	e060      	b.n	800a3cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	685a      	ldr	r2, [r3, #4]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a318:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a328:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2220      	movs	r2, #32
 800a334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	2b40      	cmp	r3, #64	; 0x40
 800a342:	d107      	bne.n	800a354 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f7ff ff7d 	bl	800a24c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a352:	e03b      	b.n	800a3cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7ff ff35 	bl	800a1cc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a362:	e033      	b.n	800a3cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800a364:	7bfb      	ldrb	r3, [r7, #15]
 800a366:	2b21      	cmp	r3, #33	; 0x21
 800a368:	d005      	beq.n	800a376 <I2C_MasterTransmit_TXE+0xda>
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
 800a36c:	2b40      	cmp	r3, #64	; 0x40
 800a36e:	d12d      	bne.n	800a3cc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800a370:	7bfb      	ldrb	r3, [r7, #15]
 800a372:	2b22      	cmp	r3, #34	; 0x22
 800a374:	d12a      	bne.n	800a3cc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d108      	bne.n	800a392 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	685a      	ldr	r2, [r3, #4]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a38e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a390:	e01c      	b.n	800a3cc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b40      	cmp	r3, #64	; 0x40
 800a39c:	d103      	bne.n	800a3a6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f88e 	bl	800a4c0 <I2C_MemoryTransmit_TXE_BTF>
}
 800a3a4:	e012      	b.n	800a3cc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3aa:	781a      	ldrb	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b6:	1c5a      	adds	r2, r3, #1
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	b29a      	uxth	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a3ca:	e7ff      	b.n	800a3cc <I2C_MasterTransmit_TXE+0x130>
 800a3cc:	bf00      	nop
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	2b21      	cmp	r3, #33	; 0x21
 800a3ec:	d164      	bne.n	800a4b8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d012      	beq.n	800a41e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fc:	781a      	ldrb	r2, [r3, #0]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a408:	1c5a      	adds	r2, r3, #1
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a412:	b29b      	uxth	r3, r3
 800a414:	3b01      	subs	r3, #1
 800a416:	b29a      	uxth	r2, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800a41c:	e04c      	b.n	800a4b8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2b08      	cmp	r3, #8
 800a422:	d01d      	beq.n	800a460 <I2C_MasterTransmit_BTF+0x8c>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2b20      	cmp	r3, #32
 800a428:	d01a      	beq.n	800a460 <I2C_MasterTransmit_BTF+0x8c>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a430:	d016      	beq.n	800a460 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	685a      	ldr	r2, [r3, #4]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a440:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2211      	movs	r2, #17
 800a446:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2220      	movs	r2, #32
 800a454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f7ff feb7 	bl	800a1cc <HAL_I2C_MasterTxCpltCallback>
}
 800a45e:	e02b      	b.n	800a4b8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	685a      	ldr	r2, [r3, #4]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a46e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a47e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2220      	movs	r2, #32
 800a48a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b40      	cmp	r3, #64	; 0x40
 800a498:	d107      	bne.n	800a4aa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7ff fed2 	bl	800a24c <HAL_I2C_MemTxCpltCallback>
}
 800a4a8:	e006      	b.n	800a4b8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7ff fe8a 	bl	800a1cc <HAL_I2C_MasterTxCpltCallback>
}
 800a4b8:	bf00      	nop
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d11d      	bne.n	800a514 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d10b      	bne.n	800a4f8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4e4:	b2da      	uxtb	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4f0:	1c9a      	adds	r2, r3, #2
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800a4f6:	e073      	b.n	800a5e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	121b      	asrs	r3, r3, #8
 800a500:	b2da      	uxtb	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a50c:	1c5a      	adds	r2, r3, #1
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a512:	e065      	b.n	800a5e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d10b      	bne.n	800a534 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a520:	b2da      	uxtb	r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a52c:	1c5a      	adds	r2, r3, #1
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a532:	e055      	b.n	800a5e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d151      	bne.n	800a5e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800a53c:	7bfb      	ldrb	r3, [r7, #15]
 800a53e:	2b22      	cmp	r3, #34	; 0x22
 800a540:	d10d      	bne.n	800a55e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a550:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a556:	1c5a      	adds	r2, r3, #1
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a55c:	e040      	b.n	800a5e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a562:	b29b      	uxth	r3, r3
 800a564:	2b00      	cmp	r3, #0
 800a566:	d015      	beq.n	800a594 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800a568:	7bfb      	ldrb	r3, [r7, #15]
 800a56a:	2b21      	cmp	r3, #33	; 0x21
 800a56c:	d112      	bne.n	800a594 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a572:	781a      	ldrb	r2, [r3, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57e:	1c5a      	adds	r2, r3, #1
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a588:	b29b      	uxth	r3, r3
 800a58a:	3b01      	subs	r3, #1
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a592:	e025      	b.n	800a5e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a598:	b29b      	uxth	r3, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d120      	bne.n	800a5e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800a59e:	7bfb      	ldrb	r3, [r7, #15]
 800a5a0:	2b21      	cmp	r3, #33	; 0x21
 800a5a2:	d11d      	bne.n	800a5e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	685a      	ldr	r2, [r3, #4]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a5b2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2220      	movs	r2, #32
 800a5ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7ff fe36 	bl	800a24c <HAL_I2C_MemTxCpltCallback>
}
 800a5e0:	bf00      	nop
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	2b22      	cmp	r3, #34	; 0x22
 800a5fa:	f040 80ac 	bne.w	800a756 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a602:	b29b      	uxth	r3, r3
 800a604:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2b03      	cmp	r3, #3
 800a60a:	d921      	bls.n	800a650 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	691a      	ldr	r2, [r3, #16]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	b2d2      	uxtb	r2, r2
 800a618:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61e:	1c5a      	adds	r2, r3, #1
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a628:	b29b      	uxth	r3, r3
 800a62a:	3b01      	subs	r3, #1
 800a62c:	b29a      	uxth	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a636:	b29b      	uxth	r3, r3
 800a638:	2b03      	cmp	r3, #3
 800a63a:	f040 808c 	bne.w	800a756 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a64c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800a64e:	e082      	b.n	800a756 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a654:	2b02      	cmp	r3, #2
 800a656:	d075      	beq.n	800a744 <I2C_MasterReceive_RXNE+0x15c>
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d002      	beq.n	800a664 <I2C_MasterReceive_RXNE+0x7c>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d16f      	bne.n	800a744 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f001 facf 	bl	800bc08 <I2C_WaitOnSTOPRequestThroughIT>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d142      	bne.n	800a6f6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a67e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	685a      	ldr	r2, [r3, #4]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a68e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	691a      	ldr	r2, [r3, #16]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69a:	b2d2      	uxtb	r2, r2
 800a69c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a2:	1c5a      	adds	r2, r3, #1
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2220      	movs	r2, #32
 800a6ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	2b40      	cmp	r3, #64	; 0x40
 800a6c8:	d10a      	bne.n	800a6e0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7ff fdc1 	bl	800a260 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a6de:	e03a      	b.n	800a756 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2212      	movs	r2, #18
 800a6ec:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7ff fd76 	bl	800a1e0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a6f4:	e02f      	b.n	800a756 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a704:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	691a      	ldr	r2, [r3, #16]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a710:	b2d2      	uxtb	r2, r2
 800a712:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a718:	1c5a      	adds	r2, r3, #1
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a722:	b29b      	uxth	r3, r3
 800a724:	3b01      	subs	r3, #1
 800a726:	b29a      	uxth	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2220      	movs	r2, #32
 800a730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f7ff fd99 	bl	800a274 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a742:	e008      	b.n	800a756 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	685a      	ldr	r2, [r3, #4]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a752:	605a      	str	r2, [r3, #4]
}
 800a754:	e7ff      	b.n	800a756 <I2C_MasterReceive_RXNE+0x16e>
 800a756:	bf00      	nop
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b084      	sub	sp, #16
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a770:	b29b      	uxth	r3, r3
 800a772:	2b04      	cmp	r3, #4
 800a774:	d11b      	bne.n	800a7ae <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	685a      	ldr	r2, [r3, #4]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a784:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	691a      	ldr	r2, [r3, #16]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a790:	b2d2      	uxtb	r2, r2
 800a792:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a798:	1c5a      	adds	r2, r3, #1
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800a7ac:	e0bd      	b.n	800a92a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	2b03      	cmp	r3, #3
 800a7b6:	d129      	bne.n	800a80c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	685a      	ldr	r2, [r3, #4]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7c6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2b04      	cmp	r3, #4
 800a7cc:	d00a      	beq.n	800a7e4 <I2C_MasterReceive_BTF+0x86>
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d007      	beq.n	800a7e4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7e2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	691a      	ldr	r2, [r3, #16]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ee:	b2d2      	uxtb	r2, r2
 800a7f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f6:	1c5a      	adds	r2, r3, #1
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a800:	b29b      	uxth	r3, r3
 800a802:	3b01      	subs	r3, #1
 800a804:	b29a      	uxth	r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a80a:	e08e      	b.n	800a92a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a810:	b29b      	uxth	r3, r3
 800a812:	2b02      	cmp	r3, #2
 800a814:	d176      	bne.n	800a904 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d002      	beq.n	800a822 <I2C_MasterReceive_BTF+0xc4>
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2b10      	cmp	r3, #16
 800a820:	d108      	bne.n	800a834 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a830:	601a      	str	r2, [r3, #0]
 800a832:	e019      	b.n	800a868 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2b04      	cmp	r3, #4
 800a838:	d002      	beq.n	800a840 <I2C_MasterReceive_BTF+0xe2>
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d108      	bne.n	800a852 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	e00a      	b.n	800a868 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2b10      	cmp	r3, #16
 800a856:	d007      	beq.n	800a868 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a866:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	691a      	ldr	r2, [r3, #16]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a872:	b2d2      	uxtb	r2, r2
 800a874:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87a:	1c5a      	adds	r2, r3, #1
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a884:	b29b      	uxth	r3, r3
 800a886:	3b01      	subs	r3, #1
 800a888:	b29a      	uxth	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	691a      	ldr	r2, [r3, #16]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a898:	b2d2      	uxtb	r2, r2
 800a89a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a0:	1c5a      	adds	r2, r3, #1
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	685a      	ldr	r2, [r3, #4]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a8c2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2220      	movs	r2, #32
 800a8c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	2b40      	cmp	r3, #64	; 0x40
 800a8d6:	d10a      	bne.n	800a8ee <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7ff fcba 	bl	800a260 <HAL_I2C_MemRxCpltCallback>
}
 800a8ec:	e01d      	b.n	800a92a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2212      	movs	r2, #18
 800a8fa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f7ff fc6f 	bl	800a1e0 <HAL_I2C_MasterRxCpltCallback>
}
 800a902:	e012      	b.n	800a92a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	691a      	ldr	r2, [r3, #16]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90e:	b2d2      	uxtb	r2, r2
 800a910:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a916:	1c5a      	adds	r2, r3, #1
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a920:	b29b      	uxth	r3, r3
 800a922:	3b01      	subs	r3, #1
 800a924:	b29a      	uxth	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a92a:	bf00      	nop
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2b40      	cmp	r3, #64	; 0x40
 800a944:	d117      	bne.n	800a976 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d109      	bne.n	800a962 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a952:	b2db      	uxtb	r3, r3
 800a954:	461a      	mov	r2, r3
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a95e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800a960:	e067      	b.n	800aa32 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a966:	b2db      	uxtb	r3, r3
 800a968:	f043 0301 	orr.w	r3, r3, #1
 800a96c:	b2da      	uxtb	r2, r3
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	611a      	str	r2, [r3, #16]
}
 800a974:	e05d      	b.n	800aa32 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a97e:	d133      	bne.n	800a9e8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a986:	b2db      	uxtb	r3, r3
 800a988:	2b21      	cmp	r3, #33	; 0x21
 800a98a:	d109      	bne.n	800a9a0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a990:	b2db      	uxtb	r3, r3
 800a992:	461a      	mov	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a99c:	611a      	str	r2, [r3, #16]
 800a99e:	e008      	b.n	800a9b2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	f043 0301 	orr.w	r3, r3, #1
 800a9aa:	b2da      	uxtb	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d004      	beq.n	800a9c4 <I2C_Master_SB+0x92>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d108      	bne.n	800a9d6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d032      	beq.n	800aa32 <I2C_Master_SB+0x100>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d02d      	beq.n	800aa32 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	685a      	ldr	r2, [r3, #4]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9e4:	605a      	str	r2, [r3, #4]
}
 800a9e6:	e024      	b.n	800aa32 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d10e      	bne.n	800aa0e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	11db      	asrs	r3, r3, #7
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	f003 0306 	and.w	r3, r3, #6
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	f063 030f 	orn	r3, r3, #15
 800aa04:	b2da      	uxtb	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	611a      	str	r2, [r3, #16]
}
 800aa0c:	e011      	b.n	800aa32 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d10d      	bne.n	800aa32 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	11db      	asrs	r3, r3, #7
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	f003 0306 	and.w	r3, r3, #6
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	f063 030e 	orn	r3, r3, #14
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	611a      	str	r2, [r3, #16]
}
 800aa32:	bf00      	nop
 800aa34:	370c      	adds	r7, #12
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b083      	sub	sp, #12
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa4a:	b2da      	uxtb	r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d004      	beq.n	800aa64 <I2C_Master_ADD10+0x26>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d108      	bne.n	800aa76 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d00c      	beq.n	800aa86 <I2C_Master_ADD10+0x48>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d007      	beq.n	800aa86 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa84:	605a      	str	r2, [r3, #4]
  }
}
 800aa86:	bf00      	nop
 800aa88:	370c      	adds	r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr

0800aa92 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800aa92:	b480      	push	{r7}
 800aa94:	b091      	sub	sp, #68	; 0x44
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aaa0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaae:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b22      	cmp	r3, #34	; 0x22
 800aaba:	f040 8169 	bne.w	800ad90 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d10f      	bne.n	800aae6 <I2C_Master_ADDR+0x54>
 800aac6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aaca:	2b40      	cmp	r3, #64	; 0x40
 800aacc:	d10b      	bne.n	800aae6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aace:	2300      	movs	r3, #0
 800aad0:	633b      	str	r3, [r7, #48]	; 0x30
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	695b      	ldr	r3, [r3, #20]
 800aad8:	633b      	str	r3, [r7, #48]	; 0x30
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	633b      	str	r3, [r7, #48]	; 0x30
 800aae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae4:	e160      	b.n	800ada8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d11d      	bne.n	800ab2a <I2C_Master_ADDR+0x98>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aaf6:	d118      	bne.n	800ab2a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aaf8:	2300      	movs	r3, #0
 800aafa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	695b      	ldr	r3, [r3, #20]
 800ab02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	699b      	ldr	r3, [r3, #24]
 800ab0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab1c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab22:	1c5a      	adds	r2, r3, #1
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	651a      	str	r2, [r3, #80]	; 0x50
 800ab28:	e13e      	b.n	800ada8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d113      	bne.n	800ab5c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab34:	2300      	movs	r3, #0
 800ab36:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	695b      	ldr	r3, [r3, #20]
 800ab3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	699b      	ldr	r3, [r3, #24]
 800ab46:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab58:	601a      	str	r2, [r3, #0]
 800ab5a:	e115      	b.n	800ad88 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	f040 808a 	bne.w	800ac7c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800ab68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ab6e:	d137      	bne.n	800abe0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab7e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab8e:	d113      	bne.n	800abb8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab9e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aba0:	2300      	movs	r3, #0
 800aba2:	627b      	str	r3, [r7, #36]	; 0x24
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	695b      	ldr	r3, [r3, #20]
 800abaa:	627b      	str	r3, [r7, #36]	; 0x24
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	627b      	str	r3, [r7, #36]	; 0x24
 800abb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb6:	e0e7      	b.n	800ad88 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800abb8:	2300      	movs	r3, #0
 800abba:	623b      	str	r3, [r7, #32]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	695b      	ldr	r3, [r3, #20]
 800abc2:	623b      	str	r3, [r7, #32]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	699b      	ldr	r3, [r3, #24]
 800abca:	623b      	str	r3, [r7, #32]
 800abcc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abdc:	601a      	str	r2, [r3, #0]
 800abde:	e0d3      	b.n	800ad88 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800abe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe2:	2b08      	cmp	r3, #8
 800abe4:	d02e      	beq.n	800ac44 <I2C_Master_ADDR+0x1b2>
 800abe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe8:	2b20      	cmp	r3, #32
 800abea:	d02b      	beq.n	800ac44 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800abec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abee:	2b12      	cmp	r3, #18
 800abf0:	d102      	bne.n	800abf8 <I2C_Master_ADDR+0x166>
 800abf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d125      	bne.n	800ac44 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800abf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfa:	2b04      	cmp	r3, #4
 800abfc:	d00e      	beq.n	800ac1c <I2C_Master_ADDR+0x18a>
 800abfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d00b      	beq.n	800ac1c <I2C_Master_ADDR+0x18a>
 800ac04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac06:	2b10      	cmp	r3, #16
 800ac08:	d008      	beq.n	800ac1c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac18:	601a      	str	r2, [r3, #0]
 800ac1a:	e007      	b.n	800ac2c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ac2a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	61fb      	str	r3, [r7, #28]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	695b      	ldr	r3, [r3, #20]
 800ac36:	61fb      	str	r3, [r7, #28]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	61fb      	str	r3, [r7, #28]
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	e0a1      	b.n	800ad88 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac52:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac54:	2300      	movs	r3, #0
 800ac56:	61bb      	str	r3, [r7, #24]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	695b      	ldr	r3, [r3, #20]
 800ac5e:	61bb      	str	r3, [r7, #24]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	699b      	ldr	r3, [r3, #24]
 800ac66:	61bb      	str	r3, [r7, #24]
 800ac68:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac78:	601a      	str	r2, [r3, #0]
 800ac7a:	e085      	b.n	800ad88 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	2b02      	cmp	r3, #2
 800ac84:	d14d      	bne.n	800ad22 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800ac86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac88:	2b04      	cmp	r3, #4
 800ac8a:	d016      	beq.n	800acba <I2C_Master_ADDR+0x228>
 800ac8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	d013      	beq.n	800acba <I2C_Master_ADDR+0x228>
 800ac92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac94:	2b10      	cmp	r3, #16
 800ac96:	d010      	beq.n	800acba <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aca6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800acb6:	601a      	str	r2, [r3, #0]
 800acb8:	e007      	b.n	800acca <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800acc8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acd8:	d117      	bne.n	800ad0a <I2C_Master_ADDR+0x278>
 800acda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ace0:	d00b      	beq.n	800acfa <I2C_Master_ADDR+0x268>
 800ace2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d008      	beq.n	800acfa <I2C_Master_ADDR+0x268>
 800ace8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acea:	2b08      	cmp	r3, #8
 800acec:	d005      	beq.n	800acfa <I2C_Master_ADDR+0x268>
 800acee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf0:	2b10      	cmp	r3, #16
 800acf2:	d002      	beq.n	800acfa <I2C_Master_ADDR+0x268>
 800acf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf6:	2b20      	cmp	r3, #32
 800acf8:	d107      	bne.n	800ad0a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	685a      	ldr	r2, [r3, #4]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ad08:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	617b      	str	r3, [r7, #20]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	695b      	ldr	r3, [r3, #20]
 800ad14:	617b      	str	r3, [r7, #20]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	617b      	str	r3, [r7, #20]
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	e032      	b.n	800ad88 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ad30:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad40:	d117      	bne.n	800ad72 <I2C_Master_ADDR+0x2e0>
 800ad42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ad48:	d00b      	beq.n	800ad62 <I2C_Master_ADDR+0x2d0>
 800ad4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d008      	beq.n	800ad62 <I2C_Master_ADDR+0x2d0>
 800ad50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad52:	2b08      	cmp	r3, #8
 800ad54:	d005      	beq.n	800ad62 <I2C_Master_ADDR+0x2d0>
 800ad56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad58:	2b10      	cmp	r3, #16
 800ad5a:	d002      	beq.n	800ad62 <I2C_Master_ADDR+0x2d0>
 800ad5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5e:	2b20      	cmp	r3, #32
 800ad60:	d107      	bne.n	800ad72 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	685a      	ldr	r2, [r3, #4]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ad70:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad72:	2300      	movs	r3, #0
 800ad74:	613b      	str	r3, [r7, #16]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	695b      	ldr	r3, [r3, #20]
 800ad7c:	613b      	str	r3, [r7, #16]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	699b      	ldr	r3, [r3, #24]
 800ad84:	613b      	str	r3, [r7, #16]
 800ad86:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800ad8e:	e00b      	b.n	800ada8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad90:	2300      	movs	r3, #0
 800ad92:	60fb      	str	r3, [r7, #12]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	695b      	ldr	r3, [r3, #20]
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	699b      	ldr	r3, [r3, #24]
 800ada2:	60fb      	str	r3, [r7, #12]
 800ada4:	68fb      	ldr	r3, [r7, #12]
}
 800ada6:	e7ff      	b.n	800ada8 <I2C_Master_ADDR+0x316>
 800ada8:	bf00      	nop
 800adaa:	3744      	adds	r7, #68	; 0x44
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adc2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adc8:	b29b      	uxth	r3, r3
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d02b      	beq.n	800ae26 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add2:	781a      	ldrb	r2, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adde:	1c5a      	adds	r2, r3, #1
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ade8:	b29b      	uxth	r3, r3
 800adea:	3b01      	subs	r3, #1
 800adec:	b29a      	uxth	r2, r3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d114      	bne.n	800ae26 <I2C_SlaveTransmit_TXE+0x72>
 800adfc:	7bfb      	ldrb	r3, [r7, #15]
 800adfe:	2b29      	cmp	r3, #41	; 0x29
 800ae00:	d111      	bne.n	800ae26 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	685a      	ldr	r2, [r3, #4]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae10:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2221      	movs	r2, #33	; 0x21
 800ae16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2228      	movs	r2, #40	; 0x28
 800ae1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f7ff f9e7 	bl	800a1f4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800ae26:	bf00      	nop
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ae2e:	b480      	push	{r7}
 800ae30:	b083      	sub	sp, #12
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d011      	beq.n	800ae64 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae44:	781a      	ldrb	r2, [r3, #0]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae50:	1c5a      	adds	r2, r3, #1
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae7e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d02c      	beq.n	800aee4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	691a      	ldr	r2, [r3, #16]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae94:	b2d2      	uxtb	r2, r2
 800ae96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9c:	1c5a      	adds	r2, r3, #1
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d114      	bne.n	800aee4 <I2C_SlaveReceive_RXNE+0x74>
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
 800aebc:	2b2a      	cmp	r3, #42	; 0x2a
 800aebe:	d111      	bne.n	800aee4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	685a      	ldr	r2, [r3, #4]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aece:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2222      	movs	r2, #34	; 0x22
 800aed4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2228      	movs	r2, #40	; 0x28
 800aeda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f7ff f992 	bl	800a208 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800aee4:	bf00      	nop
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d012      	beq.n	800af24 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	691a      	ldr	r2, [r3, #16]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af08:	b2d2      	uxtb	r2, r2
 800af0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af10:	1c5a      	adds	r2, r3, #1
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	3b01      	subs	r3, #1
 800af1e:	b29a      	uxth	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800af24:	bf00      	nop
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800af3a:	2300      	movs	r3, #0
 800af3c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af44:	b2db      	uxtb	r3, r3
 800af46:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800af4a:	2b28      	cmp	r3, #40	; 0x28
 800af4c:	d127      	bne.n	800af9e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	685a      	ldr	r2, [r3, #4]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af5c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	089b      	lsrs	r3, r3, #2
 800af62:	f003 0301 	and.w	r3, r3, #1
 800af66:	2b00      	cmp	r3, #0
 800af68:	d101      	bne.n	800af6e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800af6a:	2301      	movs	r3, #1
 800af6c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	09db      	lsrs	r3, r3, #7
 800af72:	f003 0301 	and.w	r3, r3, #1
 800af76:	2b00      	cmp	r3, #0
 800af78:	d103      	bne.n	800af82 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	81bb      	strh	r3, [r7, #12]
 800af80:	e002      	b.n	800af88 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	699b      	ldr	r3, [r3, #24]
 800af86:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800af90:	89ba      	ldrh	r2, [r7, #12]
 800af92:	7bfb      	ldrb	r3, [r7, #15]
 800af94:	4619      	mov	r1, r3
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff f940 	bl	800a21c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800af9c:	e00e      	b.n	800afbc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af9e:	2300      	movs	r3, #0
 800afa0:	60bb      	str	r3, [r7, #8]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	695b      	ldr	r3, [r3, #20]
 800afa8:	60bb      	str	r3, [r7, #8]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	699b      	ldr	r3, [r3, #24]
 800afb0:	60bb      	str	r3, [r7, #8]
 800afb2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800afbc:	bf00      	nop
 800afbe:	3710      	adds	r7, #16
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afd2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	685a      	ldr	r2, [r3, #4]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800afe2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800afe4:	2300      	movs	r3, #0
 800afe6:	60bb      	str	r3, [r7, #8]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	695b      	ldr	r3, [r3, #20]
 800afee:	60bb      	str	r3, [r7, #8]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f042 0201 	orr.w	r2, r2, #1
 800affe:	601a      	str	r2, [r3, #0]
 800b000:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b010:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b01c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b020:	d172      	bne.n	800b108 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b022:	7bfb      	ldrb	r3, [r7, #15]
 800b024:	2b22      	cmp	r3, #34	; 0x22
 800b026:	d002      	beq.n	800b02e <I2C_Slave_STOPF+0x6a>
 800b028:	7bfb      	ldrb	r3, [r7, #15]
 800b02a:	2b2a      	cmp	r3, #42	; 0x2a
 800b02c:	d135      	bne.n	800b09a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	b29a      	uxth	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b040:	b29b      	uxth	r3, r3
 800b042:	2b00      	cmp	r3, #0
 800b044:	d005      	beq.n	800b052 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b04a:	f043 0204 	orr.w	r2, r3, #4
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	685a      	ldr	r2, [r3, #4]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b060:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b066:	4618      	mov	r0, r3
 800b068:	f7fd fe88 	bl	8008d7c <HAL_DMA_GetState>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d049      	beq.n	800b106 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b076:	4a69      	ldr	r2, [pc, #420]	; (800b21c <I2C_Slave_STOPF+0x258>)
 800b078:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fd fcd0 	bl	8008a24 <HAL_DMA_Abort_IT>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d03d      	beq.n	800b106 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b08e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b094:	4610      	mov	r0, r2
 800b096:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b098:	e035      	b.n	800b106 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	b29a      	uxth	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d005      	beq.n	800b0be <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b6:	f043 0204 	orr.w	r2, r3, #4
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	685a      	ldr	r2, [r3, #4]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b0cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7fd fe52 	bl	8008d7c <HAL_DMA_GetState>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d014      	beq.n	800b108 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0e2:	4a4e      	ldr	r2, [pc, #312]	; (800b21c <I2C_Slave_STOPF+0x258>)
 800b0e4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fd fc9a 	bl	8008a24 <HAL_DMA_Abort_IT>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d008      	beq.n	800b108 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b100:	4610      	mov	r0, r2
 800b102:	4798      	blx	r3
 800b104:	e000      	b.n	800b108 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b106:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d03e      	beq.n	800b190 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	695b      	ldr	r3, [r3, #20]
 800b118:	f003 0304 	and.w	r3, r3, #4
 800b11c:	2b04      	cmp	r3, #4
 800b11e:	d112      	bne.n	800b146 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	691a      	ldr	r2, [r3, #16]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12a:	b2d2      	uxtb	r2, r2
 800b12c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b132:	1c5a      	adds	r2, r3, #1
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	3b01      	subs	r3, #1
 800b140:	b29a      	uxth	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	695b      	ldr	r3, [r3, #20]
 800b14c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b150:	2b40      	cmp	r3, #64	; 0x40
 800b152:	d112      	bne.n	800b17a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	691a      	ldr	r2, [r3, #16]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15e:	b2d2      	uxtb	r2, r2
 800b160:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b166:	1c5a      	adds	r2, r3, #1
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b170:	b29b      	uxth	r3, r3
 800b172:	3b01      	subs	r3, #1
 800b174:	b29a      	uxth	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b17e:	b29b      	uxth	r3, r3
 800b180:	2b00      	cmp	r3, #0
 800b182:	d005      	beq.n	800b190 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b188:	f043 0204 	orr.w	r2, r3, #4
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b194:	2b00      	cmp	r3, #0
 800b196:	d003      	beq.n	800b1a0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f8b3 	bl	800b304 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800b19e:	e039      	b.n	800b214 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b1a0:	7bfb      	ldrb	r3, [r7, #15]
 800b1a2:	2b2a      	cmp	r3, #42	; 0x2a
 800b1a4:	d109      	bne.n	800b1ba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2228      	movs	r2, #40	; 0x28
 800b1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f7ff f827 	bl	800a208 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	2b28      	cmp	r3, #40	; 0x28
 800b1c4:	d111      	bne.n	800b1ea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a15      	ldr	r2, [pc, #84]	; (800b220 <I2C_Slave_STOPF+0x25c>)
 800b1ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f7ff f828 	bl	800a238 <HAL_I2C_ListenCpltCallback>
}
 800b1e8:	e014      	b.n	800b214 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ee:	2b22      	cmp	r3, #34	; 0x22
 800b1f0:	d002      	beq.n	800b1f8 <I2C_Slave_STOPF+0x234>
 800b1f2:	7bfb      	ldrb	r3, [r7, #15]
 800b1f4:	2b22      	cmp	r3, #34	; 0x22
 800b1f6:	d10d      	bne.n	800b214 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2220      	movs	r2, #32
 800b202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7fe fffa 	bl	800a208 <HAL_I2C_SlaveRxCpltCallback>
}
 800b214:	bf00      	nop
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	0800b809 	.word	0x0800b809
 800b220:	ffff0000 	.word	0xffff0000

0800b224 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b232:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b238:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	2b08      	cmp	r3, #8
 800b23e:	d002      	beq.n	800b246 <I2C_Slave_AF+0x22>
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	2b20      	cmp	r3, #32
 800b244:	d129      	bne.n	800b29a <I2C_Slave_AF+0x76>
 800b246:	7bfb      	ldrb	r3, [r7, #15]
 800b248:	2b28      	cmp	r3, #40	; 0x28
 800b24a:	d126      	bne.n	800b29a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a2c      	ldr	r2, [pc, #176]	; (800b300 <I2C_Slave_AF+0xdc>)
 800b250:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	685a      	ldr	r2, [r3, #4]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b260:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b26a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b27a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2220      	movs	r2, #32
 800b286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f7fe ffd0 	bl	800a238 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800b298:	e02e      	b.n	800b2f8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800b29a:	7bfb      	ldrb	r3, [r7, #15]
 800b29c:	2b21      	cmp	r3, #33	; 0x21
 800b29e:	d126      	bne.n	800b2ee <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a17      	ldr	r2, [pc, #92]	; (800b300 <I2C_Slave_AF+0xdc>)
 800b2a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2221      	movs	r2, #33	; 0x21
 800b2aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2220      	movs	r2, #32
 800b2b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	685a      	ldr	r2, [r3, #4]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b2ca:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b2d4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2e4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7fe ff84 	bl	800a1f4 <HAL_I2C_SlaveTxCpltCallback>
}
 800b2ec:	e004      	b.n	800b2f8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b2f6:	615a      	str	r2, [r3, #20]
}
 800b2f8:	bf00      	nop
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	ffff0000 	.word	0xffff0000

0800b304 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b312:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b31a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b31c:	7bbb      	ldrb	r3, [r7, #14]
 800b31e:	2b10      	cmp	r3, #16
 800b320:	d002      	beq.n	800b328 <I2C_ITError+0x24>
 800b322:	7bbb      	ldrb	r3, [r7, #14]
 800b324:	2b40      	cmp	r3, #64	; 0x40
 800b326:	d10a      	bne.n	800b33e <I2C_ITError+0x3a>
 800b328:	7bfb      	ldrb	r3, [r7, #15]
 800b32a:	2b22      	cmp	r3, #34	; 0x22
 800b32c:	d107      	bne.n	800b33e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b33c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b33e:	7bfb      	ldrb	r3, [r7, #15]
 800b340:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b344:	2b28      	cmp	r3, #40	; 0x28
 800b346:	d107      	bne.n	800b358 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2228      	movs	r2, #40	; 0x28
 800b352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b356:	e015      	b.n	800b384 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b366:	d00a      	beq.n	800b37e <I2C_ITError+0x7a>
 800b368:	7bfb      	ldrb	r3, [r7, #15]
 800b36a:	2b60      	cmp	r3, #96	; 0x60
 800b36c:	d007      	beq.n	800b37e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2220      	movs	r2, #32
 800b372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b38e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b392:	d162      	bne.n	800b45a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	685a      	ldr	r2, [r3, #4]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b3a2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d020      	beq.n	800b3f4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3b6:	4a6a      	ldr	r2, [pc, #424]	; (800b560 <I2C_ITError+0x25c>)
 800b3b8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7fd fb30 	bl	8008a24 <HAL_DMA_Abort_IT>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f000 8089 	beq.w	800b4de <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f022 0201 	bic.w	r2, r2, #1
 800b3da:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2220      	movs	r2, #32
 800b3e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b3ee:	4610      	mov	r0, r2
 800b3f0:	4798      	blx	r3
 800b3f2:	e074      	b.n	800b4de <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f8:	4a59      	ldr	r2, [pc, #356]	; (800b560 <I2C_ITError+0x25c>)
 800b3fa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b400:	4618      	mov	r0, r3
 800b402:	f7fd fb0f 	bl	8008a24 <HAL_DMA_Abort_IT>
 800b406:	4603      	mov	r3, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d068      	beq.n	800b4de <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	695b      	ldr	r3, [r3, #20]
 800b412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b416:	2b40      	cmp	r3, #64	; 0x40
 800b418:	d10b      	bne.n	800b432 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	691a      	ldr	r2, [r3, #16]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b424:	b2d2      	uxtb	r2, r2
 800b426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42c:	1c5a      	adds	r2, r3, #1
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f022 0201 	bic.w	r2, r2, #1
 800b440:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2220      	movs	r2, #32
 800b446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b454:	4610      	mov	r0, r2
 800b456:	4798      	blx	r3
 800b458:	e041      	b.n	800b4de <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b460:	b2db      	uxtb	r3, r3
 800b462:	2b60      	cmp	r3, #96	; 0x60
 800b464:	d125      	bne.n	800b4b2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2220      	movs	r2, #32
 800b46a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	695b      	ldr	r3, [r3, #20]
 800b47a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b47e:	2b40      	cmp	r3, #64	; 0x40
 800b480:	d10b      	bne.n	800b49a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	691a      	ldr	r2, [r3, #16]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48c:	b2d2      	uxtb	r2, r2
 800b48e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b494:	1c5a      	adds	r2, r3, #1
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f022 0201 	bic.w	r2, r2, #1
 800b4a8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f7fe feec 	bl	800a288 <HAL_I2C_AbortCpltCallback>
 800b4b0:	e015      	b.n	800b4de <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	695b      	ldr	r3, [r3, #20]
 800b4b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4bc:	2b40      	cmp	r3, #64	; 0x40
 800b4be:	d10b      	bne.n	800b4d8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	691a      	ldr	r2, [r3, #16]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ca:	b2d2      	uxtb	r2, r2
 800b4cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d2:	1c5a      	adds	r2, r3, #1
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f7fe fecb 	bl	800a274 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4e2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	f003 0301 	and.w	r3, r3, #1
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10e      	bne.n	800b50c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d109      	bne.n	800b50c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d104      	bne.n	800b50c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d007      	beq.n	800b51c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	685a      	ldr	r2, [r3, #4]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b51a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b522:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b528:	f003 0304 	and.w	r3, r3, #4
 800b52c:	2b04      	cmp	r3, #4
 800b52e:	d113      	bne.n	800b558 <I2C_ITError+0x254>
 800b530:	7bfb      	ldrb	r3, [r7, #15]
 800b532:	2b28      	cmp	r3, #40	; 0x28
 800b534:	d110      	bne.n	800b558 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4a0a      	ldr	r2, [pc, #40]	; (800b564 <I2C_ITError+0x260>)
 800b53a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2220      	movs	r2, #32
 800b546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f7fe fe70 	bl	800a238 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b558:	bf00      	nop
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	0800b809 	.word	0x0800b809
 800b564:	ffff0000 	.word	0xffff0000

0800b568 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b088      	sub	sp, #32
 800b56c:	af02      	add	r7, sp, #8
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	607a      	str	r2, [r7, #4]
 800b572:	603b      	str	r3, [r7, #0]
 800b574:	460b      	mov	r3, r1
 800b576:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	2b08      	cmp	r3, #8
 800b582:	d006      	beq.n	800b592 <I2C_MasterRequestWrite+0x2a>
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	2b01      	cmp	r3, #1
 800b588:	d003      	beq.n	800b592 <I2C_MasterRequestWrite+0x2a>
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b590:	d108      	bne.n	800b5a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5a0:	601a      	str	r2, [r3, #0]
 800b5a2:	e00b      	b.n	800b5bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a8:	2b12      	cmp	r3, #18
 800b5aa:	d107      	bne.n	800b5bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	9300      	str	r3, [sp, #0]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f000 f9c5 	bl	800b958 <I2C_WaitOnFlagUntilTimeout>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00d      	beq.n	800b5f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5e2:	d103      	bne.n	800b5ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b5ec:	2303      	movs	r3, #3
 800b5ee:	e035      	b.n	800b65c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5f8:	d108      	bne.n	800b60c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b5fa:	897b      	ldrh	r3, [r7, #10]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	461a      	mov	r2, r3
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b608:	611a      	str	r2, [r3, #16]
 800b60a:	e01b      	b.n	800b644 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b60c:	897b      	ldrh	r3, [r7, #10]
 800b60e:	11db      	asrs	r3, r3, #7
 800b610:	b2db      	uxtb	r3, r3
 800b612:	f003 0306 	and.w	r3, r3, #6
 800b616:	b2db      	uxtb	r3, r3
 800b618:	f063 030f 	orn	r3, r3, #15
 800b61c:	b2da      	uxtb	r2, r3
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	490e      	ldr	r1, [pc, #56]	; (800b664 <I2C_MasterRequestWrite+0xfc>)
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	f000 f9eb 	bl	800ba06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d001      	beq.n	800b63a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	e010      	b.n	800b65c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b63a:	897b      	ldrh	r3, [r7, #10]
 800b63c:	b2da      	uxtb	r2, r3
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	4907      	ldr	r1, [pc, #28]	; (800b668 <I2C_MasterRequestWrite+0x100>)
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f000 f9db 	bl	800ba06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d001      	beq.n	800b65a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	e000      	b.n	800b65c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3718      	adds	r7, #24
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	00010008 	.word	0x00010008
 800b668:	00010002 	.word	0x00010002

0800b66c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b088      	sub	sp, #32
 800b670:	af02      	add	r7, sp, #8
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	607a      	str	r2, [r7, #4]
 800b676:	603b      	str	r3, [r7, #0]
 800b678:	460b      	mov	r3, r1
 800b67a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b680:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b690:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	2b08      	cmp	r3, #8
 800b696:	d006      	beq.n	800b6a6 <I2C_MasterRequestRead+0x3a>
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d003      	beq.n	800b6a6 <I2C_MasterRequestRead+0x3a>
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b6a4:	d108      	bne.n	800b6b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6b4:	601a      	str	r2, [r3, #0]
 800b6b6:	e00b      	b.n	800b6d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6bc:	2b11      	cmp	r3, #17
 800b6be:	d107      	bne.n	800b6d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f000 f93b 	bl	800b958 <I2C_WaitOnFlagUntilTimeout>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d00d      	beq.n	800b704 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6f6:	d103      	bne.n	800b700 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b700:	2303      	movs	r3, #3
 800b702:	e079      	b.n	800b7f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	691b      	ldr	r3, [r3, #16]
 800b708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b70c:	d108      	bne.n	800b720 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b70e:	897b      	ldrh	r3, [r7, #10]
 800b710:	b2db      	uxtb	r3, r3
 800b712:	f043 0301 	orr.w	r3, r3, #1
 800b716:	b2da      	uxtb	r2, r3
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	611a      	str	r2, [r3, #16]
 800b71e:	e05f      	b.n	800b7e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b720:	897b      	ldrh	r3, [r7, #10]
 800b722:	11db      	asrs	r3, r3, #7
 800b724:	b2db      	uxtb	r3, r3
 800b726:	f003 0306 	and.w	r3, r3, #6
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	f063 030f 	orn	r3, r3, #15
 800b730:	b2da      	uxtb	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	4930      	ldr	r1, [pc, #192]	; (800b800 <I2C_MasterRequestRead+0x194>)
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f000 f961 	bl	800ba06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d001      	beq.n	800b74e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b74a:	2301      	movs	r3, #1
 800b74c:	e054      	b.n	800b7f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b74e:	897b      	ldrh	r3, [r7, #10]
 800b750:	b2da      	uxtb	r2, r3
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	4929      	ldr	r1, [pc, #164]	; (800b804 <I2C_MasterRequestRead+0x198>)
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f000 f951 	bl	800ba06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d001      	beq.n	800b76e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b76a:	2301      	movs	r3, #1
 800b76c:	e044      	b.n	800b7f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b76e:	2300      	movs	r3, #0
 800b770:	613b      	str	r3, [r7, #16]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	695b      	ldr	r3, [r3, #20]
 800b778:	613b      	str	r3, [r7, #16]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	699b      	ldr	r3, [r3, #24]
 800b780:	613b      	str	r3, [r7, #16]
 800b782:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b792:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	9300      	str	r3, [sp, #0]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f000 f8d9 	bl	800b958 <I2C_WaitOnFlagUntilTimeout>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d00d      	beq.n	800b7c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7ba:	d103      	bne.n	800b7c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	e017      	b.n	800b7f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800b7c8:	897b      	ldrh	r3, [r7, #10]
 800b7ca:	11db      	asrs	r3, r3, #7
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	f003 0306 	and.w	r3, r3, #6
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	f063 030e 	orn	r3, r3, #14
 800b7d8:	b2da      	uxtb	r2, r3
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	4907      	ldr	r1, [pc, #28]	; (800b804 <I2C_MasterRequestRead+0x198>)
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f000 f90d 	bl	800ba06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d001      	beq.n	800b7f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e000      	b.n	800b7f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800b7f6:	2300      	movs	r3, #0
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3718      	adds	r7, #24
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	00010008 	.word	0x00010008
 800b804:	00010002 	.word	0x00010002

0800b808 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b086      	sub	sp, #24
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b810:	2300      	movs	r3, #0
 800b812:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b818:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b820:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b822:	4b4b      	ldr	r3, [pc, #300]	; (800b950 <I2C_DMAAbort+0x148>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	08db      	lsrs	r3, r3, #3
 800b828:	4a4a      	ldr	r2, [pc, #296]	; (800b954 <I2C_DMAAbort+0x14c>)
 800b82a:	fba2 2303 	umull	r2, r3, r2, r3
 800b82e:	0a1a      	lsrs	r2, r3, #8
 800b830:	4613      	mov	r3, r2
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	4413      	add	r3, r2
 800b836:	00da      	lsls	r2, r3, #3
 800b838:	1ad3      	subs	r3, r2, r3
 800b83a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d106      	bne.n	800b850 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b846:	f043 0220 	orr.w	r2, r3, #32
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800b84e:	e00a      	b.n	800b866 <I2C_DMAAbort+0x5e>
    }
    count--;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	3b01      	subs	r3, #1
 800b854:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b864:	d0ea      	beq.n	800b83c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d003      	beq.n	800b876 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b872:	2200      	movs	r2, #0
 800b874:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d003      	beq.n	800b886 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b882:	2200      	movs	r2, #0
 800b884:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b894:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	2200      	movs	r2, #0
 800b89a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d003      	beq.n	800b8ac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d003      	beq.n	800b8bc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f022 0201 	bic.w	r2, r2, #1
 800b8ca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	2b60      	cmp	r3, #96	; 0x60
 800b8d6:	d10e      	bne.n	800b8f6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	2220      	movs	r2, #32
 800b8dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b8ee:	6978      	ldr	r0, [r7, #20]
 800b8f0:	f7fe fcca 	bl	800a288 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b8f4:	e027      	b.n	800b946 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b8f6:	7cfb      	ldrb	r3, [r7, #19]
 800b8f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b8fc:	2b28      	cmp	r3, #40	; 0x28
 800b8fe:	d117      	bne.n	800b930 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f042 0201 	orr.w	r2, r2, #1
 800b90e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b91e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	2200      	movs	r2, #0
 800b924:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	2228      	movs	r2, #40	; 0x28
 800b92a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b92e:	e007      	b.n	800b940 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	2220      	movs	r2, #32
 800b934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800b940:	6978      	ldr	r0, [r7, #20]
 800b942:	f7fe fc97 	bl	800a274 <HAL_I2C_ErrorCallback>
}
 800b946:	bf00      	nop
 800b948:	3718      	adds	r7, #24
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	2000001c 	.word	0x2000001c
 800b954:	14f8b589 	.word	0x14f8b589

0800b958 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	603b      	str	r3, [r7, #0]
 800b964:	4613      	mov	r3, r2
 800b966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b968:	e025      	b.n	800b9b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b970:	d021      	beq.n	800b9b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b972:	f7fc fa9d 	bl	8007eb0 <HAL_GetTick>
 800b976:	4602      	mov	r2, r0
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	1ad3      	subs	r3, r2, r3
 800b97c:	683a      	ldr	r2, [r7, #0]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d302      	bcc.n	800b988 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d116      	bne.n	800b9b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2200      	movs	r2, #0
 800b98c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2220      	movs	r2, #32
 800b992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2200      	movs	r2, #0
 800b99a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a2:	f043 0220 	orr.w	r2, r3, #32
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e023      	b.n	800b9fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	0c1b      	lsrs	r3, r3, #16
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d10d      	bne.n	800b9dc <I2C_WaitOnFlagUntilTimeout+0x84>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	695b      	ldr	r3, [r3, #20]
 800b9c6:	43da      	mvns	r2, r3
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	4013      	ands	r3, r2
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	bf0c      	ite	eq
 800b9d2:	2301      	moveq	r3, #1
 800b9d4:	2300      	movne	r3, #0
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	461a      	mov	r2, r3
 800b9da:	e00c      	b.n	800b9f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	699b      	ldr	r3, [r3, #24]
 800b9e2:	43da      	mvns	r2, r3
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	4013      	ands	r3, r2
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	bf0c      	ite	eq
 800b9ee:	2301      	moveq	r3, #1
 800b9f0:	2300      	movne	r3, #0
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	79fb      	ldrb	r3, [r7, #7]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d0b6      	beq.n	800b96a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b084      	sub	sp, #16
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	60f8      	str	r0, [r7, #12]
 800ba0e:	60b9      	str	r1, [r7, #8]
 800ba10:	607a      	str	r2, [r7, #4]
 800ba12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ba14:	e051      	b.n	800baba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	695b      	ldr	r3, [r3, #20]
 800ba1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba24:	d123      	bne.n	800ba6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ba3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2200      	movs	r2, #0
 800ba44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2220      	movs	r2, #32
 800ba4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2200      	movs	r2, #0
 800ba52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5a:	f043 0204 	orr.w	r2, r3, #4
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	e046      	b.n	800bafc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba74:	d021      	beq.n	800baba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba76:	f7fc fa1b 	bl	8007eb0 <HAL_GetTick>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d302      	bcc.n	800ba8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d116      	bne.n	800baba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2220      	movs	r2, #32
 800ba96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baa6:	f043 0220 	orr.w	r2, r3, #32
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e020      	b.n	800bafc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	0c1b      	lsrs	r3, r3, #16
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d10c      	bne.n	800bade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	695b      	ldr	r3, [r3, #20]
 800baca:	43da      	mvns	r2, r3
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	4013      	ands	r3, r2
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	bf14      	ite	ne
 800bad6:	2301      	movne	r3, #1
 800bad8:	2300      	moveq	r3, #0
 800bada:	b2db      	uxtb	r3, r3
 800badc:	e00b      	b.n	800baf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	699b      	ldr	r3, [r3, #24]
 800bae4:	43da      	mvns	r2, r3
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	4013      	ands	r3, r2
 800baea:	b29b      	uxth	r3, r3
 800baec:	2b00      	cmp	r3, #0
 800baee:	bf14      	ite	ne
 800baf0:	2301      	movne	r3, #1
 800baf2:	2300      	moveq	r3, #0
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d18d      	bne.n	800ba16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bb10:	e02d      	b.n	800bb6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	f000 f900 	bl	800bd18 <I2C_IsAcknowledgeFailed>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d001      	beq.n	800bb22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e02d      	b.n	800bb7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb28:	d021      	beq.n	800bb6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb2a:	f7fc f9c1 	bl	8007eb0 <HAL_GetTick>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	1ad3      	subs	r3, r2, r3
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d302      	bcc.n	800bb40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d116      	bne.n	800bb6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2200      	movs	r2, #0
 800bb44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2220      	movs	r2, #32
 800bb4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2200      	movs	r2, #0
 800bb52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb5a:	f043 0220 	orr.w	r2, r3, #32
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	e007      	b.n	800bb7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	695b      	ldr	r3, [r3, #20]
 800bb74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb78:	2b80      	cmp	r3, #128	; 0x80
 800bb7a:	d1ca      	bne.n	800bb12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bb7c:	2300      	movs	r3, #0
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3710      	adds	r7, #16
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b084      	sub	sp, #16
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	60f8      	str	r0, [r7, #12]
 800bb8e:	60b9      	str	r1, [r7, #8]
 800bb90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bb92:	e02d      	b.n	800bbf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f000 f8bf 	bl	800bd18 <I2C_IsAcknowledgeFailed>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d001      	beq.n	800bba4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bba0:	2301      	movs	r3, #1
 800bba2:	e02d      	b.n	800bc00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbaa:	d021      	beq.n	800bbf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbac:	f7fc f980 	bl	8007eb0 <HAL_GetTick>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	1ad3      	subs	r3, r2, r3
 800bbb6:	68ba      	ldr	r2, [r7, #8]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d302      	bcc.n	800bbc2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d116      	bne.n	800bbf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2220      	movs	r2, #32
 800bbcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbdc:	f043 0220 	orr.w	r2, r3, #32
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	e007      	b.n	800bc00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	695b      	ldr	r3, [r3, #20]
 800bbf6:	f003 0304 	and.w	r3, r3, #4
 800bbfa:	2b04      	cmp	r3, #4
 800bbfc:	d1ca      	bne.n	800bb94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bbfe:	2300      	movs	r3, #0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3710      	adds	r7, #16
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc10:	2300      	movs	r3, #0
 800bc12:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800bc14:	4b13      	ldr	r3, [pc, #76]	; (800bc64 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	08db      	lsrs	r3, r3, #3
 800bc1a:	4a13      	ldr	r2, [pc, #76]	; (800bc68 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800bc1c:	fba2 2303 	umull	r2, r3, r2, r3
 800bc20:	0a1a      	lsrs	r2, r3, #8
 800bc22:	4613      	mov	r3, r2
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	4413      	add	r3, r2
 800bc28:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d107      	bne.n	800bc46 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3a:	f043 0220 	orr.w	r2, r3, #32
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	e008      	b.n	800bc58 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc54:	d0e9      	beq.n	800bc2a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3714      	adds	r7, #20
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr
 800bc64:	2000001c 	.word	0x2000001c
 800bc68:	14f8b589 	.word	0x14f8b589

0800bc6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bc78:	e042      	b.n	800bd00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	695b      	ldr	r3, [r3, #20]
 800bc80:	f003 0310 	and.w	r3, r3, #16
 800bc84:	2b10      	cmp	r3, #16
 800bc86:	d119      	bne.n	800bcbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f06f 0210 	mvn.w	r2, #16
 800bc90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2200      	movs	r2, #0
 800bc96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2220      	movs	r2, #32
 800bc9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	e029      	b.n	800bd10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcbc:	f7fc f8f8 	bl	8007eb0 <HAL_GetTick>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d302      	bcc.n	800bcd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d116      	bne.n	800bd00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2220      	movs	r2, #32
 800bcdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2200      	movs	r2, #0
 800bce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcec:	f043 0220 	orr.w	r2, r3, #32
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e007      	b.n	800bd10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	695b      	ldr	r3, [r3, #20]
 800bd06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd0a:	2b40      	cmp	r3, #64	; 0x40
 800bd0c:	d1b5      	bne.n	800bc7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bd0e:	2300      	movs	r3, #0
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3710      	adds	r7, #16
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	695b      	ldr	r3, [r3, #20]
 800bd26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd2e:	d11b      	bne.n	800bd68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bd38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2220      	movs	r2, #32
 800bd44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd54:	f043 0204 	orr.w	r2, r3, #4
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	e000      	b.n	800bd6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	370c      	adds	r7, #12
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr

0800bd76 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800bd76:	b480      	push	{r7}
 800bd78:	b083      	sub	sp, #12
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd82:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800bd86:	d103      	bne.n	800bd90 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800bd8e:	e007      	b.n	800bda0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd94:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800bd98:	d102      	bne.n	800bda0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2208      	movs	r2, #8
 800bd9e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800bda0:	bf00      	nop
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d101      	bne.n	800bdc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e0cc      	b.n	800bf5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bdc0:	4b68      	ldr	r3, [pc, #416]	; (800bf64 <HAL_RCC_ClockConfig+0x1b8>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f003 030f 	and.w	r3, r3, #15
 800bdc8:	683a      	ldr	r2, [r7, #0]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d90c      	bls.n	800bde8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdce:	4b65      	ldr	r3, [pc, #404]	; (800bf64 <HAL_RCC_ClockConfig+0x1b8>)
 800bdd0:	683a      	ldr	r2, [r7, #0]
 800bdd2:	b2d2      	uxtb	r2, r2
 800bdd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdd6:	4b63      	ldr	r3, [pc, #396]	; (800bf64 <HAL_RCC_ClockConfig+0x1b8>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f003 030f 	and.w	r3, r3, #15
 800bdde:	683a      	ldr	r2, [r7, #0]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d001      	beq.n	800bde8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bde4:	2301      	movs	r3, #1
 800bde6:	e0b8      	b.n	800bf5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f003 0302 	and.w	r3, r3, #2
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d020      	beq.n	800be36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f003 0304 	and.w	r3, r3, #4
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d005      	beq.n	800be0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800be00:	4b59      	ldr	r3, [pc, #356]	; (800bf68 <HAL_RCC_ClockConfig+0x1bc>)
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	4a58      	ldr	r2, [pc, #352]	; (800bf68 <HAL_RCC_ClockConfig+0x1bc>)
 800be06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800be0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f003 0308 	and.w	r3, r3, #8
 800be14:	2b00      	cmp	r3, #0
 800be16:	d005      	beq.n	800be24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800be18:	4b53      	ldr	r3, [pc, #332]	; (800bf68 <HAL_RCC_ClockConfig+0x1bc>)
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	4a52      	ldr	r2, [pc, #328]	; (800bf68 <HAL_RCC_ClockConfig+0x1bc>)
 800be1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800be22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800be24:	4b50      	ldr	r3, [pc, #320]	; (800bf68 <HAL_RCC_ClockConfig+0x1bc>)
 800be26:	689b      	ldr	r3, [r3, #8]
 800be28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	494d      	ldr	r1, [pc, #308]	; (800bf68 <HAL_RCC_ClockConfig+0x1bc>)
 800be32:	4313      	orrs	r3, r2
 800be34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f003 0301 	and.w	r3, r3, #1
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d044      	beq.n	800becc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	2b01      	cmp	r3, #1
 800be48:	d107      	bne.n	800be5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be4a:	4b47      	ldr	r3, [pc, #284]	; (800bf68 <HAL_RCC_ClockConfig+0x1bc>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be52:	2b00      	cmp	r3, #0
 800be54:	d119      	bne.n	800be8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800be56:	2301      	movs	r3, #1
 800be58:	e07f      	b.n	800bf5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d003      	beq.n	800be6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800be66:	2b03      	cmp	r3, #3
 800be68:	d107      	bne.n	800be7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be6a:	4b3f      	ldr	r3, [pc, #252]	; (800bf68 <HAL_RCC_ClockConfig+0x1bc>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be72:	2b00      	cmp	r3, #0
 800be74:	d109      	bne.n	800be8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800be76:	2301      	movs	r3, #1
 800be78:	e06f      	b.n	800bf5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be7a:	4b3b      	ldr	r3, [pc, #236]	; (800bf68 <HAL_RCC_ClockConfig+0x1bc>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f003 0302 	and.w	r3, r3, #2
 800be82:	2b00      	cmp	r3, #0
 800be84:	d101      	bne.n	800be8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800be86:	2301      	movs	r3, #1
 800be88:	e067      	b.n	800bf5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800be8a:	4b37      	ldr	r3, [pc, #220]	; (800bf68 <HAL_RCC_ClockConfig+0x1bc>)
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	f023 0203 	bic.w	r2, r3, #3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	4934      	ldr	r1, [pc, #208]	; (800bf68 <HAL_RCC_ClockConfig+0x1bc>)
 800be98:	4313      	orrs	r3, r2
 800be9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800be9c:	f7fc f808 	bl	8007eb0 <HAL_GetTick>
 800bea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bea2:	e00a      	b.n	800beba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bea4:	f7fc f804 	bl	8007eb0 <HAL_GetTick>
 800bea8:	4602      	mov	r2, r0
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	1ad3      	subs	r3, r2, r3
 800beae:	f241 3288 	movw	r2, #5000	; 0x1388
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d901      	bls.n	800beba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800beb6:	2303      	movs	r3, #3
 800beb8:	e04f      	b.n	800bf5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800beba:	4b2b      	ldr	r3, [pc, #172]	; (800bf68 <HAL_RCC_ClockConfig+0x1bc>)
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	f003 020c 	and.w	r2, r3, #12
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	429a      	cmp	r2, r3
 800beca:	d1eb      	bne.n	800bea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800becc:	4b25      	ldr	r3, [pc, #148]	; (800bf64 <HAL_RCC_ClockConfig+0x1b8>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f003 030f 	and.w	r3, r3, #15
 800bed4:	683a      	ldr	r2, [r7, #0]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d20c      	bcs.n	800bef4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800beda:	4b22      	ldr	r3, [pc, #136]	; (800bf64 <HAL_RCC_ClockConfig+0x1b8>)
 800bedc:	683a      	ldr	r2, [r7, #0]
 800bede:	b2d2      	uxtb	r2, r2
 800bee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bee2:	4b20      	ldr	r3, [pc, #128]	; (800bf64 <HAL_RCC_ClockConfig+0x1b8>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f003 030f 	and.w	r3, r3, #15
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	429a      	cmp	r2, r3
 800beee:	d001      	beq.n	800bef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	e032      	b.n	800bf5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f003 0304 	and.w	r3, r3, #4
 800befc:	2b00      	cmp	r3, #0
 800befe:	d008      	beq.n	800bf12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bf00:	4b19      	ldr	r3, [pc, #100]	; (800bf68 <HAL_RCC_ClockConfig+0x1bc>)
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	68db      	ldr	r3, [r3, #12]
 800bf0c:	4916      	ldr	r1, [pc, #88]	; (800bf68 <HAL_RCC_ClockConfig+0x1bc>)
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f003 0308 	and.w	r3, r3, #8
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d009      	beq.n	800bf32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bf1e:	4b12      	ldr	r3, [pc, #72]	; (800bf68 <HAL_RCC_ClockConfig+0x1bc>)
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	00db      	lsls	r3, r3, #3
 800bf2c:	490e      	ldr	r1, [pc, #56]	; (800bf68 <HAL_RCC_ClockConfig+0x1bc>)
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bf32:	f000 f855 	bl	800bfe0 <HAL_RCC_GetSysClockFreq>
 800bf36:	4602      	mov	r2, r0
 800bf38:	4b0b      	ldr	r3, [pc, #44]	; (800bf68 <HAL_RCC_ClockConfig+0x1bc>)
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	091b      	lsrs	r3, r3, #4
 800bf3e:	f003 030f 	and.w	r3, r3, #15
 800bf42:	490a      	ldr	r1, [pc, #40]	; (800bf6c <HAL_RCC_ClockConfig+0x1c0>)
 800bf44:	5ccb      	ldrb	r3, [r1, r3]
 800bf46:	fa22 f303 	lsr.w	r3, r2, r3
 800bf4a:	4a09      	ldr	r2, [pc, #36]	; (800bf70 <HAL_RCC_ClockConfig+0x1c4>)
 800bf4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800bf4e:	4b09      	ldr	r3, [pc, #36]	; (800bf74 <HAL_RCC_ClockConfig+0x1c8>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7fb ff68 	bl	8007e28 <HAL_InitTick>

  return HAL_OK;
 800bf58:	2300      	movs	r3, #0
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3710      	adds	r7, #16
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	40023c00 	.word	0x40023c00
 800bf68:	40023800 	.word	0x40023800
 800bf6c:	08014398 	.word	0x08014398
 800bf70:	2000001c 	.word	0x2000001c
 800bf74:	20000020 	.word	0x20000020

0800bf78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bf7c:	4b03      	ldr	r3, [pc, #12]	; (800bf8c <HAL_RCC_GetHCLKFreq+0x14>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	2000001c 	.word	0x2000001c

0800bf90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bf94:	f7ff fff0 	bl	800bf78 <HAL_RCC_GetHCLKFreq>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	4b05      	ldr	r3, [pc, #20]	; (800bfb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bf9c:	689b      	ldr	r3, [r3, #8]
 800bf9e:	0a9b      	lsrs	r3, r3, #10
 800bfa0:	f003 0307 	and.w	r3, r3, #7
 800bfa4:	4903      	ldr	r1, [pc, #12]	; (800bfb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bfa6:	5ccb      	ldrb	r3, [r1, r3]
 800bfa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	40023800 	.word	0x40023800
 800bfb4:	080143a8 	.word	0x080143a8

0800bfb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bfbc:	f7ff ffdc 	bl	800bf78 <HAL_RCC_GetHCLKFreq>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	4b05      	ldr	r3, [pc, #20]	; (800bfd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	0b5b      	lsrs	r3, r3, #13
 800bfc8:	f003 0307 	and.w	r3, r3, #7
 800bfcc:	4903      	ldr	r1, [pc, #12]	; (800bfdc <HAL_RCC_GetPCLK2Freq+0x24>)
 800bfce:	5ccb      	ldrb	r3, [r1, r3]
 800bfd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	40023800 	.word	0x40023800
 800bfdc:	080143a8 	.word	0x080143a8

0800bfe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bfe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfe4:	b0ae      	sub	sp, #184	; 0xb8
 800bfe6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800bfee:	2300      	movs	r3, #0
 800bff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800bff4:	2300      	movs	r3, #0
 800bff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800bffa:	2300      	movs	r3, #0
 800bffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800c000:	2300      	movs	r3, #0
 800c002:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c006:	4bcb      	ldr	r3, [pc, #812]	; (800c334 <HAL_RCC_GetSysClockFreq+0x354>)
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	f003 030c 	and.w	r3, r3, #12
 800c00e:	2b0c      	cmp	r3, #12
 800c010:	f200 8206 	bhi.w	800c420 <HAL_RCC_GetSysClockFreq+0x440>
 800c014:	a201      	add	r2, pc, #4	; (adr r2, 800c01c <HAL_RCC_GetSysClockFreq+0x3c>)
 800c016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c01a:	bf00      	nop
 800c01c:	0800c051 	.word	0x0800c051
 800c020:	0800c421 	.word	0x0800c421
 800c024:	0800c421 	.word	0x0800c421
 800c028:	0800c421 	.word	0x0800c421
 800c02c:	0800c059 	.word	0x0800c059
 800c030:	0800c421 	.word	0x0800c421
 800c034:	0800c421 	.word	0x0800c421
 800c038:	0800c421 	.word	0x0800c421
 800c03c:	0800c061 	.word	0x0800c061
 800c040:	0800c421 	.word	0x0800c421
 800c044:	0800c421 	.word	0x0800c421
 800c048:	0800c421 	.word	0x0800c421
 800c04c:	0800c251 	.word	0x0800c251
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c050:	4bb9      	ldr	r3, [pc, #740]	; (800c338 <HAL_RCC_GetSysClockFreq+0x358>)
 800c052:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800c056:	e1e7      	b.n	800c428 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c058:	4bb8      	ldr	r3, [pc, #736]	; (800c33c <HAL_RCC_GetSysClockFreq+0x35c>)
 800c05a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c05e:	e1e3      	b.n	800c428 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c060:	4bb4      	ldr	r3, [pc, #720]	; (800c334 <HAL_RCC_GetSysClockFreq+0x354>)
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c068:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c06c:	4bb1      	ldr	r3, [pc, #708]	; (800c334 <HAL_RCC_GetSysClockFreq+0x354>)
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c074:	2b00      	cmp	r3, #0
 800c076:	d071      	beq.n	800c15c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c078:	4bae      	ldr	r3, [pc, #696]	; (800c334 <HAL_RCC_GetSysClockFreq+0x354>)
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	099b      	lsrs	r3, r3, #6
 800c07e:	2200      	movs	r2, #0
 800c080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c084:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800c088:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c08c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c090:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c094:	2300      	movs	r3, #0
 800c096:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c09a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c09e:	4622      	mov	r2, r4
 800c0a0:	462b      	mov	r3, r5
 800c0a2:	f04f 0000 	mov.w	r0, #0
 800c0a6:	f04f 0100 	mov.w	r1, #0
 800c0aa:	0159      	lsls	r1, r3, #5
 800c0ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c0b0:	0150      	lsls	r0, r2, #5
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	1a51      	subs	r1, r2, r1
 800c0ba:	6439      	str	r1, [r7, #64]	; 0x40
 800c0bc:	4629      	mov	r1, r5
 800c0be:	eb63 0301 	sbc.w	r3, r3, r1
 800c0c2:	647b      	str	r3, [r7, #68]	; 0x44
 800c0c4:	f04f 0200 	mov.w	r2, #0
 800c0c8:	f04f 0300 	mov.w	r3, #0
 800c0cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800c0d0:	4649      	mov	r1, r9
 800c0d2:	018b      	lsls	r3, r1, #6
 800c0d4:	4641      	mov	r1, r8
 800c0d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c0da:	4641      	mov	r1, r8
 800c0dc:	018a      	lsls	r2, r1, #6
 800c0de:	4641      	mov	r1, r8
 800c0e0:	1a51      	subs	r1, r2, r1
 800c0e2:	63b9      	str	r1, [r7, #56]	; 0x38
 800c0e4:	4649      	mov	r1, r9
 800c0e6:	eb63 0301 	sbc.w	r3, r3, r1
 800c0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0ec:	f04f 0200 	mov.w	r2, #0
 800c0f0:	f04f 0300 	mov.w	r3, #0
 800c0f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800c0f8:	4649      	mov	r1, r9
 800c0fa:	00cb      	lsls	r3, r1, #3
 800c0fc:	4641      	mov	r1, r8
 800c0fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c102:	4641      	mov	r1, r8
 800c104:	00ca      	lsls	r2, r1, #3
 800c106:	4610      	mov	r0, r2
 800c108:	4619      	mov	r1, r3
 800c10a:	4603      	mov	r3, r0
 800c10c:	4622      	mov	r2, r4
 800c10e:	189b      	adds	r3, r3, r2
 800c110:	633b      	str	r3, [r7, #48]	; 0x30
 800c112:	462b      	mov	r3, r5
 800c114:	460a      	mov	r2, r1
 800c116:	eb42 0303 	adc.w	r3, r2, r3
 800c11a:	637b      	str	r3, [r7, #52]	; 0x34
 800c11c:	f04f 0200 	mov.w	r2, #0
 800c120:	f04f 0300 	mov.w	r3, #0
 800c124:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c128:	4629      	mov	r1, r5
 800c12a:	024b      	lsls	r3, r1, #9
 800c12c:	4621      	mov	r1, r4
 800c12e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c132:	4621      	mov	r1, r4
 800c134:	024a      	lsls	r2, r1, #9
 800c136:	4610      	mov	r0, r2
 800c138:	4619      	mov	r1, r3
 800c13a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c13e:	2200      	movs	r2, #0
 800c140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c144:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c148:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c14c:	f7f4 fc64 	bl	8000a18 <__aeabi_uldivmod>
 800c150:	4602      	mov	r2, r0
 800c152:	460b      	mov	r3, r1
 800c154:	4613      	mov	r3, r2
 800c156:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c15a:	e067      	b.n	800c22c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c15c:	4b75      	ldr	r3, [pc, #468]	; (800c334 <HAL_RCC_GetSysClockFreq+0x354>)
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	099b      	lsrs	r3, r3, #6
 800c162:	2200      	movs	r2, #0
 800c164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c168:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800c16c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c174:	67bb      	str	r3, [r7, #120]	; 0x78
 800c176:	2300      	movs	r3, #0
 800c178:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c17a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800c17e:	4622      	mov	r2, r4
 800c180:	462b      	mov	r3, r5
 800c182:	f04f 0000 	mov.w	r0, #0
 800c186:	f04f 0100 	mov.w	r1, #0
 800c18a:	0159      	lsls	r1, r3, #5
 800c18c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c190:	0150      	lsls	r0, r2, #5
 800c192:	4602      	mov	r2, r0
 800c194:	460b      	mov	r3, r1
 800c196:	4621      	mov	r1, r4
 800c198:	1a51      	subs	r1, r2, r1
 800c19a:	62b9      	str	r1, [r7, #40]	; 0x28
 800c19c:	4629      	mov	r1, r5
 800c19e:	eb63 0301 	sbc.w	r3, r3, r1
 800c1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1a4:	f04f 0200 	mov.w	r2, #0
 800c1a8:	f04f 0300 	mov.w	r3, #0
 800c1ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800c1b0:	4649      	mov	r1, r9
 800c1b2:	018b      	lsls	r3, r1, #6
 800c1b4:	4641      	mov	r1, r8
 800c1b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c1ba:	4641      	mov	r1, r8
 800c1bc:	018a      	lsls	r2, r1, #6
 800c1be:	4641      	mov	r1, r8
 800c1c0:	ebb2 0a01 	subs.w	sl, r2, r1
 800c1c4:	4649      	mov	r1, r9
 800c1c6:	eb63 0b01 	sbc.w	fp, r3, r1
 800c1ca:	f04f 0200 	mov.w	r2, #0
 800c1ce:	f04f 0300 	mov.w	r3, #0
 800c1d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c1d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c1da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c1de:	4692      	mov	sl, r2
 800c1e0:	469b      	mov	fp, r3
 800c1e2:	4623      	mov	r3, r4
 800c1e4:	eb1a 0303 	adds.w	r3, sl, r3
 800c1e8:	623b      	str	r3, [r7, #32]
 800c1ea:	462b      	mov	r3, r5
 800c1ec:	eb4b 0303 	adc.w	r3, fp, r3
 800c1f0:	627b      	str	r3, [r7, #36]	; 0x24
 800c1f2:	f04f 0200 	mov.w	r2, #0
 800c1f6:	f04f 0300 	mov.w	r3, #0
 800c1fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c1fe:	4629      	mov	r1, r5
 800c200:	028b      	lsls	r3, r1, #10
 800c202:	4621      	mov	r1, r4
 800c204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c208:	4621      	mov	r1, r4
 800c20a:	028a      	lsls	r2, r1, #10
 800c20c:	4610      	mov	r0, r2
 800c20e:	4619      	mov	r1, r3
 800c210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c214:	2200      	movs	r2, #0
 800c216:	673b      	str	r3, [r7, #112]	; 0x70
 800c218:	677a      	str	r2, [r7, #116]	; 0x74
 800c21a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c21e:	f7f4 fbfb 	bl	8000a18 <__aeabi_uldivmod>
 800c222:	4602      	mov	r2, r0
 800c224:	460b      	mov	r3, r1
 800c226:	4613      	mov	r3, r2
 800c228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c22c:	4b41      	ldr	r3, [pc, #260]	; (800c334 <HAL_RCC_GetSysClockFreq+0x354>)
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	0c1b      	lsrs	r3, r3, #16
 800c232:	f003 0303 	and.w	r3, r3, #3
 800c236:	3301      	adds	r3, #1
 800c238:	005b      	lsls	r3, r3, #1
 800c23a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800c23e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c242:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c246:	fbb2 f3f3 	udiv	r3, r2, r3
 800c24a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c24e:	e0eb      	b.n	800c428 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c250:	4b38      	ldr	r3, [pc, #224]	; (800c334 <HAL_RCC_GetSysClockFreq+0x354>)
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c258:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c25c:	4b35      	ldr	r3, [pc, #212]	; (800c334 <HAL_RCC_GetSysClockFreq+0x354>)
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c264:	2b00      	cmp	r3, #0
 800c266:	d06b      	beq.n	800c340 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c268:	4b32      	ldr	r3, [pc, #200]	; (800c334 <HAL_RCC_GetSysClockFreq+0x354>)
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	099b      	lsrs	r3, r3, #6
 800c26e:	2200      	movs	r2, #0
 800c270:	66bb      	str	r3, [r7, #104]	; 0x68
 800c272:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c27a:	663b      	str	r3, [r7, #96]	; 0x60
 800c27c:	2300      	movs	r3, #0
 800c27e:	667b      	str	r3, [r7, #100]	; 0x64
 800c280:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800c284:	4622      	mov	r2, r4
 800c286:	462b      	mov	r3, r5
 800c288:	f04f 0000 	mov.w	r0, #0
 800c28c:	f04f 0100 	mov.w	r1, #0
 800c290:	0159      	lsls	r1, r3, #5
 800c292:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c296:	0150      	lsls	r0, r2, #5
 800c298:	4602      	mov	r2, r0
 800c29a:	460b      	mov	r3, r1
 800c29c:	4621      	mov	r1, r4
 800c29e:	1a51      	subs	r1, r2, r1
 800c2a0:	61b9      	str	r1, [r7, #24]
 800c2a2:	4629      	mov	r1, r5
 800c2a4:	eb63 0301 	sbc.w	r3, r3, r1
 800c2a8:	61fb      	str	r3, [r7, #28]
 800c2aa:	f04f 0200 	mov.w	r2, #0
 800c2ae:	f04f 0300 	mov.w	r3, #0
 800c2b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800c2b6:	4659      	mov	r1, fp
 800c2b8:	018b      	lsls	r3, r1, #6
 800c2ba:	4651      	mov	r1, sl
 800c2bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c2c0:	4651      	mov	r1, sl
 800c2c2:	018a      	lsls	r2, r1, #6
 800c2c4:	4651      	mov	r1, sl
 800c2c6:	ebb2 0801 	subs.w	r8, r2, r1
 800c2ca:	4659      	mov	r1, fp
 800c2cc:	eb63 0901 	sbc.w	r9, r3, r1
 800c2d0:	f04f 0200 	mov.w	r2, #0
 800c2d4:	f04f 0300 	mov.w	r3, #0
 800c2d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c2dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c2e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c2e4:	4690      	mov	r8, r2
 800c2e6:	4699      	mov	r9, r3
 800c2e8:	4623      	mov	r3, r4
 800c2ea:	eb18 0303 	adds.w	r3, r8, r3
 800c2ee:	613b      	str	r3, [r7, #16]
 800c2f0:	462b      	mov	r3, r5
 800c2f2:	eb49 0303 	adc.w	r3, r9, r3
 800c2f6:	617b      	str	r3, [r7, #20]
 800c2f8:	f04f 0200 	mov.w	r2, #0
 800c2fc:	f04f 0300 	mov.w	r3, #0
 800c300:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c304:	4629      	mov	r1, r5
 800c306:	024b      	lsls	r3, r1, #9
 800c308:	4621      	mov	r1, r4
 800c30a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c30e:	4621      	mov	r1, r4
 800c310:	024a      	lsls	r2, r1, #9
 800c312:	4610      	mov	r0, r2
 800c314:	4619      	mov	r1, r3
 800c316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c31a:	2200      	movs	r2, #0
 800c31c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c31e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c320:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c324:	f7f4 fb78 	bl	8000a18 <__aeabi_uldivmod>
 800c328:	4602      	mov	r2, r0
 800c32a:	460b      	mov	r3, r1
 800c32c:	4613      	mov	r3, r2
 800c32e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c332:	e065      	b.n	800c400 <HAL_RCC_GetSysClockFreq+0x420>
 800c334:	40023800 	.word	0x40023800
 800c338:	00f42400 	.word	0x00f42400
 800c33c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c340:	4b3d      	ldr	r3, [pc, #244]	; (800c438 <HAL_RCC_GetSysClockFreq+0x458>)
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	099b      	lsrs	r3, r3, #6
 800c346:	2200      	movs	r2, #0
 800c348:	4618      	mov	r0, r3
 800c34a:	4611      	mov	r1, r2
 800c34c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c350:	653b      	str	r3, [r7, #80]	; 0x50
 800c352:	2300      	movs	r3, #0
 800c354:	657b      	str	r3, [r7, #84]	; 0x54
 800c356:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800c35a:	4642      	mov	r2, r8
 800c35c:	464b      	mov	r3, r9
 800c35e:	f04f 0000 	mov.w	r0, #0
 800c362:	f04f 0100 	mov.w	r1, #0
 800c366:	0159      	lsls	r1, r3, #5
 800c368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c36c:	0150      	lsls	r0, r2, #5
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	4641      	mov	r1, r8
 800c374:	1a51      	subs	r1, r2, r1
 800c376:	60b9      	str	r1, [r7, #8]
 800c378:	4649      	mov	r1, r9
 800c37a:	eb63 0301 	sbc.w	r3, r3, r1
 800c37e:	60fb      	str	r3, [r7, #12]
 800c380:	f04f 0200 	mov.w	r2, #0
 800c384:	f04f 0300 	mov.w	r3, #0
 800c388:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800c38c:	4659      	mov	r1, fp
 800c38e:	018b      	lsls	r3, r1, #6
 800c390:	4651      	mov	r1, sl
 800c392:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c396:	4651      	mov	r1, sl
 800c398:	018a      	lsls	r2, r1, #6
 800c39a:	4651      	mov	r1, sl
 800c39c:	1a54      	subs	r4, r2, r1
 800c39e:	4659      	mov	r1, fp
 800c3a0:	eb63 0501 	sbc.w	r5, r3, r1
 800c3a4:	f04f 0200 	mov.w	r2, #0
 800c3a8:	f04f 0300 	mov.w	r3, #0
 800c3ac:	00eb      	lsls	r3, r5, #3
 800c3ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c3b2:	00e2      	lsls	r2, r4, #3
 800c3b4:	4614      	mov	r4, r2
 800c3b6:	461d      	mov	r5, r3
 800c3b8:	4643      	mov	r3, r8
 800c3ba:	18e3      	adds	r3, r4, r3
 800c3bc:	603b      	str	r3, [r7, #0]
 800c3be:	464b      	mov	r3, r9
 800c3c0:	eb45 0303 	adc.w	r3, r5, r3
 800c3c4:	607b      	str	r3, [r7, #4]
 800c3c6:	f04f 0200 	mov.w	r2, #0
 800c3ca:	f04f 0300 	mov.w	r3, #0
 800c3ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c3d2:	4629      	mov	r1, r5
 800c3d4:	028b      	lsls	r3, r1, #10
 800c3d6:	4621      	mov	r1, r4
 800c3d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c3dc:	4621      	mov	r1, r4
 800c3de:	028a      	lsls	r2, r1, #10
 800c3e0:	4610      	mov	r0, r2
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3ec:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c3ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c3f2:	f7f4 fb11 	bl	8000a18 <__aeabi_uldivmod>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800c400:	4b0d      	ldr	r3, [pc, #52]	; (800c438 <HAL_RCC_GetSysClockFreq+0x458>)
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	0f1b      	lsrs	r3, r3, #28
 800c406:	f003 0307 	and.w	r3, r3, #7
 800c40a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800c40e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c412:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c416:	fbb2 f3f3 	udiv	r3, r2, r3
 800c41a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c41e:	e003      	b.n	800c428 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c420:	4b06      	ldr	r3, [pc, #24]	; (800c43c <HAL_RCC_GetSysClockFreq+0x45c>)
 800c422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c426:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c428:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	37b8      	adds	r7, #184	; 0xb8
 800c430:	46bd      	mov	sp, r7
 800c432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c436:	bf00      	nop
 800c438:	40023800 	.word	0x40023800
 800c43c:	00f42400 	.word	0x00f42400

0800c440 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b086      	sub	sp, #24
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d101      	bne.n	800c452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c44e:	2301      	movs	r3, #1
 800c450:	e28d      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f003 0301 	and.w	r3, r3, #1
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	f000 8083 	beq.w	800c566 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c460:	4b94      	ldr	r3, [pc, #592]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	f003 030c 	and.w	r3, r3, #12
 800c468:	2b04      	cmp	r3, #4
 800c46a:	d019      	beq.n	800c4a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c46c:	4b91      	ldr	r3, [pc, #580]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c474:	2b08      	cmp	r3, #8
 800c476:	d106      	bne.n	800c486 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c478:	4b8e      	ldr	r3, [pc, #568]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c484:	d00c      	beq.n	800c4a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c486:	4b8b      	ldr	r3, [pc, #556]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c48e:	2b0c      	cmp	r3, #12
 800c490:	d112      	bne.n	800c4b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c492:	4b88      	ldr	r3, [pc, #544]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c49a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c49e:	d10b      	bne.n	800c4b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c4a0:	4b84      	ldr	r3, [pc, #528]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d05b      	beq.n	800c564 <HAL_RCC_OscConfig+0x124>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d157      	bne.n	800c564 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	e25a      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4c0:	d106      	bne.n	800c4d0 <HAL_RCC_OscConfig+0x90>
 800c4c2:	4b7c      	ldr	r3, [pc, #496]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a7b      	ldr	r2, [pc, #492]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c4c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4cc:	6013      	str	r3, [r2, #0]
 800c4ce:	e01d      	b.n	800c50c <HAL_RCC_OscConfig+0xcc>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c4d8:	d10c      	bne.n	800c4f4 <HAL_RCC_OscConfig+0xb4>
 800c4da:	4b76      	ldr	r3, [pc, #472]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a75      	ldr	r2, [pc, #468]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c4e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c4e4:	6013      	str	r3, [r2, #0]
 800c4e6:	4b73      	ldr	r3, [pc, #460]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a72      	ldr	r2, [pc, #456]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c4ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4f0:	6013      	str	r3, [r2, #0]
 800c4f2:	e00b      	b.n	800c50c <HAL_RCC_OscConfig+0xcc>
 800c4f4:	4b6f      	ldr	r3, [pc, #444]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a6e      	ldr	r2, [pc, #440]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c4fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4fe:	6013      	str	r3, [r2, #0]
 800c500:	4b6c      	ldr	r3, [pc, #432]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a6b      	ldr	r2, [pc, #428]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c50a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d013      	beq.n	800c53c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c514:	f7fb fccc 	bl	8007eb0 <HAL_GetTick>
 800c518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c51a:	e008      	b.n	800c52e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c51c:	f7fb fcc8 	bl	8007eb0 <HAL_GetTick>
 800c520:	4602      	mov	r2, r0
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	1ad3      	subs	r3, r2, r3
 800c526:	2b64      	cmp	r3, #100	; 0x64
 800c528:	d901      	bls.n	800c52e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c52a:	2303      	movs	r3, #3
 800c52c:	e21f      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c52e:	4b61      	ldr	r3, [pc, #388]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c536:	2b00      	cmp	r3, #0
 800c538:	d0f0      	beq.n	800c51c <HAL_RCC_OscConfig+0xdc>
 800c53a:	e014      	b.n	800c566 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c53c:	f7fb fcb8 	bl	8007eb0 <HAL_GetTick>
 800c540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c542:	e008      	b.n	800c556 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c544:	f7fb fcb4 	bl	8007eb0 <HAL_GetTick>
 800c548:	4602      	mov	r2, r0
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	1ad3      	subs	r3, r2, r3
 800c54e:	2b64      	cmp	r3, #100	; 0x64
 800c550:	d901      	bls.n	800c556 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800c552:	2303      	movs	r3, #3
 800c554:	e20b      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c556:	4b57      	ldr	r3, [pc, #348]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d1f0      	bne.n	800c544 <HAL_RCC_OscConfig+0x104>
 800c562:	e000      	b.n	800c566 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f003 0302 	and.w	r3, r3, #2
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d06f      	beq.n	800c652 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c572:	4b50      	ldr	r3, [pc, #320]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c574:	689b      	ldr	r3, [r3, #8]
 800c576:	f003 030c 	and.w	r3, r3, #12
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d017      	beq.n	800c5ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c57e:	4b4d      	ldr	r3, [pc, #308]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c586:	2b08      	cmp	r3, #8
 800c588:	d105      	bne.n	800c596 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c58a:	4b4a      	ldr	r3, [pc, #296]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00b      	beq.n	800c5ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c596:	4b47      	ldr	r3, [pc, #284]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c59e:	2b0c      	cmp	r3, #12
 800c5a0:	d11c      	bne.n	800c5dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c5a2:	4b44      	ldr	r3, [pc, #272]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d116      	bne.n	800c5dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c5ae:	4b41      	ldr	r3, [pc, #260]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f003 0302 	and.w	r3, r3, #2
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d005      	beq.n	800c5c6 <HAL_RCC_OscConfig+0x186>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d001      	beq.n	800c5c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	e1d3      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c5c6:	4b3b      	ldr	r3, [pc, #236]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	00db      	lsls	r3, r3, #3
 800c5d4:	4937      	ldr	r1, [pc, #220]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c5da:	e03a      	b.n	800c652 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d020      	beq.n	800c626 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c5e4:	4b34      	ldr	r3, [pc, #208]	; (800c6b8 <HAL_RCC_OscConfig+0x278>)
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5ea:	f7fb fc61 	bl	8007eb0 <HAL_GetTick>
 800c5ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c5f0:	e008      	b.n	800c604 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c5f2:	f7fb fc5d 	bl	8007eb0 <HAL_GetTick>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	2b02      	cmp	r3, #2
 800c5fe:	d901      	bls.n	800c604 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800c600:	2303      	movs	r3, #3
 800c602:	e1b4      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c604:	4b2b      	ldr	r3, [pc, #172]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f003 0302 	and.w	r3, r3, #2
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d0f0      	beq.n	800c5f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c610:	4b28      	ldr	r3, [pc, #160]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	691b      	ldr	r3, [r3, #16]
 800c61c:	00db      	lsls	r3, r3, #3
 800c61e:	4925      	ldr	r1, [pc, #148]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c620:	4313      	orrs	r3, r2
 800c622:	600b      	str	r3, [r1, #0]
 800c624:	e015      	b.n	800c652 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c626:	4b24      	ldr	r3, [pc, #144]	; (800c6b8 <HAL_RCC_OscConfig+0x278>)
 800c628:	2200      	movs	r2, #0
 800c62a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c62c:	f7fb fc40 	bl	8007eb0 <HAL_GetTick>
 800c630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c632:	e008      	b.n	800c646 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c634:	f7fb fc3c 	bl	8007eb0 <HAL_GetTick>
 800c638:	4602      	mov	r2, r0
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	1ad3      	subs	r3, r2, r3
 800c63e:	2b02      	cmp	r3, #2
 800c640:	d901      	bls.n	800c646 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c642:	2303      	movs	r3, #3
 800c644:	e193      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c646:	4b1b      	ldr	r3, [pc, #108]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f003 0302 	and.w	r3, r3, #2
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d1f0      	bne.n	800c634 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f003 0308 	and.w	r3, r3, #8
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d036      	beq.n	800c6cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	695b      	ldr	r3, [r3, #20]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d016      	beq.n	800c694 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c666:	4b15      	ldr	r3, [pc, #84]	; (800c6bc <HAL_RCC_OscConfig+0x27c>)
 800c668:	2201      	movs	r2, #1
 800c66a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c66c:	f7fb fc20 	bl	8007eb0 <HAL_GetTick>
 800c670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c672:	e008      	b.n	800c686 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c674:	f7fb fc1c 	bl	8007eb0 <HAL_GetTick>
 800c678:	4602      	mov	r2, r0
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	1ad3      	subs	r3, r2, r3
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d901      	bls.n	800c686 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800c682:	2303      	movs	r3, #3
 800c684:	e173      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c686:	4b0b      	ldr	r3, [pc, #44]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c68a:	f003 0302 	and.w	r3, r3, #2
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d0f0      	beq.n	800c674 <HAL_RCC_OscConfig+0x234>
 800c692:	e01b      	b.n	800c6cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c694:	4b09      	ldr	r3, [pc, #36]	; (800c6bc <HAL_RCC_OscConfig+0x27c>)
 800c696:	2200      	movs	r2, #0
 800c698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c69a:	f7fb fc09 	bl	8007eb0 <HAL_GetTick>
 800c69e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c6a0:	e00e      	b.n	800c6c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c6a2:	f7fb fc05 	bl	8007eb0 <HAL_GetTick>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d907      	bls.n	800c6c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800c6b0:	2303      	movs	r3, #3
 800c6b2:	e15c      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
 800c6b4:	40023800 	.word	0x40023800
 800c6b8:	42470000 	.word	0x42470000
 800c6bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c6c0:	4b8a      	ldr	r3, [pc, #552]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c6c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6c4:	f003 0302 	and.w	r3, r3, #2
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1ea      	bne.n	800c6a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f003 0304 	and.w	r3, r3, #4
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f000 8097 	beq.w	800c808 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c6de:	4b83      	ldr	r3, [pc, #524]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d10f      	bne.n	800c70a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	60bb      	str	r3, [r7, #8]
 800c6ee:	4b7f      	ldr	r3, [pc, #508]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f2:	4a7e      	ldr	r2, [pc, #504]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c6f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6f8:	6413      	str	r3, [r2, #64]	; 0x40
 800c6fa:	4b7c      	ldr	r3, [pc, #496]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c702:	60bb      	str	r3, [r7, #8]
 800c704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c706:	2301      	movs	r3, #1
 800c708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c70a:	4b79      	ldr	r3, [pc, #484]	; (800c8f0 <HAL_RCC_OscConfig+0x4b0>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c712:	2b00      	cmp	r3, #0
 800c714:	d118      	bne.n	800c748 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c716:	4b76      	ldr	r3, [pc, #472]	; (800c8f0 <HAL_RCC_OscConfig+0x4b0>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a75      	ldr	r2, [pc, #468]	; (800c8f0 <HAL_RCC_OscConfig+0x4b0>)
 800c71c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c722:	f7fb fbc5 	bl	8007eb0 <HAL_GetTick>
 800c726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c728:	e008      	b.n	800c73c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c72a:	f7fb fbc1 	bl	8007eb0 <HAL_GetTick>
 800c72e:	4602      	mov	r2, r0
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	1ad3      	subs	r3, r2, r3
 800c734:	2b02      	cmp	r3, #2
 800c736:	d901      	bls.n	800c73c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800c738:	2303      	movs	r3, #3
 800c73a:	e118      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c73c:	4b6c      	ldr	r3, [pc, #432]	; (800c8f0 <HAL_RCC_OscConfig+0x4b0>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c744:	2b00      	cmp	r3, #0
 800c746:	d0f0      	beq.n	800c72a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	689b      	ldr	r3, [r3, #8]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d106      	bne.n	800c75e <HAL_RCC_OscConfig+0x31e>
 800c750:	4b66      	ldr	r3, [pc, #408]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c754:	4a65      	ldr	r2, [pc, #404]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c756:	f043 0301 	orr.w	r3, r3, #1
 800c75a:	6713      	str	r3, [r2, #112]	; 0x70
 800c75c:	e01c      	b.n	800c798 <HAL_RCC_OscConfig+0x358>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	2b05      	cmp	r3, #5
 800c764:	d10c      	bne.n	800c780 <HAL_RCC_OscConfig+0x340>
 800c766:	4b61      	ldr	r3, [pc, #388]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c76a:	4a60      	ldr	r2, [pc, #384]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c76c:	f043 0304 	orr.w	r3, r3, #4
 800c770:	6713      	str	r3, [r2, #112]	; 0x70
 800c772:	4b5e      	ldr	r3, [pc, #376]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c776:	4a5d      	ldr	r2, [pc, #372]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c778:	f043 0301 	orr.w	r3, r3, #1
 800c77c:	6713      	str	r3, [r2, #112]	; 0x70
 800c77e:	e00b      	b.n	800c798 <HAL_RCC_OscConfig+0x358>
 800c780:	4b5a      	ldr	r3, [pc, #360]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c784:	4a59      	ldr	r2, [pc, #356]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c786:	f023 0301 	bic.w	r3, r3, #1
 800c78a:	6713      	str	r3, [r2, #112]	; 0x70
 800c78c:	4b57      	ldr	r3, [pc, #348]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c78e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c790:	4a56      	ldr	r2, [pc, #344]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c792:	f023 0304 	bic.w	r3, r3, #4
 800c796:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d015      	beq.n	800c7cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7a0:	f7fb fb86 	bl	8007eb0 <HAL_GetTick>
 800c7a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c7a6:	e00a      	b.n	800c7be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c7a8:	f7fb fb82 	bl	8007eb0 <HAL_GetTick>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	1ad3      	subs	r3, r2, r3
 800c7b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d901      	bls.n	800c7be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800c7ba:	2303      	movs	r3, #3
 800c7bc:	e0d7      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c7be:	4b4b      	ldr	r3, [pc, #300]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c7c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7c2:	f003 0302 	and.w	r3, r3, #2
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d0ee      	beq.n	800c7a8 <HAL_RCC_OscConfig+0x368>
 800c7ca:	e014      	b.n	800c7f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7cc:	f7fb fb70 	bl	8007eb0 <HAL_GetTick>
 800c7d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c7d2:	e00a      	b.n	800c7ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c7d4:	f7fb fb6c 	bl	8007eb0 <HAL_GetTick>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d901      	bls.n	800c7ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c7e6:	2303      	movs	r3, #3
 800c7e8:	e0c1      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c7ea:	4b40      	ldr	r3, [pc, #256]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c7ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7ee:	f003 0302 	and.w	r3, r3, #2
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d1ee      	bne.n	800c7d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c7f6:	7dfb      	ldrb	r3, [r7, #23]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d105      	bne.n	800c808 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c7fc:	4b3b      	ldr	r3, [pc, #236]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c800:	4a3a      	ldr	r2, [pc, #232]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c806:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	699b      	ldr	r3, [r3, #24]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	f000 80ad 	beq.w	800c96c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c812:	4b36      	ldr	r3, [pc, #216]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	f003 030c 	and.w	r3, r3, #12
 800c81a:	2b08      	cmp	r3, #8
 800c81c:	d060      	beq.n	800c8e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	699b      	ldr	r3, [r3, #24]
 800c822:	2b02      	cmp	r3, #2
 800c824:	d145      	bne.n	800c8b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c826:	4b33      	ldr	r3, [pc, #204]	; (800c8f4 <HAL_RCC_OscConfig+0x4b4>)
 800c828:	2200      	movs	r2, #0
 800c82a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c82c:	f7fb fb40 	bl	8007eb0 <HAL_GetTick>
 800c830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c832:	e008      	b.n	800c846 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c834:	f7fb fb3c 	bl	8007eb0 <HAL_GetTick>
 800c838:	4602      	mov	r2, r0
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	1ad3      	subs	r3, r2, r3
 800c83e:	2b02      	cmp	r3, #2
 800c840:	d901      	bls.n	800c846 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800c842:	2303      	movs	r3, #3
 800c844:	e093      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c846:	4b29      	ldr	r3, [pc, #164]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d1f0      	bne.n	800c834 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	69da      	ldr	r2, [r3, #28]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6a1b      	ldr	r3, [r3, #32]
 800c85a:	431a      	orrs	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c860:	019b      	lsls	r3, r3, #6
 800c862:	431a      	orrs	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c868:	085b      	lsrs	r3, r3, #1
 800c86a:	3b01      	subs	r3, #1
 800c86c:	041b      	lsls	r3, r3, #16
 800c86e:	431a      	orrs	r2, r3
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c874:	061b      	lsls	r3, r3, #24
 800c876:	431a      	orrs	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c87c:	071b      	lsls	r3, r3, #28
 800c87e:	491b      	ldr	r1, [pc, #108]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c880:	4313      	orrs	r3, r2
 800c882:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c884:	4b1b      	ldr	r3, [pc, #108]	; (800c8f4 <HAL_RCC_OscConfig+0x4b4>)
 800c886:	2201      	movs	r2, #1
 800c888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c88a:	f7fb fb11 	bl	8007eb0 <HAL_GetTick>
 800c88e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c890:	e008      	b.n	800c8a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c892:	f7fb fb0d 	bl	8007eb0 <HAL_GetTick>
 800c896:	4602      	mov	r2, r0
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	1ad3      	subs	r3, r2, r3
 800c89c:	2b02      	cmp	r3, #2
 800c89e:	d901      	bls.n	800c8a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800c8a0:	2303      	movs	r3, #3
 800c8a2:	e064      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c8a4:	4b11      	ldr	r3, [pc, #68]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d0f0      	beq.n	800c892 <HAL_RCC_OscConfig+0x452>
 800c8b0:	e05c      	b.n	800c96c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8b2:	4b10      	ldr	r3, [pc, #64]	; (800c8f4 <HAL_RCC_OscConfig+0x4b4>)
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8b8:	f7fb fafa 	bl	8007eb0 <HAL_GetTick>
 800c8bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8be:	e008      	b.n	800c8d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c8c0:	f7fb faf6 	bl	8007eb0 <HAL_GetTick>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	1ad3      	subs	r3, r2, r3
 800c8ca:	2b02      	cmp	r3, #2
 800c8cc:	d901      	bls.n	800c8d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800c8ce:	2303      	movs	r3, #3
 800c8d0:	e04d      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8d2:	4b06      	ldr	r3, [pc, #24]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d1f0      	bne.n	800c8c0 <HAL_RCC_OscConfig+0x480>
 800c8de:	e045      	b.n	800c96c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	699b      	ldr	r3, [r3, #24]
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d107      	bne.n	800c8f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e040      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
 800c8ec:	40023800 	.word	0x40023800
 800c8f0:	40007000 	.word	0x40007000
 800c8f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c8f8:	4b1f      	ldr	r3, [pc, #124]	; (800c978 <HAL_RCC_OscConfig+0x538>)
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	699b      	ldr	r3, [r3, #24]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d030      	beq.n	800c968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c910:	429a      	cmp	r2, r3
 800c912:	d129      	bne.n	800c968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c91e:	429a      	cmp	r2, r3
 800c920:	d122      	bne.n	800c968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c922:	68fa      	ldr	r2, [r7, #12]
 800c924:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c928:	4013      	ands	r3, r2
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c92e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c930:	4293      	cmp	r3, r2
 800c932:	d119      	bne.n	800c968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c93e:	085b      	lsrs	r3, r3, #1
 800c940:	3b01      	subs	r3, #1
 800c942:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c944:	429a      	cmp	r2, r3
 800c946:	d10f      	bne.n	800c968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c952:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c954:	429a      	cmp	r2, r3
 800c956:	d107      	bne.n	800c968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c962:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c964:	429a      	cmp	r2, r3
 800c966:	d001      	beq.n	800c96c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800c968:	2301      	movs	r3, #1
 800c96a:	e000      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3718      	adds	r7, #24
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	40023800 	.word	0x40023800

0800c97c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d101      	bne.n	800c98e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c98a:	2301      	movs	r3, #1
 800c98c:	e041      	b.n	800ca12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c994:	b2db      	uxtb	r3, r3
 800c996:	2b00      	cmp	r3, #0
 800c998:	d106      	bne.n	800c9a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2200      	movs	r2, #0
 800c99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f7fa fe14 	bl	80075d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2202      	movs	r2, #2
 800c9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	3304      	adds	r3, #4
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	4610      	mov	r0, r2
 800c9bc:	f000 fc70 	bl	800d2a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2201      	movs	r2, #1
 800ca04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca10:	2300      	movs	r3, #0
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
	...

0800ca1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b085      	sub	sp, #20
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d001      	beq.n	800ca34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ca30:	2301      	movs	r3, #1
 800ca32:	e04e      	b.n	800cad2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2202      	movs	r2, #2
 800ca38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	68da      	ldr	r2, [r3, #12]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f042 0201 	orr.w	r2, r2, #1
 800ca4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a23      	ldr	r2, [pc, #140]	; (800cae0 <HAL_TIM_Base_Start_IT+0xc4>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d022      	beq.n	800ca9c <HAL_TIM_Base_Start_IT+0x80>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca5e:	d01d      	beq.n	800ca9c <HAL_TIM_Base_Start_IT+0x80>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a1f      	ldr	r2, [pc, #124]	; (800cae4 <HAL_TIM_Base_Start_IT+0xc8>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d018      	beq.n	800ca9c <HAL_TIM_Base_Start_IT+0x80>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a1e      	ldr	r2, [pc, #120]	; (800cae8 <HAL_TIM_Base_Start_IT+0xcc>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d013      	beq.n	800ca9c <HAL_TIM_Base_Start_IT+0x80>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a1c      	ldr	r2, [pc, #112]	; (800caec <HAL_TIM_Base_Start_IT+0xd0>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d00e      	beq.n	800ca9c <HAL_TIM_Base_Start_IT+0x80>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4a1b      	ldr	r2, [pc, #108]	; (800caf0 <HAL_TIM_Base_Start_IT+0xd4>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d009      	beq.n	800ca9c <HAL_TIM_Base_Start_IT+0x80>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a19      	ldr	r2, [pc, #100]	; (800caf4 <HAL_TIM_Base_Start_IT+0xd8>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d004      	beq.n	800ca9c <HAL_TIM_Base_Start_IT+0x80>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	4a18      	ldr	r2, [pc, #96]	; (800caf8 <HAL_TIM_Base_Start_IT+0xdc>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d111      	bne.n	800cac0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	689b      	ldr	r3, [r3, #8]
 800caa2:	f003 0307 	and.w	r3, r3, #7
 800caa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2b06      	cmp	r3, #6
 800caac:	d010      	beq.n	800cad0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f042 0201 	orr.w	r2, r2, #1
 800cabc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cabe:	e007      	b.n	800cad0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f042 0201 	orr.w	r2, r2, #1
 800cace:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3714      	adds	r7, #20
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop
 800cae0:	40010000 	.word	0x40010000
 800cae4:	40000400 	.word	0x40000400
 800cae8:	40000800 	.word	0x40000800
 800caec:	40000c00 	.word	0x40000c00
 800caf0:	40010400 	.word	0x40010400
 800caf4:	40014000 	.word	0x40014000
 800caf8:	40001800 	.word	0x40001800

0800cafc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d101      	bne.n	800cb0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e041      	b.n	800cb92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d106      	bne.n	800cb28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f7fa fcea 	bl	80074fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2202      	movs	r2, #2
 800cb2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	3304      	adds	r3, #4
 800cb38:	4619      	mov	r1, r3
 800cb3a:	4610      	mov	r0, r2
 800cb3c:	f000 fbb0 	bl	800d2a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2201      	movs	r2, #1
 800cb44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2201      	movs	r2, #1
 800cb54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2201      	movs	r2, #1
 800cb64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2201      	movs	r2, #1
 800cb74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2201      	movs	r2, #1
 800cb84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3708      	adds	r7, #8
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
	...

0800cb9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d109      	bne.n	800cbc0 <HAL_TIM_PWM_Start+0x24>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	bf14      	ite	ne
 800cbb8:	2301      	movne	r3, #1
 800cbba:	2300      	moveq	r3, #0
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	e022      	b.n	800cc06 <HAL_TIM_PWM_Start+0x6a>
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	2b04      	cmp	r3, #4
 800cbc4:	d109      	bne.n	800cbda <HAL_TIM_PWM_Start+0x3e>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	bf14      	ite	ne
 800cbd2:	2301      	movne	r3, #1
 800cbd4:	2300      	moveq	r3, #0
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	e015      	b.n	800cc06 <HAL_TIM_PWM_Start+0x6a>
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	2b08      	cmp	r3, #8
 800cbde:	d109      	bne.n	800cbf4 <HAL_TIM_PWM_Start+0x58>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cbe6:	b2db      	uxtb	r3, r3
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	bf14      	ite	ne
 800cbec:	2301      	movne	r3, #1
 800cbee:	2300      	moveq	r3, #0
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	e008      	b.n	800cc06 <HAL_TIM_PWM_Start+0x6a>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	bf14      	ite	ne
 800cc00:	2301      	movne	r3, #1
 800cc02:	2300      	moveq	r3, #0
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d001      	beq.n	800cc0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e07c      	b.n	800cd08 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d104      	bne.n	800cc1e <HAL_TIM_PWM_Start+0x82>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2202      	movs	r2, #2
 800cc18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cc1c:	e013      	b.n	800cc46 <HAL_TIM_PWM_Start+0xaa>
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	2b04      	cmp	r3, #4
 800cc22:	d104      	bne.n	800cc2e <HAL_TIM_PWM_Start+0x92>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2202      	movs	r2, #2
 800cc28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cc2c:	e00b      	b.n	800cc46 <HAL_TIM_PWM_Start+0xaa>
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	2b08      	cmp	r3, #8
 800cc32:	d104      	bne.n	800cc3e <HAL_TIM_PWM_Start+0xa2>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2202      	movs	r2, #2
 800cc38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cc3c:	e003      	b.n	800cc46 <HAL_TIM_PWM_Start+0xaa>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2202      	movs	r2, #2
 800cc42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	6839      	ldr	r1, [r7, #0]
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f000 fe10 	bl	800d874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a2d      	ldr	r2, [pc, #180]	; (800cd10 <HAL_TIM_PWM_Start+0x174>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d004      	beq.n	800cc68 <HAL_TIM_PWM_Start+0xcc>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a2c      	ldr	r2, [pc, #176]	; (800cd14 <HAL_TIM_PWM_Start+0x178>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d101      	bne.n	800cc6c <HAL_TIM_PWM_Start+0xd0>
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e000      	b.n	800cc6e <HAL_TIM_PWM_Start+0xd2>
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d007      	beq.n	800cc82 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4a22      	ldr	r2, [pc, #136]	; (800cd10 <HAL_TIM_PWM_Start+0x174>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d022      	beq.n	800ccd2 <HAL_TIM_PWM_Start+0x136>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc94:	d01d      	beq.n	800ccd2 <HAL_TIM_PWM_Start+0x136>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4a1f      	ldr	r2, [pc, #124]	; (800cd18 <HAL_TIM_PWM_Start+0x17c>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d018      	beq.n	800ccd2 <HAL_TIM_PWM_Start+0x136>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4a1d      	ldr	r2, [pc, #116]	; (800cd1c <HAL_TIM_PWM_Start+0x180>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d013      	beq.n	800ccd2 <HAL_TIM_PWM_Start+0x136>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4a1c      	ldr	r2, [pc, #112]	; (800cd20 <HAL_TIM_PWM_Start+0x184>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d00e      	beq.n	800ccd2 <HAL_TIM_PWM_Start+0x136>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4a16      	ldr	r2, [pc, #88]	; (800cd14 <HAL_TIM_PWM_Start+0x178>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d009      	beq.n	800ccd2 <HAL_TIM_PWM_Start+0x136>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4a18      	ldr	r2, [pc, #96]	; (800cd24 <HAL_TIM_PWM_Start+0x188>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d004      	beq.n	800ccd2 <HAL_TIM_PWM_Start+0x136>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4a16      	ldr	r2, [pc, #88]	; (800cd28 <HAL_TIM_PWM_Start+0x18c>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d111      	bne.n	800ccf6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	f003 0307 	and.w	r3, r3, #7
 800ccdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2b06      	cmp	r3, #6
 800cce2:	d010      	beq.n	800cd06 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f042 0201 	orr.w	r2, r2, #1
 800ccf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccf4:	e007      	b.n	800cd06 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f042 0201 	orr.w	r2, r2, #1
 800cd04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cd06:	2300      	movs	r3, #0
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3710      	adds	r7, #16
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	40010000 	.word	0x40010000
 800cd14:	40010400 	.word	0x40010400
 800cd18:	40000400 	.word	0x40000400
 800cd1c:	40000800 	.word	0x40000800
 800cd20:	40000c00 	.word	0x40000c00
 800cd24:	40014000 	.word	0x40014000
 800cd28:	40001800 	.word	0x40001800

0800cd2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	691b      	ldr	r3, [r3, #16]
 800cd3a:	f003 0302 	and.w	r3, r3, #2
 800cd3e:	2b02      	cmp	r3, #2
 800cd40:	d122      	bne.n	800cd88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	f003 0302 	and.w	r3, r3, #2
 800cd4c:	2b02      	cmp	r3, #2
 800cd4e:	d11b      	bne.n	800cd88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f06f 0202 	mvn.w	r2, #2
 800cd58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	699b      	ldr	r3, [r3, #24]
 800cd66:	f003 0303 	and.w	r3, r3, #3
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d003      	beq.n	800cd76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 fa77 	bl	800d262 <HAL_TIM_IC_CaptureCallback>
 800cd74:	e005      	b.n	800cd82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 fa69 	bl	800d24e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 fa7a 	bl	800d276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2200      	movs	r2, #0
 800cd86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	691b      	ldr	r3, [r3, #16]
 800cd8e:	f003 0304 	and.w	r3, r3, #4
 800cd92:	2b04      	cmp	r3, #4
 800cd94:	d122      	bne.n	800cddc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	68db      	ldr	r3, [r3, #12]
 800cd9c:	f003 0304 	and.w	r3, r3, #4
 800cda0:	2b04      	cmp	r3, #4
 800cda2:	d11b      	bne.n	800cddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f06f 0204 	mvn.w	r2, #4
 800cdac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2202      	movs	r2, #2
 800cdb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	699b      	ldr	r3, [r3, #24]
 800cdba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d003      	beq.n	800cdca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 fa4d 	bl	800d262 <HAL_TIM_IC_CaptureCallback>
 800cdc8:	e005      	b.n	800cdd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 fa3f 	bl	800d24e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f000 fa50 	bl	800d276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	691b      	ldr	r3, [r3, #16]
 800cde2:	f003 0308 	and.w	r3, r3, #8
 800cde6:	2b08      	cmp	r3, #8
 800cde8:	d122      	bne.n	800ce30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	f003 0308 	and.w	r3, r3, #8
 800cdf4:	2b08      	cmp	r3, #8
 800cdf6:	d11b      	bne.n	800ce30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f06f 0208 	mvn.w	r2, #8
 800ce00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2204      	movs	r2, #4
 800ce06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	69db      	ldr	r3, [r3, #28]
 800ce0e:	f003 0303 	and.w	r3, r3, #3
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d003      	beq.n	800ce1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f000 fa23 	bl	800d262 <HAL_TIM_IC_CaptureCallback>
 800ce1c:	e005      	b.n	800ce2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 fa15 	bl	800d24e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 fa26 	bl	800d276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	691b      	ldr	r3, [r3, #16]
 800ce36:	f003 0310 	and.w	r3, r3, #16
 800ce3a:	2b10      	cmp	r3, #16
 800ce3c:	d122      	bne.n	800ce84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	f003 0310 	and.w	r3, r3, #16
 800ce48:	2b10      	cmp	r3, #16
 800ce4a:	d11b      	bne.n	800ce84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f06f 0210 	mvn.w	r2, #16
 800ce54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2208      	movs	r2, #8
 800ce5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	69db      	ldr	r3, [r3, #28]
 800ce62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d003      	beq.n	800ce72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 f9f9 	bl	800d262 <HAL_TIM_IC_CaptureCallback>
 800ce70:	e005      	b.n	800ce7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 f9eb 	bl	800d24e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f000 f9fc 	bl	800d276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2200      	movs	r2, #0
 800ce82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	691b      	ldr	r3, [r3, #16]
 800ce8a:	f003 0301 	and.w	r3, r3, #1
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d10e      	bne.n	800ceb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	f003 0301 	and.w	r3, r3, #1
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d107      	bne.n	800ceb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f06f 0201 	mvn.w	r2, #1
 800cea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f7f9 fb70 	bl	8006590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	691b      	ldr	r3, [r3, #16]
 800ceb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceba:	2b80      	cmp	r3, #128	; 0x80
 800cebc:	d10e      	bne.n	800cedc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	68db      	ldr	r3, [r3, #12]
 800cec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cec8:	2b80      	cmp	r3, #128	; 0x80
 800ceca:	d107      	bne.n	800cedc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ced4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 fdca 	bl	800da70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	691b      	ldr	r3, [r3, #16]
 800cee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cee6:	2b40      	cmp	r3, #64	; 0x40
 800cee8:	d10e      	bne.n	800cf08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cef4:	2b40      	cmp	r3, #64	; 0x40
 800cef6:	d107      	bne.n	800cf08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cf00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 f9c1 	bl	800d28a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	691b      	ldr	r3, [r3, #16]
 800cf0e:	f003 0320 	and.w	r3, r3, #32
 800cf12:	2b20      	cmp	r3, #32
 800cf14:	d10e      	bne.n	800cf34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	f003 0320 	and.w	r3, r3, #32
 800cf20:	2b20      	cmp	r3, #32
 800cf22:	d107      	bne.n	800cf34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f06f 0220 	mvn.w	r2, #32
 800cf2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 fd94 	bl	800da5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cf34:	bf00      	nop
 800cf36:	3708      	adds	r7, #8
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b086      	sub	sp, #24
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf52:	2b01      	cmp	r3, #1
 800cf54:	d101      	bne.n	800cf5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cf56:	2302      	movs	r3, #2
 800cf58:	e0ae      	b.n	800d0b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2b0c      	cmp	r3, #12
 800cf66:	f200 809f 	bhi.w	800d0a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800cf6a:	a201      	add	r2, pc, #4	; (adr r2, 800cf70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cf6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf70:	0800cfa5 	.word	0x0800cfa5
 800cf74:	0800d0a9 	.word	0x0800d0a9
 800cf78:	0800d0a9 	.word	0x0800d0a9
 800cf7c:	0800d0a9 	.word	0x0800d0a9
 800cf80:	0800cfe5 	.word	0x0800cfe5
 800cf84:	0800d0a9 	.word	0x0800d0a9
 800cf88:	0800d0a9 	.word	0x0800d0a9
 800cf8c:	0800d0a9 	.word	0x0800d0a9
 800cf90:	0800d027 	.word	0x0800d027
 800cf94:	0800d0a9 	.word	0x0800d0a9
 800cf98:	0800d0a9 	.word	0x0800d0a9
 800cf9c:	0800d0a9 	.word	0x0800d0a9
 800cfa0:	0800d067 	.word	0x0800d067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	68b9      	ldr	r1, [r7, #8]
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f000 fa18 	bl	800d3e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	699a      	ldr	r2, [r3, #24]
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f042 0208 	orr.w	r2, r2, #8
 800cfbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	699a      	ldr	r2, [r3, #24]
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f022 0204 	bic.w	r2, r2, #4
 800cfce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	6999      	ldr	r1, [r3, #24]
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	691a      	ldr	r2, [r3, #16]
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	430a      	orrs	r2, r1
 800cfe0:	619a      	str	r2, [r3, #24]
      break;
 800cfe2:	e064      	b.n	800d0ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	68b9      	ldr	r1, [r7, #8]
 800cfea:	4618      	mov	r0, r3
 800cfec:	f000 fa68 	bl	800d4c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	699a      	ldr	r2, [r3, #24]
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	699a      	ldr	r2, [r3, #24]
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d00e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	6999      	ldr	r1, [r3, #24]
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	691b      	ldr	r3, [r3, #16]
 800d01a:	021a      	lsls	r2, r3, #8
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	430a      	orrs	r2, r1
 800d022:	619a      	str	r2, [r3, #24]
      break;
 800d024:	e043      	b.n	800d0ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	68b9      	ldr	r1, [r7, #8]
 800d02c:	4618      	mov	r0, r3
 800d02e:	f000 fabd 	bl	800d5ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	69da      	ldr	r2, [r3, #28]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f042 0208 	orr.w	r2, r2, #8
 800d040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	69da      	ldr	r2, [r3, #28]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f022 0204 	bic.w	r2, r2, #4
 800d050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	69d9      	ldr	r1, [r3, #28]
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	691a      	ldr	r2, [r3, #16]
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	430a      	orrs	r2, r1
 800d062:	61da      	str	r2, [r3, #28]
      break;
 800d064:	e023      	b.n	800d0ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	68b9      	ldr	r1, [r7, #8]
 800d06c:	4618      	mov	r0, r3
 800d06e:	f000 fb11 	bl	800d694 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	69da      	ldr	r2, [r3, #28]
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	69da      	ldr	r2, [r3, #28]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	69d9      	ldr	r1, [r3, #28]
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	691b      	ldr	r3, [r3, #16]
 800d09c:	021a      	lsls	r2, r3, #8
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	430a      	orrs	r2, r1
 800d0a4:	61da      	str	r2, [r3, #28]
      break;
 800d0a6:	e002      	b.n	800d0ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	75fb      	strb	r3, [r7, #23]
      break;
 800d0ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3718      	adds	r7, #24
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d101      	bne.n	800d0dc <HAL_TIM_ConfigClockSource+0x1c>
 800d0d8:	2302      	movs	r3, #2
 800d0da:	e0b4      	b.n	800d246 <HAL_TIM_ConfigClockSource+0x186>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2202      	movs	r2, #2
 800d0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	689b      	ldr	r3, [r3, #8]
 800d0f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d0fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d102:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d114:	d03e      	beq.n	800d194 <HAL_TIM_ConfigClockSource+0xd4>
 800d116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d11a:	f200 8087 	bhi.w	800d22c <HAL_TIM_ConfigClockSource+0x16c>
 800d11e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d122:	f000 8086 	beq.w	800d232 <HAL_TIM_ConfigClockSource+0x172>
 800d126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d12a:	d87f      	bhi.n	800d22c <HAL_TIM_ConfigClockSource+0x16c>
 800d12c:	2b70      	cmp	r3, #112	; 0x70
 800d12e:	d01a      	beq.n	800d166 <HAL_TIM_ConfigClockSource+0xa6>
 800d130:	2b70      	cmp	r3, #112	; 0x70
 800d132:	d87b      	bhi.n	800d22c <HAL_TIM_ConfigClockSource+0x16c>
 800d134:	2b60      	cmp	r3, #96	; 0x60
 800d136:	d050      	beq.n	800d1da <HAL_TIM_ConfigClockSource+0x11a>
 800d138:	2b60      	cmp	r3, #96	; 0x60
 800d13a:	d877      	bhi.n	800d22c <HAL_TIM_ConfigClockSource+0x16c>
 800d13c:	2b50      	cmp	r3, #80	; 0x50
 800d13e:	d03c      	beq.n	800d1ba <HAL_TIM_ConfigClockSource+0xfa>
 800d140:	2b50      	cmp	r3, #80	; 0x50
 800d142:	d873      	bhi.n	800d22c <HAL_TIM_ConfigClockSource+0x16c>
 800d144:	2b40      	cmp	r3, #64	; 0x40
 800d146:	d058      	beq.n	800d1fa <HAL_TIM_ConfigClockSource+0x13a>
 800d148:	2b40      	cmp	r3, #64	; 0x40
 800d14a:	d86f      	bhi.n	800d22c <HAL_TIM_ConfigClockSource+0x16c>
 800d14c:	2b30      	cmp	r3, #48	; 0x30
 800d14e:	d064      	beq.n	800d21a <HAL_TIM_ConfigClockSource+0x15a>
 800d150:	2b30      	cmp	r3, #48	; 0x30
 800d152:	d86b      	bhi.n	800d22c <HAL_TIM_ConfigClockSource+0x16c>
 800d154:	2b20      	cmp	r3, #32
 800d156:	d060      	beq.n	800d21a <HAL_TIM_ConfigClockSource+0x15a>
 800d158:	2b20      	cmp	r3, #32
 800d15a:	d867      	bhi.n	800d22c <HAL_TIM_ConfigClockSource+0x16c>
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d05c      	beq.n	800d21a <HAL_TIM_ConfigClockSource+0x15a>
 800d160:	2b10      	cmp	r3, #16
 800d162:	d05a      	beq.n	800d21a <HAL_TIM_ConfigClockSource+0x15a>
 800d164:	e062      	b.n	800d22c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6818      	ldr	r0, [r3, #0]
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	6899      	ldr	r1, [r3, #8]
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	685a      	ldr	r2, [r3, #4]
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	68db      	ldr	r3, [r3, #12]
 800d176:	f000 fb5d 	bl	800d834 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	68ba      	ldr	r2, [r7, #8]
 800d190:	609a      	str	r2, [r3, #8]
      break;
 800d192:	e04f      	b.n	800d234 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6818      	ldr	r0, [r3, #0]
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	6899      	ldr	r1, [r3, #8]
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	685a      	ldr	r2, [r3, #4]
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	68db      	ldr	r3, [r3, #12]
 800d1a4:	f000 fb46 	bl	800d834 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	689a      	ldr	r2, [r3, #8]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d1b6:	609a      	str	r2, [r3, #8]
      break;
 800d1b8:	e03c      	b.n	800d234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6818      	ldr	r0, [r3, #0]
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	6859      	ldr	r1, [r3, #4]
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	f000 faba 	bl	800d740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2150      	movs	r1, #80	; 0x50
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f000 fb13 	bl	800d7fe <TIM_ITRx_SetConfig>
      break;
 800d1d8:	e02c      	b.n	800d234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6818      	ldr	r0, [r3, #0]
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	6859      	ldr	r1, [r3, #4]
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	68db      	ldr	r3, [r3, #12]
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	f000 fad9 	bl	800d79e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2160      	movs	r1, #96	; 0x60
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f000 fb03 	bl	800d7fe <TIM_ITRx_SetConfig>
      break;
 800d1f8:	e01c      	b.n	800d234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6818      	ldr	r0, [r3, #0]
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	6859      	ldr	r1, [r3, #4]
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	461a      	mov	r2, r3
 800d208:	f000 fa9a 	bl	800d740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2140      	movs	r1, #64	; 0x40
 800d212:	4618      	mov	r0, r3
 800d214:	f000 faf3 	bl	800d7fe <TIM_ITRx_SetConfig>
      break;
 800d218:	e00c      	b.n	800d234 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4619      	mov	r1, r3
 800d224:	4610      	mov	r0, r2
 800d226:	f000 faea 	bl	800d7fe <TIM_ITRx_SetConfig>
      break;
 800d22a:	e003      	b.n	800d234 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d22c:	2301      	movs	r3, #1
 800d22e:	73fb      	strb	r3, [r7, #15]
      break;
 800d230:	e000      	b.n	800d234 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2201      	movs	r2, #1
 800d238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2200      	movs	r2, #0
 800d240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d244:	7bfb      	ldrb	r3, [r7, #15]
}
 800d246:	4618      	mov	r0, r3
 800d248:	3710      	adds	r7, #16
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d24e:	b480      	push	{r7}
 800d250:	b083      	sub	sp, #12
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d256:	bf00      	nop
 800d258:	370c      	adds	r7, #12
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr

0800d262 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d262:	b480      	push	{r7}
 800d264:	b083      	sub	sp, #12
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d26a:	bf00      	nop
 800d26c:	370c      	adds	r7, #12
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr

0800d276 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d276:	b480      	push	{r7}
 800d278:	b083      	sub	sp, #12
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d27e:	bf00      	nop
 800d280:	370c      	adds	r7, #12
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr

0800d28a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d28a:	b480      	push	{r7}
 800d28c:	b083      	sub	sp, #12
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d292:	bf00      	nop
 800d294:	370c      	adds	r7, #12
 800d296:	46bd      	mov	sp, r7
 800d298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29c:	4770      	bx	lr
	...

0800d2a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	4a40      	ldr	r2, [pc, #256]	; (800d3b4 <TIM_Base_SetConfig+0x114>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d013      	beq.n	800d2e0 <TIM_Base_SetConfig+0x40>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2be:	d00f      	beq.n	800d2e0 <TIM_Base_SetConfig+0x40>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	4a3d      	ldr	r2, [pc, #244]	; (800d3b8 <TIM_Base_SetConfig+0x118>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d00b      	beq.n	800d2e0 <TIM_Base_SetConfig+0x40>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	4a3c      	ldr	r2, [pc, #240]	; (800d3bc <TIM_Base_SetConfig+0x11c>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d007      	beq.n	800d2e0 <TIM_Base_SetConfig+0x40>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	4a3b      	ldr	r2, [pc, #236]	; (800d3c0 <TIM_Base_SetConfig+0x120>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d003      	beq.n	800d2e0 <TIM_Base_SetConfig+0x40>
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	4a3a      	ldr	r2, [pc, #232]	; (800d3c4 <TIM_Base_SetConfig+0x124>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d108      	bne.n	800d2f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	4a2f      	ldr	r2, [pc, #188]	; (800d3b4 <TIM_Base_SetConfig+0x114>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d02b      	beq.n	800d352 <TIM_Base_SetConfig+0xb2>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d300:	d027      	beq.n	800d352 <TIM_Base_SetConfig+0xb2>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	4a2c      	ldr	r2, [pc, #176]	; (800d3b8 <TIM_Base_SetConfig+0x118>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d023      	beq.n	800d352 <TIM_Base_SetConfig+0xb2>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	4a2b      	ldr	r2, [pc, #172]	; (800d3bc <TIM_Base_SetConfig+0x11c>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d01f      	beq.n	800d352 <TIM_Base_SetConfig+0xb2>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	4a2a      	ldr	r2, [pc, #168]	; (800d3c0 <TIM_Base_SetConfig+0x120>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d01b      	beq.n	800d352 <TIM_Base_SetConfig+0xb2>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	4a29      	ldr	r2, [pc, #164]	; (800d3c4 <TIM_Base_SetConfig+0x124>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d017      	beq.n	800d352 <TIM_Base_SetConfig+0xb2>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	4a28      	ldr	r2, [pc, #160]	; (800d3c8 <TIM_Base_SetConfig+0x128>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d013      	beq.n	800d352 <TIM_Base_SetConfig+0xb2>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	4a27      	ldr	r2, [pc, #156]	; (800d3cc <TIM_Base_SetConfig+0x12c>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d00f      	beq.n	800d352 <TIM_Base_SetConfig+0xb2>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	4a26      	ldr	r2, [pc, #152]	; (800d3d0 <TIM_Base_SetConfig+0x130>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d00b      	beq.n	800d352 <TIM_Base_SetConfig+0xb2>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	4a25      	ldr	r2, [pc, #148]	; (800d3d4 <TIM_Base_SetConfig+0x134>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d007      	beq.n	800d352 <TIM_Base_SetConfig+0xb2>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	4a24      	ldr	r2, [pc, #144]	; (800d3d8 <TIM_Base_SetConfig+0x138>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d003      	beq.n	800d352 <TIM_Base_SetConfig+0xb2>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	4a23      	ldr	r2, [pc, #140]	; (800d3dc <TIM_Base_SetConfig+0x13c>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d108      	bne.n	800d364 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	68db      	ldr	r3, [r3, #12]
 800d35e:	68fa      	ldr	r2, [r7, #12]
 800d360:	4313      	orrs	r3, r2
 800d362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	695b      	ldr	r3, [r3, #20]
 800d36e:	4313      	orrs	r3, r2
 800d370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	689a      	ldr	r2, [r3, #8]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	4a0a      	ldr	r2, [pc, #40]	; (800d3b4 <TIM_Base_SetConfig+0x114>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d003      	beq.n	800d398 <TIM_Base_SetConfig+0xf8>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4a0c      	ldr	r2, [pc, #48]	; (800d3c4 <TIM_Base_SetConfig+0x124>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d103      	bne.n	800d3a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	691a      	ldr	r2, [r3, #16]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	615a      	str	r2, [r3, #20]
}
 800d3a6:	bf00      	nop
 800d3a8:	3714      	adds	r7, #20
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr
 800d3b2:	bf00      	nop
 800d3b4:	40010000 	.word	0x40010000
 800d3b8:	40000400 	.word	0x40000400
 800d3bc:	40000800 	.word	0x40000800
 800d3c0:	40000c00 	.word	0x40000c00
 800d3c4:	40010400 	.word	0x40010400
 800d3c8:	40014000 	.word	0x40014000
 800d3cc:	40014400 	.word	0x40014400
 800d3d0:	40014800 	.word	0x40014800
 800d3d4:	40001800 	.word	0x40001800
 800d3d8:	40001c00 	.word	0x40001c00
 800d3dc:	40002000 	.word	0x40002000

0800d3e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b087      	sub	sp, #28
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6a1b      	ldr	r3, [r3, #32]
 800d3ee:	f023 0201 	bic.w	r2, r3, #1
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6a1b      	ldr	r3, [r3, #32]
 800d3fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	699b      	ldr	r3, [r3, #24]
 800d406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d40e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f023 0303 	bic.w	r3, r3, #3
 800d416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	68fa      	ldr	r2, [r7, #12]
 800d41e:	4313      	orrs	r3, r2
 800d420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	f023 0302 	bic.w	r3, r3, #2
 800d428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	697a      	ldr	r2, [r7, #20]
 800d430:	4313      	orrs	r3, r2
 800d432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	4a20      	ldr	r2, [pc, #128]	; (800d4b8 <TIM_OC1_SetConfig+0xd8>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d003      	beq.n	800d444 <TIM_OC1_SetConfig+0x64>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	4a1f      	ldr	r2, [pc, #124]	; (800d4bc <TIM_OC1_SetConfig+0xdc>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d10c      	bne.n	800d45e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	f023 0308 	bic.w	r3, r3, #8
 800d44a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	68db      	ldr	r3, [r3, #12]
 800d450:	697a      	ldr	r2, [r7, #20]
 800d452:	4313      	orrs	r3, r2
 800d454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	f023 0304 	bic.w	r3, r3, #4
 800d45c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4a15      	ldr	r2, [pc, #84]	; (800d4b8 <TIM_OC1_SetConfig+0xd8>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d003      	beq.n	800d46e <TIM_OC1_SetConfig+0x8e>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	4a14      	ldr	r2, [pc, #80]	; (800d4bc <TIM_OC1_SetConfig+0xdc>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d111      	bne.n	800d492 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d47c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	695b      	ldr	r3, [r3, #20]
 800d482:	693a      	ldr	r2, [r7, #16]
 800d484:	4313      	orrs	r3, r2
 800d486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	699b      	ldr	r3, [r3, #24]
 800d48c:	693a      	ldr	r2, [r7, #16]
 800d48e:	4313      	orrs	r3, r2
 800d490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	693a      	ldr	r2, [r7, #16]
 800d496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	68fa      	ldr	r2, [r7, #12]
 800d49c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	685a      	ldr	r2, [r3, #4]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	697a      	ldr	r2, [r7, #20]
 800d4aa:	621a      	str	r2, [r3, #32]
}
 800d4ac:	bf00      	nop
 800d4ae:	371c      	adds	r7, #28
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr
 800d4b8:	40010000 	.word	0x40010000
 800d4bc:	40010400 	.word	0x40010400

0800d4c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b087      	sub	sp, #28
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6a1b      	ldr	r3, [r3, #32]
 800d4ce:	f023 0210 	bic.w	r2, r3, #16
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6a1b      	ldr	r3, [r3, #32]
 800d4da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	699b      	ldr	r3, [r3, #24]
 800d4e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	021b      	lsls	r3, r3, #8
 800d4fe:	68fa      	ldr	r2, [r7, #12]
 800d500:	4313      	orrs	r3, r2
 800d502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	f023 0320 	bic.w	r3, r3, #32
 800d50a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	689b      	ldr	r3, [r3, #8]
 800d510:	011b      	lsls	r3, r3, #4
 800d512:	697a      	ldr	r2, [r7, #20]
 800d514:	4313      	orrs	r3, r2
 800d516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	4a22      	ldr	r2, [pc, #136]	; (800d5a4 <TIM_OC2_SetConfig+0xe4>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d003      	beq.n	800d528 <TIM_OC2_SetConfig+0x68>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	4a21      	ldr	r2, [pc, #132]	; (800d5a8 <TIM_OC2_SetConfig+0xe8>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d10d      	bne.n	800d544 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d52e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	011b      	lsls	r3, r3, #4
 800d536:	697a      	ldr	r2, [r7, #20]
 800d538:	4313      	orrs	r3, r2
 800d53a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d542:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	4a17      	ldr	r2, [pc, #92]	; (800d5a4 <TIM_OC2_SetConfig+0xe4>)
 800d548:	4293      	cmp	r3, r2
 800d54a:	d003      	beq.n	800d554 <TIM_OC2_SetConfig+0x94>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	4a16      	ldr	r2, [pc, #88]	; (800d5a8 <TIM_OC2_SetConfig+0xe8>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d113      	bne.n	800d57c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d55a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	695b      	ldr	r3, [r3, #20]
 800d568:	009b      	lsls	r3, r3, #2
 800d56a:	693a      	ldr	r2, [r7, #16]
 800d56c:	4313      	orrs	r3, r2
 800d56e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	699b      	ldr	r3, [r3, #24]
 800d574:	009b      	lsls	r3, r3, #2
 800d576:	693a      	ldr	r2, [r7, #16]
 800d578:	4313      	orrs	r3, r2
 800d57a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	693a      	ldr	r2, [r7, #16]
 800d580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	68fa      	ldr	r2, [r7, #12]
 800d586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	685a      	ldr	r2, [r3, #4]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	697a      	ldr	r2, [r7, #20]
 800d594:	621a      	str	r2, [r3, #32]
}
 800d596:	bf00      	nop
 800d598:	371c      	adds	r7, #28
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	40010000 	.word	0x40010000
 800d5a8:	40010400 	.word	0x40010400

0800d5ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b087      	sub	sp, #28
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6a1b      	ldr	r3, [r3, #32]
 800d5ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6a1b      	ldr	r3, [r3, #32]
 800d5c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	69db      	ldr	r3, [r3, #28]
 800d5d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f023 0303 	bic.w	r3, r3, #3
 800d5e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	68fa      	ldr	r2, [r7, #12]
 800d5ea:	4313      	orrs	r3, r2
 800d5ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d5f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	021b      	lsls	r3, r3, #8
 800d5fc:	697a      	ldr	r2, [r7, #20]
 800d5fe:	4313      	orrs	r3, r2
 800d600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	4a21      	ldr	r2, [pc, #132]	; (800d68c <TIM_OC3_SetConfig+0xe0>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d003      	beq.n	800d612 <TIM_OC3_SetConfig+0x66>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	4a20      	ldr	r2, [pc, #128]	; (800d690 <TIM_OC3_SetConfig+0xe4>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d10d      	bne.n	800d62e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	68db      	ldr	r3, [r3, #12]
 800d61e:	021b      	lsls	r3, r3, #8
 800d620:	697a      	ldr	r2, [r7, #20]
 800d622:	4313      	orrs	r3, r2
 800d624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d62c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4a16      	ldr	r2, [pc, #88]	; (800d68c <TIM_OC3_SetConfig+0xe0>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d003      	beq.n	800d63e <TIM_OC3_SetConfig+0x92>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	4a15      	ldr	r2, [pc, #84]	; (800d690 <TIM_OC3_SetConfig+0xe4>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d113      	bne.n	800d666 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d64c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	695b      	ldr	r3, [r3, #20]
 800d652:	011b      	lsls	r3, r3, #4
 800d654:	693a      	ldr	r2, [r7, #16]
 800d656:	4313      	orrs	r3, r2
 800d658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	699b      	ldr	r3, [r3, #24]
 800d65e:	011b      	lsls	r3, r3, #4
 800d660:	693a      	ldr	r2, [r7, #16]
 800d662:	4313      	orrs	r3, r2
 800d664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	693a      	ldr	r2, [r7, #16]
 800d66a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	68fa      	ldr	r2, [r7, #12]
 800d670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	685a      	ldr	r2, [r3, #4]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	697a      	ldr	r2, [r7, #20]
 800d67e:	621a      	str	r2, [r3, #32]
}
 800d680:	bf00      	nop
 800d682:	371c      	adds	r7, #28
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr
 800d68c:	40010000 	.word	0x40010000
 800d690:	40010400 	.word	0x40010400

0800d694 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d694:	b480      	push	{r7}
 800d696:	b087      	sub	sp, #28
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6a1b      	ldr	r3, [r3, #32]
 800d6a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6a1b      	ldr	r3, [r3, #32]
 800d6ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	69db      	ldr	r3, [r3, #28]
 800d6ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	021b      	lsls	r3, r3, #8
 800d6d2:	68fa      	ldr	r2, [r7, #12]
 800d6d4:	4313      	orrs	r3, r2
 800d6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d6de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	689b      	ldr	r3, [r3, #8]
 800d6e4:	031b      	lsls	r3, r3, #12
 800d6e6:	693a      	ldr	r2, [r7, #16]
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	4a12      	ldr	r2, [pc, #72]	; (800d738 <TIM_OC4_SetConfig+0xa4>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d003      	beq.n	800d6fc <TIM_OC4_SetConfig+0x68>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	4a11      	ldr	r2, [pc, #68]	; (800d73c <TIM_OC4_SetConfig+0xa8>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d109      	bne.n	800d710 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	695b      	ldr	r3, [r3, #20]
 800d708:	019b      	lsls	r3, r3, #6
 800d70a:	697a      	ldr	r2, [r7, #20]
 800d70c:	4313      	orrs	r3, r2
 800d70e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	697a      	ldr	r2, [r7, #20]
 800d714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	68fa      	ldr	r2, [r7, #12]
 800d71a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	685a      	ldr	r2, [r3, #4]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	693a      	ldr	r2, [r7, #16]
 800d728:	621a      	str	r2, [r3, #32]
}
 800d72a:	bf00      	nop
 800d72c:	371c      	adds	r7, #28
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr
 800d736:	bf00      	nop
 800d738:	40010000 	.word	0x40010000
 800d73c:	40010400 	.word	0x40010400

0800d740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d740:	b480      	push	{r7}
 800d742:	b087      	sub	sp, #28
 800d744:	af00      	add	r7, sp, #0
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	60b9      	str	r1, [r7, #8]
 800d74a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	6a1b      	ldr	r3, [r3, #32]
 800d750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	6a1b      	ldr	r3, [r3, #32]
 800d756:	f023 0201 	bic.w	r2, r3, #1
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	699b      	ldr	r3, [r3, #24]
 800d762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d76a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	011b      	lsls	r3, r3, #4
 800d770:	693a      	ldr	r2, [r7, #16]
 800d772:	4313      	orrs	r3, r2
 800d774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	f023 030a 	bic.w	r3, r3, #10
 800d77c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d77e:	697a      	ldr	r2, [r7, #20]
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	4313      	orrs	r3, r2
 800d784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	693a      	ldr	r2, [r7, #16]
 800d78a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	697a      	ldr	r2, [r7, #20]
 800d790:	621a      	str	r2, [r3, #32]
}
 800d792:	bf00      	nop
 800d794:	371c      	adds	r7, #28
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr

0800d79e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d79e:	b480      	push	{r7}
 800d7a0:	b087      	sub	sp, #28
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	60f8      	str	r0, [r7, #12]
 800d7a6:	60b9      	str	r1, [r7, #8]
 800d7a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	6a1b      	ldr	r3, [r3, #32]
 800d7ae:	f023 0210 	bic.w	r2, r3, #16
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	699b      	ldr	r3, [r3, #24]
 800d7ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6a1b      	ldr	r3, [r3, #32]
 800d7c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d7c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	031b      	lsls	r3, r3, #12
 800d7ce:	697a      	ldr	r2, [r7, #20]
 800d7d0:	4313      	orrs	r3, r2
 800d7d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d7da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	011b      	lsls	r3, r3, #4
 800d7e0:	693a      	ldr	r2, [r7, #16]
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	697a      	ldr	r2, [r7, #20]
 800d7ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	693a      	ldr	r2, [r7, #16]
 800d7f0:	621a      	str	r2, [r3, #32]
}
 800d7f2:	bf00      	nop
 800d7f4:	371c      	adds	r7, #28
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d7fe:	b480      	push	{r7}
 800d800:	b085      	sub	sp, #20
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
 800d806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	689b      	ldr	r3, [r3, #8]
 800d80c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d816:	683a      	ldr	r2, [r7, #0]
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	4313      	orrs	r3, r2
 800d81c:	f043 0307 	orr.w	r3, r3, #7
 800d820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	609a      	str	r2, [r3, #8]
}
 800d828:	bf00      	nop
 800d82a:	3714      	adds	r7, #20
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d834:	b480      	push	{r7}
 800d836:	b087      	sub	sp, #28
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	607a      	str	r2, [r7, #4]
 800d840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d84e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	021a      	lsls	r2, r3, #8
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	431a      	orrs	r2, r3
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	4313      	orrs	r3, r2
 800d85c:	697a      	ldr	r2, [r7, #20]
 800d85e:	4313      	orrs	r3, r2
 800d860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	697a      	ldr	r2, [r7, #20]
 800d866:	609a      	str	r2, [r3, #8]
}
 800d868:	bf00      	nop
 800d86a:	371c      	adds	r7, #28
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr

0800d874 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d874:	b480      	push	{r7}
 800d876:	b087      	sub	sp, #28
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	60b9      	str	r1, [r7, #8]
 800d87e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	f003 031f 	and.w	r3, r3, #31
 800d886:	2201      	movs	r2, #1
 800d888:	fa02 f303 	lsl.w	r3, r2, r3
 800d88c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	6a1a      	ldr	r2, [r3, #32]
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	43db      	mvns	r3, r3
 800d896:	401a      	ands	r2, r3
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	6a1a      	ldr	r2, [r3, #32]
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	f003 031f 	and.w	r3, r3, #31
 800d8a6:	6879      	ldr	r1, [r7, #4]
 800d8a8:	fa01 f303 	lsl.w	r3, r1, r3
 800d8ac:	431a      	orrs	r2, r3
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	621a      	str	r2, [r3, #32]
}
 800d8b2:	bf00      	nop
 800d8b4:	371c      	adds	r7, #28
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr
	...

0800d8c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b085      	sub	sp, #20
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d101      	bne.n	800d8d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d8d4:	2302      	movs	r3, #2
 800d8d6:	e05a      	b.n	800d98e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2201      	movs	r2, #1
 800d8dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2202      	movs	r2, #2
 800d8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	689b      	ldr	r3, [r3, #8]
 800d8f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	4313      	orrs	r3, r2
 800d908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	68fa      	ldr	r2, [r7, #12]
 800d910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4a21      	ldr	r2, [pc, #132]	; (800d99c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d918:	4293      	cmp	r3, r2
 800d91a:	d022      	beq.n	800d962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d924:	d01d      	beq.n	800d962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4a1d      	ldr	r2, [pc, #116]	; (800d9a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d018      	beq.n	800d962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4a1b      	ldr	r2, [pc, #108]	; (800d9a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d013      	beq.n	800d962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	4a1a      	ldr	r2, [pc, #104]	; (800d9a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d940:	4293      	cmp	r3, r2
 800d942:	d00e      	beq.n	800d962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	4a18      	ldr	r2, [pc, #96]	; (800d9ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d009      	beq.n	800d962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	4a17      	ldr	r2, [pc, #92]	; (800d9b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d954:	4293      	cmp	r3, r2
 800d956:	d004      	beq.n	800d962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4a15      	ldr	r2, [pc, #84]	; (800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	d10c      	bne.n	800d97c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	68ba      	ldr	r2, [r7, #8]
 800d970:	4313      	orrs	r3, r2
 800d972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	68ba      	ldr	r2, [r7, #8]
 800d97a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2201      	movs	r2, #1
 800d980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2200      	movs	r2, #0
 800d988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d98c:	2300      	movs	r3, #0
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3714      	adds	r7, #20
 800d992:	46bd      	mov	sp, r7
 800d994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d998:	4770      	bx	lr
 800d99a:	bf00      	nop
 800d99c:	40010000 	.word	0x40010000
 800d9a0:	40000400 	.word	0x40000400
 800d9a4:	40000800 	.word	0x40000800
 800d9a8:	40000c00 	.word	0x40000c00
 800d9ac:	40010400 	.word	0x40010400
 800d9b0:	40014000 	.word	0x40014000
 800d9b4:	40001800 	.word	0x40001800

0800d9b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b085      	sub	sp, #20
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d101      	bne.n	800d9d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d9d0:	2302      	movs	r3, #2
 800d9d2:	e03d      	b.n	800da50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	68db      	ldr	r3, [r3, #12]
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	689b      	ldr	r3, [r3, #8]
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	4313      	orrs	r3, r2
 800da04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4313      	orrs	r3, r2
 800da12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	4313      	orrs	r3, r2
 800da20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	695b      	ldr	r3, [r3, #20]
 800da2c:	4313      	orrs	r3, r2
 800da2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	69db      	ldr	r3, [r3, #28]
 800da3a:	4313      	orrs	r3, r2
 800da3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	68fa      	ldr	r2, [r7, #12]
 800da44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2200      	movs	r2, #0
 800da4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da4e:	2300      	movs	r3, #0
}
 800da50:	4618      	mov	r0, r3
 800da52:	3714      	adds	r7, #20
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr

0800da5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800da64:	bf00      	nop
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800da78:	bf00      	nop
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d101      	bne.n	800da96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800da92:	2301      	movs	r3, #1
 800da94:	e03f      	b.n	800db16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d106      	bne.n	800dab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f7f9 ff54 	bl	8007958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2224      	movs	r2, #36	; 0x24
 800dab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	68da      	ldr	r2, [r3, #12]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f001 f8b7 	bl	800ec3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	691a      	ldr	r2, [r3, #16]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dadc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	695a      	ldr	r2, [r3, #20]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800daec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	68da      	ldr	r2, [r3, #12]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dafc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2220      	movs	r2, #32
 800db08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2220      	movs	r2, #32
 800db10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800db14:	2300      	movs	r3, #0
}
 800db16:	4618      	mov	r0, r3
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b082      	sub	sp, #8
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d101      	bne.n	800db30 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800db2c:	2301      	movs	r3, #1
 800db2e:	e021      	b.n	800db74 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2224      	movs	r2, #36	; 0x24
 800db34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	68da      	ldr	r2, [r3, #12]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800db46:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7fa f8bb 	bl	8007cc4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2200      	movs	r2, #0
 800db52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2200      	movs	r2, #0
 800db60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2200      	movs	r2, #0
 800db68:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2200      	movs	r2, #0
 800db6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db72:	2300      	movs	r3, #0
}
 800db74:	4618      	mov	r0, r3
 800db76:	3708      	adds	r7, #8
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b08a      	sub	sp, #40	; 0x28
 800db80:	af02      	add	r7, sp, #8
 800db82:	60f8      	str	r0, [r7, #12]
 800db84:	60b9      	str	r1, [r7, #8]
 800db86:	603b      	str	r3, [r7, #0]
 800db88:	4613      	mov	r3, r2
 800db8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800db8c:	2300      	movs	r3, #0
 800db8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db96:	b2db      	uxtb	r3, r3
 800db98:	2b20      	cmp	r3, #32
 800db9a:	d17c      	bne.n	800dc96 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d002      	beq.n	800dba8 <HAL_UART_Transmit+0x2c>
 800dba2:	88fb      	ldrh	r3, [r7, #6]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d101      	bne.n	800dbac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e075      	b.n	800dc98 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d101      	bne.n	800dbba <HAL_UART_Transmit+0x3e>
 800dbb6:	2302      	movs	r3, #2
 800dbb8:	e06e      	b.n	800dc98 <HAL_UART_Transmit+0x11c>
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2221      	movs	r2, #33	; 0x21
 800dbcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dbd0:	f7fa f96e 	bl	8007eb0 <HAL_GetTick>
 800dbd4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	88fa      	ldrh	r2, [r7, #6]
 800dbda:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	88fa      	ldrh	r2, [r7, #6]
 800dbe0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	689b      	ldr	r3, [r3, #8]
 800dbe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbea:	d108      	bne.n	800dbfe <HAL_UART_Transmit+0x82>
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	691b      	ldr	r3, [r3, #16]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d104      	bne.n	800dbfe <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	61bb      	str	r3, [r7, #24]
 800dbfc:	e003      	b.n	800dc06 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dc02:	2300      	movs	r3, #0
 800dc04:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800dc0e:	e02a      	b.n	800dc66 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	9300      	str	r3, [sp, #0]
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	2200      	movs	r2, #0
 800dc18:	2180      	movs	r1, #128	; 0x80
 800dc1a:	68f8      	ldr	r0, [r7, #12]
 800dc1c:	f000 fd3f 	bl	800e69e <UART_WaitOnFlagUntilTimeout>
 800dc20:	4603      	mov	r3, r0
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d001      	beq.n	800dc2a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800dc26:	2303      	movs	r3, #3
 800dc28:	e036      	b.n	800dc98 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d10b      	bne.n	800dc48 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dc30:	69bb      	ldr	r3, [r7, #24]
 800dc32:	881b      	ldrh	r3, [r3, #0]
 800dc34:	461a      	mov	r2, r3
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc3e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800dc40:	69bb      	ldr	r3, [r7, #24]
 800dc42:	3302      	adds	r3, #2
 800dc44:	61bb      	str	r3, [r7, #24]
 800dc46:	e007      	b.n	800dc58 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	781a      	ldrb	r2, [r3, #0]
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800dc52:	69fb      	ldr	r3, [r7, #28]
 800dc54:	3301      	adds	r3, #1
 800dc56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dc5c:	b29b      	uxth	r3, r3
 800dc5e:	3b01      	subs	r3, #1
 800dc60:	b29a      	uxth	r2, r3
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d1cf      	bne.n	800dc10 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	9300      	str	r3, [sp, #0]
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	2200      	movs	r2, #0
 800dc78:	2140      	movs	r1, #64	; 0x40
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f000 fd0f 	bl	800e69e <UART_WaitOnFlagUntilTimeout>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d001      	beq.n	800dc8a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800dc86:	2303      	movs	r3, #3
 800dc88:	e006      	b.n	800dc98 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2220      	movs	r2, #32
 800dc8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800dc92:	2300      	movs	r3, #0
 800dc94:	e000      	b.n	800dc98 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800dc96:	2302      	movs	r3, #2
  }
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3720      	adds	r7, #32
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b085      	sub	sp, #20
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	60f8      	str	r0, [r7, #12]
 800dca8:	60b9      	str	r1, [r7, #8]
 800dcaa:	4613      	mov	r3, r2
 800dcac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcb4:	b2db      	uxtb	r3, r3
 800dcb6:	2b20      	cmp	r3, #32
 800dcb8:	d130      	bne.n	800dd1c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d002      	beq.n	800dcc6 <HAL_UART_Transmit_IT+0x26>
 800dcc0:	88fb      	ldrh	r3, [r7, #6]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d101      	bne.n	800dcca <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	e029      	b.n	800dd1e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcd0:	2b01      	cmp	r3, #1
 800dcd2:	d101      	bne.n	800dcd8 <HAL_UART_Transmit_IT+0x38>
 800dcd4:	2302      	movs	r3, #2
 800dcd6:	e022      	b.n	800dd1e <HAL_UART_Transmit_IT+0x7e>
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2201      	movs	r2, #1
 800dcdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	68ba      	ldr	r2, [r7, #8]
 800dce4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	88fa      	ldrh	r2, [r7, #6]
 800dcea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	88fa      	ldrh	r2, [r7, #6]
 800dcf0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2221      	movs	r2, #33	; 0x21
 800dcfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2200      	movs	r2, #0
 800dd04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	68da      	ldr	r2, [r3, #12]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dd16:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	e000      	b.n	800dd1e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800dd1c:	2302      	movs	r3, #2
  }
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3714      	adds	r7, #20
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr
	...

0800dd2c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b08c      	sub	sp, #48	; 0x30
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	60f8      	str	r0, [r7, #12]
 800dd34:	60b9      	str	r1, [r7, #8]
 800dd36:	4613      	mov	r3, r2
 800dd38:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd40:	b2db      	uxtb	r3, r3
 800dd42:	2b20      	cmp	r3, #32
 800dd44:	d165      	bne.n	800de12 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d002      	beq.n	800dd52 <HAL_UART_Transmit_DMA+0x26>
 800dd4c:	88fb      	ldrh	r3, [r7, #6]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d101      	bne.n	800dd56 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800dd52:	2301      	movs	r3, #1
 800dd54:	e05e      	b.n	800de14 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d101      	bne.n	800dd64 <HAL_UART_Transmit_DMA+0x38>
 800dd60:	2302      	movs	r3, #2
 800dd62:	e057      	b.n	800de14 <HAL_UART_Transmit_DMA+0xe8>
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2201      	movs	r2, #1
 800dd68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800dd6c:	68ba      	ldr	r2, [r7, #8]
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	88fa      	ldrh	r2, [r7, #6]
 800dd76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	88fa      	ldrh	r2, [r7, #6]
 800dd7c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	2200      	movs	r2, #0
 800dd82:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2221      	movs	r2, #33	; 0x21
 800dd88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd90:	4a22      	ldr	r2, [pc, #136]	; (800de1c <HAL_UART_Transmit_DMA+0xf0>)
 800dd92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd98:	4a21      	ldr	r2, [pc, #132]	; (800de20 <HAL_UART_Transmit_DMA+0xf4>)
 800dd9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dda0:	4a20      	ldr	r2, [pc, #128]	; (800de24 <HAL_UART_Transmit_DMA+0xf8>)
 800dda2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dda8:	2200      	movs	r2, #0
 800ddaa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800ddac:	f107 0308 	add.w	r3, r7, #8
 800ddb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ddb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb8:	6819      	ldr	r1, [r3, #0]
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	3304      	adds	r3, #4
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	88fb      	ldrh	r3, [r7, #6]
 800ddc4:	f7fa fd66 	bl	8008894 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ddd0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	3314      	adds	r3, #20
 800dde0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dde2:	69bb      	ldr	r3, [r7, #24]
 800dde4:	e853 3f00 	ldrex	r3, [r3]
 800dde8:	617b      	str	r3, [r7, #20]
   return(result);
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddf0:	62bb      	str	r3, [r7, #40]	; 0x28
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	3314      	adds	r3, #20
 800ddf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddfa:	627a      	str	r2, [r7, #36]	; 0x24
 800ddfc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddfe:	6a39      	ldr	r1, [r7, #32]
 800de00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de02:	e841 2300 	strex	r3, r2, [r1]
 800de06:	61fb      	str	r3, [r7, #28]
   return(result);
 800de08:	69fb      	ldr	r3, [r7, #28]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d1e5      	bne.n	800ddda <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800de0e:	2300      	movs	r3, #0
 800de10:	e000      	b.n	800de14 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800de12:	2302      	movs	r3, #2
  }
}
 800de14:	4618      	mov	r0, r3
 800de16:	3730      	adds	r7, #48	; 0x30
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	0800e3f9 	.word	0x0800e3f9
 800de20:	0800e493 	.word	0x0800e493
 800de24:	0800e60b 	.word	0x0800e60b

0800de28 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b084      	sub	sp, #16
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	4613      	mov	r3, r2
 800de34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	2b20      	cmp	r3, #32
 800de40:	d11d      	bne.n	800de7e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d002      	beq.n	800de4e <HAL_UART_Receive_DMA+0x26>
 800de48:	88fb      	ldrh	r3, [r7, #6]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d101      	bne.n	800de52 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800de4e:	2301      	movs	r3, #1
 800de50:	e016      	b.n	800de80 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d101      	bne.n	800de60 <HAL_UART_Receive_DMA+0x38>
 800de5c:	2302      	movs	r3, #2
 800de5e:	e00f      	b.n	800de80 <HAL_UART_Receive_DMA+0x58>
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2201      	movs	r2, #1
 800de64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	2200      	movs	r2, #0
 800de6c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800de6e:	88fb      	ldrh	r3, [r7, #6]
 800de70:	461a      	mov	r2, r3
 800de72:	68b9      	ldr	r1, [r7, #8]
 800de74:	68f8      	ldr	r0, [r7, #12]
 800de76:	f000 fc81 	bl	800e77c <UART_Start_Receive_DMA>
 800de7a:	4603      	mov	r3, r0
 800de7c:	e000      	b.n	800de80 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800de7e:	2302      	movs	r3, #2
  }
}
 800de80:	4618      	mov	r0, r3
 800de82:	3710      	adds	r7, #16
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b0ba      	sub	sp, #232	; 0xe8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	695b      	ldr	r3, [r3, #20]
 800deaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800deae:	2300      	movs	r3, #0
 800deb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800deb4:	2300      	movs	r3, #0
 800deb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800deba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800debe:	f003 030f 	and.w	r3, r3, #15
 800dec2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800dec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800deca:	2b00      	cmp	r3, #0
 800decc:	d10f      	bne.n	800deee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ded2:	f003 0320 	and.w	r3, r3, #32
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d009      	beq.n	800deee <HAL_UART_IRQHandler+0x66>
 800deda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dede:	f003 0320 	and.w	r3, r3, #32
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d003      	beq.n	800deee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f000 fded 	bl	800eac6 <UART_Receive_IT>
      return;
 800deec:	e256      	b.n	800e39c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800deee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800def2:	2b00      	cmp	r3, #0
 800def4:	f000 80de 	beq.w	800e0b4 <HAL_UART_IRQHandler+0x22c>
 800def8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800defc:	f003 0301 	and.w	r3, r3, #1
 800df00:	2b00      	cmp	r3, #0
 800df02:	d106      	bne.n	800df12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800df04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	f000 80d1 	beq.w	800e0b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800df12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df16:	f003 0301 	and.w	r3, r3, #1
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d00b      	beq.n	800df36 <HAL_UART_IRQHandler+0xae>
 800df1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df26:	2b00      	cmp	r3, #0
 800df28:	d005      	beq.n	800df36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df2e:	f043 0201 	orr.w	r2, r3, #1
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800df36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df3a:	f003 0304 	and.w	r3, r3, #4
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d00b      	beq.n	800df5a <HAL_UART_IRQHandler+0xd2>
 800df42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df46:	f003 0301 	and.w	r3, r3, #1
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d005      	beq.n	800df5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df52:	f043 0202 	orr.w	r2, r3, #2
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800df5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df5e:	f003 0302 	and.w	r3, r3, #2
 800df62:	2b00      	cmp	r3, #0
 800df64:	d00b      	beq.n	800df7e <HAL_UART_IRQHandler+0xf6>
 800df66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df6a:	f003 0301 	and.w	r3, r3, #1
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d005      	beq.n	800df7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df76:	f043 0204 	orr.w	r2, r3, #4
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800df7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df82:	f003 0308 	and.w	r3, r3, #8
 800df86:	2b00      	cmp	r3, #0
 800df88:	d011      	beq.n	800dfae <HAL_UART_IRQHandler+0x126>
 800df8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df8e:	f003 0320 	and.w	r3, r3, #32
 800df92:	2b00      	cmp	r3, #0
 800df94:	d105      	bne.n	800dfa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800df96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df9a:	f003 0301 	and.w	r3, r3, #1
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d005      	beq.n	800dfae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfa6:	f043 0208 	orr.w	r2, r3, #8
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	f000 81ed 	beq.w	800e392 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dfb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfbc:	f003 0320 	and.w	r3, r3, #32
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d008      	beq.n	800dfd6 <HAL_UART_IRQHandler+0x14e>
 800dfc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfc8:	f003 0320 	and.w	r3, r3, #32
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d002      	beq.n	800dfd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f000 fd78 	bl	800eac6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	695b      	ldr	r3, [r3, #20]
 800dfdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfe0:	2b40      	cmp	r3, #64	; 0x40
 800dfe2:	bf0c      	ite	eq
 800dfe4:	2301      	moveq	r3, #1
 800dfe6:	2300      	movne	r3, #0
 800dfe8:	b2db      	uxtb	r3, r3
 800dfea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dff2:	f003 0308 	and.w	r3, r3, #8
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d103      	bne.n	800e002 <HAL_UART_IRQHandler+0x17a>
 800dffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d04f      	beq.n	800e0a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 fc80 	bl	800e908 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	695b      	ldr	r3, [r3, #20]
 800e00e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e012:	2b40      	cmp	r3, #64	; 0x40
 800e014:	d141      	bne.n	800e09a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	3314      	adds	r3, #20
 800e01c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e020:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e024:	e853 3f00 	ldrex	r3, [r3]
 800e028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e02c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	3314      	adds	r3, #20
 800e03e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e042:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e04a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e04e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e052:	e841 2300 	strex	r3, r2, [r1]
 800e056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e05a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d1d9      	bne.n	800e016 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e066:	2b00      	cmp	r3, #0
 800e068:	d013      	beq.n	800e092 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e06e:	4a7d      	ldr	r2, [pc, #500]	; (800e264 <HAL_UART_IRQHandler+0x3dc>)
 800e070:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e076:	4618      	mov	r0, r3
 800e078:	f7fa fcd4 	bl	8008a24 <HAL_DMA_Abort_IT>
 800e07c:	4603      	mov	r3, r0
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d016      	beq.n	800e0b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e08c:	4610      	mov	r0, r2
 800e08e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e090:	e00e      	b.n	800e0b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f7f7 f980 	bl	8005398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e098:	e00a      	b.n	800e0b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f7f7 f97c 	bl	8005398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0a0:	e006      	b.n	800e0b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f7f7 f978 	bl	8005398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800e0ae:	e170      	b.n	800e392 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0b0:	bf00      	nop
    return;
 800e0b2:	e16e      	b.n	800e392 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	f040 814a 	bne.w	800e352 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e0be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0c2:	f003 0310 	and.w	r3, r3, #16
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	f000 8143 	beq.w	800e352 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800e0cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0d0:	f003 0310 	and.w	r3, r3, #16
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	f000 813c 	beq.w	800e352 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e0da:	2300      	movs	r3, #0
 800e0dc:	60bb      	str	r3, [r7, #8]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	60bb      	str	r3, [r7, #8]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	60bb      	str	r3, [r7, #8]
 800e0ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	695b      	ldr	r3, [r3, #20]
 800e0f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0fa:	2b40      	cmp	r3, #64	; 0x40
 800e0fc:	f040 80b4 	bne.w	800e268 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e10c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e110:	2b00      	cmp	r3, #0
 800e112:	f000 8140 	beq.w	800e396 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e11a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e11e:	429a      	cmp	r2, r3
 800e120:	f080 8139 	bcs.w	800e396 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e12a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e130:	69db      	ldr	r3, [r3, #28]
 800e132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e136:	f000 8088 	beq.w	800e24a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	330c      	adds	r3, #12
 800e140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e144:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e148:	e853 3f00 	ldrex	r3, [r3]
 800e14c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e158:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	330c      	adds	r3, #12
 800e162:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e166:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e16a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e16e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e172:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e176:	e841 2300 	strex	r3, r2, [r1]
 800e17a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e17e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e182:	2b00      	cmp	r3, #0
 800e184:	d1d9      	bne.n	800e13a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	3314      	adds	r3, #20
 800e18c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e18e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e190:	e853 3f00 	ldrex	r3, [r3]
 800e194:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e198:	f023 0301 	bic.w	r3, r3, #1
 800e19c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	3314      	adds	r3, #20
 800e1a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e1aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e1ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e1b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e1b6:	e841 2300 	strex	r3, r2, [r1]
 800e1ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e1bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d1e1      	bne.n	800e186 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	3314      	adds	r3, #20
 800e1c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e1cc:	e853 3f00 	ldrex	r3, [r3]
 800e1d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e1d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e1d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	3314      	adds	r3, #20
 800e1e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e1e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e1e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e1ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e1ee:	e841 2300 	strex	r3, r2, [r1]
 800e1f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e1f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d1e3      	bne.n	800e1c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2220      	movs	r2, #32
 800e1fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2200      	movs	r2, #0
 800e206:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	330c      	adds	r3, #12
 800e20e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e212:	e853 3f00 	ldrex	r3, [r3]
 800e216:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e21a:	f023 0310 	bic.w	r3, r3, #16
 800e21e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	330c      	adds	r3, #12
 800e228:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e22c:	65ba      	str	r2, [r7, #88]	; 0x58
 800e22e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e230:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e232:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e234:	e841 2300 	strex	r3, r2, [r1]
 800e238:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e23a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d1e3      	bne.n	800e208 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e244:	4618      	mov	r0, r3
 800e246:	f7fa fb7d 	bl	8008944 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e252:	b29b      	uxth	r3, r3
 800e254:	1ad3      	subs	r3, r2, r3
 800e256:	b29b      	uxth	r3, r3
 800e258:	4619      	mov	r1, r3
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f000 f8c0 	bl	800e3e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e260:	e099      	b.n	800e396 <HAL_UART_IRQHandler+0x50e>
 800e262:	bf00      	nop
 800e264:	0800e9cf 	.word	0x0800e9cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e270:	b29b      	uxth	r3, r3
 800e272:	1ad3      	subs	r3, r2, r3
 800e274:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	2b00      	cmp	r3, #0
 800e280:	f000 808b 	beq.w	800e39a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800e284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e288:	2b00      	cmp	r3, #0
 800e28a:	f000 8086 	beq.w	800e39a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	330c      	adds	r3, #12
 800e294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e298:	e853 3f00 	ldrex	r3, [r3]
 800e29c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e2a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	330c      	adds	r3, #12
 800e2ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e2b2:	647a      	str	r2, [r7, #68]	; 0x44
 800e2b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e2b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e2ba:	e841 2300 	strex	r3, r2, [r1]
 800e2be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d1e3      	bne.n	800e28e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	3314      	adds	r3, #20
 800e2cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d0:	e853 3f00 	ldrex	r3, [r3]
 800e2d4:	623b      	str	r3, [r7, #32]
   return(result);
 800e2d6:	6a3b      	ldr	r3, [r7, #32]
 800e2d8:	f023 0301 	bic.w	r3, r3, #1
 800e2dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	3314      	adds	r3, #20
 800e2e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e2ea:	633a      	str	r2, [r7, #48]	; 0x30
 800e2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2f2:	e841 2300 	strex	r3, r2, [r1]
 800e2f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d1e3      	bne.n	800e2c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2220      	movs	r2, #32
 800e302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2200      	movs	r2, #0
 800e30a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	330c      	adds	r3, #12
 800e312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	e853 3f00 	ldrex	r3, [r3]
 800e31a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f023 0310 	bic.w	r3, r3, #16
 800e322:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	330c      	adds	r3, #12
 800e32c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e330:	61fa      	str	r2, [r7, #28]
 800e332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e334:	69b9      	ldr	r1, [r7, #24]
 800e336:	69fa      	ldr	r2, [r7, #28]
 800e338:	e841 2300 	strex	r3, r2, [r1]
 800e33c:	617b      	str	r3, [r7, #20]
   return(result);
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d1e3      	bne.n	800e30c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e344:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e348:	4619      	mov	r1, r3
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 f848 	bl	800e3e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e350:	e023      	b.n	800e39a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d009      	beq.n	800e372 <HAL_UART_IRQHandler+0x4ea>
 800e35e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e366:	2b00      	cmp	r3, #0
 800e368:	d003      	beq.n	800e372 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 fb43 	bl	800e9f6 <UART_Transmit_IT>
    return;
 800e370:	e014      	b.n	800e39c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00e      	beq.n	800e39c <HAL_UART_IRQHandler+0x514>
 800e37e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e386:	2b00      	cmp	r3, #0
 800e388:	d008      	beq.n	800e39c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 fb83 	bl	800ea96 <UART_EndTransmit_IT>
    return;
 800e390:	e004      	b.n	800e39c <HAL_UART_IRQHandler+0x514>
    return;
 800e392:	bf00      	nop
 800e394:	e002      	b.n	800e39c <HAL_UART_IRQHandler+0x514>
      return;
 800e396:	bf00      	nop
 800e398:	e000      	b.n	800e39c <HAL_UART_IRQHandler+0x514>
      return;
 800e39a:	bf00      	nop
  }
}
 800e39c:	37e8      	adds	r7, #232	; 0xe8
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop

0800e3a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e3ac:	bf00      	nop
 800e3ae:	370c      	adds	r7, #12
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr

0800e3b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b083      	sub	sp, #12
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e3c0:	bf00      	nop
 800e3c2:	370c      	adds	r7, #12
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ca:	4770      	bx	lr

0800e3cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	b083      	sub	sp, #12
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800e3d4:	bf00      	nop
 800e3d6:	370c      	adds	r7, #12
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr

0800e3e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b083      	sub	sp, #12
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e3ec:	bf00      	nop
 800e3ee:	370c      	adds	r7, #12
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr

0800e3f8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b090      	sub	sp, #64	; 0x40
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e404:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e410:	2b00      	cmp	r3, #0
 800e412:	d137      	bne.n	800e484 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800e414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e416:	2200      	movs	r2, #0
 800e418:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e41a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	3314      	adds	r3, #20
 800e420:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e424:	e853 3f00 	ldrex	r3, [r3]
 800e428:	623b      	str	r3, [r7, #32]
   return(result);
 800e42a:	6a3b      	ldr	r3, [r7, #32]
 800e42c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e430:	63bb      	str	r3, [r7, #56]	; 0x38
 800e432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	3314      	adds	r3, #20
 800e438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e43a:	633a      	str	r2, [r7, #48]	; 0x30
 800e43c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e442:	e841 2300 	strex	r3, r2, [r1]
 800e446:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d1e5      	bne.n	800e41a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	330c      	adds	r3, #12
 800e454:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	e853 3f00 	ldrex	r3, [r3]
 800e45c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e464:	637b      	str	r3, [r7, #52]	; 0x34
 800e466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	330c      	adds	r3, #12
 800e46c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e46e:	61fa      	str	r2, [r7, #28]
 800e470:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e472:	69b9      	ldr	r1, [r7, #24]
 800e474:	69fa      	ldr	r2, [r7, #28]
 800e476:	e841 2300 	strex	r3, r2, [r1]
 800e47a:	617b      	str	r3, [r7, #20]
   return(result);
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d1e5      	bne.n	800e44e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e482:	e002      	b.n	800e48a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800e484:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e486:	f7f6 ff75 	bl	8005374 <HAL_UART_TxCpltCallback>
}
 800e48a:	bf00      	nop
 800e48c:	3740      	adds	r7, #64	; 0x40
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}

0800e492 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e492:	b580      	push	{r7, lr}
 800e494:	b084      	sub	sp, #16
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e49e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e4a0:	68f8      	ldr	r0, [r7, #12]
 800e4a2:	f7ff ff7f 	bl	800e3a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e4a6:	bf00      	nop
 800e4a8:	3710      	adds	r7, #16
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}

0800e4ae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e4ae:	b580      	push	{r7, lr}
 800e4b0:	b09c      	sub	sp, #112	; 0x70
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d172      	bne.n	800e5b0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800e4ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	330c      	adds	r3, #12
 800e4d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4da:	e853 3f00 	ldrex	r3, [r3]
 800e4de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e4e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e4e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800e4e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	330c      	adds	r3, #12
 800e4ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e4f0:	65ba      	str	r2, [r7, #88]	; 0x58
 800e4f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e4f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e4f8:	e841 2300 	strex	r3, r2, [r1]
 800e4fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e4fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e500:	2b00      	cmp	r3, #0
 800e502:	d1e5      	bne.n	800e4d0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	3314      	adds	r3, #20
 800e50a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50e:	e853 3f00 	ldrex	r3, [r3]
 800e512:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e516:	f023 0301 	bic.w	r3, r3, #1
 800e51a:	667b      	str	r3, [r7, #100]	; 0x64
 800e51c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	3314      	adds	r3, #20
 800e522:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e524:	647a      	str	r2, [r7, #68]	; 0x44
 800e526:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e528:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e52a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e52c:	e841 2300 	strex	r3, r2, [r1]
 800e530:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e534:	2b00      	cmp	r3, #0
 800e536:	d1e5      	bne.n	800e504 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	3314      	adds	r3, #20
 800e53e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e542:	e853 3f00 	ldrex	r3, [r3]
 800e546:	623b      	str	r3, [r7, #32]
   return(result);
 800e548:	6a3b      	ldr	r3, [r7, #32]
 800e54a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e54e:	663b      	str	r3, [r7, #96]	; 0x60
 800e550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	3314      	adds	r3, #20
 800e556:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e558:	633a      	str	r2, [r7, #48]	; 0x30
 800e55a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e55c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e55e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e560:	e841 2300 	strex	r3, r2, [r1]
 800e564:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d1e5      	bne.n	800e538 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e56c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e56e:	2220      	movs	r2, #32
 800e570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e578:	2b01      	cmp	r3, #1
 800e57a:	d119      	bne.n	800e5b0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e57c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	330c      	adds	r3, #12
 800e582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	e853 3f00 	ldrex	r3, [r3]
 800e58a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f023 0310 	bic.w	r3, r3, #16
 800e592:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	330c      	adds	r3, #12
 800e59a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e59c:	61fa      	str	r2, [r7, #28]
 800e59e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5a0:	69b9      	ldr	r1, [r7, #24]
 800e5a2:	69fa      	ldr	r2, [r7, #28]
 800e5a4:	e841 2300 	strex	r3, r2, [r1]
 800e5a8:	617b      	str	r3, [r7, #20]
   return(result);
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d1e5      	bne.n	800e57c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d106      	bne.n	800e5c6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e5b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e5bc:	4619      	mov	r1, r3
 800e5be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e5c0:	f7ff ff0e 	bl	800e3e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e5c4:	e002      	b.n	800e5cc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800e5c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e5c8:	f7ff fef6 	bl	800e3b8 <HAL_UART_RxCpltCallback>
}
 800e5cc:	bf00      	nop
 800e5ce:	3770      	adds	r7, #112	; 0x70
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}

0800e5d4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b084      	sub	sp, #16
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5e0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d108      	bne.n	800e5fc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e5ee:	085b      	lsrs	r3, r3, #1
 800e5f0:	b29b      	uxth	r3, r3
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	68f8      	ldr	r0, [r7, #12]
 800e5f6:	f7ff fef3 	bl	800e3e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e5fa:	e002      	b.n	800e602 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800e5fc:	68f8      	ldr	r0, [r7, #12]
 800e5fe:	f7ff fee5 	bl	800e3cc <HAL_UART_RxHalfCpltCallback>
}
 800e602:	bf00      	nop
 800e604:	3710      	adds	r7, #16
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}

0800e60a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b084      	sub	sp, #16
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e612:	2300      	movs	r3, #0
 800e614:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e61a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	695b      	ldr	r3, [r3, #20]
 800e622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e626:	2b80      	cmp	r3, #128	; 0x80
 800e628:	bf0c      	ite	eq
 800e62a:	2301      	moveq	r3, #1
 800e62c:	2300      	movne	r3, #0
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e638:	b2db      	uxtb	r3, r3
 800e63a:	2b21      	cmp	r3, #33	; 0x21
 800e63c:	d108      	bne.n	800e650 <UART_DMAError+0x46>
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d005      	beq.n	800e650 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	2200      	movs	r2, #0
 800e648:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e64a:	68b8      	ldr	r0, [r7, #8]
 800e64c:	f000 f934 	bl	800e8b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	695b      	ldr	r3, [r3, #20]
 800e656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e65a:	2b40      	cmp	r3, #64	; 0x40
 800e65c:	bf0c      	ite	eq
 800e65e:	2301      	moveq	r3, #1
 800e660:	2300      	movne	r3, #0
 800e662:	b2db      	uxtb	r3, r3
 800e664:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	2b22      	cmp	r3, #34	; 0x22
 800e670:	d108      	bne.n	800e684 <UART_DMAError+0x7a>
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d005      	beq.n	800e684 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	2200      	movs	r2, #0
 800e67c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e67e:	68b8      	ldr	r0, [r7, #8]
 800e680:	f000 f942 	bl	800e908 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e688:	f043 0210 	orr.w	r2, r3, #16
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e690:	68b8      	ldr	r0, [r7, #8]
 800e692:	f7f6 fe81 	bl	8005398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e696:	bf00      	nop
 800e698:	3710      	adds	r7, #16
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e69e:	b580      	push	{r7, lr}
 800e6a0:	b090      	sub	sp, #64	; 0x40
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	60f8      	str	r0, [r7, #12]
 800e6a6:	60b9      	str	r1, [r7, #8]
 800e6a8:	603b      	str	r3, [r7, #0]
 800e6aa:	4613      	mov	r3, r2
 800e6ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6ae:	e050      	b.n	800e752 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e6b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6b6:	d04c      	beq.n	800e752 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e6b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d007      	beq.n	800e6ce <UART_WaitOnFlagUntilTimeout+0x30>
 800e6be:	f7f9 fbf7 	bl	8007eb0 <HAL_GetTick>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	1ad3      	subs	r3, r2, r3
 800e6c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d241      	bcs.n	800e752 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	330c      	adds	r3, #12
 800e6d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d8:	e853 3f00 	ldrex	r3, [r3]
 800e6dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	330c      	adds	r3, #12
 800e6ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6ee:	637a      	str	r2, [r7, #52]	; 0x34
 800e6f0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e6f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6f6:	e841 2300 	strex	r3, r2, [r1]
 800e6fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d1e5      	bne.n	800e6ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	3314      	adds	r3, #20
 800e708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	e853 3f00 	ldrex	r3, [r3]
 800e710:	613b      	str	r3, [r7, #16]
   return(result);
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	f023 0301 	bic.w	r3, r3, #1
 800e718:	63bb      	str	r3, [r7, #56]	; 0x38
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	3314      	adds	r3, #20
 800e720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e722:	623a      	str	r2, [r7, #32]
 800e724:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e726:	69f9      	ldr	r1, [r7, #28]
 800e728:	6a3a      	ldr	r2, [r7, #32]
 800e72a:	e841 2300 	strex	r3, r2, [r1]
 800e72e:	61bb      	str	r3, [r7, #24]
   return(result);
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d1e5      	bne.n	800e702 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2220      	movs	r2, #32
 800e73a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2220      	movs	r2, #32
 800e742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2200      	movs	r2, #0
 800e74a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800e74e:	2303      	movs	r3, #3
 800e750:	e00f      	b.n	800e772 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	4013      	ands	r3, r2
 800e75c:	68ba      	ldr	r2, [r7, #8]
 800e75e:	429a      	cmp	r2, r3
 800e760:	bf0c      	ite	eq
 800e762:	2301      	moveq	r3, #1
 800e764:	2300      	movne	r3, #0
 800e766:	b2db      	uxtb	r3, r3
 800e768:	461a      	mov	r2, r3
 800e76a:	79fb      	ldrb	r3, [r7, #7]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d09f      	beq.n	800e6b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e770:	2300      	movs	r3, #0
}
 800e772:	4618      	mov	r0, r3
 800e774:	3740      	adds	r7, #64	; 0x40
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
	...

0800e77c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b098      	sub	sp, #96	; 0x60
 800e780:	af00      	add	r7, sp, #0
 800e782:	60f8      	str	r0, [r7, #12]
 800e784:	60b9      	str	r1, [r7, #8]
 800e786:	4613      	mov	r3, r2
 800e788:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800e78a:	68ba      	ldr	r2, [r7, #8]
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	88fa      	ldrh	r2, [r7, #6]
 800e794:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2200      	movs	r2, #0
 800e79a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2222      	movs	r2, #34	; 0x22
 800e7a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a8:	4a40      	ldr	r2, [pc, #256]	; (800e8ac <UART_Start_Receive_DMA+0x130>)
 800e7aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b0:	4a3f      	ldr	r2, [pc, #252]	; (800e8b0 <UART_Start_Receive_DMA+0x134>)
 800e7b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b8:	4a3e      	ldr	r2, [pc, #248]	; (800e8b4 <UART_Start_Receive_DMA+0x138>)
 800e7ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800e7c4:	f107 0308 	add.w	r3, r7, #8
 800e7c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	3304      	adds	r3, #4
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7d8:	681a      	ldr	r2, [r3, #0]
 800e7da:	88fb      	ldrh	r3, [r7, #6]
 800e7dc:	f7fa f85a 	bl	8008894 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	613b      	str	r3, [r7, #16]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	613b      	str	r3, [r7, #16]
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	685b      	ldr	r3, [r3, #4]
 800e7f2:	613b      	str	r3, [r7, #16]
 800e7f4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	691b      	ldr	r3, [r3, #16]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d019      	beq.n	800e83a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	330c      	adds	r3, #12
 800e80c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e80e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e810:	e853 3f00 	ldrex	r3, [r3]
 800e814:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e81c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	330c      	adds	r3, #12
 800e824:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e826:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e828:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e82a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e82c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e82e:	e841 2300 	strex	r3, r2, [r1]
 800e832:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e836:	2b00      	cmp	r3, #0
 800e838:	d1e5      	bne.n	800e806 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	3314      	adds	r3, #20
 800e840:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e844:	e853 3f00 	ldrex	r3, [r3]
 800e848:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84c:	f043 0301 	orr.w	r3, r3, #1
 800e850:	657b      	str	r3, [r7, #84]	; 0x54
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	3314      	adds	r3, #20
 800e858:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e85a:	63ba      	str	r2, [r7, #56]	; 0x38
 800e85c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e85e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e862:	e841 2300 	strex	r3, r2, [r1]
 800e866:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d1e5      	bne.n	800e83a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	3314      	adds	r3, #20
 800e874:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e876:	69bb      	ldr	r3, [r7, #24]
 800e878:	e853 3f00 	ldrex	r3, [r3]
 800e87c:	617b      	str	r3, [r7, #20]
   return(result);
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e884:	653b      	str	r3, [r7, #80]	; 0x50
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	3314      	adds	r3, #20
 800e88c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e88e:	627a      	str	r2, [r7, #36]	; 0x24
 800e890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e892:	6a39      	ldr	r1, [r7, #32]
 800e894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e896:	e841 2300 	strex	r3, r2, [r1]
 800e89a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e89c:	69fb      	ldr	r3, [r7, #28]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d1e5      	bne.n	800e86e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800e8a2:	2300      	movs	r3, #0
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3760      	adds	r7, #96	; 0x60
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	0800e4af 	.word	0x0800e4af
 800e8b0:	0800e5d5 	.word	0x0800e5d5
 800e8b4:	0800e60b 	.word	0x0800e60b

0800e8b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b089      	sub	sp, #36	; 0x24
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	330c      	adds	r3, #12
 800e8c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	e853 3f00 	ldrex	r3, [r3]
 800e8ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e8d6:	61fb      	str	r3, [r7, #28]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	330c      	adds	r3, #12
 800e8de:	69fa      	ldr	r2, [r7, #28]
 800e8e0:	61ba      	str	r2, [r7, #24]
 800e8e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e4:	6979      	ldr	r1, [r7, #20]
 800e8e6:	69ba      	ldr	r2, [r7, #24]
 800e8e8:	e841 2300 	strex	r3, r2, [r1]
 800e8ec:	613b      	str	r3, [r7, #16]
   return(result);
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d1e5      	bne.n	800e8c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2220      	movs	r2, #32
 800e8f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800e8fc:	bf00      	nop
 800e8fe:	3724      	adds	r7, #36	; 0x24
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr

0800e908 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e908:	b480      	push	{r7}
 800e90a:	b095      	sub	sp, #84	; 0x54
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	330c      	adds	r3, #12
 800e916:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e91a:	e853 3f00 	ldrex	r3, [r3]
 800e91e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e922:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e926:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	330c      	adds	r3, #12
 800e92e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e930:	643a      	str	r2, [r7, #64]	; 0x40
 800e932:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e934:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e936:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e938:	e841 2300 	strex	r3, r2, [r1]
 800e93c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e940:	2b00      	cmp	r3, #0
 800e942:	d1e5      	bne.n	800e910 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	3314      	adds	r3, #20
 800e94a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e94c:	6a3b      	ldr	r3, [r7, #32]
 800e94e:	e853 3f00 	ldrex	r3, [r3]
 800e952:	61fb      	str	r3, [r7, #28]
   return(result);
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	f023 0301 	bic.w	r3, r3, #1
 800e95a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	3314      	adds	r3, #20
 800e962:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e964:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e96a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e96c:	e841 2300 	strex	r3, r2, [r1]
 800e970:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e974:	2b00      	cmp	r3, #0
 800e976:	d1e5      	bne.n	800e944 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d119      	bne.n	800e9b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	330c      	adds	r3, #12
 800e986:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	e853 3f00 	ldrex	r3, [r3]
 800e98e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	f023 0310 	bic.w	r3, r3, #16
 800e996:	647b      	str	r3, [r7, #68]	; 0x44
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	330c      	adds	r3, #12
 800e99e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9a0:	61ba      	str	r2, [r7, #24]
 800e9a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9a4:	6979      	ldr	r1, [r7, #20]
 800e9a6:	69ba      	ldr	r2, [r7, #24]
 800e9a8:	e841 2300 	strex	r3, r2, [r1]
 800e9ac:	613b      	str	r3, [r7, #16]
   return(result);
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d1e5      	bne.n	800e980 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2220      	movs	r2, #32
 800e9b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800e9c2:	bf00      	nop
 800e9c4:	3754      	adds	r7, #84	; 0x54
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9cc:	4770      	bx	lr

0800e9ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e9ce:	b580      	push	{r7, lr}
 800e9d0:	b084      	sub	sp, #16
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e9e8:	68f8      	ldr	r0, [r7, #12]
 800e9ea:	f7f6 fcd5 	bl	8005398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9ee:	bf00      	nop
 800e9f0:	3710      	adds	r7, #16
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}

0800e9f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e9f6:	b480      	push	{r7}
 800e9f8:	b085      	sub	sp, #20
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea04:	b2db      	uxtb	r3, r3
 800ea06:	2b21      	cmp	r3, #33	; 0x21
 800ea08:	d13e      	bne.n	800ea88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea12:	d114      	bne.n	800ea3e <UART_Transmit_IT+0x48>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	691b      	ldr	r3, [r3, #16]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d110      	bne.n	800ea3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6a1b      	ldr	r3, [r3, #32]
 800ea20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	881b      	ldrh	r3, [r3, #0]
 800ea26:	461a      	mov	r2, r3
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ea30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6a1b      	ldr	r3, [r3, #32]
 800ea36:	1c9a      	adds	r2, r3, #2
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	621a      	str	r2, [r3, #32]
 800ea3c:	e008      	b.n	800ea50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	6a1b      	ldr	r3, [r3, #32]
 800ea42:	1c59      	adds	r1, r3, #1
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	6211      	str	r1, [r2, #32]
 800ea48:	781a      	ldrb	r2, [r3, #0]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	3b01      	subs	r3, #1
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d10f      	bne.n	800ea84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	68da      	ldr	r2, [r3, #12]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ea72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	68da      	ldr	r2, [r3, #12]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ea84:	2300      	movs	r3, #0
 800ea86:	e000      	b.n	800ea8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ea88:	2302      	movs	r3, #2
  }
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3714      	adds	r7, #20
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr

0800ea96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ea96:	b580      	push	{r7, lr}
 800ea98:	b082      	sub	sp, #8
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	68da      	ldr	r2, [r3, #12]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eaac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2220      	movs	r2, #32
 800eab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f7f6 fc5c 	bl	8005374 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800eabc:	2300      	movs	r3, #0
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3708      	adds	r7, #8
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}

0800eac6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b08c      	sub	sp, #48	; 0x30
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	2b22      	cmp	r3, #34	; 0x22
 800ead8:	f040 80ab 	bne.w	800ec32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	689b      	ldr	r3, [r3, #8]
 800eae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eae4:	d117      	bne.n	800eb16 <UART_Receive_IT+0x50>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	691b      	ldr	r3, [r3, #16]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d113      	bne.n	800eb16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaf6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	685b      	ldr	r3, [r3, #4]
 800eafe:	b29b      	uxth	r3, r3
 800eb00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb04:	b29a      	uxth	r2, r3
 800eb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb0e:	1c9a      	adds	r2, r3, #2
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	629a      	str	r2, [r3, #40]	; 0x28
 800eb14:	e026      	b.n	800eb64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb28:	d007      	beq.n	800eb3a <UART_Receive_IT+0x74>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	689b      	ldr	r3, [r3, #8]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d10a      	bne.n	800eb48 <UART_Receive_IT+0x82>
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	691b      	ldr	r3, [r3, #16]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d106      	bne.n	800eb48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	b2da      	uxtb	r2, r3
 800eb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb44:	701a      	strb	r2, [r3, #0]
 800eb46:	e008      	b.n	800eb5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb54:	b2da      	uxtb	r2, r3
 800eb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb5e:	1c5a      	adds	r2, r3, #1
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800eb68:	b29b      	uxth	r3, r3
 800eb6a:	3b01      	subs	r3, #1
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	687a      	ldr	r2, [r7, #4]
 800eb70:	4619      	mov	r1, r3
 800eb72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d15a      	bne.n	800ec2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	68da      	ldr	r2, [r3, #12]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f022 0220 	bic.w	r2, r2, #32
 800eb86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	68da      	ldr	r2, [r3, #12]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800eb96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	695a      	ldr	r2, [r3, #20]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f022 0201 	bic.w	r2, r2, #1
 800eba6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2220      	movs	r2, #32
 800ebac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d135      	bne.n	800ec24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	330c      	adds	r3, #12
 800ebc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	e853 3f00 	ldrex	r3, [r3]
 800ebcc:	613b      	str	r3, [r7, #16]
   return(result);
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	f023 0310 	bic.w	r3, r3, #16
 800ebd4:	627b      	str	r3, [r7, #36]	; 0x24
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	330c      	adds	r3, #12
 800ebdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebde:	623a      	str	r2, [r7, #32]
 800ebe0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe2:	69f9      	ldr	r1, [r7, #28]
 800ebe4:	6a3a      	ldr	r2, [r7, #32]
 800ebe6:	e841 2300 	strex	r3, r2, [r1]
 800ebea:	61bb      	str	r3, [r7, #24]
   return(result);
 800ebec:	69bb      	ldr	r3, [r7, #24]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d1e5      	bne.n	800ebbe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f003 0310 	and.w	r3, r3, #16
 800ebfc:	2b10      	cmp	r3, #16
 800ebfe:	d10a      	bne.n	800ec16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ec00:	2300      	movs	r3, #0
 800ec02:	60fb      	str	r3, [r7, #12]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	60fb      	str	r3, [r7, #12]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	60fb      	str	r3, [r7, #12]
 800ec14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f7ff fbdf 	bl	800e3e0 <HAL_UARTEx_RxEventCallback>
 800ec22:	e002      	b.n	800ec2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f7ff fbc7 	bl	800e3b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	e002      	b.n	800ec34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	e000      	b.n	800ec34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ec32:	2302      	movs	r3, #2
  }
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3730      	adds	r7, #48	; 0x30
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec40:	b0c0      	sub	sp, #256	; 0x100
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	691b      	ldr	r3, [r3, #16]
 800ec50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ec54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec58:	68d9      	ldr	r1, [r3, #12]
 800ec5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec5e:	681a      	ldr	r2, [r3, #0]
 800ec60:	ea40 0301 	orr.w	r3, r0, r1
 800ec64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ec66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec6a:	689a      	ldr	r2, [r3, #8]
 800ec6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec70:	691b      	ldr	r3, [r3, #16]
 800ec72:	431a      	orrs	r2, r3
 800ec74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec78:	695b      	ldr	r3, [r3, #20]
 800ec7a:	431a      	orrs	r2, r3
 800ec7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec80:	69db      	ldr	r3, [r3, #28]
 800ec82:	4313      	orrs	r3, r2
 800ec84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ec88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	68db      	ldr	r3, [r3, #12]
 800ec90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ec94:	f021 010c 	bic.w	r1, r1, #12
 800ec98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec9c:	681a      	ldr	r2, [r3, #0]
 800ec9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800eca2:	430b      	orrs	r3, r1
 800eca4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800eca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	695b      	ldr	r3, [r3, #20]
 800ecae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ecb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ecb6:	6999      	ldr	r1, [r3, #24]
 800ecb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	ea40 0301 	orr.w	r3, r0, r1
 800ecc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ecc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	4b8f      	ldr	r3, [pc, #572]	; (800ef08 <UART_SetConfig+0x2cc>)
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d005      	beq.n	800ecdc <UART_SetConfig+0xa0>
 800ecd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ecd4:	681a      	ldr	r2, [r3, #0]
 800ecd6:	4b8d      	ldr	r3, [pc, #564]	; (800ef0c <UART_SetConfig+0x2d0>)
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d104      	bne.n	800ece6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ecdc:	f7fd f96c 	bl	800bfb8 <HAL_RCC_GetPCLK2Freq>
 800ece0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ece4:	e003      	b.n	800ecee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ece6:	f7fd f953 	bl	800bf90 <HAL_RCC_GetPCLK1Freq>
 800ecea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ecee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ecf2:	69db      	ldr	r3, [r3, #28]
 800ecf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ecf8:	f040 810c 	bne.w	800ef14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ecfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ed00:	2200      	movs	r2, #0
 800ed02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ed06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ed0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ed0e:	4622      	mov	r2, r4
 800ed10:	462b      	mov	r3, r5
 800ed12:	1891      	adds	r1, r2, r2
 800ed14:	65b9      	str	r1, [r7, #88]	; 0x58
 800ed16:	415b      	adcs	r3, r3
 800ed18:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ed1e:	4621      	mov	r1, r4
 800ed20:	eb12 0801 	adds.w	r8, r2, r1
 800ed24:	4629      	mov	r1, r5
 800ed26:	eb43 0901 	adc.w	r9, r3, r1
 800ed2a:	f04f 0200 	mov.w	r2, #0
 800ed2e:	f04f 0300 	mov.w	r3, #0
 800ed32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ed36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ed3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ed3e:	4690      	mov	r8, r2
 800ed40:	4699      	mov	r9, r3
 800ed42:	4623      	mov	r3, r4
 800ed44:	eb18 0303 	adds.w	r3, r8, r3
 800ed48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ed4c:	462b      	mov	r3, r5
 800ed4e:	eb49 0303 	adc.w	r3, r9, r3
 800ed52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ed56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed5a:	685b      	ldr	r3, [r3, #4]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ed62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ed66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	18db      	adds	r3, r3, r3
 800ed6e:	653b      	str	r3, [r7, #80]	; 0x50
 800ed70:	4613      	mov	r3, r2
 800ed72:	eb42 0303 	adc.w	r3, r2, r3
 800ed76:	657b      	str	r3, [r7, #84]	; 0x54
 800ed78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ed7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ed80:	f7f1 fe4a 	bl	8000a18 <__aeabi_uldivmod>
 800ed84:	4602      	mov	r2, r0
 800ed86:	460b      	mov	r3, r1
 800ed88:	4b61      	ldr	r3, [pc, #388]	; (800ef10 <UART_SetConfig+0x2d4>)
 800ed8a:	fba3 2302 	umull	r2, r3, r3, r2
 800ed8e:	095b      	lsrs	r3, r3, #5
 800ed90:	011c      	lsls	r4, r3, #4
 800ed92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ed96:	2200      	movs	r2, #0
 800ed98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ed9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800eda0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800eda4:	4642      	mov	r2, r8
 800eda6:	464b      	mov	r3, r9
 800eda8:	1891      	adds	r1, r2, r2
 800edaa:	64b9      	str	r1, [r7, #72]	; 0x48
 800edac:	415b      	adcs	r3, r3
 800edae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800edb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800edb4:	4641      	mov	r1, r8
 800edb6:	eb12 0a01 	adds.w	sl, r2, r1
 800edba:	4649      	mov	r1, r9
 800edbc:	eb43 0b01 	adc.w	fp, r3, r1
 800edc0:	f04f 0200 	mov.w	r2, #0
 800edc4:	f04f 0300 	mov.w	r3, #0
 800edc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800edcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800edd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800edd4:	4692      	mov	sl, r2
 800edd6:	469b      	mov	fp, r3
 800edd8:	4643      	mov	r3, r8
 800edda:	eb1a 0303 	adds.w	r3, sl, r3
 800edde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ede2:	464b      	mov	r3, r9
 800ede4:	eb4b 0303 	adc.w	r3, fp, r3
 800ede8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800edec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	2200      	movs	r2, #0
 800edf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800edf8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800edfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ee00:	460b      	mov	r3, r1
 800ee02:	18db      	adds	r3, r3, r3
 800ee04:	643b      	str	r3, [r7, #64]	; 0x40
 800ee06:	4613      	mov	r3, r2
 800ee08:	eb42 0303 	adc.w	r3, r2, r3
 800ee0c:	647b      	str	r3, [r7, #68]	; 0x44
 800ee0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ee12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ee16:	f7f1 fdff 	bl	8000a18 <__aeabi_uldivmod>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	4611      	mov	r1, r2
 800ee20:	4b3b      	ldr	r3, [pc, #236]	; (800ef10 <UART_SetConfig+0x2d4>)
 800ee22:	fba3 2301 	umull	r2, r3, r3, r1
 800ee26:	095b      	lsrs	r3, r3, #5
 800ee28:	2264      	movs	r2, #100	; 0x64
 800ee2a:	fb02 f303 	mul.w	r3, r2, r3
 800ee2e:	1acb      	subs	r3, r1, r3
 800ee30:	00db      	lsls	r3, r3, #3
 800ee32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ee36:	4b36      	ldr	r3, [pc, #216]	; (800ef10 <UART_SetConfig+0x2d4>)
 800ee38:	fba3 2302 	umull	r2, r3, r3, r2
 800ee3c:	095b      	lsrs	r3, r3, #5
 800ee3e:	005b      	lsls	r3, r3, #1
 800ee40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ee44:	441c      	add	r4, r3
 800ee46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ee50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ee54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ee58:	4642      	mov	r2, r8
 800ee5a:	464b      	mov	r3, r9
 800ee5c:	1891      	adds	r1, r2, r2
 800ee5e:	63b9      	str	r1, [r7, #56]	; 0x38
 800ee60:	415b      	adcs	r3, r3
 800ee62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ee68:	4641      	mov	r1, r8
 800ee6a:	1851      	adds	r1, r2, r1
 800ee6c:	6339      	str	r1, [r7, #48]	; 0x30
 800ee6e:	4649      	mov	r1, r9
 800ee70:	414b      	adcs	r3, r1
 800ee72:	637b      	str	r3, [r7, #52]	; 0x34
 800ee74:	f04f 0200 	mov.w	r2, #0
 800ee78:	f04f 0300 	mov.w	r3, #0
 800ee7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ee80:	4659      	mov	r1, fp
 800ee82:	00cb      	lsls	r3, r1, #3
 800ee84:	4651      	mov	r1, sl
 800ee86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ee8a:	4651      	mov	r1, sl
 800ee8c:	00ca      	lsls	r2, r1, #3
 800ee8e:	4610      	mov	r0, r2
 800ee90:	4619      	mov	r1, r3
 800ee92:	4603      	mov	r3, r0
 800ee94:	4642      	mov	r2, r8
 800ee96:	189b      	adds	r3, r3, r2
 800ee98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ee9c:	464b      	mov	r3, r9
 800ee9e:	460a      	mov	r2, r1
 800eea0:	eb42 0303 	adc.w	r3, r2, r3
 800eea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800eea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800eeb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800eeb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800eebc:	460b      	mov	r3, r1
 800eebe:	18db      	adds	r3, r3, r3
 800eec0:	62bb      	str	r3, [r7, #40]	; 0x28
 800eec2:	4613      	mov	r3, r2
 800eec4:	eb42 0303 	adc.w	r3, r2, r3
 800eec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eeca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800eece:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800eed2:	f7f1 fda1 	bl	8000a18 <__aeabi_uldivmod>
 800eed6:	4602      	mov	r2, r0
 800eed8:	460b      	mov	r3, r1
 800eeda:	4b0d      	ldr	r3, [pc, #52]	; (800ef10 <UART_SetConfig+0x2d4>)
 800eedc:	fba3 1302 	umull	r1, r3, r3, r2
 800eee0:	095b      	lsrs	r3, r3, #5
 800eee2:	2164      	movs	r1, #100	; 0x64
 800eee4:	fb01 f303 	mul.w	r3, r1, r3
 800eee8:	1ad3      	subs	r3, r2, r3
 800eeea:	00db      	lsls	r3, r3, #3
 800eeec:	3332      	adds	r3, #50	; 0x32
 800eeee:	4a08      	ldr	r2, [pc, #32]	; (800ef10 <UART_SetConfig+0x2d4>)
 800eef0:	fba2 2303 	umull	r2, r3, r2, r3
 800eef4:	095b      	lsrs	r3, r3, #5
 800eef6:	f003 0207 	and.w	r2, r3, #7
 800eefa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4422      	add	r2, r4
 800ef02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ef04:	e105      	b.n	800f112 <UART_SetConfig+0x4d6>
 800ef06:	bf00      	nop
 800ef08:	40011000 	.word	0x40011000
 800ef0c:	40011400 	.word	0x40011400
 800ef10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ef14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ef18:	2200      	movs	r2, #0
 800ef1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ef1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ef22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ef26:	4642      	mov	r2, r8
 800ef28:	464b      	mov	r3, r9
 800ef2a:	1891      	adds	r1, r2, r2
 800ef2c:	6239      	str	r1, [r7, #32]
 800ef2e:	415b      	adcs	r3, r3
 800ef30:	627b      	str	r3, [r7, #36]	; 0x24
 800ef32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ef36:	4641      	mov	r1, r8
 800ef38:	1854      	adds	r4, r2, r1
 800ef3a:	4649      	mov	r1, r9
 800ef3c:	eb43 0501 	adc.w	r5, r3, r1
 800ef40:	f04f 0200 	mov.w	r2, #0
 800ef44:	f04f 0300 	mov.w	r3, #0
 800ef48:	00eb      	lsls	r3, r5, #3
 800ef4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ef4e:	00e2      	lsls	r2, r4, #3
 800ef50:	4614      	mov	r4, r2
 800ef52:	461d      	mov	r5, r3
 800ef54:	4643      	mov	r3, r8
 800ef56:	18e3      	adds	r3, r4, r3
 800ef58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ef5c:	464b      	mov	r3, r9
 800ef5e:	eb45 0303 	adc.w	r3, r5, r3
 800ef62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ef66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ef72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ef76:	f04f 0200 	mov.w	r2, #0
 800ef7a:	f04f 0300 	mov.w	r3, #0
 800ef7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ef82:	4629      	mov	r1, r5
 800ef84:	008b      	lsls	r3, r1, #2
 800ef86:	4621      	mov	r1, r4
 800ef88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ef8c:	4621      	mov	r1, r4
 800ef8e:	008a      	lsls	r2, r1, #2
 800ef90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ef94:	f7f1 fd40 	bl	8000a18 <__aeabi_uldivmod>
 800ef98:	4602      	mov	r2, r0
 800ef9a:	460b      	mov	r3, r1
 800ef9c:	4b60      	ldr	r3, [pc, #384]	; (800f120 <UART_SetConfig+0x4e4>)
 800ef9e:	fba3 2302 	umull	r2, r3, r3, r2
 800efa2:	095b      	lsrs	r3, r3, #5
 800efa4:	011c      	lsls	r4, r3, #4
 800efa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800efaa:	2200      	movs	r2, #0
 800efac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800efb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800efb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800efb8:	4642      	mov	r2, r8
 800efba:	464b      	mov	r3, r9
 800efbc:	1891      	adds	r1, r2, r2
 800efbe:	61b9      	str	r1, [r7, #24]
 800efc0:	415b      	adcs	r3, r3
 800efc2:	61fb      	str	r3, [r7, #28]
 800efc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800efc8:	4641      	mov	r1, r8
 800efca:	1851      	adds	r1, r2, r1
 800efcc:	6139      	str	r1, [r7, #16]
 800efce:	4649      	mov	r1, r9
 800efd0:	414b      	adcs	r3, r1
 800efd2:	617b      	str	r3, [r7, #20]
 800efd4:	f04f 0200 	mov.w	r2, #0
 800efd8:	f04f 0300 	mov.w	r3, #0
 800efdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800efe0:	4659      	mov	r1, fp
 800efe2:	00cb      	lsls	r3, r1, #3
 800efe4:	4651      	mov	r1, sl
 800efe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800efea:	4651      	mov	r1, sl
 800efec:	00ca      	lsls	r2, r1, #3
 800efee:	4610      	mov	r0, r2
 800eff0:	4619      	mov	r1, r3
 800eff2:	4603      	mov	r3, r0
 800eff4:	4642      	mov	r2, r8
 800eff6:	189b      	adds	r3, r3, r2
 800eff8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800effc:	464b      	mov	r3, r9
 800effe:	460a      	mov	r2, r1
 800f000:	eb42 0303 	adc.w	r3, r2, r3
 800f004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	2200      	movs	r2, #0
 800f010:	67bb      	str	r3, [r7, #120]	; 0x78
 800f012:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f014:	f04f 0200 	mov.w	r2, #0
 800f018:	f04f 0300 	mov.w	r3, #0
 800f01c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800f020:	4649      	mov	r1, r9
 800f022:	008b      	lsls	r3, r1, #2
 800f024:	4641      	mov	r1, r8
 800f026:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f02a:	4641      	mov	r1, r8
 800f02c:	008a      	lsls	r2, r1, #2
 800f02e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800f032:	f7f1 fcf1 	bl	8000a18 <__aeabi_uldivmod>
 800f036:	4602      	mov	r2, r0
 800f038:	460b      	mov	r3, r1
 800f03a:	4b39      	ldr	r3, [pc, #228]	; (800f120 <UART_SetConfig+0x4e4>)
 800f03c:	fba3 1302 	umull	r1, r3, r3, r2
 800f040:	095b      	lsrs	r3, r3, #5
 800f042:	2164      	movs	r1, #100	; 0x64
 800f044:	fb01 f303 	mul.w	r3, r1, r3
 800f048:	1ad3      	subs	r3, r2, r3
 800f04a:	011b      	lsls	r3, r3, #4
 800f04c:	3332      	adds	r3, #50	; 0x32
 800f04e:	4a34      	ldr	r2, [pc, #208]	; (800f120 <UART_SetConfig+0x4e4>)
 800f050:	fba2 2303 	umull	r2, r3, r2, r3
 800f054:	095b      	lsrs	r3, r3, #5
 800f056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f05a:	441c      	add	r4, r3
 800f05c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f060:	2200      	movs	r2, #0
 800f062:	673b      	str	r3, [r7, #112]	; 0x70
 800f064:	677a      	str	r2, [r7, #116]	; 0x74
 800f066:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f06a:	4642      	mov	r2, r8
 800f06c:	464b      	mov	r3, r9
 800f06e:	1891      	adds	r1, r2, r2
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	415b      	adcs	r3, r3
 800f074:	60fb      	str	r3, [r7, #12]
 800f076:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f07a:	4641      	mov	r1, r8
 800f07c:	1851      	adds	r1, r2, r1
 800f07e:	6039      	str	r1, [r7, #0]
 800f080:	4649      	mov	r1, r9
 800f082:	414b      	adcs	r3, r1
 800f084:	607b      	str	r3, [r7, #4]
 800f086:	f04f 0200 	mov.w	r2, #0
 800f08a:	f04f 0300 	mov.w	r3, #0
 800f08e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f092:	4659      	mov	r1, fp
 800f094:	00cb      	lsls	r3, r1, #3
 800f096:	4651      	mov	r1, sl
 800f098:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f09c:	4651      	mov	r1, sl
 800f09e:	00ca      	lsls	r2, r1, #3
 800f0a0:	4610      	mov	r0, r2
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	4642      	mov	r2, r8
 800f0a8:	189b      	adds	r3, r3, r2
 800f0aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800f0ac:	464b      	mov	r3, r9
 800f0ae:	460a      	mov	r2, r1
 800f0b0:	eb42 0303 	adc.w	r3, r2, r3
 800f0b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f0b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	663b      	str	r3, [r7, #96]	; 0x60
 800f0c0:	667a      	str	r2, [r7, #100]	; 0x64
 800f0c2:	f04f 0200 	mov.w	r2, #0
 800f0c6:	f04f 0300 	mov.w	r3, #0
 800f0ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800f0ce:	4649      	mov	r1, r9
 800f0d0:	008b      	lsls	r3, r1, #2
 800f0d2:	4641      	mov	r1, r8
 800f0d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f0d8:	4641      	mov	r1, r8
 800f0da:	008a      	lsls	r2, r1, #2
 800f0dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f0e0:	f7f1 fc9a 	bl	8000a18 <__aeabi_uldivmod>
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	460b      	mov	r3, r1
 800f0e8:	4b0d      	ldr	r3, [pc, #52]	; (800f120 <UART_SetConfig+0x4e4>)
 800f0ea:	fba3 1302 	umull	r1, r3, r3, r2
 800f0ee:	095b      	lsrs	r3, r3, #5
 800f0f0:	2164      	movs	r1, #100	; 0x64
 800f0f2:	fb01 f303 	mul.w	r3, r1, r3
 800f0f6:	1ad3      	subs	r3, r2, r3
 800f0f8:	011b      	lsls	r3, r3, #4
 800f0fa:	3332      	adds	r3, #50	; 0x32
 800f0fc:	4a08      	ldr	r2, [pc, #32]	; (800f120 <UART_SetConfig+0x4e4>)
 800f0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800f102:	095b      	lsrs	r3, r3, #5
 800f104:	f003 020f 	and.w	r2, r3, #15
 800f108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	4422      	add	r2, r4
 800f110:	609a      	str	r2, [r3, #8]
}
 800f112:	bf00      	nop
 800f114:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800f118:	46bd      	mov	sp, r7
 800f11a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f11e:	bf00      	nop
 800f120:	51eb851f 	.word	0x51eb851f

0800f124 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev, int32_t *pOffsetCalibrationDataMicroMeter) {
 800f124:	b580      	push	{r7, lr}
 800f126:	b084      	sub	sp, #16
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f12e:	2300      	movs	r3, #0
 800f130:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev, pOffsetCalibrationDataMicroMeter);
 800f132:	6839      	ldr	r1, [r7, #0]
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f001 fca4 	bl	8010a82 <VL53L0X_get_offset_calibration_data_micro_meter>
 800f13a:	4603      	mov	r3, r0
 800f13c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800f13e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f142:	4618      	mov	r0, r3
 800f144:	3710      	adds	r7, #16
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}

0800f14a <VL53L0X_SetDeviceAddress>:
}

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress) {
 800f14a:	b580      	push	{r7, lr}
 800f14c:	b084      	sub	sp, #16
 800f14e:	af00      	add	r7, sp, #0
 800f150:	6078      	str	r0, [r7, #4]
 800f152:	460b      	mov	r3, r1
 800f154:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f156:	2300      	movs	r3, #0
 800f158:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS, DeviceAddress / 2);
 800f15a:	78fb      	ldrb	r3, [r7, #3]
 800f15c:	085b      	lsrs	r3, r3, #1
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	461a      	mov	r2, r3
 800f162:	218a      	movs	r1, #138	; 0x8a
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f004 fc03 	bl	8013970 <VL53L0X_WrByte>
 800f16a:	4603      	mov	r3, r0
 800f16c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800f16e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f172:	4618      	mov	r0, r3
 800f174:	3710      	adds	r7, #16
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
	...

0800f17c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev) {
 800f17c:	b5b0      	push	{r4, r5, r7, lr}
 800f17e:	b096      	sub	sp, #88	; 0x58
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f184:	2300      	movs	r3, #0
 800f186:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800f18a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d107      	bne.n	800f1a2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800f192:	2200      	movs	r2, #0
 800f194:	2188      	movs	r1, #136	; 0x88
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f004 fbea 	bl	8013970 <VL53L0X_WrByte>
 800f19c:	4603      	mov	r3, r0
 800f19e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f1b0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800f1ba:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps, (FixPoint1616_t )((0x00016B85))); /* 1.42 No Cover Glass*/
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	4a9e      	ldr	r2, [pc, #632]	; (800f43c <VL53L0X_DataInit+0x2c0>)
 800f1c2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4a9d      	ldr	r2, [pc, #628]	; (800f440 <VL53L0X_DataInit+0x2c4>)
 800f1ca:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800f1d4:	f107 0310 	add.w	r3, r7, #16
 800f1d8:	4619      	mov	r1, r3
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 fab4 	bl	800f748 <VL53L0X_GetDeviceParameters>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800f1e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d112      	bne.n	800f214 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f103 0410 	add.w	r4, r3, #16
 800f1fc:	f107 0510 	add.w	r5, r7, #16
 800f200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f20a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f20c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2264      	movs	r2, #100	; 0x64
 800f218:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f44f 7261 	mov.w	r2, #900	; 0x384
 800f222:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800f22c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800f236:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2201      	movs	r2, #1
 800f23e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800f242:	2201      	movs	r2, #1
 800f244:	2180      	movs	r1, #128	; 0x80
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f004 fb92 	bl	8013970 <VL53L0X_WrByte>
 800f24c:	4603      	mov	r3, r0
 800f24e:	461a      	mov	r2, r3
 800f250:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f254:	4313      	orrs	r3, r2
 800f256:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800f25a:	2201      	movs	r2, #1
 800f25c:	21ff      	movs	r1, #255	; 0xff
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f004 fb86 	bl	8013970 <VL53L0X_WrByte>
 800f264:	4603      	mov	r3, r0
 800f266:	461a      	mov	r2, r3
 800f268:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f26c:	4313      	orrs	r3, r2
 800f26e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800f272:	2200      	movs	r2, #0
 800f274:	2100      	movs	r1, #0
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f004 fb7a 	bl	8013970 <VL53L0X_WrByte>
 800f27c:	4603      	mov	r3, r0
 800f27e:	461a      	mov	r2, r3
 800f280:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f284:	4313      	orrs	r3, r2
 800f286:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800f28a:	f107 030f 	add.w	r3, r7, #15
 800f28e:	461a      	mov	r2, r3
 800f290:	2191      	movs	r1, #145	; 0x91
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f004 fbee 	bl	8013a74 <VL53L0X_RdByte>
 800f298:	4603      	mov	r3, r0
 800f29a:	461a      	mov	r2, r3
 800f29c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800f2a6:	7bfa      	ldrb	r2, [r7, #15]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	2100      	movs	r1, #0
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f004 fb5c 	bl	8013970 <VL53L0X_WrByte>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f2c0:	4313      	orrs	r3, r2
 800f2c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	21ff      	movs	r1, #255	; 0xff
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f004 fb50 	bl	8013970 <VL53L0X_WrByte>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f2d8:	4313      	orrs	r3, r2
 800f2da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800f2de:	2200      	movs	r2, #0
 800f2e0:	2180      	movs	r1, #128	; 0x80
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f004 fb44 	bl	8013970 <VL53L0X_WrByte>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f2f0:	4313      	orrs	r3, r2
 800f2f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	653b      	str	r3, [r7, #80]	; 0x50
 800f2fa:	e014      	b.n	800f326 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800f2fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f300:	2b00      	cmp	r3, #0
 800f302:	d114      	bne.n	800f32e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800f304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f306:	b29b      	uxth	r3, r3
 800f308:	2201      	movs	r2, #1
 800f30a:	4619      	mov	r1, r3
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f000 fd0f 	bl	800fd30 <VL53L0X_SetLimitCheckEnable>
 800f312:	4603      	mov	r3, r0
 800f314:	461a      	mov	r2, r3
 800f316:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f31a:	4313      	orrs	r3, r2
 800f31c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800f320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f322:	3301      	adds	r3, #1
 800f324:	653b      	str	r3, [r7, #80]	; 0x50
 800f326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f328:	2b05      	cmp	r3, #5
 800f32a:	dde7      	ble.n	800f2fc <VL53L0X_DataInit+0x180>
 800f32c:	e000      	b.n	800f330 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800f32e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800f330:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f334:	2b00      	cmp	r3, #0
 800f336:	d107      	bne.n	800f348 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800f338:	2200      	movs	r2, #0
 800f33a:	2102      	movs	r1, #2
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f000 fcf7 	bl	800fd30 <VL53L0X_SetLimitCheckEnable>
 800f342:	4603      	mov	r3, r0
 800f344:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800f348:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d107      	bne.n	800f360 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800f350:	2200      	movs	r2, #0
 800f352:	2103      	movs	r1, #3
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 fceb 	bl	800fd30 <VL53L0X_SetLimitCheckEnable>
 800f35a:	4603      	mov	r3, r0
 800f35c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800f360:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f364:	2b00      	cmp	r3, #0
 800f366:	d107      	bne.n	800f378 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800f368:	2200      	movs	r2, #0
 800f36a:	2104      	movs	r1, #4
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f000 fcdf 	bl	800fd30 <VL53L0X_SetLimitCheckEnable>
 800f372:	4603      	mov	r3, r0
 800f374:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800f378:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d107      	bne.n	800f390 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800f380:	2200      	movs	r2, #0
 800f382:	2105      	movs	r1, #5
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f000 fcd3 	bl	800fd30 <VL53L0X_SetLimitCheckEnable>
 800f38a:	4603      	mov	r3, r0
 800f38c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800f390:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f394:	2b00      	cmp	r3, #0
 800f396:	d108      	bne.n	800f3aa <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800f398:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800f39c:	2100      	movs	r1, #0
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f000 fd76 	bl	800fe90 <VL53L0X_SetLimitCheckValue>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t) (18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800f3aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d108      	bne.n	800f3c4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800f3b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f3b6:	2101      	movs	r1, #1
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f000 fd69 	bl	800fe90 <VL53L0X_SetLimitCheckValue>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t) (25 * 65536 / 100));
		/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f3c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d108      	bne.n	800f3de <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800f3cc:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800f3d0:	2102      	movs	r1, #2
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f000 fd5c 	bl	800fe90 <VL53L0X_SetLimitCheckValue>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, (FixPoint1616_t) (35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f3de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d107      	bne.n	800f3f6 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	2103      	movs	r1, #3
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f000 fd50 	bl	800fe90 <VL53L0X_SetLimitCheckValue>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, (FixPoint1616_t) (0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f3f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d10f      	bne.n	800f41e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	22ff      	movs	r2, #255	; 0xff
 800f402:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xFF);
 800f406:	22ff      	movs	r2, #255	; 0xff
 800f408:	2101      	movs	r1, #1
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f004 fab0 	bl	8013970 <VL53L0X_WrByte>
 800f410:	4603      	mov	r3, r0
 800f412:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2201      	movs	r2, #1
 800f41a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800f41e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f422:	2b00      	cmp	r3, #0
 800f424:	d103      	bne.n	800f42e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2200      	movs	r2, #0
 800f42a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

	LOG_FUNCTION_END(Status);
	return Status;
 800f42e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800f432:	4618      	mov	r0, r3
 800f434:	3758      	adds	r7, #88	; 0x58
 800f436:	46bd      	mov	sp, r7
 800f438:	bdb0      	pop	{r4, r5, r7, pc}
 800f43a:	bf00      	nop
 800f43c:	00016b85 	.word	0x00016b85
 800f440:	000970a4 	.word	0x000970a4

0800f444 <VL53L0X_StaticInit>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev) {
 800f444:	b5b0      	push	{r4, r5, r7, lr}
 800f446:	b09e      	sub	sp, #120	; 0x78
 800f448:	af02      	add	r7, sp, #8
 800f44a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f44c:	2300      	movs	r3, #0
 800f44e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = { 0 };
 800f452:	f107 031c 	add.w	r3, r7, #28
 800f456:	2240      	movs	r2, #64	; 0x40
 800f458:	2100      	movs	r1, #0
 800f45a:	4618      	mov	r0, r3
 800f45c:	f004 fc0a 	bl	8013c74 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800f460:	2300      	movs	r3, #0
 800f462:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800f464:	2300      	movs	r3, #0
 800f466:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800f468:	2300      	movs	r3, #0
 800f46a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800f46e:	2300      	movs	r3, #0
 800f470:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800f472:	2300      	movs	r3, #0
 800f474:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800f476:	2300      	movs	r3, #0
 800f478:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800f47a:	2300      	movs	r3, #0
 800f47c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800f480:	2101      	movs	r1, #1
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f002 fa40 	bl	8011908 <VL53L0X_get_info_from_device>
 800f488:	4603      	mov	r3, r0
 800f48a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count = (uint32_t) VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadCount);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800f494:	663b      	str	r3, [r7, #96]	; 0x60
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadType);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800f49c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	/* NVM value invalid */
	if ((ApertureSpads > 1) || ((ApertureSpads == 1) && (count > 32)) || ((ApertureSpads == 0) && (count > 12)))
 800f4a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f4a4:	2b01      	cmp	r3, #1
 800f4a6:	d80d      	bhi.n	800f4c4 <VL53L0X_StaticInit+0x80>
 800f4a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	d102      	bne.n	800f4b6 <VL53L0X_StaticInit+0x72>
 800f4b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f4b2:	2b20      	cmp	r3, #32
 800f4b4:	d806      	bhi.n	800f4c4 <VL53L0X_StaticInit+0x80>
 800f4b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d10e      	bne.n	800f4dc <VL53L0X_StaticInit+0x98>
 800f4be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f4c0:	2b0c      	cmp	r3, #12
 800f4c2:	d90b      	bls.n	800f4dc <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount, &isApertureSpads);
 800f4c4:	f107 0218 	add.w	r2, r7, #24
 800f4c8:	f107 0314 	add.w	r3, r7, #20
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f001 fcd2 	bl	8010e78 <VL53L0X_perform_ref_spad_management>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800f4da:	e009      	b.n	800f4f0 <VL53L0X_StaticInit+0xac>
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800f4dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f4e0:	461a      	mov	r2, r3
 800f4e2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f001 fed3 	bl	8011290 <VL53L0X_set_reference_spads>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800f4f0:	4b94      	ldr	r3, [pc, #592]	; (800f744 <VL53L0X_StaticInit+0x300>)
 800f4f2:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800f4f4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d10f      	bne.n	800f51c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev, UseInternalTuningSettings);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800f502:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		if (UseInternalTuningSettings == 0)
 800f506:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d104      	bne.n	800f518 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev, pTuningSettingsPointer);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800f514:	66bb      	str	r3, [r7, #104]	; 0x68
 800f516:	e001      	b.n	800f51c <VL53L0X_StaticInit+0xd8>
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800f518:	4b8a      	ldr	r3, [pc, #552]	; (800f744 <VL53L0X_StaticInit+0x300>)
 800f51a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800f51c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f520:	2b00      	cmp	r3, #0
 800f522:	d106      	bne.n	800f532 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800f524:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f003 fb0c 	bl	8012b44 <VL53L0X_load_tuning_settings>
 800f52c:	4603      	mov	r3, r0
 800f52e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800f532:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f536:	2b00      	cmp	r3, #0
 800f538:	d10a      	bne.n	800f550 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800f53a:	2300      	movs	r3, #0
 800f53c:	9300      	str	r3, [sp, #0]
 800f53e:	2304      	movs	r3, #4
 800f540:	2200      	movs	r2, #0
 800f542:	2100      	movs	r1, #0
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f001 f8cb 	bl	80106e0 <VL53L0X_SetGpioConfig>
 800f54a:	4603      	mov	r3, r0
 800f54c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f550:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f554:	2b00      	cmp	r3, #0
 800f556:	d121      	bne.n	800f59c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800f558:	2201      	movs	r2, #1
 800f55a:	21ff      	movs	r1, #255	; 0xff
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f004 fa07 	bl	8013970 <VL53L0X_WrByte>
 800f562:	4603      	mov	r3, r0
 800f564:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800f568:	f107 031a 	add.w	r3, r7, #26
 800f56c:	461a      	mov	r2, r3
 800f56e:	2184      	movs	r1, #132	; 0x84
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f004 faa9 	bl	8013ac8 <VL53L0X_RdWord>
 800f576:	4603      	mov	r3, r0
 800f578:	461a      	mov	r2, r3
 800f57a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f57e:	4313      	orrs	r3, r2
 800f580:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800f584:	2200      	movs	r2, #0
 800f586:	21ff      	movs	r1, #255	; 0xff
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f004 f9f1 	bl	8013970 <VL53L0X_WrByte>
 800f58e:	4603      	mov	r3, r0
 800f590:	461a      	mov	r2, r3
 800f592:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f596:	4313      	orrs	r3, r2
 800f598:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f59c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d105      	bne.n	800f5b0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
 800f5a4:	8b7b      	ldrh	r3, [r7, #26]
 800f5a6:	011b      	lsls	r3, r3, #4
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800f5b0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d108      	bne.n	800f5ca <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800f5b8:	f107 031c 	add.w	r3, r7, #28
 800f5bc:	4619      	mov	r1, r3
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f000 f8c2 	bl	800f748 <VL53L0X_GetDeviceParameters>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	if (Status == VL53L0X_ERROR_NONE) {
 800f5ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d110      	bne.n	800f5f4 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800f5d2:	f107 0319 	add.w	r3, r7, #25
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f000 f984 	bl	800f8e6 <VL53L0X_GetFractionEnable>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800f5e4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d103      	bne.n	800f5f4 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800f5ec:	7e7a      	ldrb	r2, [r7, #25]
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800f5f4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d10e      	bne.n	800f61a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f103 0410 	add.w	r4, r3, #16
 800f602:	f107 051c 	add.w	r5, r7, #28
 800f606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f60a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f60c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f60e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f612:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f616:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800f61a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d111      	bne.n	800f646 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800f622:	f107 0319 	add.w	r3, r7, #25
 800f626:	461a      	mov	r2, r3
 800f628:	2101      	movs	r1, #1
 800f62a:	6878      	ldr	r0, [r7, #4]
 800f62c:	f004 fa22 	bl	8013a74 <VL53L0X_RdByte>
 800f630:	4603      	mov	r3, r0
 800f632:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800f636:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d103      	bne.n	800f646 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800f63e:	7e7a      	ldrb	r2, [r7, #25]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800f646:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d107      	bne.n	800f65e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800f64e:	2200      	movs	r2, #0
 800f650:	2100      	movs	r1, #0
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f000 f9a4 	bl	800f9a0 <VL53L0X_SetSequenceStepEnable>
 800f658:	4603      	mov	r3, r0
 800f65a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_TCC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800f65e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f662:	2b00      	cmp	r3, #0
 800f664:	d107      	bne.n	800f676 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800f666:	2200      	movs	r2, #0
 800f668:	2102      	movs	r1, #2
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f000 f998 	bl	800f9a0 <VL53L0X_SetSequenceStepEnable>
 800f670:	4603      	mov	r3, r0
 800f672:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);

	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800f676:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d103      	bne.n	800f686 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2203      	movs	r2, #3
 800f682:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800f686:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d109      	bne.n	800f6a2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800f68e:	f107 0313 	add.w	r3, r7, #19
 800f692:	461a      	mov	r2, r3
 800f694:	2100      	movs	r1, #0
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f000 f96a 	bl	800f970 <VL53L0X_GetVcselPulsePeriod>
 800f69c:	4603      	mov	r3, r0
 800f69e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_VCSEL_PERIOD_PRE_RANGE, &vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f6a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d103      	bne.n	800f6b2 <VL53L0X_StaticInit+0x26e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PreRangeVcselPulsePeriod, vcselPulsePeriodPCLK);
 800f6aa:	7cfa      	ldrb	r2, [r7, #19]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800f6b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d109      	bne.n	800f6ce <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800f6ba:	f107 0313 	add.w	r3, r7, #19
 800f6be:	461a      	mov	r2, r3
 800f6c0:	2101      	movs	r1, #1
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 f954 	bl	800f970 <VL53L0X_GetVcselPulsePeriod>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_VCSEL_PERIOD_FINAL_RANGE, &vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f6ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d103      	bne.n	800f6de <VL53L0X_StaticInit+0x29a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, FinalRangeVcselPulsePeriod, vcselPulsePeriodPCLK);
 800f6d6:	7cfa      	ldrb	r2, [r7, #19]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800f6de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d109      	bne.n	800f6fa <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(Dev,
 800f6e6:	f107 030c 	add.w	r3, r7, #12
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	2103      	movs	r1, #3
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f002 fe8c 	bl	801240c <get_sequence_step_timeout>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_PRE_RANGE, &seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f6fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d103      	bne.n	800f70a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PreRangeTimeoutMicroSecs, seqTimeoutMicroSecs);
 800f702:	68fa      	ldr	r2, [r7, #12]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800f70a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d109      	bne.n	800f726 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(Dev,
 800f712:	f107 030c 	add.w	r3, r7, #12
 800f716:	461a      	mov	r2, r3
 800f718:	2104      	movs	r1, #4
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f002 fe76 	bl	801240c <get_sequence_step_timeout>
 800f720:	4603      	mov	r3, r0
 800f722:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, &seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f726:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d103      	bne.n	800f736 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, FinalRangeTimeoutMicroSecs, seqTimeoutMicroSecs);
 800f72e:	68fa      	ldr	r2, [r7, #12]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f736:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3770      	adds	r7, #112	; 0x70
 800f73e:	46bd      	mov	sp, r7
 800f740:	bdb0      	pop	{r4, r5, r7, pc}
 800f742:	bf00      	nop
 800f744:	20000028 	.word	0x20000028

0800f748 <VL53L0X_GetDeviceParameters>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev, VL53L0X_DeviceParameters_t *pDeviceParameters) {
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f752:	2300      	movs	r3, #0
 800f754:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	4619      	mov	r1, r3
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f000 f8b0 	bl	800f8c0 <VL53L0X_GetDeviceMode>
 800f760:	4603      	mov	r3, r0
 800f762:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800f764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d107      	bne.n	800f77c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev, &(pDeviceParameters->InterMeasurementPeriodMilliSeconds));
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	3308      	adds	r3, #8
 800f770:	4619      	mov	r1, r3
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f000 fa60 	bl	800fc38 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800f778:	4603      	mov	r3, r0
 800f77a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800f77c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d102      	bne.n	800f78a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	2200      	movs	r2, #0
 800f788:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800f78a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d107      	bne.n	800f7a2 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev, &(pDeviceParameters->XTalkCompensationRateMegaCps));
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	3310      	adds	r3, #16
 800f796:	4619      	mov	r1, r3
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f000 fa96 	bl	800fcca <VL53L0X_GetXTalkCompensationRateMegaCps>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800f7a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d107      	bne.n	800f7ba <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev, &(pDeviceParameters->RangeOffsetMicroMeters));
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	3314      	adds	r3, #20
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f7ff fcb7 	bl	800f124 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800f7ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d134      	bne.n	800f82c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	60bb      	str	r3, [r7, #8]
 800f7c6:	e02a      	b.n	800f81e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800f7c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d12a      	bne.n	800f826 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i, &(pDeviceParameters->LimitChecksValue[i]));
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	b299      	uxth	r1, r3
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	3308      	adds	r3, #8
 800f7d8:	009b      	lsls	r3, r3, #2
 800f7da:	683a      	ldr	r2, [r7, #0]
 800f7dc:	4413      	add	r3, r2
 800f7de:	3304      	adds	r3, #4
 800f7e0:	461a      	mov	r2, r3
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f000 fbb6 	bl	800ff54 <VL53L0X_GetLimitCheckValue>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	7bfb      	ldrb	r3, [r7, #15]
 800f7ee:	4313      	orrs	r3, r2
 800f7f0:	73fb      	strb	r3, [r7, #15]
			}
			else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800f7f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d117      	bne.n	800f82a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i, &(pDeviceParameters->LimitChecksEnable[i]));
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	b299      	uxth	r1, r3
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	3318      	adds	r3, #24
 800f802:	683a      	ldr	r2, [r7, #0]
 800f804:	4413      	add	r3, r2
 800f806:	461a      	mov	r2, r3
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f000 fb1d 	bl	800fe48 <VL53L0X_GetLimitCheckEnable>
 800f80e:	4603      	mov	r3, r0
 800f810:	461a      	mov	r2, r3
 800f812:	7bfb      	ldrb	r3, [r7, #15]
 800f814:	4313      	orrs	r3, r2
 800f816:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	3301      	adds	r3, #1
 800f81c:	60bb      	str	r3, [r7, #8]
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	2b05      	cmp	r3, #5
 800f822:	ddd1      	ble.n	800f7c8 <VL53L0X_GetDeviceParameters+0x80>
 800f824:	e002      	b.n	800f82c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800f826:	bf00      	nop
 800f828:	e000      	b.n	800f82c <VL53L0X_GetDeviceParameters+0xe4>
			}
			else {
				break;
 800f82a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f82c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d107      	bne.n	800f844 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev, &(pDeviceParameters->WrapAroundCheckEnable));
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	333c      	adds	r3, #60	; 0x3c
 800f838:	4619      	mov	r1, r3
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f000 fc18 	bl	8010070 <VL53L0X_GetWrapAroundCheckEnable>
 800f840:	4603      	mov	r3, r0
 800f842:	73fb      	strb	r3, [r7, #15]
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800f844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d107      	bne.n	800f85c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev, &(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	3304      	adds	r3, #4
 800f850:	4619      	mov	r1, r3
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f000 f879 	bl	800f94a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800f858:	4603      	mov	r3, r0
 800f85a:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f85c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f860:	4618      	mov	r0, r3
 800f862:	3710      	adds	r7, #16
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}

0800f868 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode) {
 800f868:	b480      	push	{r7}
 800f86a:	b085      	sub	sp, #20
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	460b      	mov	r3, r1
 800f872:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f874:	2300      	movs	r3, #0
 800f876:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800f878:	78fb      	ldrb	r3, [r7, #3]
 800f87a:	2b15      	cmp	r3, #21
 800f87c:	bf8c      	ite	hi
 800f87e:	2201      	movhi	r2, #1
 800f880:	2200      	movls	r2, #0
 800f882:	b2d2      	uxtb	r2, r2
 800f884:	2a00      	cmp	r2, #0
 800f886:	d10e      	bne.n	800f8a6 <VL53L0X_SetDeviceMode+0x3e>
 800f888:	2201      	movs	r2, #1
 800f88a:	409a      	lsls	r2, r3
 800f88c:	4b0b      	ldr	r3, [pc, #44]	; (800f8bc <VL53L0X_SetDeviceMode+0x54>)
 800f88e:	4013      	ands	r3, r2
 800f890:	2b00      	cmp	r3, #0
 800f892:	bf14      	ite	ne
 800f894:	2301      	movne	r3, #1
 800f896:	2300      	moveq	r3, #0
 800f898:	b2db      	uxtb	r3, r3
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d003      	beq.n	800f8a6 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	78fa      	ldrb	r2, [r7, #3]
 800f8a2:	741a      	strb	r2, [r3, #16]
		break;
 800f8a4:	e001      	b.n	800f8aa <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800f8a6:	23f8      	movs	r3, #248	; 0xf8
 800f8a8:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f8aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3714      	adds	r7, #20
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b8:	4770      	bx	lr
 800f8ba:	bf00      	nop
 800f8bc:	0030000b 	.word	0x0030000b

0800f8c0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes *pDeviceMode) {
 800f8c0:	b480      	push	{r7}
 800f8c2:	b085      	sub	sp, #20
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	7c1a      	ldrb	r2, [r3, #16]
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800f8d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	3714      	adds	r7, #20
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e4:	4770      	bx	lr

0800f8e6 <VL53L0X_GetFractionEnable>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled) {
 800f8e6:	b580      	push	{r7, lr}
 800f8e8:	b084      	sub	sp, #16
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	6078      	str	r0, [r7, #4]
 800f8ee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800f8f4:	683a      	ldr	r2, [r7, #0]
 800f8f6:	2109      	movs	r1, #9
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f004 f8bb 	bl	8013a74 <VL53L0X_RdByte>
 800f8fe:	4603      	mov	r3, r0
 800f900:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800f902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d106      	bne.n	800f918 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	f003 0301 	and.w	r3, r3, #1
 800f912:	b2da      	uxtb	r2, r3
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800f918:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3710      	adds	r7, #16
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev, uint32_t MeasurementTimingBudgetMicroSeconds) {
 800f924:	b580      	push	{r7, lr}
 800f926:	b084      	sub	sp, #16
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f92e:	2300      	movs	r3, #0
 800f930:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev, MeasurementTimingBudgetMicroSeconds);
 800f932:	6839      	ldr	r1, [r7, #0]
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f002 ff73 	bl	8012820 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800f93a:	4603      	mov	r3, r0
 800f93c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);

	return Status;
 800f93e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f942:	4618      	mov	r0, r3
 800f944:	3710      	adds	r7, #16
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}

0800f94a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev, uint32_t *pMeasurementTimingBudgetMicroSeconds) {
 800f94a:	b580      	push	{r7, lr}
 800f94c:	b084      	sub	sp, #16
 800f94e:	af00      	add	r7, sp, #0
 800f950:	6078      	str	r0, [r7, #4]
 800f952:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f954:	2300      	movs	r3, #0
 800f956:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev, pMeasurementTimingBudgetMicroSeconds);
 800f958:	6839      	ldr	r1, [r7, #0]
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f003 f840 	bl	80129e0 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800f960:	4603      	mov	r3, r0
 800f962:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800f964:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f968:	4618      	mov	r0, r3
 800f96a:	3710      	adds	r7, #16
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <VL53L0X_GetVcselPulsePeriod>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev, VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK) {
 800f970:	b580      	push	{r7, lr}
 800f972:	b086      	sub	sp, #24
 800f974:	af00      	add	r7, sp, #0
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	460b      	mov	r3, r1
 800f97a:	607a      	str	r2, [r7, #4]
 800f97c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f97e:	2300      	movs	r3, #0
 800f980:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType, pVCSELPulsePeriodPCLK);
 800f982:	7afb      	ldrb	r3, [r7, #11]
 800f984:	687a      	ldr	r2, [r7, #4]
 800f986:	4619      	mov	r1, r3
 800f988:	68f8      	ldr	r0, [r7, #12]
 800f98a:	f002 ff12 	bl	80127b2 <VL53L0X_get_vcsel_pulse_period>
 800f98e:	4603      	mov	r3, r0
 800f990:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800f992:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f996:	4618      	mov	r0, r3
 800f998:	3718      	adds	r7, #24
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}
	...

0800f9a0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev, VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled) {
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b086      	sub	sp, #24
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	460b      	mov	r3, r1
 800f9aa:	70fb      	strb	r3, [r7, #3]
 800f9ac:	4613      	mov	r3, r2
 800f9ae:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &SequenceConfig);
 800f9bc:	f107 030f 	add.w	r3, r7, #15
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	2101      	movs	r1, #1
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f004 f855 	bl	8013a74 <VL53L0X_RdByte>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	75fb      	strb	r3, [r7, #23]

	SequenceConfigNew = SequenceConfig;
 800f9ce:	7bfb      	ldrb	r3, [r7, #15]
 800f9d0:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800f9d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d15a      	bne.n	800fa90 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800f9da:	78bb      	ldrb	r3, [r7, #2]
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	d12b      	bne.n	800fa38 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800f9e0:	78fb      	ldrb	r3, [r7, #3]
 800f9e2:	2b04      	cmp	r3, #4
 800f9e4:	d825      	bhi.n	800fa32 <VL53L0X_SetSequenceStepEnable+0x92>
 800f9e6:	a201      	add	r2, pc, #4	; (adr r2, 800f9ec <VL53L0X_SetSequenceStepEnable+0x4c>)
 800f9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9ec:	0800fa01 	.word	0x0800fa01
 800f9f0:	0800fa0b 	.word	0x0800fa0b
 800f9f4:	0800fa15 	.word	0x0800fa15
 800f9f8:	0800fa1f 	.word	0x0800fa1f
 800f9fc:	0800fa29 	.word	0x0800fa29
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800fa00:	7dbb      	ldrb	r3, [r7, #22]
 800fa02:	f043 0310 	orr.w	r3, r3, #16
 800fa06:	75bb      	strb	r3, [r7, #22]
				break;
 800fa08:	e043      	b.n	800fa92 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800fa0a:	7dbb      	ldrb	r3, [r7, #22]
 800fa0c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800fa10:	75bb      	strb	r3, [r7, #22]
				break;
 800fa12:	e03e      	b.n	800fa92 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800fa14:	7dbb      	ldrb	r3, [r7, #22]
 800fa16:	f043 0304 	orr.w	r3, r3, #4
 800fa1a:	75bb      	strb	r3, [r7, #22]
				break;
 800fa1c:	e039      	b.n	800fa92 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800fa1e:	7dbb      	ldrb	r3, [r7, #22]
 800fa20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa24:	75bb      	strb	r3, [r7, #22]
				break;
 800fa26:	e034      	b.n	800fa92 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800fa28:	7dbb      	ldrb	r3, [r7, #22]
 800fa2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fa2e:	75bb      	strb	r3, [r7, #22]
				break;
 800fa30:	e02f      	b.n	800fa92 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800fa32:	23fc      	movs	r3, #252	; 0xfc
 800fa34:	75fb      	strb	r3, [r7, #23]
 800fa36:	e02c      	b.n	800fa92 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
		else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800fa38:	78fb      	ldrb	r3, [r7, #3]
 800fa3a:	2b04      	cmp	r3, #4
 800fa3c:	d825      	bhi.n	800fa8a <VL53L0X_SetSequenceStepEnable+0xea>
 800fa3e:	a201      	add	r2, pc, #4	; (adr r2, 800fa44 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800fa40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa44:	0800fa59 	.word	0x0800fa59
 800fa48:	0800fa63 	.word	0x0800fa63
 800fa4c:	0800fa6d 	.word	0x0800fa6d
 800fa50:	0800fa77 	.word	0x0800fa77
 800fa54:	0800fa81 	.word	0x0800fa81
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800fa58:	7dbb      	ldrb	r3, [r7, #22]
 800fa5a:	f023 0310 	bic.w	r3, r3, #16
 800fa5e:	75bb      	strb	r3, [r7, #22]
				break;
 800fa60:	e017      	b.n	800fa92 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800fa62:	7dbb      	ldrb	r3, [r7, #22]
 800fa64:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800fa68:	75bb      	strb	r3, [r7, #22]
				break;
 800fa6a:	e012      	b.n	800fa92 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800fa6c:	7dbb      	ldrb	r3, [r7, #22]
 800fa6e:	f023 0304 	bic.w	r3, r3, #4
 800fa72:	75bb      	strb	r3, [r7, #22]
				break;
 800fa74:	e00d      	b.n	800fa92 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800fa76:	7dbb      	ldrb	r3, [r7, #22]
 800fa78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa7c:	75bb      	strb	r3, [r7, #22]
				break;
 800fa7e:	e008      	b.n	800fa92 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800fa80:	7dbb      	ldrb	r3, [r7, #22]
 800fa82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa86:	75bb      	strb	r3, [r7, #22]
				break;
 800fa88:	e003      	b.n	800fa92 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800fa8a:	23fc      	movs	r3, #252	; 0xfc
 800fa8c:	75fb      	strb	r3, [r7, #23]
 800fa8e:	e000      	b.n	800fa92 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800fa90:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800fa92:	7bfb      	ldrb	r3, [r7, #15]
 800fa94:	7dba      	ldrb	r2, [r7, #22]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d01e      	beq.n	800fad8 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800fa9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d107      	bne.n	800fab2 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800faa2:	7dbb      	ldrb	r3, [r7, #22]
 800faa4:	461a      	mov	r2, r3
 800faa6:	2101      	movs	r1, #1
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f003 ff61 	bl	8013970 <VL53L0X_WrByte>
 800faae:	4603      	mov	r3, r0
 800fab0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800fab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d103      	bne.n	800fac2 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	7dba      	ldrb	r2, [r7, #22]
 800fabe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800fac2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d106      	bne.n	800fad8 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev, MeasurementTimingBudgetMicroSeconds, MeasurementTimingBudgetMicroSeconds);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	695b      	ldr	r3, [r3, #20]
 800face:	613b      	str	r3, [r7, #16]

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, MeasurementTimingBudgetMicroSeconds);
 800fad0:	6939      	ldr	r1, [r7, #16]
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f7ff ff26 	bl	800f924 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800fad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3718      	adds	r7, #24
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}

0800fae4 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev, VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig, uint8_t *pSequenceStepEnabled) {
 800fae4:	b480      	push	{r7}
 800fae6:	b087      	sub	sp, #28
 800fae8:	af00      	add	r7, sp, #0
 800faea:	60f8      	str	r0, [r7, #12]
 800faec:	607b      	str	r3, [r7, #4]
 800faee:	460b      	mov	r3, r1
 800faf0:	72fb      	strb	r3, [r7, #11]
 800faf2:	4613      	mov	r3, r2
 800faf4:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800faf6:	2300      	movs	r3, #0
 800faf8:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2200      	movs	r2, #0
 800fafe:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800fb00:	7afb      	ldrb	r3, [r7, #11]
 800fb02:	2b04      	cmp	r3, #4
 800fb04:	d836      	bhi.n	800fb74 <sequence_step_enabled+0x90>
 800fb06:	a201      	add	r2, pc, #4	; (adr r2, 800fb0c <sequence_step_enabled+0x28>)
 800fb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb0c:	0800fb21 	.word	0x0800fb21
 800fb10:	0800fb33 	.word	0x0800fb33
 800fb14:	0800fb45 	.word	0x0800fb45
 800fb18:	0800fb57 	.word	0x0800fb57
 800fb1c:	0800fb69 	.word	0x0800fb69
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800fb20:	7abb      	ldrb	r3, [r7, #10]
 800fb22:	111b      	asrs	r3, r3, #4
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	f003 0301 	and.w	r3, r3, #1
 800fb2a:	b2da      	uxtb	r2, r3
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	701a      	strb	r2, [r3, #0]
		break;
 800fb30:	e022      	b.n	800fb78 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800fb32:	7abb      	ldrb	r3, [r7, #10]
 800fb34:	10db      	asrs	r3, r3, #3
 800fb36:	b2db      	uxtb	r3, r3
 800fb38:	f003 0301 	and.w	r3, r3, #1
 800fb3c:	b2da      	uxtb	r2, r3
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	701a      	strb	r2, [r3, #0]
		break;
 800fb42:	e019      	b.n	800fb78 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800fb44:	7abb      	ldrb	r3, [r7, #10]
 800fb46:	109b      	asrs	r3, r3, #2
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	f003 0301 	and.w	r3, r3, #1
 800fb4e:	b2da      	uxtb	r2, r3
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	701a      	strb	r2, [r3, #0]
		break;
 800fb54:	e010      	b.n	800fb78 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800fb56:	7abb      	ldrb	r3, [r7, #10]
 800fb58:	119b      	asrs	r3, r3, #6
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	f003 0301 	and.w	r3, r3, #1
 800fb60:	b2da      	uxtb	r2, r3
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	701a      	strb	r2, [r3, #0]
		break;
 800fb66:	e007      	b.n	800fb78 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800fb68:	7abb      	ldrb	r3, [r7, #10]
 800fb6a:	09db      	lsrs	r3, r3, #7
 800fb6c:	b2da      	uxtb	r2, r3
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	701a      	strb	r2, [r3, #0]
		break;
 800fb72:	e001      	b.n	800fb78 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800fb74:	23fc      	movs	r3, #252	; 0xfc
 800fb76:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800fb78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	371c      	adds	r7, #28
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr

0800fb88 <VL53L0X_GetSequenceStepEnables>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev, VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps) {
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b084      	sub	sp, #16
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fb92:	2300      	movs	r3, #0
 800fb94:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800fb96:	2300      	movs	r3, #0
 800fb98:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &SequenceConfig);
 800fb9a:	f107 030e 	add.w	r3, r7, #14
 800fb9e:	461a      	mov	r2, r3
 800fba0:	2101      	movs	r1, #1
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f003 ff66 	bl	8013a74 <VL53L0X_RdByte>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800fbac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d107      	bne.n	800fbc4 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800fbb4:	7bba      	ldrb	r2, [r7, #14]
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	2100      	movs	r1, #0
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f7ff ff92 	bl	800fae4 <sequence_step_enabled>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig, &pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800fbc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d108      	bne.n	800fbde <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800fbcc:	7bba      	ldrb	r2, [r7, #14]
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	3302      	adds	r3, #2
 800fbd2:	2101      	movs	r1, #1
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f7ff ff85 	bl	800fae4 <sequence_step_enabled>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig, &pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800fbde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d108      	bne.n	800fbf8 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800fbe6:	7bba      	ldrb	r2, [r7, #14]
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	3301      	adds	r3, #1
 800fbec:	2102      	movs	r1, #2
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	f7ff ff78 	bl	800fae4 <sequence_step_enabled>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig, &pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800fbf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d108      	bne.n	800fc12 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800fc00:	7bba      	ldrb	r2, [r7, #14]
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	3303      	adds	r3, #3
 800fc06:	2103      	movs	r1, #3
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f7ff ff6b 	bl	800fae4 <sequence_step_enabled>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig, &pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800fc12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d108      	bne.n	800fc2c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800fc1a:	7bba      	ldrb	r2, [r7, #14]
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	3304      	adds	r3, #4
 800fc20:	2104      	movs	r1, #4
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f7ff ff5e 	bl	800fae4 <sequence_step_enabled>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig, &pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800fc2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	3710      	adds	r7, #16
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}

0800fc38 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev, uint32_t *pInterMeasurementPeriodMilliSeconds) {
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b084      	sub	sp, #16
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fc42:	2300      	movs	r3, #0
 800fc44:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL, &osc_calibrate_val);
 800fc46:	f107 030c 	add.w	r3, r7, #12
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	21f8      	movs	r1, #248	; 0xf8
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f003 ff3a 	bl	8013ac8 <VL53L0X_RdWord>
 800fc54:	4603      	mov	r3, r0
 800fc56:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800fc58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d108      	bne.n	800fc72 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800fc60:	f107 0308 	add.w	r3, r7, #8
 800fc64:	461a      	mov	r2, r3
 800fc66:	2104      	movs	r1, #4
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f003 ff65 	bl	8013b38 <VL53L0X_RdDWord>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD, &IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800fc72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d10c      	bne.n	800fc94 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800fc7a:	89bb      	ldrh	r3, [r7, #12]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d005      	beq.n	800fc8c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds = IMPeriodMilliSeconds / osc_calibrate_val;
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	89ba      	ldrh	r2, [r7, #12]
 800fc84:	fbb3 f2f2 	udiv	r2, r3, r2
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev, InterMeasurementPeriodMilliSeconds, *pInterMeasurementPeriodMilliSeconds);
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	619a      	str	r2, [r3, #24]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800fc94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3710      	adds	r7, #16
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <VL53L0X_GetXTalkCompensationEnable>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev, uint8_t *pXTalkCompensationEnable) {
 800fca0:	b480      	push	{r7}
 800fca2:	b085      	sub	sp, #20
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	7f1b      	ldrb	r3, [r3, #28]
 800fcb2:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	7bba      	ldrb	r2, [r7, #14]
 800fcb8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800fcba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3714      	adds	r7, #20
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc8:	4770      	bx	lr

0800fcca <VL53L0X_GetXTalkCompensationRateMegaCps>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev, FixPoint1616_t *pXTalkCompensationRateMegaCps) {
 800fcca:	b580      	push	{r7, lr}
 800fccc:	b086      	sub	sp, #24
 800fcce:	af00      	add	r7, sp, #0
 800fcd0:	6078      	str	r0, [r7, #4]
 800fcd2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800fcd8:	f107 030e 	add.w	r3, r7, #14
 800fcdc:	461a      	mov	r2, r3
 800fcde:	2120      	movs	r1, #32
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f003 fef1 	bl	8013ac8 <VL53L0X_RdWord>
 800fce6:	4603      	mov	r3, r0
 800fce8:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t*) &Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800fcea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d118      	bne.n	800fd24 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800fcf2:	89fb      	ldrh	r3, [r7, #14]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d109      	bne.n	800fd0c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, TempFix1616);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6a1b      	ldr	r3, [r3, #32]
 800fcfc:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	693a      	ldr	r2, [r7, #16]
 800fd02:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable, 0);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2200      	movs	r2, #0
 800fd08:	771a      	strb	r2, [r3, #28]
 800fd0a:	e00b      	b.n	800fd24 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		}
		else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800fd0c:	89fb      	ldrh	r3, [r7, #14]
 800fd0e:	00db      	lsls	r3, r3, #3
 800fd10:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	693a      	ldr	r2, [r7, #16]
 800fd16:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, TempFix1616);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	693a      	ldr	r2, [r7, #16]
 800fd1c:	621a      	str	r2, [r3, #32]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable, 1);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2201      	movs	r2, #1
 800fd22:	771a      	strb	r2, [r3, #28]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800fd24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3718      	adds	r7, #24
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <VL53L0X_SetLimitCheckEnable>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId, uint8_t LimitCheckEnable) {
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b086      	sub	sp, #24
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	460b      	mov	r3, r1
 800fd3a:	807b      	strh	r3, [r7, #2]
 800fd3c:	4613      	mov	r3, r2
 800fd3e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fd40:	2300      	movs	r3, #0
 800fd42:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800fd44:	2300      	movs	r3, #0
 800fd46:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800fd48:	2300      	movs	r3, #0
 800fd4a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800fd50:	887b      	ldrh	r3, [r7, #2]
 800fd52:	2b05      	cmp	r3, #5
 800fd54:	d902      	bls.n	800fd5c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800fd56:	23fc      	movs	r3, #252	; 0xfc
 800fd58:	75fb      	strb	r3, [r7, #23]
 800fd5a:	e05b      	b.n	800fe14 <VL53L0X_SetLimitCheckEnable+0xe4>
	}
	else {
		if (LimitCheckEnable == 0) {
 800fd5c:	787b      	ldrb	r3, [r7, #1]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d106      	bne.n	800fd70 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800fd62:	2300      	movs	r3, #0
 800fd64:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800fd66:	2300      	movs	r3, #0
 800fd68:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	73bb      	strb	r3, [r7, #14]
 800fd6e:	e00a      	b.n	800fd86 <VL53L0X_SetLimitCheckEnable+0x56>

		}
		else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId, TempFix1616);
 800fd70:	887b      	ldrh	r3, [r7, #2]
 800fd72:	687a      	ldr	r2, [r7, #4]
 800fd74:	330c      	adds	r3, #12
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	4413      	add	r3, r2
 800fd7a:	685b      	ldr	r3, [r3, #4]
 800fd7c:	613b      	str	r3, [r7, #16]
			LimitCheckDisable = 0;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800fd82:	2301      	movs	r3, #1
 800fd84:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800fd86:	887b      	ldrh	r3, [r7, #2]
 800fd88:	2b05      	cmp	r3, #5
 800fd8a:	d841      	bhi.n	800fe10 <VL53L0X_SetLimitCheckEnable+0xe0>
 800fd8c:	a201      	add	r2, pc, #4	; (adr r2, 800fd94 <VL53L0X_SetLimitCheckEnable+0x64>)
 800fd8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd92:	bf00      	nop
 800fd94:	0800fdad 	.word	0x0800fdad
 800fd98:	0800fdb7 	.word	0x0800fdb7
 800fd9c:	0800fdcd 	.word	0x0800fdcd
 800fda0:	0800fdd7 	.word	0x0800fdd7
 800fda4:	0800fde1 	.word	0x0800fde1
 800fda8:	0800fdf9 	.word	0x0800fdf9

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, LimitCheckEnableInt);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	7bfa      	ldrb	r2, [r7, #15]
 800fdb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			break;
 800fdb4:	e02e      	b.n	800fe14 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	461a      	mov	r2, r3
 800fdbe:	2144      	movs	r1, #68	; 0x44
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f003 fdf9 	bl	80139b8 <VL53L0X_WrWord>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	75fb      	strb	r3, [r7, #23]

			break;
 800fdca:	e023      	b.n	800fe14 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, LimitCheckEnableInt);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	7bfa      	ldrb	r2, [r7, #15]
 800fdd0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

			break;
 800fdd4:	e01e      	b.n	800fe14 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, LimitCheckEnableInt);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	7bfa      	ldrb	r2, [r7, #15]
 800fdda:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

			break;
 800fdde:	e019      	b.n	800fe14 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t) (LimitCheckDisable << 1);
 800fde0:	7bbb      	ldrb	r3, [r7, #14]
 800fde2:	005b      	lsls	r3, r3, #1
 800fde4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800fde6:	7b7b      	ldrb	r3, [r7, #13]
 800fde8:	22fe      	movs	r2, #254	; 0xfe
 800fdea:	2160      	movs	r1, #96	; 0x60
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f003 fe0d 	bl	8013a0c <VL53L0X_UpdateByte>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_MSRC_CONFIG_CONTROL, 0xFE, Temp8);

			break;
 800fdf6:	e00d      	b.n	800fe14 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t) (LimitCheckDisable << 4);
 800fdf8:	7bbb      	ldrb	r3, [r7, #14]
 800fdfa:	011b      	lsls	r3, r3, #4
 800fdfc:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800fdfe:	7b7b      	ldrb	r3, [r7, #13]
 800fe00:	22ef      	movs	r2, #239	; 0xef
 800fe02:	2160      	movs	r1, #96	; 0x60
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f003 fe01 	bl	8013a0c <VL53L0X_UpdateByte>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_MSRC_CONFIG_CONTROL, 0xEF, Temp8);

			break;
 800fe0e:	e001      	b.n	800fe14 <VL53L0X_SetLimitCheckEnable+0xe4>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800fe10:	23fc      	movs	r3, #252	; 0xfc
 800fe12:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800fe14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d10f      	bne.n	800fe3c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800fe1c:	787b      	ldrb	r3, [r7, #1]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d106      	bne.n	800fe30 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 0);
 800fe22:	887b      	ldrh	r3, [r7, #2]
 800fe24:	687a      	ldr	r2, [r7, #4]
 800fe26:	4413      	add	r3, r2
 800fe28:	2200      	movs	r2, #0
 800fe2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800fe2e:	e005      	b.n	800fe3c <VL53L0X_SetLimitCheckEnable+0x10c>
		}
		else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 1);
 800fe30:	887b      	ldrh	r3, [r7, #2]
 800fe32:	687a      	ldr	r2, [r7, #4]
 800fe34:	4413      	add	r3, r2
 800fe36:	2201      	movs	r2, #1
 800fe38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800fe3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	3718      	adds	r7, #24
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId, uint8_t *pLimitCheckEnable) {
 800fe48:	b480      	push	{r7}
 800fe4a:	b087      	sub	sp, #28
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	60f8      	str	r0, [r7, #12]
 800fe50:	460b      	mov	r3, r1
 800fe52:	607a      	str	r2, [r7, #4]
 800fe54:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fe56:	2300      	movs	r3, #0
 800fe58:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800fe5a:	897b      	ldrh	r3, [r7, #10]
 800fe5c:	2b05      	cmp	r3, #5
 800fe5e:	d905      	bls.n	800fe6c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800fe60:	23fc      	movs	r3, #252	; 0xfc
 800fe62:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2200      	movs	r2, #0
 800fe68:	701a      	strb	r2, [r3, #0]
 800fe6a:	e008      	b.n	800fe7e <VL53L0X_GetLimitCheckEnable+0x36>
	}
	else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, Temp8);
 800fe6c:	897b      	ldrh	r3, [r7, #10]
 800fe6e:	68fa      	ldr	r2, [r7, #12]
 800fe70:	4413      	add	r3, r2
 800fe72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe76:	75bb      	strb	r3, [r7, #22]
		*pLimitCheckEnable = Temp8;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	7dba      	ldrb	r2, [r7, #22]
 800fe7c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800fe7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	371c      	adds	r7, #28
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr
	...

0800fe90 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId, FixPoint1616_t LimitCheckValue) {
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b086      	sub	sp, #24
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	460b      	mov	r3, r1
 800fe9a:	607a      	str	r2, [r7, #4]
 800fe9c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, Temp8);
 800fea2:	897b      	ldrh	r3, [r7, #10]
 800fea4:	68fa      	ldr	r2, [r7, #12]
 800fea6:	4413      	add	r3, r2
 800fea8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800feac:	75bb      	strb	r3, [r7, #22]

	if (Temp8 == 0) { /* disabled write only internal value */
 800feae:	7dbb      	ldrb	r3, [r7, #22]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d107      	bne.n	800fec4 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId, LimitCheckValue);
 800feb4:	897b      	ldrh	r3, [r7, #10]
 800feb6:	68fa      	ldr	r2, [r7, #12]
 800feb8:	330c      	adds	r3, #12
 800feba:	009b      	lsls	r3, r3, #2
 800febc:	4413      	add	r3, r2
 800febe:	687a      	ldr	r2, [r7, #4]
 800fec0:	605a      	str	r2, [r3, #4]
 800fec2:	e040      	b.n	800ff46 <VL53L0X_SetLimitCheckValue+0xb6>
	}
	else {

		switch (LimitCheckId) {
 800fec4:	897b      	ldrh	r3, [r7, #10]
 800fec6:	2b05      	cmp	r3, #5
 800fec8:	d830      	bhi.n	800ff2c <VL53L0X_SetLimitCheckValue+0x9c>
 800feca:	a201      	add	r2, pc, #4	; (adr r2, 800fed0 <VL53L0X_SetLimitCheckValue+0x40>)
 800fecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed0:	0800fee9 	.word	0x0800fee9
 800fed4:	0800fef1 	.word	0x0800fef1
 800fed8:	0800ff07 	.word	0x0800ff07
 800fedc:	0800ff0f 	.word	0x0800ff0f
 800fee0:	0800ff17 	.word	0x0800ff17
 800fee4:	0800ff17 	.word	0x0800ff17

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, LimitCheckValue);
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	687a      	ldr	r2, [r7, #4]
 800feec:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800feee:	e01f      	b.n	800ff30 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, VL53L0X_FIXPOINT1616TOFIXPOINT97(LimitCheckValue));
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800fef4:	b29b      	uxth	r3, r3
 800fef6:	461a      	mov	r2, r3
 800fef8:	2144      	movs	r1, #68	; 0x44
 800fefa:	68f8      	ldr	r0, [r7, #12]
 800fefc:	f003 fd5c 	bl	80139b8 <VL53L0X_WrWord>
 800ff00:	4603      	mov	r3, r0
 800ff02:	75fb      	strb	r3, [r7, #23]

			break;
 800ff04:	e014      	b.n	800ff30 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, LimitCheckValue);
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	687a      	ldr	r2, [r7, #4]
 800ff0a:	63da      	str	r2, [r3, #60]	; 0x3c

			break;
 800ff0c:	e010      	b.n	800ff30 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, LimitCheckValue);
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	687a      	ldr	r2, [r7, #4]
 800ff12:	641a      	str	r2, [r3, #64]	; 0x40

			break;
 800ff14:	e00c      	b.n	800ff30 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT, VL53L0X_FIXPOINT1616TOFIXPOINT97(LimitCheckValue));
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	461a      	mov	r2, r3
 800ff1e:	2164      	movs	r1, #100	; 0x64
 800ff20:	68f8      	ldr	r0, [r7, #12]
 800ff22:	f003 fd49 	bl	80139b8 <VL53L0X_WrWord>
 800ff26:	4603      	mov	r3, r0
 800ff28:	75fb      	strb	r3, [r7, #23]

			break;
 800ff2a:	e001      	b.n	800ff30 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ff2c:	23fc      	movs	r3, #252	; 0xfc
 800ff2e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800ff30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d106      	bne.n	800ff46 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId, LimitCheckValue);
 800ff38:	897b      	ldrh	r3, [r7, #10]
 800ff3a:	68fa      	ldr	r2, [r7, #12]
 800ff3c:	330c      	adds	r3, #12
 800ff3e:	009b      	lsls	r3, r3, #2
 800ff40:	4413      	add	r3, r2
 800ff42:	687a      	ldr	r2, [r7, #4]
 800ff44:	605a      	str	r2, [r3, #4]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ff46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3718      	adds	r7, #24
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
 800ff52:	bf00      	nop

0800ff54 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId, FixPoint1616_t *pLimitCheckValue) {
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b088      	sub	sp, #32
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	60f8      	str	r0, [r7, #12]
 800ff5c:	460b      	mov	r3, r1
 800ff5e:	607a      	str	r2, [r7, #4]
 800ff60:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ff62:	2300      	movs	r3, #0
 800ff64:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800ff66:	2300      	movs	r3, #0
 800ff68:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800ff6a:	897b      	ldrh	r3, [r7, #10]
 800ff6c:	2b05      	cmp	r3, #5
 800ff6e:	d847      	bhi.n	8010000 <VL53L0X_GetLimitCheckValue+0xac>
 800ff70:	a201      	add	r2, pc, #4	; (adr r2, 800ff78 <VL53L0X_GetLimitCheckValue+0x24>)
 800ff72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff76:	bf00      	nop
 800ff78:	0800ff91 	.word	0x0800ff91
 800ff7c:	0800ff9d 	.word	0x0800ff9d
 800ff80:	0800ffc3 	.word	0x0800ffc3
 800ff84:	0800ffcf 	.word	0x0800ffcf
 800ff88:	0800ffdb 	.word	0x0800ffdb
 800ff8c:	0800ffdb 	.word	0x0800ffdb

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff94:	61bb      	str	r3, [r7, #24]
		EnableZeroValue = 0;
 800ff96:	2300      	movs	r3, #0
 800ff98:	77bb      	strb	r3, [r7, #30]
		break;
 800ff9a:	e033      	b.n	8010004 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800ff9c:	f107 0316 	add.w	r3, r7, #22
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	2144      	movs	r1, #68	; 0x44
 800ffa4:	68f8      	ldr	r0, [r7, #12]
 800ffa6:	f003 fd8f 	bl	8013ac8 <VL53L0X_RdWord>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, &Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800ffae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d102      	bne.n	800ffbc <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800ffb6:	8afb      	ldrh	r3, [r7, #22]
 800ffb8:	025b      	lsls	r3, r3, #9
 800ffba:	61bb      	str	r3, [r7, #24]

		EnableZeroValue = 1;
 800ffbc:	2301      	movs	r3, #1
 800ffbe:	77bb      	strb	r3, [r7, #30]
		break;
 800ffc0:	e020      	b.n	8010004 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffc6:	61bb      	str	r3, [r7, #24]
		EnableZeroValue = 0;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	77bb      	strb	r3, [r7, #30]
		break;
 800ffcc:	e01a      	b.n	8010004 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffd2:	61bb      	str	r3, [r7, #24]
		EnableZeroValue = 0;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	77bb      	strb	r3, [r7, #30]
		break;
 800ffd8:	e014      	b.n	8010004 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800ffda:	f107 0316 	add.w	r3, r7, #22
 800ffde:	461a      	mov	r2, r3
 800ffe0:	2164      	movs	r1, #100	; 0x64
 800ffe2:	68f8      	ldr	r0, [r7, #12]
 800ffe4:	f003 fd70 	bl	8013ac8 <VL53L0X_RdWord>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT, &Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800ffec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d102      	bne.n	800fffa <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800fff4:	8afb      	ldrh	r3, [r7, #22]
 800fff6:	025b      	lsls	r3, r3, #9
 800fff8:	61bb      	str	r3, [r7, #24]

		EnableZeroValue = 0;
 800fffa:	2300      	movs	r3, #0
 800fffc:	77bb      	strb	r3, [r7, #30]
		break;
 800fffe:	e001      	b.n	8010004 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8010000:	23fc      	movs	r3, #252	; 0xfc
 8010002:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8010004:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d12a      	bne.n	8010062 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 801000c:	7fbb      	ldrb	r3, [r7, #30]
 801000e:	2b01      	cmp	r3, #1
 8010010:	d124      	bne.n	801005c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8010012:	69bb      	ldr	r3, [r7, #24]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d110      	bne.n	801003a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId, TempFix1616);
 8010018:	897b      	ldrh	r3, [r7, #10]
 801001a:	68fa      	ldr	r2, [r7, #12]
 801001c:	330c      	adds	r3, #12
 801001e:	009b      	lsls	r3, r3, #2
 8010020:	4413      	add	r3, r2
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	61bb      	str	r3, [r7, #24]
				*pLimitCheckValue = TempFix1616;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	69ba      	ldr	r2, [r7, #24]
 801002a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 0);
 801002c:	897b      	ldrh	r3, [r7, #10]
 801002e:	68fa      	ldr	r2, [r7, #12]
 8010030:	4413      	add	r3, r2
 8010032:	2200      	movs	r2, #0
 8010034:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8010038:	e013      	b.n	8010062 <VL53L0X_GetLimitCheckValue+0x10e>
			}
			else {
				*pLimitCheckValue = TempFix1616;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	69ba      	ldr	r2, [r7, #24]
 801003e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId, TempFix1616);
 8010040:	897b      	ldrh	r3, [r7, #10]
 8010042:	68fa      	ldr	r2, [r7, #12]
 8010044:	330c      	adds	r3, #12
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	4413      	add	r3, r2
 801004a:	69ba      	ldr	r2, [r7, #24]
 801004c:	605a      	str	r2, [r3, #4]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 1);
 801004e:	897b      	ldrh	r3, [r7, #10]
 8010050:	68fa      	ldr	r2, [r7, #12]
 8010052:	4413      	add	r3, r2
 8010054:	2201      	movs	r2, #1
 8010056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 801005a:	e002      	b.n	8010062 <VL53L0X_GetLimitCheckValue+0x10e>
			}
		}
		else {
			*pLimitCheckValue = TempFix1616;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	69ba      	ldr	r2, [r7, #24]
 8010060:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8010062:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8010066:	4618      	mov	r0, r3
 8010068:	3720      	adds	r7, #32
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
 801006e:	bf00      	nop

08010070 <VL53L0X_GetWrapAroundCheckEnable>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev, uint8_t *pWrapAroundCheckEnable) {
 8010070:	b580      	push	{r7, lr}
 8010072:	b084      	sub	sp, #16
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801007a:	2300      	movs	r3, #0
 801007c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 801007e:	f107 030e 	add.w	r3, r7, #14
 8010082:	461a      	mov	r2, r3
 8010084:	2101      	movs	r1, #1
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f003 fcf4 	bl	8013a74 <VL53L0X_RdByte>
 801008c:	4603      	mov	r3, r0
 801008e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8010090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d10e      	bne.n	80100b6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8010098:	7bba      	ldrb	r2, [r7, #14]
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80100a0:	7bbb      	ldrb	r3, [r7, #14]
 80100a2:	b25b      	sxtb	r3, r3
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	da03      	bge.n	80100b0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	2201      	movs	r2, #1
 80100ac:	701a      	strb	r2, [r3, #0]
 80100ae:	e002      	b.n	80100b6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	2200      	movs	r2, #0
 80100b4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80100b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d104      	bne.n	80100c8 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable, *pWrapAroundCheckEnable);
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	781a      	ldrb	r2, [r3, #0]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80100c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3710      	adds	r7, #16
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}

080100d4 <VL53L0X_PerformSingleMeasurement>:
}

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev) {
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b084      	sub	sp, #16
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80100dc:	2300      	movs	r3, #0
 80100de:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80100e0:	f107 030e 	add.w	r3, r7, #14
 80100e4:	4619      	mov	r1, r3
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f7ff fbea 	bl	800f8c0 <VL53L0X_GetDeviceMode>
 80100ec:	4603      	mov	r3, r0
 80100ee:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE && DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80100f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d107      	bne.n	8010108 <VL53L0X_PerformSingleMeasurement+0x34>
 80100f8:	7bbb      	ldrb	r3, [r7, #14]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d104      	bne.n	8010108 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	f000 f898 	bl	8010234 <VL53L0X_StartMeasurement>
 8010104:	4603      	mov	r3, r0
 8010106:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8010108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d104      	bne.n	801011a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f001 fb3f 	bl	8011794 <VL53L0X_measurement_poll_for_completion>
 8010116:	4603      	mov	r3, r0
 8010118:	73fb      	strb	r3, [r7, #15]

	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE && DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 801011a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d106      	bne.n	8010130 <VL53L0X_PerformSingleMeasurement+0x5c>
 8010122:	7bbb      	ldrb	r3, [r7, #14]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d103      	bne.n	8010130 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2203      	movs	r2, #3
 801012c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

	LOG_FUNCTION_END(Status);
	return Status;
 8010130:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010134:	4618      	mov	r0, r3
 8010136:	3710      	adds	r7, #16
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}

0801013c <VL53L0X_PerformRefCalibration>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings, uint8_t *pPhaseCal) {
 801013c:	b580      	push	{r7, lr}
 801013e:	b086      	sub	sp, #24
 8010140:	af00      	add	r7, sp, #0
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	60b9      	str	r1, [r7, #8]
 8010146:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010148:	2300      	movs	r3, #0
 801014a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings, pPhaseCal, 1);
 801014c:	2301      	movs	r3, #1
 801014e:	687a      	ldr	r2, [r7, #4]
 8010150:	68b9      	ldr	r1, [r7, #8]
 8010152:	68f8      	ldr	r0, [r7, #12]
 8010154:	f001 fae1 	bl	801171a <VL53L0X_perform_ref_calibration>
 8010158:	4603      	mov	r3, r0
 801015a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 801015c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010160:	4618      	mov	r0, r3
 8010162:	3718      	adds	r7, #24
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}

08010168 <VL53L0X_CheckAndLoadInterruptSettings>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev, uint8_t StartNotStopFlag) {
 8010168:	b580      	push	{r7, lr}
 801016a:	b086      	sub	sp, #24
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	460b      	mov	r3, r1
 8010172:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010174:	2300      	movs	r3, #0
 8010176:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 801017e:	75bb      	strb	r3, [r7, #22]

	if ((InterruptConfig ==
 8010180:	7dbb      	ldrb	r3, [r7, #22]
 8010182:	2b01      	cmp	r3, #1
 8010184:	d005      	beq.n	8010192 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
	VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) || (InterruptConfig ==
 8010186:	7dbb      	ldrb	r3, [r7, #22]
 8010188:	2b02      	cmp	r3, #2
 801018a:	d002      	beq.n	8010192 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
	VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) || (InterruptConfig ==
 801018c:	7dbb      	ldrb	r3, [r7, #22]
 801018e:	2b03      	cmp	r3, #3
 8010190:	d147      	bne.n	8010222 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
	VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8010192:	f107 030c 	add.w	r3, r7, #12
 8010196:	f107 0210 	add.w	r2, r7, #16
 801019a:	2101      	movs	r1, #1
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f000 fbc3 	bl	8010928 <VL53L0X_GetInterruptThresholds>
 80101a2:	4603      	mov	r3, r0
 80101a4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_DEVICEMODE_CONTINUOUS_RANGING, &ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255 * 65536) || (ThresholdHigh > 255 * 65536)) && (Status == VL53L0X_ERROR_NONE)) {
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80101ac:	d803      	bhi.n	80101b6 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80101b4:	d935      	bls.n	8010222 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
 80101b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d131      	bne.n	8010222 <VL53L0X_CheckAndLoadInterruptSettings+0xba>

			if (StartNotStopFlag != 0) {
 80101be:	78fb      	ldrb	r3, [r7, #3]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d006      	beq.n	80101d2 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev, InterruptThresholdSettings);
 80101c4:	491a      	ldr	r1, [pc, #104]	; (8010230 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f002 fcbc 	bl	8012b44 <VL53L0X_load_tuning_settings>
 80101cc:	4603      	mov	r3, r0
 80101ce:	75fb      	strb	r3, [r7, #23]
 80101d0:	e027      	b.n	8010222 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			}
			else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80101d2:	2204      	movs	r2, #4
 80101d4:	21ff      	movs	r1, #255	; 0xff
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f003 fbca 	bl	8013970 <VL53L0X_WrByte>
 80101dc:	4603      	mov	r3, r0
 80101de:	461a      	mov	r2, r3
 80101e0:	7dfb      	ldrb	r3, [r7, #23]
 80101e2:	4313      	orrs	r3, r2
 80101e4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80101e6:	2200      	movs	r2, #0
 80101e8:	2170      	movs	r1, #112	; 0x70
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f003 fbc0 	bl	8013970 <VL53L0X_WrByte>
 80101f0:	4603      	mov	r3, r0
 80101f2:	461a      	mov	r2, r3
 80101f4:	7dfb      	ldrb	r3, [r7, #23]
 80101f6:	4313      	orrs	r3, r2
 80101f8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80101fa:	2200      	movs	r2, #0
 80101fc:	21ff      	movs	r1, #255	; 0xff
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f003 fbb6 	bl	8013970 <VL53L0X_WrByte>
 8010204:	4603      	mov	r3, r0
 8010206:	461a      	mov	r2, r3
 8010208:	7dfb      	ldrb	r3, [r7, #23]
 801020a:	4313      	orrs	r3, r2
 801020c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 801020e:	2200      	movs	r2, #0
 8010210:	2180      	movs	r1, #128	; 0x80
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f003 fbac 	bl	8013970 <VL53L0X_WrByte>
 8010218:	4603      	mov	r3, r0
 801021a:	461a      	mov	r2, r3
 801021c:	7dfb      	ldrb	r3, [r7, #23]
 801021e:	4313      	orrs	r3, r2
 8010220:	75fb      	strb	r3, [r7, #23]

		}

	}

	return Status;
 8010222:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8010226:	4618      	mov	r0, r3
 8010228:	3718      	adds	r7, #24
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	2000011c 	.word	0x2000011c

08010234 <VL53L0X_StartMeasurement>:

VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev) {
 8010234:	b580      	push	{r7, lr}
 8010236:	b086      	sub	sp, #24
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801023c:	2300      	movs	r3, #0
 801023e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8010240:	2301      	movs	r3, #1
 8010242:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8010244:	f107 030e 	add.w	r3, r7, #14
 8010248:	4619      	mov	r1, r3
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f7ff fb38 	bl	800f8c0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8010250:	2201      	movs	r2, #1
 8010252:	2180      	movs	r1, #128	; 0x80
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f003 fb8b 	bl	8013970 <VL53L0X_WrByte>
 801025a:	4603      	mov	r3, r0
 801025c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 801025e:	2201      	movs	r2, #1
 8010260:	21ff      	movs	r1, #255	; 0xff
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f003 fb84 	bl	8013970 <VL53L0X_WrByte>
 8010268:	4603      	mov	r3, r0
 801026a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 801026c:	2200      	movs	r2, #0
 801026e:	2100      	movs	r1, #0
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f003 fb7d 	bl	8013970 <VL53L0X_WrByte>
 8010276:	4603      	mov	r3, r0
 8010278:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8010280:	461a      	mov	r2, r3
 8010282:	2191      	movs	r1, #145	; 0x91
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f003 fb73 	bl	8013970 <VL53L0X_WrByte>
 801028a:	4603      	mov	r3, r0
 801028c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 801028e:	2201      	movs	r2, #1
 8010290:	2100      	movs	r1, #0
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f003 fb6c 	bl	8013970 <VL53L0X_WrByte>
 8010298:	4603      	mov	r3, r0
 801029a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 801029c:	2200      	movs	r2, #0
 801029e:	21ff      	movs	r1, #255	; 0xff
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f003 fb65 	bl	8013970 <VL53L0X_WrByte>
 80102a6:	4603      	mov	r3, r0
 80102a8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80102aa:	2200      	movs	r2, #0
 80102ac:	2180      	movs	r1, #128	; 0x80
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f003 fb5e 	bl	8013970 <VL53L0X_WrByte>
 80102b4:	4603      	mov	r3, r0
 80102b6:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80102b8:	7bbb      	ldrb	r3, [r7, #14]
 80102ba:	2b03      	cmp	r3, #3
 80102bc:	d054      	beq.n	8010368 <VL53L0X_StartMeasurement+0x134>
 80102be:	2b03      	cmp	r3, #3
 80102c0:	dc6c      	bgt.n	801039c <VL53L0X_StartMeasurement+0x168>
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d002      	beq.n	80102cc <VL53L0X_StartMeasurement+0x98>
 80102c6:	2b01      	cmp	r3, #1
 80102c8:	d034      	beq.n	8010334 <VL53L0X_StartMeasurement+0x100>
 80102ca:	e067      	b.n	801039c <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80102cc:	2201      	movs	r2, #1
 80102ce:	2100      	movs	r1, #0
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f003 fb4d 	bl	8013970 <VL53L0X_WrByte>
 80102d6:	4603      	mov	r3, r0
 80102d8:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80102da:	7bfb      	ldrb	r3, [r7, #15]
 80102dc:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80102de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d15d      	bne.n	80103a2 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80102e6:	2300      	movs	r3, #0
 80102e8:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d008      	beq.n	8010302 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 80102f0:	f107 030d 	add.w	r3, r7, #13
 80102f4:	461a      	mov	r2, r3
 80102f6:	2100      	movs	r1, #0
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f003 fbbb 	bl	8013a74 <VL53L0X_RdByte>
 80102fe:	4603      	mov	r3, r0
 8010300:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8010302:	693b      	ldr	r3, [r7, #16]
 8010304:	3301      	adds	r3, #1
 8010306:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte) && (Status == VL53L0X_ERROR_NONE) && (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8010308:	7b7a      	ldrb	r2, [r7, #13]
 801030a:	7bfb      	ldrb	r3, [r7, #15]
 801030c:	4013      	ands	r3, r2
 801030e:	b2db      	uxtb	r3, r3
 8010310:	7bfa      	ldrb	r2, [r7, #15]
 8010312:	429a      	cmp	r2, r3
 8010314:	d107      	bne.n	8010326 <VL53L0X_StartMeasurement+0xf2>
 8010316:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d103      	bne.n	8010326 <VL53L0X_StartMeasurement+0xf2>
 801031e:	693b      	ldr	r3, [r7, #16]
 8010320:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8010324:	d3e1      	bcc.n	80102ea <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 801032c:	d339      	bcc.n	80103a2 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 801032e:	23f9      	movs	r3, #249	; 0xf9
 8010330:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8010332:	e036      	b.n	80103a2 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8010334:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d105      	bne.n	8010348 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 801033c:	2101      	movs	r1, #1
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f7ff ff12 	bl	8010168 <VL53L0X_CheckAndLoadInterruptSettings>
 8010344:	4603      	mov	r3, r0
 8010346:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8010348:	2202      	movs	r2, #2
 801034a:	2100      	movs	r1, #0
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f003 fb0f 	bl	8013970 <VL53L0X_WrByte>
 8010352:	4603      	mov	r3, r0
 8010354:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8010356:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d123      	bne.n	80103a6 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2204      	movs	r2, #4
 8010362:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8010366:	e01e      	b.n	80103a6 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8010368:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d105      	bne.n	801037c <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8010370:	2101      	movs	r1, #1
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f7ff fef8 	bl	8010168 <VL53L0X_CheckAndLoadInterruptSettings>
 8010378:	4603      	mov	r3, r0
 801037a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 801037c:	2204      	movs	r2, #4
 801037e:	2100      	movs	r1, #0
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f003 faf5 	bl	8013970 <VL53L0X_WrByte>
 8010386:	4603      	mov	r3, r0
 8010388:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 801038a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d10b      	bne.n	80103aa <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2204      	movs	r2, #4
 8010396:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 801039a:	e006      	b.n	80103aa <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 801039c:	23f8      	movs	r3, #248	; 0xf8
 801039e:	75fb      	strb	r3, [r7, #23]
 80103a0:	e004      	b.n	80103ac <VL53L0X_StartMeasurement+0x178>
		break;
 80103a2:	bf00      	nop
 80103a4:	e002      	b.n	80103ac <VL53L0X_StartMeasurement+0x178>
		break;
 80103a6:	bf00      	nop
 80103a8:	e000      	b.n	80103ac <VL53L0X_StartMeasurement+0x178>
		break;
 80103aa:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80103ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3718      	adds	r7, #24
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <VL53L0X_GetMeasurementDataReady>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev, uint8_t *pMeasurementDataReady) {
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b084      	sub	sp, #16
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80103c2:	2300      	movs	r3, #0
 80103c4:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80103cc:	73bb      	strb	r3, [r7, #14]

	if (InterruptConfig ==
 80103ce:	7bbb      	ldrb	r3, [r7, #14]
 80103d0:	2b04      	cmp	r3, #4
 80103d2:	d112      	bne.n	80103fa <VL53L0X_GetMeasurementDataReady+0x42>
	VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80103d4:	f107 0308 	add.w	r3, r7, #8
 80103d8:	4619      	mov	r1, r3
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f000 fb1a 	bl	8010a14 <VL53L0X_GetInterruptMaskStatus>
 80103e0:	4603      	mov	r3, r0
 80103e2:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	2b04      	cmp	r3, #4
 80103e8:	d103      	bne.n	80103f2 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	2201      	movs	r2, #1
 80103ee:	701a      	strb	r2, [r3, #0]
 80103f0:	e01c      	b.n	801042c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	2200      	movs	r2, #0
 80103f6:	701a      	strb	r2, [r3, #0]
 80103f8:	e018      	b.n	801042c <VL53L0X_GetMeasurementDataReady+0x74>
	}
	else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS, &SysRangeStatusRegister);
 80103fa:	f107 030d 	add.w	r3, r7, #13
 80103fe:	461a      	mov	r2, r3
 8010400:	2114      	movs	r1, #20
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f003 fb36 	bl	8013a74 <VL53L0X_RdByte>
 8010408:	4603      	mov	r3, r0
 801040a:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L0X_ERROR_NONE) {
 801040c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d10b      	bne.n	801042c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8010414:	7b7b      	ldrb	r3, [r7, #13]
 8010416:	f003 0301 	and.w	r3, r3, #1
 801041a:	2b00      	cmp	r3, #0
 801041c:	d003      	beq.n	8010426 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	2201      	movs	r2, #1
 8010422:	701a      	strb	r2, [r3, #0]
 8010424:	e002      	b.n	801042c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	2200      	movs	r2, #0
 801042a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 801042c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010430:	4618      	mov	r0, r3
 8010432:	3710      	adds	r7, #16
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}

08010438 <VL53L0X_GetRangingMeasurementData>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData) {
 8010438:	b5b0      	push	{r4, r5, r7, lr}
 801043a:	b096      	sub	sp, #88	; 0x58
 801043c:	af02      	add	r7, sp, #8
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010442:	2300      	movs	r3, #0
 8010444:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8010448:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801044c:	230c      	movs	r3, #12
 801044e:	2114      	movs	r1, #20
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f003 fa61 	bl	8013918 <VL53L0X_ReadMulti>
 8010456:	4603      	mov	r3, r0
 8010458:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 801045c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8010460:	2b00      	cmp	r3, #0
 8010462:	f040 80d1 	bne.w	8010608 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	2200      	movs	r2, #0
 801046a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	2200      	movs	r2, #0
 8010470:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8010472:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8010476:	b29b      	uxth	r3, r3
 8010478:	021b      	lsls	r3, r3, #8
 801047a:	b29a      	uxth	r2, r3
 801047c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010480:	b29b      	uxth	r3, r3
 8010482:	4413      	add	r3, r2
 8010484:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	2200      	movs	r2, #0
 801048c:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
 801048e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010492:	b29b      	uxth	r3, r3
 8010494:	021b      	lsls	r3, r3, #8
 8010496:	b29a      	uxth	r2, r3
 8010498:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801049c:	b29b      	uxth	r3, r3
 801049e:	4413      	add	r3, r2
 80104a0:	b29b      	uxth	r3, r3
 80104a2:	025b      	lsls	r3, r3, #9
 80104a4:	647b      	str	r3, [r7, #68]	; 0x44
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80104aa:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80104ac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80104b0:	b29b      	uxth	r3, r3
 80104b2:	021b      	lsls	r3, r3, #8
 80104b4:	b29a      	uxth	r2, r3
 80104b6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	4413      	add	r3, r2
 80104be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps = VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80104c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80104c6:	025b      	lsls	r3, r3, #9
 80104c8:	461a      	mov	r2, r3
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3], localBuffer[2]);
 80104ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80104d2:	b29b      	uxth	r3, r3
 80104d4:	021b      	lsls	r3, r3, #8
 80104d6:	b29a      	uxth	r2, r3
 80104d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80104dc:	b29b      	uxth	r3, r3
 80104de:	4413      	add	r3, r2
 80104e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount = EffectiveSpadRtnCount;
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80104ea:	829a      	strh	r2, [r3, #20]

		DeviceRangeStatus = localBuffer[0];
 80104ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80104f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev, LinearityCorrectiveGain);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80104fa:	87bb      	strh	r3, [r7, #60]	; 0x3c

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev, RangeFractionalEnable);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8010502:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		if (LinearityCorrectiveGain != 1000) {
 8010506:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801050c:	d046      	beq.n	801059c <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t) ((LinearityCorrectiveGain * tmpuint16 + 500) / 1000);
 801050e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010510:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8010514:	fb02 f303 	mul.w	r3, r2, r3
 8010518:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801051c:	4a57      	ldr	r2, [pc, #348]	; (801067c <VL53L0X_GetRangingMeasurementData+0x244>)
 801051e:	fb82 1203 	smull	r1, r2, r2, r3
 8010522:	1192      	asrs	r2, r2, #6
 8010524:	17db      	asrs	r3, r3, #31
 8010526:	1ad3      	subs	r3, r2, r3
 8010528:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, XTalkCompensationRateMegaCps);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6a1b      	ldr	r3, [r3, #32]
 8010530:	873b      	strh	r3, [r7, #56]	; 0x38
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, XTalkCompensationEnable);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	7f1b      	ldrb	r3, [r3, #28]
 8010536:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			if (XTalkCompensationEnable) {
 801053a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801053e:	2b00      	cmp	r3, #0
 8010540:	d02c      	beq.n	801059c <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate - ((XTalkCompensationRateMegaCps * EffectiveSpadRtnCount) >> 8)) <= 0) {
 8010542:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010544:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010548:	fb02 f303 	mul.w	r3, r2, r3
 801054c:	121a      	asrs	r2, r3, #8
 801054e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010550:	429a      	cmp	r2, r3
 8010552:	d10d      	bne.n	8010570 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8010554:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010558:	2b00      	cmp	r3, #0
 801055a:	d004      	beq.n	8010566 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 801055c:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8010560:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8010564:	e016      	b.n	8010594 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888 << 2;
 8010566:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 801056a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 801056e:	e011      	b.n	8010594 <VL53L0X_GetRangingMeasurementData+0x15c>
				}
				else {
					XtalkRangeMilliMeter = (tmpuint16 * SignalRate) / (SignalRate - ((XTalkCompensationRateMegaCps * EffectiveSpadRtnCount) >> 8));
 8010570:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8010574:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010576:	fb03 f202 	mul.w	r2, r3, r2
 801057a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801057c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8010580:	fb01 f303 	mul.w	r3, r1, r3
 8010584:	121b      	asrs	r3, r3, #8
 8010586:	4619      	mov	r1, r3
 8010588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801058a:	1a5b      	subs	r3, r3, r1
 801058c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010590:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8010594:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8010598:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 801059c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d00d      	beq.n	80105c0 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter = (uint16_t) ((tmpuint16) >> 2);
 80105a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80105a8:	089b      	lsrs	r3, r3, #2
 80105aa:	b29a      	uxth	r2, r3
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = (uint8_t) ((tmpuint16 & 0x03) << 6);
 80105b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80105b4:	b2db      	uxtb	r3, r3
 80105b6:	019b      	lsls	r3, r3, #6
 80105b8:	b2da      	uxtb	r2, r3
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	75da      	strb	r2, [r3, #23]
 80105be:	e006      	b.n	80105ce <VL53L0X_GetRangingMeasurementData+0x196>
		}
		else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80105c6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	2200      	movs	r2, #0
 80105cc:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus, SignalRate, EffectiveSpadRtnCount, pRangingMeasurementData, &PalRangeStatus);
 80105ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80105d2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80105d6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80105da:	9301      	str	r3, [sp, #4]
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	9300      	str	r3, [sp, #0]
 80105e0:	4613      	mov	r3, r2
 80105e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f002 ff4b 	bl	8013480 <VL53L0X_get_pal_range_status>
 80105ea:	4603      	mov	r3, r0
 80105ec:	461a      	mov	r2, r3
 80105ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80105f2:	4313      	orrs	r3, r2
 80105f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		if (Status == VL53L0X_ERROR_NONE)
 80105f8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d103      	bne.n	8010608 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8010600:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8010608:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 801060c:	2b00      	cmp	r3, #0
 801060e:	d12f      	bne.n	8010670 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f107 040c 	add.w	r4, r7, #12
 8010616:	f103 0550 	add.w	r5, r3, #80	; 0x50
 801061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801061e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010622:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter = pRangingMeasurementData->RangeMilliMeter;
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	891b      	ldrh	r3, [r3, #8]
 801062a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart = pRangingMeasurementData->RangeFractionalPart;
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	7ddb      	ldrb	r3, [r3, #23]
 8010630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter = pRangingMeasurementData->RangeDMaxMilliMeter;
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	895b      	ldrh	r3, [r3, #10]
 8010638:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec = pRangingMeasurementData->MeasurementTimeUsec;
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	685b      	ldr	r3, [r3, #4]
 801063e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps = pRangingMeasurementData->SignalRateRtnMegaCps;
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	68db      	ldr	r3, [r3, #12]
 8010644:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps = pRangingMeasurementData->AmbientRateRtnMegaCps;
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	691b      	ldr	r3, [r3, #16]
 801064a:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount = pRangingMeasurementData->EffectiveSpadRtnCount;
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	8a9b      	ldrh	r3, [r3, #20]
 8010650:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus = pRangingMeasurementData->RangeStatus;
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	7e1b      	ldrb	r3, [r3, #24]
 8010656:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8010660:	f107 050c 	add.w	r5, r7, #12
 8010664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010668:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801066c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8010670:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8010674:	4618      	mov	r0, r3
 8010676:	3750      	adds	r7, #80	; 0x50
 8010678:	46bd      	mov	sp, r7
 801067a:	bdb0      	pop	{r4, r5, r7, pc}
 801067c:	10624dd3 	.word	0x10624dd3

08010680 <VL53L0X_PerformSingleRangingMeasurement>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData) {
 8010680:	b580      	push	{r7, lr}
 8010682:	b084      	sub	sp, #16
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801068a:	2300      	movs	r3, #0
 801068c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 801068e:	2100      	movs	r1, #0
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f7ff f8e9 	bl	800f868 <VL53L0X_SetDeviceMode>
 8010696:	4603      	mov	r3, r0
 8010698:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 801069a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d104      	bne.n	80106ac <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f7ff fd16 	bl	80100d4 <VL53L0X_PerformSingleMeasurement>
 80106a8:	4603      	mov	r3, r0
 80106aa:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80106ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d105      	bne.n	80106c0 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev, pRangingMeasurementData);
 80106b4:	6839      	ldr	r1, [r7, #0]
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f7ff febe 	bl	8010438 <VL53L0X_GetRangingMeasurementData>
 80106bc:	4603      	mov	r3, r0
 80106be:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80106c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d105      	bne.n	80106d4 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80106c8:	2100      	movs	r1, #0
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f000 f962 	bl	8010994 <VL53L0X_ClearInterruptMask>
 80106d0:	4603      	mov	r3, r0
 80106d2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80106d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3710      	adds	r7, #16
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}

080106e0 <VL53L0X_SetGpioConfig>:
	return Status;
}

/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin, VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality, VL53L0X_InterruptPolarity Polarity) {
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b084      	sub	sp, #16
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	4608      	mov	r0, r1
 80106ea:	4611      	mov	r1, r2
 80106ec:	461a      	mov	r2, r3
 80106ee:	4603      	mov	r3, r0
 80106f0:	70fb      	strb	r3, [r7, #3]
 80106f2:	460b      	mov	r3, r1
 80106f4:	70bb      	strb	r3, [r7, #2]
 80106f6:	4613      	mov	r3, r2
 80106f8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80106fa:	2300      	movs	r3, #0
 80106fc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80106fe:	78fb      	ldrb	r3, [r7, #3]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d002      	beq.n	801070a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8010704:	23f6      	movs	r3, #246	; 0xf6
 8010706:	73fb      	strb	r3, [r7, #15]
 8010708:	e107      	b.n	801091a <VL53L0X_SetGpioConfig+0x23a>
	}
	else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 801070a:	78bb      	ldrb	r3, [r7, #2]
 801070c:	2b14      	cmp	r3, #20
 801070e:	d110      	bne.n	8010732 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8010710:	7e3b      	ldrb	r3, [r7, #24]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d102      	bne.n	801071c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8010716:	2310      	movs	r3, #16
 8010718:	73bb      	strb	r3, [r7, #14]
 801071a:	e001      	b.n	8010720 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 801071c:	2301      	movs	r3, #1
 801071e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8010720:	7bbb      	ldrb	r3, [r7, #14]
 8010722:	461a      	mov	r2, r3
 8010724:	2184      	movs	r1, #132	; 0x84
 8010726:	6878      	ldr	r0, [r7, #4]
 8010728:	f003 f922 	bl	8013970 <VL53L0X_WrByte>
 801072c:	4603      	mov	r3, r0
 801072e:	73fb      	strb	r3, [r7, #15]
 8010730:	e0f3      	b.n	801091a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	}
	else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8010732:	78bb      	ldrb	r3, [r7, #2]
 8010734:	2b15      	cmp	r3, #21
 8010736:	f040 8097 	bne.w	8010868 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 801073a:	2201      	movs	r2, #1
 801073c:	21ff      	movs	r1, #255	; 0xff
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f003 f916 	bl	8013970 <VL53L0X_WrByte>
 8010744:	4603      	mov	r3, r0
 8010746:	461a      	mov	r2, r3
 8010748:	7bfb      	ldrb	r3, [r7, #15]
 801074a:	4313      	orrs	r3, r2
 801074c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 801074e:	2200      	movs	r2, #0
 8010750:	2100      	movs	r1, #0
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f003 f90c 	bl	8013970 <VL53L0X_WrByte>
 8010758:	4603      	mov	r3, r0
 801075a:	461a      	mov	r2, r3
 801075c:	7bfb      	ldrb	r3, [r7, #15]
 801075e:	4313      	orrs	r3, r2
 8010760:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8010762:	2200      	movs	r2, #0
 8010764:	21ff      	movs	r1, #255	; 0xff
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f003 f902 	bl	8013970 <VL53L0X_WrByte>
 801076c:	4603      	mov	r3, r0
 801076e:	461a      	mov	r2, r3
 8010770:	7bfb      	ldrb	r3, [r7, #15]
 8010772:	4313      	orrs	r3, r2
 8010774:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8010776:	2201      	movs	r2, #1
 8010778:	2180      	movs	r1, #128	; 0x80
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f003 f8f8 	bl	8013970 <VL53L0X_WrByte>
 8010780:	4603      	mov	r3, r0
 8010782:	461a      	mov	r2, r3
 8010784:	7bfb      	ldrb	r3, [r7, #15]
 8010786:	4313      	orrs	r3, r2
 8010788:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 801078a:	2202      	movs	r2, #2
 801078c:	2185      	movs	r1, #133	; 0x85
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f003 f8ee 	bl	8013970 <VL53L0X_WrByte>
 8010794:	4603      	mov	r3, r0
 8010796:	461a      	mov	r2, r3
 8010798:	7bfb      	ldrb	r3, [r7, #15]
 801079a:	4313      	orrs	r3, r2
 801079c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 801079e:	2204      	movs	r2, #4
 80107a0:	21ff      	movs	r1, #255	; 0xff
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f003 f8e4 	bl	8013970 <VL53L0X_WrByte>
 80107a8:	4603      	mov	r3, r0
 80107aa:	461a      	mov	r2, r3
 80107ac:	7bfb      	ldrb	r3, [r7, #15]
 80107ae:	4313      	orrs	r3, r2
 80107b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80107b2:	2200      	movs	r2, #0
 80107b4:	21cd      	movs	r1, #205	; 0xcd
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f003 f8da 	bl	8013970 <VL53L0X_WrByte>
 80107bc:	4603      	mov	r3, r0
 80107be:	461a      	mov	r2, r3
 80107c0:	7bfb      	ldrb	r3, [r7, #15]
 80107c2:	4313      	orrs	r3, r2
 80107c4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80107c6:	2211      	movs	r2, #17
 80107c8:	21cc      	movs	r1, #204	; 0xcc
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f003 f8d0 	bl	8013970 <VL53L0X_WrByte>
 80107d0:	4603      	mov	r3, r0
 80107d2:	461a      	mov	r2, r3
 80107d4:	7bfb      	ldrb	r3, [r7, #15]
 80107d6:	4313      	orrs	r3, r2
 80107d8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80107da:	2207      	movs	r2, #7
 80107dc:	21ff      	movs	r1, #255	; 0xff
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f003 f8c6 	bl	8013970 <VL53L0X_WrByte>
 80107e4:	4603      	mov	r3, r0
 80107e6:	461a      	mov	r2, r3
 80107e8:	7bfb      	ldrb	r3, [r7, #15]
 80107ea:	4313      	orrs	r3, r2
 80107ec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80107ee:	2200      	movs	r2, #0
 80107f0:	21be      	movs	r1, #190	; 0xbe
 80107f2:	6878      	ldr	r0, [r7, #4]
 80107f4:	f003 f8bc 	bl	8013970 <VL53L0X_WrByte>
 80107f8:	4603      	mov	r3, r0
 80107fa:	461a      	mov	r2, r3
 80107fc:	7bfb      	ldrb	r3, [r7, #15]
 80107fe:	4313      	orrs	r3, r2
 8010800:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8010802:	2206      	movs	r2, #6
 8010804:	21ff      	movs	r1, #255	; 0xff
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f003 f8b2 	bl	8013970 <VL53L0X_WrByte>
 801080c:	4603      	mov	r3, r0
 801080e:	461a      	mov	r2, r3
 8010810:	7bfb      	ldrb	r3, [r7, #15]
 8010812:	4313      	orrs	r3, r2
 8010814:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8010816:	2209      	movs	r2, #9
 8010818:	21cc      	movs	r1, #204	; 0xcc
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f003 f8a8 	bl	8013970 <VL53L0X_WrByte>
 8010820:	4603      	mov	r3, r0
 8010822:	461a      	mov	r2, r3
 8010824:	7bfb      	ldrb	r3, [r7, #15]
 8010826:	4313      	orrs	r3, r2
 8010828:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 801082a:	2200      	movs	r2, #0
 801082c:	21ff      	movs	r1, #255	; 0xff
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f003 f89e 	bl	8013970 <VL53L0X_WrByte>
 8010834:	4603      	mov	r3, r0
 8010836:	461a      	mov	r2, r3
 8010838:	7bfb      	ldrb	r3, [r7, #15]
 801083a:	4313      	orrs	r3, r2
 801083c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 801083e:	2201      	movs	r2, #1
 8010840:	21ff      	movs	r1, #255	; 0xff
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f003 f894 	bl	8013970 <VL53L0X_WrByte>
 8010848:	4603      	mov	r3, r0
 801084a:	461a      	mov	r2, r3
 801084c:	7bfb      	ldrb	r3, [r7, #15]
 801084e:	4313      	orrs	r3, r2
 8010850:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8010852:	2200      	movs	r2, #0
 8010854:	2100      	movs	r1, #0
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f003 f88a 	bl	8013970 <VL53L0X_WrByte>
 801085c:	4603      	mov	r3, r0
 801085e:	461a      	mov	r2, r3
 8010860:	7bfb      	ldrb	r3, [r7, #15]
 8010862:	4313      	orrs	r3, r2
 8010864:	73fb      	strb	r3, [r7, #15]
 8010866:	e058      	b.n	801091a <VL53L0X_SetGpioConfig+0x23a>

	}
	else {

		if (Status == VL53L0X_ERROR_NONE) {
 8010868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d121      	bne.n	80108b4 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8010870:	787b      	ldrb	r3, [r7, #1]
 8010872:	2b04      	cmp	r3, #4
 8010874:	d81b      	bhi.n	80108ae <VL53L0X_SetGpioConfig+0x1ce>
 8010876:	a201      	add	r2, pc, #4	; (adr r2, 801087c <VL53L0X_SetGpioConfig+0x19c>)
 8010878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801087c:	08010891 	.word	0x08010891
 8010880:	08010897 	.word	0x08010897
 8010884:	0801089d 	.word	0x0801089d
 8010888:	080108a3 	.word	0x080108a3
 801088c:	080108a9 	.word	0x080108a9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8010890:	2300      	movs	r3, #0
 8010892:	73bb      	strb	r3, [r7, #14]
				break;
 8010894:	e00f      	b.n	80108b6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8010896:	2301      	movs	r3, #1
 8010898:	73bb      	strb	r3, [r7, #14]
				break;
 801089a:	e00c      	b.n	80108b6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 801089c:	2302      	movs	r3, #2
 801089e:	73bb      	strb	r3, [r7, #14]
				break;
 80108a0:	e009      	b.n	80108b6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80108a2:	2303      	movs	r3, #3
 80108a4:	73bb      	strb	r3, [r7, #14]
				break;
 80108a6:	e006      	b.n	80108b6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80108a8:	2304      	movs	r3, #4
 80108aa:	73bb      	strb	r3, [r7, #14]
				break;
 80108ac:	e003      	b.n	80108b6 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80108ae:	23f5      	movs	r3, #245	; 0xf5
 80108b0:	73fb      	strb	r3, [r7, #15]
 80108b2:	e000      	b.n	80108b6 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80108b4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80108b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d107      	bne.n	80108ce <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80108be:	7bbb      	ldrb	r3, [r7, #14]
 80108c0:	461a      	mov	r2, r3
 80108c2:	210a      	movs	r1, #10
 80108c4:	6878      	ldr	r0, [r7, #4]
 80108c6:	f003 f853 	bl	8013970 <VL53L0X_WrByte>
 80108ca:	4603      	mov	r3, r0
 80108cc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80108ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d10f      	bne.n	80108f6 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80108d6:	7e3b      	ldrb	r3, [r7, #24]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d102      	bne.n	80108e2 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80108dc:	2300      	movs	r3, #0
 80108de:	73bb      	strb	r3, [r7, #14]
 80108e0:	e001      	b.n	80108e6 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t) (1 << 4);
 80108e2:	2310      	movs	r3, #16
 80108e4:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80108e6:	7bbb      	ldrb	r3, [r7, #14]
 80108e8:	22ef      	movs	r2, #239	; 0xef
 80108ea:	2184      	movs	r1, #132	; 0x84
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f003 f88d 	bl	8013a0c <VL53L0X_UpdateByte>
 80108f2:	4603      	mov	r3, r0
 80108f4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80108f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d103      	bne.n	8010906 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality, Functionality);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	787a      	ldrb	r2, [r7, #1]
 8010902:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda

		if (Status == VL53L0X_ERROR_NONE)
 8010906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d105      	bne.n	801091a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 801090e:	2100      	movs	r1, #0
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f000 f83f 	bl	8010994 <VL53L0X_ClearInterruptMask>
 8010916:	4603      	mov	r3, r0
 8010918:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 801091a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801091e:	4618      	mov	r0, r3
 8010920:	3710      	adds	r7, #16
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
 8010926:	bf00      	nop

08010928 <VL53L0X_GetInterruptThresholds>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow, FixPoint1616_t *pThresholdHigh) {
 8010928:	b580      	push	{r7, lr}
 801092a:	b086      	sub	sp, #24
 801092c:	af00      	add	r7, sp, #0
 801092e:	60f8      	str	r0, [r7, #12]
 8010930:	607a      	str	r2, [r7, #4]
 8010932:	603b      	str	r3, [r7, #0]
 8010934:	460b      	mov	r3, r1
 8010936:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010938:	2300      	movs	r3, #0
 801093a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 801093c:	f107 0314 	add.w	r3, r7, #20
 8010940:	461a      	mov	r2, r3
 8010942:	210e      	movs	r1, #14
 8010944:	68f8      	ldr	r0, [r7, #12]
 8010946:	f003 f8bf 	bl	8013ac8 <VL53L0X_RdWord>
 801094a:	4603      	mov	r3, r0
 801094c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t) ((0x00fff & Threshold16) << 17);
 801094e:	8abb      	ldrh	r3, [r7, #20]
 8010950:	045b      	lsls	r3, r3, #17
 8010952:	461a      	mov	r2, r3
 8010954:	4b0e      	ldr	r3, [pc, #56]	; (8010990 <VL53L0X_GetInterruptThresholds+0x68>)
 8010956:	4013      	ands	r3, r2
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 801095c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d10f      	bne.n	8010984 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH, &Threshold16);
 8010964:	f107 0314 	add.w	r3, r7, #20
 8010968:	461a      	mov	r2, r3
 801096a:	210c      	movs	r1, #12
 801096c:	68f8      	ldr	r0, [r7, #12]
 801096e:	f003 f8ab 	bl	8013ac8 <VL53L0X_RdWord>
 8010972:	4603      	mov	r3, r0
 8010974:	75fb      	strb	r3, [r7, #23]
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh = (FixPoint1616_t) ((0x00fff & Threshold16) << 17);
 8010976:	8abb      	ldrh	r3, [r7, #20]
 8010978:	045b      	lsls	r3, r3, #17
 801097a:	461a      	mov	r2, r3
 801097c:	4b04      	ldr	r3, [pc, #16]	; (8010990 <VL53L0X_GetInterruptThresholds+0x68>)
 801097e:	4013      	ands	r3, r2
 8010980:	683a      	ldr	r2, [r7, #0]
 8010982:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8010984:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010988:	4618      	mov	r0, r3
 801098a:	3718      	adds	r7, #24
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}
 8010990:	1ffe0000 	.word	0x1ffe0000

08010994 <VL53L0X_ClearInterruptMask>:
	LOG_FUNCTION_END(Status);
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask) {
 8010994:	b580      	push	{r7, lr}
 8010996:	b084      	sub	sp, #16
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801099e:	2300      	movs	r3, #0
 80109a0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80109a2:	2300      	movs	r3, #0
 80109a4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80109a6:	2201      	movs	r2, #1
 80109a8:	210b      	movs	r1, #11
 80109aa:	6878      	ldr	r0, [r7, #4]
 80109ac:	f002 ffe0 	bl	8013970 <VL53L0X_WrByte>
 80109b0:	4603      	mov	r3, r0
 80109b2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80109b4:	2200      	movs	r2, #0
 80109b6:	210b      	movs	r1, #11
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f002 ffd9 	bl	8013970 <VL53L0X_WrByte>
 80109be:	4603      	mov	r3, r0
 80109c0:	461a      	mov	r2, r3
 80109c2:	7bfb      	ldrb	r3, [r7, #15]
 80109c4:	4313      	orrs	r3, r2
 80109c6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80109c8:	f107 030d 	add.w	r3, r7, #13
 80109cc:	461a      	mov	r2, r3
 80109ce:	2113      	movs	r1, #19
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f003 f84f 	bl	8013a74 <VL53L0X_RdByte>
 80109d6:	4603      	mov	r3, r0
 80109d8:	461a      	mov	r2, r3
 80109da:	7bfb      	ldrb	r3, [r7, #15]
 80109dc:	4313      	orrs	r3, r2
 80109de:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80109e0:	7bbb      	ldrb	r3, [r7, #14]
 80109e2:	3301      	adds	r3, #1
 80109e4:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00) && (LoopCount < 3) && (Status == VL53L0X_ERROR_NONE));
 80109e6:	7b7b      	ldrb	r3, [r7, #13]
 80109e8:	f003 0307 	and.w	r3, r3, #7
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d006      	beq.n	80109fe <VL53L0X_ClearInterruptMask+0x6a>
 80109f0:	7bbb      	ldrb	r3, [r7, #14]
 80109f2:	2b02      	cmp	r3, #2
 80109f4:	d803      	bhi.n	80109fe <VL53L0X_ClearInterruptMask+0x6a>
 80109f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d0d3      	beq.n	80109a6 <VL53L0X_ClearInterruptMask+0x12>

	if (LoopCount >= 3)
 80109fe:	7bbb      	ldrb	r3, [r7, #14]
 8010a00:	2b02      	cmp	r3, #2
 8010a02:	d901      	bls.n	8010a08 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8010a04:	23f4      	movs	r3, #244	; 0xf4
 8010a06:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8010a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	3710      	adds	r7, #16
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}

08010a14 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev, uint32_t *pInterruptMaskStatus) {
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b084      	sub	sp, #16
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
 8010a1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8010a22:	f107 030e 	add.w	r3, r7, #14
 8010a26:	461a      	mov	r2, r3
 8010a28:	2113      	movs	r1, #19
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f003 f822 	bl	8013a74 <VL53L0X_RdByte>
 8010a30:	4603      	mov	r3, r0
 8010a32:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8010a34:	7bbb      	ldrb	r3, [r7, #14]
 8010a36:	f003 0207 	and.w	r2, r3, #7
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8010a3e:	7bbb      	ldrb	r3, [r7, #14]
 8010a40:	f003 0318 	and.w	r3, r3, #24
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d001      	beq.n	8010a4c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8010a48:	23fa      	movs	r3, #250	; 0xfa
 8010a4a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8010a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3710      	adds	r7, #16
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}

08010a58 <VL53L0X_PerformRefSpadManagement>:
	Status = VL53L0X_get_reference_spads(Dev, pSpadCount, pIsApertureSpads);

	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev, uint32_t *refSpadCount, uint8_t *isApertureSpads) {
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b086      	sub	sp, #24
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	60f8      	str	r0, [r7, #12]
 8010a60:	60b9      	str	r1, [r7, #8]
 8010a62:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010a64:	2300      	movs	r3, #0
 8010a66:	75fb      	strb	r3, [r7, #23]

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount, isApertureSpads);
 8010a68:	687a      	ldr	r2, [r7, #4]
 8010a6a:	68b9      	ldr	r1, [r7, #8]
 8010a6c:	68f8      	ldr	r0, [r7, #12]
 8010a6e:	f000 fa03 	bl	8010e78 <VL53L0X_perform_ref_spad_management>
 8010a72:	4603      	mov	r3, r0
 8010a74:	75fb      	strb	r3, [r7, #23]

	return Status;
 8010a76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3718      	adds	r7, #24
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}

08010a82 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8010a82:	b580      	push	{r7, lr}
 8010a84:	b084      	sub	sp, #16
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	6078      	str	r0, [r7, #4]
 8010a8a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8010a90:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8010a94:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8010a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a9a:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8010a9c:	f107 0308 	add.w	r3, r7, #8
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	2128      	movs	r1, #40	; 0x28
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f003 f80f 	bl	8013ac8 <VL53L0X_RdWord>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8010aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d11e      	bne.n	8010af4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8010ab6:	893b      	ldrh	r3, [r7, #8]
 8010ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8010ac0:	893b      	ldrh	r3, [r7, #8]
 8010ac2:	461a      	mov	r2, r3
 8010ac4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	dd0b      	ble.n	8010ae4 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8010acc:	893a      	ldrh	r2, [r7, #8]
 8010ace:	897b      	ldrh	r3, [r7, #10]
 8010ad0:	1ad3      	subs	r3, r2, r3
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	b21b      	sxth	r3, r3
 8010ad6:	461a      	mov	r2, r3
					* 250;
 8010ad8:	23fa      	movs	r3, #250	; 0xfa
 8010ada:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	601a      	str	r2, [r3, #0]
 8010ae2:	e007      	b.n	8010af4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8010ae4:	893b      	ldrh	r3, [r7, #8]
 8010ae6:	b21b      	sxth	r3, r3
 8010ae8:	461a      	mov	r2, r3
 8010aea:	23fa      	movs	r3, #250	; 0xfa
 8010aec:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8010af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3710      	adds	r7, #16
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}

08010b00 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8010b00:	b480      	push	{r7}
 8010b02:	b08b      	sub	sp, #44	; 0x2c
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	60f8      	str	r0, [r7, #12]
 8010b08:	60b9      	str	r1, [r7, #8]
 8010b0a:	607a      	str	r2, [r7, #4]
 8010b0c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8010b0e:	2308      	movs	r3, #8
 8010b10:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8010b12:	2300      	movs	r3, #0
 8010b14:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	f04f 32ff 	mov.w	r2, #4294967295
 8010b1c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8010b1e:	687a      	ldr	r2, [r7, #4]
 8010b20:	69bb      	ldr	r3, [r7, #24]
 8010b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b26:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	69ba      	ldr	r2, [r7, #24]
 8010b2c:	fbb3 f2f2 	udiv	r2, r3, r2
 8010b30:	69b9      	ldr	r1, [r7, #24]
 8010b32:	fb01 f202 	mul.w	r2, r1, r2
 8010b36:	1a9b      	subs	r3, r3, r2
 8010b38:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8010b3e:	e030      	b.n	8010ba2 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8010b40:	2300      	movs	r3, #0
 8010b42:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8010b44:	68fa      	ldr	r2, [r7, #12]
 8010b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b48:	4413      	add	r3, r2
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8010b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d11e      	bne.n	8010b94 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8010b56:	7ffa      	ldrb	r2, [r7, #31]
 8010b58:	693b      	ldr	r3, [r7, #16]
 8010b5a:	fa42 f303 	asr.w	r3, r2, r3
 8010b5e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8010b64:	e016      	b.n	8010b94 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8010b66:	7ffb      	ldrb	r3, [r7, #31]
 8010b68:	f003 0301 	and.w	r3, r3, #1
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d00b      	beq.n	8010b88 <get_next_good_spad+0x88>
				success = 1;
 8010b70:	2301      	movs	r3, #1
 8010b72:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8010b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b76:	69ba      	ldr	r2, [r7, #24]
 8010b78:	fb03 f202 	mul.w	r2, r3, r2
 8010b7c:	6a3b      	ldr	r3, [r7, #32]
 8010b7e:	4413      	add	r3, r2
 8010b80:	461a      	mov	r2, r3
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	601a      	str	r2, [r3, #0]
				break;
 8010b86:	e009      	b.n	8010b9c <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8010b88:	7ffb      	ldrb	r3, [r7, #31]
 8010b8a:	085b      	lsrs	r3, r3, #1
 8010b8c:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8010b8e:	6a3b      	ldr	r3, [r7, #32]
 8010b90:	3301      	adds	r3, #1
 8010b92:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8010b94:	6a3a      	ldr	r2, [r7, #32]
 8010b96:	69bb      	ldr	r3, [r7, #24]
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	d3e4      	bcc.n	8010b66 <get_next_good_spad+0x66>
				coarseIndex++) {
 8010b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9e:	3301      	adds	r3, #1
 8010ba0:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8010ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d202      	bcs.n	8010bb0 <get_next_good_spad+0xb0>
 8010baa:	7fbb      	ldrb	r3, [r7, #30]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d0c7      	beq.n	8010b40 <get_next_good_spad+0x40>
		}
	}
}
 8010bb0:	bf00      	nop
 8010bb2:	372c      	adds	r7, #44	; 0x2c
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bba:	4770      	bx	lr

08010bbc <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	b085      	sub	sp, #20
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	099b      	lsrs	r3, r3, #6
 8010bcc:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8010bce:	4a07      	ldr	r2, [pc, #28]	; (8010bec <is_aperture+0x30>)
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d101      	bne.n	8010bde <is_aperture+0x22>
		isAperture = 0;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8010bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	3714      	adds	r7, #20
 8010be4:	46bd      	mov	sp, r7
 8010be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bea:	4770      	bx	lr
 8010bec:	200002d4 	.word	0x200002d4

08010bf0 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	b089      	sub	sp, #36	; 0x24
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	60b9      	str	r1, [r7, #8]
 8010bfa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8010c00:	2308      	movs	r3, #8
 8010c02:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8010c04:	687a      	ldr	r2, [r7, #4]
 8010c06:	69bb      	ldr	r3, [r7, #24]
 8010c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c0c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	69ba      	ldr	r2, [r7, #24]
 8010c12:	fbb3 f2f2 	udiv	r2, r3, r2
 8010c16:	69b9      	ldr	r1, [r7, #24]
 8010c18:	fb01 f202 	mul.w	r2, r1, r2
 8010c1c:	1a9b      	subs	r3, r3, r2
 8010c1e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8010c20:	697a      	ldr	r2, [r7, #20]
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	429a      	cmp	r2, r3
 8010c26:	d302      	bcc.n	8010c2e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8010c28:	23ce      	movs	r3, #206	; 0xce
 8010c2a:	77fb      	strb	r3, [r7, #31]
 8010c2c:	e010      	b.n	8010c50 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8010c2e:	68fa      	ldr	r2, [r7, #12]
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	4413      	add	r3, r2
 8010c34:	781b      	ldrb	r3, [r3, #0]
 8010c36:	b25a      	sxtb	r2, r3
 8010c38:	2101      	movs	r1, #1
 8010c3a:	693b      	ldr	r3, [r7, #16]
 8010c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8010c40:	b25b      	sxtb	r3, r3
 8010c42:	4313      	orrs	r3, r2
 8010c44:	b259      	sxtb	r1, r3
 8010c46:	68fa      	ldr	r2, [r7, #12]
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	4413      	add	r3, r2
 8010c4c:	b2ca      	uxtb	r2, r1
 8010c4e:	701a      	strb	r2, [r3, #0]

	return status;
 8010c50:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3724      	adds	r7, #36	; 0x24
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5e:	4770      	bx	lr

08010c60 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b084      	sub	sp, #16
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
 8010c68:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8010c6a:	2306      	movs	r3, #6
 8010c6c:	683a      	ldr	r2, [r7, #0]
 8010c6e:	21b0      	movs	r1, #176	; 0xb0
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f002 fe21 	bl	80138b8 <VL53L0X_WriteMulti>
 8010c76:	4603      	mov	r3, r0
 8010c78:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8010c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3710      	adds	r7, #16
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}

08010c86 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8010c86:	b580      	push	{r7, lr}
 8010c88:	b084      	sub	sp, #16
 8010c8a:	af00      	add	r7, sp, #0
 8010c8c:	6078      	str	r0, [r7, #4]
 8010c8e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8010c90:	2306      	movs	r3, #6
 8010c92:	683a      	ldr	r2, [r7, #0]
 8010c94:	21b0      	movs	r1, #176	; 0xb0
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f002 fe3e 	bl	8013918 <VL53L0X_ReadMulti>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8010ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3710      	adds	r7, #16
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}

08010cac <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b08c      	sub	sp, #48	; 0x30
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	60f8      	str	r0, [r7, #12]
 8010cb4:	607a      	str	r2, [r7, #4]
 8010cb6:	603b      	str	r3, [r7, #0]
 8010cb8:	460b      	mov	r3, r1
 8010cba:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8010cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cc4:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8010cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cc8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8010cca:	2300      	movs	r3, #0
 8010ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cce:	e02b      	b.n	8010d28 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8010cd0:	f107 031c 	add.w	r3, r7, #28
 8010cd4:	6a3a      	ldr	r2, [r7, #32]
 8010cd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010cd8:	6878      	ldr	r0, [r7, #4]
 8010cda:	f7ff ff11 	bl	8010b00 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8010cde:	69fb      	ldr	r3, [r7, #28]
 8010ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ce4:	d103      	bne.n	8010cee <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8010ce6:	23ce      	movs	r3, #206	; 0xce
 8010ce8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8010cec:	e020      	b.n	8010d30 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8010cee:	69fb      	ldr	r3, [r7, #28]
 8010cf0:	461a      	mov	r2, r3
 8010cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cf4:	4413      	add	r3, r2
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f7ff ff60 	bl	8010bbc <is_aperture>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	461a      	mov	r2, r3
 8010d00:	7afb      	ldrb	r3, [r7, #11]
 8010d02:	4293      	cmp	r3, r2
 8010d04:	d003      	beq.n	8010d0e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8010d06:	23ce      	movs	r3, #206	; 0xce
 8010d08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8010d0c:	e010      	b.n	8010d30 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8010d0e:	69fb      	ldr	r3, [r7, #28]
 8010d10:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8010d12:	6a3a      	ldr	r2, [r7, #32]
 8010d14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d16:	6838      	ldr	r0, [r7, #0]
 8010d18:	f7ff ff6a 	bl	8010bf0 <enable_spad_bit>
		currentSpad++;
 8010d1c:	6a3b      	ldr	r3, [r7, #32]
 8010d1e:	3301      	adds	r3, #1
 8010d20:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8010d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d24:	3301      	adds	r3, #1
 8010d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d3cf      	bcc.n	8010cd0 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8010d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d32:	6a3a      	ldr	r2, [r7, #32]
 8010d34:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8010d36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d106      	bne.n	8010d4c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8010d3e:	6839      	ldr	r1, [r7, #0]
 8010d40:	68f8      	ldr	r0, [r7, #12]
 8010d42:	f7ff ff8d 	bl	8010c60 <set_ref_spad_map>
 8010d46:	4603      	mov	r3, r0
 8010d48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8010d4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d121      	bne.n	8010d98 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8010d54:	f107 0314 	add.w	r3, r7, #20
 8010d58:	4619      	mov	r1, r3
 8010d5a:	68f8      	ldr	r0, [r7, #12]
 8010d5c:	f7ff ff93 	bl	8010c86 <get_ref_spad_map>
 8010d60:	4603      	mov	r3, r0
 8010d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8010d66:	2300      	movs	r3, #0
 8010d68:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8010d6a:	e011      	b.n	8010d90 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8010d6c:	683a      	ldr	r2, [r7, #0]
 8010d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d70:	4413      	add	r3, r2
 8010d72:	781a      	ldrb	r2, [r3, #0]
 8010d74:	f107 0114 	add.w	r1, r7, #20
 8010d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d7a:	440b      	add	r3, r1
 8010d7c:	781b      	ldrb	r3, [r3, #0]
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d003      	beq.n	8010d8a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8010d82:	23ce      	movs	r3, #206	; 0xce
 8010d84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8010d88:	e006      	b.n	8010d98 <enable_ref_spads+0xec>
			}
			i++;
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8c:	3301      	adds	r3, #1
 8010d8e:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8010d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d94:	429a      	cmp	r2, r3
 8010d96:	d3e9      	bcc.n	8010d6c <enable_ref_spads+0xc0>
		}
	}
	return status;
 8010d98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3730      	adds	r7, #48	; 0x30
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}

08010da4 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b08a      	sub	sp, #40	; 0x28
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8010dae:	2300      	movs	r3, #0
 8010db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8010db4:	2300      	movs	r3, #0
 8010db6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010dc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8010dc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d107      	bne.n	8010ddc <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8010dcc:	22c0      	movs	r2, #192	; 0xc0
 8010dce:	2101      	movs	r1, #1
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f002 fdcd 	bl	8013970 <VL53L0X_WrByte>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8010ddc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d108      	bne.n	8010df6 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8010de4:	f107 0308 	add.w	r3, r7, #8
 8010de8:	4619      	mov	r1, r3
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f7ff fc48 	bl	8010680 <VL53L0X_PerformSingleRangingMeasurement>
 8010df0:	4603      	mov	r3, r0
 8010df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8010df6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d107      	bne.n	8010e0e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8010dfe:	2201      	movs	r2, #1
 8010e00:	21ff      	movs	r1, #255	; 0xff
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f002 fdb4 	bl	8013970 <VL53L0X_WrByte>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8010e0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d107      	bne.n	8010e26 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8010e16:	683a      	ldr	r2, [r7, #0]
 8010e18:	21b6      	movs	r1, #182	; 0xb6
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f002 fe54 	bl	8013ac8 <VL53L0X_RdWord>
 8010e20:	4603      	mov	r3, r0
 8010e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8010e26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d107      	bne.n	8010e3e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8010e2e:	2200      	movs	r2, #0
 8010e30:	21ff      	movs	r1, #255	; 0xff
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f002 fd9c 	bl	8013970 <VL53L0X_WrByte>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8010e3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d112      	bne.n	8010e6c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8010e46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010e4a:	461a      	mov	r2, r3
 8010e4c:	2101      	movs	r1, #1
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f002 fd8e 	bl	8013970 <VL53L0X_WrByte>
 8010e54:	4603      	mov	r3, r0
 8010e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8010e5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d104      	bne.n	8010e6c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8010e68:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8010e6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3728      	adds	r7, #40	; 0x28
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}

08010e78 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8010e78:	b590      	push	{r4, r7, lr}
 8010e7a:	b09d      	sub	sp, #116	; 0x74
 8010e7c:	af06      	add	r7, sp, #24
 8010e7e:	60f8      	str	r0, [r7, #12]
 8010e80:	60b9      	str	r1, [r7, #8]
 8010e82:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010e84:	2300      	movs	r3, #0
 8010e86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8010e8a:	23b4      	movs	r3, #180	; 0xb4
 8010e8c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8010e90:	2303      	movs	r3, #3
 8010e92:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8010e94:	232c      	movs	r3, #44	; 0x2c
 8010e96:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8010e98:	2300      	movs	r3, #0
 8010e9a:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8010ea4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8010ea8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8010eaa:	2300      	movs	r3, #0
 8010eac:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8010eb2:	2306      	movs	r3, #6
 8010eb4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8010eba:	2300      	movs	r3, #0
 8010ebc:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8010edc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8010ede:	2300      	movs	r3, #0
 8010ee0:	64bb      	str	r3, [r7, #72]	; 0x48
 8010ee2:	e009      	b.n	8010ef8 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8010ee4:	68fa      	ldr	r2, [r7, #12]
 8010ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ee8:	4413      	add	r3, r2
 8010eea:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8010eee:	2200      	movs	r2, #0
 8010ef0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8010ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ef4:	3301      	adds	r3, #1
 8010ef6:	64bb      	str	r3, [r7, #72]	; 0x48
 8010ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d3f1      	bcc.n	8010ee4 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8010f00:	2201      	movs	r2, #1
 8010f02:	21ff      	movs	r1, #255	; 0xff
 8010f04:	68f8      	ldr	r0, [r7, #12]
 8010f06:	f002 fd33 	bl	8013970 <VL53L0X_WrByte>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8010f10:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d107      	bne.n	8010f28 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8010f18:	2200      	movs	r2, #0
 8010f1a:	214f      	movs	r1, #79	; 0x4f
 8010f1c:	68f8      	ldr	r0, [r7, #12]
 8010f1e:	f002 fd27 	bl	8013970 <VL53L0X_WrByte>
 8010f22:	4603      	mov	r3, r0
 8010f24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8010f28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d107      	bne.n	8010f40 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8010f30:	222c      	movs	r2, #44	; 0x2c
 8010f32:	214e      	movs	r1, #78	; 0x4e
 8010f34:	68f8      	ldr	r0, [r7, #12]
 8010f36:	f002 fd1b 	bl	8013970 <VL53L0X_WrByte>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8010f40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d107      	bne.n	8010f58 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8010f48:	2200      	movs	r2, #0
 8010f4a:	21ff      	movs	r1, #255	; 0xff
 8010f4c:	68f8      	ldr	r0, [r7, #12]
 8010f4e:	f002 fd0f 	bl	8013970 <VL53L0X_WrByte>
 8010f52:	4603      	mov	r3, r0
 8010f54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8010f58:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d109      	bne.n	8010f74 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8010f60:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8010f64:	461a      	mov	r2, r3
 8010f66:	21b6      	movs	r1, #182	; 0xb6
 8010f68:	68f8      	ldr	r0, [r7, #12]
 8010f6a:	f002 fd01 	bl	8013970 <VL53L0X_WrByte>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8010f74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d107      	bne.n	8010f8c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	2180      	movs	r1, #128	; 0x80
 8010f80:	68f8      	ldr	r0, [r7, #12]
 8010f82:	f002 fcf5 	bl	8013970 <VL53L0X_WrByte>
 8010f86:	4603      	mov	r3, r0
 8010f88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8010f8c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d10a      	bne.n	8010faa <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8010f94:	f107 0210 	add.w	r2, r7, #16
 8010f98:	f107 0111 	add.w	r1, r7, #17
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	68f8      	ldr	r0, [r7, #12]
 8010fa0:	f000 fbbb 	bl	801171a <VL53L0X_perform_ref_calibration>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8010faa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d121      	bne.n	8010ff6 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8010fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fb8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8010fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fc0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8010fce:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8010fd2:	f107 0218 	add.w	r2, r7, #24
 8010fd6:	9204      	str	r2, [sp, #16]
 8010fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fda:	9203      	str	r2, [sp, #12]
 8010fdc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010fde:	9202      	str	r2, [sp, #8]
 8010fe0:	9301      	str	r3, [sp, #4]
 8010fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe4:	9300      	str	r3, [sp, #0]
 8010fe6:	4623      	mov	r3, r4
 8010fe8:	4602      	mov	r2, r0
 8010fea:	68f8      	ldr	r0, [r7, #12]
 8010fec:	f7ff fe5e 	bl	8010cac <enable_ref_spads>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8010ff6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d174      	bne.n	80110e8 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8010ffe:	69bb      	ldr	r3, [r7, #24]
 8011000:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8011002:	f107 0312 	add.w	r3, r7, #18
 8011006:	4619      	mov	r1, r3
 8011008:	68f8      	ldr	r0, [r7, #12]
 801100a:	f7ff fecb 	bl	8010da4 <perform_ref_signal_measurement>
 801100e:	4603      	mov	r3, r0
 8011010:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8011014:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8011018:	2b00      	cmp	r3, #0
 801101a:	d161      	bne.n	80110e0 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 801101c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 801101e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011020:	429a      	cmp	r2, r3
 8011022:	d25d      	bcs.n	80110e0 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8011024:	2300      	movs	r3, #0
 8011026:	64bb      	str	r3, [r7, #72]	; 0x48
 8011028:	e009      	b.n	801103e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 801102a:	68fa      	ldr	r2, [r7, #12]
 801102c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801102e:	4413      	add	r3, r2
 8011030:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8011034:	2200      	movs	r2, #0
 8011036:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8011038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801103a:	3301      	adds	r3, #1
 801103c:	64bb      	str	r3, [r7, #72]	; 0x48
 801103e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011042:	429a      	cmp	r2, r3
 8011044:	d3f1      	bcc.n	801102a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8011046:	e002      	b.n	801104e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8011048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801104a:	3301      	adds	r3, #1
 801104c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 801104e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8011052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011054:	4413      	add	r3, r2
 8011056:	4618      	mov	r0, r3
 8011058:	f7ff fdb0 	bl	8010bbc <is_aperture>
 801105c:	4603      	mov	r3, r0
 801105e:	2b00      	cmp	r3, #0
 8011060:	d103      	bne.n	801106a <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8011062:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011066:	429a      	cmp	r2, r3
 8011068:	d3ee      	bcc.n	8011048 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 801106a:	2301      	movs	r3, #1
 801106c:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 801106e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011070:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 801107e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8011082:	f107 0218 	add.w	r2, r7, #24
 8011086:	9204      	str	r2, [sp, #16]
 8011088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801108a:	9203      	str	r2, [sp, #12]
 801108c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801108e:	9202      	str	r2, [sp, #8]
 8011090:	9301      	str	r3, [sp, #4]
 8011092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011094:	9300      	str	r3, [sp, #0]
 8011096:	4623      	mov	r3, r4
 8011098:	4602      	mov	r2, r0
 801109a:	68f8      	ldr	r0, [r7, #12]
 801109c:	f7ff fe06 	bl	8010cac <enable_ref_spads>
 80110a0:	4603      	mov	r3, r0
 80110a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80110a6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d11b      	bne.n	80110e6 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80110ae:	69bb      	ldr	r3, [r7, #24]
 80110b0:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80110b2:	f107 0312 	add.w	r3, r7, #18
 80110b6:	4619      	mov	r1, r3
 80110b8:	68f8      	ldr	r0, [r7, #12]
 80110ba:	f7ff fe73 	bl	8010da4 <perform_ref_signal_measurement>
 80110be:	4603      	mov	r3, r0
 80110c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80110c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d10c      	bne.n	80110e6 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80110cc:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80110ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d208      	bcs.n	80110e6 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80110d4:	2301      	movs	r3, #1
 80110d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80110da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110dc:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80110de:	e002      	b.n	80110e6 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80110e0:	2300      	movs	r3, #0
 80110e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80110e4:	e000      	b.n	80110e8 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80110e6:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80110e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	f040 80af 	bne.w	8011250 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80110f2:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80110f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80110f6:	429a      	cmp	r2, r3
 80110f8:	f240 80aa 	bls.w	8011250 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80110fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8011102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011104:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	f503 7192 	add.w	r1, r3, #292	; 0x124
 801110c:	f107 031c 	add.w	r3, r7, #28
 8011110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011112:	4618      	mov	r0, r3
 8011114:	f002 fda0 	bl	8013c58 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8011118:	8a7b      	ldrh	r3, [r7, #18]
 801111a:	461a      	mov	r2, r3
 801111c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801111e:	1ad3      	subs	r3, r2, r3
 8011120:	2b00      	cmp	r3, #0
 8011122:	bfb8      	it	lt
 8011124:	425b      	neglt	r3, r3
 8011126:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8011128:	2300      	movs	r3, #0
 801112a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 801112e:	e086      	b.n	801123e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8011136:	f107 0314 	add.w	r3, r7, #20
 801113a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801113c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801113e:	f7ff fcdf 	bl	8010b00 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011148:	d103      	bne.n	8011152 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 801114a:	23ce      	movs	r3, #206	; 0xce
 801114c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8011150:	e07e      	b.n	8011250 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8011152:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8011156:	697a      	ldr	r2, [r7, #20]
 8011158:	4413      	add	r3, r2
 801115a:	4618      	mov	r0, r3
 801115c:	f7ff fd2e 	bl	8010bbc <is_aperture>
 8011160:	4603      	mov	r3, r0
 8011162:	461a      	mov	r2, r3
 8011164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011166:	4293      	cmp	r3, r2
 8011168:	d003      	beq.n	8011172 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 801116a:	2301      	movs	r3, #1
 801116c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8011170:	e06e      	b.n	8011250 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8011172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011174:	3301      	adds	r3, #1
 8011176:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8011182:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011186:	4618      	mov	r0, r3
 8011188:	f7ff fd32 	bl	8010bf0 <enable_spad_bit>
 801118c:	4603      	mov	r3, r0
 801118e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8011192:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8011196:	2b00      	cmp	r3, #0
 8011198:	d10c      	bne.n	80111b4 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 801119a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801119c:	3301      	adds	r3, #1
 801119e:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80111a6:	4619      	mov	r1, r3
 80111a8:	68f8      	ldr	r0, [r7, #12]
 80111aa:	f7ff fd59 	bl	8010c60 <set_ref_spad_map>
 80111ae:	4603      	mov	r3, r0
 80111b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80111b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d146      	bne.n	801124a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80111bc:	f107 0312 	add.w	r3, r7, #18
 80111c0:	4619      	mov	r1, r3
 80111c2:	68f8      	ldr	r0, [r7, #12]
 80111c4:	f7ff fdee 	bl	8010da4 <perform_ref_signal_measurement>
 80111c8:	4603      	mov	r3, r0
 80111ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80111ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d13b      	bne.n	801124e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80111d6:	8a7b      	ldrh	r3, [r7, #18]
 80111d8:	461a      	mov	r2, r3
 80111da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80111dc:	1ad3      	subs	r3, r2, r3
 80111de:	2b00      	cmp	r3, #0
 80111e0:	bfb8      	it	lt
 80111e2:	425b      	neglt	r3, r3
 80111e4:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80111e6:	8a7b      	ldrh	r3, [r7, #18]
 80111e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d21c      	bcs.n	8011228 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80111ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d914      	bls.n	8011220 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80111f6:	f107 031c 	add.w	r3, r7, #28
 80111fa:	4619      	mov	r1, r3
 80111fc:	68f8      	ldr	r0, [r7, #12]
 80111fe:	f7ff fd2f 	bl	8010c60 <set_ref_spad_map>
 8011202:	4603      	mov	r3, r0
 8011204:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 801120e:	f107 011c 	add.w	r1, r7, #28
 8011212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011214:	4618      	mov	r0, r3
 8011216:	f002 fd1f 	bl	8013c58 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 801121a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801121c:	3b01      	subs	r3, #1
 801121e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8011220:	2301      	movs	r3, #1
 8011222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011226:	e00a      	b.n	801123e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8011228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801122a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8011232:	f107 031c 	add.w	r3, r7, #28
 8011236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011238:	4618      	mov	r0, r3
 801123a:	f002 fd0d 	bl	8013c58 <memcpy>
		while (!complete) {
 801123e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011242:	2b00      	cmp	r3, #0
 8011244:	f43f af74 	beq.w	8011130 <VL53L0X_perform_ref_spad_management+0x2b8>
 8011248:	e002      	b.n	8011250 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 801124a:	bf00      	nop
 801124c:	e000      	b.n	8011250 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 801124e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8011250:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8011254:	2b00      	cmp	r3, #0
 8011256:	d115      	bne.n	8011284 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801125c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8011264:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	2201      	movs	r2, #1
 801126a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	b2da      	uxtb	r2, r3
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	781a      	ldrb	r2, [r3, #0]
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8011284:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8011288:	4618      	mov	r0, r3
 801128a:	375c      	adds	r7, #92	; 0x5c
 801128c:	46bd      	mov	sp, r7
 801128e:	bd90      	pop	{r4, r7, pc}

08011290 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8011290:	b590      	push	{r4, r7, lr}
 8011292:	b093      	sub	sp, #76	; 0x4c
 8011294:	af06      	add	r7, sp, #24
 8011296:	60f8      	str	r0, [r7, #12]
 8011298:	60b9      	str	r1, [r7, #8]
 801129a:	4613      	mov	r3, r2
 801129c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801129e:	2300      	movs	r3, #0
 80112a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80112a4:	2300      	movs	r3, #0
 80112a6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80112a8:	23b4      	movs	r3, #180	; 0xb4
 80112aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80112ae:	2306      	movs	r3, #6
 80112b0:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80112b2:	232c      	movs	r3, #44	; 0x2c
 80112b4:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80112b6:	2201      	movs	r2, #1
 80112b8:	21ff      	movs	r1, #255	; 0xff
 80112ba:	68f8      	ldr	r0, [r7, #12]
 80112bc:	f002 fb58 	bl	8013970 <VL53L0X_WrByte>
 80112c0:	4603      	mov	r3, r0
 80112c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80112c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d107      	bne.n	80112de <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80112ce:	2200      	movs	r2, #0
 80112d0:	214f      	movs	r1, #79	; 0x4f
 80112d2:	68f8      	ldr	r0, [r7, #12]
 80112d4:	f002 fb4c 	bl	8013970 <VL53L0X_WrByte>
 80112d8:	4603      	mov	r3, r0
 80112da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80112de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d107      	bne.n	80112f6 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80112e6:	222c      	movs	r2, #44	; 0x2c
 80112e8:	214e      	movs	r1, #78	; 0x4e
 80112ea:	68f8      	ldr	r0, [r7, #12]
 80112ec:	f002 fb40 	bl	8013970 <VL53L0X_WrByte>
 80112f0:	4603      	mov	r3, r0
 80112f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80112f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d107      	bne.n	801130e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80112fe:	2200      	movs	r2, #0
 8011300:	21ff      	movs	r1, #255	; 0xff
 8011302:	68f8      	ldr	r0, [r7, #12]
 8011304:	f002 fb34 	bl	8013970 <VL53L0X_WrByte>
 8011308:	4603      	mov	r3, r0
 801130a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 801130e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8011312:	2b00      	cmp	r3, #0
 8011314:	d109      	bne.n	801132a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8011316:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801131a:	461a      	mov	r2, r3
 801131c:	21b6      	movs	r1, #182	; 0xb6
 801131e:	68f8      	ldr	r0, [r7, #12]
 8011320:	f002 fb26 	bl	8013970 <VL53L0X_WrByte>
 8011324:	4603      	mov	r3, r0
 8011326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 801132a:	2300      	movs	r3, #0
 801132c:	627b      	str	r3, [r7, #36]	; 0x24
 801132e:	e009      	b.n	8011344 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8011330:	68fa      	ldr	r2, [r7, #12]
 8011332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011334:	4413      	add	r3, r2
 8011336:	f503 7392 	add.w	r3, r3, #292	; 0x124
 801133a:	2200      	movs	r2, #0
 801133c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 801133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011340:	3301      	adds	r3, #1
 8011342:	627b      	str	r3, [r7, #36]	; 0x24
 8011344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011346:	69fb      	ldr	r3, [r7, #28]
 8011348:	429a      	cmp	r2, r3
 801134a:	d3f1      	bcc.n	8011330 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 801134c:	79fb      	ldrb	r3, [r7, #7]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d011      	beq.n	8011376 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8011352:	e002      	b.n	801135a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8011354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011356:	3301      	adds	r3, #1
 8011358:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 801135a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 801135e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011360:	4413      	add	r3, r2
 8011362:	4618      	mov	r0, r3
 8011364:	f7ff fc2a 	bl	8010bbc <is_aperture>
 8011368:	4603      	mov	r3, r0
 801136a:	2b00      	cmp	r3, #0
 801136c:	d103      	bne.n	8011376 <VL53L0X_set_reference_spads+0xe6>
 801136e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011370:	69bb      	ldr	r3, [r7, #24]
 8011372:	429a      	cmp	r2, r3
 8011374:	d3ee      	bcc.n	8011354 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8011382:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011386:	79f9      	ldrb	r1, [r7, #7]
 8011388:	f107 0214 	add.w	r2, r7, #20
 801138c:	9204      	str	r2, [sp, #16]
 801138e:	68ba      	ldr	r2, [r7, #8]
 8011390:	9203      	str	r2, [sp, #12]
 8011392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011394:	9202      	str	r2, [sp, #8]
 8011396:	9301      	str	r3, [sp, #4]
 8011398:	69fb      	ldr	r3, [r7, #28]
 801139a:	9300      	str	r3, [sp, #0]
 801139c:	4623      	mov	r3, r4
 801139e:	4602      	mov	r2, r0
 80113a0:	68f8      	ldr	r0, [r7, #12]
 80113a2:	f7ff fc83 	bl	8010cac <enable_ref_spads>
 80113a6:	4603      	mov	r3, r0
 80113a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80113ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d10c      	bne.n	80113ce <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	2201      	movs	r2, #1
 80113b8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	b2da      	uxtb	r2, r3
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	79fa      	ldrb	r2, [r7, #7]
 80113ca:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80113ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80113d2:	4618      	mov	r0, r3
 80113d4:	3734      	adds	r7, #52	; 0x34
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd90      	pop	{r4, r7, pc}

080113da <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80113da:	b580      	push	{r7, lr}
 80113dc:	b084      	sub	sp, #16
 80113de:	af00      	add	r7, sp, #0
 80113e0:	6078      	str	r0, [r7, #4]
 80113e2:	460b      	mov	r3, r1
 80113e4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80113e6:	2300      	movs	r3, #0
 80113e8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80113ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d10a      	bne.n	8011408 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80113f2:	78fb      	ldrb	r3, [r7, #3]
 80113f4:	f043 0301 	orr.w	r3, r3, #1
 80113f8:	b2db      	uxtb	r3, r3
 80113fa:	461a      	mov	r2, r3
 80113fc:	2100      	movs	r1, #0
 80113fe:	6878      	ldr	r0, [r7, #4]
 8011400:	f002 fab6 	bl	8013970 <VL53L0X_WrByte>
 8011404:	4603      	mov	r3, r0
 8011406:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8011408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d104      	bne.n	801141a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f000 f9bf 	bl	8011794 <VL53L0X_measurement_poll_for_completion>
 8011416:	4603      	mov	r3, r0
 8011418:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 801141a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d105      	bne.n	801142e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8011422:	2100      	movs	r1, #0
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f7ff fab5 	bl	8010994 <VL53L0X_ClearInterruptMask>
 801142a:	4603      	mov	r3, r0
 801142c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 801142e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d106      	bne.n	8011444 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8011436:	2200      	movs	r2, #0
 8011438:	2100      	movs	r1, #0
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f002 fa98 	bl	8013970 <VL53L0X_WrByte>
 8011440:	4603      	mov	r3, r0
 8011442:	73fb      	strb	r3, [r7, #15]

	return Status;
 8011444:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011448:	4618      	mov	r0, r3
 801144a:	3710      	adds	r7, #16
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}

08011450 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b084      	sub	sp, #16
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	4608      	mov	r0, r1
 801145a:	4611      	mov	r1, r2
 801145c:	461a      	mov	r2, r3
 801145e:	4603      	mov	r3, r0
 8011460:	70fb      	strb	r3, [r7, #3]
 8011462:	460b      	mov	r3, r1
 8011464:	70bb      	strb	r3, [r7, #2]
 8011466:	4613      	mov	r3, r2
 8011468:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801146a:	2300      	movs	r3, #0
 801146c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 801146e:	2300      	movs	r3, #0
 8011470:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8011472:	2201      	movs	r2, #1
 8011474:	21ff      	movs	r1, #255	; 0xff
 8011476:	6878      	ldr	r0, [r7, #4]
 8011478:	f002 fa7a 	bl	8013970 <VL53L0X_WrByte>
 801147c:	4603      	mov	r3, r0
 801147e:	461a      	mov	r2, r3
 8011480:	7bfb      	ldrb	r3, [r7, #15]
 8011482:	4313      	orrs	r3, r2
 8011484:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8011486:	2200      	movs	r2, #0
 8011488:	2100      	movs	r1, #0
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f002 fa70 	bl	8013970 <VL53L0X_WrByte>
 8011490:	4603      	mov	r3, r0
 8011492:	461a      	mov	r2, r3
 8011494:	7bfb      	ldrb	r3, [r7, #15]
 8011496:	4313      	orrs	r3, r2
 8011498:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 801149a:	2200      	movs	r2, #0
 801149c:	21ff      	movs	r1, #255	; 0xff
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f002 fa66 	bl	8013970 <VL53L0X_WrByte>
 80114a4:	4603      	mov	r3, r0
 80114a6:	461a      	mov	r2, r3
 80114a8:	7bfb      	ldrb	r3, [r7, #15]
 80114aa:	4313      	orrs	r3, r2
 80114ac:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80114ae:	78fb      	ldrb	r3, [r7, #3]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d01e      	beq.n	80114f2 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80114b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d009      	beq.n	80114d0 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80114bc:	69ba      	ldr	r2, [r7, #24]
 80114be:	21cb      	movs	r1, #203	; 0xcb
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f002 fad7 	bl	8013a74 <VL53L0X_RdByte>
 80114c6:	4603      	mov	r3, r0
 80114c8:	461a      	mov	r2, r3
 80114ca:	7bfb      	ldrb	r3, [r7, #15]
 80114cc:	4313      	orrs	r3, r2
 80114ce:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80114d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d02a      	beq.n	801152e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80114d8:	f107 030e 	add.w	r3, r7, #14
 80114dc:	461a      	mov	r2, r3
 80114de:	21ee      	movs	r1, #238	; 0xee
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f002 fac7 	bl	8013a74 <VL53L0X_RdByte>
 80114e6:	4603      	mov	r3, r0
 80114e8:	461a      	mov	r2, r3
 80114ea:	7bfb      	ldrb	r3, [r7, #15]
 80114ec:	4313      	orrs	r3, r2
 80114ee:	73fb      	strb	r3, [r7, #15]
 80114f0:	e01d      	b.n	801152e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80114f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d00a      	beq.n	8011510 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80114fa:	78bb      	ldrb	r3, [r7, #2]
 80114fc:	461a      	mov	r2, r3
 80114fe:	21cb      	movs	r1, #203	; 0xcb
 8011500:	6878      	ldr	r0, [r7, #4]
 8011502:	f002 fa35 	bl	8013970 <VL53L0X_WrByte>
 8011506:	4603      	mov	r3, r0
 8011508:	461a      	mov	r2, r3
 801150a:	7bfb      	ldrb	r3, [r7, #15]
 801150c:	4313      	orrs	r3, r2
 801150e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8011510:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011514:	2b00      	cmp	r3, #0
 8011516:	d00a      	beq.n	801152e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8011518:	787b      	ldrb	r3, [r7, #1]
 801151a:	2280      	movs	r2, #128	; 0x80
 801151c:	21ee      	movs	r1, #238	; 0xee
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f002 fa74 	bl	8013a0c <VL53L0X_UpdateByte>
 8011524:	4603      	mov	r3, r0
 8011526:	461a      	mov	r2, r3
 8011528:	7bfb      	ldrb	r3, [r7, #15]
 801152a:	4313      	orrs	r3, r2
 801152c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 801152e:	2201      	movs	r2, #1
 8011530:	21ff      	movs	r1, #255	; 0xff
 8011532:	6878      	ldr	r0, [r7, #4]
 8011534:	f002 fa1c 	bl	8013970 <VL53L0X_WrByte>
 8011538:	4603      	mov	r3, r0
 801153a:	461a      	mov	r2, r3
 801153c:	7bfb      	ldrb	r3, [r7, #15]
 801153e:	4313      	orrs	r3, r2
 8011540:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8011542:	2201      	movs	r2, #1
 8011544:	2100      	movs	r1, #0
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f002 fa12 	bl	8013970 <VL53L0X_WrByte>
 801154c:	4603      	mov	r3, r0
 801154e:	461a      	mov	r2, r3
 8011550:	7bfb      	ldrb	r3, [r7, #15]
 8011552:	4313      	orrs	r3, r2
 8011554:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8011556:	2200      	movs	r2, #0
 8011558:	21ff      	movs	r1, #255	; 0xff
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f002 fa08 	bl	8013970 <VL53L0X_WrByte>
 8011560:	4603      	mov	r3, r0
 8011562:	461a      	mov	r2, r3
 8011564:	7bfb      	ldrb	r3, [r7, #15]
 8011566:	4313      	orrs	r3, r2
 8011568:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 801156a:	7bbb      	ldrb	r3, [r7, #14]
 801156c:	f023 0310 	bic.w	r3, r3, #16
 8011570:	b2da      	uxtb	r2, r3
 8011572:	69fb      	ldr	r3, [r7, #28]
 8011574:	701a      	strb	r2, [r3, #0]

	return Status;
 8011576:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801157a:	4618      	mov	r0, r3
 801157c:	3710      	adds	r7, #16
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}

08011582 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8011582:	b580      	push	{r7, lr}
 8011584:	b08a      	sub	sp, #40	; 0x28
 8011586:	af04      	add	r7, sp, #16
 8011588:	60f8      	str	r0, [r7, #12]
 801158a:	60b9      	str	r1, [r7, #8]
 801158c:	4611      	mov	r1, r2
 801158e:	461a      	mov	r2, r3
 8011590:	460b      	mov	r3, r1
 8011592:	71fb      	strb	r3, [r7, #7]
 8011594:	4613      	mov	r3, r2
 8011596:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8011598:	2300      	movs	r3, #0
 801159a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 801159c:	2300      	movs	r3, #0
 801159e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80115a0:	2300      	movs	r3, #0
 80115a2:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80115a4:	2300      	movs	r3, #0
 80115a6:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80115a8:	2300      	movs	r3, #0
 80115aa:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80115ac:	79bb      	ldrb	r3, [r7, #6]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d003      	beq.n	80115ba <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80115b8:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80115ba:	2201      	movs	r2, #1
 80115bc:	2101      	movs	r1, #1
 80115be:	68f8      	ldr	r0, [r7, #12]
 80115c0:	f002 f9d6 	bl	8013970 <VL53L0X_WrByte>
 80115c4:	4603      	mov	r3, r0
 80115c6:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80115c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d105      	bne.n	80115dc <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80115d0:	2140      	movs	r1, #64	; 0x40
 80115d2:	68f8      	ldr	r0, [r7, #12]
 80115d4:	f7ff ff01 	bl	80113da <VL53L0X_perform_single_ref_calibration>
 80115d8:	4603      	mov	r3, r0
 80115da:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80115dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d115      	bne.n	8011610 <VL53L0X_perform_vhv_calibration+0x8e>
 80115e4:	79fb      	ldrb	r3, [r7, #7]
 80115e6:	2b01      	cmp	r3, #1
 80115e8:	d112      	bne.n	8011610 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80115ea:	7d39      	ldrb	r1, [r7, #20]
 80115ec:	7d7a      	ldrb	r2, [r7, #21]
 80115ee:	2300      	movs	r3, #0
 80115f0:	9303      	str	r3, [sp, #12]
 80115f2:	2301      	movs	r3, #1
 80115f4:	9302      	str	r3, [sp, #8]
 80115f6:	f107 0313 	add.w	r3, r7, #19
 80115fa:	9301      	str	r3, [sp, #4]
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	9300      	str	r3, [sp, #0]
 8011600:	460b      	mov	r3, r1
 8011602:	2101      	movs	r1, #1
 8011604:	68f8      	ldr	r0, [r7, #12]
 8011606:	f7ff ff23 	bl	8011450 <VL53L0X_ref_calibration_io>
 801160a:	4603      	mov	r3, r0
 801160c:	75fb      	strb	r3, [r7, #23]
 801160e:	e002      	b.n	8011616 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	2200      	movs	r2, #0
 8011614:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8011616:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d112      	bne.n	8011644 <VL53L0X_perform_vhv_calibration+0xc2>
 801161e:	79bb      	ldrb	r3, [r7, #6]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d00f      	beq.n	8011644 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8011624:	7dbb      	ldrb	r3, [r7, #22]
 8011626:	461a      	mov	r2, r3
 8011628:	2101      	movs	r1, #1
 801162a:	68f8      	ldr	r0, [r7, #12]
 801162c:	f002 f9a0 	bl	8013970 <VL53L0X_WrByte>
 8011630:	4603      	mov	r3, r0
 8011632:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8011634:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d103      	bne.n	8011644 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	7dba      	ldrb	r2, [r7, #22]
 8011640:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8011644:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011648:	4618      	mov	r0, r3
 801164a:	3718      	adds	r7, #24
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}

08011650 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b08a      	sub	sp, #40	; 0x28
 8011654:	af04      	add	r7, sp, #16
 8011656:	60f8      	str	r0, [r7, #12]
 8011658:	60b9      	str	r1, [r7, #8]
 801165a:	4611      	mov	r1, r2
 801165c:	461a      	mov	r2, r3
 801165e:	460b      	mov	r3, r1
 8011660:	71fb      	strb	r3, [r7, #7]
 8011662:	4613      	mov	r3, r2
 8011664:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8011666:	2300      	movs	r3, #0
 8011668:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 801166a:	2300      	movs	r3, #0
 801166c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 801166e:	2300      	movs	r3, #0
 8011670:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8011672:	2300      	movs	r3, #0
 8011674:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8011676:	79bb      	ldrb	r3, [r7, #6]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d003      	beq.n	8011684 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8011682:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8011684:	2202      	movs	r2, #2
 8011686:	2101      	movs	r1, #1
 8011688:	68f8      	ldr	r0, [r7, #12]
 801168a:	f002 f971 	bl	8013970 <VL53L0X_WrByte>
 801168e:	4603      	mov	r3, r0
 8011690:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8011692:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d105      	bne.n	80116a6 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 801169a:	2100      	movs	r1, #0
 801169c:	68f8      	ldr	r0, [r7, #12]
 801169e:	f7ff fe9c 	bl	80113da <VL53L0X_perform_single_ref_calibration>
 80116a2:	4603      	mov	r3, r0
 80116a4:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80116a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d115      	bne.n	80116da <VL53L0X_perform_phase_calibration+0x8a>
 80116ae:	79fb      	ldrb	r3, [r7, #7]
 80116b0:	2b01      	cmp	r3, #1
 80116b2:	d112      	bne.n	80116da <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80116b4:	7d39      	ldrb	r1, [r7, #20]
 80116b6:	7d7a      	ldrb	r2, [r7, #21]
 80116b8:	2301      	movs	r3, #1
 80116ba:	9303      	str	r3, [sp, #12]
 80116bc:	2300      	movs	r3, #0
 80116be:	9302      	str	r3, [sp, #8]
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	9301      	str	r3, [sp, #4]
 80116c4:	f107 0313 	add.w	r3, r7, #19
 80116c8:	9300      	str	r3, [sp, #0]
 80116ca:	460b      	mov	r3, r1
 80116cc:	2101      	movs	r1, #1
 80116ce:	68f8      	ldr	r0, [r7, #12]
 80116d0:	f7ff febe 	bl	8011450 <VL53L0X_ref_calibration_io>
 80116d4:	4603      	mov	r3, r0
 80116d6:	75fb      	strb	r3, [r7, #23]
 80116d8:	e002      	b.n	80116e0 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	2200      	movs	r2, #0
 80116de:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80116e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d112      	bne.n	801170e <VL53L0X_perform_phase_calibration+0xbe>
 80116e8:	79bb      	ldrb	r3, [r7, #6]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d00f      	beq.n	801170e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80116ee:	7dbb      	ldrb	r3, [r7, #22]
 80116f0:	461a      	mov	r2, r3
 80116f2:	2101      	movs	r1, #1
 80116f4:	68f8      	ldr	r0, [r7, #12]
 80116f6:	f002 f93b 	bl	8013970 <VL53L0X_WrByte>
 80116fa:	4603      	mov	r3, r0
 80116fc:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80116fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d103      	bne.n	801170e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	7dba      	ldrb	r2, [r7, #22]
 801170a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 801170e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011712:	4618      	mov	r0, r3
 8011714:	3718      	adds	r7, #24
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}

0801171a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 801171a:	b580      	push	{r7, lr}
 801171c:	b086      	sub	sp, #24
 801171e:	af00      	add	r7, sp, #0
 8011720:	60f8      	str	r0, [r7, #12]
 8011722:	60b9      	str	r1, [r7, #8]
 8011724:	607a      	str	r2, [r7, #4]
 8011726:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8011728:	2300      	movs	r3, #0
 801172a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 801172c:	2300      	movs	r3, #0
 801172e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8011736:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8011738:	78fa      	ldrb	r2, [r7, #3]
 801173a:	2300      	movs	r3, #0
 801173c:	68b9      	ldr	r1, [r7, #8]
 801173e:	68f8      	ldr	r0, [r7, #12]
 8011740:	f7ff ff1f 	bl	8011582 <VL53L0X_perform_vhv_calibration>
 8011744:	4603      	mov	r3, r0
 8011746:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8011748:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d107      	bne.n	8011760 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8011750:	78fa      	ldrb	r2, [r7, #3]
 8011752:	2300      	movs	r3, #0
 8011754:	6879      	ldr	r1, [r7, #4]
 8011756:	68f8      	ldr	r0, [r7, #12]
 8011758:	f7ff ff7a 	bl	8011650 <VL53L0X_perform_phase_calibration>
 801175c:	4603      	mov	r3, r0
 801175e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8011760:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d10f      	bne.n	8011788 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8011768:	7dbb      	ldrb	r3, [r7, #22]
 801176a:	461a      	mov	r2, r3
 801176c:	2101      	movs	r1, #1
 801176e:	68f8      	ldr	r0, [r7, #12]
 8011770:	f002 f8fe 	bl	8013970 <VL53L0X_WrByte>
 8011774:	4603      	mov	r3, r0
 8011776:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8011778:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d103      	bne.n	8011788 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	7dba      	ldrb	r2, [r7, #22]
 8011784:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8011788:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801178c:	4618      	mov	r0, r3
 801178e:	3718      	adds	r7, #24
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}

08011794 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b086      	sub	sp, #24
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801179c:	2300      	movs	r3, #0
 801179e:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80117a0:	2300      	movs	r3, #0
 80117a2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80117a4:	2300      	movs	r3, #0
 80117a6:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80117a8:	f107 030f 	add.w	r3, r7, #15
 80117ac:	4619      	mov	r1, r3
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	f7fe fe02 	bl	80103b8 <VL53L0X_GetMeasurementDataReady>
 80117b4:	4603      	mov	r3, r0
 80117b6:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80117b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d110      	bne.n	80117e2 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80117c0:	7bfb      	ldrb	r3, [r7, #15]
 80117c2:	2b01      	cmp	r3, #1
 80117c4:	d00f      	beq.n	80117e6 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80117c6:	693b      	ldr	r3, [r7, #16]
 80117c8:	3301      	adds	r3, #1
 80117ca:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80117cc:	693b      	ldr	r3, [r7, #16]
 80117ce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80117d2:	d302      	bcc.n	80117da <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80117d4:	23f9      	movs	r3, #249	; 0xf9
 80117d6:	75fb      	strb	r3, [r7, #23]
			break;
 80117d8:	e006      	b.n	80117e8 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f002 f9e8 	bl	8013bb0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80117e0:	e7e2      	b.n	80117a8 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80117e2:	bf00      	nop
 80117e4:	e000      	b.n	80117e8 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80117e6:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80117e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3718      	adds	r7, #24
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}

080117f4 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80117f4:	b480      	push	{r7}
 80117f6:	b085      	sub	sp, #20
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	4603      	mov	r3, r0
 80117fc:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80117fe:	2300      	movs	r3, #0
 8011800:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8011802:	79fb      	ldrb	r3, [r7, #7]
 8011804:	3301      	adds	r3, #1
 8011806:	b2db      	uxtb	r3, r3
 8011808:	005b      	lsls	r3, r3, #1
 801180a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 801180c:	7bfb      	ldrb	r3, [r7, #15]
}
 801180e:	4618      	mov	r0, r3
 8011810:	3714      	adds	r7, #20
 8011812:	46bd      	mov	sp, r7
 8011814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011818:	4770      	bx	lr

0801181a <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 801181a:	b480      	push	{r7}
 801181c:	b085      	sub	sp, #20
 801181e:	af00      	add	r7, sp, #0
 8011820:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8011822:	2300      	movs	r3, #0
 8011824:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8011826:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801182a:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 801182c:	e002      	b.n	8011834 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 801182e:	68bb      	ldr	r3, [r7, #8]
 8011830:	089b      	lsrs	r3, r3, #2
 8011832:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8011834:	68ba      	ldr	r2, [r7, #8]
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	429a      	cmp	r2, r3
 801183a:	d8f8      	bhi.n	801182e <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 801183c:	e017      	b.n	801186e <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 801183e:	68fa      	ldr	r2, [r7, #12]
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	4413      	add	r3, r2
 8011844:	687a      	ldr	r2, [r7, #4]
 8011846:	429a      	cmp	r2, r3
 8011848:	d30b      	bcc.n	8011862 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 801184a:	68fa      	ldr	r2, [r7, #12]
 801184c:	68bb      	ldr	r3, [r7, #8]
 801184e:	4413      	add	r3, r2
 8011850:	687a      	ldr	r2, [r7, #4]
 8011852:	1ad3      	subs	r3, r2, r3
 8011854:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	085b      	lsrs	r3, r3, #1
 801185a:	68ba      	ldr	r2, [r7, #8]
 801185c:	4413      	add	r3, r2
 801185e:	60fb      	str	r3, [r7, #12]
 8011860:	e002      	b.n	8011868 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	085b      	lsrs	r3, r3, #1
 8011866:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	089b      	lsrs	r3, r3, #2
 801186c:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 801186e:	68bb      	ldr	r3, [r7, #8]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d1e4      	bne.n	801183e <VL53L0X_isqrt+0x24>
	}

	return res;
 8011874:	68fb      	ldr	r3, [r7, #12]
}
 8011876:	4618      	mov	r0, r3
 8011878:	3714      	adds	r7, #20
 801187a:	46bd      	mov	sp, r7
 801187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011880:	4770      	bx	lr

08011882 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8011882:	b580      	push	{r7, lr}
 8011884:	b086      	sub	sp, #24
 8011886:	af00      	add	r7, sp, #0
 8011888:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801188a:	2300      	movs	r3, #0
 801188c:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 801188e:	2200      	movs	r2, #0
 8011890:	2183      	movs	r1, #131	; 0x83
 8011892:	6878      	ldr	r0, [r7, #4]
 8011894:	f002 f86c 	bl	8013970 <VL53L0X_WrByte>
 8011898:	4603      	mov	r3, r0
 801189a:	461a      	mov	r2, r3
 801189c:	7dfb      	ldrb	r3, [r7, #23]
 801189e:	4313      	orrs	r3, r2
 80118a0:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80118a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d11e      	bne.n	80118e8 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80118aa:	2300      	movs	r3, #0
 80118ac:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80118ae:	f107 030f 	add.w	r3, r7, #15
 80118b2:	461a      	mov	r2, r3
 80118b4:	2183      	movs	r1, #131	; 0x83
 80118b6:	6878      	ldr	r0, [r7, #4]
 80118b8:	f002 f8dc 	bl	8013a74 <VL53L0X_RdByte>
 80118bc:	4603      	mov	r3, r0
 80118be:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80118c0:	7bfb      	ldrb	r3, [r7, #15]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d10a      	bne.n	80118dc <VL53L0X_device_read_strobe+0x5a>
 80118c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d106      	bne.n	80118dc <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	3301      	adds	r3, #1
 80118d2:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80118d4:	693b      	ldr	r3, [r7, #16]
 80118d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80118da:	d3e8      	bcc.n	80118ae <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80118dc:	693b      	ldr	r3, [r7, #16]
 80118de:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80118e2:	d301      	bcc.n	80118e8 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80118e4:	23f9      	movs	r3, #249	; 0xf9
 80118e6:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80118e8:	2201      	movs	r2, #1
 80118ea:	2183      	movs	r1, #131	; 0x83
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	f002 f83f 	bl	8013970 <VL53L0X_WrByte>
 80118f2:	4603      	mov	r3, r0
 80118f4:	461a      	mov	r2, r3
 80118f6:	7dfb      	ldrb	r3, [r7, #23]
 80118f8:	4313      	orrs	r3, r2
 80118fa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80118fc:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8011900:	4618      	mov	r0, r3
 8011902:	3718      	adds	r7, #24
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}

08011908 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b098      	sub	sp, #96	; 0x60
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	460b      	mov	r3, r1
 8011912:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8011914:	2300      	movs	r3, #0
 8011916:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 801191a:	2300      	movs	r3, #0
 801191c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8011920:	2300      	movs	r3, #0
 8011922:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8011926:	2300      	movs	r3, #0
 8011928:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 801192a:	2300      	movs	r3, #0
 801192c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 801192e:	2300      	movs	r3, #0
 8011930:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8011932:	2300      	movs	r3, #0
 8011934:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8011938:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 801193c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 801193e:	2300      	movs	r3, #0
 8011940:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8011942:	2300      	movs	r3, #0
 8011944:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8011946:	2300      	movs	r3, #0
 8011948:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8011950:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8011954:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011958:	2b07      	cmp	r3, #7
 801195a:	f000 8408 	beq.w	801216e <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 801195e:	2201      	movs	r2, #1
 8011960:	2180      	movs	r1, #128	; 0x80
 8011962:	6878      	ldr	r0, [r7, #4]
 8011964:	f002 f804 	bl	8013970 <VL53L0X_WrByte>
 8011968:	4603      	mov	r3, r0
 801196a:	461a      	mov	r2, r3
 801196c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011970:	4313      	orrs	r3, r2
 8011972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8011976:	2201      	movs	r2, #1
 8011978:	21ff      	movs	r1, #255	; 0xff
 801197a:	6878      	ldr	r0, [r7, #4]
 801197c:	f001 fff8 	bl	8013970 <VL53L0X_WrByte>
 8011980:	4603      	mov	r3, r0
 8011982:	461a      	mov	r2, r3
 8011984:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011988:	4313      	orrs	r3, r2
 801198a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 801198e:	2200      	movs	r2, #0
 8011990:	2100      	movs	r1, #0
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f001 ffec 	bl	8013970 <VL53L0X_WrByte>
 8011998:	4603      	mov	r3, r0
 801199a:	461a      	mov	r2, r3
 801199c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80119a0:	4313      	orrs	r3, r2
 80119a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80119a6:	2206      	movs	r2, #6
 80119a8:	21ff      	movs	r1, #255	; 0xff
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f001 ffe0 	bl	8013970 <VL53L0X_WrByte>
 80119b0:	4603      	mov	r3, r0
 80119b2:	461a      	mov	r2, r3
 80119b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80119b8:	4313      	orrs	r3, r2
 80119ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80119be:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80119c2:	461a      	mov	r2, r3
 80119c4:	2183      	movs	r1, #131	; 0x83
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f002 f854 	bl	8013a74 <VL53L0X_RdByte>
 80119cc:	4603      	mov	r3, r0
 80119ce:	461a      	mov	r2, r3
 80119d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80119d4:	4313      	orrs	r3, r2
 80119d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80119da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80119de:	f043 0304 	orr.w	r3, r3, #4
 80119e2:	b2db      	uxtb	r3, r3
 80119e4:	461a      	mov	r2, r3
 80119e6:	2183      	movs	r1, #131	; 0x83
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f001 ffc1 	bl	8013970 <VL53L0X_WrByte>
 80119ee:	4603      	mov	r3, r0
 80119f0:	461a      	mov	r2, r3
 80119f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80119f6:	4313      	orrs	r3, r2
 80119f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80119fc:	2207      	movs	r2, #7
 80119fe:	21ff      	movs	r1, #255	; 0xff
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f001 ffb5 	bl	8013970 <VL53L0X_WrByte>
 8011a06:	4603      	mov	r3, r0
 8011a08:	461a      	mov	r2, r3
 8011a0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a0e:	4313      	orrs	r3, r2
 8011a10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8011a14:	2201      	movs	r2, #1
 8011a16:	2181      	movs	r1, #129	; 0x81
 8011a18:	6878      	ldr	r0, [r7, #4]
 8011a1a:	f001 ffa9 	bl	8013970 <VL53L0X_WrByte>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	461a      	mov	r2, r3
 8011a22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a26:	4313      	orrs	r3, r2
 8011a28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f002 f8bf 	bl	8013bb0 <VL53L0X_PollingDelay>
 8011a32:	4603      	mov	r3, r0
 8011a34:	461a      	mov	r2, r3
 8011a36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a3a:	4313      	orrs	r3, r2
 8011a3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8011a40:	2201      	movs	r2, #1
 8011a42:	2180      	movs	r1, #128	; 0x80
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f001 ff93 	bl	8013970 <VL53L0X_WrByte>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	461a      	mov	r2, r3
 8011a4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a52:	4313      	orrs	r3, r2
 8011a54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8011a58:	78fb      	ldrb	r3, [r7, #3]
 8011a5a:	f003 0301 	and.w	r3, r3, #1
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	f000 8098 	beq.w	8011b94 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8011a64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011a68:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	f040 8091 	bne.w	8011b94 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8011a72:	226b      	movs	r2, #107	; 0x6b
 8011a74:	2194      	movs	r1, #148	; 0x94
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f001 ff7a 	bl	8013970 <VL53L0X_WrByte>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	461a      	mov	r2, r3
 8011a80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a84:	4313      	orrs	r3, r2
 8011a86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f7ff fef9 	bl	8011882 <VL53L0X_device_read_strobe>
 8011a90:	4603      	mov	r3, r0
 8011a92:	461a      	mov	r2, r3
 8011a94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a98:	4313      	orrs	r3, r2
 8011a9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8011a9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011aa2:	461a      	mov	r2, r3
 8011aa4:	2190      	movs	r1, #144	; 0x90
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f002 f846 	bl	8013b38 <VL53L0X_RdDWord>
 8011aac:	4603      	mov	r3, r0
 8011aae:	461a      	mov	r2, r3
 8011ab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011ab4:	4313      	orrs	r3, r2
 8011ab6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8011aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011abc:	0a1b      	lsrs	r3, r3, #8
 8011abe:	b2db      	uxtb	r3, r3
 8011ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ac4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8011ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aca:	0bdb      	lsrs	r3, r3, #15
 8011acc:	b2db      	uxtb	r3, r3
 8011ace:	f003 0301 	and.w	r3, r3, #1
 8011ad2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8011ad6:	2224      	movs	r2, #36	; 0x24
 8011ad8:	2194      	movs	r1, #148	; 0x94
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	f001 ff48 	bl	8013970 <VL53L0X_WrByte>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	461a      	mov	r2, r3
 8011ae4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011ae8:	4313      	orrs	r3, r2
 8011aea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	f7ff fec7 	bl	8011882 <VL53L0X_device_read_strobe>
 8011af4:	4603      	mov	r3, r0
 8011af6:	461a      	mov	r2, r3
 8011af8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011afc:	4313      	orrs	r3, r2
 8011afe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8011b02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011b06:	461a      	mov	r2, r3
 8011b08:	2190      	movs	r1, #144	; 0x90
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	f002 f814 	bl	8013b38 <VL53L0X_RdDWord>
 8011b10:	4603      	mov	r3, r0
 8011b12:	461a      	mov	r2, r3
 8011b14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011b18:	4313      	orrs	r3, r2
 8011b1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8011b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b20:	0e1b      	lsrs	r3, r3, #24
 8011b22:	b2db      	uxtb	r3, r3
 8011b24:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8011b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b28:	0c1b      	lsrs	r3, r3, #16
 8011b2a:	b2db      	uxtb	r3, r3
 8011b2c:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8011b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b30:	0a1b      	lsrs	r3, r3, #8
 8011b32:	b2db      	uxtb	r3, r3
 8011b34:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8011b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b38:	b2db      	uxtb	r3, r3
 8011b3a:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8011b3c:	2225      	movs	r2, #37	; 0x25
 8011b3e:	2194      	movs	r1, #148	; 0x94
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f001 ff15 	bl	8013970 <VL53L0X_WrByte>
 8011b46:	4603      	mov	r3, r0
 8011b48:	461a      	mov	r2, r3
 8011b4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011b4e:	4313      	orrs	r3, r2
 8011b50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f7ff fe94 	bl	8011882 <VL53L0X_device_read_strobe>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011b62:	4313      	orrs	r3, r2
 8011b64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8011b68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011b6c:	461a      	mov	r2, r3
 8011b6e:	2190      	movs	r1, #144	; 0x90
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f001 ffe1 	bl	8013b38 <VL53L0X_RdDWord>
 8011b76:	4603      	mov	r3, r0
 8011b78:	461a      	mov	r2, r3
 8011b7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011b7e:	4313      	orrs	r3, r2
 8011b80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8011b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b86:	0e1b      	lsrs	r3, r3, #24
 8011b88:	b2db      	uxtb	r3, r3
 8011b8a:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8011b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b8e:	0c1b      	lsrs	r3, r3, #16
 8011b90:	b2db      	uxtb	r3, r3
 8011b92:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8011b94:	78fb      	ldrb	r3, [r7, #3]
 8011b96:	f003 0302 	and.w	r3, r3, #2
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	f000 8189 	beq.w	8011eb2 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8011ba0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011ba4:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	f040 8182 	bne.w	8011eb2 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8011bae:	2202      	movs	r2, #2
 8011bb0:	2194      	movs	r1, #148	; 0x94
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f001 fedc 	bl	8013970 <VL53L0X_WrByte>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	461a      	mov	r2, r3
 8011bbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011bc0:	4313      	orrs	r3, r2
 8011bc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8011bc6:	6878      	ldr	r0, [r7, #4]
 8011bc8:	f7ff fe5b 	bl	8011882 <VL53L0X_device_read_strobe>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	461a      	mov	r2, r3
 8011bd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011bd4:	4313      	orrs	r3, r2
 8011bd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8011bda:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8011bde:	461a      	mov	r2, r3
 8011be0:	2190      	movs	r1, #144	; 0x90
 8011be2:	6878      	ldr	r0, [r7, #4]
 8011be4:	f001 ff46 	bl	8013a74 <VL53L0X_RdByte>
 8011be8:	4603      	mov	r3, r0
 8011bea:	461a      	mov	r2, r3
 8011bec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011bf0:	4313      	orrs	r3, r2
 8011bf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8011bf6:	227b      	movs	r2, #123	; 0x7b
 8011bf8:	2194      	movs	r1, #148	; 0x94
 8011bfa:	6878      	ldr	r0, [r7, #4]
 8011bfc:	f001 feb8 	bl	8013970 <VL53L0X_WrByte>
 8011c00:	4603      	mov	r3, r0
 8011c02:	461a      	mov	r2, r3
 8011c04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011c08:	4313      	orrs	r3, r2
 8011c0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f7ff fe37 	bl	8011882 <VL53L0X_device_read_strobe>
 8011c14:	4603      	mov	r3, r0
 8011c16:	461a      	mov	r2, r3
 8011c18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011c1c:	4313      	orrs	r3, r2
 8011c1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8011c22:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8011c26:	461a      	mov	r2, r3
 8011c28:	2190      	movs	r1, #144	; 0x90
 8011c2a:	6878      	ldr	r0, [r7, #4]
 8011c2c:	f001 ff22 	bl	8013a74 <VL53L0X_RdByte>
 8011c30:	4603      	mov	r3, r0
 8011c32:	461a      	mov	r2, r3
 8011c34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011c38:	4313      	orrs	r3, r2
 8011c3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8011c3e:	2277      	movs	r2, #119	; 0x77
 8011c40:	2194      	movs	r1, #148	; 0x94
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f001 fe94 	bl	8013970 <VL53L0X_WrByte>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	461a      	mov	r2, r3
 8011c4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011c50:	4313      	orrs	r3, r2
 8011c52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f7ff fe13 	bl	8011882 <VL53L0X_device_read_strobe>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	461a      	mov	r2, r3
 8011c60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011c64:	4313      	orrs	r3, r2
 8011c66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8011c6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011c6e:	461a      	mov	r2, r3
 8011c70:	2190      	movs	r1, #144	; 0x90
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f001 ff60 	bl	8013b38 <VL53L0X_RdDWord>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	461a      	mov	r2, r3
 8011c7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011c80:	4313      	orrs	r3, r2
 8011c82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8011c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c88:	0e5b      	lsrs	r3, r3, #25
 8011c8a:	b2db      	uxtb	r3, r3
 8011c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c90:	b2db      	uxtb	r3, r3
 8011c92:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8011c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c96:	0c9b      	lsrs	r3, r3, #18
 8011c98:	b2db      	uxtb	r3, r3
 8011c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c9e:	b2db      	uxtb	r3, r3
 8011ca0:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8011ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ca4:	0adb      	lsrs	r3, r3, #11
 8011ca6:	b2db      	uxtb	r3, r3
 8011ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cac:	b2db      	uxtb	r3, r3
 8011cae:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8011cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cb2:	091b      	lsrs	r3, r3, #4
 8011cb4:	b2db      	uxtb	r3, r3
 8011cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cba:	b2db      	uxtb	r3, r3
 8011cbc:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8011cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cc0:	b2db      	uxtb	r3, r3
 8011cc2:	00db      	lsls	r3, r3, #3
 8011cc4:	b2db      	uxtb	r3, r3
 8011cc6:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8011cca:	b2db      	uxtb	r3, r3
 8011ccc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8011cd0:	2278      	movs	r2, #120	; 0x78
 8011cd2:	2194      	movs	r1, #148	; 0x94
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f001 fe4b 	bl	8013970 <VL53L0X_WrByte>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	461a      	mov	r2, r3
 8011cde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011ce2:	4313      	orrs	r3, r2
 8011ce4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f7ff fdca 	bl	8011882 <VL53L0X_device_read_strobe>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	461a      	mov	r2, r3
 8011cf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011cf6:	4313      	orrs	r3, r2
 8011cf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8011cfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011d00:	461a      	mov	r2, r3
 8011d02:	2190      	movs	r1, #144	; 0x90
 8011d04:	6878      	ldr	r0, [r7, #4]
 8011d06:	f001 ff17 	bl	8013b38 <VL53L0X_RdDWord>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011d12:	4313      	orrs	r3, r2
 8011d14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8011d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d1a:	0f5b      	lsrs	r3, r3, #29
 8011d1c:	b2db      	uxtb	r3, r3
 8011d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d22:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8011d24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d28:	4413      	add	r3, r2
 8011d2a:	b2db      	uxtb	r3, r3
 8011d2c:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8011d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d30:	0d9b      	lsrs	r3, r3, #22
 8011d32:	b2db      	uxtb	r3, r3
 8011d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d38:	b2db      	uxtb	r3, r3
 8011d3a:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8011d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d3e:	0bdb      	lsrs	r3, r3, #15
 8011d40:	b2db      	uxtb	r3, r3
 8011d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d46:	b2db      	uxtb	r3, r3
 8011d48:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8011d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d4c:	0a1b      	lsrs	r3, r3, #8
 8011d4e:	b2db      	uxtb	r3, r3
 8011d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d54:	b2db      	uxtb	r3, r3
 8011d56:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8011d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d5a:	085b      	lsrs	r3, r3, #1
 8011d5c:	b2db      	uxtb	r3, r3
 8011d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d62:	b2db      	uxtb	r3, r3
 8011d64:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8011d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d68:	b2db      	uxtb	r3, r3
 8011d6a:	019b      	lsls	r3, r3, #6
 8011d6c:	b2db      	uxtb	r3, r3
 8011d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d72:	b2db      	uxtb	r3, r3
 8011d74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8011d78:	2279      	movs	r2, #121	; 0x79
 8011d7a:	2194      	movs	r1, #148	; 0x94
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	f001 fdf7 	bl	8013970 <VL53L0X_WrByte>
 8011d82:	4603      	mov	r3, r0
 8011d84:	461a      	mov	r2, r3
 8011d86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011d8a:	4313      	orrs	r3, r2
 8011d8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8011d90:	6878      	ldr	r0, [r7, #4]
 8011d92:	f7ff fd76 	bl	8011882 <VL53L0X_device_read_strobe>
 8011d96:	4603      	mov	r3, r0
 8011d98:	461a      	mov	r2, r3
 8011d9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011d9e:	4313      	orrs	r3, r2
 8011da0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8011da4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011da8:	461a      	mov	r2, r3
 8011daa:	2190      	movs	r1, #144	; 0x90
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	f001 fec3 	bl	8013b38 <VL53L0X_RdDWord>
 8011db2:	4603      	mov	r3, r0
 8011db4:	461a      	mov	r2, r3
 8011db6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011dba:	4313      	orrs	r3, r2
 8011dbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8011dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dc2:	0e9b      	lsrs	r3, r3, #26
 8011dc4:	b2db      	uxtb	r3, r3
 8011dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011dca:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8011dcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011dd0:	4413      	add	r3, r2
 8011dd2:	b2db      	uxtb	r3, r3
 8011dd4:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8011dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd8:	0cdb      	lsrs	r3, r3, #19
 8011dda:	b2db      	uxtb	r3, r3
 8011ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011de0:	b2db      	uxtb	r3, r3
 8011de2:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8011de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de6:	0b1b      	lsrs	r3, r3, #12
 8011de8:	b2db      	uxtb	r3, r3
 8011dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011dee:	b2db      	uxtb	r3, r3
 8011df0:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8011df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df4:	095b      	lsrs	r3, r3, #5
 8011df6:	b2db      	uxtb	r3, r3
 8011df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011dfc:	b2db      	uxtb	r3, r3
 8011dfe:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8011e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e02:	b2db      	uxtb	r3, r3
 8011e04:	009b      	lsls	r3, r3, #2
 8011e06:	b2db      	uxtb	r3, r3
 8011e08:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8011e0c:	b2db      	uxtb	r3, r3
 8011e0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8011e12:	227a      	movs	r2, #122	; 0x7a
 8011e14:	2194      	movs	r1, #148	; 0x94
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f001 fdaa 	bl	8013970 <VL53L0X_WrByte>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	461a      	mov	r2, r3
 8011e20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011e24:	4313      	orrs	r3, r2
 8011e26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f7ff fd29 	bl	8011882 <VL53L0X_device_read_strobe>
 8011e30:	4603      	mov	r3, r0
 8011e32:	461a      	mov	r2, r3
 8011e34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011e38:	4313      	orrs	r3, r2
 8011e3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8011e3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011e42:	461a      	mov	r2, r3
 8011e44:	2190      	movs	r1, #144	; 0x90
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f001 fe76 	bl	8013b38 <VL53L0X_RdDWord>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	461a      	mov	r2, r3
 8011e50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011e54:	4313      	orrs	r3, r2
 8011e56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8011e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e5c:	0f9b      	lsrs	r3, r3, #30
 8011e5e:	b2db      	uxtb	r3, r3
 8011e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e64:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8011e66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e6a:	4413      	add	r3, r2
 8011e6c:	b2db      	uxtb	r3, r3
 8011e6e:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8011e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e72:	0ddb      	lsrs	r3, r3, #23
 8011e74:	b2db      	uxtb	r3, r3
 8011e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8011e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e80:	0c1b      	lsrs	r3, r3, #16
 8011e82:	b2db      	uxtb	r3, r3
 8011e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e88:	b2db      	uxtb	r3, r3
 8011e8a:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8011e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e8e:	0a5b      	lsrs	r3, r3, #9
 8011e90:	b2db      	uxtb	r3, r3
 8011e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e96:	b2db      	uxtb	r3, r3
 8011e98:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8011e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e9e:	089b      	lsrs	r3, r3, #2
 8011ea0:	b2db      	uxtb	r3, r3
 8011ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ea6:	b2db      	uxtb	r3, r3
 8011ea8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8011eac:	2300      	movs	r3, #0
 8011eae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8011eb2:	78fb      	ldrb	r3, [r7, #3]
 8011eb4:	f003 0304 	and.w	r3, r3, #4
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	f000 80f1 	beq.w	80120a0 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8011ebe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011ec2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	f040 80ea 	bne.w	80120a0 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8011ecc:	227b      	movs	r2, #123	; 0x7b
 8011ece:	2194      	movs	r1, #148	; 0x94
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f001 fd4d 	bl	8013970 <VL53L0X_WrByte>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	461a      	mov	r2, r3
 8011eda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011ede:	4313      	orrs	r3, r2
 8011ee0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f7ff fccc 	bl	8011882 <VL53L0X_device_read_strobe>
 8011eea:	4603      	mov	r3, r0
 8011eec:	461a      	mov	r2, r3
 8011eee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011ef2:	4313      	orrs	r3, r2
 8011ef4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8011ef8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011efc:	461a      	mov	r2, r3
 8011efe:	2190      	movs	r1, #144	; 0x90
 8011f00:	6878      	ldr	r0, [r7, #4]
 8011f02:	f001 fe19 	bl	8013b38 <VL53L0X_RdDWord>
 8011f06:	4603      	mov	r3, r0
 8011f08:	461a      	mov	r2, r3
 8011f0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011f0e:	4313      	orrs	r3, r2
 8011f10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8011f14:	227c      	movs	r2, #124	; 0x7c
 8011f16:	2194      	movs	r1, #148	; 0x94
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f001 fd29 	bl	8013970 <VL53L0X_WrByte>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	461a      	mov	r2, r3
 8011f22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011f26:	4313      	orrs	r3, r2
 8011f28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f7ff fca8 	bl	8011882 <VL53L0X_device_read_strobe>
 8011f32:	4603      	mov	r3, r0
 8011f34:	461a      	mov	r2, r3
 8011f36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011f3a:	4313      	orrs	r3, r2
 8011f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8011f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011f44:	461a      	mov	r2, r3
 8011f46:	2190      	movs	r1, #144	; 0x90
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f001 fdf5 	bl	8013b38 <VL53L0X_RdDWord>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	461a      	mov	r2, r3
 8011f52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011f56:	4313      	orrs	r3, r2
 8011f58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8011f5c:	2273      	movs	r2, #115	; 0x73
 8011f5e:	2194      	movs	r1, #148	; 0x94
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f001 fd05 	bl	8013970 <VL53L0X_WrByte>
 8011f66:	4603      	mov	r3, r0
 8011f68:	461a      	mov	r2, r3
 8011f6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011f6e:	4313      	orrs	r3, r2
 8011f70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f7ff fc84 	bl	8011882 <VL53L0X_device_read_strobe>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	461a      	mov	r2, r3
 8011f7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011f82:	4313      	orrs	r3, r2
 8011f84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8011f88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011f8c:	461a      	mov	r2, r3
 8011f8e:	2190      	movs	r1, #144	; 0x90
 8011f90:	6878      	ldr	r0, [r7, #4]
 8011f92:	f001 fdd1 	bl	8013b38 <VL53L0X_RdDWord>
 8011f96:	4603      	mov	r3, r0
 8011f98:	461a      	mov	r2, r3
 8011f9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011f9e:	4313      	orrs	r3, r2
 8011fa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8011fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa6:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8011fa8:	b29b      	uxth	r3, r3
 8011faa:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8011fac:	2274      	movs	r2, #116	; 0x74
 8011fae:	2194      	movs	r1, #148	; 0x94
 8011fb0:	6878      	ldr	r0, [r7, #4]
 8011fb2:	f001 fcdd 	bl	8013970 <VL53L0X_WrByte>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	461a      	mov	r2, r3
 8011fba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011fbe:	4313      	orrs	r3, r2
 8011fc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f7ff fc5c 	bl	8011882 <VL53L0X_device_read_strobe>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	461a      	mov	r2, r3
 8011fce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011fd2:	4313      	orrs	r3, r2
 8011fd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8011fd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011fdc:	461a      	mov	r2, r3
 8011fde:	2190      	movs	r1, #144	; 0x90
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f001 fda9 	bl	8013b38 <VL53L0X_RdDWord>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	461a      	mov	r2, r3
 8011fea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011fee:	4313      	orrs	r3, r2
 8011ff0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8011ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ff6:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8011ff8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011ffa:	4313      	orrs	r3, r2
 8011ffc:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8011ffe:	2275      	movs	r2, #117	; 0x75
 8012000:	2194      	movs	r1, #148	; 0x94
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f001 fcb4 	bl	8013970 <VL53L0X_WrByte>
 8012008:	4603      	mov	r3, r0
 801200a:	461a      	mov	r2, r3
 801200c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012010:	4313      	orrs	r3, r2
 8012012:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f7ff fc33 	bl	8011882 <VL53L0X_device_read_strobe>
 801201c:	4603      	mov	r3, r0
 801201e:	461a      	mov	r2, r3
 8012020:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012024:	4313      	orrs	r3, r2
 8012026:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 801202a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801202e:	461a      	mov	r2, r3
 8012030:	2190      	movs	r1, #144	; 0x90
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f001 fd80 	bl	8013b38 <VL53L0X_RdDWord>
 8012038:	4603      	mov	r3, r0
 801203a:	461a      	mov	r2, r3
 801203c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012040:	4313      	orrs	r3, r2
 8012042:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8012046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012048:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 801204a:	b29b      	uxth	r3, r3
 801204c:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 801204e:	2276      	movs	r2, #118	; 0x76
 8012050:	2194      	movs	r1, #148	; 0x94
 8012052:	6878      	ldr	r0, [r7, #4]
 8012054:	f001 fc8c 	bl	8013970 <VL53L0X_WrByte>
 8012058:	4603      	mov	r3, r0
 801205a:	461a      	mov	r2, r3
 801205c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012060:	4313      	orrs	r3, r2
 8012062:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f7ff fc0b 	bl	8011882 <VL53L0X_device_read_strobe>
 801206c:	4603      	mov	r3, r0
 801206e:	461a      	mov	r2, r3
 8012070:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012074:	4313      	orrs	r3, r2
 8012076:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 801207a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801207e:	461a      	mov	r2, r3
 8012080:	2190      	movs	r1, #144	; 0x90
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	f001 fd58 	bl	8013b38 <VL53L0X_RdDWord>
 8012088:	4603      	mov	r3, r0
 801208a:	461a      	mov	r2, r3
 801208c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012090:	4313      	orrs	r3, r2
 8012092:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8012096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012098:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 801209a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801209c:	4313      	orrs	r3, r2
 801209e:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80120a0:	2200      	movs	r2, #0
 80120a2:	2181      	movs	r1, #129	; 0x81
 80120a4:	6878      	ldr	r0, [r7, #4]
 80120a6:	f001 fc63 	bl	8013970 <VL53L0X_WrByte>
 80120aa:	4603      	mov	r3, r0
 80120ac:	461a      	mov	r2, r3
 80120ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80120b2:	4313      	orrs	r3, r2
 80120b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80120b8:	2206      	movs	r2, #6
 80120ba:	21ff      	movs	r1, #255	; 0xff
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f001 fc57 	bl	8013970 <VL53L0X_WrByte>
 80120c2:	4603      	mov	r3, r0
 80120c4:	461a      	mov	r2, r3
 80120c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80120ca:	4313      	orrs	r3, r2
 80120cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80120d0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80120d4:	461a      	mov	r2, r3
 80120d6:	2183      	movs	r1, #131	; 0x83
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f001 fccb 	bl	8013a74 <VL53L0X_RdByte>
 80120de:	4603      	mov	r3, r0
 80120e0:	461a      	mov	r2, r3
 80120e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80120e6:	4313      	orrs	r3, r2
 80120e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80120ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80120f0:	f023 0304 	bic.w	r3, r3, #4
 80120f4:	b2db      	uxtb	r3, r3
 80120f6:	461a      	mov	r2, r3
 80120f8:	2183      	movs	r1, #131	; 0x83
 80120fa:	6878      	ldr	r0, [r7, #4]
 80120fc:	f001 fc38 	bl	8013970 <VL53L0X_WrByte>
 8012100:	4603      	mov	r3, r0
 8012102:	461a      	mov	r2, r3
 8012104:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012108:	4313      	orrs	r3, r2
 801210a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 801210e:	2201      	movs	r2, #1
 8012110:	21ff      	movs	r1, #255	; 0xff
 8012112:	6878      	ldr	r0, [r7, #4]
 8012114:	f001 fc2c 	bl	8013970 <VL53L0X_WrByte>
 8012118:	4603      	mov	r3, r0
 801211a:	461a      	mov	r2, r3
 801211c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012120:	4313      	orrs	r3, r2
 8012122:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8012126:	2201      	movs	r2, #1
 8012128:	2100      	movs	r1, #0
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f001 fc20 	bl	8013970 <VL53L0X_WrByte>
 8012130:	4603      	mov	r3, r0
 8012132:	461a      	mov	r2, r3
 8012134:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012138:	4313      	orrs	r3, r2
 801213a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 801213e:	2200      	movs	r2, #0
 8012140:	21ff      	movs	r1, #255	; 0xff
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f001 fc14 	bl	8013970 <VL53L0X_WrByte>
 8012148:	4603      	mov	r3, r0
 801214a:	461a      	mov	r2, r3
 801214c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012150:	4313      	orrs	r3, r2
 8012152:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8012156:	2200      	movs	r2, #0
 8012158:	2180      	movs	r1, #128	; 0x80
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f001 fc08 	bl	8013970 <VL53L0X_WrByte>
 8012160:	4603      	mov	r3, r0
 8012162:	461a      	mov	r2, r3
 8012164:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012168:	4313      	orrs	r3, r2
 801216a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 801216e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8012172:	2b00      	cmp	r3, #0
 8012174:	f040 808f 	bne.w	8012296 <VL53L0X_get_info_from_device+0x98e>
 8012178:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801217c:	2b07      	cmp	r3, #7
 801217e:	f000 808a 	beq.w	8012296 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8012182:	78fb      	ldrb	r3, [r7, #3]
 8012184:	f003 0301 	and.w	r3, r3, #1
 8012188:	2b00      	cmp	r3, #0
 801218a:	d024      	beq.n	80121d6 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 801218c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012190:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8012194:	2b00      	cmp	r3, #0
 8012196:	d11e      	bne.n	80121d6 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 801219e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80121a8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80121ac:	2300      	movs	r3, #0
 80121ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80121b0:	e00e      	b.n	80121d0 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80121b2:	f107 0208 	add.w	r2, r7, #8
 80121b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121b8:	4413      	add	r3, r2
 80121ba:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80121bc:	687a      	ldr	r2, [r7, #4]
 80121be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121c0:	4413      	add	r3, r2
 80121c2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80121c6:	460a      	mov	r2, r1
 80121c8:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80121ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121cc:	3301      	adds	r3, #1
 80121ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80121d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121d2:	2b05      	cmp	r3, #5
 80121d4:	dded      	ble.n	80121b2 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 80121d6:	78fb      	ldrb	r3, [r7, #3]
 80121d8:	f003 0302 	and.w	r3, r3, #2
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d018      	beq.n	8012212 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80121e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80121e4:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d112      	bne.n	8012212 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80121ec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80121f6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	33f3      	adds	r3, #243	; 0xf3
 8012204:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8012206:	f107 0310 	add.w	r3, r7, #16
 801220a:	4619      	mov	r1, r3
 801220c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801220e:	f001 fd85 	bl	8013d1c <strcpy>

		}

		if (((option & 4) == 4) &&
 8012212:	78fb      	ldrb	r3, [r7, #3]
 8012214:	f003 0304 	and.w	r3, r3, #4
 8012218:	2b00      	cmp	r3, #0
 801221a:	d030      	beq.n	801227e <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 801221c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012220:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8012224:	2b00      	cmp	r3, #0
 8012226:	d12a      	bne.n	801227e <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8012228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8012230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8012238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801223a:	025b      	lsls	r3, r3, #9
 801223c:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012242:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8012246:	2300      	movs	r3, #0
 8012248:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 801224c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801224e:	2b00      	cmp	r3, #0
 8012250:	d011      	beq.n	8012276 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8012252:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012256:	1ad3      	subs	r3, r2, r3
 8012258:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 801225a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801225c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012260:	fb02 f303 	mul.w	r3, r2, r3
 8012264:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8012266:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 801226a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801226e:	425b      	negs	r3, r3
 8012270:	b29b      	uxth	r3, r3
 8012272:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8012276:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 801227e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012282:	78fb      	ldrb	r3, [r7, #3]
 8012284:	4313      	orrs	r3, r2
 8012286:	b2db      	uxtb	r3, r3
 8012288:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 801228c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8012296:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 801229a:	4618      	mov	r0, r3
 801229c:	3760      	adds	r7, #96	; 0x60
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}

080122a2 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80122a2:	b480      	push	{r7}
 80122a4:	b087      	sub	sp, #28
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	6078      	str	r0, [r7, #4]
 80122aa:	460b      	mov	r3, r1
 80122ac:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 80122ae:	f240 6277 	movw	r2, #1655	; 0x677
 80122b2:	f04f 0300 	mov.w	r3, #0
 80122b6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 80122ba:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80122be:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 80122c0:	78fb      	ldrb	r3, [r7, #3]
 80122c2:	68fa      	ldr	r2, [r7, #12]
 80122c4:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 80122c8:	693a      	ldr	r2, [r7, #16]
 80122ca:	fb02 f303 	mul.w	r3, r2, r3
 80122ce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 80122d0:	68bb      	ldr	r3, [r7, #8]
}
 80122d2:	4618      	mov	r0, r3
 80122d4:	371c      	adds	r7, #28
 80122d6:	46bd      	mov	sp, r7
 80122d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122dc:	4770      	bx	lr

080122de <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 80122de:	b480      	push	{r7}
 80122e0:	b087      	sub	sp, #28
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 80122e6:	2300      	movs	r3, #0
 80122e8:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80122ea:	2300      	movs	r3, #0
 80122ec:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80122ee:	2300      	movs	r3, #0
 80122f0:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d017      	beq.n	8012328 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	3b01      	subs	r3, #1
 80122fc:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80122fe:	e005      	b.n	801230c <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	085b      	lsrs	r3, r3, #1
 8012304:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8012306:	89fb      	ldrh	r3, [r7, #14]
 8012308:	3301      	adds	r3, #1
 801230a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 801230c:	693b      	ldr	r3, [r7, #16]
 801230e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012312:	2b00      	cmp	r3, #0
 8012314:	d1f4      	bne.n	8012300 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8012316:	89fb      	ldrh	r3, [r7, #14]
 8012318:	021b      	lsls	r3, r3, #8
 801231a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	b29b      	uxth	r3, r3
 8012320:	b2db      	uxtb	r3, r3
 8012322:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8012324:	4413      	add	r3, r2
 8012326:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8012328:	8afb      	ldrh	r3, [r7, #22]

}
 801232a:	4618      	mov	r0, r3
 801232c:	371c      	adds	r7, #28
 801232e:	46bd      	mov	sp, r7
 8012330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012334:	4770      	bx	lr

08012336 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8012336:	b480      	push	{r7}
 8012338:	b085      	sub	sp, #20
 801233a:	af00      	add	r7, sp, #0
 801233c:	4603      	mov	r3, r0
 801233e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8012340:	2300      	movs	r3, #0
 8012342:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8012344:	88fb      	ldrh	r3, [r7, #6]
 8012346:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8012348:	88fa      	ldrh	r2, [r7, #6]
 801234a:	0a12      	lsrs	r2, r2, #8
 801234c:	b292      	uxth	r2, r2
 801234e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8012350:	3301      	adds	r3, #1
 8012352:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8012354:	68fb      	ldr	r3, [r7, #12]
}
 8012356:	4618      	mov	r0, r3
 8012358:	3714      	adds	r7, #20
 801235a:	46bd      	mov	sp, r7
 801235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012360:	4770      	bx	lr
	...

08012364 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b088      	sub	sp, #32
 8012368:	af00      	add	r7, sp, #0
 801236a:	60f8      	str	r0, [r7, #12]
 801236c:	60b9      	str	r1, [r7, #8]
 801236e:	4613      	mov	r3, r2
 8012370:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8012372:	2300      	movs	r3, #0
 8012374:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8012376:	79fb      	ldrb	r3, [r7, #7]
 8012378:	4619      	mov	r1, r3
 801237a:	68f8      	ldr	r0, [r7, #12]
 801237c:	f7ff ff91 	bl	80122a2 <VL53L0X_calc_macro_period_ps>
 8012380:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8012382:	69bb      	ldr	r3, [r7, #24]
 8012384:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8012388:	4a0a      	ldr	r2, [pc, #40]	; (80123b4 <VL53L0X_calc_timeout_mclks+0x50>)
 801238a:	fba2 2303 	umull	r2, r3, r2, r3
 801238e:	099b      	lsrs	r3, r3, #6
 8012390:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8012392:	68bb      	ldr	r3, [r7, #8]
 8012394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012398:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 801239c:	697b      	ldr	r3, [r7, #20]
 801239e:	085b      	lsrs	r3, r3, #1
 80123a0:	441a      	add	r2, r3
	timeout_period_mclks =
 80123a2:	697b      	ldr	r3, [r7, #20]
 80123a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80123a8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 80123aa:	69fb      	ldr	r3, [r7, #28]
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3720      	adds	r7, #32
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}
 80123b4:	10624dd3 	.word	0x10624dd3

080123b8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b086      	sub	sp, #24
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
 80123c0:	460b      	mov	r3, r1
 80123c2:	807b      	strh	r3, [r7, #2]
 80123c4:	4613      	mov	r3, r2
 80123c6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80123c8:	2300      	movs	r3, #0
 80123ca:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80123cc:	787b      	ldrb	r3, [r7, #1]
 80123ce:	4619      	mov	r1, r3
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f7ff ff66 	bl	80122a2 <VL53L0X_calc_macro_period_ps>
 80123d6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80123d8:	693b      	ldr	r3, [r7, #16]
 80123da:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80123de:	4a0a      	ldr	r2, [pc, #40]	; (8012408 <VL53L0X_calc_timeout_us+0x50>)
 80123e0:	fba2 2303 	umull	r2, r3, r2, r3
 80123e4:	099b      	lsrs	r3, r3, #6
 80123e6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 80123e8:	887b      	ldrh	r3, [r7, #2]
 80123ea:	68fa      	ldr	r2, [r7, #12]
 80123ec:	fb02 f303 	mul.w	r3, r2, r3
 80123f0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 80123f4:	4a04      	ldr	r2, [pc, #16]	; (8012408 <VL53L0X_calc_timeout_us+0x50>)
 80123f6:	fba2 2303 	umull	r2, r3, r2, r3
 80123fa:	099b      	lsrs	r3, r3, #6
 80123fc:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80123fe:	697b      	ldr	r3, [r7, #20]
}
 8012400:	4618      	mov	r0, r3
 8012402:	3718      	adds	r7, #24
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}
 8012408:	10624dd3 	.word	0x10624dd3

0801240c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b08c      	sub	sp, #48	; 0x30
 8012410:	af00      	add	r7, sp, #0
 8012412:	60f8      	str	r0, [r7, #12]
 8012414:	460b      	mov	r3, r1
 8012416:	607a      	str	r2, [r7, #4]
 8012418:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801241a:	2300      	movs	r3, #0
 801241c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8012420:	2300      	movs	r3, #0
 8012422:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8012426:	2300      	movs	r3, #0
 8012428:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 801242a:	2300      	movs	r3, #0
 801242c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 801242e:	2300      	movs	r3, #0
 8012430:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8012432:	7afb      	ldrb	r3, [r7, #11]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d005      	beq.n	8012444 <get_sequence_step_timeout+0x38>
 8012438:	7afb      	ldrb	r3, [r7, #11]
 801243a:	2b01      	cmp	r3, #1
 801243c:	d002      	beq.n	8012444 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 801243e:	7afb      	ldrb	r3, [r7, #11]
 8012440:	2b02      	cmp	r3, #2
 8012442:	d128      	bne.n	8012496 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8012444:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8012448:	461a      	mov	r2, r3
 801244a:	2100      	movs	r1, #0
 801244c:	68f8      	ldr	r0, [r7, #12]
 801244e:	f7fd fa8f 	bl	800f970 <VL53L0X_GetVcselPulsePeriod>
 8012452:	4603      	mov	r3, r0
 8012454:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8012458:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801245c:	2b00      	cmp	r3, #0
 801245e:	d109      	bne.n	8012474 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8012460:	f107 0320 	add.w	r3, r7, #32
 8012464:	461a      	mov	r2, r3
 8012466:	2146      	movs	r1, #70	; 0x46
 8012468:	68f8      	ldr	r0, [r7, #12]
 801246a:	f001 fb03 	bl	8013a74 <VL53L0X_RdByte>
 801246e:	4603      	mov	r3, r0
 8012470:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8012474:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012478:	b29b      	uxth	r3, r3
 801247a:	4618      	mov	r0, r3
 801247c:	f7ff ff5b 	bl	8012336 <VL53L0X_decode_timeout>
 8012480:	4603      	mov	r3, r0
 8012482:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8012484:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8012488:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801248a:	4619      	mov	r1, r3
 801248c:	68f8      	ldr	r0, [r7, #12]
 801248e:	f7ff ff93 	bl	80123b8 <VL53L0X_calc_timeout_us>
 8012492:	62b8      	str	r0, [r7, #40]	; 0x28
 8012494:	e092      	b.n	80125bc <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8012496:	7afb      	ldrb	r3, [r7, #11]
 8012498:	2b03      	cmp	r3, #3
 801249a:	d135      	bne.n	8012508 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 801249c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80124a0:	461a      	mov	r2, r3
 80124a2:	2100      	movs	r1, #0
 80124a4:	68f8      	ldr	r0, [r7, #12]
 80124a6:	f7fd fa63 	bl	800f970 <VL53L0X_GetVcselPulsePeriod>
 80124aa:	4603      	mov	r3, r0
 80124ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80124b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	f040 8081 	bne.w	80125bc <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80124ba:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80124be:	461a      	mov	r2, r3
 80124c0:	2100      	movs	r1, #0
 80124c2:	68f8      	ldr	r0, [r7, #12]
 80124c4:	f7fd fa54 	bl	800f970 <VL53L0X_GetVcselPulsePeriod>
 80124c8:	4603      	mov	r3, r0
 80124ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80124ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d109      	bne.n	80124ea <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80124d6:	f107 031e 	add.w	r3, r7, #30
 80124da:	461a      	mov	r2, r3
 80124dc:	2151      	movs	r1, #81	; 0x51
 80124de:	68f8      	ldr	r0, [r7, #12]
 80124e0:	f001 faf2 	bl	8013ac8 <VL53L0X_RdWord>
 80124e4:	4603      	mov	r3, r0
 80124e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80124ea:	8bfb      	ldrh	r3, [r7, #30]
 80124ec:	4618      	mov	r0, r3
 80124ee:	f7ff ff22 	bl	8012336 <VL53L0X_decode_timeout>
 80124f2:	4603      	mov	r3, r0
 80124f4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80124f6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80124fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80124fc:	4619      	mov	r1, r3
 80124fe:	68f8      	ldr	r0, [r7, #12]
 8012500:	f7ff ff5a 	bl	80123b8 <VL53L0X_calc_timeout_us>
 8012504:	62b8      	str	r0, [r7, #40]	; 0x28
 8012506:	e059      	b.n	80125bc <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8012508:	7afb      	ldrb	r3, [r7, #11]
 801250a:	2b04      	cmp	r3, #4
 801250c:	d156      	bne.n	80125bc <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 801250e:	f107 0314 	add.w	r3, r7, #20
 8012512:	4619      	mov	r1, r3
 8012514:	68f8      	ldr	r0, [r7, #12]
 8012516:	f7fd fb37 	bl	800fb88 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 801251a:	2300      	movs	r3, #0
 801251c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 801251e:	7dfb      	ldrb	r3, [r7, #23]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d01d      	beq.n	8012560 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8012524:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8012528:	461a      	mov	r2, r3
 801252a:	2100      	movs	r1, #0
 801252c:	68f8      	ldr	r0, [r7, #12]
 801252e:	f7fd fa1f 	bl	800f970 <VL53L0X_GetVcselPulsePeriod>
 8012532:	4603      	mov	r3, r0
 8012534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8012538:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801253c:	2b00      	cmp	r3, #0
 801253e:	d10f      	bne.n	8012560 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8012540:	f107 031e 	add.w	r3, r7, #30
 8012544:	461a      	mov	r2, r3
 8012546:	2151      	movs	r1, #81	; 0x51
 8012548:	68f8      	ldr	r0, [r7, #12]
 801254a:	f001 fabd 	bl	8013ac8 <VL53L0X_RdWord>
 801254e:	4603      	mov	r3, r0
 8012550:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8012554:	8bfb      	ldrh	r3, [r7, #30]
 8012556:	4618      	mov	r0, r3
 8012558:	f7ff feed 	bl	8012336 <VL53L0X_decode_timeout>
 801255c:	4603      	mov	r3, r0
 801255e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8012560:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8012564:	2b00      	cmp	r3, #0
 8012566:	d109      	bne.n	801257c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8012568:	f107 0321 	add.w	r3, r7, #33	; 0x21
 801256c:	461a      	mov	r2, r3
 801256e:	2101      	movs	r1, #1
 8012570:	68f8      	ldr	r0, [r7, #12]
 8012572:	f7fd f9fd 	bl	800f970 <VL53L0X_GetVcselPulsePeriod>
 8012576:	4603      	mov	r3, r0
 8012578:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 801257c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8012580:	2b00      	cmp	r3, #0
 8012582:	d10f      	bne.n	80125a4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8012584:	f107 031c 	add.w	r3, r7, #28
 8012588:	461a      	mov	r2, r3
 801258a:	2171      	movs	r1, #113	; 0x71
 801258c:	68f8      	ldr	r0, [r7, #12]
 801258e:	f001 fa9b 	bl	8013ac8 <VL53L0X_RdWord>
 8012592:	4603      	mov	r3, r0
 8012594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8012598:	8bbb      	ldrh	r3, [r7, #28]
 801259a:	4618      	mov	r0, r3
 801259c:	f7ff fecb 	bl	8012336 <VL53L0X_decode_timeout>
 80125a0:	4603      	mov	r3, r0
 80125a2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80125a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80125a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80125a8:	1ad3      	subs	r3, r2, r3
 80125aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80125ac:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80125b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80125b2:	4619      	mov	r1, r3
 80125b4:	68f8      	ldr	r0, [r7, #12]
 80125b6:	f7ff feff 	bl	80123b8 <VL53L0X_calc_timeout_us>
 80125ba:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80125c0:	601a      	str	r2, [r3, #0]

	return Status;
 80125c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	3730      	adds	r7, #48	; 0x30
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}

080125ce <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80125ce:	b580      	push	{r7, lr}
 80125d0:	b08a      	sub	sp, #40	; 0x28
 80125d2:	af00      	add	r7, sp, #0
 80125d4:	60f8      	str	r0, [r7, #12]
 80125d6:	460b      	mov	r3, r1
 80125d8:	607a      	str	r2, [r7, #4]
 80125da:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80125dc:	2300      	movs	r3, #0
 80125de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80125e2:	7afb      	ldrb	r3, [r7, #11]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d005      	beq.n	80125f4 <set_sequence_step_timeout+0x26>
 80125e8:	7afb      	ldrb	r3, [r7, #11]
 80125ea:	2b01      	cmp	r3, #1
 80125ec:	d002      	beq.n	80125f4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80125ee:	7afb      	ldrb	r3, [r7, #11]
 80125f0:	2b02      	cmp	r3, #2
 80125f2:	d138      	bne.n	8012666 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80125f4:	f107 031b 	add.w	r3, r7, #27
 80125f8:	461a      	mov	r2, r3
 80125fa:	2100      	movs	r1, #0
 80125fc:	68f8      	ldr	r0, [r7, #12]
 80125fe:	f7fd f9b7 	bl	800f970 <VL53L0X_GetVcselPulsePeriod>
 8012602:	4603      	mov	r3, r0
 8012604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8012608:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801260c:	2b00      	cmp	r3, #0
 801260e:	d11a      	bne.n	8012646 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8012610:	7efb      	ldrb	r3, [r7, #27]
 8012612:	461a      	mov	r2, r3
 8012614:	6879      	ldr	r1, [r7, #4]
 8012616:	68f8      	ldr	r0, [r7, #12]
 8012618:	f7ff fea4 	bl	8012364 <VL53L0X_calc_timeout_mclks>
 801261c:	4603      	mov	r3, r0
 801261e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8012620:	8bbb      	ldrh	r3, [r7, #28]
 8012622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012626:	d903      	bls.n	8012630 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8012628:	23ff      	movs	r3, #255	; 0xff
 801262a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801262e:	e004      	b.n	801263a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8012630:	8bbb      	ldrh	r3, [r7, #28]
 8012632:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8012634:	3b01      	subs	r3, #1
 8012636:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 801263a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801263e:	b29a      	uxth	r2, r3
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8012646:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801264a:	2b00      	cmp	r3, #0
 801264c:	f040 80ab 	bne.w	80127a6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8012650:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012654:	461a      	mov	r2, r3
 8012656:	2146      	movs	r1, #70	; 0x46
 8012658:	68f8      	ldr	r0, [r7, #12]
 801265a:	f001 f989 	bl	8013970 <VL53L0X_WrByte>
 801265e:	4603      	mov	r3, r0
 8012660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8012664:	e09f      	b.n	80127a6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8012666:	7afb      	ldrb	r3, [r7, #11]
 8012668:	2b03      	cmp	r3, #3
 801266a:	d135      	bne.n	80126d8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 801266c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012670:	2b00      	cmp	r3, #0
 8012672:	d11b      	bne.n	80126ac <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8012674:	f107 031b 	add.w	r3, r7, #27
 8012678:	461a      	mov	r2, r3
 801267a:	2100      	movs	r1, #0
 801267c:	68f8      	ldr	r0, [r7, #12]
 801267e:	f7fd f977 	bl	800f970 <VL53L0X_GetVcselPulsePeriod>
 8012682:	4603      	mov	r3, r0
 8012684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8012688:	7efb      	ldrb	r3, [r7, #27]
 801268a:	461a      	mov	r2, r3
 801268c:	6879      	ldr	r1, [r7, #4]
 801268e:	68f8      	ldr	r0, [r7, #12]
 8012690:	f7ff fe68 	bl	8012364 <VL53L0X_calc_timeout_mclks>
 8012694:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8012696:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8012698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801269a:	4618      	mov	r0, r3
 801269c:	f7ff fe1f 	bl	80122de <VL53L0X_encode_timeout>
 80126a0:	4603      	mov	r3, r0
 80126a2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80126a4:	8b3a      	ldrh	r2, [r7, #24]
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80126ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d108      	bne.n	80126c6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80126b4:	8b3b      	ldrh	r3, [r7, #24]
 80126b6:	461a      	mov	r2, r3
 80126b8:	2151      	movs	r1, #81	; 0x51
 80126ba:	68f8      	ldr	r0, [r7, #12]
 80126bc:	f001 f97c 	bl	80139b8 <VL53L0X_WrWord>
 80126c0:	4603      	mov	r3, r0
 80126c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80126c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d16b      	bne.n	80127a6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	687a      	ldr	r2, [r7, #4]
 80126d2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80126d6:	e066      	b.n	80127a6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80126d8:	7afb      	ldrb	r3, [r7, #11]
 80126da:	2b04      	cmp	r3, #4
 80126dc:	d160      	bne.n	80127a0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80126de:	f107 0310 	add.w	r3, r7, #16
 80126e2:	4619      	mov	r1, r3
 80126e4:	68f8      	ldr	r0, [r7, #12]
 80126e6:	f7fd fa4f 	bl	800fb88 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80126ea:	2300      	movs	r3, #0
 80126ec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 80126ee:	7cfb      	ldrb	r3, [r7, #19]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d01d      	beq.n	8012730 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80126f4:	f107 031b 	add.w	r3, r7, #27
 80126f8:	461a      	mov	r2, r3
 80126fa:	2100      	movs	r1, #0
 80126fc:	68f8      	ldr	r0, [r7, #12]
 80126fe:	f7fd f937 	bl	800f970 <VL53L0X_GetVcselPulsePeriod>
 8012702:	4603      	mov	r3, r0
 8012704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8012708:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801270c:	2b00      	cmp	r3, #0
 801270e:	d10f      	bne.n	8012730 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8012710:	f107 0318 	add.w	r3, r7, #24
 8012714:	461a      	mov	r2, r3
 8012716:	2151      	movs	r1, #81	; 0x51
 8012718:	68f8      	ldr	r0, [r7, #12]
 801271a:	f001 f9d5 	bl	8013ac8 <VL53L0X_RdWord>
 801271e:	4603      	mov	r3, r0
 8012720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8012724:	8b3b      	ldrh	r3, [r7, #24]
 8012726:	4618      	mov	r0, r3
 8012728:	f7ff fe05 	bl	8012336 <VL53L0X_decode_timeout>
 801272c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 801272e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8012730:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012734:	2b00      	cmp	r3, #0
 8012736:	d109      	bne.n	801274c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8012738:	f107 031b 	add.w	r3, r7, #27
 801273c:	461a      	mov	r2, r3
 801273e:	2101      	movs	r1, #1
 8012740:	68f8      	ldr	r0, [r7, #12]
 8012742:	f7fd f915 	bl	800f970 <VL53L0X_GetVcselPulsePeriod>
 8012746:	4603      	mov	r3, r0
 8012748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 801274c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012750:	2b00      	cmp	r3, #0
 8012752:	d128      	bne.n	80127a6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8012754:	7efb      	ldrb	r3, [r7, #27]
 8012756:	461a      	mov	r2, r3
 8012758:	6879      	ldr	r1, [r7, #4]
 801275a:	68f8      	ldr	r0, [r7, #12]
 801275c:	f7ff fe02 	bl	8012364 <VL53L0X_calc_timeout_mclks>
 8012760:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8012762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012764:	6a3a      	ldr	r2, [r7, #32]
 8012766:	4413      	add	r3, r2
 8012768:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 801276a:	6a38      	ldr	r0, [r7, #32]
 801276c:	f7ff fdb7 	bl	80122de <VL53L0X_encode_timeout>
 8012770:	4603      	mov	r3, r0
 8012772:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8012774:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012778:	2b00      	cmp	r3, #0
 801277a:	d108      	bne.n	801278e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 801277c:	8bfb      	ldrh	r3, [r7, #30]
 801277e:	461a      	mov	r2, r3
 8012780:	2171      	movs	r1, #113	; 0x71
 8012782:	68f8      	ldr	r0, [r7, #12]
 8012784:	f001 f918 	bl	80139b8 <VL53L0X_WrWord>
 8012788:	4603      	mov	r3, r0
 801278a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 801278e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012792:	2b00      	cmp	r3, #0
 8012794:	d107      	bne.n	80127a6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	687a      	ldr	r2, [r7, #4]
 801279a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 801279e:	e002      	b.n	80127a6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80127a0:	23fc      	movs	r3, #252	; 0xfc
 80127a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80127a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80127aa:	4618      	mov	r0, r3
 80127ac:	3728      	adds	r7, #40	; 0x28
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bd80      	pop	{r7, pc}

080127b2 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80127b2:	b580      	push	{r7, lr}
 80127b4:	b086      	sub	sp, #24
 80127b6:	af00      	add	r7, sp, #0
 80127b8:	60f8      	str	r0, [r7, #12]
 80127ba:	460b      	mov	r3, r1
 80127bc:	607a      	str	r2, [r7, #4]
 80127be:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80127c0:	2300      	movs	r3, #0
 80127c2:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80127c4:	7afb      	ldrb	r3, [r7, #11]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d002      	beq.n	80127d0 <VL53L0X_get_vcsel_pulse_period+0x1e>
 80127ca:	2b01      	cmp	r3, #1
 80127cc:	d00a      	beq.n	80127e4 <VL53L0X_get_vcsel_pulse_period+0x32>
 80127ce:	e013      	b.n	80127f8 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80127d0:	f107 0316 	add.w	r3, r7, #22
 80127d4:	461a      	mov	r2, r3
 80127d6:	2150      	movs	r1, #80	; 0x50
 80127d8:	68f8      	ldr	r0, [r7, #12]
 80127da:	f001 f94b 	bl	8013a74 <VL53L0X_RdByte>
 80127de:	4603      	mov	r3, r0
 80127e0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80127e2:	e00b      	b.n	80127fc <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80127e4:	f107 0316 	add.w	r3, r7, #22
 80127e8:	461a      	mov	r2, r3
 80127ea:	2170      	movs	r1, #112	; 0x70
 80127ec:	68f8      	ldr	r0, [r7, #12]
 80127ee:	f001 f941 	bl	8013a74 <VL53L0X_RdByte>
 80127f2:	4603      	mov	r3, r0
 80127f4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80127f6:	e001      	b.n	80127fc <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80127f8:	23fc      	movs	r3, #252	; 0xfc
 80127fa:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80127fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d107      	bne.n	8012814 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8012804:	7dbb      	ldrb	r3, [r7, #22]
 8012806:	4618      	mov	r0, r3
 8012808:	f7fe fff4 	bl	80117f4 <VL53L0X_decode_vcsel_period>
 801280c:	4603      	mov	r3, r0
 801280e:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	701a      	strb	r2, [r3, #0]

	return Status;
 8012814:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012818:	4618      	mov	r0, r3
 801281a:	3718      	adds	r7, #24
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}

08012820 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b092      	sub	sp, #72	; 0x48
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
 8012828:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801282a:	2300      	movs	r3, #0
 801282c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8012830:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8012834:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8012836:	f240 7376 	movw	r3, #1910	; 0x776
 801283a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 801283c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8012840:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8012842:	f44f 7325 	mov.w	r3, #660	; 0x294
 8012846:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8012848:	f240 234e 	movw	r3, #590	; 0x24e
 801284c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 801284e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8012852:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8012854:	f44f 7325 	mov.w	r3, #660	; 0x294
 8012858:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 801285a:	f240 2326 	movw	r3, #550	; 0x226
 801285e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8012860:	2300      	movs	r3, #0
 8012862:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8012864:	f644 6320 	movw	r3, #20000	; 0x4e20
 8012868:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 801286a:	2300      	movs	r3, #0
 801286c:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 801286e:	683a      	ldr	r2, [r7, #0]
 8012870:	6a3b      	ldr	r3, [r7, #32]
 8012872:	429a      	cmp	r2, r3
 8012874:	d205      	bcs.n	8012882 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8012876:	23fc      	movs	r3, #252	; 0xfc
 8012878:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 801287c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8012880:	e0aa      	b.n	80129d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8012882:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012886:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8012888:	683a      	ldr	r2, [r7, #0]
 801288a:	1ad3      	subs	r3, r2, r3
 801288c:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 801288e:	f107 0314 	add.w	r3, r7, #20
 8012892:	4619      	mov	r1, r3
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f7fd f977 	bl	800fb88 <VL53L0X_GetSequenceStepEnables>
 801289a:	4603      	mov	r3, r0
 801289c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80128a0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d15b      	bne.n	8012960 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80128a8:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d105      	bne.n	80128ba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80128ae:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d102      	bne.n	80128ba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80128b4:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d052      	beq.n	8012960 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80128ba:	f107 0310 	add.w	r3, r7, #16
 80128be:	461a      	mov	r2, r3
 80128c0:	2102      	movs	r1, #2
 80128c2:	6878      	ldr	r0, [r7, #4]
 80128c4:	f7ff fda2 	bl	801240c <get_sequence_step_timeout>
 80128c8:	4603      	mov	r3, r0
 80128ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 80128ce:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d002      	beq.n	80128dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 80128d6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80128da:	e07d      	b.n	80129d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80128dc:	7d3b      	ldrb	r3, [r7, #20]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d00f      	beq.n	8012902 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80128e2:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80128e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128e6:	4413      	add	r3, r2
 80128e8:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 80128ea:	69fa      	ldr	r2, [r7, #28]
 80128ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128ee:	429a      	cmp	r2, r3
 80128f0:	d204      	bcs.n	80128fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 80128f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80128f4:	69fb      	ldr	r3, [r7, #28]
 80128f6:	1ad3      	subs	r3, r2, r3
 80128f8:	643b      	str	r3, [r7, #64]	; 0x40
 80128fa:	e002      	b.n	8012902 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80128fc:	23fc      	movs	r3, #252	; 0xfc
 80128fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8012902:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8012906:	2b00      	cmp	r3, #0
 8012908:	d002      	beq.n	8012910 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 801290a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 801290e:	e063      	b.n	80129d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8012910:	7dbb      	ldrb	r3, [r7, #22]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d011      	beq.n	801293a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8012916:	693a      	ldr	r2, [r7, #16]
 8012918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801291a:	4413      	add	r3, r2
 801291c:	005b      	lsls	r3, r3, #1
 801291e:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8012920:	69fa      	ldr	r2, [r7, #28]
 8012922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012924:	429a      	cmp	r2, r3
 8012926:	d204      	bcs.n	8012932 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8012928:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801292a:	69fb      	ldr	r3, [r7, #28]
 801292c:	1ad3      	subs	r3, r2, r3
 801292e:	643b      	str	r3, [r7, #64]	; 0x40
 8012930:	e016      	b.n	8012960 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8012932:	23fc      	movs	r3, #252	; 0xfc
 8012934:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012938:	e012      	b.n	8012960 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 801293a:	7d7b      	ldrb	r3, [r7, #21]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d00f      	beq.n	8012960 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8012940:	693b      	ldr	r3, [r7, #16]
 8012942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012944:	4413      	add	r3, r2
 8012946:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8012948:	69fa      	ldr	r2, [r7, #28]
 801294a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801294c:	429a      	cmp	r2, r3
 801294e:	d204      	bcs.n	801295a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8012950:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012952:	69fb      	ldr	r3, [r7, #28]
 8012954:	1ad3      	subs	r3, r2, r3
 8012956:	643b      	str	r3, [r7, #64]	; 0x40
 8012958:	e002      	b.n	8012960 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 801295a:	23fc      	movs	r3, #252	; 0xfc
 801295c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8012960:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8012964:	2b00      	cmp	r3, #0
 8012966:	d002      	beq.n	801296e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8012968:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 801296c:	e034      	b.n	80129d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 801296e:	7dfb      	ldrb	r3, [r7, #23]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d019      	beq.n	80129a8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8012974:	f107 030c 	add.w	r3, r7, #12
 8012978:	461a      	mov	r2, r3
 801297a:	2103      	movs	r1, #3
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f7ff fd45 	bl	801240c <get_sequence_step_timeout>
 8012982:	4603      	mov	r3, r0
 8012984:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801298c:	4413      	add	r3, r2
 801298e:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8012990:	69fa      	ldr	r2, [r7, #28]
 8012992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012994:	429a      	cmp	r2, r3
 8012996:	d204      	bcs.n	80129a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8012998:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801299a:	69fb      	ldr	r3, [r7, #28]
 801299c:	1ad3      	subs	r3, r2, r3
 801299e:	643b      	str	r3, [r7, #64]	; 0x40
 80129a0:	e002      	b.n	80129a8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80129a2:	23fc      	movs	r3, #252	; 0xfc
 80129a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80129a8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d111      	bne.n	80129d4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 80129b0:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d00e      	beq.n	80129d4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 80129b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80129b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ba:	1ad3      	subs	r3, r2, r3
 80129bc:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80129be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80129c0:	2104      	movs	r1, #4
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f7ff fe03 	bl	80125ce <set_sequence_step_timeout>
 80129c8:	4603      	mov	r3, r0
 80129ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	683a      	ldr	r2, [r7, #0]
 80129d2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80129d4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80129d8:	4618      	mov	r0, r3
 80129da:	3748      	adds	r7, #72	; 0x48
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd80      	pop	{r7, pc}

080129e0 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b090      	sub	sp, #64	; 0x40
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80129ea:	2300      	movs	r3, #0
 80129ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80129f0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80129f4:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80129f6:	f240 7376 	movw	r3, #1910	; 0x776
 80129fa:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 80129fc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8012a00:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8012a02:	f44f 7325 	mov.w	r3, #660	; 0x294
 8012a06:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8012a08:	f240 234e 	movw	r3, #590	; 0x24e
 8012a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8012a0e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8012a12:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8012a14:	f44f 7325 	mov.w	r3, #660	; 0x294
 8012a18:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8012a1a:	f240 2326 	movw	r3, #550	; 0x226
 8012a1e:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8012a20:	2300      	movs	r3, #0
 8012a22:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8012a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a28:	441a      	add	r2, r3
 8012a2a:	683b      	ldr	r3, [r7, #0]
 8012a2c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8012a2e:	f107 0318 	add.w	r3, r7, #24
 8012a32:	4619      	mov	r1, r3
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f7fd f8a7 	bl	800fb88 <VL53L0X_GetSequenceStepEnables>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8012a40:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d002      	beq.n	8012a4e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8012a48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012a4c:	e075      	b.n	8012b3a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8012a4e:	7e3b      	ldrb	r3, [r7, #24]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d105      	bne.n	8012a60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8012a54:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d102      	bne.n	8012a60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8012a5a:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d030      	beq.n	8012ac2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8012a60:	f107 0310 	add.w	r3, r7, #16
 8012a64:	461a      	mov	r2, r3
 8012a66:	2102      	movs	r1, #2
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f7ff fccf 	bl	801240c <get_sequence_step_timeout>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8012a74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d122      	bne.n	8012ac2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8012a7c:	7e3b      	ldrb	r3, [r7, #24]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d007      	beq.n	8012a92 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8012a86:	6939      	ldr	r1, [r7, #16]
 8012a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a8a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8012a8c:	441a      	add	r2, r3
 8012a8e:	683b      	ldr	r3, [r7, #0]
 8012a90:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8012a92:	7ebb      	ldrb	r3, [r7, #26]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d009      	beq.n	8012aac <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8012a9c:	6939      	ldr	r1, [r7, #16]
 8012a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aa0:	440b      	add	r3, r1
 8012aa2:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8012aa4:	441a      	add	r2, r3
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	601a      	str	r2, [r3, #0]
 8012aaa:	e00a      	b.n	8012ac2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8012aac:	7e7b      	ldrb	r3, [r7, #25]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d007      	beq.n	8012ac2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8012ab6:	6939      	ldr	r1, [r7, #16]
 8012ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aba:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8012abc:	441a      	add	r2, r3
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8012ac2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d114      	bne.n	8012af4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8012aca:	7efb      	ldrb	r3, [r7, #27]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d011      	beq.n	8012af4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8012ad0:	f107 030c 	add.w	r3, r7, #12
 8012ad4:	461a      	mov	r2, r3
 8012ad6:	2103      	movs	r1, #3
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f7ff fc97 	bl	801240c <get_sequence_step_timeout>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8012ae8:	68f9      	ldr	r1, [r7, #12]
 8012aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aec:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8012aee:	441a      	add	r2, r3
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8012af4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d114      	bne.n	8012b26 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8012afc:	7f3b      	ldrb	r3, [r7, #28]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d011      	beq.n	8012b26 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8012b02:	f107 0314 	add.w	r3, r7, #20
 8012b06:	461a      	mov	r2, r3
 8012b08:	2104      	movs	r1, #4
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	f7ff fc7e 	bl	801240c <get_sequence_step_timeout>
 8012b10:	4603      	mov	r3, r0
 8012b12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8012b16:	683b      	ldr	r3, [r7, #0]
 8012b18:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8012b1a:	6979      	ldr	r1, [r7, #20]
 8012b1c:	6a3b      	ldr	r3, [r7, #32]
 8012b1e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8012b20:	441a      	add	r2, r3
 8012b22:	683b      	ldr	r3, [r7, #0]
 8012b24:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8012b26:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d103      	bne.n	8012b36 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	681a      	ldr	r2, [r3, #0]
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8012b36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	3740      	adds	r7, #64	; 0x40
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}
	...

08012b44 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b088      	sub	sp, #32
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
 8012b4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012b4e:	2300      	movs	r3, #0
 8012b50:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8012b52:	2300      	movs	r3, #0
 8012b54:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8012b56:	e0c6      	b.n	8012ce6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8012b58:	697b      	ldr	r3, [r7, #20]
 8012b5a:	683a      	ldr	r2, [r7, #0]
 8012b5c:	4413      	add	r3, r2
 8012b5e:	781b      	ldrb	r3, [r3, #0]
 8012b60:	74fb      	strb	r3, [r7, #19]
		Index++;
 8012b62:	697b      	ldr	r3, [r7, #20]
 8012b64:	3301      	adds	r3, #1
 8012b66:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8012b68:	7cfb      	ldrb	r3, [r7, #19]
 8012b6a:	2bff      	cmp	r3, #255	; 0xff
 8012b6c:	f040 808d 	bne.w	8012c8a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8012b70:	697b      	ldr	r3, [r7, #20]
 8012b72:	683a      	ldr	r2, [r7, #0]
 8012b74:	4413      	add	r3, r2
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	747b      	strb	r3, [r7, #17]
			Index++;
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	3301      	adds	r3, #1
 8012b7e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8012b80:	7c7b      	ldrb	r3, [r7, #17]
 8012b82:	2b03      	cmp	r3, #3
 8012b84:	d87e      	bhi.n	8012c84 <VL53L0X_load_tuning_settings+0x140>
 8012b86:	a201      	add	r2, pc, #4	; (adr r2, 8012b8c <VL53L0X_load_tuning_settings+0x48>)
 8012b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b8c:	08012b9d 	.word	0x08012b9d
 8012b90:	08012bd7 	.word	0x08012bd7
 8012b94:	08012c11 	.word	0x08012c11
 8012b98:	08012c4b 	.word	0x08012c4b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	683a      	ldr	r2, [r7, #0]
 8012ba0:	4413      	add	r3, r2
 8012ba2:	781b      	ldrb	r3, [r3, #0]
 8012ba4:	743b      	strb	r3, [r7, #16]
				Index++;
 8012ba6:	697b      	ldr	r3, [r7, #20]
 8012ba8:	3301      	adds	r3, #1
 8012baa:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8012bac:	697b      	ldr	r3, [r7, #20]
 8012bae:	683a      	ldr	r2, [r7, #0]
 8012bb0:	4413      	add	r3, r2
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	73fb      	strb	r3, [r7, #15]
				Index++;
 8012bb6:	697b      	ldr	r3, [r7, #20]
 8012bb8:	3301      	adds	r3, #1
 8012bba:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8012bbc:	7c3b      	ldrb	r3, [r7, #16]
 8012bbe:	b29b      	uxth	r3, r3
 8012bc0:	021b      	lsls	r3, r3, #8
 8012bc2:	b29a      	uxth	r2, r3
 8012bc4:	7bfb      	ldrb	r3, [r7, #15]
 8012bc6:	b29b      	uxth	r3, r3
 8012bc8:	4413      	add	r3, r2
 8012bca:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	89ba      	ldrh	r2, [r7, #12]
 8012bd0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8012bd4:	e087      	b.n	8012ce6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	683a      	ldr	r2, [r7, #0]
 8012bda:	4413      	add	r3, r2
 8012bdc:	781b      	ldrb	r3, [r3, #0]
 8012bde:	743b      	strb	r3, [r7, #16]
				Index++;
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	3301      	adds	r3, #1
 8012be4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8012be6:	697b      	ldr	r3, [r7, #20]
 8012be8:	683a      	ldr	r2, [r7, #0]
 8012bea:	4413      	add	r3, r2
 8012bec:	781b      	ldrb	r3, [r3, #0]
 8012bee:	73fb      	strb	r3, [r7, #15]
				Index++;
 8012bf0:	697b      	ldr	r3, [r7, #20]
 8012bf2:	3301      	adds	r3, #1
 8012bf4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8012bf6:	7c3b      	ldrb	r3, [r7, #16]
 8012bf8:	b29b      	uxth	r3, r3
 8012bfa:	021b      	lsls	r3, r3, #8
 8012bfc:	b29a      	uxth	r2, r3
 8012bfe:	7bfb      	ldrb	r3, [r7, #15]
 8012c00:	b29b      	uxth	r3, r3
 8012c02:	4413      	add	r3, r2
 8012c04:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	89ba      	ldrh	r2, [r7, #12]
 8012c0a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8012c0e:	e06a      	b.n	8012ce6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8012c10:	697b      	ldr	r3, [r7, #20]
 8012c12:	683a      	ldr	r2, [r7, #0]
 8012c14:	4413      	add	r3, r2
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	743b      	strb	r3, [r7, #16]
				Index++;
 8012c1a:	697b      	ldr	r3, [r7, #20]
 8012c1c:	3301      	adds	r3, #1
 8012c1e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8012c20:	697b      	ldr	r3, [r7, #20]
 8012c22:	683a      	ldr	r2, [r7, #0]
 8012c24:	4413      	add	r3, r2
 8012c26:	781b      	ldrb	r3, [r3, #0]
 8012c28:	73fb      	strb	r3, [r7, #15]
				Index++;
 8012c2a:	697b      	ldr	r3, [r7, #20]
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8012c30:	7c3b      	ldrb	r3, [r7, #16]
 8012c32:	b29b      	uxth	r3, r3
 8012c34:	021b      	lsls	r3, r3, #8
 8012c36:	b29a      	uxth	r2, r3
 8012c38:	7bfb      	ldrb	r3, [r7, #15]
 8012c3a:	b29b      	uxth	r3, r3
 8012c3c:	4413      	add	r3, r2
 8012c3e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	89ba      	ldrh	r2, [r7, #12]
 8012c44:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8012c48:	e04d      	b.n	8012ce6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	683a      	ldr	r2, [r7, #0]
 8012c4e:	4413      	add	r3, r2
 8012c50:	781b      	ldrb	r3, [r3, #0]
 8012c52:	743b      	strb	r3, [r7, #16]
				Index++;
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	3301      	adds	r3, #1
 8012c58:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	683a      	ldr	r2, [r7, #0]
 8012c5e:	4413      	add	r3, r2
 8012c60:	781b      	ldrb	r3, [r3, #0]
 8012c62:	73fb      	strb	r3, [r7, #15]
				Index++;
 8012c64:	697b      	ldr	r3, [r7, #20]
 8012c66:	3301      	adds	r3, #1
 8012c68:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8012c6a:	7c3b      	ldrb	r3, [r7, #16]
 8012c6c:	b29b      	uxth	r3, r3
 8012c6e:	021b      	lsls	r3, r3, #8
 8012c70:	b29a      	uxth	r2, r3
 8012c72:	7bfb      	ldrb	r3, [r7, #15]
 8012c74:	b29b      	uxth	r3, r3
 8012c76:	4413      	add	r3, r2
 8012c78:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	89ba      	ldrh	r2, [r7, #12]
 8012c7e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8012c82:	e030      	b.n	8012ce6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8012c84:	23fc      	movs	r3, #252	; 0xfc
 8012c86:	77fb      	strb	r3, [r7, #31]
 8012c88:	e02d      	b.n	8012ce6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8012c8a:	7cfb      	ldrb	r3, [r7, #19]
 8012c8c:	2b04      	cmp	r3, #4
 8012c8e:	d828      	bhi.n	8012ce2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8012c90:	697b      	ldr	r3, [r7, #20]
 8012c92:	683a      	ldr	r2, [r7, #0]
 8012c94:	4413      	add	r3, r2
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	74bb      	strb	r3, [r7, #18]
			Index++;
 8012c9a:	697b      	ldr	r3, [r7, #20]
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	61bb      	str	r3, [r7, #24]
 8012ca4:	e00f      	b.n	8012cc6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	683a      	ldr	r2, [r7, #0]
 8012caa:	4413      	add	r3, r2
 8012cac:	7819      	ldrb	r1, [r3, #0]
 8012cae:	f107 0208 	add.w	r2, r7, #8
 8012cb2:	69bb      	ldr	r3, [r7, #24]
 8012cb4:	4413      	add	r3, r2
 8012cb6:	460a      	mov	r2, r1
 8012cb8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8012cba:	697b      	ldr	r3, [r7, #20]
 8012cbc:	3301      	adds	r3, #1
 8012cbe:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8012cc0:	69bb      	ldr	r3, [r7, #24]
 8012cc2:	3301      	adds	r3, #1
 8012cc4:	61bb      	str	r3, [r7, #24]
 8012cc6:	7cfb      	ldrb	r3, [r7, #19]
 8012cc8:	69ba      	ldr	r2, [r7, #24]
 8012cca:	429a      	cmp	r2, r3
 8012ccc:	dbeb      	blt.n	8012ca6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8012cce:	7cfb      	ldrb	r3, [r7, #19]
 8012cd0:	f107 0208 	add.w	r2, r7, #8
 8012cd4:	7cb9      	ldrb	r1, [r7, #18]
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f000 fdee 	bl	80138b8 <VL53L0X_WriteMulti>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	77fb      	strb	r3, [r7, #31]
 8012ce0:	e001      	b.n	8012ce6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8012ce2:	23fc      	movs	r3, #252	; 0xfc
 8012ce4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	683a      	ldr	r2, [r7, #0]
 8012cea:	4413      	add	r3, r2
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d004      	beq.n	8012cfc <VL53L0X_load_tuning_settings+0x1b8>
 8012cf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	f43f af2e 	beq.w	8012b58 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8012cfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	3720      	adds	r7, #32
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}

08012d08 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b088      	sub	sp, #32
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	60f8      	str	r0, [r7, #12]
 8012d10:	60b9      	str	r1, [r7, #8]
 8012d12:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012d14:	2300      	movs	r3, #0
 8012d16:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8012d1e:	f107 0313 	add.w	r3, r7, #19
 8012d22:	4619      	mov	r1, r3
 8012d24:	68f8      	ldr	r0, [r7, #12]
 8012d26:	f7fc ffbb 	bl	800fca0 <VL53L0X_GetXTalkCompensationEnable>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8012d2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d111      	bne.n	8012d5a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8012d36:	7cfb      	ldrb	r3, [r7, #19]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d00e      	beq.n	8012d5a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	6a1b      	ldr	r3, [r3, #32]
 8012d40:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8012d42:	68bb      	ldr	r3, [r7, #8]
 8012d44:	8a9b      	ldrh	r3, [r3, #20]
 8012d46:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8012d48:	69bb      	ldr	r3, [r7, #24]
 8012d4a:	fb02 f303 	mul.w	r3, r2, r3
 8012d4e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	3380      	adds	r3, #128	; 0x80
 8012d54:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8012d5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3720      	adds	r7, #32
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}

08012d66 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8012d66:	b580      	push	{r7, lr}
 8012d68:	b086      	sub	sp, #24
 8012d6a:	af00      	add	r7, sp, #0
 8012d6c:	60f8      	str	r0, [r7, #12]
 8012d6e:	60b9      	str	r1, [r7, #8]
 8012d70:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012d72:	2300      	movs	r3, #0
 8012d74:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8012d7e:	f107 0310 	add.w	r3, r7, #16
 8012d82:	461a      	mov	r2, r3
 8012d84:	68b9      	ldr	r1, [r7, #8]
 8012d86:	68f8      	ldr	r0, [r7, #12]
 8012d88:	f7ff ffbe 	bl	8012d08 <VL53L0X_get_total_xtalk_rate>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8012d90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d105      	bne.n	8012da4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681a      	ldr	r2, [r3, #0]
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	441a      	add	r2, r3
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	601a      	str	r2, [r3, #0]

	return Status;
 8012da4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3718      	adds	r7, #24
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}

08012db0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b09a      	sub	sp, #104	; 0x68
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	60f8      	str	r0, [r7, #12]
 8012db8:	60b9      	str	r1, [r7, #8]
 8012dba:	607a      	str	r2, [r7, #4]
 8012dbc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8012dbe:	2312      	movs	r3, #18
 8012dc0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8012dc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012dc6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8012dc8:	2342      	movs	r3, #66	; 0x42
 8012dca:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8012dcc:	2306      	movs	r3, #6
 8012dce:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8012dd0:	2307      	movs	r3, #7
 8012dd2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8012de0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8012de8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8012dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012dee:	fb02 f303 	mul.w	r3, r2, r3
 8012df2:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8012df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012df6:	3380      	adds	r3, #128	; 0x80
 8012df8:	0a1b      	lsrs	r3, r3, #8
 8012dfa:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8012dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012e00:	fb02 f303 	mul.w	r3, r2, r3
 8012e04:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8012e06:	2300      	movs	r3, #0
 8012e08:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d01a      	beq.n	8012e46 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	029b      	lsls	r3, r3, #10
 8012e14:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8012e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e1c:	4413      	add	r3, r2
 8012e1e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8012e20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e28:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8012e2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012e2c:	4613      	mov	r3, r2
 8012e2e:	005b      	lsls	r3, r3, #1
 8012e30:	4413      	add	r3, r2
 8012e32:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8012e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012e36:	fb03 f303 	mul.w	r3, r3, r3
 8012e3a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8012e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012e3e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012e42:	0c1b      	lsrs	r3, r3, #16
 8012e44:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012e4a:	fb02 f303 	mul.w	r3, r2, r3
 8012e4e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8012e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012e56:	0c1b      	lsrs	r3, r3, #16
 8012e58:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8012e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e5c:	fb03 f303 	mul.w	r3, r3, r3
 8012e60:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8012e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012e64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012e68:	0c1b      	lsrs	r3, r3, #16
 8012e6a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8012e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e6e:	085a      	lsrs	r2, r3, #1
 8012e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e72:	441a      	add	r2, r3
 8012e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e7a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8012e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012e80:	fb02 f303 	mul.w	r3, r2, r3
 8012e84:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8012e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e8c:	d302      	bcc.n	8012e94 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8012e8e:	4b54      	ldr	r3, [pc, #336]	; (8012fe0 <VL53L0X_calc_dmax+0x230>)
 8012e90:	663b      	str	r3, [r7, #96]	; 0x60
 8012e92:	e015      	b.n	8012ec0 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8012e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e96:	085a      	lsrs	r2, r3, #1
 8012e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012e9a:	441a      	add	r2, r3
 8012e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ea2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8012ea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ea6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012ea8:	fb02 f303 	mul.w	r3, r2, r3
 8012eac:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8012eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012eb0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012eb4:	0c1b      	lsrs	r3, r3, #16
 8012eb6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8012eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012eba:	fb03 f303 	mul.w	r3, r3, r3
 8012ebe:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8012ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ec2:	039b      	lsls	r3, r3, #14
 8012ec4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8012ec8:	4a46      	ldr	r2, [pc, #280]	; (8012fe4 <VL53L0X_calc_dmax+0x234>)
 8012eca:	fba2 2303 	umull	r2, r3, r2, r3
 8012ece:	099b      	lsrs	r3, r3, #6
 8012ed0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8012ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed4:	fb03 f303 	mul.w	r3, r3, r3
 8012ed8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8012eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012edc:	fb03 f303 	mul.w	r3, r3, r3
 8012ee0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8012ee2:	6a3b      	ldr	r3, [r7, #32]
 8012ee4:	3308      	adds	r3, #8
 8012ee6:	091b      	lsrs	r3, r3, #4
 8012ee8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8012eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012eec:	6a3b      	ldr	r3, [r7, #32]
 8012eee:	1ad3      	subs	r3, r2, r3
 8012ef0:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8012ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ef4:	4613      	mov	r3, r2
 8012ef6:	005b      	lsls	r3, r3, #1
 8012ef8:	4413      	add	r3, r2
 8012efa:	011b      	lsls	r3, r3, #4
 8012efc:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8012efe:	69fb      	ldr	r3, [r7, #28]
 8012f00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8012f04:	0b9b      	lsrs	r3, r3, #14
 8012f06:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8012f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f0c:	4413      	add	r3, r2
 8012f0e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8012f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012f12:	085b      	lsrs	r3, r3, #1
 8012f14:	69ba      	ldr	r2, [r7, #24]
 8012f16:	4413      	add	r3, r2
 8012f18:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8012f1a:	69ba      	ldr	r2, [r7, #24]
 8012f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f22:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8012f24:	69bb      	ldr	r3, [r7, #24]
 8012f26:	039b      	lsls	r3, r3, #14
 8012f28:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8012f2a:	69fb      	ldr	r3, [r7, #28]
 8012f2c:	085b      	lsrs	r3, r3, #1
 8012f2e:	69ba      	ldr	r2, [r7, #24]
 8012f30:	4413      	add	r3, r2
 8012f32:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8012f34:	69ba      	ldr	r2, [r7, #24]
 8012f36:	69fb      	ldr	r3, [r7, #28]
 8012f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f3c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8012f3e:	69bb      	ldr	r3, [r7, #24]
 8012f40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012f42:	fb02 f303 	mul.w	r3, r2, r3
 8012f46:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8012f48:	69bb      	ldr	r3, [r7, #24]
 8012f4a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8012f4e:	4a25      	ldr	r2, [pc, #148]	; (8012fe4 <VL53L0X_calc_dmax+0x234>)
 8012f50:	fba2 2303 	umull	r2, r3, r2, r3
 8012f54:	099b      	lsrs	r3, r3, #6
 8012f56:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8012f58:	69bb      	ldr	r3, [r7, #24]
 8012f5a:	011b      	lsls	r3, r3, #4
 8012f5c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8012f5e:	69bb      	ldr	r3, [r7, #24]
 8012f60:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8012f64:	4a1f      	ldr	r2, [pc, #124]	; (8012fe4 <VL53L0X_calc_dmax+0x234>)
 8012f66:	fba2 2303 	umull	r2, r3, r2, r3
 8012f6a:	099b      	lsrs	r3, r3, #6
 8012f6c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8012f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f70:	3380      	adds	r3, #128	; 0x80
 8012f72:	0a1b      	lsrs	r3, r3, #8
 8012f74:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8012f76:	697b      	ldr	r3, [r7, #20]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d008      	beq.n	8012f8e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8012f7c:	697b      	ldr	r3, [r7, #20]
 8012f7e:	085a      	lsrs	r2, r3, #1
 8012f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f82:	441a      	add	r2, r3
 8012f84:	697b      	ldr	r3, [r7, #20]
 8012f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8012f8c:	e001      	b.n	8012f92 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8012f8e:	2300      	movs	r3, #0
 8012f90:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8012f92:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8012f94:	f7fe fc41 	bl	801181a <VL53L0X_isqrt>
 8012f98:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8012f9a:	69bb      	ldr	r3, [r7, #24]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d008      	beq.n	8012fb2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8012fa0:	69bb      	ldr	r3, [r7, #24]
 8012fa2:	085a      	lsrs	r2, r3, #1
 8012fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fa6:	441a      	add	r2, r3
 8012fa8:	69bb      	ldr	r3, [r7, #24]
 8012faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8012fae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012fb0:	e001      	b.n	8012fb6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8012fb6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8012fb8:	f7fe fc2f 	bl	801181a <VL53L0X_isqrt>
 8012fbc:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8012fbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012fc0:	693a      	ldr	r2, [r7, #16]
 8012fc2:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8012fc4:	693a      	ldr	r2, [r7, #16]
 8012fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	d902      	bls.n	8012fd2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8012fcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012fce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012fd0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8012fd2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	3768      	adds	r7, #104	; 0x68
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bd80      	pop	{r7, pc}
 8012fde:	bf00      	nop
 8012fe0:	fff00000 	.word	0xfff00000
 8012fe4:	10624dd3 	.word	0x10624dd3

08012fe8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b0b4      	sub	sp, #208	; 0xd0
 8012fec:	af04      	add	r7, sp, #16
 8012fee:	60f8      	str	r0, [r7, #12]
 8012ff0:	60b9      	str	r1, [r7, #8]
 8012ff2:	607a      	str	r2, [r7, #4]
 8012ff4:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8012ff6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8012ffa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8012ffe:	f44f 7316 	mov.w	r3, #600	; 0x258
 8013002:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8013006:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 801300a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 801300e:	f241 235c 	movw	r3, #4700	; 0x125c
 8013012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8013016:	4b9e      	ldr	r3, [pc, #632]	; (8013290 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8013018:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 801301c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8013020:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8013022:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8013026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801302a:	fbb2 f3f3 	udiv	r3, r2, r3
 801302e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8013030:	4b98      	ldr	r3, [pc, #608]	; (8013294 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8013032:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8013034:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013038:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 801303a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 801303e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8013040:	f240 6377 	movw	r3, #1655	; 0x677
 8013044:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8013046:	2300      	movs	r3, #0
 8013048:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	6a1b      	ldr	r3, [r3, #32]
 8013050:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8013052:	68bb      	ldr	r3, [r7, #8]
 8013054:	691b      	ldr	r3, [r3, #16]
 8013056:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801305a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 801305e:	0c1b      	lsrs	r3, r3, #16
 8013060:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	68db      	ldr	r3, [r3, #12]
 8013066:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8013068:	f107 0310 	add.w	r3, r7, #16
 801306c:	461a      	mov	r2, r3
 801306e:	68b9      	ldr	r1, [r7, #8]
 8013070:	68f8      	ldr	r0, [r7, #12]
 8013072:	f7ff fe78 	bl	8012d66 <VL53L0X_get_total_signal_rate>
 8013076:	4603      	mov	r3, r0
 8013078:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 801307c:	f107 0314 	add.w	r3, r7, #20
 8013080:	461a      	mov	r2, r3
 8013082:	68b9      	ldr	r1, [r7, #8]
 8013084:	68f8      	ldr	r0, [r7, #12]
 8013086:	f7ff fe3f 	bl	8012d08 <VL53L0X_get_total_xtalk_rate>
 801308a:	4603      	mov	r3, r0
 801308c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8013090:	693b      	ldr	r3, [r7, #16]
 8013092:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013096:	fb02 f303 	mul.w	r3, r2, r3
 801309a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 801309c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801309e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80130a2:	0c1b      	lsrs	r3, r3, #16
 80130a4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80130a6:	697b      	ldr	r3, [r7, #20]
 80130a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80130ac:	fb02 f303 	mul.w	r3, r2, r3
 80130b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80130b4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80130b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80130ba:	429a      	cmp	r2, r3
 80130bc:	d902      	bls.n	80130c4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80130be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80130c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 80130c4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d168      	bne.n	801319e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80130d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80130dc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80130e0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80130e4:	461a      	mov	r2, r3
 80130e6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80130ea:	68f8      	ldr	r0, [r7, #12]
 80130ec:	f7ff f93a 	bl	8012364 <VL53L0X_calc_timeout_mclks>
 80130f0:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80130f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8013102:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8013106:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801310a:	461a      	mov	r2, r3
 801310c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8013110:	68f8      	ldr	r0, [r7, #12]
 8013112:	f7ff f927 	bl	8012364 <VL53L0X_calc_timeout_mclks>
 8013116:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8013118:	2303      	movs	r3, #3
 801311a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 801311e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8013122:	2b08      	cmp	r3, #8
 8013124:	d102      	bne.n	801312c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8013126:	2302      	movs	r3, #2
 8013128:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 801312c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801312e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013130:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8013132:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013136:	fb02 f303 	mul.w	r3, r2, r3
 801313a:	02db      	lsls	r3, r3, #11
 801313c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8013140:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013144:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8013148:	4a53      	ldr	r2, [pc, #332]	; (8013298 <VL53L0X_calc_sigma_estimate+0x2b0>)
 801314a:	fba2 2303 	umull	r2, r3, r2, r3
 801314e:	099b      	lsrs	r3, r3, #6
 8013150:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8013154:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013158:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801315a:	fb02 f303 	mul.w	r3, r2, r3
 801315e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8013162:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013166:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801316a:	4a4b      	ldr	r2, [pc, #300]	; (8013298 <VL53L0X_calc_sigma_estimate+0x2b0>)
 801316c:	fba2 2303 	umull	r2, r3, r2, r3
 8013170:	099b      	lsrs	r3, r3, #6
 8013172:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	3380      	adds	r3, #128	; 0x80
 801317a:	0a1b      	lsrs	r3, r3, #8
 801317c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 801317e:	693a      	ldr	r2, [r7, #16]
 8013180:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013184:	fb02 f303 	mul.w	r3, r2, r3
 8013188:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 801318c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013190:	3380      	adds	r3, #128	; 0x80
 8013192:	0a1b      	lsrs	r3, r3, #8
 8013194:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8013198:	693b      	ldr	r3, [r7, #16]
 801319a:	021b      	lsls	r3, r3, #8
 801319c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 801319e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d002      	beq.n	80131ac <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 80131a6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80131aa:	e15e      	b.n	801346a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 80131ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d10c      	bne.n	80131cc <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80131b8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80131c0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	2200      	movs	r2, #0
 80131c8:	601a      	str	r2, [r3, #0]
 80131ca:	e14c      	b.n	8013466 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 80131cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d102      	bne.n	80131da <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 80131d4:	2301      	movs	r3, #1
 80131d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 80131da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80131de:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80131e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80131e2:	041a      	lsls	r2, r3, #16
 80131e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80131e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80131ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80131ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80131f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80131f4:	429a      	cmp	r2, r3
 80131f6:	d902      	bls.n	80131fe <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80131f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80131fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80131fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013202:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013206:	fb02 f303 	mul.w	r3, r2, r3
 801320a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 801320e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8013212:	4613      	mov	r3, r2
 8013214:	005b      	lsls	r3, r3, #1
 8013216:	4413      	add	r3, r2
 8013218:	009b      	lsls	r3, r3, #2
 801321a:	4618      	mov	r0, r3
 801321c:	f7fe fafd 	bl	801181a <VL53L0X_isqrt>
 8013220:	4603      	mov	r3, r0
 8013222:	005b      	lsls	r3, r3, #1
 8013224:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	891b      	ldrh	r3, [r3, #8]
 801322a:	461a      	mov	r2, r3
 801322c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801322e:	fb02 f303 	mul.w	r3, r2, r3
 8013232:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8013234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013236:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8013238:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801323c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 801323e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8013240:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8013244:	4a14      	ldr	r2, [pc, #80]	; (8013298 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8013246:	fba2 2303 	umull	r2, r3, r2, r3
 801324a:	099b      	lsrs	r3, r3, #6
 801324c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 801324e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013250:	041b      	lsls	r3, r3, #16
 8013252:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8013256:	4a10      	ldr	r2, [pc, #64]	; (8013298 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8013258:	fba2 2303 	umull	r2, r3, r2, r3
 801325c:	099b      	lsrs	r3, r3, #6
 801325e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8013260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013262:	021b      	lsls	r3, r3, #8
 8013264:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8013266:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801326a:	fbb2 f3f3 	udiv	r3, r2, r3
 801326e:	2b00      	cmp	r3, #0
 8013270:	bfb8      	it	lt
 8013272:	425b      	neglt	r3, r3
 8013274:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8013276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013278:	021b      	lsls	r3, r3, #8
 801327a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 801327c:	68bb      	ldr	r3, [r7, #8]
 801327e:	7e1b      	ldrb	r3, [r3, #24]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d00b      	beq.n	801329c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8013284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013288:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801328c:	e033      	b.n	80132f6 <VL53L0X_calc_sigma_estimate+0x30e>
 801328e:	bf00      	nop
 8013290:	028f87ae 	.word	0x028f87ae
 8013294:	0006999a 	.word	0x0006999a
 8013298:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 801329c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801329e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80132a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80132a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80132aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132ac:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 80132b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80132b4:	fb02 f303 	mul.w	r3, r2, r3
 80132b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 80132bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80132c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80132c2:	4413      	add	r3, r2
 80132c4:	0c1b      	lsrs	r3, r3, #16
 80132c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 80132ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80132ce:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80132d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 80132d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80132da:	085b      	lsrs	r3, r3, #1
 80132dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 80132e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80132e4:	fb03 f303 	mul.w	r3, r3, r3
 80132e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 80132ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80132f0:	0b9b      	lsrs	r3, r3, #14
 80132f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 80132f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80132fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80132fc:	fb02 f303 	mul.w	r3, r2, r3
 8013300:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8013302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013304:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8013308:	0c1b      	lsrs	r3, r3, #16
 801330a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 801330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801330e:	fb03 f303 	mul.w	r3, r3, r3
 8013312:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8013314:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013318:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 801331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801331c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8013320:	0c1b      	lsrs	r3, r3, #16
 8013322:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8013324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013326:	fb03 f303 	mul.w	r3, r3, r3
 801332a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 801332c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013330:	4413      	add	r3, r2
 8013332:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8013334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013336:	f7fe fa70 	bl	801181a <VL53L0X_isqrt>
 801333a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 801333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801333e:	041b      	lsls	r3, r3, #16
 8013340:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8013342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013344:	3332      	adds	r3, #50	; 0x32
 8013346:	4a4b      	ldr	r2, [pc, #300]	; (8013474 <VL53L0X_calc_sigma_estimate+0x48c>)
 8013348:	fba2 2303 	umull	r2, r3, r2, r3
 801334c:	095a      	lsrs	r2, r3, #5
 801334e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013350:	fbb2 f3f3 	udiv	r3, r2, r3
 8013354:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8013358:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801335c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8013360:	fb02 f303 	mul.w	r3, r2, r3
 8013364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8013368:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801336c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8013370:	3308      	adds	r3, #8
 8013372:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8013376:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801337a:	4a3f      	ldr	r2, [pc, #252]	; (8013478 <VL53L0X_calc_sigma_estimate+0x490>)
 801337c:	fba2 2303 	umull	r2, r3, r2, r3
 8013380:	0b5b      	lsrs	r3, r3, #13
 8013382:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8013386:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801338a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801338c:	429a      	cmp	r2, r3
 801338e:	d902      	bls.n	8013396 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8013390:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013392:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8013396:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801339a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801339e:	4413      	add	r3, r2
 80133a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80133a4:	4a35      	ldr	r2, [pc, #212]	; (801347c <VL53L0X_calc_sigma_estimate+0x494>)
 80133a6:	fba2 2303 	umull	r2, r3, r2, r3
 80133aa:	099b      	lsrs	r3, r3, #6
 80133ac:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80133ae:	6a3b      	ldr	r3, [r7, #32]
 80133b0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80133b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80133b6:	441a      	add	r2, r3
 80133b8:	6a3b      	ldr	r3, [r7, #32]
 80133ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80133be:	4618      	mov	r0, r3
 80133c0:	f7fe fa2b 	bl	801181a <VL53L0X_isqrt>
 80133c4:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 80133c6:	69fb      	ldr	r3, [r7, #28]
 80133c8:	021b      	lsls	r3, r3, #8
 80133ca:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 80133cc:	69fb      	ldr	r3, [r7, #28]
 80133ce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80133d2:	4a2a      	ldr	r2, [pc, #168]	; (801347c <VL53L0X_calc_sigma_estimate+0x494>)
 80133d4:	fba2 2303 	umull	r2, r3, r2, r3
 80133d8:	099b      	lsrs	r3, r3, #6
 80133da:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 80133dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80133e0:	fb03 f303 	mul.w	r3, r3, r3
 80133e4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 80133e6:	69fb      	ldr	r3, [r7, #28]
 80133e8:	fb03 f303 	mul.w	r3, r3, r3
 80133ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80133ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133f2:	4413      	add	r3, r2
 80133f4:	4618      	mov	r0, r3
 80133f6:	f7fe fa10 	bl	801181a <VL53L0X_isqrt>
 80133fa:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80133fc:	69bb      	ldr	r3, [r7, #24]
 80133fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013402:	fb02 f303 	mul.w	r3, r2, r3
 8013406:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 801340a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801340c:	2b00      	cmp	r3, #0
 801340e:	d009      	beq.n	8013424 <VL53L0X_calc_sigma_estimate+0x43c>
 8013410:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013414:	2b00      	cmp	r3, #0
 8013416:	d005      	beq.n	8013424 <VL53L0X_calc_sigma_estimate+0x43c>
 8013418:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801341c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013420:	429a      	cmp	r2, r3
 8013422:	d903      	bls.n	801342c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8013424:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013428:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013432:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681a      	ldr	r2, [r3, #0]
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 801343e:	6939      	ldr	r1, [r7, #16]
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	9303      	str	r3, [sp, #12]
 8013444:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013448:	9302      	str	r3, [sp, #8]
 801344a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801344e:	9301      	str	r3, [sp, #4]
 8013450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013452:	9300      	str	r3, [sp, #0]
 8013454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013458:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801345a:	68f8      	ldr	r0, [r7, #12]
 801345c:	f7ff fca8 	bl	8012db0 <VL53L0X_calc_dmax>
 8013460:	4603      	mov	r3, r0
 8013462:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8013466:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 801346a:	4618      	mov	r0, r3
 801346c:	37c0      	adds	r7, #192	; 0xc0
 801346e:	46bd      	mov	sp, r7
 8013470:	bd80      	pop	{r7, pc}
 8013472:	bf00      	nop
 8013474:	51eb851f 	.word	0x51eb851f
 8013478:	d1b71759 	.word	0xd1b71759
 801347c:	10624dd3 	.word	0x10624dd3

08013480 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b090      	sub	sp, #64	; 0x40
 8013484:	af00      	add	r7, sp, #0
 8013486:	60f8      	str	r0, [r7, #12]
 8013488:	607a      	str	r2, [r7, #4]
 801348a:	461a      	mov	r2, r3
 801348c:	460b      	mov	r3, r1
 801348e:	72fb      	strb	r3, [r7, #11]
 8013490:	4613      	mov	r3, r2
 8013492:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8013494:	2300      	movs	r3, #0
 8013496:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 801349a:	2300      	movs	r3, #0
 801349c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 80134a0:	2300      	movs	r3, #0
 80134a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80134a6:	2300      	movs	r3, #0
 80134a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80134ac:	2300      	movs	r3, #0
 80134ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80134b2:	2300      	movs	r3, #0
 80134b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80134b8:	2300      	movs	r3, #0
 80134ba:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80134be:	2300      	movs	r3, #0
 80134c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 80134c4:	2300      	movs	r3, #0
 80134c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 80134ca:	2300      	movs	r3, #0
 80134cc:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 80134ce:	2300      	movs	r3, #0
 80134d0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 80134d2:	7afb      	ldrb	r3, [r7, #11]
 80134d4:	10db      	asrs	r3, r3, #3
 80134d6:	b2db      	uxtb	r3, r3
 80134d8:	f003 030f 	and.w	r3, r3, #15
 80134dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 80134e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d017      	beq.n	8013518 <VL53L0X_get_pal_range_status+0x98>
 80134e8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80134ec:	2b05      	cmp	r3, #5
 80134ee:	d013      	beq.n	8013518 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 80134f0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80134f4:	2b07      	cmp	r3, #7
 80134f6:	d00f      	beq.n	8013518 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 80134f8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80134fc:	2b0c      	cmp	r3, #12
 80134fe:	d00b      	beq.n	8013518 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8013500:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013504:	2b0d      	cmp	r3, #13
 8013506:	d007      	beq.n	8013518 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8013508:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801350c:	2b0e      	cmp	r3, #14
 801350e:	d003      	beq.n	8013518 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8013510:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013514:	2b0f      	cmp	r3, #15
 8013516:	d103      	bne.n	8013520 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8013518:	2301      	movs	r3, #1
 801351a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 801351e:	e002      	b.n	8013526 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8013520:	2300      	movs	r3, #0
 8013522:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8013526:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801352a:	2b00      	cmp	r3, #0
 801352c:	d109      	bne.n	8013542 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 801352e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013532:	461a      	mov	r2, r3
 8013534:	2100      	movs	r1, #0
 8013536:	68f8      	ldr	r0, [r7, #12]
 8013538:	f7fc fc86 	bl	800fe48 <VL53L0X_GetLimitCheckEnable>
 801353c:	4603      	mov	r3, r0
 801353e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8013542:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013546:	2b00      	cmp	r3, #0
 8013548:	d02e      	beq.n	80135a8 <VL53L0X_get_pal_range_status+0x128>
 801354a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801354e:	2b00      	cmp	r3, #0
 8013550:	d12a      	bne.n	80135a8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8013552:	f107 0310 	add.w	r3, r7, #16
 8013556:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801355a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801355c:	68f8      	ldr	r0, [r7, #12]
 801355e:	f7ff fd43 	bl	8012fe8 <VL53L0X_calc_sigma_estimate>
 8013562:	4603      	mov	r3, r0
 8013564:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8013568:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801356c:	2b00      	cmp	r3, #0
 801356e:	d103      	bne.n	8013578 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8013570:	693b      	ldr	r3, [r7, #16]
 8013572:	b29a      	uxth	r2, r3
 8013574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013576:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8013578:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801357c:	2b00      	cmp	r3, #0
 801357e:	d113      	bne.n	80135a8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8013580:	f107 0320 	add.w	r3, r7, #32
 8013584:	461a      	mov	r2, r3
 8013586:	2100      	movs	r1, #0
 8013588:	68f8      	ldr	r0, [r7, #12]
 801358a:	f7fc fce3 	bl	800ff54 <VL53L0X_GetLimitCheckValue>
 801358e:	4603      	mov	r3, r0
 8013590:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8013594:	6a3b      	ldr	r3, [r7, #32]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d006      	beq.n	80135a8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 801359a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801359c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 801359e:	429a      	cmp	r2, r3
 80135a0:	d902      	bls.n	80135a8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80135a2:	2301      	movs	r3, #1
 80135a4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80135a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d109      	bne.n	80135c4 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80135b0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 80135b4:	461a      	mov	r2, r3
 80135b6:	2102      	movs	r1, #2
 80135b8:	68f8      	ldr	r0, [r7, #12]
 80135ba:	f7fc fc45 	bl	800fe48 <VL53L0X_GetLimitCheckEnable>
 80135be:	4603      	mov	r3, r0
 80135c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80135c4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d044      	beq.n	8013656 <VL53L0X_get_pal_range_status+0x1d6>
 80135cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d140      	bne.n	8013656 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80135d4:	f107 031c 	add.w	r3, r7, #28
 80135d8:	461a      	mov	r2, r3
 80135da:	2102      	movs	r1, #2
 80135dc:	68f8      	ldr	r0, [r7, #12]
 80135de:	f7fc fcb9 	bl	800ff54 <VL53L0X_GetLimitCheckValue>
 80135e2:	4603      	mov	r3, r0
 80135e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 80135e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d107      	bne.n	8013600 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80135f0:	2201      	movs	r2, #1
 80135f2:	21ff      	movs	r1, #255	; 0xff
 80135f4:	68f8      	ldr	r0, [r7, #12]
 80135f6:	f000 f9bb 	bl	8013970 <VL53L0X_WrByte>
 80135fa:	4603      	mov	r3, r0
 80135fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8013600:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013604:	2b00      	cmp	r3, #0
 8013606:	d109      	bne.n	801361c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8013608:	f107 0316 	add.w	r3, r7, #22
 801360c:	461a      	mov	r2, r3
 801360e:	21b6      	movs	r1, #182	; 0xb6
 8013610:	68f8      	ldr	r0, [r7, #12]
 8013612:	f000 fa59 	bl	8013ac8 <VL53L0X_RdWord>
 8013616:	4603      	mov	r3, r0
 8013618:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 801361c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013620:	2b00      	cmp	r3, #0
 8013622:	d107      	bne.n	8013634 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8013624:	2200      	movs	r2, #0
 8013626:	21ff      	movs	r1, #255	; 0xff
 8013628:	68f8      	ldr	r0, [r7, #12]
 801362a:	f000 f9a1 	bl	8013970 <VL53L0X_WrByte>
 801362e:	4603      	mov	r3, r0
 8013630:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8013634:	8afb      	ldrh	r3, [r7, #22]
 8013636:	025b      	lsls	r3, r3, #9
 8013638:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801363e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8013642:	69fb      	ldr	r3, [r7, #28]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d006      	beq.n	8013656 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8013648:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 801364a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801364c:	429a      	cmp	r2, r3
 801364e:	d902      	bls.n	8013656 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8013650:	2301      	movs	r3, #1
 8013652:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8013656:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801365a:	2b00      	cmp	r3, #0
 801365c:	d109      	bne.n	8013672 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 801365e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013662:	461a      	mov	r2, r3
 8013664:	2103      	movs	r1, #3
 8013666:	68f8      	ldr	r0, [r7, #12]
 8013668:	f7fc fbee 	bl	800fe48 <VL53L0X_GetLimitCheckEnable>
 801366c:	4603      	mov	r3, r0
 801366e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8013672:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013676:	2b00      	cmp	r3, #0
 8013678:	d023      	beq.n	80136c2 <VL53L0X_get_pal_range_status+0x242>
 801367a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801367e:	2b00      	cmp	r3, #0
 8013680:	d11f      	bne.n	80136c2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8013682:	893b      	ldrh	r3, [r7, #8]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d102      	bne.n	801368e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8013688:	2300      	movs	r3, #0
 801368a:	637b      	str	r3, [r7, #52]	; 0x34
 801368c:	e005      	b.n	801369a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	021a      	lsls	r2, r3, #8
 8013692:	893b      	ldrh	r3, [r7, #8]
 8013694:	fbb2 f3f3 	udiv	r3, r2, r3
 8013698:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 801369a:	f107 0318 	add.w	r3, r7, #24
 801369e:	461a      	mov	r2, r3
 80136a0:	2103      	movs	r1, #3
 80136a2:	68f8      	ldr	r0, [r7, #12]
 80136a4:	f7fc fc56 	bl	800ff54 <VL53L0X_GetLimitCheckValue>
 80136a8:	4603      	mov	r3, r0
 80136aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80136ae:	69bb      	ldr	r3, [r7, #24]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d006      	beq.n	80136c2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 80136b4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 80136b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80136b8:	429a      	cmp	r2, r3
 80136ba:	d202      	bcs.n	80136c2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 80136bc:	2301      	movs	r3, #1
 80136be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80136c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d14a      	bne.n	8013760 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 80136ca:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80136ce:	2b01      	cmp	r3, #1
 80136d0:	d103      	bne.n	80136da <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 80136d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136d4:	22ff      	movs	r2, #255	; 0xff
 80136d6:	701a      	strb	r2, [r3, #0]
 80136d8:	e042      	b.n	8013760 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 80136da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80136de:	2b01      	cmp	r3, #1
 80136e0:	d007      	beq.n	80136f2 <VL53L0X_get_pal_range_status+0x272>
 80136e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80136e6:	2b02      	cmp	r3, #2
 80136e8:	d003      	beq.n	80136f2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 80136ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80136ee:	2b03      	cmp	r3, #3
 80136f0:	d103      	bne.n	80136fa <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 80136f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136f4:	2205      	movs	r2, #5
 80136f6:	701a      	strb	r2, [r3, #0]
 80136f8:	e032      	b.n	8013760 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 80136fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80136fe:	2b06      	cmp	r3, #6
 8013700:	d003      	beq.n	801370a <VL53L0X_get_pal_range_status+0x28a>
 8013702:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013706:	2b09      	cmp	r3, #9
 8013708:	d103      	bne.n	8013712 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 801370a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801370c:	2204      	movs	r2, #4
 801370e:	701a      	strb	r2, [r3, #0]
 8013710:	e026      	b.n	8013760 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8013712:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013716:	2b08      	cmp	r3, #8
 8013718:	d007      	beq.n	801372a <VL53L0X_get_pal_range_status+0x2aa>
 801371a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801371e:	2b0a      	cmp	r3, #10
 8013720:	d003      	beq.n	801372a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8013722:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8013726:	2b01      	cmp	r3, #1
 8013728:	d103      	bne.n	8013732 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 801372a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801372c:	2203      	movs	r2, #3
 801372e:	701a      	strb	r2, [r3, #0]
 8013730:	e016      	b.n	8013760 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8013732:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013736:	2b04      	cmp	r3, #4
 8013738:	d003      	beq.n	8013742 <VL53L0X_get_pal_range_status+0x2c2>
 801373a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801373e:	2b01      	cmp	r3, #1
 8013740:	d103      	bne.n	801374a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8013742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013744:	2202      	movs	r2, #2
 8013746:	701a      	strb	r2, [r3, #0]
 8013748:	e00a      	b.n	8013760 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 801374a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801374e:	2b01      	cmp	r3, #1
 8013750:	d103      	bne.n	801375a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8013752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013754:	2201      	movs	r2, #1
 8013756:	701a      	strb	r2, [r3, #0]
 8013758:	e002      	b.n	8013760 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 801375a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801375c:	2200      	movs	r2, #0
 801375e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8013760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013762:	781b      	ldrb	r3, [r3, #0]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d102      	bne.n	801376e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8013768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801376a:	2200      	movs	r2, #0
 801376c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 801376e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8013772:	461a      	mov	r2, r3
 8013774:	2101      	movs	r1, #1
 8013776:	68f8      	ldr	r0, [r7, #12]
 8013778:	f7fc fb66 	bl	800fe48 <VL53L0X_GetLimitCheckEnable>
 801377c:	4603      	mov	r3, r0
 801377e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8013782:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013786:	2b00      	cmp	r3, #0
 8013788:	d14f      	bne.n	801382a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 801378a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801378e:	2b00      	cmp	r3, #0
 8013790:	d003      	beq.n	801379a <VL53L0X_get_pal_range_status+0x31a>
 8013792:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013796:	2b01      	cmp	r3, #1
 8013798:	d103      	bne.n	80137a2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 801379a:	2301      	movs	r3, #1
 801379c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80137a0:	e002      	b.n	80137a8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80137a2:	2300      	movs	r3, #0
 80137a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80137ae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80137b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80137b6:	2b04      	cmp	r3, #4
 80137b8:	d003      	beq.n	80137c2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80137ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d103      	bne.n	80137ca <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 80137c2:	2301      	movs	r3, #1
 80137c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80137c8:	e002      	b.n	80137d0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 80137ca:	2300      	movs	r3, #0
 80137cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80137d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 80137da:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d003      	beq.n	80137ea <VL53L0X_get_pal_range_status+0x36a>
 80137e2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80137e6:	2b01      	cmp	r3, #1
 80137e8:	d103      	bne.n	80137f2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 80137ea:	2301      	movs	r3, #1
 80137ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80137f0:	e002      	b.n	80137f8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 80137f2:	2300      	movs	r3, #0
 80137f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80137fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8013802:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013806:	2b00      	cmp	r3, #0
 8013808:	d003      	beq.n	8013812 <VL53L0X_get_pal_range_status+0x392>
 801380a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801380e:	2b01      	cmp	r3, #1
 8013810:	d103      	bne.n	801381a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8013812:	2301      	movs	r3, #1
 8013814:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013818:	e002      	b.n	8013820 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 801381a:	2300      	movs	r3, #0
 801381c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8013826:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 801382a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 801382e:	4618      	mov	r0, r3
 8013830:	3740      	adds	r7, #64	; 0x40
 8013832:	46bd      	mov	sp, r7
 8013834:	bd80      	pop	{r7, pc}

08013836 <_I2CWrite>:
#define  VL53L0X_OsDelay(...) (void)0
#endif

uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8013836:	b580      	push	{r7, lr}
 8013838:	b088      	sub	sp, #32
 801383a:	af02      	add	r7, sp, #8
 801383c:	60f8      	str	r0, [r7, #12]
 801383e:	60b9      	str	r1, [r7, #8]
 8013840:	607a      	str	r2, [r7, #4]
	int status;
	int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	330a      	adds	r3, #10
 8013846:	617b      	str	r3, [r7, #20]

	status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8013854:	b299      	uxth	r1, r3
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	b29a      	uxth	r2, r3
 801385a:	697b      	ldr	r3, [r7, #20]
 801385c:	9300      	str	r3, [sp, #0]
 801385e:	4613      	mov	r3, r2
 8013860:	68ba      	ldr	r2, [r7, #8]
 8013862:	f7f5 ff77 	bl	8009754 <HAL_I2C_Master_Transmit>
 8013866:	4603      	mov	r3, r0
 8013868:	613b      	str	r3, [r7, #16]
	if (status) {
		//VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
		//XNUCLEO6180XA1_I2C1_Init(&hi2c1);
	}
	return status;
 801386a:	693b      	ldr	r3, [r7, #16]
}
 801386c:	4618      	mov	r0, r3
 801386e:	3718      	adds	r7, #24
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}

08013874 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8013874:	b580      	push	{r7, lr}
 8013876:	b088      	sub	sp, #32
 8013878:	af02      	add	r7, sp, #8
 801387a:	60f8      	str	r0, [r7, #12]
 801387c:	60b9      	str	r1, [r7, #8]
 801387e:	607a      	str	r2, [r7, #4]
	int status;
	int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	330a      	adds	r3, #10
 8013884:	617b      	str	r3, [r7, #20]

	status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr | 1, pdata, count, i2c_time_out);
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8013892:	f043 0301 	orr.w	r3, r3, #1
 8013896:	b2db      	uxtb	r3, r3
 8013898:	b299      	uxth	r1, r3
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	b29a      	uxth	r2, r3
 801389e:	697b      	ldr	r3, [r7, #20]
 80138a0:	9300      	str	r3, [sp, #0]
 80138a2:	4613      	mov	r3, r2
 80138a4:	68ba      	ldr	r2, [r7, #8]
 80138a6:	f7f6 f853 	bl	8009950 <HAL_I2C_Master_Receive>
 80138aa:	4603      	mov	r3, r0
 80138ac:	613b      	str	r3, [r7, #16]
	if (status) {
		//VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
		//XNUCLEO6180XA1_I2C1_Init(&hi2c1);
	}
	return status;
 80138ae:	693b      	ldr	r3, [r7, #16]
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3718      	adds	r7, #24
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}

080138b8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b086      	sub	sp, #24
 80138bc:	af00      	add	r7, sp, #0
 80138be:	60f8      	str	r0, [r7, #12]
 80138c0:	607a      	str	r2, [r7, #4]
 80138c2:	603b      	str	r3, [r7, #0]
 80138c4:	460b      	mov	r3, r1
 80138c6:	72fb      	strb	r3, [r7, #11]
	int status_int;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80138c8:	2300      	movs	r3, #0
 80138ca:	75fb      	strb	r3, [r7, #23]
	if (count > sizeof(_I2CBuffer) - 1) {
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	2b3f      	cmp	r3, #63	; 0x3f
 80138d0:	d902      	bls.n	80138d8 <VL53L0X_WriteMulti+0x20>
		return VL53L0X_ERROR_INVALID_PARAMS;
 80138d2:	f06f 0303 	mvn.w	r3, #3
 80138d6:	e016      	b.n	8013906 <VL53L0X_WriteMulti+0x4e>
	}
	_I2CBuffer[0] = index;
 80138d8:	4a0d      	ldr	r2, [pc, #52]	; (8013910 <VL53L0X_WriteMulti+0x58>)
 80138da:	7afb      	ldrb	r3, [r7, #11]
 80138dc:	7013      	strb	r3, [r2, #0]
	memcpy(&_I2CBuffer[1], pdata, count);
 80138de:	683a      	ldr	r2, [r7, #0]
 80138e0:	6879      	ldr	r1, [r7, #4]
 80138e2:	480c      	ldr	r0, [pc, #48]	; (8013914 <VL53L0X_WriteMulti+0x5c>)
 80138e4:	f000 f9b8 	bl	8013c58 <memcpy>
	VL53L0X_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80138e8:	683b      	ldr	r3, [r7, #0]
 80138ea:	3301      	adds	r3, #1
 80138ec:	461a      	mov	r2, r3
 80138ee:	4908      	ldr	r1, [pc, #32]	; (8013910 <VL53L0X_WriteMulti+0x58>)
 80138f0:	68f8      	ldr	r0, [r7, #12]
 80138f2:	f7ff ffa0 	bl	8013836 <_I2CWrite>
 80138f6:	6138      	str	r0, [r7, #16]
	if (status_int != 0) {
 80138f8:	693b      	ldr	r3, [r7, #16]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d001      	beq.n	8013902 <VL53L0X_WriteMulti+0x4a>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80138fe:	23ec      	movs	r3, #236	; 0xec
 8013900:	75fb      	strb	r3, [r7, #23]
	}
	VL53L0X_PutI2cBus();
	return Status;
 8013902:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013906:	4618      	mov	r0, r3
 8013908:	3718      	adds	r7, #24
 801390a:	46bd      	mov	sp, r7
 801390c:	bd80      	pop	{r7, pc}
 801390e:	bf00      	nop
 8013910:	20001a88 	.word	0x20001a88
 8013914:	20001a89 	.word	0x20001a89

08013918 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8013918:	b580      	push	{r7, lr}
 801391a:	b086      	sub	sp, #24
 801391c:	af00      	add	r7, sp, #0
 801391e:	60f8      	str	r0, [r7, #12]
 8013920:	607a      	str	r2, [r7, #4]
 8013922:	603b      	str	r3, [r7, #0]
 8013924:	460b      	mov	r3, r1
 8013926:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8013928:	2300      	movs	r3, #0
 801392a:	75fb      	strb	r3, [r7, #23]
	int32_t status_int;
	VL53L0X_GetI2cBus();
	status_int = _I2CWrite(Dev, &index, 1);
 801392c:	f107 030b 	add.w	r3, r7, #11
 8013930:	2201      	movs	r2, #1
 8013932:	4619      	mov	r1, r3
 8013934:	68f8      	ldr	r0, [r7, #12]
 8013936:	f7ff ff7e 	bl	8013836 <_I2CWrite>
 801393a:	6138      	str	r0, [r7, #16]
	if (status_int != 0) {
 801393c:	693b      	ldr	r3, [r7, #16]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d002      	beq.n	8013948 <VL53L0X_ReadMulti+0x30>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8013942:	23ec      	movs	r3, #236	; 0xec
 8013944:	75fb      	strb	r3, [r7, #23]
		goto done;
 8013946:	e00c      	b.n	8013962 <VL53L0X_ReadMulti+0x4a>
	}
	status_int = _I2CRead(Dev, pdata, count);
 8013948:	683a      	ldr	r2, [r7, #0]
 801394a:	6879      	ldr	r1, [r7, #4]
 801394c:	68f8      	ldr	r0, [r7, #12]
 801394e:	f7ff ff91 	bl	8013874 <_I2CRead>
 8013952:	6138      	str	r0, [r7, #16]
	if (status_int != 0) {
 8013954:	693b      	ldr	r3, [r7, #16]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d002      	beq.n	8013960 <VL53L0X_ReadMulti+0x48>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 801395a:	23ec      	movs	r3, #236	; 0xec
 801395c:	75fb      	strb	r3, [r7, #23]
 801395e:	e000      	b.n	8013962 <VL53L0X_ReadMulti+0x4a>
	}
	done:
 8013960:	bf00      	nop
	VL53L0X_PutI2cBus();
	return Status;
 8013962:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013966:	4618      	mov	r0, r3
 8013968:	3718      	adds	r7, #24
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}
	...

08013970 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8013970:	b580      	push	{r7, lr}
 8013972:	b084      	sub	sp, #16
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	460b      	mov	r3, r1
 801397a:	70fb      	strb	r3, [r7, #3]
 801397c:	4613      	mov	r3, r2
 801397e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8013980:	2300      	movs	r3, #0
 8013982:	73fb      	strb	r3, [r7, #15]
	int32_t status_int;

	_I2CBuffer[0] = index;
 8013984:	4a0b      	ldr	r2, [pc, #44]	; (80139b4 <VL53L0X_WrByte+0x44>)
 8013986:	78fb      	ldrb	r3, [r7, #3]
 8013988:	7013      	strb	r3, [r2, #0]
	_I2CBuffer[1] = data;
 801398a:	4a0a      	ldr	r2, [pc, #40]	; (80139b4 <VL53L0X_WrByte+0x44>)
 801398c:	78bb      	ldrb	r3, [r7, #2]
 801398e:	7053      	strb	r3, [r2, #1]

	VL53L0X_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8013990:	2202      	movs	r2, #2
 8013992:	4908      	ldr	r1, [pc, #32]	; (80139b4 <VL53L0X_WrByte+0x44>)
 8013994:	6878      	ldr	r0, [r7, #4]
 8013996:	f7ff ff4e 	bl	8013836 <_I2CWrite>
 801399a:	60b8      	str	r0, [r7, #8]
	if (status_int != 0) {
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d001      	beq.n	80139a6 <VL53L0X_WrByte+0x36>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80139a2:	23ec      	movs	r3, #236	; 0xec
 80139a4:	73fb      	strb	r3, [r7, #15]
	}
	VL53L0X_PutI2cBus();
	return Status;
 80139a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80139aa:	4618      	mov	r0, r3
 80139ac:	3710      	adds	r7, #16
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}
 80139b2:	bf00      	nop
 80139b4:	20001a88 	.word	0x20001a88

080139b8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b084      	sub	sp, #16
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
 80139c0:	460b      	mov	r3, r1
 80139c2:	70fb      	strb	r3, [r7, #3]
 80139c4:	4613      	mov	r3, r2
 80139c6:	803b      	strh	r3, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80139c8:	2300      	movs	r3, #0
 80139ca:	73fb      	strb	r3, [r7, #15]
	int32_t status_int;

	_I2CBuffer[0] = index;
 80139cc:	4a0e      	ldr	r2, [pc, #56]	; (8013a08 <VL53L0X_WrWord+0x50>)
 80139ce:	78fb      	ldrb	r3, [r7, #3]
 80139d0:	7013      	strb	r3, [r2, #0]
	_I2CBuffer[1] = data >> 8;
 80139d2:	883b      	ldrh	r3, [r7, #0]
 80139d4:	0a1b      	lsrs	r3, r3, #8
 80139d6:	b29b      	uxth	r3, r3
 80139d8:	b2da      	uxtb	r2, r3
 80139da:	4b0b      	ldr	r3, [pc, #44]	; (8013a08 <VL53L0X_WrWord+0x50>)
 80139dc:	705a      	strb	r2, [r3, #1]
	_I2CBuffer[2] = data & 0x00FF;
 80139de:	883b      	ldrh	r3, [r7, #0]
 80139e0:	b2da      	uxtb	r2, r3
 80139e2:	4b09      	ldr	r3, [pc, #36]	; (8013a08 <VL53L0X_WrWord+0x50>)
 80139e4:	709a      	strb	r2, [r3, #2]

	VL53L0X_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80139e6:	2203      	movs	r2, #3
 80139e8:	4907      	ldr	r1, [pc, #28]	; (8013a08 <VL53L0X_WrWord+0x50>)
 80139ea:	6878      	ldr	r0, [r7, #4]
 80139ec:	f7ff ff23 	bl	8013836 <_I2CWrite>
 80139f0:	60b8      	str	r0, [r7, #8]
	if (status_int != 0) {
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d001      	beq.n	80139fc <VL53L0X_WrWord+0x44>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80139f8:	23ec      	movs	r3, #236	; 0xec
 80139fa:	73fb      	strb	r3, [r7, #15]
	}
	VL53L0X_PutI2cBus();
	return Status;
 80139fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013a00:	4618      	mov	r0, r3
 8013a02:	3710      	adds	r7, #16
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}
 8013a08:	20001a88 	.word	0x20001a88

08013a0c <VL53L0X_UpdateByte>:
	}
	VL53L0X_PutI2cBus();
	return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b084      	sub	sp, #16
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
 8013a14:	4608      	mov	r0, r1
 8013a16:	4611      	mov	r1, r2
 8013a18:	461a      	mov	r2, r3
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	70fb      	strb	r3, [r7, #3]
 8013a1e:	460b      	mov	r3, r1
 8013a20:	70bb      	strb	r3, [r7, #2]
 8013a22:	4613      	mov	r3, r2
 8013a24:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8013a26:	2300      	movs	r3, #0
 8013a28:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	Status = VL53L0X_RdByte(Dev, index, &data);
 8013a2a:	f107 020e 	add.w	r2, r7, #14
 8013a2e:	78fb      	ldrb	r3, [r7, #3]
 8013a30:	4619      	mov	r1, r3
 8013a32:	6878      	ldr	r0, [r7, #4]
 8013a34:	f000 f81e 	bl	8013a74 <VL53L0X_RdByte>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	73fb      	strb	r3, [r7, #15]
	if (Status) {
 8013a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d110      	bne.n	8013a66 <VL53L0X_UpdateByte+0x5a>
		goto done;
	}
	data = (data & AndData) | OrData;
 8013a44:	7bba      	ldrb	r2, [r7, #14]
 8013a46:	78bb      	ldrb	r3, [r7, #2]
 8013a48:	4013      	ands	r3, r2
 8013a4a:	b2da      	uxtb	r2, r3
 8013a4c:	787b      	ldrb	r3, [r7, #1]
 8013a4e:	4313      	orrs	r3, r2
 8013a50:	b2db      	uxtb	r3, r3
 8013a52:	73bb      	strb	r3, [r7, #14]
	Status = VL53L0X_WrByte(Dev, index, data);
 8013a54:	7bba      	ldrb	r2, [r7, #14]
 8013a56:	78fb      	ldrb	r3, [r7, #3]
 8013a58:	4619      	mov	r1, r3
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	f7ff ff88 	bl	8013970 <VL53L0X_WrByte>
 8013a60:	4603      	mov	r3, r0
 8013a62:	73fb      	strb	r3, [r7, #15]
 8013a64:	e000      	b.n	8013a68 <VL53L0X_UpdateByte+0x5c>
		goto done;
 8013a66:	bf00      	nop
	done: return Status;
 8013a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	3710      	adds	r7, #16
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd80      	pop	{r7, pc}

08013a74 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b086      	sub	sp, #24
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	60f8      	str	r0, [r7, #12]
 8013a7c:	460b      	mov	r3, r1
 8013a7e:	607a      	str	r2, [r7, #4]
 8013a80:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8013a82:	2300      	movs	r3, #0
 8013a84:	75fb      	strb	r3, [r7, #23]
	int32_t status_int;

	VL53L0X_GetI2cBus();
	status_int = _I2CWrite(Dev, &index, 1);
 8013a86:	f107 030b 	add.w	r3, r7, #11
 8013a8a:	2201      	movs	r2, #1
 8013a8c:	4619      	mov	r1, r3
 8013a8e:	68f8      	ldr	r0, [r7, #12]
 8013a90:	f7ff fed1 	bl	8013836 <_I2CWrite>
 8013a94:	6138      	str	r0, [r7, #16]
	if (status_int) {
 8013a96:	693b      	ldr	r3, [r7, #16]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d002      	beq.n	8013aa2 <VL53L0X_RdByte+0x2e>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8013a9c:	23ec      	movs	r3, #236	; 0xec
 8013a9e:	75fb      	strb	r3, [r7, #23]
		goto done;
 8013aa0:	e00c      	b.n	8013abc <VL53L0X_RdByte+0x48>
	}
	status_int = _I2CRead(Dev, data, 1);
 8013aa2:	2201      	movs	r2, #1
 8013aa4:	6879      	ldr	r1, [r7, #4]
 8013aa6:	68f8      	ldr	r0, [r7, #12]
 8013aa8:	f7ff fee4 	bl	8013874 <_I2CRead>
 8013aac:	6138      	str	r0, [r7, #16]
	if (status_int != 0) {
 8013aae:	693b      	ldr	r3, [r7, #16]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d002      	beq.n	8013aba <VL53L0X_RdByte+0x46>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8013ab4:	23ec      	movs	r3, #236	; 0xec
 8013ab6:	75fb      	strb	r3, [r7, #23]
 8013ab8:	e000      	b.n	8013abc <VL53L0X_RdByte+0x48>
	}
	done:
 8013aba:	bf00      	nop
	VL53L0X_PutI2cBus();
	return Status;
 8013abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	3718      	adds	r7, #24
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}

08013ac8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b086      	sub	sp, #24
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	60f8      	str	r0, [r7, #12]
 8013ad0:	460b      	mov	r3, r1
 8013ad2:	607a      	str	r2, [r7, #4]
 8013ad4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	75fb      	strb	r3, [r7, #23]
	int32_t status_int;

	VL53L0X_GetI2cBus();
	status_int = _I2CWrite(Dev, &index, 1);
 8013ada:	f107 030b 	add.w	r3, r7, #11
 8013ade:	2201      	movs	r2, #1
 8013ae0:	4619      	mov	r1, r3
 8013ae2:	68f8      	ldr	r0, [r7, #12]
 8013ae4:	f7ff fea7 	bl	8013836 <_I2CWrite>
 8013ae8:	6138      	str	r0, [r7, #16]

	if (status_int) {
 8013aea:	693b      	ldr	r3, [r7, #16]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d002      	beq.n	8013af6 <VL53L0X_RdWord+0x2e>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8013af0:	23ec      	movs	r3, #236	; 0xec
 8013af2:	75fb      	strb	r3, [r7, #23]
		goto done;
 8013af4:	e017      	b.n	8013b26 <VL53L0X_RdWord+0x5e>
	}
	status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8013af6:	2202      	movs	r2, #2
 8013af8:	490e      	ldr	r1, [pc, #56]	; (8013b34 <VL53L0X_RdWord+0x6c>)
 8013afa:	68f8      	ldr	r0, [r7, #12]
 8013afc:	f7ff feba 	bl	8013874 <_I2CRead>
 8013b00:	6138      	str	r0, [r7, #16]
	if (status_int != 0) {
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d002      	beq.n	8013b0e <VL53L0X_RdWord+0x46>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8013b08:	23ec      	movs	r3, #236	; 0xec
 8013b0a:	75fb      	strb	r3, [r7, #23]
		goto done;
 8013b0c:	e00b      	b.n	8013b26 <VL53L0X_RdWord+0x5e>
	}

	*data = ((uint16_t) _I2CBuffer[0] << 8) + (uint16_t) _I2CBuffer[1];
 8013b0e:	4b09      	ldr	r3, [pc, #36]	; (8013b34 <VL53L0X_RdWord+0x6c>)
 8013b10:	781b      	ldrb	r3, [r3, #0]
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	021b      	lsls	r3, r3, #8
 8013b16:	b29a      	uxth	r2, r3
 8013b18:	4b06      	ldr	r3, [pc, #24]	; (8013b34 <VL53L0X_RdWord+0x6c>)
 8013b1a:	785b      	ldrb	r3, [r3, #1]
 8013b1c:	b29b      	uxth	r3, r3
 8013b1e:	4413      	add	r3, r2
 8013b20:	b29a      	uxth	r2, r3
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	801a      	strh	r2, [r3, #0]
	done:
	VL53L0X_PutI2cBus();
	return Status;
 8013b26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	3718      	adds	r7, #24
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	bd80      	pop	{r7, pc}
 8013b32:	bf00      	nop
 8013b34:	20001a88 	.word	0x20001a88

08013b38 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b086      	sub	sp, #24
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	60f8      	str	r0, [r7, #12]
 8013b40:	460b      	mov	r3, r1
 8013b42:	607a      	str	r2, [r7, #4]
 8013b44:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8013b46:	2300      	movs	r3, #0
 8013b48:	75fb      	strb	r3, [r7, #23]
	int32_t status_int;

	VL53L0X_GetI2cBus();
	status_int = _I2CWrite(Dev, &index, 1);
 8013b4a:	f107 030b 	add.w	r3, r7, #11
 8013b4e:	2201      	movs	r2, #1
 8013b50:	4619      	mov	r1, r3
 8013b52:	68f8      	ldr	r0, [r7, #12]
 8013b54:	f7ff fe6f 	bl	8013836 <_I2CWrite>
 8013b58:	6138      	str	r0, [r7, #16]
	if (status_int != 0) {
 8013b5a:	693b      	ldr	r3, [r7, #16]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d002      	beq.n	8013b66 <VL53L0X_RdDWord+0x2e>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8013b60:	23ec      	movs	r3, #236	; 0xec
 8013b62:	75fb      	strb	r3, [r7, #23]
		goto done;
 8013b64:	e01b      	b.n	8013b9e <VL53L0X_RdDWord+0x66>
	}
	status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8013b66:	2204      	movs	r2, #4
 8013b68:	4910      	ldr	r1, [pc, #64]	; (8013bac <VL53L0X_RdDWord+0x74>)
 8013b6a:	68f8      	ldr	r0, [r7, #12]
 8013b6c:	f7ff fe82 	bl	8013874 <_I2CRead>
 8013b70:	6138      	str	r0, [r7, #16]
	if (status_int != 0) {
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d002      	beq.n	8013b7e <VL53L0X_RdDWord+0x46>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8013b78:	23ec      	movs	r3, #236	; 0xec
 8013b7a:	75fb      	strb	r3, [r7, #23]
		goto done;
 8013b7c:	e00f      	b.n	8013b9e <VL53L0X_RdDWord+0x66>
	}

	*data = ((uint32_t) _I2CBuffer[0] << 24) + ((uint32_t) _I2CBuffer[1] << 16) + ((uint32_t) _I2CBuffer[2] << 8) + (uint32_t) _I2CBuffer[3];
 8013b7e:	4b0b      	ldr	r3, [pc, #44]	; (8013bac <VL53L0X_RdDWord+0x74>)
 8013b80:	781b      	ldrb	r3, [r3, #0]
 8013b82:	061a      	lsls	r2, r3, #24
 8013b84:	4b09      	ldr	r3, [pc, #36]	; (8013bac <VL53L0X_RdDWord+0x74>)
 8013b86:	785b      	ldrb	r3, [r3, #1]
 8013b88:	041b      	lsls	r3, r3, #16
 8013b8a:	441a      	add	r2, r3
 8013b8c:	4b07      	ldr	r3, [pc, #28]	; (8013bac <VL53L0X_RdDWord+0x74>)
 8013b8e:	789b      	ldrb	r3, [r3, #2]
 8013b90:	021b      	lsls	r3, r3, #8
 8013b92:	4413      	add	r3, r2
 8013b94:	4a05      	ldr	r2, [pc, #20]	; (8013bac <VL53L0X_RdDWord+0x74>)
 8013b96:	78d2      	ldrb	r2, [r2, #3]
 8013b98:	441a      	add	r2, r3
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	601a      	str	r2, [r3, #0]

	done:
	VL53L0X_PutI2cBus();
	return Status;
 8013b9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	3718      	adds	r7, #24
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	bd80      	pop	{r7, pc}
 8013baa:	bf00      	nop
 8013bac:	20001a88 	.word	0x20001a88

08013bb0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b084      	sub	sp, #16
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8013bb8:	2300      	movs	r3, #0
 8013bba:	73fb      	strb	r3, [r7, #15]

	// do nothing
	VL53L0X_OsDelay();
 8013bbc:	2002      	movs	r0, #2
 8013bbe:	f7f4 f983 	bl	8007ec8 <HAL_Delay>
	return status;
 8013bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3710      	adds	r7, #16
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}

08013bce <__cxa_pure_virtual>:
 8013bce:	b508      	push	{r3, lr}
 8013bd0:	f000 f80c 	bl	8013bec <_ZSt9terminatev>

08013bd4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8013bd4:	b508      	push	{r3, lr}
 8013bd6:	4780      	blx	r0
 8013bd8:	f000 f80d 	bl	8013bf6 <abort>

08013bdc <_ZSt13get_terminatev>:
 8013bdc:	4b02      	ldr	r3, [pc, #8]	; (8013be8 <_ZSt13get_terminatev+0xc>)
 8013bde:	6818      	ldr	r0, [r3, #0]
 8013be0:	f3bf 8f5b 	dmb	ish
 8013be4:	4770      	bx	lr
 8013be6:	bf00      	nop
 8013be8:	200002e4 	.word	0x200002e4

08013bec <_ZSt9terminatev>:
 8013bec:	b508      	push	{r3, lr}
 8013bee:	f7ff fff5 	bl	8013bdc <_ZSt13get_terminatev>
 8013bf2:	f7ff ffef 	bl	8013bd4 <_ZN10__cxxabiv111__terminateEPFvvE>

08013bf6 <abort>:
 8013bf6:	b508      	push	{r3, lr}
 8013bf8:	2006      	movs	r0, #6
 8013bfa:	f000 f873 	bl	8013ce4 <raise>
 8013bfe:	2001      	movs	r0, #1
 8013c00:	f7f3 f9a4 	bl	8006f4c <_exit>

08013c04 <__errno>:
 8013c04:	4b01      	ldr	r3, [pc, #4]	; (8013c0c <__errno+0x8>)
 8013c06:	6818      	ldr	r0, [r3, #0]
 8013c08:	4770      	bx	lr
 8013c0a:	bf00      	nop
 8013c0c:	200002e8 	.word	0x200002e8

08013c10 <__libc_init_array>:
 8013c10:	b570      	push	{r4, r5, r6, lr}
 8013c12:	4d0d      	ldr	r5, [pc, #52]	; (8013c48 <__libc_init_array+0x38>)
 8013c14:	4c0d      	ldr	r4, [pc, #52]	; (8013c4c <__libc_init_array+0x3c>)
 8013c16:	1b64      	subs	r4, r4, r5
 8013c18:	10a4      	asrs	r4, r4, #2
 8013c1a:	2600      	movs	r6, #0
 8013c1c:	42a6      	cmp	r6, r4
 8013c1e:	d109      	bne.n	8013c34 <__libc_init_array+0x24>
 8013c20:	4d0b      	ldr	r5, [pc, #44]	; (8013c50 <__libc_init_array+0x40>)
 8013c22:	4c0c      	ldr	r4, [pc, #48]	; (8013c54 <__libc_init_array+0x44>)
 8013c24:	f000 f9b8 	bl	8013f98 <_init>
 8013c28:	1b64      	subs	r4, r4, r5
 8013c2a:	10a4      	asrs	r4, r4, #2
 8013c2c:	2600      	movs	r6, #0
 8013c2e:	42a6      	cmp	r6, r4
 8013c30:	d105      	bne.n	8013c3e <__libc_init_array+0x2e>
 8013c32:	bd70      	pop	{r4, r5, r6, pc}
 8013c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c38:	4798      	blx	r3
 8013c3a:	3601      	adds	r6, #1
 8013c3c:	e7ee      	b.n	8013c1c <__libc_init_array+0xc>
 8013c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c42:	4798      	blx	r3
 8013c44:	3601      	adds	r6, #1
 8013c46:	e7f2      	b.n	8013c2e <__libc_init_array+0x1e>
 8013c48:	080143c0 	.word	0x080143c0
 8013c4c:	080143c0 	.word	0x080143c0
 8013c50:	080143c0 	.word	0x080143c0
 8013c54:	080143c8 	.word	0x080143c8

08013c58 <memcpy>:
 8013c58:	440a      	add	r2, r1
 8013c5a:	4291      	cmp	r1, r2
 8013c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013c60:	d100      	bne.n	8013c64 <memcpy+0xc>
 8013c62:	4770      	bx	lr
 8013c64:	b510      	push	{r4, lr}
 8013c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c6e:	4291      	cmp	r1, r2
 8013c70:	d1f9      	bne.n	8013c66 <memcpy+0xe>
 8013c72:	bd10      	pop	{r4, pc}

08013c74 <memset>:
 8013c74:	4402      	add	r2, r0
 8013c76:	4603      	mov	r3, r0
 8013c78:	4293      	cmp	r3, r2
 8013c7a:	d100      	bne.n	8013c7e <memset+0xa>
 8013c7c:	4770      	bx	lr
 8013c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8013c82:	e7f9      	b.n	8013c78 <memset+0x4>

08013c84 <realloc>:
 8013c84:	4b02      	ldr	r3, [pc, #8]	; (8013c90 <realloc+0xc>)
 8013c86:	460a      	mov	r2, r1
 8013c88:	4601      	mov	r1, r0
 8013c8a:	6818      	ldr	r0, [r3, #0]
 8013c8c:	f000 b8e2 	b.w	8013e54 <_realloc_r>
 8013c90:	200002e8 	.word	0x200002e8

08013c94 <_raise_r>:
 8013c94:	291f      	cmp	r1, #31
 8013c96:	b538      	push	{r3, r4, r5, lr}
 8013c98:	4604      	mov	r4, r0
 8013c9a:	460d      	mov	r5, r1
 8013c9c:	d904      	bls.n	8013ca8 <_raise_r+0x14>
 8013c9e:	2316      	movs	r3, #22
 8013ca0:	6003      	str	r3, [r0, #0]
 8013ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ca6:	bd38      	pop	{r3, r4, r5, pc}
 8013ca8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013caa:	b112      	cbz	r2, 8013cb2 <_raise_r+0x1e>
 8013cac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013cb0:	b94b      	cbnz	r3, 8013cc6 <_raise_r+0x32>
 8013cb2:	4620      	mov	r0, r4
 8013cb4:	f000 f830 	bl	8013d18 <_getpid_r>
 8013cb8:	462a      	mov	r2, r5
 8013cba:	4601      	mov	r1, r0
 8013cbc:	4620      	mov	r0, r4
 8013cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013cc2:	f000 b817 	b.w	8013cf4 <_kill_r>
 8013cc6:	2b01      	cmp	r3, #1
 8013cc8:	d00a      	beq.n	8013ce0 <_raise_r+0x4c>
 8013cca:	1c59      	adds	r1, r3, #1
 8013ccc:	d103      	bne.n	8013cd6 <_raise_r+0x42>
 8013cce:	2316      	movs	r3, #22
 8013cd0:	6003      	str	r3, [r0, #0]
 8013cd2:	2001      	movs	r0, #1
 8013cd4:	e7e7      	b.n	8013ca6 <_raise_r+0x12>
 8013cd6:	2400      	movs	r4, #0
 8013cd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013cdc:	4628      	mov	r0, r5
 8013cde:	4798      	blx	r3
 8013ce0:	2000      	movs	r0, #0
 8013ce2:	e7e0      	b.n	8013ca6 <_raise_r+0x12>

08013ce4 <raise>:
 8013ce4:	4b02      	ldr	r3, [pc, #8]	; (8013cf0 <raise+0xc>)
 8013ce6:	4601      	mov	r1, r0
 8013ce8:	6818      	ldr	r0, [r3, #0]
 8013cea:	f7ff bfd3 	b.w	8013c94 <_raise_r>
 8013cee:	bf00      	nop
 8013cf0:	200002e8 	.word	0x200002e8

08013cf4 <_kill_r>:
 8013cf4:	b538      	push	{r3, r4, r5, lr}
 8013cf6:	4d07      	ldr	r5, [pc, #28]	; (8013d14 <_kill_r+0x20>)
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	4604      	mov	r4, r0
 8013cfc:	4608      	mov	r0, r1
 8013cfe:	4611      	mov	r1, r2
 8013d00:	602b      	str	r3, [r5, #0]
 8013d02:	f7f3 f913 	bl	8006f2c <_kill>
 8013d06:	1c43      	adds	r3, r0, #1
 8013d08:	d102      	bne.n	8013d10 <_kill_r+0x1c>
 8013d0a:	682b      	ldr	r3, [r5, #0]
 8013d0c:	b103      	cbz	r3, 8013d10 <_kill_r+0x1c>
 8013d0e:	6023      	str	r3, [r4, #0]
 8013d10:	bd38      	pop	{r3, r4, r5, pc}
 8013d12:	bf00      	nop
 8013d14:	20001ad0 	.word	0x20001ad0

08013d18 <_getpid_r>:
 8013d18:	f7f3 b900 	b.w	8006f1c <_getpid>

08013d1c <strcpy>:
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013d22:	f803 2b01 	strb.w	r2, [r3], #1
 8013d26:	2a00      	cmp	r2, #0
 8013d28:	d1f9      	bne.n	8013d1e <strcpy+0x2>
 8013d2a:	4770      	bx	lr

08013d2c <sbrk_aligned>:
 8013d2c:	b570      	push	{r4, r5, r6, lr}
 8013d2e:	4e0e      	ldr	r6, [pc, #56]	; (8013d68 <sbrk_aligned+0x3c>)
 8013d30:	460c      	mov	r4, r1
 8013d32:	6831      	ldr	r1, [r6, #0]
 8013d34:	4605      	mov	r5, r0
 8013d36:	b911      	cbnz	r1, 8013d3e <sbrk_aligned+0x12>
 8013d38:	f000 f8bc 	bl	8013eb4 <_sbrk_r>
 8013d3c:	6030      	str	r0, [r6, #0]
 8013d3e:	4621      	mov	r1, r4
 8013d40:	4628      	mov	r0, r5
 8013d42:	f000 f8b7 	bl	8013eb4 <_sbrk_r>
 8013d46:	1c43      	adds	r3, r0, #1
 8013d48:	d00a      	beq.n	8013d60 <sbrk_aligned+0x34>
 8013d4a:	1cc4      	adds	r4, r0, #3
 8013d4c:	f024 0403 	bic.w	r4, r4, #3
 8013d50:	42a0      	cmp	r0, r4
 8013d52:	d007      	beq.n	8013d64 <sbrk_aligned+0x38>
 8013d54:	1a21      	subs	r1, r4, r0
 8013d56:	4628      	mov	r0, r5
 8013d58:	f000 f8ac 	bl	8013eb4 <_sbrk_r>
 8013d5c:	3001      	adds	r0, #1
 8013d5e:	d101      	bne.n	8013d64 <sbrk_aligned+0x38>
 8013d60:	f04f 34ff 	mov.w	r4, #4294967295
 8013d64:	4620      	mov	r0, r4
 8013d66:	bd70      	pop	{r4, r5, r6, pc}
 8013d68:	20001acc 	.word	0x20001acc

08013d6c <_malloc_r>:
 8013d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d70:	1ccd      	adds	r5, r1, #3
 8013d72:	f025 0503 	bic.w	r5, r5, #3
 8013d76:	3508      	adds	r5, #8
 8013d78:	2d0c      	cmp	r5, #12
 8013d7a:	bf38      	it	cc
 8013d7c:	250c      	movcc	r5, #12
 8013d7e:	2d00      	cmp	r5, #0
 8013d80:	4607      	mov	r7, r0
 8013d82:	db01      	blt.n	8013d88 <_malloc_r+0x1c>
 8013d84:	42a9      	cmp	r1, r5
 8013d86:	d905      	bls.n	8013d94 <_malloc_r+0x28>
 8013d88:	230c      	movs	r3, #12
 8013d8a:	603b      	str	r3, [r7, #0]
 8013d8c:	2600      	movs	r6, #0
 8013d8e:	4630      	mov	r0, r6
 8013d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d94:	4e2e      	ldr	r6, [pc, #184]	; (8013e50 <_malloc_r+0xe4>)
 8013d96:	f000 f89d 	bl	8013ed4 <__malloc_lock>
 8013d9a:	6833      	ldr	r3, [r6, #0]
 8013d9c:	461c      	mov	r4, r3
 8013d9e:	bb34      	cbnz	r4, 8013dee <_malloc_r+0x82>
 8013da0:	4629      	mov	r1, r5
 8013da2:	4638      	mov	r0, r7
 8013da4:	f7ff ffc2 	bl	8013d2c <sbrk_aligned>
 8013da8:	1c43      	adds	r3, r0, #1
 8013daa:	4604      	mov	r4, r0
 8013dac:	d14d      	bne.n	8013e4a <_malloc_r+0xde>
 8013dae:	6834      	ldr	r4, [r6, #0]
 8013db0:	4626      	mov	r6, r4
 8013db2:	2e00      	cmp	r6, #0
 8013db4:	d140      	bne.n	8013e38 <_malloc_r+0xcc>
 8013db6:	6823      	ldr	r3, [r4, #0]
 8013db8:	4631      	mov	r1, r6
 8013dba:	4638      	mov	r0, r7
 8013dbc:	eb04 0803 	add.w	r8, r4, r3
 8013dc0:	f000 f878 	bl	8013eb4 <_sbrk_r>
 8013dc4:	4580      	cmp	r8, r0
 8013dc6:	d13a      	bne.n	8013e3e <_malloc_r+0xd2>
 8013dc8:	6821      	ldr	r1, [r4, #0]
 8013dca:	3503      	adds	r5, #3
 8013dcc:	1a6d      	subs	r5, r5, r1
 8013dce:	f025 0503 	bic.w	r5, r5, #3
 8013dd2:	3508      	adds	r5, #8
 8013dd4:	2d0c      	cmp	r5, #12
 8013dd6:	bf38      	it	cc
 8013dd8:	250c      	movcc	r5, #12
 8013dda:	4629      	mov	r1, r5
 8013ddc:	4638      	mov	r0, r7
 8013dde:	f7ff ffa5 	bl	8013d2c <sbrk_aligned>
 8013de2:	3001      	adds	r0, #1
 8013de4:	d02b      	beq.n	8013e3e <_malloc_r+0xd2>
 8013de6:	6823      	ldr	r3, [r4, #0]
 8013de8:	442b      	add	r3, r5
 8013dea:	6023      	str	r3, [r4, #0]
 8013dec:	e00e      	b.n	8013e0c <_malloc_r+0xa0>
 8013dee:	6822      	ldr	r2, [r4, #0]
 8013df0:	1b52      	subs	r2, r2, r5
 8013df2:	d41e      	bmi.n	8013e32 <_malloc_r+0xc6>
 8013df4:	2a0b      	cmp	r2, #11
 8013df6:	d916      	bls.n	8013e26 <_malloc_r+0xba>
 8013df8:	1961      	adds	r1, r4, r5
 8013dfa:	42a3      	cmp	r3, r4
 8013dfc:	6025      	str	r5, [r4, #0]
 8013dfe:	bf18      	it	ne
 8013e00:	6059      	strne	r1, [r3, #4]
 8013e02:	6863      	ldr	r3, [r4, #4]
 8013e04:	bf08      	it	eq
 8013e06:	6031      	streq	r1, [r6, #0]
 8013e08:	5162      	str	r2, [r4, r5]
 8013e0a:	604b      	str	r3, [r1, #4]
 8013e0c:	4638      	mov	r0, r7
 8013e0e:	f104 060b 	add.w	r6, r4, #11
 8013e12:	f000 f865 	bl	8013ee0 <__malloc_unlock>
 8013e16:	f026 0607 	bic.w	r6, r6, #7
 8013e1a:	1d23      	adds	r3, r4, #4
 8013e1c:	1af2      	subs	r2, r6, r3
 8013e1e:	d0b6      	beq.n	8013d8e <_malloc_r+0x22>
 8013e20:	1b9b      	subs	r3, r3, r6
 8013e22:	50a3      	str	r3, [r4, r2]
 8013e24:	e7b3      	b.n	8013d8e <_malloc_r+0x22>
 8013e26:	6862      	ldr	r2, [r4, #4]
 8013e28:	42a3      	cmp	r3, r4
 8013e2a:	bf0c      	ite	eq
 8013e2c:	6032      	streq	r2, [r6, #0]
 8013e2e:	605a      	strne	r2, [r3, #4]
 8013e30:	e7ec      	b.n	8013e0c <_malloc_r+0xa0>
 8013e32:	4623      	mov	r3, r4
 8013e34:	6864      	ldr	r4, [r4, #4]
 8013e36:	e7b2      	b.n	8013d9e <_malloc_r+0x32>
 8013e38:	4634      	mov	r4, r6
 8013e3a:	6876      	ldr	r6, [r6, #4]
 8013e3c:	e7b9      	b.n	8013db2 <_malloc_r+0x46>
 8013e3e:	230c      	movs	r3, #12
 8013e40:	603b      	str	r3, [r7, #0]
 8013e42:	4638      	mov	r0, r7
 8013e44:	f000 f84c 	bl	8013ee0 <__malloc_unlock>
 8013e48:	e7a1      	b.n	8013d8e <_malloc_r+0x22>
 8013e4a:	6025      	str	r5, [r4, #0]
 8013e4c:	e7de      	b.n	8013e0c <_malloc_r+0xa0>
 8013e4e:	bf00      	nop
 8013e50:	20001ac8 	.word	0x20001ac8

08013e54 <_realloc_r>:
 8013e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e58:	4680      	mov	r8, r0
 8013e5a:	4614      	mov	r4, r2
 8013e5c:	460e      	mov	r6, r1
 8013e5e:	b921      	cbnz	r1, 8013e6a <_realloc_r+0x16>
 8013e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e64:	4611      	mov	r1, r2
 8013e66:	f7ff bf81 	b.w	8013d6c <_malloc_r>
 8013e6a:	b92a      	cbnz	r2, 8013e78 <_realloc_r+0x24>
 8013e6c:	f000 f83e 	bl	8013eec <_free_r>
 8013e70:	4625      	mov	r5, r4
 8013e72:	4628      	mov	r0, r5
 8013e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e78:	f000 f884 	bl	8013f84 <_malloc_usable_size_r>
 8013e7c:	4284      	cmp	r4, r0
 8013e7e:	4607      	mov	r7, r0
 8013e80:	d802      	bhi.n	8013e88 <_realloc_r+0x34>
 8013e82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013e86:	d812      	bhi.n	8013eae <_realloc_r+0x5a>
 8013e88:	4621      	mov	r1, r4
 8013e8a:	4640      	mov	r0, r8
 8013e8c:	f7ff ff6e 	bl	8013d6c <_malloc_r>
 8013e90:	4605      	mov	r5, r0
 8013e92:	2800      	cmp	r0, #0
 8013e94:	d0ed      	beq.n	8013e72 <_realloc_r+0x1e>
 8013e96:	42bc      	cmp	r4, r7
 8013e98:	4622      	mov	r2, r4
 8013e9a:	4631      	mov	r1, r6
 8013e9c:	bf28      	it	cs
 8013e9e:	463a      	movcs	r2, r7
 8013ea0:	f7ff feda 	bl	8013c58 <memcpy>
 8013ea4:	4631      	mov	r1, r6
 8013ea6:	4640      	mov	r0, r8
 8013ea8:	f000 f820 	bl	8013eec <_free_r>
 8013eac:	e7e1      	b.n	8013e72 <_realloc_r+0x1e>
 8013eae:	4635      	mov	r5, r6
 8013eb0:	e7df      	b.n	8013e72 <_realloc_r+0x1e>
	...

08013eb4 <_sbrk_r>:
 8013eb4:	b538      	push	{r3, r4, r5, lr}
 8013eb6:	4d06      	ldr	r5, [pc, #24]	; (8013ed0 <_sbrk_r+0x1c>)
 8013eb8:	2300      	movs	r3, #0
 8013eba:	4604      	mov	r4, r0
 8013ebc:	4608      	mov	r0, r1
 8013ebe:	602b      	str	r3, [r5, #0]
 8013ec0:	f7f3 f84e 	bl	8006f60 <_sbrk>
 8013ec4:	1c43      	adds	r3, r0, #1
 8013ec6:	d102      	bne.n	8013ece <_sbrk_r+0x1a>
 8013ec8:	682b      	ldr	r3, [r5, #0]
 8013eca:	b103      	cbz	r3, 8013ece <_sbrk_r+0x1a>
 8013ecc:	6023      	str	r3, [r4, #0]
 8013ece:	bd38      	pop	{r3, r4, r5, pc}
 8013ed0:	20001ad0 	.word	0x20001ad0

08013ed4 <__malloc_lock>:
 8013ed4:	4801      	ldr	r0, [pc, #4]	; (8013edc <__malloc_lock+0x8>)
 8013ed6:	f000 b85d 	b.w	8013f94 <__retarget_lock_acquire_recursive>
 8013eda:	bf00      	nop
 8013edc:	20001ad4 	.word	0x20001ad4

08013ee0 <__malloc_unlock>:
 8013ee0:	4801      	ldr	r0, [pc, #4]	; (8013ee8 <__malloc_unlock+0x8>)
 8013ee2:	f000 b858 	b.w	8013f96 <__retarget_lock_release_recursive>
 8013ee6:	bf00      	nop
 8013ee8:	20001ad4 	.word	0x20001ad4

08013eec <_free_r>:
 8013eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013eee:	2900      	cmp	r1, #0
 8013ef0:	d044      	beq.n	8013f7c <_free_r+0x90>
 8013ef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ef6:	9001      	str	r0, [sp, #4]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	f1a1 0404 	sub.w	r4, r1, #4
 8013efe:	bfb8      	it	lt
 8013f00:	18e4      	addlt	r4, r4, r3
 8013f02:	f7ff ffe7 	bl	8013ed4 <__malloc_lock>
 8013f06:	4a1e      	ldr	r2, [pc, #120]	; (8013f80 <_free_r+0x94>)
 8013f08:	9801      	ldr	r0, [sp, #4]
 8013f0a:	6813      	ldr	r3, [r2, #0]
 8013f0c:	b933      	cbnz	r3, 8013f1c <_free_r+0x30>
 8013f0e:	6063      	str	r3, [r4, #4]
 8013f10:	6014      	str	r4, [r2, #0]
 8013f12:	b003      	add	sp, #12
 8013f14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f18:	f7ff bfe2 	b.w	8013ee0 <__malloc_unlock>
 8013f1c:	42a3      	cmp	r3, r4
 8013f1e:	d908      	bls.n	8013f32 <_free_r+0x46>
 8013f20:	6825      	ldr	r5, [r4, #0]
 8013f22:	1961      	adds	r1, r4, r5
 8013f24:	428b      	cmp	r3, r1
 8013f26:	bf01      	itttt	eq
 8013f28:	6819      	ldreq	r1, [r3, #0]
 8013f2a:	685b      	ldreq	r3, [r3, #4]
 8013f2c:	1949      	addeq	r1, r1, r5
 8013f2e:	6021      	streq	r1, [r4, #0]
 8013f30:	e7ed      	b.n	8013f0e <_free_r+0x22>
 8013f32:	461a      	mov	r2, r3
 8013f34:	685b      	ldr	r3, [r3, #4]
 8013f36:	b10b      	cbz	r3, 8013f3c <_free_r+0x50>
 8013f38:	42a3      	cmp	r3, r4
 8013f3a:	d9fa      	bls.n	8013f32 <_free_r+0x46>
 8013f3c:	6811      	ldr	r1, [r2, #0]
 8013f3e:	1855      	adds	r5, r2, r1
 8013f40:	42a5      	cmp	r5, r4
 8013f42:	d10b      	bne.n	8013f5c <_free_r+0x70>
 8013f44:	6824      	ldr	r4, [r4, #0]
 8013f46:	4421      	add	r1, r4
 8013f48:	1854      	adds	r4, r2, r1
 8013f4a:	42a3      	cmp	r3, r4
 8013f4c:	6011      	str	r1, [r2, #0]
 8013f4e:	d1e0      	bne.n	8013f12 <_free_r+0x26>
 8013f50:	681c      	ldr	r4, [r3, #0]
 8013f52:	685b      	ldr	r3, [r3, #4]
 8013f54:	6053      	str	r3, [r2, #4]
 8013f56:	4421      	add	r1, r4
 8013f58:	6011      	str	r1, [r2, #0]
 8013f5a:	e7da      	b.n	8013f12 <_free_r+0x26>
 8013f5c:	d902      	bls.n	8013f64 <_free_r+0x78>
 8013f5e:	230c      	movs	r3, #12
 8013f60:	6003      	str	r3, [r0, #0]
 8013f62:	e7d6      	b.n	8013f12 <_free_r+0x26>
 8013f64:	6825      	ldr	r5, [r4, #0]
 8013f66:	1961      	adds	r1, r4, r5
 8013f68:	428b      	cmp	r3, r1
 8013f6a:	bf04      	itt	eq
 8013f6c:	6819      	ldreq	r1, [r3, #0]
 8013f6e:	685b      	ldreq	r3, [r3, #4]
 8013f70:	6063      	str	r3, [r4, #4]
 8013f72:	bf04      	itt	eq
 8013f74:	1949      	addeq	r1, r1, r5
 8013f76:	6021      	streq	r1, [r4, #0]
 8013f78:	6054      	str	r4, [r2, #4]
 8013f7a:	e7ca      	b.n	8013f12 <_free_r+0x26>
 8013f7c:	b003      	add	sp, #12
 8013f7e:	bd30      	pop	{r4, r5, pc}
 8013f80:	20001ac8 	.word	0x20001ac8

08013f84 <_malloc_usable_size_r>:
 8013f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f88:	1f18      	subs	r0, r3, #4
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	bfbc      	itt	lt
 8013f8e:	580b      	ldrlt	r3, [r1, r0]
 8013f90:	18c0      	addlt	r0, r0, r3
 8013f92:	4770      	bx	lr

08013f94 <__retarget_lock_acquire_recursive>:
 8013f94:	4770      	bx	lr

08013f96 <__retarget_lock_release_recursive>:
 8013f96:	4770      	bx	lr

08013f98 <_init>:
 8013f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f9a:	bf00      	nop
 8013f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f9e:	bc08      	pop	{r3}
 8013fa0:	469e      	mov	lr, r3
 8013fa2:	4770      	bx	lr

08013fa4 <_fini>:
 8013fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fa6:	bf00      	nop
 8013fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013faa:	bc08      	pop	{r3}
 8013fac:	469e      	mov	lr, r3
 8013fae:	4770      	bx	lr
