
0212.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014210  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  080143d8  080143d8  000243d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080147ec  080147ec  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  080147ec  080147ec  000247ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080147f4  080147f4  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080147f4  080147f4  000247f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080147fc  080147fc  000247fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  08014800  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001790  2000034c  08014b4c  0003034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001adc  08014b4c  00031adc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dce9  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ed2  00000000  00000000  0005e065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be8  00000000  00000000  00062f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a30  00000000  00000000  00064b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a32  00000000  00000000  00066550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000256a2  00000000  00000000  0008ff82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5a57  00000000  00000000  000b5624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ab07b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b04  00000000  00000000  001ab0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000034c 	.word	0x2000034c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080143c0 	.word	0x080143c0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000350 	.word	0x20000350
 8000204:	080143c0 	.word	0x080143c0

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <strlen>:
 800021c:	4603      	mov	r3, r0
 800021e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000222:	2a00      	cmp	r2, #0
 8000224:	d1fb      	bne.n	800021e <strlen+0x2>
 8000226:	1a18      	subs	r0, r3, r0
 8000228:	3801      	subs	r0, #1
 800022a:	4770      	bx	lr

0800022c <__aeabi_drsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000230:	e002      	b.n	8000238 <__adddf3>
 8000232:	bf00      	nop

08000234 <__aeabi_dsub>:
 8000234:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000238 <__adddf3>:
 8000238:	b530      	push	{r4, r5, lr}
 800023a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000242:	ea94 0f05 	teq	r4, r5
 8000246:	bf08      	it	eq
 8000248:	ea90 0f02 	teqeq	r0, r2
 800024c:	bf1f      	itttt	ne
 800024e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000252:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000256:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025e:	f000 80e2 	beq.w	8000426 <__adddf3+0x1ee>
 8000262:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000266:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026a:	bfb8      	it	lt
 800026c:	426d      	neglt	r5, r5
 800026e:	dd0c      	ble.n	800028a <__adddf3+0x52>
 8000270:	442c      	add	r4, r5
 8000272:	ea80 0202 	eor.w	r2, r0, r2
 8000276:	ea81 0303 	eor.w	r3, r1, r3
 800027a:	ea82 0000 	eor.w	r0, r2, r0
 800027e:	ea83 0101 	eor.w	r1, r3, r1
 8000282:	ea80 0202 	eor.w	r2, r0, r2
 8000286:	ea81 0303 	eor.w	r3, r1, r3
 800028a:	2d36      	cmp	r5, #54	; 0x36
 800028c:	bf88      	it	hi
 800028e:	bd30      	pophi	{r4, r5, pc}
 8000290:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000294:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000298:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800029c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x70>
 80002a2:	4240      	negs	r0, r0
 80002a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x84>
 80002b6:	4252      	negs	r2, r2
 80002b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002bc:	ea94 0f05 	teq	r4, r5
 80002c0:	f000 80a7 	beq.w	8000412 <__adddf3+0x1da>
 80002c4:	f1a4 0401 	sub.w	r4, r4, #1
 80002c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002cc:	db0d      	blt.n	80002ea <__adddf3+0xb2>
 80002ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d2:	fa22 f205 	lsr.w	r2, r2, r5
 80002d6:	1880      	adds	r0, r0, r2
 80002d8:	f141 0100 	adc.w	r1, r1, #0
 80002dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e0:	1880      	adds	r0, r0, r2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	4159      	adcs	r1, r3
 80002e8:	e00e      	b.n	8000308 <__adddf3+0xd0>
 80002ea:	f1a5 0520 	sub.w	r5, r5, #32
 80002ee:	f10e 0e20 	add.w	lr, lr, #32
 80002f2:	2a01      	cmp	r2, #1
 80002f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f8:	bf28      	it	cs
 80002fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	18c0      	adds	r0, r0, r3
 8000304:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000308:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800030c:	d507      	bpl.n	800031e <__adddf3+0xe6>
 800030e:	f04f 0e00 	mov.w	lr, #0
 8000312:	f1dc 0c00 	rsbs	ip, ip, #0
 8000316:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031a:	eb6e 0101 	sbc.w	r1, lr, r1
 800031e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000322:	d31b      	bcc.n	800035c <__adddf3+0x124>
 8000324:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000328:	d30c      	bcc.n	8000344 <__adddf3+0x10c>
 800032a:	0849      	lsrs	r1, r1, #1
 800032c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000330:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000334:	f104 0401 	add.w	r4, r4, #1
 8000338:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800033c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000340:	f080 809a 	bcs.w	8000478 <__adddf3+0x240>
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	bf08      	it	eq
 800034a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034e:	f150 0000 	adcs.w	r0, r0, #0
 8000352:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000356:	ea41 0105 	orr.w	r1, r1, r5
 800035a:	bd30      	pop	{r4, r5, pc}
 800035c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000360:	4140      	adcs	r0, r0
 8000362:	eb41 0101 	adc.w	r1, r1, r1
 8000366:	3c01      	subs	r4, #1
 8000368:	bf28      	it	cs
 800036a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036e:	d2e9      	bcs.n	8000344 <__adddf3+0x10c>
 8000370:	f091 0f00 	teq	r1, #0
 8000374:	bf04      	itt	eq
 8000376:	4601      	moveq	r1, r0
 8000378:	2000      	moveq	r0, #0
 800037a:	fab1 f381 	clz	r3, r1
 800037e:	bf08      	it	eq
 8000380:	3320      	addeq	r3, #32
 8000382:	f1a3 030b 	sub.w	r3, r3, #11
 8000386:	f1b3 0220 	subs.w	r2, r3, #32
 800038a:	da0c      	bge.n	80003a6 <__adddf3+0x16e>
 800038c:	320c      	adds	r2, #12
 800038e:	dd08      	ble.n	80003a2 <__adddf3+0x16a>
 8000390:	f102 0c14 	add.w	ip, r2, #20
 8000394:	f1c2 020c 	rsb	r2, r2, #12
 8000398:	fa01 f00c 	lsl.w	r0, r1, ip
 800039c:	fa21 f102 	lsr.w	r1, r1, r2
 80003a0:	e00c      	b.n	80003bc <__adddf3+0x184>
 80003a2:	f102 0214 	add.w	r2, r2, #20
 80003a6:	bfd8      	it	le
 80003a8:	f1c2 0c20 	rsble	ip, r2, #32
 80003ac:	fa01 f102 	lsl.w	r1, r1, r2
 80003b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b4:	bfdc      	itt	le
 80003b6:	ea41 010c 	orrle.w	r1, r1, ip
 80003ba:	4090      	lslle	r0, r2
 80003bc:	1ae4      	subs	r4, r4, r3
 80003be:	bfa2      	ittt	ge
 80003c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c4:	4329      	orrge	r1, r5
 80003c6:	bd30      	popge	{r4, r5, pc}
 80003c8:	ea6f 0404 	mvn.w	r4, r4
 80003cc:	3c1f      	subs	r4, #31
 80003ce:	da1c      	bge.n	800040a <__adddf3+0x1d2>
 80003d0:	340c      	adds	r4, #12
 80003d2:	dc0e      	bgt.n	80003f2 <__adddf3+0x1ba>
 80003d4:	f104 0414 	add.w	r4, r4, #20
 80003d8:	f1c4 0220 	rsb	r2, r4, #32
 80003dc:	fa20 f004 	lsr.w	r0, r0, r4
 80003e0:	fa01 f302 	lsl.w	r3, r1, r2
 80003e4:	ea40 0003 	orr.w	r0, r0, r3
 80003e8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ec:	ea45 0103 	orr.w	r1, r5, r3
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	f1c4 040c 	rsb	r4, r4, #12
 80003f6:	f1c4 0220 	rsb	r2, r4, #32
 80003fa:	fa20 f002 	lsr.w	r0, r0, r2
 80003fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000402:	ea40 0003 	orr.w	r0, r0, r3
 8000406:	4629      	mov	r1, r5
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	fa21 f004 	lsr.w	r0, r1, r4
 800040e:	4629      	mov	r1, r5
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f094 0f00 	teq	r4, #0
 8000416:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041a:	bf06      	itte	eq
 800041c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000420:	3401      	addeq	r4, #1
 8000422:	3d01      	subne	r5, #1
 8000424:	e74e      	b.n	80002c4 <__adddf3+0x8c>
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf18      	it	ne
 800042c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000430:	d029      	beq.n	8000486 <__adddf3+0x24e>
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	d005      	beq.n	800044a <__adddf3+0x212>
 800043e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000442:	bf04      	itt	eq
 8000444:	4619      	moveq	r1, r3
 8000446:	4610      	moveq	r0, r2
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea91 0f03 	teq	r1, r3
 800044e:	bf1e      	ittt	ne
 8000450:	2100      	movne	r1, #0
 8000452:	2000      	movne	r0, #0
 8000454:	bd30      	popne	{r4, r5, pc}
 8000456:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045a:	d105      	bne.n	8000468 <__adddf3+0x230>
 800045c:	0040      	lsls	r0, r0, #1
 800045e:	4149      	adcs	r1, r1
 8000460:	bf28      	it	cs
 8000462:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000466:	bd30      	pop	{r4, r5, pc}
 8000468:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800046c:	bf3c      	itt	cc
 800046e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000472:	bd30      	popcc	{r4, r5, pc}
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800047c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048a:	bf1a      	itte	ne
 800048c:	4619      	movne	r1, r3
 800048e:	4610      	movne	r0, r2
 8000490:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000494:	bf1c      	itt	ne
 8000496:	460b      	movne	r3, r1
 8000498:	4602      	movne	r2, r0
 800049a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049e:	bf06      	itte	eq
 80004a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a4:	ea91 0f03 	teqeq	r1, r3
 80004a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	bf00      	nop

080004b0 <__aeabi_ui2d>:
 80004b0:	f090 0f00 	teq	r0, #0
 80004b4:	bf04      	itt	eq
 80004b6:	2100      	moveq	r1, #0
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c4:	f04f 0500 	mov.w	r5, #0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e750      	b.n	8000370 <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_i2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e8:	bf48      	it	mi
 80004ea:	4240      	negmi	r0, r0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e73e      	b.n	8000370 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_f2d>:
 80004f4:	0042      	lsls	r2, r0, #1
 80004f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000502:	bf1f      	itttt	ne
 8000504:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000508:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800050c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000510:	4770      	bxne	lr
 8000512:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000516:	bf08      	it	eq
 8000518:	4770      	bxeq	lr
 800051a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051e:	bf04      	itt	eq
 8000520:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 7460 	mov.w	r4, #896	; 0x380
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000534:	e71c      	b.n	8000370 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_ul2d>:
 8000538:	ea50 0201 	orrs.w	r2, r0, r1
 800053c:	bf08      	it	eq
 800053e:	4770      	bxeq	lr
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	f04f 0500 	mov.w	r5, #0
 8000546:	e00a      	b.n	800055e <__aeabi_l2d+0x16>

08000548 <__aeabi_l2d>:
 8000548:	ea50 0201 	orrs.w	r2, r0, r1
 800054c:	bf08      	it	eq
 800054e:	4770      	bxeq	lr
 8000550:	b530      	push	{r4, r5, lr}
 8000552:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000556:	d502      	bpl.n	800055e <__aeabi_l2d+0x16>
 8000558:	4240      	negs	r0, r0
 800055a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000562:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000566:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056a:	f43f aed8 	beq.w	800031e <__adddf3+0xe6>
 800056e:	f04f 0203 	mov.w	r2, #3
 8000572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000576:	bf18      	it	ne
 8000578:	3203      	addne	r2, #3
 800057a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057e:	bf18      	it	ne
 8000580:	3203      	addne	r2, #3
 8000582:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000586:	f1c2 0320 	rsb	r3, r2, #32
 800058a:	fa00 fc03 	lsl.w	ip, r0, r3
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 fe03 	lsl.w	lr, r1, r3
 8000596:	ea40 000e 	orr.w	r0, r0, lr
 800059a:	fa21 f102 	lsr.w	r1, r1, r2
 800059e:	4414      	add	r4, r2
 80005a0:	e6bd      	b.n	800031e <__adddf3+0xe6>
 80005a2:	bf00      	nop

080005a4 <__aeabi_dmul>:
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b2:	bf1d      	ittte	ne
 80005b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b8:	ea94 0f0c 	teqne	r4, ip
 80005bc:	ea95 0f0c 	teqne	r5, ip
 80005c0:	f000 f8de 	bleq	8000780 <__aeabi_dmul+0x1dc>
 80005c4:	442c      	add	r4, r5
 80005c6:	ea81 0603 	eor.w	r6, r1, r3
 80005ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d6:	bf18      	it	ne
 80005d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e4:	d038      	beq.n	8000658 <__aeabi_dmul+0xb4>
 80005e6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ea:	f04f 0500 	mov.w	r5, #0
 80005ee:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fa:	f04f 0600 	mov.w	r6, #0
 80005fe:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000602:	f09c 0f00 	teq	ip, #0
 8000606:	bf18      	it	ne
 8000608:	f04e 0e01 	orrne.w	lr, lr, #1
 800060c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000610:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000614:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000618:	d204      	bcs.n	8000624 <__aeabi_dmul+0x80>
 800061a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061e:	416d      	adcs	r5, r5
 8000620:	eb46 0606 	adc.w	r6, r6, r6
 8000624:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000628:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800062c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000630:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000634:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000638:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800063c:	bf88      	it	hi
 800063e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000642:	d81e      	bhi.n	8000682 <__aeabi_dmul+0xde>
 8000644:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000648:	bf08      	it	eq
 800064a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064e:	f150 0000 	adcs.w	r0, r0, #0
 8000652:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800065c:	ea46 0101 	orr.w	r1, r6, r1
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	ea81 0103 	eor.w	r1, r1, r3
 8000668:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800066c:	bfc2      	ittt	gt
 800066e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000672:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000676:	bd70      	popgt	{r4, r5, r6, pc}
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f04f 0e00 	mov.w	lr, #0
 8000680:	3c01      	subs	r4, #1
 8000682:	f300 80ab 	bgt.w	80007dc <__aeabi_dmul+0x238>
 8000686:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068a:	bfde      	ittt	le
 800068c:	2000      	movle	r0, #0
 800068e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000692:	bd70      	pople	{r4, r5, r6, pc}
 8000694:	f1c4 0400 	rsb	r4, r4, #0
 8000698:	3c20      	subs	r4, #32
 800069a:	da35      	bge.n	8000708 <__aeabi_dmul+0x164>
 800069c:	340c      	adds	r4, #12
 800069e:	dc1b      	bgt.n	80006d8 <__aeabi_dmul+0x134>
 80006a0:	f104 0414 	add.w	r4, r4, #20
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f305 	lsl.w	r3, r0, r5
 80006ac:	fa20 f004 	lsr.w	r0, r0, r4
 80006b0:	fa01 f205 	lsl.w	r2, r1, r5
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c4:	fa21 f604 	lsr.w	r6, r1, r4
 80006c8:	eb42 0106 	adc.w	r1, r2, r6
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 040c 	rsb	r4, r4, #12
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f304 	lsl.w	r3, r0, r4
 80006e4:	fa20 f005 	lsr.w	r0, r0, r5
 80006e8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f8:	f141 0100 	adc.w	r1, r1, #0
 80006fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000700:	bf08      	it	eq
 8000702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f205 	lsl.w	r2, r0, r5
 8000710:	ea4e 0e02 	orr.w	lr, lr, r2
 8000714:	fa20 f304 	lsr.w	r3, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea43 0302 	orr.w	r3, r3, r2
 8000720:	fa21 f004 	lsr.w	r0, r1, r4
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	fa21 f204 	lsr.w	r2, r1, r4
 800072c:	ea20 0002 	bic.w	r0, r0, r2
 8000730:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f094 0f00 	teq	r4, #0
 8000744:	d10f      	bne.n	8000766 <__aeabi_dmul+0x1c2>
 8000746:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074a:	0040      	lsls	r0, r0, #1
 800074c:	eb41 0101 	adc.w	r1, r1, r1
 8000750:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000754:	bf08      	it	eq
 8000756:	3c01      	subeq	r4, #1
 8000758:	d0f7      	beq.n	800074a <__aeabi_dmul+0x1a6>
 800075a:	ea41 0106 	orr.w	r1, r1, r6
 800075e:	f095 0f00 	teq	r5, #0
 8000762:	bf18      	it	ne
 8000764:	4770      	bxne	lr
 8000766:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076a:	0052      	lsls	r2, r2, #1
 800076c:	eb43 0303 	adc.w	r3, r3, r3
 8000770:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3d01      	subeq	r5, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1c6>
 800077a:	ea43 0306 	orr.w	r3, r3, r6
 800077e:	4770      	bx	lr
 8000780:	ea94 0f0c 	teq	r4, ip
 8000784:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000788:	bf18      	it	ne
 800078a:	ea95 0f0c 	teqne	r5, ip
 800078e:	d00c      	beq.n	80007aa <__aeabi_dmul+0x206>
 8000790:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000794:	bf18      	it	ne
 8000796:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079a:	d1d1      	bne.n	8000740 <__aeabi_dmul+0x19c>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ae:	bf06      	itte	eq
 80007b0:	4610      	moveq	r0, r2
 80007b2:	4619      	moveq	r1, r3
 80007b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b8:	d019      	beq.n	80007ee <__aeabi_dmul+0x24a>
 80007ba:	ea94 0f0c 	teq	r4, ip
 80007be:	d102      	bne.n	80007c6 <__aeabi_dmul+0x222>
 80007c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c4:	d113      	bne.n	80007ee <__aeabi_dmul+0x24a>
 80007c6:	ea95 0f0c 	teq	r5, ip
 80007ca:	d105      	bne.n	80007d8 <__aeabi_dmul+0x234>
 80007cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d0:	bf1c      	itt	ne
 80007d2:	4610      	movne	r0, r2
 80007d4:	4619      	movne	r1, r3
 80007d6:	d10a      	bne.n	80007ee <__aeabi_dmul+0x24a>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f6:	bd70      	pop	{r4, r5, r6, pc}

080007f8 <__aeabi_ddiv>:
 80007f8:	b570      	push	{r4, r5, r6, lr}
 80007fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000802:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000806:	bf1d      	ittte	ne
 8000808:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800080c:	ea94 0f0c 	teqne	r4, ip
 8000810:	ea95 0f0c 	teqne	r5, ip
 8000814:	f000 f8a7 	bleq	8000966 <__aeabi_ddiv+0x16e>
 8000818:	eba4 0405 	sub.w	r4, r4, r5
 800081c:	ea81 0e03 	eor.w	lr, r1, r3
 8000820:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000824:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000828:	f000 8088 	beq.w	800093c <__aeabi_ddiv+0x144>
 800082c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000830:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000834:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000838:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800083c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000840:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000844:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000848:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800084c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000850:	429d      	cmp	r5, r3
 8000852:	bf08      	it	eq
 8000854:	4296      	cmpeq	r6, r2
 8000856:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085e:	d202      	bcs.n	8000866 <__aeabi_ddiv+0x6e>
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	1ab6      	subs	r6, r6, r2
 8000868:	eb65 0503 	sbc.w	r5, r5, r3
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000876:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 000c 	orrcs.w	r0, r0, ip
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d8:	d018      	beq.n	800090c <__aeabi_ddiv+0x114>
 80008da:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f6:	d1c0      	bne.n	800087a <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	d10b      	bne.n	8000916 <__aeabi_ddiv+0x11e>
 80008fe:	ea41 0100 	orr.w	r1, r1, r0
 8000902:	f04f 0000 	mov.w	r0, #0
 8000906:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090a:	e7b6      	b.n	800087a <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	bf04      	itt	eq
 8000912:	4301      	orreq	r1, r0
 8000914:	2000      	moveq	r0, #0
 8000916:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091a:	bf88      	it	hi
 800091c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000920:	f63f aeaf 	bhi.w	8000682 <__aeabi_dmul+0xde>
 8000924:	ebb5 0c03 	subs.w	ip, r5, r3
 8000928:	bf04      	itt	eq
 800092a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000932:	f150 0000 	adcs.w	r0, r0, #0
 8000936:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093a:	bd70      	pop	{r4, r5, r6, pc}
 800093c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000940:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000944:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000948:	bfc2      	ittt	gt
 800094a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000952:	bd70      	popgt	{r4, r5, r6, pc}
 8000954:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000958:	f04f 0e00 	mov.w	lr, #0
 800095c:	3c01      	subs	r4, #1
 800095e:	e690      	b.n	8000682 <__aeabi_dmul+0xde>
 8000960:	ea45 0e06 	orr.w	lr, r5, r6
 8000964:	e68d      	b.n	8000682 <__aeabi_dmul+0xde>
 8000966:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096a:	ea94 0f0c 	teq	r4, ip
 800096e:	bf08      	it	eq
 8000970:	ea95 0f0c 	teqeq	r5, ip
 8000974:	f43f af3b 	beq.w	80007ee <__aeabi_dmul+0x24a>
 8000978:	ea94 0f0c 	teq	r4, ip
 800097c:	d10a      	bne.n	8000994 <__aeabi_ddiv+0x19c>
 800097e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000982:	f47f af34 	bne.w	80007ee <__aeabi_dmul+0x24a>
 8000986:	ea95 0f0c 	teq	r5, ip
 800098a:	f47f af25 	bne.w	80007d8 <__aeabi_dmul+0x234>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e72c      	b.n	80007ee <__aeabi_dmul+0x24a>
 8000994:	ea95 0f0c 	teq	r5, ip
 8000998:	d106      	bne.n	80009a8 <__aeabi_ddiv+0x1b0>
 800099a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099e:	f43f aefd 	beq.w	800079c <__aeabi_dmul+0x1f8>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e722      	b.n	80007ee <__aeabi_dmul+0x24a>
 80009a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b2:	f47f aec5 	bne.w	8000740 <__aeabi_dmul+0x19c>
 80009b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ba:	f47f af0d 	bne.w	80007d8 <__aeabi_dmul+0x234>
 80009be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c2:	f47f aeeb 	bne.w	800079c <__aeabi_dmul+0x1f8>
 80009c6:	e712      	b.n	80007ee <__aeabi_dmul+0x24a>

080009c8 <__aeabi_d2iz>:
 80009c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d0:	d215      	bcs.n	80009fe <__aeabi_d2iz+0x36>
 80009d2:	d511      	bpl.n	80009f8 <__aeabi_d2iz+0x30>
 80009d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009dc:	d912      	bls.n	8000a04 <__aeabi_d2iz+0x3c>
 80009de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	bf18      	it	ne
 80009f4:	4240      	negne	r0, r0
 80009f6:	4770      	bx	lr
 80009f8:	f04f 0000 	mov.w	r0, #0
 80009fc:	4770      	bx	lr
 80009fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a02:	d105      	bne.n	8000a10 <__aeabi_d2iz+0x48>
 8000a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	bf08      	it	eq
 8000a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a0e:	4770      	bx	lr
 8000a10:	f04f 0000 	mov.w	r0, #0
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_uldivmod>:
 8000a18:	b953      	cbnz	r3, 8000a30 <__aeabi_uldivmod+0x18>
 8000a1a:	b94a      	cbnz	r2, 8000a30 <__aeabi_uldivmod+0x18>
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	bf08      	it	eq
 8000a20:	2800      	cmpeq	r0, #0
 8000a22:	bf1c      	itt	ne
 8000a24:	f04f 31ff 	movne.w	r1, #4294967295
 8000a28:	f04f 30ff 	movne.w	r0, #4294967295
 8000a2c:	f000 b974 	b.w	8000d18 <__aeabi_idiv0>
 8000a30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a38:	f000 f806 	bl	8000a48 <__udivmoddi4>
 8000a3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a44:	b004      	add	sp, #16
 8000a46:	4770      	bx	lr

08000a48 <__udivmoddi4>:
 8000a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a4c:	9d08      	ldr	r5, [sp, #32]
 8000a4e:	4604      	mov	r4, r0
 8000a50:	468e      	mov	lr, r1
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d14d      	bne.n	8000af2 <__udivmoddi4+0xaa>
 8000a56:	428a      	cmp	r2, r1
 8000a58:	4694      	mov	ip, r2
 8000a5a:	d969      	bls.n	8000b30 <__udivmoddi4+0xe8>
 8000a5c:	fab2 f282 	clz	r2, r2
 8000a60:	b152      	cbz	r2, 8000a78 <__udivmoddi4+0x30>
 8000a62:	fa01 f302 	lsl.w	r3, r1, r2
 8000a66:	f1c2 0120 	rsb	r1, r2, #32
 8000a6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a72:	ea41 0e03 	orr.w	lr, r1, r3
 8000a76:	4094      	lsls	r4, r2
 8000a78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a7c:	0c21      	lsrs	r1, r4, #16
 8000a7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000a82:	fa1f f78c 	uxth.w	r7, ip
 8000a86:	fb08 e316 	mls	r3, r8, r6, lr
 8000a8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8e:	fb06 f107 	mul.w	r1, r6, r7
 8000a92:	4299      	cmp	r1, r3
 8000a94:	d90a      	bls.n	8000aac <__udivmoddi4+0x64>
 8000a96:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9e:	f080 811f 	bcs.w	8000ce0 <__udivmoddi4+0x298>
 8000aa2:	4299      	cmp	r1, r3
 8000aa4:	f240 811c 	bls.w	8000ce0 <__udivmoddi4+0x298>
 8000aa8:	3e02      	subs	r6, #2
 8000aaa:	4463      	add	r3, ip
 8000aac:	1a5b      	subs	r3, r3, r1
 8000aae:	b2a4      	uxth	r4, r4
 8000ab0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000abc:	fb00 f707 	mul.w	r7, r0, r7
 8000ac0:	42a7      	cmp	r7, r4
 8000ac2:	d90a      	bls.n	8000ada <__udivmoddi4+0x92>
 8000ac4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000acc:	f080 810a 	bcs.w	8000ce4 <__udivmoddi4+0x29c>
 8000ad0:	42a7      	cmp	r7, r4
 8000ad2:	f240 8107 	bls.w	8000ce4 <__udivmoddi4+0x29c>
 8000ad6:	4464      	add	r4, ip
 8000ad8:	3802      	subs	r0, #2
 8000ada:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ade:	1be4      	subs	r4, r4, r7
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	b11d      	cbz	r5, 8000aec <__udivmoddi4+0xa4>
 8000ae4:	40d4      	lsrs	r4, r2
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e9c5 4300 	strd	r4, r3, [r5]
 8000aec:	4631      	mov	r1, r6
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0xc2>
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	f000 80ef 	beq.w	8000cda <__udivmoddi4+0x292>
 8000afc:	2600      	movs	r6, #0
 8000afe:	e9c5 0100 	strd	r0, r1, [r5]
 8000b02:	4630      	mov	r0, r6
 8000b04:	4631      	mov	r1, r6
 8000b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0a:	fab3 f683 	clz	r6, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d14a      	bne.n	8000ba8 <__udivmoddi4+0x160>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d302      	bcc.n	8000b1c <__udivmoddi4+0xd4>
 8000b16:	4282      	cmp	r2, r0
 8000b18:	f200 80f9 	bhi.w	8000d0e <__udivmoddi4+0x2c6>
 8000b1c:	1a84      	subs	r4, r0, r2
 8000b1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b22:	2001      	movs	r0, #1
 8000b24:	469e      	mov	lr, r3
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	d0e0      	beq.n	8000aec <__udivmoddi4+0xa4>
 8000b2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2e:	e7dd      	b.n	8000aec <__udivmoddi4+0xa4>
 8000b30:	b902      	cbnz	r2, 8000b34 <__udivmoddi4+0xec>
 8000b32:	deff      	udf	#255	; 0xff
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	f040 8092 	bne.w	8000c62 <__udivmoddi4+0x21a>
 8000b3e:	eba1 010c 	sub.w	r1, r1, ip
 8000b42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b46:	fa1f fe8c 	uxth.w	lr, ip
 8000b4a:	2601      	movs	r6, #1
 8000b4c:	0c20      	lsrs	r0, r4, #16
 8000b4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b52:	fb07 1113 	mls	r1, r7, r3, r1
 8000b56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b5a:	fb0e f003 	mul.w	r0, lr, r3
 8000b5e:	4288      	cmp	r0, r1
 8000b60:	d908      	bls.n	8000b74 <__udivmoddi4+0x12c>
 8000b62:	eb1c 0101 	adds.w	r1, ip, r1
 8000b66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b6a:	d202      	bcs.n	8000b72 <__udivmoddi4+0x12a>
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	f200 80cb 	bhi.w	8000d08 <__udivmoddi4+0x2c0>
 8000b72:	4643      	mov	r3, r8
 8000b74:	1a09      	subs	r1, r1, r0
 8000b76:	b2a4      	uxth	r4, r4
 8000b78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000b80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b84:	fb0e fe00 	mul.w	lr, lr, r0
 8000b88:	45a6      	cmp	lr, r4
 8000b8a:	d908      	bls.n	8000b9e <__udivmoddi4+0x156>
 8000b8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b94:	d202      	bcs.n	8000b9c <__udivmoddi4+0x154>
 8000b96:	45a6      	cmp	lr, r4
 8000b98:	f200 80bb 	bhi.w	8000d12 <__udivmoddi4+0x2ca>
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ba2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba6:	e79c      	b.n	8000ae2 <__udivmoddi4+0x9a>
 8000ba8:	f1c6 0720 	rsb	r7, r6, #32
 8000bac:	40b3      	lsls	r3, r6
 8000bae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bb2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb6:	fa20 f407 	lsr.w	r4, r0, r7
 8000bba:	fa01 f306 	lsl.w	r3, r1, r6
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	40f9      	lsrs	r1, r7
 8000bc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000bca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bce:	0c20      	lsrs	r0, r4, #16
 8000bd0:	fa1f fe8c 	uxth.w	lr, ip
 8000bd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bdc:	fb08 f00e 	mul.w	r0, r8, lr
 8000be0:	4288      	cmp	r0, r1
 8000be2:	fa02 f206 	lsl.w	r2, r2, r6
 8000be6:	d90b      	bls.n	8000c00 <__udivmoddi4+0x1b8>
 8000be8:	eb1c 0101 	adds.w	r1, ip, r1
 8000bec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bf0:	f080 8088 	bcs.w	8000d04 <__udivmoddi4+0x2bc>
 8000bf4:	4288      	cmp	r0, r1
 8000bf6:	f240 8085 	bls.w	8000d04 <__udivmoddi4+0x2bc>
 8000bfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfe:	4461      	add	r1, ip
 8000c00:	1a09      	subs	r1, r1, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c08:	fb09 1110 	mls	r1, r9, r0, r1
 8000c0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c14:	458e      	cmp	lr, r1
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x1e2>
 8000c18:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c20:	d26c      	bcs.n	8000cfc <__udivmoddi4+0x2b4>
 8000c22:	458e      	cmp	lr, r1
 8000c24:	d96a      	bls.n	8000cfc <__udivmoddi4+0x2b4>
 8000c26:	3802      	subs	r0, #2
 8000c28:	4461      	add	r1, ip
 8000c2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000c32:	eba1 010e 	sub.w	r1, r1, lr
 8000c36:	42a1      	cmp	r1, r4
 8000c38:	46c8      	mov	r8, r9
 8000c3a:	46a6      	mov	lr, r4
 8000c3c:	d356      	bcc.n	8000cec <__udivmoddi4+0x2a4>
 8000c3e:	d053      	beq.n	8000ce8 <__udivmoddi4+0x2a0>
 8000c40:	b15d      	cbz	r5, 8000c5a <__udivmoddi4+0x212>
 8000c42:	ebb3 0208 	subs.w	r2, r3, r8
 8000c46:	eb61 010e 	sbc.w	r1, r1, lr
 8000c4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000c52:	40f1      	lsrs	r1, r6
 8000c54:	431f      	orrs	r7, r3
 8000c56:	e9c5 7100 	strd	r7, r1, [r5]
 8000c5a:	2600      	movs	r6, #0
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	f1c2 0320 	rsb	r3, r2, #32
 8000c66:	40d8      	lsrs	r0, r3
 8000c68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000c70:	4091      	lsls	r1, r2
 8000c72:	4301      	orrs	r1, r0
 8000c74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c78:	fa1f fe8c 	uxth.w	lr, ip
 8000c7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c80:	fb07 3610 	mls	r6, r7, r0, r3
 8000c84:	0c0b      	lsrs	r3, r1, #16
 8000c86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8e:	429e      	cmp	r6, r3
 8000c90:	fa04 f402 	lsl.w	r4, r4, r2
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x260>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9e:	d22f      	bcs.n	8000d00 <__udivmoddi4+0x2b8>
 8000ca0:	429e      	cmp	r6, r3
 8000ca2:	d92d      	bls.n	8000d00 <__udivmoddi4+0x2b8>
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	1b9b      	subs	r3, r3, r6
 8000caa:	b289      	uxth	r1, r1
 8000cac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x28a>
 8000cc0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc8:	d216      	bcs.n	8000cf8 <__udivmoddi4+0x2b0>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d914      	bls.n	8000cf8 <__udivmoddi4+0x2b0>
 8000cce:	3e02      	subs	r6, #2
 8000cd0:	4461      	add	r1, ip
 8000cd2:	1ac9      	subs	r1, r1, r3
 8000cd4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd8:	e738      	b.n	8000b4c <__udivmoddi4+0x104>
 8000cda:	462e      	mov	r6, r5
 8000cdc:	4628      	mov	r0, r5
 8000cde:	e705      	b.n	8000aec <__udivmoddi4+0xa4>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	e6e3      	b.n	8000aac <__udivmoddi4+0x64>
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	e6f8      	b.n	8000ada <__udivmoddi4+0x92>
 8000ce8:	454b      	cmp	r3, r9
 8000cea:	d2a9      	bcs.n	8000c40 <__udivmoddi4+0x1f8>
 8000cec:	ebb9 0802 	subs.w	r8, r9, r2
 8000cf0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf4:	3801      	subs	r0, #1
 8000cf6:	e7a3      	b.n	8000c40 <__udivmoddi4+0x1f8>
 8000cf8:	4646      	mov	r6, r8
 8000cfa:	e7ea      	b.n	8000cd2 <__udivmoddi4+0x28a>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	e794      	b.n	8000c2a <__udivmoddi4+0x1e2>
 8000d00:	4640      	mov	r0, r8
 8000d02:	e7d1      	b.n	8000ca8 <__udivmoddi4+0x260>
 8000d04:	46d0      	mov	r8, sl
 8000d06:	e77b      	b.n	8000c00 <__udivmoddi4+0x1b8>
 8000d08:	3b02      	subs	r3, #2
 8000d0a:	4461      	add	r1, ip
 8000d0c:	e732      	b.n	8000b74 <__udivmoddi4+0x12c>
 8000d0e:	4630      	mov	r0, r6
 8000d10:	e709      	b.n	8000b26 <__udivmoddi4+0xde>
 8000d12:	4464      	add	r4, ip
 8000d14:	3802      	subs	r0, #2
 8000d16:	e742      	b.n	8000b9e <__udivmoddi4+0x156>

08000d18 <__aeabi_idiv0>:
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	0a5a      	lsrs	r2, r3, #9
 8000d2c:	490f      	ldr	r1, [pc, #60]	; (8000d6c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000d2e:	fba1 1202 	umull	r1, r2, r1, r2
 8000d32:	09d2      	lsrs	r2, r2, #7
 8000d34:	490e      	ldr	r1, [pc, #56]	; (8000d70 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000d36:	fb01 f202 	mul.w	r2, r1, r2
 8000d3a:	1a9b      	subs	r3, r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	0a5b      	lsrs	r3, r3, #9
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000d46:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4a:	09db      	lsrs	r3, r3, #7
 8000d4c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	441a      	add	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	601a      	str	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	00044b83 	.word	0x00044b83
 8000d70:	3b9aca00 	.word	0x3b9aca00

08000d74 <UART_Send>:
#include "gpio.h"
#include <math.h>

extern UART_HandleTypeDef huart3;
int Checksum_Calc, count = 0;
void UART_Send(uint8_t u8_data) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	uint8_t *u8_pointer = &u8_data;
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, u8_pointer, 1, 100);
 8000d82:	2364      	movs	r3, #100	; 0x64
 8000d84:	2201      	movs	r2, #1
 8000d86:	68f9      	ldr	r1, [r7, #12]
 8000d88:	4806      	ldr	r0, [pc, #24]	; (8000da4 <UART_Send+0x30>)
 8000d8a:	f00d f90b 	bl	800dfa4 <HAL_UART_Transmit>

	Checksum_Calc += u8_data;
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <UART_Send+0x34>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a03      	ldr	r2, [pc, #12]	; (8000da8 <UART_Send+0x34>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200018c4 	.word	0x200018c4
 8000da8:	20000368 	.word	0x20000368

08000dac <UART_Send_SetMotorPosition>:

void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position,
		uint16_t Time) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
 8000db6:	460b      	mov	r3, r1
 8000db8:	80bb      	strh	r3, [r7, #4]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	807b      	strh	r3, [r7, #2]
	Checksum_Calc = 0;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <UART_Send_SetMotorPosition+0x84>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
	UART_Send(0x80 + motorId);    //header mark & broadcast ID
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	3b80      	subs	r3, #128	; 0x80
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ffd1 	bl	8000d74 <UART_Send>
	UART_Send(0x83);              //header mark & command code
 8000dd2:	2083      	movs	r0, #131	; 0x83
 8000dd4:	f7ff ffce 	bl	8000d74 <UART_Send>
	UART_Send(0x05);              //total data length
 8000dd8:	2005      	movs	r0, #5
 8000dda:	f7ff ffcb 	bl	8000d74 <UART_Send>
	UART_Send((Position / 256) & 0x7F);  //Servo Pos_H
 8000dde:	88bb      	ldrh	r3, [r7, #4]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ffc1 	bl	8000d74 <UART_Send>
	UART_Send(Position % 256);           //Servo Pos_L
 8000df2:	88bb      	ldrh	r3, [r7, #4]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ffbc 	bl	8000d74 <UART_Send>
	UART_Send((Time / 256) & 0x7F); //Servo Time_H
 8000dfc:	887b      	ldrh	r3, [r7, #2]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ffb2 	bl	8000d74 <UART_Send>
	UART_Send(Time % 256);          //Servo Time_L
 8000e10:	887b      	ldrh	r3, [r7, #2]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ffad 	bl	8000d74 <UART_Send>
	UART_Send(Checksum_Calc);     //data length (one servo with time and speed)
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <UART_Send_SetMotorPosition+0x84>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ffa7 	bl	8000d74 <UART_Send>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000368 	.word	0x20000368

08000e34 <VL53_Init>:

const int CAKE_HEIGHT[3] = { 19, 20, 20 };

int CakeHeightGate[3][3];

void VL53_Init() {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
	uint32_t refSpadCount[3];
	uint8_t isApertureSpads[3];
	uint8_t VhvSettings[3];
	uint8_t PhaseCal[3];

	for (size_t i = 0; i < 3; i++) {
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e3e:	e01c      	b.n	8000e7a <VL53_Init+0x46>
		vl53_dev[i] = &vl53l0x_c[i];
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	4a6f      	ldr	r2, [pc, #444]	; (8001008 <VL53_Init+0x1d4>)
 8000e4c:	441a      	add	r2, r3
 8000e4e:	496f      	ldr	r1, [pc, #444]	; (800100c <VL53_Init+0x1d8>)
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_GPIO_WritePin(TOF_XSHUT_PORT[i], TOF_XSHUT_PIN[i], GPIO_PIN_RESET); // put XSHUT to low (Disable VL53)
 8000e56:	4a6e      	ldr	r2, [pc, #440]	; (8001010 <VL53_Init+0x1dc>)
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e5e:	4a6d      	ldr	r2, [pc, #436]	; (8001014 <VL53_Init+0x1e0>)
 8000e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e66:	2200      	movs	r2, #0
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f008 fd11 	bl	8009890 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000e6e:	2064      	movs	r0, #100	; 0x64
 8000e70:	f007 fa3e 	bl	80082f0 <HAL_Delay>
	for (size_t i = 0; i < 3; i++) {
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	3301      	adds	r3, #1
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d9df      	bls.n	8000e40 <VL53_Init+0xc>
	}

	for (size_t i = 0; i < 3; i++) {
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
 8000e84:	e0b6      	b.n	8000ff4 <VL53_Init+0x1c0>
		isVL53_InitSuccess[i] = 1;
 8000e86:	4a64      	ldr	r2, [pc, #400]	; (8001018 <VL53_Init+0x1e4>)
 8000e88:	6a3b      	ldr	r3, [r7, #32]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]
		VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	77fb      	strb	r3, [r7, #31]

		HAL_GPIO_WritePin(TOF_XSHUT_PORT[i], TOF_XSHUT_PIN[i], GPIO_PIN_SET); // put XSHUT to high (Enable VL53)
 8000e94:	4a5e      	ldr	r2, [pc, #376]	; (8001010 <VL53_Init+0x1dc>)
 8000e96:	6a3b      	ldr	r3, [r7, #32]
 8000e98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e9c:	4a5d      	ldr	r2, [pc, #372]	; (8001014 <VL53_Init+0x1e0>)
 8000e9e:	6a3b      	ldr	r3, [r7, #32]
 8000ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f008 fcf2 	bl	8009890 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000eac:	2064      	movs	r0, #100	; 0x64
 8000eae:	f007 fa1f 	bl	80082f0 <HAL_Delay>

		vl53_dev[i]->I2cHandle = &hi2c1;
 8000eb2:	4a56      	ldr	r2, [pc, #344]	; (800100c <VL53_Init+0x1d8>)
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
 8000eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eba:	4a58      	ldr	r2, [pc, #352]	; (800101c <VL53_Init+0x1e8>)
 8000ebc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
		vl53_dev[i]->I2cDevAddr = 0x29 << 1; // 0x52 -> Default address
 8000ec0:	4a52      	ldr	r2, [pc, #328]	; (800100c <VL53_Init+0x1d8>)
 8000ec2:	6a3b      	ldr	r3, [r7, #32]
 8000ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec8:	2252      	movs	r2, #82	; 0x52
 8000eca:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		Status = VL53L0X_SetDeviceAddress(vl53_dev[i],
 8000ece:	4a4f      	ldr	r2, [pc, #316]	; (800100c <VL53_Init+0x1d8>)
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
				(0x29 + VL53_ADDRESS[i] + 1) << 1);
 8000ed6:	4952      	ldr	r1, [pc, #328]	; (8001020 <VL53_Init+0x1ec>)
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
 8000eda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	332a      	adds	r3, #42	; 0x2a
 8000ee2:	b2db      	uxtb	r3, r3
		Status = VL53L0X_SetDeviceAddress(vl53_dev[i],
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4610      	mov	r0, r2
 8000eec:	f00e fb41 	bl	800f572 <VL53L0X_SetDeviceAddress>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	77fb      	strb	r3, [r7, #31]
		vl53_dev[i]->I2cDevAddr = (0x29 + VL53_ADDRESS[i] + 1) << 1;
 8000ef4:	4a4a      	ldr	r2, [pc, #296]	; (8001020 <VL53_Init+0x1ec>)
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	332a      	adds	r3, #42	; 0x2a
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4942      	ldr	r1, [pc, #264]	; (800100c <VL53_Init+0x1d8>)
 8000f04:	6a3b      	ldr	r3, [r7, #32]
 8000f06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f0a:	0052      	lsls	r2, r2, #1
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		if (Status != VL53L0X_ERROR_NONE) {
 8000f12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d004      	beq.n	8000f24 <VL53_Init+0xf0>
			isVL53_InitSuccess[i] = 0;
 8000f1a:	4a3f      	ldr	r2, [pc, #252]	; (8001018 <VL53_Init+0x1e4>)
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	4413      	add	r3, r2
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
		}

		// VL53L0X init for Single Measurement
		Status = VL53L0X_DataInit(vl53_dev[i]);
 8000f24:	4a39      	ldr	r2, [pc, #228]	; (800100c <VL53_Init+0x1d8>)
 8000f26:	6a3b      	ldr	r3, [r7, #32]
 8000f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f00e fb39 	bl	800f5a4 <VL53L0X_DataInit>
 8000f32:	4603      	mov	r3, r0
 8000f34:	77fb      	strb	r3, [r7, #31]
		if (Status != VL53L0X_ERROR_NONE) {
 8000f36:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d004      	beq.n	8000f48 <VL53_Init+0x114>
			isVL53_InitSuccess[i] = 0;
 8000f3e:	4a36      	ldr	r2, [pc, #216]	; (8001018 <VL53_Init+0x1e4>)
 8000f40:	6a3b      	ldr	r3, [r7, #32]
 8000f42:	4413      	add	r3, r2
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
		}

		VL53L0X_StaticInit(vl53_dev[i]);
 8000f48:	4a30      	ldr	r2, [pc, #192]	; (800100c <VL53_Init+0x1d8>)
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00e fc8b 	bl	800f86c <VL53L0X_StaticInit>
		VL53L0X_PerformRefCalibration(vl53_dev[i], &VhvSettings[i],
 8000f56:	4a2d      	ldr	r2, [pc, #180]	; (800100c <VL53_Init+0x1d8>)
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f5e:	f107 0208 	add.w	r2, r7, #8
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	18d1      	adds	r1, r2, r3
 8000f66:	1d3a      	adds	r2, r7, #4
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	f00f faf9 	bl	8010564 <VL53L0X_PerformRefCalibration>
				&PhaseCal[i]);
		VL53L0X_PerformRefSpadManagement(vl53_dev[i], &refSpadCount[i],
 8000f72:	4a26      	ldr	r2, [pc, #152]	; (800100c <VL53_Init+0x1d8>)
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f7a:	f107 0210 	add.w	r2, r7, #16
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	18d1      	adds	r1, r2, r3
 8000f84:	f107 020c 	add.w	r2, r7, #12
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	f00f ff77 	bl	8010e80 <VL53L0X_PerformRefSpadManagement>
		// Enable Sigma
		// Standard :      (18 * 65536)
		// High accuracy : (18 * 65536)
		// Long range :    (60 * 65536)
		// High speed :    (32 * 65536)
		VL53L0X_SetLimitCheckEnable(vl53_dev[i],
 8000f92:	4a1e      	ldr	r2, [pc, #120]	; (800100c <VL53_Init+0x1d8>)
 8000f94:	6a3b      	ldr	r3, [r7, #32]
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00f f8da 	bl	8010158 <VL53L0X_SetLimitCheckEnable>
		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
		VL53L0X_SetLimitCheckValue(vl53_dev[i],
 8000fa4:	4a19      	ldr	r2, [pc, #100]	; (800100c <VL53_Init+0x1d8>)
 8000fa6:	6a3b      	ldr	r3, [r7, #32]
 8000fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fac:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f00f f980 	bl	80102b8 <VL53L0X_SetLimitCheckValue>
		// Enable Return Signal Rate
		// Standard :      (0.25 * 65536)
		// High accuracy : (0.25 * 65536)
		// Long range :    (0.10 * 65536)
		// High speed :    (0.25 * 65536)
		VL53L0X_SetLimitCheckEnable(vl53_dev[i],
 8000fb8:	4a14      	ldr	r2, [pc, #80]	; (800100c <VL53_Init+0x1d8>)
 8000fba:	6a3b      	ldr	r3, [r7, #32]
 8000fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f00f f8c7 	bl	8010158 <VL53L0X_SetLimitCheckEnable>
		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
		VL53L0X_SetLimitCheckValue(vl53_dev[i],
 8000fca:	4a10      	ldr	r2, [pc, #64]	; (800100c <VL53_Init+0x1d8>)
 8000fcc:	6a3b      	ldr	r3, [r7, #32]
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f00f f96d 	bl	80102b8 <VL53L0X_SetLimitCheckValue>
		// Set the total measurement time
		// Standard :       30000
		// High accuracy : 200000
		// Long range :     33000
		// High speed :     20000
		VL53L0X_SetMeasurementTimingBudgetMicroSeconds(vl53_dev[i], 200000);
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <VL53_Init+0x1d8>)
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe6:	490f      	ldr	r1, [pc, #60]	; (8001024 <VL53_Init+0x1f0>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f00e feaf 	bl	800fd4c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	for (size_t i = 0; i < 3; i++) {
 8000fee:	6a3b      	ldr	r3, [r7, #32]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	623b      	str	r3, [r7, #32]
 8000ff4:	6a3b      	ldr	r3, [r7, #32]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	f67f af45 	bls.w	8000e86 <VL53_Init+0x52>
		// Enable Long Distance
		// VL53L0X_SetVcselPulsePeriod(vl53_dev[i], VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
		// VL53L0X_SetVcselPulsePeriod(vl53_dev[i], VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
	}

}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200003d4 	.word	0x200003d4
 800100c:	20000884 	.word	0x20000884
 8001010:	20000000 	.word	0x20000000
 8001014:	08014660 	.word	0x08014660
 8001018:	2000036c 	.word	0x2000036c
 800101c:	200009d0 	.word	0x200009d0
 8001020:	08014668 	.word	0x08014668
 8001024:	00030d40 	.word	0x00030d40

08001028 <VL53_FirstMeasurement>:

void VL53_FirstMeasurement() {
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
	const int MeasurementTime = 3;
 800102e:	2303      	movs	r3, #3
 8001030:	60fb      	str	r3, [r7, #12]
	int AverageHeight[3] = { 0 };
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]

	for (size_t Time = 0; Time < MeasurementTime; Time++) {
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	e036      	b.n	80010b0 <VL53_FirstMeasurement+0x88>
		for (size_t i = 0; i < 3; i++) {
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
 8001046:	e02d      	b.n	80010a4 <VL53_FirstMeasurement+0x7c>
			VL53_Status[i] = VL53L0X_PerformSingleRangingMeasurement(
 8001048:	4a54      	ldr	r2, [pc, #336]	; (800119c <VL53_FirstMeasurement+0x174>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4613      	mov	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4a51      	ldr	r2, [pc, #324]	; (80011a0 <VL53_FirstMeasurement+0x178>)
 800105c:	4413      	add	r3, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f00f fd22 	bl	8010aa8 <VL53L0X_PerformSingleRangingMeasurement>
 8001064:	4603      	mov	r3, r0
 8001066:	4619      	mov	r1, r3
 8001068:	4a4e      	ldr	r2, [pc, #312]	; (80011a4 <VL53_FirstMeasurement+0x17c>)
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	4413      	add	r3, r2
 800106e:	460a      	mov	r2, r1
 8001070:	701a      	strb	r2, [r3, #0]
					vl53_dev[i], &(RangingData[i]));
			AverageHeight[i] += RangingData[i].RangeMilliMeter;
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	3320      	adds	r3, #32
 8001078:	443b      	add	r3, r7
 800107a:	f853 1c20 	ldr.w	r1, [r3, #-32]
 800107e:	4848      	ldr	r0, [pc, #288]	; (80011a0 <VL53_FirstMeasurement+0x178>)
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4613      	mov	r3, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	1a9b      	subs	r3, r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4403      	add	r3, r0
 800108c:	3308      	adds	r3, #8
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	18ca      	adds	r2, r1, r3
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	3320      	adds	r3, #32
 8001098:	443b      	add	r3, r7
 800109a:	f843 2c20 	str.w	r2, [r3, #-32]
		for (size_t i = 0; i < 3; i++) {
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	3301      	adds	r3, #1
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d9ce      	bls.n	8001048 <VL53_FirstMeasurement+0x20>
	for (size_t Time = 0; Time < MeasurementTime; Time++) {
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3301      	adds	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d3c4      	bcc.n	8001042 <VL53_FirstMeasurement+0x1a>
		}
	}
	for (size_t i = 0; i < 3; i++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	e01b      	b.n	80010f6 <VL53_FirstMeasurement+0xce>
		GroundHeight[i] = AverageHeight[i] / 3.0;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	3320      	adds	r3, #32
 80010c4:	443b      	add	r3, r7
 80010c6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fa00 	bl	80004d0 <__aeabi_i2d>
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b34      	ldr	r3, [pc, #208]	; (80011a8 <VL53_FirstMeasurement+0x180>)
 80010d6:	f7ff fb8f 	bl	80007f8 <__aeabi_ddiv>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	f7ff fc71 	bl	80009c8 <__aeabi_d2iz>
 80010e6:	4602      	mov	r2, r0
 80010e8:	4930      	ldr	r1, [pc, #192]	; (80011ac <VL53_FirstMeasurement+0x184>)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < 3; i++) {
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3301      	adds	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d9e0      	bls.n	80010be <VL53_FirstMeasurement+0x96>
	}

	for (size_t i = 0; i < 3; i++) {
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	e044      	b.n	800118c <VL53_FirstMeasurement+0x164>
		CakeHeightGate[i][0] = GroundHeight[i] - CAKE_HEIGHT[i] / 2;
 8001102:	4a2a      	ldr	r2, [pc, #168]	; (80011ac <VL53_FirstMeasurement+0x184>)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800110a:	4929      	ldr	r1, [pc, #164]	; (80011b0 <VL53_FirstMeasurement+0x188>)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001112:	0fd9      	lsrs	r1, r3, #31
 8001114:	440b      	add	r3, r1
 8001116:	105b      	asrs	r3, r3, #1
 8001118:	425b      	negs	r3, r3
 800111a:	18d1      	adds	r1, r2, r3
 800111c:	4825      	ldr	r0, [pc, #148]	; (80011b4 <VL53_FirstMeasurement+0x18c>)
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4403      	add	r3, r0
 800112a:	6019      	str	r1, [r3, #0]
		CakeHeightGate[i][1] = CakeHeightGate[i][0] - CAKE_HEIGHT[i];
 800112c:	4921      	ldr	r1, [pc, #132]	; (80011b4 <VL53_FirstMeasurement+0x18c>)
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	491c      	ldr	r1, [pc, #112]	; (80011b0 <VL53_FirstMeasurement+0x188>)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001144:	1ad1      	subs	r1, r2, r3
 8001146:	481b      	ldr	r0, [pc, #108]	; (80011b4 <VL53_FirstMeasurement+0x18c>)
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4403      	add	r3, r0
 8001154:	3304      	adds	r3, #4
 8001156:	6019      	str	r1, [r3, #0]
		CakeHeightGate[i][2] = CakeHeightGate[i][1] - CAKE_HEIGHT[i];
 8001158:	4916      	ldr	r1, [pc, #88]	; (80011b4 <VL53_FirstMeasurement+0x18c>)
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4613      	mov	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	3304      	adds	r3, #4
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4911      	ldr	r1, [pc, #68]	; (80011b0 <VL53_FirstMeasurement+0x188>)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001172:	1ad1      	subs	r1, r2, r3
 8001174:	480f      	ldr	r0, [pc, #60]	; (80011b4 <VL53_FirstMeasurement+0x18c>)
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4613      	mov	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4403      	add	r3, r0
 8001182:	3308      	adds	r3, #8
 8001184:	6019      	str	r1, [r3, #0]
	for (size_t i = 0; i < 3; i++) {
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	3301      	adds	r3, #1
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d9b7      	bls.n	8001102 <VL53_FirstMeasurement+0xda>
	}
}
 8001192:	bf00      	nop
 8001194:	bf00      	nop
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000884 	.word	0x20000884
 80011a0:	20000380 	.word	0x20000380
 80011a4:	20000370 	.word	0x20000370
 80011a8:	40080000 	.word	0x40080000
 80011ac:	20000890 	.word	0x20000890
 80011b0:	08014674 	.word	0x08014674
 80011b4:	200008a8 	.word	0x200008a8

080011b8 <VL53_Update>:

// Measurement distance
void VL53_Update() {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
	for (size_t i = 0; i < 3; i++) {
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	e025      	b.n	8001210 <VL53_Update+0x58>
		VL53_Status[i] = VL53L0X_PerformSingleRangingMeasurement(vl53_dev[i],
 80011c4:	4a3c      	ldr	r2, [pc, #240]	; (80012b8 <VL53_Update+0x100>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	1a9b      	subs	r3, r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4a39      	ldr	r2, [pc, #228]	; (80012bc <VL53_Update+0x104>)
 80011d8:	4413      	add	r3, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f00f fc64 	bl	8010aa8 <VL53L0X_PerformSingleRangingMeasurement>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4619      	mov	r1, r3
 80011e4:	4a36      	ldr	r2, [pc, #216]	; (80012c0 <VL53_Update+0x108>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	460a      	mov	r2, r1
 80011ec:	701a      	strb	r2, [r3, #0]
				&(RangingData[i]));
		VL53_RangeResult[i] = RangingData[i].RangeMilliMeter;
 80011ee:	4933      	ldr	r1, [pc, #204]	; (80012bc <VL53_Update+0x104>)
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	1a9b      	subs	r3, r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	3308      	adds	r3, #8
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	4a30      	ldr	r2, [pc, #192]	; (80012c4 <VL53_Update+0x10c>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (size_t i = 0; i < 3; i++) {
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3301      	adds	r3, #1
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d9d6      	bls.n	80011c4 <VL53_Update+0xc>
	}

	for (size_t i = 0; i < 3; i++) {
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	e045      	b.n	80012a8 <VL53_Update+0xf0>
		if (VL53_RangeResult[i] < CakeHeightGate[i][2]) {
 800121c:	4a29      	ldr	r2, [pc, #164]	; (80012c4 <VL53_Update+0x10c>)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001224:	4828      	ldr	r0, [pc, #160]	; (80012c8 <VL53_Update+0x110>)
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4403      	add	r3, r0
 8001232:	3308      	adds	r3, #8
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4299      	cmp	r1, r3
 8001238:	da05      	bge.n	8001246 <VL53_Update+0x8e>
			CakeStatus[i] = 3;
 800123a:	4a24      	ldr	r2, [pc, #144]	; (80012cc <VL53_Update+0x114>)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2103      	movs	r1, #3
 8001240:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001244:	e02d      	b.n	80012a2 <VL53_Update+0xea>
		}
		else if (VL53_RangeResult[i] < CakeHeightGate[i][1]) {
 8001246:	4a1f      	ldr	r2, [pc, #124]	; (80012c4 <VL53_Update+0x10c>)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800124e:	481e      	ldr	r0, [pc, #120]	; (80012c8 <VL53_Update+0x110>)
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4403      	add	r3, r0
 800125c:	3304      	adds	r3, #4
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4299      	cmp	r1, r3
 8001262:	da05      	bge.n	8001270 <VL53_Update+0xb8>
			CakeStatus[i] = 2;
 8001264:	4a19      	ldr	r2, [pc, #100]	; (80012cc <VL53_Update+0x114>)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2102      	movs	r1, #2
 800126a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800126e:	e018      	b.n	80012a2 <VL53_Update+0xea>
		}
		else if (VL53_RangeResult[i] < CakeHeightGate[i][0]) {
 8001270:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <VL53_Update+0x10c>)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001278:	4813      	ldr	r0, [pc, #76]	; (80012c8 <VL53_Update+0x110>)
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4403      	add	r3, r0
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4299      	cmp	r1, r3
 800128a:	da05      	bge.n	8001298 <VL53_Update+0xe0>
			CakeStatus[i] = 1;
 800128c:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <VL53_Update+0x114>)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001296:	e004      	b.n	80012a2 <VL53_Update+0xea>
		}
		else {
			CakeStatus[i] = 0;
 8001298:	4a0c      	ldr	r2, [pc, #48]	; (80012cc <VL53_Update+0x114>)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2100      	movs	r1, #0
 800129e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (size_t i = 0; i < 3; i++) {
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	3301      	adds	r3, #1
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d9b6      	bls.n	800121c <VL53_Update+0x64>
		}
	}
}
 80012ae:	bf00      	nop
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000884 	.word	0x20000884
 80012bc:	20000380 	.word	0x20000380
 80012c0:	20000370 	.word	0x20000370
 80012c4:	20000374 	.word	0x20000374
 80012c8:	200008a8 	.word	0x200008a8
 80012cc:	2000089c 	.word	0x2000089c

080012d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012d6:	463b      	mov	r3, r7
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012e2:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <MX_ADC1_Init+0xd0>)
 80012e4:	4a2f      	ldr	r2, [pc, #188]	; (80013a4 <MX_ADC1_Init+0xd4>)
 80012e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <MX_ADC1_Init+0xd0>)
 80012ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012f0:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <MX_ADC1_Init+0xd0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <MX_ADC1_Init+0xd0>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <MX_ADC1_Init+0xd0>)
 80012fe:	2201      	movs	r2, #1
 8001300:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <MX_ADC1_Init+0xd0>)
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <MX_ADC1_Init+0xd0>)
 800130c:	2200      	movs	r2, #0
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <MX_ADC1_Init+0xd0>)
 8001312:	4a25      	ldr	r2, [pc, #148]	; (80013a8 <MX_ADC1_Init+0xd8>)
 8001314:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <MX_ADC1_Init+0xd0>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800131c:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <MX_ADC1_Init+0xd0>)
 800131e:	2203      	movs	r2, #3
 8001320:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <MX_ADC1_Init+0xd0>)
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <MX_ADC1_Init+0xd0>)
 800132c:	2201      	movs	r2, #1
 800132e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001330:	481b      	ldr	r0, [pc, #108]	; (80013a0 <MX_ADC1_Init+0xd0>)
 8001332:	f007 f801 	bl	8008338 <HAL_ADC_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800133c:	f002 fb2e 	bl	800399c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001340:	2305      	movs	r3, #5
 8001342:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001344:	2301      	movs	r3, #1
 8001346:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	4619      	mov	r1, r3
 8001350:	4813      	ldr	r0, [pc, #76]	; (80013a0 <MX_ADC1_Init+0xd0>)
 8001352:	f007 f835 	bl	80083c0 <HAL_ADC_ConfigChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800135c:	f002 fb1e 	bl	800399c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001360:	2306      	movs	r3, #6
 8001362:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001364:	2302      	movs	r3, #2
 8001366:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001368:	463b      	mov	r3, r7
 800136a:	4619      	mov	r1, r3
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <MX_ADC1_Init+0xd0>)
 800136e:	f007 f827 	bl	80083c0 <HAL_ADC_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001378:	f002 fb10 	bl	800399c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800137c:	2307      	movs	r3, #7
 800137e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001380:	2303      	movs	r3, #3
 8001382:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001384:	463b      	mov	r3, r7
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_ADC1_Init+0xd0>)
 800138a:	f007 f819 	bl	80083c0 <HAL_ADC_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001394:	f002 fb02 	bl	800399c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200008cc 	.word	0x200008cc
 80013a4:	40012000 	.word	0x40012000
 80013a8:	0f000001 	.word	0x0f000001

080013ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a2f      	ldr	r2, [pc, #188]	; (8001488 <HAL_ADC_MspInit+0xdc>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d157      	bne.n	800147e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b2e      	ldr	r3, [pc, #184]	; (800148c <HAL_ADC_MspInit+0xe0>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a2d      	ldr	r2, [pc, #180]	; (800148c <HAL_ADC_MspInit+0xe0>)
 80013d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b2b      	ldr	r3, [pc, #172]	; (800148c <HAL_ADC_MspInit+0xe0>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b27      	ldr	r3, [pc, #156]	; (800148c <HAL_ADC_MspInit+0xe0>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a26      	ldr	r2, [pc, #152]	; (800148c <HAL_ADC_MspInit+0xe0>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <HAL_ADC_MspInit+0xe0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001406:	23e0      	movs	r3, #224	; 0xe0
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140a:	2303      	movs	r3, #3
 800140c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	481d      	ldr	r0, [pc, #116]	; (8001490 <HAL_ADC_MspInit+0xe4>)
 800141a:	f007 ffb1 	bl	8009380 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_ADC_MspInit+0xe8>)
 8001420:	4a1d      	ldr	r2, [pc, #116]	; (8001498 <HAL_ADC_MspInit+0xec>)
 8001422:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_ADC_MspInit+0xe8>)
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <HAL_ADC_MspInit+0xe8>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <HAL_ADC_MspInit+0xe8>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_ADC_MspInit+0xe8>)
 8001438:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800143c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_ADC_MspInit+0xe8>)
 8001440:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001444:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_ADC_MspInit+0xe8>)
 8001448:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800144c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_ADC_MspInit+0xe8>)
 8001450:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001454:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <HAL_ADC_MspInit+0xe8>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_ADC_MspInit+0xe8>)
 800145e:	2200      	movs	r2, #0
 8001460:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001462:	480c      	ldr	r0, [pc, #48]	; (8001494 <HAL_ADC_MspInit+0xe8>)
 8001464:	f007 fb1e 	bl	8008aa4 <HAL_DMA_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800146e:	f002 fa95 	bl	800399c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_ADC_MspInit+0xe8>)
 8001476:	639a      	str	r2, [r3, #56]	; 0x38
 8001478:	4a06      	ldr	r2, [pc, #24]	; (8001494 <HAL_ADC_MspInit+0xe8>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40012000 	.word	0x40012000
 800148c:	40023800 	.word	0x40023800
 8001490:	40020000 	.word	0x40020000
 8001494:	20000914 	.word	0x20000914
 8001498:	40026410 	.word	0x40026410

0800149c <bee>:
#include <string.h>

#ifndef __BEE_H__
#define __BEE_H__

uint8_t bee(char *str) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

	uint8_t data = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]

	if (strcmp((char*) str, (char*) "one") == 0) {
 80014a8:	4930      	ldr	r1, [pc, #192]	; (800156c <bee+0xd0>)
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7fe feac 	bl	8000208 <strcmp>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <bee+0x20>
		data = 'a';
 80014b6:	2361      	movs	r3, #97	; 0x61
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	e051      	b.n	8001560 <bee+0xc4>
	}
	else if (strcmp((char*) str, (char*) "two") == 0) {
 80014bc:	492c      	ldr	r1, [pc, #176]	; (8001570 <bee+0xd4>)
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7fe fea2 	bl	8000208 <strcmp>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <bee+0x34>
		data = 'b';
 80014ca:	2362      	movs	r3, #98	; 0x62
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e047      	b.n	8001560 <bee+0xc4>
	}
	else if (strcmp((char*) str, (char*) "three") == 0) {
 80014d0:	4928      	ldr	r1, [pc, #160]	; (8001574 <bee+0xd8>)
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7fe fe98 	bl	8000208 <strcmp>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <bee+0x48>
		data = 'c';
 80014de:	2363      	movs	r3, #99	; 0x63
 80014e0:	73fb      	strb	r3, [r7, #15]
 80014e2:	e03d      	b.n	8001560 <bee+0xc4>
	}
	else if (strcmp((char*) str, (char*) "legend") == 0) {
 80014e4:	4924      	ldr	r1, [pc, #144]	; (8001578 <bee+0xdc>)
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7fe fe8e 	bl	8000208 <strcmp>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <bee+0x5c>
		data = 'l';
 80014f2:	236c      	movs	r3, #108	; 0x6c
 80014f4:	73fb      	strb	r3, [r7, #15]
 80014f6:	e033      	b.n	8001560 <bee+0xc4>
	}
	else if (strcmp((char*) str, (char*) "cherry") == 0) {
 80014f8:	4920      	ldr	r1, [pc, #128]	; (800157c <bee+0xe0>)
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7fe fe84 	bl	8000208 <strcmp>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <bee+0x70>
		data = 'r';
 8001506:	2372      	movs	r3, #114	; 0x72
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	e029      	b.n	8001560 <bee+0xc4>
	}
	else if (strcmp((char*) str, (char*) "funny") == 0) {
 800150c:	491c      	ldr	r1, [pc, #112]	; (8001580 <bee+0xe4>)
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7fe fe7a 	bl	8000208 <strcmp>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d102      	bne.n	8001520 <bee+0x84>
		data = 'f';
 800151a:	2366      	movs	r3, #102	; 0x66
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e01f      	b.n	8001560 <bee+0xc4>
	}
	else if (strcmp((char*) str, (char*) "steal") == 0) {
 8001520:	4918      	ldr	r1, [pc, #96]	; (8001584 <bee+0xe8>)
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7fe fe70 	bl	8000208 <strcmp>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <bee+0x98>
		data = 's';
 800152e:	2373      	movs	r3, #115	; 0x73
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	e015      	b.n	8001560 <bee+0xc4>
	}
	else if (strcmp((char*) str, (char*) "home") == 0) {
 8001534:	4914      	ldr	r1, [pc, #80]	; (8001588 <bee+0xec>)
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7fe fe66 	bl	8000208 <strcmp>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <bee+0xac>
		data = 'h';
 8001542:	2368      	movs	r3, #104	; 0x68
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	e00b      	b.n	8001560 <bee+0xc4>
	}
	else if (strcmp((char*) str, (char*) "end") == 0) {
 8001548:	4910      	ldr	r1, [pc, #64]	; (800158c <bee+0xf0>)
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7fe fe5c 	bl	8000208 <strcmp>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d102      	bne.n	800155c <bee+0xc0>
		data = 'o';
 8001556:	236f      	movs	r3, #111	; 0x6f
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	e001      	b.n	8001560 <bee+0xc4>
	}
	else {
		data = 'X';
 800155c:	2358      	movs	r3, #88	; 0x58
 800155e:	73fb      	strb	r3, [r7, #15]
	}

	return data;
 8001560:	7bfb      	ldrb	r3, [r7, #15]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	080143d8 	.word	0x080143d8
 8001570:	080143dc 	.word	0x080143dc
 8001574:	080143e0 	.word	0x080143e0
 8001578:	080143e8 	.word	0x080143e8
 800157c:	080143f0 	.word	0x080143f0
 8001580:	080143f8 	.word	0x080143f8
 8001584:	08014400 	.word	0x08014400
 8001588:	08014408 	.word	0x08014408
 800158c:	08014410 	.word	0x08014410

08001590 <score_transfer>:
int first_state[3] = { 0 };
extern int disguise, home, steal, putcherry, score_flag[10];
extern uint8_t score;
char scorecount[15] = { 0 };
extern int transfer_the_order;
void score_transfer() {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
	if (steady == 1
 8001596:	4b6e      	ldr	r3, [pc, #440]	; (8001750 <score_transfer+0x1c0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d11c      	bne.n	80015d8 <score_transfer+0x48>
			&& (score_flag[0] == 1 || score_flag[1] == 1 || score_flag[2] == 1
 800159e:	4b6d      	ldr	r3, [pc, #436]	; (8001754 <score_transfer+0x1c4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d00b      	beq.n	80015be <score_transfer+0x2e>
 80015a6:	4b6b      	ldr	r3, [pc, #428]	; (8001754 <score_transfer+0x1c4>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d007      	beq.n	80015be <score_transfer+0x2e>
 80015ae:	4b69      	ldr	r3, [pc, #420]	; (8001754 <score_transfer+0x1c4>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d003      	beq.n	80015be <score_transfer+0x2e>
					|| score_flag[3] == 1)) {
 80015b6:	4b67      	ldr	r3, [pc, #412]	; (8001754 <score_transfer+0x1c4>)
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d10c      	bne.n	80015d8 <score_transfer+0x48>
		score = bee("legend");
 80015be:	4866      	ldr	r0, [pc, #408]	; (8001758 <score_transfer+0x1c8>)
 80015c0:	f7ff ff6c 	bl	800149c <bee>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b64      	ldr	r3, [pc, #400]	; (800175c <score_transfer+0x1cc>)
 80015ca:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, &score, sizeof(bee("legend")));
 80015cc:	2201      	movs	r2, #1
 80015ce:	4963      	ldr	r1, [pc, #396]	; (800175c <score_transfer+0x1cc>)
 80015d0:	4863      	ldr	r0, [pc, #396]	; (8001760 <score_transfer+0x1d0>)
 80015d2:	f00c fd79 	bl	800e0c8 <HAL_UART_Transmit_IT>
 80015d6:	e056      	b.n	8001686 <score_transfer+0xf6>
//		strcpy(scorecount, "cherry");
//		score = bee(scorecount);
//		HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));

	}
	else if (steady == 0) {
 80015d8:	4b5d      	ldr	r3, [pc, #372]	; (8001750 <score_transfer+0x1c0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d152      	bne.n	8001686 <score_transfer+0xf6>
		for (int i = 0; i < 4; i++) {
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	e04c      	b.n	8001680 <score_transfer+0xf0>
			if (first_state[i] == 1 && score_flag[i] == 1) {
 80015e6:	4a5f      	ldr	r2, [pc, #380]	; (8001764 <score_transfer+0x1d4>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d112      	bne.n	8001618 <score_transfer+0x88>
 80015f2:	4a58      	ldr	r2, [pc, #352]	; (8001754 <score_transfer+0x1c4>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d10c      	bne.n	8001618 <score_transfer+0x88>
				score = bee("one");
 80015fe:	485a      	ldr	r0, [pc, #360]	; (8001768 <score_transfer+0x1d8>)
 8001600:	f7ff ff4c 	bl	800149c <bee>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	4b54      	ldr	r3, [pc, #336]	; (800175c <score_transfer+0x1cc>)
 800160a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, &score, sizeof(bee("one")));
 800160c:	2201      	movs	r2, #1
 800160e:	4953      	ldr	r1, [pc, #332]	; (800175c <score_transfer+0x1cc>)
 8001610:	4853      	ldr	r0, [pc, #332]	; (8001760 <score_transfer+0x1d0>)
 8001612:	f00c fd59 	bl	800e0c8 <HAL_UART_Transmit_IT>
 8001616:	e030      	b.n	800167a <score_transfer+0xea>
//				strcpy(scorecount, "cherry");
//				score = bee(scorecount);
//				HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));
			}
			else if (first_state[i] == 2 && score_flag[i] == 1) {
 8001618:	4a52      	ldr	r2, [pc, #328]	; (8001764 <score_transfer+0x1d4>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d112      	bne.n	800164a <score_transfer+0xba>
 8001624:	4a4b      	ldr	r2, [pc, #300]	; (8001754 <score_transfer+0x1c4>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d10c      	bne.n	800164a <score_transfer+0xba>
				score = bee("two");
 8001630:	484e      	ldr	r0, [pc, #312]	; (800176c <score_transfer+0x1dc>)
 8001632:	f7ff ff33 	bl	800149c <bee>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	4b48      	ldr	r3, [pc, #288]	; (800175c <score_transfer+0x1cc>)
 800163c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, &score, sizeof(bee("two")));
 800163e:	2201      	movs	r2, #1
 8001640:	4946      	ldr	r1, [pc, #280]	; (800175c <score_transfer+0x1cc>)
 8001642:	4847      	ldr	r0, [pc, #284]	; (8001760 <score_transfer+0x1d0>)
 8001644:	f00c fd40 	bl	800e0c8 <HAL_UART_Transmit_IT>
 8001648:	e017      	b.n	800167a <score_transfer+0xea>
//				strcpy(scorecount, "cherry");
//				score = bee(scorecount);
//				HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));
			}
			else if (first_state[i] == 3 && score_flag[i] == 1) {
 800164a:	4a46      	ldr	r2, [pc, #280]	; (8001764 <score_transfer+0x1d4>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d111      	bne.n	800167a <score_transfer+0xea>
 8001656:	4a3f      	ldr	r2, [pc, #252]	; (8001754 <score_transfer+0x1c4>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d10b      	bne.n	800167a <score_transfer+0xea>
				score = bee("three");
 8001662:	4843      	ldr	r0, [pc, #268]	; (8001770 <score_transfer+0x1e0>)
 8001664:	f7ff ff1a 	bl	800149c <bee>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	4b3b      	ldr	r3, [pc, #236]	; (800175c <score_transfer+0x1cc>)
 800166e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, &score, sizeof(bee("three")));
 8001670:	2201      	movs	r2, #1
 8001672:	493a      	ldr	r1, [pc, #232]	; (800175c <score_transfer+0x1cc>)
 8001674:	483a      	ldr	r0, [pc, #232]	; (8001760 <score_transfer+0x1d0>)
 8001676:	f00c fd27 	bl	800e0c8 <HAL_UART_Transmit_IT>
		for (int i = 0; i < 4; i++) {
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3301      	adds	r3, #1
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b03      	cmp	r3, #3
 8001684:	ddaf      	ble.n	80015e6 <score_transfer+0x56>
//				HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));

			}
		}
	}
	if (disguise == 1 && score_flag[4] == 1) {
 8001686:	4b3b      	ldr	r3, [pc, #236]	; (8001774 <score_transfer+0x1e4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d10f      	bne.n	80016ae <score_transfer+0x11e>
 800168e:	4b31      	ldr	r3, [pc, #196]	; (8001754 <score_transfer+0x1c4>)
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d10b      	bne.n	80016ae <score_transfer+0x11e>
		score = bee("funny");
 8001696:	4838      	ldr	r0, [pc, #224]	; (8001778 <score_transfer+0x1e8>)
 8001698:	f7ff ff00 	bl	800149c <bee>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	4b2e      	ldr	r3, [pc, #184]	; (800175c <score_transfer+0x1cc>)
 80016a2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));
 80016a4:	2201      	movs	r2, #1
 80016a6:	492d      	ldr	r1, [pc, #180]	; (800175c <score_transfer+0x1cc>)
 80016a8:	482d      	ldr	r0, [pc, #180]	; (8001760 <score_transfer+0x1d0>)
 80016aa:	f00c fd0d 	bl	800e0c8 <HAL_UART_Transmit_IT>
	}
	if (finish == 1 && score_flag[5] == 1) {
 80016ae:	4b33      	ldr	r3, [pc, #204]	; (800177c <score_transfer+0x1ec>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d10f      	bne.n	80016d6 <score_transfer+0x146>
 80016b6:	4b27      	ldr	r3, [pc, #156]	; (8001754 <score_transfer+0x1c4>)
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d10b      	bne.n	80016d6 <score_transfer+0x146>
		score = bee("end");
 80016be:	4830      	ldr	r0, [pc, #192]	; (8001780 <score_transfer+0x1f0>)
 80016c0:	f7ff feec 	bl	800149c <bee>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <score_transfer+0x1cc>)
 80016ca:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, &score, sizeof(bee("end")));
 80016cc:	2201      	movs	r2, #1
 80016ce:	4923      	ldr	r1, [pc, #140]	; (800175c <score_transfer+0x1cc>)
 80016d0:	4823      	ldr	r0, [pc, #140]	; (8001760 <score_transfer+0x1d0>)
 80016d2:	f00c fcf9 	bl	800e0c8 <HAL_UART_Transmit_IT>
	}
	if (home == 1 && score_flag[6] == 1) {
 80016d6:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <score_transfer+0x1f4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d10f      	bne.n	80016fe <score_transfer+0x16e>
 80016de:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <score_transfer+0x1c4>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d10b      	bne.n	80016fe <score_transfer+0x16e>
		score = bee("home");
 80016e6:	4828      	ldr	r0, [pc, #160]	; (8001788 <score_transfer+0x1f8>)
 80016e8:	f7ff fed8 	bl	800149c <bee>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <score_transfer+0x1cc>)
 80016f2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, &score, sizeof(bee("home")));
 80016f4:	2201      	movs	r2, #1
 80016f6:	4919      	ldr	r1, [pc, #100]	; (800175c <score_transfer+0x1cc>)
 80016f8:	4819      	ldr	r0, [pc, #100]	; (8001760 <score_transfer+0x1d0>)
 80016fa:	f00c fce5 	bl	800e0c8 <HAL_UART_Transmit_IT>
	}
	if (steal != 0 && score_flag[7] == 1) {
 80016fe:	4b23      	ldr	r3, [pc, #140]	; (800178c <score_transfer+0x1fc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d020      	beq.n	8001748 <score_transfer+0x1b8>
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <score_transfer+0x1c4>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d11c      	bne.n	8001748 <score_transfer+0x1b8>
		for (int i = 1; i < 4; i++) {
 800170e:	2301      	movs	r3, #1
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	e013      	b.n	800173c <score_transfer+0x1ac>
			if (steal >= i) {
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <score_transfer+0x1fc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	dc0b      	bgt.n	8001736 <score_transfer+0x1a6>
				score = bee("steal");
 800171e:	481c      	ldr	r0, [pc, #112]	; (8001790 <score_transfer+0x200>)
 8001720:	f7ff febc 	bl	800149c <bee>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <score_transfer+0x1cc>)
 800172a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, &score, sizeof(bee("steal")));
 800172c:	2201      	movs	r2, #1
 800172e:	490b      	ldr	r1, [pc, #44]	; (800175c <score_transfer+0x1cc>)
 8001730:	480b      	ldr	r0, [pc, #44]	; (8001760 <score_transfer+0x1d0>)
 8001732:	f00c fcc9 	bl	800e0c8 <HAL_UART_Transmit_IT>
		for (int i = 1; i < 4; i++) {
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	2b03      	cmp	r3, #3
 8001740:	dde8      	ble.n	8001714 <score_transfer+0x184>
			}
		}
		steal = 0;
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <score_transfer+0x1fc>)
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
//	HAL_Delay(2000);
//	strcpy(scorecount, "end");
//	score = bee(scorecount);
//	HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));

}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000018 	.word	0x20000018
 8001754:	200014f4 	.word	0x200014f4
 8001758:	080143e8 	.word	0x080143e8
 800175c:	200015ac 	.word	0x200015ac
 8001760:	2000183c 	.word	0x2000183c
 8001764:	200009c0 	.word	0x200009c0
 8001768:	080143d8 	.word	0x080143d8
 800176c:	080143dc 	.word	0x080143dc
 8001770:	080143e0 	.word	0x080143e0
 8001774:	20001588 	.word	0x20001588
 8001778:	080143f8 	.word	0x080143f8
 800177c:	200014ec 	.word	0x200014ec
 8001780:	08014410 	.word	0x08014410
 8001784:	2000158c 	.word	0x2000158c
 8001788:	08014408 	.word	0x08014408
 800178c:	20001590 	.word	0x20001590
 8001790:	08014400 	.word	0x08014400

08001794 <hand_transfer_fn>:
void hand_transfer_fn() {
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	e02d      	b.n	80017fc <hand_transfer_fn+0x68>
		if (unsuck[i] == 1 || suck[i] == 1) {
 80017a0:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <hand_transfer_fn+0x7c>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d005      	beq.n	80017b8 <hand_transfer_fn+0x24>
 80017ac:	4a19      	ldr	r2, [pc, #100]	; (8001814 <hand_transfer_fn+0x80>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d10f      	bne.n	80017d8 <hand_transfer_fn+0x44>
			hand_transfer[(i + rotate_offset) % 4] = 0;
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <hand_transfer_fn+0x84>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4413      	add	r3, r2
 80017c0:	425a      	negs	r2, r3
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	f002 0203 	and.w	r2, r2, #3
 80017ca:	bf58      	it	pl
 80017cc:	4253      	negpl	r3, r2
 80017ce:	4a13      	ldr	r2, [pc, #76]	; (800181c <hand_transfer_fn+0x88>)
 80017d0:	2100      	movs	r1, #0
 80017d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80017d6:	e00e      	b.n	80017f6 <hand_transfer_fn+0x62>
		}
		else {
			hand_transfer[(i + rotate_offset) % 4] = 1;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <hand_transfer_fn+0x84>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	425a      	negs	r2, r3
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	f002 0203 	and.w	r2, r2, #3
 80017ea:	bf58      	it	pl
 80017ec:	4253      	negpl	r3, r2
 80017ee:	4a0b      	ldr	r2, [pc, #44]	; (800181c <hand_transfer_fn+0x88>)
 80017f0:	2101      	movs	r1, #1
 80017f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 4; i++) {
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3301      	adds	r3, #1
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	ddce      	ble.n	80017a0 <hand_transfer_fn+0xc>
		}
	}
}
 8001802:	bf00      	nop
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	20001494 	.word	0x20001494
 8001814:	20001484 	.word	0x20001484
 8001818:	2000097c 	.word	0x2000097c
 800181c:	20000980 	.word	0x20000980

08001820 <suck_the_cake>:
void suck_the_cake(int servonum, int order) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
	if (finish == 1)
 800182a:	4b60      	ldr	r3, [pc, #384]	; (80019ac <suck_the_cake+0x18c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b01      	cmp	r3, #1
 8001830:	f000 80b8 	beq.w	80019a4 <suck_the_cake+0x184>
		return;

	while (1) {
		if (step == 0) {
 8001834:	4b5e      	ldr	r3, [pc, #376]	; (80019b0 <suck_the_cake+0x190>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d000      	beq.n	800183e <suck_the_cake+0x1e>
 800183c:	e7fa      	b.n	8001834 <suck_the_cake+0x14>
			break;
 800183e:	bf00      	nop
		}

	}
	if (servonum == 7) {
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b07      	cmp	r3, #7
 8001844:	d122      	bne.n	800188c <suck_the_cake+0x6c>
		cake_layer[(0 + rotate_offset) % 4] -= 1;
 8001846:	4b5b      	ldr	r3, [pc, #364]	; (80019b4 <suck_the_cake+0x194>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	425a      	negs	r2, r3
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	f002 0203 	and.w	r2, r2, #3
 8001854:	bf58      	it	pl
 8001856:	4253      	negpl	r3, r2
 8001858:	4a57      	ldr	r2, [pc, #348]	; (80019b8 <suck_the_cake+0x198>)
 800185a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800185e:	3a01      	subs	r2, #1
 8001860:	4955      	ldr	r1, [pc, #340]	; (80019b8 <suck_the_cake+0x198>)
 8001862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 20000 * 255); // open pump1
 8001866:	4b55      	ldr	r3, [pc, #340]	; (80019bc <suck_the_cake+0x19c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a55      	ldr	r2, [pc, #340]	; (80019c0 <suck_the_cake+0x1a0>)
 800186c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);        // close valve1
 800186e:	4b53      	ldr	r3, [pc, #332]	; (80019bc <suck_the_cake+0x19c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	639a      	str	r2, [r3, #56]	; 0x38
		suck[0] = 1;
 8001876:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <suck_the_cake+0x1a4>)
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]
		handStatus[0] = 1;
 800187c:	4b52      	ldr	r3, [pc, #328]	; (80019c8 <suck_the_cake+0x1a8>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]
		suck_temp++;
 8001882:	4b52      	ldr	r3, [pc, #328]	; (80019cc <suck_the_cake+0x1ac>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3301      	adds	r3, #1
 8001888:	4a50      	ldr	r2, [pc, #320]	; (80019cc <suck_the_cake+0x1ac>)
 800188a:	6013      	str	r3, [r2, #0]
	}
	if (servonum == 4) {
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b04      	cmp	r3, #4
 8001890:	d123      	bne.n	80018da <suck_the_cake+0xba>
		cake_layer[(1 + rotate_offset) % 4] -= 1;
 8001892:	4b48      	ldr	r3, [pc, #288]	; (80019b4 <suck_the_cake+0x194>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	425a      	negs	r2, r3
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	f002 0203 	and.w	r2, r2, #3
 80018a2:	bf58      	it	pl
 80018a4:	4253      	negpl	r3, r2
 80018a6:	4a44      	ldr	r2, [pc, #272]	; (80019b8 <suck_the_cake+0x198>)
 80018a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018ac:	3a01      	subs	r2, #1
 80018ae:	4942      	ldr	r1, [pc, #264]	; (80019b8 <suck_the_cake+0x198>)
 80018b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 20000 * 255); // open pump4
 80018b4:	4b46      	ldr	r3, [pc, #280]	; (80019d0 <suck_the_cake+0x1b0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a41      	ldr	r2, [pc, #260]	; (80019c0 <suck_the_cake+0x1a0>)
 80018ba:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);         // close valve4
 80018bc:	4b44      	ldr	r3, [pc, #272]	; (80019d0 <suck_the_cake+0x1b0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2200      	movs	r2, #0
 80018c2:	639a      	str	r2, [r3, #56]	; 0x38
		suck[1] = 1;
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <suck_the_cake+0x1a4>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	605a      	str	r2, [r3, #4]
		handStatus[1] = 1;
 80018ca:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <suck_the_cake+0x1a8>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	605a      	str	r2, [r3, #4]
		suck_temp++;
 80018d0:	4b3e      	ldr	r3, [pc, #248]	; (80019cc <suck_the_cake+0x1ac>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3301      	adds	r3, #1
 80018d6:	4a3d      	ldr	r2, [pc, #244]	; (80019cc <suck_the_cake+0x1ac>)
 80018d8:	6013      	str	r3, [r2, #0]
	}
	if (servonum == 3) {
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d123      	bne.n	8001928 <suck_the_cake+0x108>
		cake_layer[(2 + rotate_offset) % 4] -= 1;
 80018e0:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <suck_the_cake+0x194>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3302      	adds	r3, #2
 80018e6:	425a      	negs	r2, r3
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	f002 0203 	and.w	r2, r2, #3
 80018f0:	bf58      	it	pl
 80018f2:	4253      	negpl	r3, r2
 80018f4:	4a30      	ldr	r2, [pc, #192]	; (80019b8 <suck_the_cake+0x198>)
 80018f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018fa:	3a01      	subs	r2, #1
 80018fc:	492e      	ldr	r1, [pc, #184]	; (80019b8 <suck_the_cake+0x198>)
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 20000 * 255); // open pump3
 8001902:	4b33      	ldr	r3, [pc, #204]	; (80019d0 <suck_the_cake+0x1b0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a2e      	ldr	r2, [pc, #184]	; (80019c0 <suck_the_cake+0x1a0>)
 8001908:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);         // close valve3
 800190a:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <suck_the_cake+0x1b0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2200      	movs	r2, #0
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
		suck[2] = 1;
 8001912:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <suck_the_cake+0x1a4>)
 8001914:	2201      	movs	r2, #1
 8001916:	609a      	str	r2, [r3, #8]
		handStatus[2] = 1;
 8001918:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <suck_the_cake+0x1a8>)
 800191a:	2201      	movs	r2, #1
 800191c:	609a      	str	r2, [r3, #8]
		suck_temp++;
 800191e:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <suck_the_cake+0x1ac>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	4a29      	ldr	r2, [pc, #164]	; (80019cc <suck_the_cake+0x1ac>)
 8001926:	6013      	str	r3, [r2, #0]
	}
	hand_transfer_fn();
 8001928:	f7ff ff34 	bl	8001794 <hand_transfer_fn>
	if (order == 1) {
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d10b      	bne.n	800194a <suck_the_cake+0x12a>
//		if (servonum == 7)
		UART_Send_SetMotorPosition(servonum, 1500, 200); // suck the top cake
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	b29b      	uxth	r3, r3
 8001936:	22c8      	movs	r2, #200	; 0xc8
 8001938:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fa35 	bl	8000dac <UART_Send_SetMotorPosition>
		S = 1;
 8001942:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <suck_the_cake+0x1b4>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e02d      	b.n	80019a6 <suck_the_cake+0x186>
//		if (servonum == 7) {
//			UART_Send_SetMotorPosition(servonum, 1490, 200); // suck the top cake
//		}
	}

	else if (order == 2) {
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d10b      	bne.n	8001968 <suck_the_cake+0x148>
//		if (servonum != 7)
		UART_Send_SetMotorPosition(servonum, 1590, 200); // suck the middle cake
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	b29b      	uxth	r3, r3
 8001954:	22c8      	movs	r2, #200	; 0xc8
 8001956:	f240 6136 	movw	r1, #1590	; 0x636
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fa26 	bl	8000dac <UART_Send_SetMotorPosition>
		S = 2;
 8001960:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <suck_the_cake+0x1b4>)
 8001962:	2202      	movs	r2, #2
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	e01e      	b.n	80019a6 <suck_the_cake+0x186>
//		if (servonum == 7)
//			UART_Send_SetMotorPosition(servonum, 1560, 200); // suck the top cake
	}

	else if (order == 3) {
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d10b      	bne.n	8001986 <suck_the_cake+0x166>
//		if (servonum != 7)
		UART_Send_SetMotorPosition(servonum, 1715, 200); // suck the bottom cake
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	b29b      	uxth	r3, r3
 8001972:	22c8      	movs	r2, #200	; 0xc8
 8001974:	f240 61b3 	movw	r1, #1715	; 0x6b3
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fa17 	bl	8000dac <UART_Send_SetMotorPosition>
		S = 3;
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <suck_the_cake+0x1b4>)
 8001980:	2203      	movs	r2, #3
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	e00f      	b.n	80019a6 <suck_the_cake+0x186>
//	if (servonum == 7)
//			UART_Send_SetMotorPosition(servonum, 1705, 200); // suck the top cake
	}

	else if (order == 0) {
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10c      	bne.n	80019a6 <suck_the_cake+0x186>
//		if (servonum != 7)
		UART_Send_SetMotorPosition(servonum, 1440, 200);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	b29b      	uxth	r3, r3
 8001990:	22c8      	movs	r2, #200	; 0xc8
 8001992:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fa08 	bl	8000dac <UART_Send_SetMotorPosition>
		S = 0;
 800199c:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <suck_the_cake+0x1b4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	e000      	b.n	80019a6 <suck_the_cake+0x186>
		return;
 80019a4:	bf00      	nop
//			UART_Send_SetMotorPosition(servonum, 1430, 200); // suck the top cake
	}

//	HAL_Delay(1000);

}
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200014ec 	.word	0x200014ec
 80019b0:	200014dc 	.word	0x200014dc
 80019b4:	2000097c 	.word	0x2000097c
 80019b8:	20000988 	.word	0x20000988
 80019bc:	200015fc 	.word	0x200015fc
 80019c0:	004dd1e0 	.word	0x004dd1e0
 80019c4:	20001484 	.word	0x20001484
 80019c8:	20000998 	.word	0x20000998
 80019cc:	200014a4 	.word	0x200014a4
 80019d0:	20001644 	.word	0x20001644
 80019d4:	200015a4 	.word	0x200015a4

080019d8 <press_sensor_feedback>:

void press_sensor_feedback() {          // wait for press_sensor feedback
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	if (finish == 1)
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <press_sensor_feedback+0x68>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d02b      	beq.n	8001a3c <press_sensor_feedback+0x64>
		return;

	if (suck_temp != 0) {
 80019e4:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <press_sensor_feedback+0x6c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d014      	beq.n	8001a16 <press_sensor_feedback+0x3e>
		suck_delay_temp = -1;
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <press_sensor_feedback+0x70>)
 80019ee:	f04f 32ff 	mov.w	r2, #4294967295
 80019f2:	601a      	str	r2, [r3, #0]
		while (1) {
			if (suck_temp == 0) {
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <press_sensor_feedback+0x6c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1fb      	bne.n	80019f4 <press_sensor_feedback+0x1c>
				if (suck_delay_temp == -1)
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <press_sensor_feedback+0x70>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a04:	d102      	bne.n	8001a0c <press_sensor_feedback+0x34>
					suck_delay_temp = 1;
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <press_sensor_feedback+0x70>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
				if (suck_delay_temp == 0)
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <press_sensor_feedback+0x70>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00d      	beq.n	8001a30 <press_sensor_feedback+0x58>
			if (suck_temp == 0) {
 8001a14:	e7ee      	b.n	80019f4 <press_sensor_feedback+0x1c>
					break;
			}
		}
	}
	else if (unsuck_temp != 0) {
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <press_sensor_feedback+0x74>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00b      	beq.n	8001a36 <press_sensor_feedback+0x5e>
		while (1) {
			if (unsuck_temp == 0) {
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <press_sensor_feedback+0x74>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1fb      	bne.n	8001a1e <press_sensor_feedback+0x46>
				if (unsuck_delay_temp == 0)
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <press_sensor_feedback+0x78>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <press_sensor_feedback+0x5c>
			if (unsuck_temp == 0) {
 8001a2e:	e7f6      	b.n	8001a1e <press_sensor_feedback+0x46>
					break;
 8001a30:	bf00      	nop
 8001a32:	e000      	b.n	8001a36 <press_sensor_feedback+0x5e>
					break;
 8001a34:	bf00      	nop
			}
		}
	}
	hand_transfer_fn();
 8001a36:	f7ff fead 	bl	8001794 <hand_transfer_fn>
 8001a3a:	e000      	b.n	8001a3e <press_sensor_feedback+0x66>
		return;
 8001a3c:	bf00      	nop
}
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	200014ec 	.word	0x200014ec
 8001a44:	200014a4 	.word	0x200014a4
 8001a48:	20001548 	.word	0x20001548
 8001a4c:	200014a8 	.word	0x200014a8
 8001a50:	20001544 	.word	0x20001544

08001a54 <cake_check>:
void cake_check(int VL53_check, int order) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	if (finish == 1)
 8001a5e:	4b4c      	ldr	r3, [pc, #304]	; (8001b90 <cake_check+0x13c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	f000 808f 	beq.w	8001b86 <cake_check+0x132>
		return;

	if (VL53_check == 0) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10f      	bne.n	8001a8e <cake_check+0x3a>
		VL53_Update();
 8001a6e:	f7ff fba3 	bl	80011b8 <VL53_Update>
		if (CakeStatus[0] != (4 - order)) {
 8001a72:	4b48      	ldr	r3, [pc, #288]	; (8001b94 <cake_check+0x140>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f1c3 0304 	rsb	r3, r3, #4
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d006      	beq.n	8001a8e <cake_check+0x3a>
			order_arror[0] = CakeStatus[0];
 8001a80:	4b44      	ldr	r3, [pc, #272]	; (8001b94 <cake_check+0x140>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a44      	ldr	r2, [pc, #272]	; (8001b98 <cake_check+0x144>)
 8001a86:	6013      	str	r3, [r2, #0]
			CakeStatus[0] = 0;
 8001a88:	4b42      	ldr	r3, [pc, #264]	; (8001b94 <cake_check+0x140>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
		}
	}
	if (VL53_check == 1) {
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d10b      	bne.n	8001aac <cake_check+0x58>
		VL53_Update();
 8001a94:	f7ff fb90 	bl	80011b8 <VL53_Update>
		if (CakeStatus[1] != (4 - order)) {
 8001a98:	4b3e      	ldr	r3, [pc, #248]	; (8001b94 <cake_check+0x140>)
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	f1c3 0304 	rsb	r3, r3, #4
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d002      	beq.n	8001aac <cake_check+0x58>
			CakeStatus[1] = 0;
 8001aa6:	4b3b      	ldr	r3, [pc, #236]	; (8001b94 <cake_check+0x140>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	605a      	str	r2, [r3, #4]
		}
	}
	if (VL53_check == 2) {
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d10f      	bne.n	8001ad2 <cake_check+0x7e>
		VL53_Update();
 8001ab2:	f7ff fb81 	bl	80011b8 <VL53_Update>
		if (CakeStatus[2] != (4 - order)) {
 8001ab6:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <cake_check+0x140>)
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	f1c3 0304 	rsb	r3, r3, #4
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d006      	beq.n	8001ad2 <cake_check+0x7e>
			order_arror[2] = CakeStatus[2];
 8001ac4:	4b33      	ldr	r3, [pc, #204]	; (8001b94 <cake_check+0x140>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4a33      	ldr	r2, [pc, #204]	; (8001b98 <cake_check+0x144>)
 8001aca:	6093      	str	r3, [r2, #8]
			CakeStatus[2] = 0;
 8001acc:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <cake_check+0x140>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
		}
	}
	if (VL53_check == 3) {
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d129      	bne.n	8001b2c <cake_check+0xd8>
		rotate_the_ring((rotate_offset + 1) % 4);
 8001ad8:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <cake_check+0x148>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	425a      	negs	r2, r3
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	f002 0203 	and.w	r2, r2, #3
 8001ae8:	bf58      	it	pl
 8001aea:	4253      	negpl	r3, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 f957 	bl	8001da0 <rotate_the_ring>
		VL53_Update();
 8001af2:	f7ff fb61 	bl	80011b8 <VL53_Update>
		if (CakeStatus[2] != (4 - order)) {
 8001af6:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <cake_check+0x140>)
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f1c3 0304 	rsb	r3, r3, #4
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d006      	beq.n	8001b12 <cake_check+0xbe>
			order_arror[3] = CakeStatus[2];
 8001b04:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <cake_check+0x140>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4a23      	ldr	r2, [pc, #140]	; (8001b98 <cake_check+0x144>)
 8001b0a:	60d3      	str	r3, [r2, #12]
			CakeStatus[2] = 0;
 8001b0c:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <cake_check+0x140>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
		}
		rotate_the_ring((rotate_offset - 1) % 4);
 8001b12:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <cake_check+0x148>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	425a      	negs	r2, r3
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	f002 0203 	and.w	r2, r2, #3
 8001b22:	bf58      	it	pl
 8001b24:	4253      	negpl	r3, r2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f93a 	bl	8001da0 <rotate_the_ring>
	}
	if (VL53_check == 4) {
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d12a      	bne.n	8001b88 <cake_check+0x134>
		VL53_Update();
 8001b32:	f7ff fb41 	bl	80011b8 <VL53_Update>
		for (int i = 0; i < 3; i++) {
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	e00b      	b.n	8001b54 <cake_check+0x100>
			if (CakeStatus[i] != 3) {
 8001b3c:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <cake_check+0x140>)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d002      	beq.n	8001b4e <cake_check+0xfa>
				steady = 0;
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <cake_check+0x14c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 3; i++) {
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	3301      	adds	r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	ddf0      	ble.n	8001b3c <cake_check+0xe8>
			}
		}
		if (steady == 0) {
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <cake_check+0x14c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d112      	bne.n	8001b88 <cake_check+0x134>
			for (int i = 0; i < 3; i++) {
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	e00a      	b.n	8001b7e <cake_check+0x12a>
				first_state[i] = CakeStatus[i];
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <cake_check+0x140>)
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b70:	490c      	ldr	r1, [pc, #48]	; (8001ba4 <cake_check+0x150>)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = 0; i < 3; i++) {
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	ddf1      	ble.n	8001b68 <cake_check+0x114>
 8001b84:	e000      	b.n	8001b88 <cake_check+0x134>
		return;
 8001b86:	bf00      	nop
			}
		}
	}

}
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200014ec 	.word	0x200014ec
 8001b94:	2000089c 	.word	0x2000089c
 8001b98:	200009b0 	.word	0x200009b0
 8001b9c:	2000097c 	.word	0x2000097c
 8001ba0:	20000018 	.word	0x20000018
 8001ba4:	200009c0 	.word	0x200009c0

08001ba8 <unsuck_the_cake>:
void unsuck_the_cake(int servonum, int order) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
	if (finish == 1)
 8001bb2:	4b6f      	ldr	r3, [pc, #444]	; (8001d70 <unsuck_the_cake+0x1c8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	f000 80d5 	beq.w	8001d66 <unsuck_the_cake+0x1be>
		return;

	if (servonum == 7 && handStatus[0] == 0) {
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b07      	cmp	r3, #7
 8001bc0:	d107      	bne.n	8001bd2 <unsuck_the_cake+0x2a>
 8001bc2:	4b6c      	ldr	r3, [pc, #432]	; (8001d74 <unsuck_the_cake+0x1cc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d103      	bne.n	8001bd2 <unsuck_the_cake+0x2a>
		dont_go_down[0] = 1;
 8001bca:	4b6b      	ldr	r3, [pc, #428]	; (8001d78 <unsuck_the_cake+0x1d0>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
		return;
 8001bd0:	e0ca      	b.n	8001d68 <unsuck_the_cake+0x1c0>
	}

	if (servonum == 4 && handStatus[1] == 0) {
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d107      	bne.n	8001be8 <unsuck_the_cake+0x40>
 8001bd8:	4b66      	ldr	r3, [pc, #408]	; (8001d74 <unsuck_the_cake+0x1cc>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d103      	bne.n	8001be8 <unsuck_the_cake+0x40>
		dont_go_down[1] = 1;
 8001be0:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <unsuck_the_cake+0x1d0>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	605a      	str	r2, [r3, #4]
		return;
 8001be6:	e0bf      	b.n	8001d68 <unsuck_the_cake+0x1c0>
	}

	if (servonum == 3 && handStatus[2] == 0) {
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d107      	bne.n	8001bfe <unsuck_the_cake+0x56>
 8001bee:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <unsuck_the_cake+0x1cc>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d103      	bne.n	8001bfe <unsuck_the_cake+0x56>
		dont_go_down[2] = 1;
 8001bf6:	4b60      	ldr	r3, [pc, #384]	; (8001d78 <unsuck_the_cake+0x1d0>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	609a      	str	r2, [r3, #8]
		return;
 8001bfc:	e0b4      	b.n	8001d68 <unsuck_the_cake+0x1c0>
	}

	while (1) {
		if (step == 0)
 8001bfe:	4b5f      	ldr	r3, [pc, #380]	; (8001d7c <unsuck_the_cake+0x1d4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d000      	beq.n	8001c08 <unsuck_the_cake+0x60>
 8001c06:	e7fa      	b.n	8001bfe <unsuck_the_cake+0x56>
			break;
 8001c08:	bf00      	nop
	}
	if (servonum == 7) {
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b07      	cmp	r3, #7
 8001c0e:	d11a      	bne.n	8001c46 <unsuck_the_cake+0x9e>
		cake_layer[(0 + rotate_offset) % 4] += 1;
 8001c10:	4b5b      	ldr	r3, [pc, #364]	; (8001d80 <unsuck_the_cake+0x1d8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	425a      	negs	r2, r3
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	f002 0203 	and.w	r2, r2, #3
 8001c1e:	bf58      	it	pl
 8001c20:	4253      	negpl	r3, r2
 8001c22:	4a58      	ldr	r2, [pc, #352]	; (8001d84 <unsuck_the_cake+0x1dc>)
 8001c24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c28:	3201      	adds	r2, #1
 8001c2a:	4956      	ldr	r1, [pc, #344]	; (8001d84 <unsuck_the_cake+0x1dc>)
 8001c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		unsuck[0] = 1;
 8001c30:	4b55      	ldr	r3, [pc, #340]	; (8001d88 <unsuck_the_cake+0x1e0>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
		unsuck_temp++;
 8001c36:	4b55      	ldr	r3, [pc, #340]	; (8001d8c <unsuck_the_cake+0x1e4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	4a53      	ldr	r2, [pc, #332]	; (8001d8c <unsuck_the_cake+0x1e4>)
 8001c3e:	6013      	str	r3, [r2, #0]
		handStatus[0] = 0;
 8001c40:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <unsuck_the_cake+0x1cc>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
	}
	if (servonum == 4) {
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d11b      	bne.n	8001c84 <unsuck_the_cake+0xdc>
		cake_layer[(1 + rotate_offset) % 4] += 1;
 8001c4c:	4b4c      	ldr	r3, [pc, #304]	; (8001d80 <unsuck_the_cake+0x1d8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	425a      	negs	r2, r3
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	f002 0203 	and.w	r2, r2, #3
 8001c5c:	bf58      	it	pl
 8001c5e:	4253      	negpl	r3, r2
 8001c60:	4a48      	ldr	r2, [pc, #288]	; (8001d84 <unsuck_the_cake+0x1dc>)
 8001c62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c66:	3201      	adds	r2, #1
 8001c68:	4946      	ldr	r1, [pc, #280]	; (8001d84 <unsuck_the_cake+0x1dc>)
 8001c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		unsuck[1] = 1;
 8001c6e:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <unsuck_the_cake+0x1e0>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	605a      	str	r2, [r3, #4]
		unsuck_temp++;
 8001c74:	4b45      	ldr	r3, [pc, #276]	; (8001d8c <unsuck_the_cake+0x1e4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	4a44      	ldr	r2, [pc, #272]	; (8001d8c <unsuck_the_cake+0x1e4>)
 8001c7c:	6013      	str	r3, [r2, #0]
		handStatus[1] = 0;
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <unsuck_the_cake+0x1cc>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	605a      	str	r2, [r3, #4]
	}
	if (servonum == 3) {
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d11b      	bne.n	8001cc2 <unsuck_the_cake+0x11a>
		cake_layer[(2 + rotate_offset) % 4] += 1;
 8001c8a:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <unsuck_the_cake+0x1d8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	3302      	adds	r3, #2
 8001c90:	425a      	negs	r2, r3
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	f002 0203 	and.w	r2, r2, #3
 8001c9a:	bf58      	it	pl
 8001c9c:	4253      	negpl	r3, r2
 8001c9e:	4a39      	ldr	r2, [pc, #228]	; (8001d84 <unsuck_the_cake+0x1dc>)
 8001ca0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ca4:	3201      	adds	r2, #1
 8001ca6:	4937      	ldr	r1, [pc, #220]	; (8001d84 <unsuck_the_cake+0x1dc>)
 8001ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		unsuck[2] = 1;
 8001cac:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <unsuck_the_cake+0x1e0>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	609a      	str	r2, [r3, #8]
		unsuck_temp++;
 8001cb2:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <unsuck_the_cake+0x1e4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	4a34      	ldr	r2, [pc, #208]	; (8001d8c <unsuck_the_cake+0x1e4>)
 8001cba:	6013      	str	r3, [r2, #0]
		handStatus[2] = 0;
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <unsuck_the_cake+0x1cc>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
	}
	hand_transfer_fn();
 8001cc2:	f7ff fd67 	bl	8001794 <hand_transfer_fn>
	if (order == 1)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d108      	bne.n	8001cde <unsuck_the_cake+0x136>
		UART_Send_SetMotorPosition(servonum, 1480, 200); // put the cake to the top 1320
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	22c8      	movs	r2, #200	; 0xc8
 8001cd2:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f868 	bl	8000dac <UART_Send_SetMotorPosition>
 8001cdc:	e016      	b.n	8001d0c <unsuck_the_cake+0x164>
	else if (order == 2)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d108      	bne.n	8001cf6 <unsuck_the_cake+0x14e>
		UART_Send_SetMotorPosition(servonum, 1480, 200); // put the cake to the middle 1225
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	22c8      	movs	r2, #200	; 0xc8
 8001cea:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff f85c 	bl	8000dac <UART_Send_SetMotorPosition>
 8001cf4:	e00a      	b.n	8001d0c <unsuck_the_cake+0x164>
	else if (order == 3)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d107      	bne.n	8001d0c <unsuck_the_cake+0x164>
		UART_Send_SetMotorPosition(servonum, 1480, 200); // put the cake to the bottom 1100
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	22c8      	movs	r2, #200	; 0xc8
 8001d02:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff f850 	bl	8000dac <UART_Send_SetMotorPosition>

	servo_delay_temp = 1;
 8001d0c:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <unsuck_the_cake+0x1e8>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0)
 8001d12:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <unsuck_the_cake+0x1e8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d000      	beq.n	8001d1c <unsuck_the_cake+0x174>
 8001d1a:	e7fa      	b.n	8001d12 <unsuck_the_cake+0x16a>
			break;
 8001d1c:	bf00      	nop
	}
	if (servonum == 7) {
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b07      	cmp	r3, #7
 8001d22:	d108      	bne.n	8001d36 <unsuck_the_cake+0x18e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 2000 * 255); // open valve1
 8001d24:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <unsuck_the_cake+0x1ec>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <unsuck_the_cake+0x1f0>)
 8001d2a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);      // close pump1
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <unsuck_the_cake+0x1ec>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2200      	movs	r2, #0
 8001d32:	635a      	str	r2, [r3, #52]	; 0x34
 8001d34:	e018      	b.n	8001d68 <unsuck_the_cake+0x1c0>

	}
	else if (servonum == 4) {
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d108      	bne.n	8001d4e <unsuck_the_cake+0x1a6>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2000 * 255); // open valve4
 8001d3c:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <unsuck_the_cake+0x1f4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <unsuck_the_cake+0x1f0>)
 8001d42:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);      // close pump4
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <unsuck_the_cake+0x1f4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	635a      	str	r2, [r3, #52]	; 0x34
 8001d4c:	e00c      	b.n	8001d68 <unsuck_the_cake+0x1c0>

	}
	else if (servonum == 3) {
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d109      	bne.n	8001d68 <unsuck_the_cake+0x1c0>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 2000 * 255); // open valve3
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <unsuck_the_cake+0x1f4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <unsuck_the_cake+0x1f0>)
 8001d5a:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);      // close pump3
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <unsuck_the_cake+0x1f4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2200      	movs	r2, #0
 8001d62:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d64:	e000      	b.n	8001d68 <unsuck_the_cake+0x1c0>
		return;
 8001d66:	bf00      	nop

	}

}
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200014ec 	.word	0x200014ec
 8001d74:	20000998 	.word	0x20000998
 8001d78:	200009a4 	.word	0x200009a4
 8001d7c:	200014dc 	.word	0x200014dc
 8001d80:	2000097c 	.word	0x2000097c
 8001d84:	20000988 	.word	0x20000988
 8001d88:	20001494 	.word	0x20001494
 8001d8c:	200014a8 	.word	0x200014a8
 8001d90:	2000154c 	.word	0x2000154c
 8001d94:	200015fc 	.word	0x200015fc
 8001d98:	0007c830 	.word	0x0007c830
 8001d9c:	20001644 	.word	0x20001644

08001da0 <rotate_the_ring>:
void rotate_the_ring(int numb) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	if (num == 1 && cake_order != -1) {
 8001da8:	4b93      	ldr	r3, [pc, #588]	; (8001ff8 <rotate_the_ring+0x258>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d113      	bne.n	8001dd8 <rotate_the_ring+0x38>
 8001db0:	4b92      	ldr	r3, [pc, #584]	; (8001ffc <rotate_the_ring+0x25c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db8:	d00e      	beq.n	8001dd8 <rotate_the_ring+0x38>
		rotate_offset = ((numb + 1) % 4);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	425a      	negs	r2, r3
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	f002 0203 	and.w	r2, r2, #3
 8001dc8:	bf58      	it	pl
 8001dca:	4253      	negpl	r3, r2
 8001dcc:	4a8c      	ldr	r2, [pc, #560]	; (8002000 <rotate_the_ring+0x260>)
 8001dce:	6013      	str	r3, [r2, #0]
//		if (rotate_offset == 0)
//			rotate_offset = 4;

		numb = rotate_offset;
 8001dd0:	4b8b      	ldr	r3, [pc, #556]	; (8002000 <rotate_the_ring+0x260>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	e03f      	b.n	8001e58 <rotate_the_ring+0xb8>
	}
	else if (num == 2 && cake_order != -1) {
 8001dd8:	4b87      	ldr	r3, [pc, #540]	; (8001ff8 <rotate_the_ring+0x258>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d113      	bne.n	8001e08 <rotate_the_ring+0x68>
 8001de0:	4b86      	ldr	r3, [pc, #536]	; (8001ffc <rotate_the_ring+0x25c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de8:	d00e      	beq.n	8001e08 <rotate_the_ring+0x68>
		rotate_offset = (numb + 2) % 4;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3302      	adds	r3, #2
 8001dee:	425a      	negs	r2, r3
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	f002 0203 	and.w	r2, r2, #3
 8001df8:	bf58      	it	pl
 8001dfa:	4253      	negpl	r3, r2
 8001dfc:	4a80      	ldr	r2, [pc, #512]	; (8002000 <rotate_the_ring+0x260>)
 8001dfe:	6013      	str	r3, [r2, #0]
//		if (rotate_offset == 0)
//			rotate_offset = 4;

		numb = rotate_offset;
 8001e00:	4b7f      	ldr	r3, [pc, #508]	; (8002000 <rotate_the_ring+0x260>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	e027      	b.n	8001e58 <rotate_the_ring+0xb8>
	}
	else if (num == 3 && cake_order != -1) {
 8001e08:	4b7b      	ldr	r3, [pc, #492]	; (8001ff8 <rotate_the_ring+0x258>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d113      	bne.n	8001e38 <rotate_the_ring+0x98>
 8001e10:	4b7a      	ldr	r3, [pc, #488]	; (8001ffc <rotate_the_ring+0x25c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d00e      	beq.n	8001e38 <rotate_the_ring+0x98>
		rotate_offset = (numb + 3) % 4;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3303      	adds	r3, #3
 8001e1e:	425a      	negs	r2, r3
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	f002 0203 	and.w	r2, r2, #3
 8001e28:	bf58      	it	pl
 8001e2a:	4253      	negpl	r3, r2
 8001e2c:	4a74      	ldr	r2, [pc, #464]	; (8002000 <rotate_the_ring+0x260>)
 8001e2e:	6013      	str	r3, [r2, #0]
//		if (rotate_offset == 0)
//			rotate_offset = 4;

		numb = rotate_offset;
 8001e30:	4b73      	ldr	r3, [pc, #460]	; (8002000 <rotate_the_ring+0x260>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	e00f      	b.n	8001e58 <rotate_the_ring+0xb8>
	}
	else if (num == 4 && cake_order != -1)
 8001e38:	4b6f      	ldr	r3, [pc, #444]	; (8001ff8 <rotate_the_ring+0x258>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d108      	bne.n	8001e52 <rotate_the_ring+0xb2>
 8001e40:	4b6e      	ldr	r3, [pc, #440]	; (8001ffc <rotate_the_ring+0x25c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d003      	beq.n	8001e52 <rotate_the_ring+0xb2>
		rotate_offset = numb;
 8001e4a:	4a6d      	ldr	r2, [pc, #436]	; (8002000 <rotate_the_ring+0x260>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	e002      	b.n	8001e58 <rotate_the_ring+0xb8>
	else
		rotate_offset = numb;
 8001e52:	4a6b      	ldr	r2, [pc, #428]	; (8002000 <rotate_the_ring+0x260>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6013      	str	r3, [r2, #0]
	rotate_state[0] = 0;
 8001e58:	4b6a      	ldr	r3, [pc, #424]	; (8002004 <rotate_the_ring+0x264>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
	rotate_state[1] = 0;
 8001e5e:	4b69      	ldr	r3, [pc, #420]	; (8002004 <rotate_the_ring+0x264>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	605a      	str	r2, [r3, #4]
	rotate_state[2] = 0;
 8001e64:	4b67      	ldr	r3, [pc, #412]	; (8002004 <rotate_the_ring+0x264>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
	if (numb == 0) {
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d106      	bne.n	8001e7e <rotate_the_ring+0xde>
		step1 = 0;
 8001e70:	4b65      	ldr	r3, [pc, #404]	; (8002008 <rotate_the_ring+0x268>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
		anglegoal = 0;
 8001e76:	4b65      	ldr	r3, [pc, #404]	; (800200c <rotate_the_ring+0x26c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e01d      	b.n	8001eba <rotate_the_ring+0x11a>

	}
	else if (numb == 1) {
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d106      	bne.n	8001e92 <rotate_the_ring+0xf2>
		step1 = 0;
 8001e84:	4b60      	ldr	r3, [pc, #384]	; (8002008 <rotate_the_ring+0x268>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
		anglegoal = 90;
 8001e8a:	4b60      	ldr	r3, [pc, #384]	; (800200c <rotate_the_ring+0x26c>)
 8001e8c:	225a      	movs	r2, #90	; 0x5a
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e013      	b.n	8001eba <rotate_the_ring+0x11a>
	}
	else if (numb == 2) {
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d106      	bne.n	8001ea6 <rotate_the_ring+0x106>
		step1 = 0;
 8001e98:	4b5b      	ldr	r3, [pc, #364]	; (8002008 <rotate_the_ring+0x268>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
		anglegoal = 180;
 8001e9e:	4b5b      	ldr	r3, [pc, #364]	; (800200c <rotate_the_ring+0x26c>)
 8001ea0:	22b4      	movs	r2, #180	; 0xb4
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	e009      	b.n	8001eba <rotate_the_ring+0x11a>
	}
	else if (numb == 3) {
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d106      	bne.n	8001eba <rotate_the_ring+0x11a>
		step1 = 0;
 8001eac:	4b56      	ldr	r3, [pc, #344]	; (8002008 <rotate_the_ring+0x268>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
		anglegoal = 270;
 8001eb2:	4b56      	ldr	r3, [pc, #344]	; (800200c <rotate_the_ring+0x26c>)
 8001eb4:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001eb8:	601a      	str	r2, [r3, #0]
//	}
//	else if (numb == 7) {
//		step1 = 0;
//		anglegoal = -270;
//	}
	step1 = (anglegoal - anglebefore) * 5 * 8 / 1.8; // calculate the step1
 8001eba:	4b54      	ldr	r3, [pc, #336]	; (800200c <rotate_the_ring+0x26c>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4b54      	ldr	r3, [pc, #336]	; (8002010 <rotate_the_ring+0x270>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	1ad2      	subs	r2, r2, r3
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe faff 	bl	80004d0 <__aeabi_i2d>
 8001ed2:	a347      	add	r3, pc, #284	; (adr r3, 8001ff0 <rotate_the_ring+0x250>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	f7fe fc8e 	bl	80007f8 <__aeabi_ddiv>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f7fe fd70 	bl	80009c8 <__aeabi_d2iz>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4a47      	ldr	r2, [pc, #284]	; (8002008 <rotate_the_ring+0x268>)
 8001eec:	6013      	str	r3, [r2, #0]
	if (step1 > 4000) {
 8001eee:	4b46      	ldr	r3, [pc, #280]	; (8002008 <rotate_the_ring+0x268>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001ef6:	dd06      	ble.n	8001f06 <rotate_the_ring+0x166>
		step1 = step1 - 8000;
 8001ef8:	4b43      	ldr	r3, [pc, #268]	; (8002008 <rotate_the_ring+0x268>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f5a3 53fa 	sub.w	r3, r3, #8000	; 0x1f40
 8001f00:	4a41      	ldr	r2, [pc, #260]	; (8002008 <rotate_the_ring+0x268>)
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	e00a      	b.n	8001f1c <rotate_the_ring+0x17c>
	}
	else if (step1 < -4000) {
 8001f06:	4b40      	ldr	r3, [pc, #256]	; (8002008 <rotate_the_ring+0x268>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 8001f0e:	da05      	bge.n	8001f1c <rotate_the_ring+0x17c>
		step1 = 8000 + step1;
 8001f10:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <rotate_the_ring+0x268>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8001f18:	4a3b      	ldr	r2, [pc, #236]	; (8002008 <rotate_the_ring+0x268>)
 8001f1a:	6013      	str	r3, [r2, #0]
	}

	rotate_temp = 0;
 8001f1c:	4b3d      	ldr	r3, [pc, #244]	; (8002014 <rotate_the_ring+0x274>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
	anglebefore = anglegoal;
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <rotate_the_ring+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a3a      	ldr	r2, [pc, #232]	; (8002010 <rotate_the_ring+0x270>)
 8001f28:	6013      	str	r3, [r2, #0]
	if (step1 >= 0) {
 8001f2a:	4b37      	ldr	r3, [pc, #220]	; (8002008 <rotate_the_ring+0x268>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db03      	blt.n	8001f3a <rotate_the_ring+0x19a>
		dir_state1 = 1;
 8001f32:	4b39      	ldr	r3, [pc, #228]	; (8002018 <rotate_the_ring+0x278>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	e00b      	b.n	8001f52 <rotate_the_ring+0x1b2>

	}

	else if (step1 < 0) {
 8001f3a:	4b33      	ldr	r3, [pc, #204]	; (8002008 <rotate_the_ring+0x268>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	da07      	bge.n	8001f52 <rotate_the_ring+0x1b2>
		step1 = -step1;
 8001f42:	4b31      	ldr	r3, [pc, #196]	; (8002008 <rotate_the_ring+0x268>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	425b      	negs	r3, r3
 8001f48:	4a2f      	ldr	r2, [pc, #188]	; (8002008 <rotate_the_ring+0x268>)
 8001f4a:	6013      	str	r3, [r2, #0]

		dir_state1 = 0;
 8001f4c:	4b32      	ldr	r3, [pc, #200]	; (8002018 <rotate_the_ring+0x278>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
	}
	step1 = step1 + 500;
 8001f52:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <rotate_the_ring+0x268>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001f5a:	4a2b      	ldr	r2, [pc, #172]	; (8002008 <rotate_the_ring+0x268>)
 8001f5c:	6013      	str	r3, [r2, #0]
	step = step1;
 8001f5e:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <rotate_the_ring+0x268>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a2e      	ldr	r2, [pc, #184]	; (800201c <rotate_the_ring+0x27c>)
 8001f64:	6013      	str	r3, [r2, #0]
	step_debug = step;
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <rotate_the_ring+0x27c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a2d      	ldr	r2, [pc, #180]	; (8002020 <rotate_the_ring+0x280>)
 8001f6c:	6013      	str	r3, [r2, #0]
	while (1) {
		if (finish == 1) {
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <rotate_the_ring+0x284>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d106      	bne.n	8001f84 <rotate_the_ring+0x1e4>
			finish_all_motion();
 8001f76:	f001 fa87 	bl	8003488 <finish_all_motion>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20000 * 255);
 8001f7a:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <rotate_the_ring+0x288>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a2b      	ldr	r2, [pc, #172]	; (800202c <rotate_the_ring+0x28c>)
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001f82:	e02e      	b.n	8001fe2 <rotate_the_ring+0x242>
		}
		if (numb == rotate_dir) {
 8001f84:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <rotate_the_ring+0x290>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d10d      	bne.n	8001faa <rotate_the_ring+0x20a>

			step = 2.86 * 5 * 8 / 1.8;
 8001f8e:	4b23      	ldr	r3, [pc, #140]	; (800201c <rotate_the_ring+0x27c>)
 8001f90:	223f      	movs	r2, #63	; 0x3f
 8001f92:	601a      	str	r2, [r3, #0]
			step_debug = step;
 8001f94:	4b21      	ldr	r3, [pc, #132]	; (800201c <rotate_the_ring+0x27c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a21      	ldr	r2, [pc, #132]	; (8002020 <rotate_the_ring+0x280>)
 8001f9a:	6013      	str	r3, [r2, #0]
			s++;
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <rotate_the_ring+0x294>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	4a24      	ldr	r2, [pc, #144]	; (8002034 <rotate_the_ring+0x294>)
 8001fa4:	6013      	str	r3, [r2, #0]
			numb = 5;
 8001fa6:	2305      	movs	r3, #5
 8001fa8:	607b      	str	r3, [r7, #4]
		}
		if (step == 0 && numb == 5) {
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <rotate_the_ring+0x27c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d107      	bne.n	8001fc2 <rotate_the_ring+0x222>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d104      	bne.n	8001fc2 <rotate_the_ring+0x222>
			arr = 1000;
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <rotate_the_ring+0x298>)
 8001fba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fbe:	601a      	str	r2, [r3, #0]

			break;
 8001fc0:	e00f      	b.n	8001fe2 <rotate_the_ring+0x242>
		}
		else if (step == 0 && numb != 5) {
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <rotate_the_ring+0x27c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1d1      	bne.n	8001f6e <rotate_the_ring+0x1ce>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b05      	cmp	r3, #5
 8001fce:	d0ce      	beq.n	8001f6e <rotate_the_ring+0x1ce>

			step = 90 * 5 * 8 / 1.8;
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <rotate_the_ring+0x27c>)
 8001fd2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001fd6:	601a      	str	r2, [r3, #0]
			step_debug = step;
 8001fd8:	4b10      	ldr	r3, [pc, #64]	; (800201c <rotate_the_ring+0x27c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a10      	ldr	r2, [pc, #64]	; (8002020 <rotate_the_ring+0x280>)
 8001fde:	6013      	str	r3, [r2, #0]
		if (finish == 1) {
 8001fe0:	e7c5      	b.n	8001f6e <rotate_the_ring+0x1ce>
		}
	}
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	f3af 8000 	nop.w
 8001ff0:	cccccccd 	.word	0xcccccccd
 8001ff4:	3ffccccc 	.word	0x3ffccccc
 8001ff8:	200014f0 	.word	0x200014f0
 8001ffc:	20000010 	.word	0x20000010
 8002000:	2000097c 	.word	0x2000097c
 8002004:	20001564 	.word	0x20001564
 8002008:	2000146c 	.word	0x2000146c
 800200c:	20001474 	.word	0x20001474
 8002010:	20001478 	.word	0x20001478
 8002014:	20001574 	.word	0x20001574
 8002018:	20001470 	.word	0x20001470
 800201c:	200014dc 	.word	0x200014dc
 8002020:	20000978 	.word	0x20000978
 8002024:	200014ec 	.word	0x200014ec
 8002028:	200015b4 	.word	0x200015b4
 800202c:	004dd1e0 	.word	0x004dd1e0
 8002030:	20001570 	.word	0x20001570
 8002034:	20000974 	.word	0x20000974
 8002038:	2000000c 	.word	0x2000000c

0800203c <put_the_cherry>:
void put_the_cherry(int numb) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	if (finish == 1)
 8002044:	4b61      	ldr	r3, [pc, #388]	; (80021cc <put_the_cherry+0x190>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b01      	cmp	r3, #1
 800204a:	f000 80b8 	beq.w	80021be <put_the_cherry+0x182>
		return;
	rotate_the_ring(numb);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff fea6 	bl	8001da0 <rotate_the_ring>
	while (1) {
		if (step == 0) {
 8002054:	4b5e      	ldr	r3, [pc, #376]	; (80021d0 <put_the_cherry+0x194>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d000      	beq.n	800205e <put_the_cherry+0x22>
 800205c:	e7fa      	b.n	8002054 <put_the_cherry+0x18>
			break;
 800205e:	bf00      	nop
		}
	}
	suck[3] = 1;
 8002060:	4b5c      	ldr	r3, [pc, #368]	; (80021d4 <put_the_cherry+0x198>)
 8002062:	2201      	movs	r2, #1
 8002064:	60da      	str	r2, [r3, #12]
	if (steady == 0) {
 8002066:	4b5c      	ldr	r3, [pc, #368]	; (80021d8 <put_the_cherry+0x19c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d155      	bne.n	800211a <put_the_cherry+0xde>
		if (order_arror[(4 + rotate_offset) % 4] == 1) {
 800206e:	4b5b      	ldr	r3, [pc, #364]	; (80021dc <put_the_cherry+0x1a0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3304      	adds	r3, #4
 8002074:	425a      	negs	r2, r3
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	f002 0203 	and.w	r2, r2, #3
 800207e:	bf58      	it	pl
 8002080:	4253      	negpl	r3, r2
 8002082:	4a57      	ldr	r2, [pc, #348]	; (80021e0 <put_the_cherry+0x1a4>)
 8002084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d109      	bne.n	80020a0 <put_the_cherry+0x64>
			UART_Send_SetMotorPosition(5, 1330, 300);
 800208c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002090:	f240 5132 	movw	r1, #1330	; 0x532
 8002094:	2005      	movs	r0, #5
 8002096:	f7fe fe89 	bl	8000dac <UART_Send_SetMotorPosition>
			S = 1;
 800209a:	4b52      	ldr	r3, [pc, #328]	; (80021e4 <put_the_cherry+0x1a8>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]
		}

		if (order_arror[(4 + rotate_offset) % 4] == 2) {
 80020a0:	4b4e      	ldr	r3, [pc, #312]	; (80021dc <put_the_cherry+0x1a0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3304      	adds	r3, #4
 80020a6:	425a      	negs	r2, r3
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	f002 0203 	and.w	r2, r2, #3
 80020b0:	bf58      	it	pl
 80020b2:	4253      	negpl	r3, r2
 80020b4:	4a4a      	ldr	r2, [pc, #296]	; (80021e0 <put_the_cherry+0x1a4>)
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d109      	bne.n	80020d2 <put_the_cherry+0x96>
			UART_Send_SetMotorPosition(5, 1350, 300);
 80020be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020c2:	f240 5146 	movw	r1, #1350	; 0x546
 80020c6:	2005      	movs	r0, #5
 80020c8:	f7fe fe70 	bl	8000dac <UART_Send_SetMotorPosition>
			S = 2;
 80020cc:	4b45      	ldr	r3, [pc, #276]	; (80021e4 <put_the_cherry+0x1a8>)
 80020ce:	2202      	movs	r2, #2
 80020d0:	601a      	str	r2, [r3, #0]
		}
		if (order_arror[(4 + rotate_offset) % 4] == 3) {
 80020d2:	4b42      	ldr	r3, [pc, #264]	; (80021dc <put_the_cherry+0x1a0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3304      	adds	r3, #4
 80020d8:	425a      	negs	r2, r3
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	f002 0203 	and.w	r2, r2, #3
 80020e2:	bf58      	it	pl
 80020e4:	4253      	negpl	r3, r2
 80020e6:	4a3e      	ldr	r2, [pc, #248]	; (80021e0 <put_the_cherry+0x1a4>)
 80020e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d10a      	bne.n	8002106 <put_the_cherry+0xca>
			UART_Send_SetMotorPosition(5, 1450, 300);
 80020f0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020f4:	f240 51aa 	movw	r1, #1450	; 0x5aa
 80020f8:	2005      	movs	r0, #5
 80020fa:	f7fe fe57 	bl	8000dac <UART_Send_SetMotorPosition>
			S = 3;
 80020fe:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <put_the_cherry+0x1a8>)
 8002100:	2203      	movs	r2, #3
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	e009      	b.n	800211a <put_the_cherry+0xde>
		}

		else {
			UART_Send_SetMotorPosition(5, 1330, 300);
 8002106:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800210a:	f240 5132 	movw	r1, #1330	; 0x532
 800210e:	2005      	movs	r0, #5
 8002110:	f7fe fe4c 	bl	8000dac <UART_Send_SetMotorPosition>
			S = 1;
 8002114:	4b33      	ldr	r3, [pc, #204]	; (80021e4 <put_the_cherry+0x1a8>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]
		}

	}
	if (steady == 1) {
 800211a:	4b2f      	ldr	r3, [pc, #188]	; (80021d8 <put_the_cherry+0x19c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d109      	bne.n	8002136 <put_the_cherry+0xfa>
		UART_Send_SetMotorPosition(5, 1330, 300);
 8002122:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002126:	f240 5132 	movw	r1, #1330	; 0x532
 800212a:	2005      	movs	r0, #5
 800212c:	f7fe fe3e 	bl	8000dac <UART_Send_SetMotorPosition>
		S = 1;
 8002130:	4b2c      	ldr	r3, [pc, #176]	; (80021e4 <put_the_cherry+0x1a8>)
 8002132:	2201      	movs	r2, #1
 8002134:	601a      	str	r2, [r3, #0]
	}

	servo_delay_temp = 1;
 8002136:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <put_the_cherry+0x1ac>)
 8002138:	2201      	movs	r2, #1
 800213a:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0)
 800213c:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <put_the_cherry+0x1ac>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d000      	beq.n	8002146 <put_the_cherry+0x10a>
 8002144:	e7fa      	b.n	800213c <put_the_cherry+0x100>
			break;
 8002146:	bf00      	nop
	}
	UART_Send_SetMotorPosition(6, 2100, 500);
 8002148:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800214c:	f640 0134 	movw	r1, #2100	; 0x834
 8002150:	2006      	movs	r0, #6
 8002152:	f7fe fe2b 	bl	8000dac <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <put_the_cherry+0x1ac>)
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0)
 800215c:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <put_the_cherry+0x1ac>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d000      	beq.n	8002166 <put_the_cherry+0x12a>
 8002164:	e7fa      	b.n	800215c <put_the_cherry+0x120>
			break;
 8002166:	bf00      	nop
	}
	cherry_delay_temp = 1;
 8002168:	4b20      	ldr	r3, [pc, #128]	; (80021ec <put_the_cherry+0x1b0>)
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]
	while (1) {
		if (cherry_delay_temp == 0)
 800216e:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <put_the_cherry+0x1b0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d000      	beq.n	8002178 <put_the_cherry+0x13c>
 8002176:	e7fa      	b.n	800216e <put_the_cherry+0x132>
			break;
 8002178:	bf00      	nop
	}
	UART_Send_SetMotorPosition(5, 1200, 300);
 800217a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800217e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8002182:	2005      	movs	r0, #5
 8002184:	f7fe fe12 	bl	8000dac <UART_Send_SetMotorPosition>
	suck[3] = 0;
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <put_the_cherry+0x198>)
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]

	servo_delay_temp = 1;
 800218e:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <put_the_cherry+0x1ac>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0)
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <put_the_cherry+0x1ac>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d000      	beq.n	800219e <put_the_cherry+0x162>
 800219c:	e7fa      	b.n	8002194 <put_the_cherry+0x158>
			break;
 800219e:	bf00      	nop
	}
	UART_Send_SetMotorPosition(6, 1000, 500);
 80021a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80021a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021a8:	2006      	movs	r0, #6
 80021aa:	f7fe fdff 	bl	8000dac <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <put_the_cherry+0x1ac>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0)
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <put_the_cherry+0x1ac>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <put_the_cherry+0x186>
 80021bc:	e7fa      	b.n	80021b4 <put_the_cherry+0x178>
		return;
 80021be:	bf00      	nop
 80021c0:	e000      	b.n	80021c4 <put_the_cherry+0x188>
			break;
 80021c2:	bf00      	nop
	}

}
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200014ec 	.word	0x200014ec
 80021d0:	200014dc 	.word	0x200014dc
 80021d4:	20001484 	.word	0x20001484
 80021d8:	20000018 	.word	0x20000018
 80021dc:	2000097c 	.word	0x2000097c
 80021e0:	200009b0 	.word	0x200009b0
 80021e4:	200015a4 	.word	0x200015a4
 80021e8:	2000154c 	.word	0x2000154c
 80021ec:	20001554 	.word	0x20001554

080021f0 <judge_the_empty_and_order>:
void judge_the_empty_and_order() {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
//1=leftfront,2=rightfront,3=rightback,4=leftback
// let three servo turn to the correct side
	if (if_gate_ok == 0)
 80021f6:	4b88      	ldr	r3, [pc, #544]	; (8002418 <judge_the_empty_and_order+0x228>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8327 	beq.w	800284e <judge_the_empty_and_order+0x65e>
		return;
	for (int i = 0; i < 4; i++) {
 8002200:	2300      	movs	r3, #0
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	e01c      	b.n	8002240 <judge_the_empty_and_order+0x50>
		if (hole[i] != 0)
 8002206:	4a85      	ldr	r2, [pc, #532]	; (800241c <judge_the_empty_and_order+0x22c>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4413      	add	r3, r2
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d004      	beq.n	800221c <judge_the_empty_and_order+0x2c>
			cake_layer[i] = 3;
 8002212:	4a83      	ldr	r2, [pc, #524]	; (8002420 <judge_the_empty_and_order+0x230>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2103      	movs	r1, #3
 8002218:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (hole[i] == 0) {
 800221c:	4a7f      	ldr	r2, [pc, #508]	; (800241c <judge_the_empty_and_order+0x22c>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d108      	bne.n	800223a <judge_the_empty_and_order+0x4a>
			num = i + 1;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3301      	adds	r3, #1
 800222c:	4a7d      	ldr	r2, [pc, #500]	; (8002424 <judge_the_empty_and_order+0x234>)
 800222e:	6013      	str	r3, [r2, #0]
			cake_layer[i] = 0;
 8002230:	4a7b      	ldr	r2, [pc, #492]	; (8002420 <judge_the_empty_and_order+0x230>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2100      	movs	r1, #0
 8002236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3301      	adds	r3, #1
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b03      	cmp	r3, #3
 8002244:	dddf      	ble.n	8002206 <judge_the_empty_and_order+0x16>
		}
	}

	if (num == 1) {
 8002246:	4b77      	ldr	r3, [pc, #476]	; (8002424 <judge_the_empty_and_order+0x234>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b01      	cmp	r3, #1
 800224c:	f040 80b5 	bne.w	80023ba <judge_the_empty_and_order+0x1ca>
		if (transfer_the_order == 0) {
 8002250:	4b75      	ldr	r3, [pc, #468]	; (8002428 <judge_the_empty_and_order+0x238>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d105      	bne.n	8002264 <judge_the_empty_and_order+0x74>
			rotate_the_ring(1);       //90
 8002258:	2001      	movs	r0, #1
 800225a:	f7ff fda1 	bl	8001da0 <rotate_the_ring>
			rotate_offset = 1;
 800225e:	4b73      	ldr	r3, [pc, #460]	; (800242c <judge_the_empty_and_order+0x23c>)
 8002260:	2201      	movs	r2, #1
 8002262:	601a      	str	r2, [r3, #0]
		}

		if (hole[1] == 'b' && hole[2] == 'y' && hole[3] == 'p') {
 8002264:	4b6d      	ldr	r3, [pc, #436]	; (800241c <judge_the_empty_and_order+0x22c>)
 8002266:	785b      	ldrb	r3, [r3, #1]
 8002268:	2b62      	cmp	r3, #98	; 0x62
 800226a:	d117      	bne.n	800229c <judge_the_empty_and_order+0xac>
 800226c:	4b6b      	ldr	r3, [pc, #428]	; (800241c <judge_the_empty_and_order+0x22c>)
 800226e:	789b      	ldrb	r3, [r3, #2]
 8002270:	2b79      	cmp	r3, #121	; 0x79
 8002272:	d113      	bne.n	800229c <judge_the_empty_and_order+0xac>
 8002274:	4b69      	ldr	r3, [pc, #420]	; (800241c <judge_the_empty_and_order+0x22c>)
 8002276:	78db      	ldrb	r3, [r3, #3]
 8002278:	2b70      	cmp	r3, #112	; 0x70
 800227a:	d10f      	bne.n	800229c <judge_the_empty_and_order+0xac>
			cake_order = 1;
 800227c:	4b6c      	ldr	r3, [pc, #432]	; (8002430 <judge_the_empty_and_order+0x240>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8002282:	4b6c      	ldr	r3, [pc, #432]	; (8002434 <judge_the_empty_and_order+0x244>)
 8002284:	2201      	movs	r2, #1
 8002286:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8002288:	4b6a      	ldr	r3, [pc, #424]	; (8002434 <judge_the_empty_and_order+0x244>)
 800228a:	2201      	movs	r2, #1
 800228c:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800228e:	4b69      	ldr	r3, [pc, #420]	; (8002434 <judge_the_empty_and_order+0x244>)
 8002290:	2201      	movs	r2, #1
 8002292:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 8002294:	4b67      	ldr	r3, [pc, #412]	; (8002434 <judge_the_empty_and_order+0x244>)
 8002296:	2200      	movs	r2, #0
 8002298:	811a      	strh	r2, [r3, #8]
 800229a:	e2d3      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
		else if (hole[1] == 'p' && hole[2] == 'y' && hole[3] == 'b') {
 800229c:	4b5f      	ldr	r3, [pc, #380]	; (800241c <judge_the_empty_and_order+0x22c>)
 800229e:	785b      	ldrb	r3, [r3, #1]
 80022a0:	2b70      	cmp	r3, #112	; 0x70
 80022a2:	d117      	bne.n	80022d4 <judge_the_empty_and_order+0xe4>
 80022a4:	4b5d      	ldr	r3, [pc, #372]	; (800241c <judge_the_empty_and_order+0x22c>)
 80022a6:	789b      	ldrb	r3, [r3, #2]
 80022a8:	2b79      	cmp	r3, #121	; 0x79
 80022aa:	d113      	bne.n	80022d4 <judge_the_empty_and_order+0xe4>
 80022ac:	4b5b      	ldr	r3, [pc, #364]	; (800241c <judge_the_empty_and_order+0x22c>)
 80022ae:	78db      	ldrb	r3, [r3, #3]
 80022b0:	2b62      	cmp	r3, #98	; 0x62
 80022b2:	d10f      	bne.n	80022d4 <judge_the_empty_and_order+0xe4>
			cake_order = 2;
 80022b4:	4b5e      	ldr	r3, [pc, #376]	; (8002430 <judge_the_empty_and_order+0x240>)
 80022b6:	2202      	movs	r2, #2
 80022b8:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80022ba:	4b5e      	ldr	r3, [pc, #376]	; (8002434 <judge_the_empty_and_order+0x244>)
 80022bc:	2201      	movs	r2, #1
 80022be:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 80022c0:	4b5c      	ldr	r3, [pc, #368]	; (8002434 <judge_the_empty_and_order+0x244>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80022c6:	4b5b      	ldr	r3, [pc, #364]	; (8002434 <judge_the_empty_and_order+0x244>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80022cc:	4b59      	ldr	r3, [pc, #356]	; (8002434 <judge_the_empty_and_order+0x244>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	811a      	strh	r2, [r3, #8]
 80022d2:	e2b7      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
		else if (hole[1] == 'y' && hole[2] == 'b' && hole[3] == 'p') {
 80022d4:	4b51      	ldr	r3, [pc, #324]	; (800241c <judge_the_empty_and_order+0x22c>)
 80022d6:	785b      	ldrb	r3, [r3, #1]
 80022d8:	2b79      	cmp	r3, #121	; 0x79
 80022da:	d117      	bne.n	800230c <judge_the_empty_and_order+0x11c>
 80022dc:	4b4f      	ldr	r3, [pc, #316]	; (800241c <judge_the_empty_and_order+0x22c>)
 80022de:	789b      	ldrb	r3, [r3, #2]
 80022e0:	2b62      	cmp	r3, #98	; 0x62
 80022e2:	d113      	bne.n	800230c <judge_the_empty_and_order+0x11c>
 80022e4:	4b4d      	ldr	r3, [pc, #308]	; (800241c <judge_the_empty_and_order+0x22c>)
 80022e6:	78db      	ldrb	r3, [r3, #3]
 80022e8:	2b70      	cmp	r3, #112	; 0x70
 80022ea:	d10f      	bne.n	800230c <judge_the_empty_and_order+0x11c>
			cake_order = 3;
 80022ec:	4b50      	ldr	r3, [pc, #320]	; (8002430 <judge_the_empty_and_order+0x240>)
 80022ee:	2203      	movs	r2, #3
 80022f0:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80022f2:	4b50      	ldr	r3, [pc, #320]	; (8002434 <judge_the_empty_and_order+0x244>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 80022f8:	4b4e      	ldr	r3, [pc, #312]	; (8002434 <judge_the_empty_and_order+0x244>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80022fe:	4b4d      	ldr	r3, [pc, #308]	; (8002434 <judge_the_empty_and_order+0x244>)
 8002300:	2201      	movs	r2, #1
 8002302:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8002304:	4b4b      	ldr	r3, [pc, #300]	; (8002434 <judge_the_empty_and_order+0x244>)
 8002306:	2201      	movs	r2, #1
 8002308:	811a      	strh	r2, [r3, #8]
 800230a:	e29b      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
		else if (hole[1] == 'p' && hole[2] == 'b' && hole[3] == 'y') {
 800230c:	4b43      	ldr	r3, [pc, #268]	; (800241c <judge_the_empty_and_order+0x22c>)
 800230e:	785b      	ldrb	r3, [r3, #1]
 8002310:	2b70      	cmp	r3, #112	; 0x70
 8002312:	d117      	bne.n	8002344 <judge_the_empty_and_order+0x154>
 8002314:	4b41      	ldr	r3, [pc, #260]	; (800241c <judge_the_empty_and_order+0x22c>)
 8002316:	789b      	ldrb	r3, [r3, #2]
 8002318:	2b62      	cmp	r3, #98	; 0x62
 800231a:	d113      	bne.n	8002344 <judge_the_empty_and_order+0x154>
 800231c:	4b3f      	ldr	r3, [pc, #252]	; (800241c <judge_the_empty_and_order+0x22c>)
 800231e:	78db      	ldrb	r3, [r3, #3]
 8002320:	2b79      	cmp	r3, #121	; 0x79
 8002322:	d10f      	bne.n	8002344 <judge_the_empty_and_order+0x154>
			cake_order = 4;
 8002324:	4b42      	ldr	r3, [pc, #264]	; (8002430 <judge_the_empty_and_order+0x240>)
 8002326:	2204      	movs	r2, #4
 8002328:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800232a:	4b42      	ldr	r3, [pc, #264]	; (8002434 <judge_the_empty_and_order+0x244>)
 800232c:	2201      	movs	r2, #1
 800232e:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8002330:	4b40      	ldr	r3, [pc, #256]	; (8002434 <judge_the_empty_and_order+0x244>)
 8002332:	2201      	movs	r2, #1
 8002334:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8002336:	4b3f      	ldr	r3, [pc, #252]	; (8002434 <judge_the_empty_and_order+0x244>)
 8002338:	2201      	movs	r2, #1
 800233a:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 800233c:	4b3d      	ldr	r3, [pc, #244]	; (8002434 <judge_the_empty_and_order+0x244>)
 800233e:	2200      	movs	r2, #0
 8002340:	811a      	strh	r2, [r3, #8]
 8002342:	e27f      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
		else if (hole[1] == 'b' && hole[2] == 'p' && hole[3] == 'y') {
 8002344:	4b35      	ldr	r3, [pc, #212]	; (800241c <judge_the_empty_and_order+0x22c>)
 8002346:	785b      	ldrb	r3, [r3, #1]
 8002348:	2b62      	cmp	r3, #98	; 0x62
 800234a:	d117      	bne.n	800237c <judge_the_empty_and_order+0x18c>
 800234c:	4b33      	ldr	r3, [pc, #204]	; (800241c <judge_the_empty_and_order+0x22c>)
 800234e:	789b      	ldrb	r3, [r3, #2]
 8002350:	2b70      	cmp	r3, #112	; 0x70
 8002352:	d113      	bne.n	800237c <judge_the_empty_and_order+0x18c>
 8002354:	4b31      	ldr	r3, [pc, #196]	; (800241c <judge_the_empty_and_order+0x22c>)
 8002356:	78db      	ldrb	r3, [r3, #3]
 8002358:	2b79      	cmp	r3, #121	; 0x79
 800235a:	d10f      	bne.n	800237c <judge_the_empty_and_order+0x18c>
			cake_order = 5;
 800235c:	4b34      	ldr	r3, [pc, #208]	; (8002430 <judge_the_empty_and_order+0x240>)
 800235e:	2205      	movs	r2, #5
 8002360:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8002362:	4b34      	ldr	r3, [pc, #208]	; (8002434 <judge_the_empty_and_order+0x244>)
 8002364:	2201      	movs	r2, #1
 8002366:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8002368:	4b32      	ldr	r3, [pc, #200]	; (8002434 <judge_the_empty_and_order+0x244>)
 800236a:	2201      	movs	r2, #1
 800236c:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800236e:	4b31      	ldr	r3, [pc, #196]	; (8002434 <judge_the_empty_and_order+0x244>)
 8002370:	2201      	movs	r2, #1
 8002372:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 8002374:	4b2f      	ldr	r3, [pc, #188]	; (8002434 <judge_the_empty_and_order+0x244>)
 8002376:	2200      	movs	r2, #0
 8002378:	811a      	strh	r2, [r3, #8]
 800237a:	e263      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
		else if (hole[1] == 'y' && hole[2] == 'p' && hole[3] == 'b') {
 800237c:	4b27      	ldr	r3, [pc, #156]	; (800241c <judge_the_empty_and_order+0x22c>)
 800237e:	785b      	ldrb	r3, [r3, #1]
 8002380:	2b79      	cmp	r3, #121	; 0x79
 8002382:	f040 825f 	bne.w	8002844 <judge_the_empty_and_order+0x654>
 8002386:	4b25      	ldr	r3, [pc, #148]	; (800241c <judge_the_empty_and_order+0x22c>)
 8002388:	789b      	ldrb	r3, [r3, #2]
 800238a:	2b70      	cmp	r3, #112	; 0x70
 800238c:	f040 825a 	bne.w	8002844 <judge_the_empty_and_order+0x654>
 8002390:	4b22      	ldr	r3, [pc, #136]	; (800241c <judge_the_empty_and_order+0x22c>)
 8002392:	78db      	ldrb	r3, [r3, #3]
 8002394:	2b62      	cmp	r3, #98	; 0x62
 8002396:	f040 8255 	bne.w	8002844 <judge_the_empty_and_order+0x654>
			cake_order = 6;
 800239a:	4b25      	ldr	r3, [pc, #148]	; (8002430 <judge_the_empty_and_order+0x240>)
 800239c:	2206      	movs	r2, #6
 800239e:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80023a0:	4b24      	ldr	r3, [pc, #144]	; (8002434 <judge_the_empty_and_order+0x244>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 80023a6:	4b23      	ldr	r3, [pc, #140]	; (8002434 <judge_the_empty_and_order+0x244>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80023ac:	4b21      	ldr	r3, [pc, #132]	; (8002434 <judge_the_empty_and_order+0x244>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80023b2:	4b20      	ldr	r3, [pc, #128]	; (8002434 <judge_the_empty_and_order+0x244>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	811a      	strh	r2, [r3, #8]
 80023b8:	e244      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
	}
	else if (num == 2) {
 80023ba:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <judge_the_empty_and_order+0x234>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	f040 80cb 	bne.w	800255a <judge_the_empty_and_order+0x36a>
		if (transfer_the_order == 0) {
 80023c4:	4b18      	ldr	r3, [pc, #96]	; (8002428 <judge_the_empty_and_order+0x238>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d108      	bne.n	80023de <judge_the_empty_and_order+0x1ee>
			rotate = 2;
 80023cc:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <judge_the_empty_and_order+0x248>)
 80023ce:	2202      	movs	r2, #2
 80023d0:	601a      	str	r2, [r3, #0]
			rotate_the_ring(2);       //-180
 80023d2:	2002      	movs	r0, #2
 80023d4:	f7ff fce4 	bl	8001da0 <rotate_the_ring>
			rotate_offset = 2;
 80023d8:	4b14      	ldr	r3, [pc, #80]	; (800242c <judge_the_empty_and_order+0x23c>)
 80023da:	2202      	movs	r2, #2
 80023dc:	601a      	str	r2, [r3, #0]
		}

		if (hole[2] == 'b' && hole[3] == 'y' && hole[0] == 'p') {
 80023de:	4b0f      	ldr	r3, [pc, #60]	; (800241c <judge_the_empty_and_order+0x22c>)
 80023e0:	789b      	ldrb	r3, [r3, #2]
 80023e2:	2b62      	cmp	r3, #98	; 0x62
 80023e4:	d12a      	bne.n	800243c <judge_the_empty_and_order+0x24c>
 80023e6:	4b0d      	ldr	r3, [pc, #52]	; (800241c <judge_the_empty_and_order+0x22c>)
 80023e8:	78db      	ldrb	r3, [r3, #3]
 80023ea:	2b79      	cmp	r3, #121	; 0x79
 80023ec:	d126      	bne.n	800243c <judge_the_empty_and_order+0x24c>
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <judge_the_empty_and_order+0x22c>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b70      	cmp	r3, #112	; 0x70
 80023f4:	d122      	bne.n	800243c <judge_the_empty_and_order+0x24c>
			cake_order = 1;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <judge_the_empty_and_order+0x240>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <judge_the_empty_and_order+0x244>)
 80023fe:	2200      	movs	r2, #0
 8002400:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <judge_the_empty_and_order+0x244>)
 8002404:	2201      	movs	r2, #1
 8002406:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <judge_the_empty_and_order+0x244>)
 800240a:	2201      	movs	r2, #1
 800240c:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <judge_the_empty_and_order+0x244>)
 8002410:	2201      	movs	r2, #1
 8002412:	811a      	strh	r2, [r3, #8]
 8002414:	e216      	b.n	8002844 <judge_the_empty_and_order+0x654>
 8002416:	bf00      	nop
 8002418:	20000014 	.word	0x20000014
 800241c:	200014e0 	.word	0x200014e0
 8002420:	20000988 	.word	0x20000988
 8002424:	200014f0 	.word	0x200014f0
 8002428:	200015a0 	.word	0x200015a0
 800242c:	2000097c 	.word	0x2000097c
 8002430:	20000010 	.word	0x20000010
 8002434:	20001558 	.word	0x20001558
 8002438:	2000156c 	.word	0x2000156c
		}
		else if (hole[2] == 'p' && hole[3] == 'y' && hole[0] == 'b') {
 800243c:	4b86      	ldr	r3, [pc, #536]	; (8002658 <judge_the_empty_and_order+0x468>)
 800243e:	789b      	ldrb	r3, [r3, #2]
 8002440:	2b70      	cmp	r3, #112	; 0x70
 8002442:	d117      	bne.n	8002474 <judge_the_empty_and_order+0x284>
 8002444:	4b84      	ldr	r3, [pc, #528]	; (8002658 <judge_the_empty_and_order+0x468>)
 8002446:	78db      	ldrb	r3, [r3, #3]
 8002448:	2b79      	cmp	r3, #121	; 0x79
 800244a:	d113      	bne.n	8002474 <judge_the_empty_and_order+0x284>
 800244c:	4b82      	ldr	r3, [pc, #520]	; (8002658 <judge_the_empty_and_order+0x468>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b62      	cmp	r3, #98	; 0x62
 8002452:	d10f      	bne.n	8002474 <judge_the_empty_and_order+0x284>
			cake_order = 2;
 8002454:	4b81      	ldr	r3, [pc, #516]	; (800265c <judge_the_empty_and_order+0x46c>)
 8002456:	2202      	movs	r2, #2
 8002458:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800245a:	4b81      	ldr	r3, [pc, #516]	; (8002660 <judge_the_empty_and_order+0x470>)
 800245c:	2201      	movs	r2, #1
 800245e:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8002460:	4b7f      	ldr	r3, [pc, #508]	; (8002660 <judge_the_empty_and_order+0x470>)
 8002462:	2201      	movs	r2, #1
 8002464:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 8002466:	4b7e      	ldr	r3, [pc, #504]	; (8002660 <judge_the_empty_and_order+0x470>)
 8002468:	2200      	movs	r2, #0
 800246a:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 800246c:	4b7c      	ldr	r3, [pc, #496]	; (8002660 <judge_the_empty_and_order+0x470>)
 800246e:	2201      	movs	r2, #1
 8002470:	811a      	strh	r2, [r3, #8]
 8002472:	e1e7      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
		else if (hole[2] == 'y' && hole[3] == 'b' && hole[0] == 'p') {
 8002474:	4b78      	ldr	r3, [pc, #480]	; (8002658 <judge_the_empty_and_order+0x468>)
 8002476:	789b      	ldrb	r3, [r3, #2]
 8002478:	2b79      	cmp	r3, #121	; 0x79
 800247a:	d117      	bne.n	80024ac <judge_the_empty_and_order+0x2bc>
 800247c:	4b76      	ldr	r3, [pc, #472]	; (8002658 <judge_the_empty_and_order+0x468>)
 800247e:	78db      	ldrb	r3, [r3, #3]
 8002480:	2b62      	cmp	r3, #98	; 0x62
 8002482:	d113      	bne.n	80024ac <judge_the_empty_and_order+0x2bc>
 8002484:	4b74      	ldr	r3, [pc, #464]	; (8002658 <judge_the_empty_and_order+0x468>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b70      	cmp	r3, #112	; 0x70
 800248a:	d10f      	bne.n	80024ac <judge_the_empty_and_order+0x2bc>
			cake_order = 3;
 800248c:	4b73      	ldr	r3, [pc, #460]	; (800265c <judge_the_empty_and_order+0x46c>)
 800248e:	2203      	movs	r2, #3
 8002490:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8002492:	4b73      	ldr	r3, [pc, #460]	; (8002660 <judge_the_empty_and_order+0x470>)
 8002494:	2201      	movs	r2, #1
 8002496:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8002498:	4b71      	ldr	r3, [pc, #452]	; (8002660 <judge_the_empty_and_order+0x470>)
 800249a:	2201      	movs	r2, #1
 800249c:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 800249e:	4b70      	ldr	r3, [pc, #448]	; (8002660 <judge_the_empty_and_order+0x470>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80024a4:	4b6e      	ldr	r3, [pc, #440]	; (8002660 <judge_the_empty_and_order+0x470>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	811a      	strh	r2, [r3, #8]
 80024aa:	e1cb      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
		else if (hole[2] == 'p' && hole[3] == 'b' && hole[0] == 'y') {
 80024ac:	4b6a      	ldr	r3, [pc, #424]	; (8002658 <judge_the_empty_and_order+0x468>)
 80024ae:	789b      	ldrb	r3, [r3, #2]
 80024b0:	2b70      	cmp	r3, #112	; 0x70
 80024b2:	d117      	bne.n	80024e4 <judge_the_empty_and_order+0x2f4>
 80024b4:	4b68      	ldr	r3, [pc, #416]	; (8002658 <judge_the_empty_and_order+0x468>)
 80024b6:	78db      	ldrb	r3, [r3, #3]
 80024b8:	2b62      	cmp	r3, #98	; 0x62
 80024ba:	d113      	bne.n	80024e4 <judge_the_empty_and_order+0x2f4>
 80024bc:	4b66      	ldr	r3, [pc, #408]	; (8002658 <judge_the_empty_and_order+0x468>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b79      	cmp	r3, #121	; 0x79
 80024c2:	d10f      	bne.n	80024e4 <judge_the_empty_and_order+0x2f4>
			cake_order = 4;
 80024c4:	4b65      	ldr	r3, [pc, #404]	; (800265c <judge_the_empty_and_order+0x46c>)
 80024c6:	2204      	movs	r2, #4
 80024c8:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 80024ca:	4b65      	ldr	r3, [pc, #404]	; (8002660 <judge_the_empty_and_order+0x470>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80024d0:	4b63      	ldr	r3, [pc, #396]	; (8002660 <judge_the_empty_and_order+0x470>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <judge_the_empty_and_order+0x470>)
 80024d8:	2201      	movs	r2, #1
 80024da:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80024dc:	4b60      	ldr	r3, [pc, #384]	; (8002660 <judge_the_empty_and_order+0x470>)
 80024de:	2201      	movs	r2, #1
 80024e0:	811a      	strh	r2, [r3, #8]
 80024e2:	e1af      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
		else if (hole[2] == 'b' && hole[3] == 'p' && hole[0] == 'y') {
 80024e4:	4b5c      	ldr	r3, [pc, #368]	; (8002658 <judge_the_empty_and_order+0x468>)
 80024e6:	789b      	ldrb	r3, [r3, #2]
 80024e8:	2b62      	cmp	r3, #98	; 0x62
 80024ea:	d117      	bne.n	800251c <judge_the_empty_and_order+0x32c>
 80024ec:	4b5a      	ldr	r3, [pc, #360]	; (8002658 <judge_the_empty_and_order+0x468>)
 80024ee:	78db      	ldrb	r3, [r3, #3]
 80024f0:	2b70      	cmp	r3, #112	; 0x70
 80024f2:	d113      	bne.n	800251c <judge_the_empty_and_order+0x32c>
 80024f4:	4b58      	ldr	r3, [pc, #352]	; (8002658 <judge_the_empty_and_order+0x468>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b79      	cmp	r3, #121	; 0x79
 80024fa:	d10f      	bne.n	800251c <judge_the_empty_and_order+0x32c>
			cake_order = 5;
 80024fc:	4b57      	ldr	r3, [pc, #348]	; (800265c <judge_the_empty_and_order+0x46c>)
 80024fe:	2205      	movs	r2, #5
 8002500:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 8002502:	4b57      	ldr	r3, [pc, #348]	; (8002660 <judge_the_empty_and_order+0x470>)
 8002504:	2200      	movs	r2, #0
 8002506:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8002508:	4b55      	ldr	r3, [pc, #340]	; (8002660 <judge_the_empty_and_order+0x470>)
 800250a:	2201      	movs	r2, #1
 800250c:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800250e:	4b54      	ldr	r3, [pc, #336]	; (8002660 <judge_the_empty_and_order+0x470>)
 8002510:	2201      	movs	r2, #1
 8002512:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8002514:	4b52      	ldr	r3, [pc, #328]	; (8002660 <judge_the_empty_and_order+0x470>)
 8002516:	2201      	movs	r2, #1
 8002518:	811a      	strh	r2, [r3, #8]
 800251a:	e193      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
		else if (hole[2] == 'y' && hole[3] == 'p' && hole[0] == 'b') {
 800251c:	4b4e      	ldr	r3, [pc, #312]	; (8002658 <judge_the_empty_and_order+0x468>)
 800251e:	789b      	ldrb	r3, [r3, #2]
 8002520:	2b79      	cmp	r3, #121	; 0x79
 8002522:	f040 818f 	bne.w	8002844 <judge_the_empty_and_order+0x654>
 8002526:	4b4c      	ldr	r3, [pc, #304]	; (8002658 <judge_the_empty_and_order+0x468>)
 8002528:	78db      	ldrb	r3, [r3, #3]
 800252a:	2b70      	cmp	r3, #112	; 0x70
 800252c:	f040 818a 	bne.w	8002844 <judge_the_empty_and_order+0x654>
 8002530:	4b49      	ldr	r3, [pc, #292]	; (8002658 <judge_the_empty_and_order+0x468>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b62      	cmp	r3, #98	; 0x62
 8002536:	f040 8185 	bne.w	8002844 <judge_the_empty_and_order+0x654>
			cake_order = 6;
 800253a:	4b48      	ldr	r3, [pc, #288]	; (800265c <judge_the_empty_and_order+0x46c>)
 800253c:	2206      	movs	r2, #6
 800253e:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8002540:	4b47      	ldr	r3, [pc, #284]	; (8002660 <judge_the_empty_and_order+0x470>)
 8002542:	2201      	movs	r2, #1
 8002544:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8002546:	4b46      	ldr	r3, [pc, #280]	; (8002660 <judge_the_empty_and_order+0x470>)
 8002548:	2201      	movs	r2, #1
 800254a:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 800254c:	4b44      	ldr	r3, [pc, #272]	; (8002660 <judge_the_empty_and_order+0x470>)
 800254e:	2200      	movs	r2, #0
 8002550:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8002552:	4b43      	ldr	r3, [pc, #268]	; (8002660 <judge_the_empty_and_order+0x470>)
 8002554:	2201      	movs	r2, #1
 8002556:	811a      	strh	r2, [r3, #8]
 8002558:	e174      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
	}
	else if (num == 3) {
 800255a:	4b42      	ldr	r3, [pc, #264]	; (8002664 <judge_the_empty_and_order+0x474>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b03      	cmp	r3, #3
 8002560:	f040 80c1 	bne.w	80026e6 <judge_the_empty_and_order+0x4f6>
		if (transfer_the_order == 0) {
 8002564:	4b40      	ldr	r3, [pc, #256]	; (8002668 <judge_the_empty_and_order+0x478>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <judge_the_empty_and_order+0x388>
			rotate_the_ring(3);
 800256c:	2003      	movs	r0, #3
 800256e:	f7ff fc17 	bl	8001da0 <rotate_the_ring>
			rotate_offset = 3;
 8002572:	4b3e      	ldr	r3, [pc, #248]	; (800266c <judge_the_empty_and_order+0x47c>)
 8002574:	2203      	movs	r2, #3
 8002576:	601a      	str	r2, [r3, #0]
		}

		if (hole[3] == 'b' && hole[0] == 'y' && hole[1] == 'p') {
 8002578:	4b37      	ldr	r3, [pc, #220]	; (8002658 <judge_the_empty_and_order+0x468>)
 800257a:	78db      	ldrb	r3, [r3, #3]
 800257c:	2b62      	cmp	r3, #98	; 0x62
 800257e:	d117      	bne.n	80025b0 <judge_the_empty_and_order+0x3c0>
 8002580:	4b35      	ldr	r3, [pc, #212]	; (8002658 <judge_the_empty_and_order+0x468>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b79      	cmp	r3, #121	; 0x79
 8002586:	d113      	bne.n	80025b0 <judge_the_empty_and_order+0x3c0>
 8002588:	4b33      	ldr	r3, [pc, #204]	; (8002658 <judge_the_empty_and_order+0x468>)
 800258a:	785b      	ldrb	r3, [r3, #1]
 800258c:	2b70      	cmp	r3, #112	; 0x70
 800258e:	d10f      	bne.n	80025b0 <judge_the_empty_and_order+0x3c0>
			cake_order = 1;
 8002590:	4b32      	ldr	r3, [pc, #200]	; (800265c <judge_the_empty_and_order+0x46c>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8002596:	4b32      	ldr	r3, [pc, #200]	; (8002660 <judge_the_empty_and_order+0x470>)
 8002598:	2201      	movs	r2, #1
 800259a:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 800259c:	4b30      	ldr	r3, [pc, #192]	; (8002660 <judge_the_empty_and_order+0x470>)
 800259e:	2200      	movs	r2, #0
 80025a0:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80025a2:	4b2f      	ldr	r3, [pc, #188]	; (8002660 <judge_the_empty_and_order+0x470>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80025a8:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <judge_the_empty_and_order+0x470>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	811a      	strh	r2, [r3, #8]
 80025ae:	e149      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
		else if (hole[3] == 'p' && hole[0] == 'y' && hole[1] == 'b') {
 80025b0:	4b29      	ldr	r3, [pc, #164]	; (8002658 <judge_the_empty_and_order+0x468>)
 80025b2:	78db      	ldrb	r3, [r3, #3]
 80025b4:	2b70      	cmp	r3, #112	; 0x70
 80025b6:	d117      	bne.n	80025e8 <judge_the_empty_and_order+0x3f8>
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <judge_the_empty_and_order+0x468>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b79      	cmp	r3, #121	; 0x79
 80025be:	d113      	bne.n	80025e8 <judge_the_empty_and_order+0x3f8>
 80025c0:	4b25      	ldr	r3, [pc, #148]	; (8002658 <judge_the_empty_and_order+0x468>)
 80025c2:	785b      	ldrb	r3, [r3, #1]
 80025c4:	2b62      	cmp	r3, #98	; 0x62
 80025c6:	d10f      	bne.n	80025e8 <judge_the_empty_and_order+0x3f8>
			cake_order = 2;
 80025c8:	4b24      	ldr	r3, [pc, #144]	; (800265c <judge_the_empty_and_order+0x46c>)
 80025ca:	2202      	movs	r2, #2
 80025cc:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80025ce:	4b24      	ldr	r3, [pc, #144]	; (8002660 <judge_the_empty_and_order+0x470>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80025d4:	4b22      	ldr	r3, [pc, #136]	; (8002660 <judge_the_empty_and_order+0x470>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <judge_the_empty_and_order+0x470>)
 80025dc:	2201      	movs	r2, #1
 80025de:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 80025e0:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <judge_the_empty_and_order+0x470>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	811a      	strh	r2, [r3, #8]
 80025e6:	e12d      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
		else if (hole[3] == 'y' && hole[0] == 'b' && hole[1] == 'p') {
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <judge_the_empty_and_order+0x468>)
 80025ea:	78db      	ldrb	r3, [r3, #3]
 80025ec:	2b79      	cmp	r3, #121	; 0x79
 80025ee:	d117      	bne.n	8002620 <judge_the_empty_and_order+0x430>
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <judge_the_empty_and_order+0x468>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b62      	cmp	r3, #98	; 0x62
 80025f6:	d113      	bne.n	8002620 <judge_the_empty_and_order+0x430>
 80025f8:	4b17      	ldr	r3, [pc, #92]	; (8002658 <judge_the_empty_and_order+0x468>)
 80025fa:	785b      	ldrb	r3, [r3, #1]
 80025fc:	2b70      	cmp	r3, #112	; 0x70
 80025fe:	d10f      	bne.n	8002620 <judge_the_empty_and_order+0x430>
			cake_order = 3;
 8002600:	4b16      	ldr	r3, [pc, #88]	; (800265c <judge_the_empty_and_order+0x46c>)
 8002602:	2203      	movs	r2, #3
 8002604:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8002606:	4b16      	ldr	r3, [pc, #88]	; (8002660 <judge_the_empty_and_order+0x470>)
 8002608:	2201      	movs	r2, #1
 800260a:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <judge_the_empty_and_order+0x470>)
 800260e:	2201      	movs	r2, #1
 8002610:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <judge_the_empty_and_order+0x470>)
 8002614:	2201      	movs	r2, #1
 8002616:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <judge_the_empty_and_order+0x470>)
 800261a:	2200      	movs	r2, #0
 800261c:	811a      	strh	r2, [r3, #8]
 800261e:	e111      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
		else if (hole[3] == 'p' && hole[0] == 'b' && hole[1] == 'y') {
 8002620:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <judge_the_empty_and_order+0x468>)
 8002622:	78db      	ldrb	r3, [r3, #3]
 8002624:	2b70      	cmp	r3, #112	; 0x70
 8002626:	d123      	bne.n	8002670 <judge_the_empty_and_order+0x480>
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <judge_the_empty_and_order+0x468>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b62      	cmp	r3, #98	; 0x62
 800262e:	d11f      	bne.n	8002670 <judge_the_empty_and_order+0x480>
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <judge_the_empty_and_order+0x468>)
 8002632:	785b      	ldrb	r3, [r3, #1]
 8002634:	2b79      	cmp	r3, #121	; 0x79
 8002636:	d11b      	bne.n	8002670 <judge_the_empty_and_order+0x480>
			cake_order = 4;
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <judge_the_empty_and_order+0x46c>)
 800263a:	2204      	movs	r2, #4
 800263c:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800263e:	4b08      	ldr	r3, [pc, #32]	; (8002660 <judge_the_empty_and_order+0x470>)
 8002640:	2201      	movs	r2, #1
 8002642:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <judge_the_empty_and_order+0x470>)
 8002646:	2200      	movs	r2, #0
 8002648:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <judge_the_empty_and_order+0x470>)
 800264c:	2201      	movs	r2, #1
 800264e:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <judge_the_empty_and_order+0x470>)
 8002652:	2201      	movs	r2, #1
 8002654:	811a      	strh	r2, [r3, #8]
 8002656:	e0f5      	b.n	8002844 <judge_the_empty_and_order+0x654>
 8002658:	200014e0 	.word	0x200014e0
 800265c:	20000010 	.word	0x20000010
 8002660:	20001558 	.word	0x20001558
 8002664:	200014f0 	.word	0x200014f0
 8002668:	200015a0 	.word	0x200015a0
 800266c:	2000097c 	.word	0x2000097c
		}
		else if (hole[3] == 'b' && hole[0] == 'p' && hole[1] == 'y') {
 8002670:	4b7a      	ldr	r3, [pc, #488]	; (800285c <judge_the_empty_and_order+0x66c>)
 8002672:	78db      	ldrb	r3, [r3, #3]
 8002674:	2b62      	cmp	r3, #98	; 0x62
 8002676:	d117      	bne.n	80026a8 <judge_the_empty_and_order+0x4b8>
 8002678:	4b78      	ldr	r3, [pc, #480]	; (800285c <judge_the_empty_and_order+0x66c>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b70      	cmp	r3, #112	; 0x70
 800267e:	d113      	bne.n	80026a8 <judge_the_empty_and_order+0x4b8>
 8002680:	4b76      	ldr	r3, [pc, #472]	; (800285c <judge_the_empty_and_order+0x66c>)
 8002682:	785b      	ldrb	r3, [r3, #1]
 8002684:	2b79      	cmp	r3, #121	; 0x79
 8002686:	d10f      	bne.n	80026a8 <judge_the_empty_and_order+0x4b8>
			cake_order = 5;
 8002688:	4b75      	ldr	r3, [pc, #468]	; (8002860 <judge_the_empty_and_order+0x670>)
 800268a:	2205      	movs	r2, #5
 800268c:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800268e:	4b75      	ldr	r3, [pc, #468]	; (8002864 <judge_the_empty_and_order+0x674>)
 8002690:	2201      	movs	r2, #1
 8002692:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 8002694:	4b73      	ldr	r3, [pc, #460]	; (8002864 <judge_the_empty_and_order+0x674>)
 8002696:	2200      	movs	r2, #0
 8002698:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800269a:	4b72      	ldr	r3, [pc, #456]	; (8002864 <judge_the_empty_and_order+0x674>)
 800269c:	2201      	movs	r2, #1
 800269e:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80026a0:	4b70      	ldr	r3, [pc, #448]	; (8002864 <judge_the_empty_and_order+0x674>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	811a      	strh	r2, [r3, #8]
 80026a6:	e0cd      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
		else if (hole[3] == 'y' && hole[0] == 'p' && hole[1] == 'b') {
 80026a8:	4b6c      	ldr	r3, [pc, #432]	; (800285c <judge_the_empty_and_order+0x66c>)
 80026aa:	78db      	ldrb	r3, [r3, #3]
 80026ac:	2b79      	cmp	r3, #121	; 0x79
 80026ae:	f040 80c9 	bne.w	8002844 <judge_the_empty_and_order+0x654>
 80026b2:	4b6a      	ldr	r3, [pc, #424]	; (800285c <judge_the_empty_and_order+0x66c>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b70      	cmp	r3, #112	; 0x70
 80026b8:	f040 80c4 	bne.w	8002844 <judge_the_empty_and_order+0x654>
 80026bc:	4b67      	ldr	r3, [pc, #412]	; (800285c <judge_the_empty_and_order+0x66c>)
 80026be:	785b      	ldrb	r3, [r3, #1]
 80026c0:	2b62      	cmp	r3, #98	; 0x62
 80026c2:	f040 80bf 	bne.w	8002844 <judge_the_empty_and_order+0x654>
			cake_order = 6;
 80026c6:	4b66      	ldr	r3, [pc, #408]	; (8002860 <judge_the_empty_and_order+0x670>)
 80026c8:	2206      	movs	r2, #6
 80026ca:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80026cc:	4b65      	ldr	r3, [pc, #404]	; (8002864 <judge_the_empty_and_order+0x674>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80026d2:	4b64      	ldr	r3, [pc, #400]	; (8002864 <judge_the_empty_and_order+0x674>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80026d8:	4b62      	ldr	r3, [pc, #392]	; (8002864 <judge_the_empty_and_order+0x674>)
 80026da:	2201      	movs	r2, #1
 80026dc:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 80026de:	4b61      	ldr	r3, [pc, #388]	; (8002864 <judge_the_empty_and_order+0x674>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	811a      	strh	r2, [r3, #8]
 80026e4:	e0ae      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
	}
	else if (num == 4) {
 80026e6:	4b60      	ldr	r3, [pc, #384]	; (8002868 <judge_the_empty_and_order+0x678>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	f040 80aa 	bne.w	8002844 <judge_the_empty_and_order+0x654>
		rotate_offset = 0;
 80026f0:	4b5e      	ldr	r3, [pc, #376]	; (800286c <judge_the_empty_and_order+0x67c>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
		if (hole[0] == 'b' && hole[1] == 'y' && hole[2] == 'p') {
 80026f6:	4b59      	ldr	r3, [pc, #356]	; (800285c <judge_the_empty_and_order+0x66c>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b62      	cmp	r3, #98	; 0x62
 80026fc:	d117      	bne.n	800272e <judge_the_empty_and_order+0x53e>
 80026fe:	4b57      	ldr	r3, [pc, #348]	; (800285c <judge_the_empty_and_order+0x66c>)
 8002700:	785b      	ldrb	r3, [r3, #1]
 8002702:	2b79      	cmp	r3, #121	; 0x79
 8002704:	d113      	bne.n	800272e <judge_the_empty_and_order+0x53e>
 8002706:	4b55      	ldr	r3, [pc, #340]	; (800285c <judge_the_empty_and_order+0x66c>)
 8002708:	789b      	ldrb	r3, [r3, #2]
 800270a:	2b70      	cmp	r3, #112	; 0x70
 800270c:	d10f      	bne.n	800272e <judge_the_empty_and_order+0x53e>
			cake_order = 1;
 800270e:	4b54      	ldr	r3, [pc, #336]	; (8002860 <judge_the_empty_and_order+0x670>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8002714:	4b53      	ldr	r3, [pc, #332]	; (8002864 <judge_the_empty_and_order+0x674>)
 8002716:	2201      	movs	r2, #1
 8002718:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 800271a:	4b52      	ldr	r3, [pc, #328]	; (8002864 <judge_the_empty_and_order+0x674>)
 800271c:	2201      	movs	r2, #1
 800271e:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 8002720:	4b50      	ldr	r3, [pc, #320]	; (8002864 <judge_the_empty_and_order+0x674>)
 8002722:	2200      	movs	r2, #0
 8002724:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8002726:	4b4f      	ldr	r3, [pc, #316]	; (8002864 <judge_the_empty_and_order+0x674>)
 8002728:	2201      	movs	r2, #1
 800272a:	811a      	strh	r2, [r3, #8]
 800272c:	e08a      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
		else if (hole[0] == 'p' && hole[1] == 'y' && hole[2] == 'b') {
 800272e:	4b4b      	ldr	r3, [pc, #300]	; (800285c <judge_the_empty_and_order+0x66c>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b70      	cmp	r3, #112	; 0x70
 8002734:	d117      	bne.n	8002766 <judge_the_empty_and_order+0x576>
 8002736:	4b49      	ldr	r3, [pc, #292]	; (800285c <judge_the_empty_and_order+0x66c>)
 8002738:	785b      	ldrb	r3, [r3, #1]
 800273a:	2b79      	cmp	r3, #121	; 0x79
 800273c:	d113      	bne.n	8002766 <judge_the_empty_and_order+0x576>
 800273e:	4b47      	ldr	r3, [pc, #284]	; (800285c <judge_the_empty_and_order+0x66c>)
 8002740:	789b      	ldrb	r3, [r3, #2]
 8002742:	2b62      	cmp	r3, #98	; 0x62
 8002744:	d10f      	bne.n	8002766 <judge_the_empty_and_order+0x576>
			cake_order = 2;
 8002746:	4b46      	ldr	r3, [pc, #280]	; (8002860 <judge_the_empty_and_order+0x670>)
 8002748:	2202      	movs	r2, #2
 800274a:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 800274c:	4b45      	ldr	r3, [pc, #276]	; (8002864 <judge_the_empty_and_order+0x674>)
 800274e:	2200      	movs	r2, #0
 8002750:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8002752:	4b44      	ldr	r3, [pc, #272]	; (8002864 <judge_the_empty_and_order+0x674>)
 8002754:	2201      	movs	r2, #1
 8002756:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8002758:	4b42      	ldr	r3, [pc, #264]	; (8002864 <judge_the_empty_and_order+0x674>)
 800275a:	2201      	movs	r2, #1
 800275c:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 800275e:	4b41      	ldr	r3, [pc, #260]	; (8002864 <judge_the_empty_and_order+0x674>)
 8002760:	2201      	movs	r2, #1
 8002762:	811a      	strh	r2, [r3, #8]
 8002764:	e06e      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
		else if (hole[0] == 'y' && hole[1] == 'b' && hole[2] == 'p') {
 8002766:	4b3d      	ldr	r3, [pc, #244]	; (800285c <judge_the_empty_and_order+0x66c>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b79      	cmp	r3, #121	; 0x79
 800276c:	d117      	bne.n	800279e <judge_the_empty_and_order+0x5ae>
 800276e:	4b3b      	ldr	r3, [pc, #236]	; (800285c <judge_the_empty_and_order+0x66c>)
 8002770:	785b      	ldrb	r3, [r3, #1]
 8002772:	2b62      	cmp	r3, #98	; 0x62
 8002774:	d113      	bne.n	800279e <judge_the_empty_and_order+0x5ae>
 8002776:	4b39      	ldr	r3, [pc, #228]	; (800285c <judge_the_empty_and_order+0x66c>)
 8002778:	789b      	ldrb	r3, [r3, #2]
 800277a:	2b70      	cmp	r3, #112	; 0x70
 800277c:	d10f      	bne.n	800279e <judge_the_empty_and_order+0x5ae>
			cake_order = 3;
 800277e:	4b38      	ldr	r3, [pc, #224]	; (8002860 <judge_the_empty_and_order+0x670>)
 8002780:	2203      	movs	r2, #3
 8002782:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 8002784:	4b37      	ldr	r3, [pc, #220]	; (8002864 <judge_the_empty_and_order+0x674>)
 8002786:	2200      	movs	r2, #0
 8002788:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 800278a:	4b36      	ldr	r3, [pc, #216]	; (8002864 <judge_the_empty_and_order+0x674>)
 800278c:	2201      	movs	r2, #1
 800278e:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8002790:	4b34      	ldr	r3, [pc, #208]	; (8002864 <judge_the_empty_and_order+0x674>)
 8002792:	2201      	movs	r2, #1
 8002794:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8002796:	4b33      	ldr	r3, [pc, #204]	; (8002864 <judge_the_empty_and_order+0x674>)
 8002798:	2201      	movs	r2, #1
 800279a:	811a      	strh	r2, [r3, #8]
 800279c:	e052      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
		else if (hole[0] == 'p' && hole[1] == 'b' && hole[2] == 'y') {
 800279e:	4b2f      	ldr	r3, [pc, #188]	; (800285c <judge_the_empty_and_order+0x66c>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b70      	cmp	r3, #112	; 0x70
 80027a4:	d117      	bne.n	80027d6 <judge_the_empty_and_order+0x5e6>
 80027a6:	4b2d      	ldr	r3, [pc, #180]	; (800285c <judge_the_empty_and_order+0x66c>)
 80027a8:	785b      	ldrb	r3, [r3, #1]
 80027aa:	2b62      	cmp	r3, #98	; 0x62
 80027ac:	d113      	bne.n	80027d6 <judge_the_empty_and_order+0x5e6>
 80027ae:	4b2b      	ldr	r3, [pc, #172]	; (800285c <judge_the_empty_and_order+0x66c>)
 80027b0:	789b      	ldrb	r3, [r3, #2]
 80027b2:	2b79      	cmp	r3, #121	; 0x79
 80027b4:	d10f      	bne.n	80027d6 <judge_the_empty_and_order+0x5e6>
			cake_order = 4;
 80027b6:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <judge_the_empty_and_order+0x670>)
 80027b8:	2204      	movs	r2, #4
 80027ba:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80027bc:	4b29      	ldr	r3, [pc, #164]	; (8002864 <judge_the_empty_and_order+0x674>)
 80027be:	2201      	movs	r2, #1
 80027c0:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80027c2:	4b28      	ldr	r3, [pc, #160]	; (8002864 <judge_the_empty_and_order+0x674>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 80027c8:	4b26      	ldr	r3, [pc, #152]	; (8002864 <judge_the_empty_and_order+0x674>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80027ce:	4b25      	ldr	r3, [pc, #148]	; (8002864 <judge_the_empty_and_order+0x674>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	811a      	strh	r2, [r3, #8]
 80027d4:	e036      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
		else if (hole[0] == 'b' && hole[1] == 'p' && hole[2] == 'y') {
 80027d6:	4b21      	ldr	r3, [pc, #132]	; (800285c <judge_the_empty_and_order+0x66c>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b62      	cmp	r3, #98	; 0x62
 80027dc:	d117      	bne.n	800280e <judge_the_empty_and_order+0x61e>
 80027de:	4b1f      	ldr	r3, [pc, #124]	; (800285c <judge_the_empty_and_order+0x66c>)
 80027e0:	785b      	ldrb	r3, [r3, #1]
 80027e2:	2b70      	cmp	r3, #112	; 0x70
 80027e4:	d113      	bne.n	800280e <judge_the_empty_and_order+0x61e>
 80027e6:	4b1d      	ldr	r3, [pc, #116]	; (800285c <judge_the_empty_and_order+0x66c>)
 80027e8:	789b      	ldrb	r3, [r3, #2]
 80027ea:	2b79      	cmp	r3, #121	; 0x79
 80027ec:	d10f      	bne.n	800280e <judge_the_empty_and_order+0x61e>
			cake_order = 5;
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <judge_the_empty_and_order+0x670>)
 80027f0:	2205      	movs	r2, #5
 80027f2:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <judge_the_empty_and_order+0x674>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80027fa:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <judge_the_empty_and_order+0x674>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 8002800:	4b18      	ldr	r3, [pc, #96]	; (8002864 <judge_the_empty_and_order+0x674>)
 8002802:	2200      	movs	r2, #0
 8002804:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8002806:	4b17      	ldr	r3, [pc, #92]	; (8002864 <judge_the_empty_and_order+0x674>)
 8002808:	2201      	movs	r2, #1
 800280a:	811a      	strh	r2, [r3, #8]
 800280c:	e01a      	b.n	8002844 <judge_the_empty_and_order+0x654>
		}
		else if (hole[0] == 'y' && hole[1] == 'p' && hole[2] == 'b') {
 800280e:	4b13      	ldr	r3, [pc, #76]	; (800285c <judge_the_empty_and_order+0x66c>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b79      	cmp	r3, #121	; 0x79
 8002814:	d116      	bne.n	8002844 <judge_the_empty_and_order+0x654>
 8002816:	4b11      	ldr	r3, [pc, #68]	; (800285c <judge_the_empty_and_order+0x66c>)
 8002818:	785b      	ldrb	r3, [r3, #1]
 800281a:	2b70      	cmp	r3, #112	; 0x70
 800281c:	d112      	bne.n	8002844 <judge_the_empty_and_order+0x654>
 800281e:	4b0f      	ldr	r3, [pc, #60]	; (800285c <judge_the_empty_and_order+0x66c>)
 8002820:	789b      	ldrb	r3, [r3, #2]
 8002822:	2b62      	cmp	r3, #98	; 0x62
 8002824:	d10e      	bne.n	8002844 <judge_the_empty_and_order+0x654>
			cake_order = 6;
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <judge_the_empty_and_order+0x670>)
 8002828:	2206      	movs	r2, #6
 800282a:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 800282c:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <judge_the_empty_and_order+0x674>)
 800282e:	2200      	movs	r2, #0
 8002830:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <judge_the_empty_and_order+0x674>)
 8002834:	2201      	movs	r2, #1
 8002836:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <judge_the_empty_and_order+0x674>)
 800283a:	2201      	movs	r2, #1
 800283c:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <judge_the_empty_and_order+0x674>)
 8002840:	2201      	movs	r2, #1
 8002842:	811a      	strh	r2, [r3, #8]
		}
	}
	while (1) {
		if (step == 0)
 8002844:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <judge_the_empty_and_order+0x680>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <judge_the_empty_and_order+0x662>
 800284c:	e7fa      	b.n	8002844 <judge_the_empty_and_order+0x654>
		return;
 800284e:	bf00      	nop
 8002850:	e000      	b.n	8002854 <judge_the_empty_and_order+0x664>
			break;
 8002852:	bf00      	nop
	}
}
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200014e0 	.word	0x200014e0
 8002860:	20000010 	.word	0x20000010
 8002864:	20001558 	.word	0x20001558
 8002868:	200014f0 	.word	0x200014f0
 800286c:	2000097c 	.word	0x2000097c
 8002870:	200014dc 	.word	0x200014dc

08002874 <pauseHanoiing>:

void pauseHanoiing() {
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
	if (finish == 1)
 800287a:	4b51      	ldr	r3, [pc, #324]	; (80029c0 <pauseHanoiing+0x14c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b01      	cmp	r3, #1
 8002880:	f000 8099 	beq.w	80029b6 <pauseHanoiing+0x142>
		return;

	int paused = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	607b      	str	r3, [r7, #4]
	if (pauseHanoi == 1) {
 8002888:	4b4e      	ldr	r3, [pc, #312]	; (80029c4 <pauseHanoiing+0x150>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d121      	bne.n	80028d4 <pauseHanoiing+0x60>
		mission_array[0] = 1;
 8002890:	4b4d      	ldr	r3, [pc, #308]	; (80029c8 <pauseHanoiing+0x154>)
 8002892:	2201      	movs	r2, #1
 8002894:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 8002896:	4b4d      	ldr	r3, [pc, #308]	; (80029cc <pauseHanoiing+0x158>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
		paused = 1;
 800289c:	2301      	movs	r3, #1
 800289e:	607b      	str	r3, [r7, #4]
		unsuck_the_cake(7, 1);
 80028a0:	2101      	movs	r1, #1
 80028a2:	2007      	movs	r0, #7
 80028a4:	f7ff f980 	bl	8001ba8 <unsuck_the_cake>
		unsuck_the_cake(4, 1);
 80028a8:	2101      	movs	r1, #1
 80028aa:	2004      	movs	r0, #4
 80028ac:	f7ff f97c 	bl	8001ba8 <unsuck_the_cake>
		unsuck_the_cake(3, 1);
 80028b0:	2101      	movs	r1, #1
 80028b2:	2003      	movs	r0, #3
 80028b4:	f7ff f978 	bl	8001ba8 <unsuck_the_cake>
//		cake_check(0, cake_layer[0]);
//		cake_check(1, cake_layer[1]);
//		cake_check(2, cake_layer[2]);
//		cake_check(3, cake_layer[3]);
		press_sensor_feedback();
 80028b8:	f7ff f88e 	bl	80019d8 <press_sensor_feedback>
	}

	while (pauseHanoi != 0) {
 80028bc:	e00a      	b.n	80028d4 <pauseHanoiing+0x60>
		if (finish == 1) {
 80028be:	4b40      	ldr	r3, [pc, #256]	; (80029c0 <pauseHanoiing+0x14c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d106      	bne.n	80028d4 <pauseHanoiing+0x60>
			finish_all_motion();
 80028c6:	f000 fddf 	bl	8003488 <finish_all_motion>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20000 * 255);
 80028ca:	4b41      	ldr	r3, [pc, #260]	; (80029d0 <pauseHanoiing+0x15c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a41      	ldr	r2, [pc, #260]	; (80029d4 <pauseHanoiing+0x160>)
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40
			return;
 80028d2:	e071      	b.n	80029b8 <pauseHanoiing+0x144>
	while (pauseHanoi != 0) {
 80028d4:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <pauseHanoiing+0x150>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f0      	bne.n	80028be <pauseHanoiing+0x4a>
			break;
		}
	}

	if (paused == 1) {
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d16a      	bne.n	80029b8 <pauseHanoiing+0x144>
		mission_array[0] = 0;
 80028e2:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <pauseHanoiing+0x154>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	801a      	strh	r2, [r3, #0]
		if (dont_go_down[0] == 0) {
 80028e8:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <pauseHanoiing+0x164>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d111      	bne.n	8002914 <pauseHanoiing+0xa0>
			suck_the_cake(7, (4 - cake_layer[(0 + rotate_offset) % 4]));
 80028f0:	4b3a      	ldr	r3, [pc, #232]	; (80029dc <pauseHanoiing+0x168>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	425a      	negs	r2, r3
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	f002 0203 	and.w	r2, r2, #3
 80028fe:	bf58      	it	pl
 8002900:	4253      	negpl	r3, r2
 8002902:	4a37      	ldr	r2, [pc, #220]	; (80029e0 <pauseHanoiing+0x16c>)
 8002904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002908:	f1c3 0304 	rsb	r3, r3, #4
 800290c:	4619      	mov	r1, r3
 800290e:	2007      	movs	r0, #7
 8002910:	f7fe ff86 	bl	8001820 <suck_the_cake>

		}
		if (dont_go_down[1] == 0) {
 8002914:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <pauseHanoiing+0x164>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d112      	bne.n	8002942 <pauseHanoiing+0xce>
			suck_the_cake(4, (4 - cake_layer[(1 + rotate_offset) % 4]));
 800291c:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <pauseHanoiing+0x168>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	425a      	negs	r2, r3
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	f002 0203 	and.w	r2, r2, #3
 800292c:	bf58      	it	pl
 800292e:	4253      	negpl	r3, r2
 8002930:	4a2b      	ldr	r2, [pc, #172]	; (80029e0 <pauseHanoiing+0x16c>)
 8002932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002936:	f1c3 0304 	rsb	r3, r3, #4
 800293a:	4619      	mov	r1, r3
 800293c:	2004      	movs	r0, #4
 800293e:	f7fe ff6f 	bl	8001820 <suck_the_cake>

		}

		if (dont_go_down[2] == 0) {
 8002942:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <pauseHanoiing+0x164>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d112      	bne.n	8002970 <pauseHanoiing+0xfc>
			suck_the_cake(3, (4 - cake_layer[(2 + rotate_offset) % 4]));
 800294a:	4b24      	ldr	r3, [pc, #144]	; (80029dc <pauseHanoiing+0x168>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3302      	adds	r3, #2
 8002950:	425a      	negs	r2, r3
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	f002 0203 	and.w	r2, r2, #3
 800295a:	bf58      	it	pl
 800295c:	4253      	negpl	r3, r2
 800295e:	4a20      	ldr	r2, [pc, #128]	; (80029e0 <pauseHanoiing+0x16c>)
 8002960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002964:	f1c3 0304 	rsb	r3, r3, #4
 8002968:	4619      	mov	r1, r3
 800296a:	2003      	movs	r0, #3
 800296c:	f7fe ff58 	bl	8001820 <suck_the_cake>

		}
		for (int i = 0; i < 3; i++)
 8002970:	2300      	movs	r3, #0
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	e007      	b.n	8002986 <pauseHanoiing+0x112>
			dont_go_down[i] = 0;
 8002976:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <pauseHanoiing+0x164>)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2100      	movs	r1, #0
 800297c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 3; i++)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	3301      	adds	r3, #1
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b02      	cmp	r3, #2
 800298a:	ddf4      	ble.n	8002976 <pauseHanoiing+0x102>

		UART_Send_SetMotorPosition(7, 1300, 0);
 800298c:	2200      	movs	r2, #0
 800298e:	f240 5114 	movw	r1, #1300	; 0x514
 8002992:	2007      	movs	r0, #7
 8002994:	f7fe fa0a 	bl	8000dac <UART_Send_SetMotorPosition>
		UART_Send_SetMotorPosition(4, 1200, 200);
 8002998:	22c8      	movs	r2, #200	; 0xc8
 800299a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800299e:	2004      	movs	r0, #4
 80029a0:	f7fe fa04 	bl	8000dac <UART_Send_SetMotorPosition>
		UART_Send_SetMotorPosition(3, 1200, 200);
 80029a4:	22c8      	movs	r2, #200	; 0xc8
 80029a6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80029aa:	2003      	movs	r0, #3
 80029ac:	f7fe f9fe 	bl	8000dac <UART_Send_SetMotorPosition>
//		HAL_Delay(1500);
		press_sensor_feedback();
 80029b0:	f7ff f812 	bl	80019d8 <press_sensor_feedback>
 80029b4:	e000      	b.n	80029b8 <pauseHanoiing+0x144>
		return;
 80029b6:	bf00      	nop

	}
}
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200014ec 	.word	0x200014ec
 80029c4:	2000152c 	.word	0x2000152c
 80029c8:	20001558 	.word	0x20001558
 80029cc:	20001550 	.word	0x20001550
 80029d0:	200015b4 	.word	0x200015b4
 80029d4:	004dd1e0 	.word	0x004dd1e0
 80029d8:	200009a4 	.word	0x200009a4
 80029dc:	2000097c 	.word	0x2000097c
 80029e0:	20000988 	.word	0x20000988

080029e4 <Tower_of_Hanoi>:

int tower_step = 0;
void Tower_of_Hanoi(int cake_order) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	if (if_gate_ok == 0)
 80029ec:	4b83      	ldr	r3, [pc, #524]	; (8002bfc <Tower_of_Hanoi+0x218>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 853b 	beq.w	800346c <Tower_of_Hanoi+0xa88>
		return;
	if (cake_order == -1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	f000 8538 	beq.w	8003470 <Tower_of_Hanoi+0xa8c>
		return;
	suck_the_cake(7, 1);
 8002a00:	2101      	movs	r1, #1
 8002a02:	2007      	movs	r0, #7
 8002a04:	f7fe ff0c 	bl	8001820 <suck_the_cake>
	suck_the_cake(4, 1);
 8002a08:	2101      	movs	r1, #1
 8002a0a:	2004      	movs	r0, #4
 8002a0c:	f7fe ff08 	bl	8001820 <suck_the_cake>

	suck_the_cake(3, 1);
 8002a10:	2101      	movs	r1, #1
 8002a12:	2003      	movs	r0, #3
 8002a14:	f7fe ff04 	bl	8001820 <suck_the_cake>

	press_sensor_feedback();
 8002a18:	f7fe ffde 	bl	80019d8 <press_sensor_feedback>
	pauseHanoiing();
 8002a1c:	f7ff ff2a 	bl	8002874 <pauseHanoiing>
	if (cake_order == 1) {
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	f040 80f6 	bne.w	8002c14 <Tower_of_Hanoi+0x230>

		rotate_the_ring(3);
 8002a28:	2003      	movs	r0, #3
 8002a2a:	f7ff f9b9 	bl	8001da0 <rotate_the_ring>
		tower_step = 1;
 8002a2e:	4b74      	ldr	r3, [pc, #464]	; (8002c00 <Tower_of_Hanoi+0x21c>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

		unsuck_the_cake(7, 3);
 8002a34:	2103      	movs	r1, #3
 8002a36:	2007      	movs	r0, #7
 8002a38:	f7ff f8b6 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002a3c:	f7fe ffcc 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002a40:	f7ff ff18 	bl	8002874 <pauseHanoiing>
		tower_step = 2;
 8002a44:	4b6e      	ldr	r3, [pc, #440]	; (8002c00 <Tower_of_Hanoi+0x21c>)
 8002a46:	2202      	movs	r2, #2
 8002a48:	601a      	str	r2, [r3, #0]

		rotate_the_ring(2);
 8002a4a:	2002      	movs	r0, #2
 8002a4c:	f7ff f9a8 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8002a50:	2102      	movs	r1, #2
 8002a52:	2004      	movs	r0, #4
 8002a54:	f7ff f8a8 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002a58:	f7fe ffbe 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002a5c:	f7ff ff0a 	bl	8002874 <pauseHanoiing>
		tower_step = 3;
 8002a60:	4b67      	ldr	r3, [pc, #412]	; (8002c00 <Tower_of_Hanoi+0x21c>)
 8002a62:	2203      	movs	r2, #3
 8002a64:	601a      	str	r2, [r3, #0]

		rotate_the_ring(1);
 8002a66:	2001      	movs	r0, #1
 8002a68:	f7ff f99a 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	2003      	movs	r0, #3
 8002a70:	f7ff f89a 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002a74:	f7fe ffb0 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002a78:	f7ff fefc 	bl	8002874 <pauseHanoiing>
		tower_step = 4;
 8002a7c:	4b60      	ldr	r3, [pc, #384]	; (8002c00 <Tower_of_Hanoi+0x21c>)
 8002a7e:	2204      	movs	r2, #4
 8002a80:	601a      	str	r2, [r3, #0]

		rotate_the_ring(0);
 8002a82:	2000      	movs	r0, #0
 8002a84:	f7ff f98c 	bl	8001da0 <rotate_the_ring>
		suck_the_cake(7, 2);
 8002a88:	2102      	movs	r1, #2
 8002a8a:	2007      	movs	r0, #7
 8002a8c:	f7fe fec8 	bl	8001820 <suck_the_cake>
		suck_the_cake(4, 2);
 8002a90:	2102      	movs	r1, #2
 8002a92:	2004      	movs	r0, #4
 8002a94:	f7fe fec4 	bl	8001820 <suck_the_cake>
		suck_the_cake(3, 2);
 8002a98:	2102      	movs	r1, #2
 8002a9a:	2003      	movs	r0, #3
 8002a9c:	f7fe fec0 	bl	8001820 <suck_the_cake>
		press_sensor_feedback();
 8002aa0:	f7fe ff9a 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002aa4:	f7ff fee6 	bl	8002874 <pauseHanoiing>
		tower_step = 5;
 8002aa8:	4b55      	ldr	r3, [pc, #340]	; (8002c00 <Tower_of_Hanoi+0x21c>)
 8002aaa:	2205      	movs	r2, #5
 8002aac:	601a      	str	r2, [r3, #0]

		rotate_the_ring(3);
 8002aae:	2003      	movs	r0, #3
 8002ab0:	f7ff f976 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	2004      	movs	r0, #4
 8002ab8:	f7ff f876 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002abc:	f7fe ff8c 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002ac0:	f7ff fed8 	bl	8002874 <pauseHanoiing>
		tower_step = 6;
 8002ac4:	4b4e      	ldr	r3, [pc, #312]	; (8002c00 <Tower_of_Hanoi+0x21c>)
 8002ac6:	2206      	movs	r2, #6
 8002ac8:	601a      	str	r2, [r3, #0]

		rotate_the_ring(2);
 8002aca:	2002      	movs	r0, #2
 8002acc:	f7ff f968 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	2003      	movs	r0, #3
 8002ad4:	f7ff f868 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002ad8:	f7fe ff7e 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002adc:	f7ff feca 	bl	8002874 <pauseHanoiing>
		tower_step = 7;
 8002ae0:	4b47      	ldr	r3, [pc, #284]	; (8002c00 <Tower_of_Hanoi+0x21c>)
 8002ae2:	2207      	movs	r2, #7
 8002ae4:	601a      	str	r2, [r3, #0]

		rotate_the_ring(0);
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7ff f95a 	bl	8001da0 <rotate_the_ring>
		suck_the_cake(4, 3);
 8002aec:	2103      	movs	r1, #3
 8002aee:	2004      	movs	r0, #4
 8002af0:	f7fe fe96 	bl	8001820 <suck_the_cake>
		suck_the_cake(3, 3);
 8002af4:	2103      	movs	r1, #3
 8002af6:	2003      	movs	r0, #3
 8002af8:	f7fe fe92 	bl	8001820 <suck_the_cake>
		press_sensor_feedback();
 8002afc:	f7fe ff6c 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002b00:	f7ff feb8 	bl	8002874 <pauseHanoiing>
		tower_step = 8;
 8002b04:	4b3e      	ldr	r3, [pc, #248]	; (8002c00 <Tower_of_Hanoi+0x21c>)
 8002b06:	2208      	movs	r2, #8
 8002b08:	601a      	str	r2, [r3, #0]

		rotate_the_ring(1);
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f7ff f948 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(7, 3);
 8002b10:	2103      	movs	r1, #3
 8002b12:	2007      	movs	r0, #7
 8002b14:	f7ff f848 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002b18:	f7fe ff5e 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002b1c:	f7ff feaa 	bl	8002874 <pauseHanoiing>
		tower_step = 9;
 8002b20:	4b37      	ldr	r3, [pc, #220]	; (8002c00 <Tower_of_Hanoi+0x21c>)
 8002b22:	2209      	movs	r2, #9
 8002b24:	601a      	str	r2, [r3, #0]

		rotate_the_ring(0);
 8002b26:	2000      	movs	r0, #0
 8002b28:	f7ff f93a 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8002b2c:	2102      	movs	r1, #2
 8002b2e:	2004      	movs	r0, #4
 8002b30:	f7ff f83a 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002b34:	f7fe ff50 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002b38:	f7ff fe9c 	bl	8002874 <pauseHanoiing>
		tower_step = 10;
 8002b3c:	4b30      	ldr	r3, [pc, #192]	; (8002c00 <Tower_of_Hanoi+0x21c>)
 8002b3e:	220a      	movs	r2, #10
 8002b40:	601a      	str	r2, [r3, #0]

		rotate_the_ring(3);
 8002b42:	2003      	movs	r0, #3
 8002b44:	f7ff f92c 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8002b48:	2101      	movs	r1, #1
 8002b4a:	2003      	movs	r0, #3
 8002b4c:	f7ff f82c 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002b50:	f7fe ff42 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002b54:	f7ff fe8e 	bl	8002874 <pauseHanoiing>
		homefree = 1;
 8002b58:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <Tower_of_Hanoi+0x220>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
		tower_step = 11;
 8002b5e:	4b28      	ldr	r3, [pc, #160]	; (8002c00 <Tower_of_Hanoi+0x21c>)
 8002b60:	220b      	movs	r2, #11
 8002b62:	601a      	str	r2, [r3, #0]
		cake_check(0, 0);
 8002b64:	2100      	movs	r1, #0
 8002b66:	2000      	movs	r0, #0
 8002b68:	f7fe ff74 	bl	8001a54 <cake_check>
		cake_check(1, 0);
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	2001      	movs	r0, #1
 8002b70:	f7fe ff70 	bl	8001a54 <cake_check>
		cake_check(2, 0);
 8002b74:	2100      	movs	r1, #0
 8002b76:	2002      	movs	r0, #2
 8002b78:	f7fe ff6c 	bl	8001a54 <cake_check>
		cake_check(3, 0);
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	2003      	movs	r0, #3
 8002b80:	f7fe ff68 	bl	8001a54 <cake_check>
		if (pauseHanoi == 1) {
 8002b84:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <Tower_of_Hanoi+0x224>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d105      	bne.n	8002b98 <Tower_of_Hanoi+0x1b4>
			mission_array[0] = 1;
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <Tower_of_Hanoi+0x228>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8002b92:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <Tower_of_Hanoi+0x22c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
		}
		put_the_cherry(0);
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f7ff fa4f 	bl	800203c <put_the_cherry>
		if (pauseHanoi == 1) {
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <Tower_of_Hanoi+0x224>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d105      	bne.n	8002bb2 <Tower_of_Hanoi+0x1ce>
			mission_array[0] = 1;
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <Tower_of_Hanoi+0x228>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8002bac:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <Tower_of_Hanoi+0x22c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
		}
		put_the_cherry(1);
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f7ff fa42 	bl	800203c <put_the_cherry>
		if (pauseHanoi == 1) {
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <Tower_of_Hanoi+0x224>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d105      	bne.n	8002bcc <Tower_of_Hanoi+0x1e8>
			mission_array[0] = 1;
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <Tower_of_Hanoi+0x228>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <Tower_of_Hanoi+0x22c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
		}
		put_the_cherry(2);
 8002bcc:	2002      	movs	r0, #2
 8002bce:	f7ff fa35 	bl	800203c <put_the_cherry>
		if (pauseHanoi == 1) {
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <Tower_of_Hanoi+0x224>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d105      	bne.n	8002be6 <Tower_of_Hanoi+0x202>
			mission_array[0] = 1;
 8002bda:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <Tower_of_Hanoi+0x228>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <Tower_of_Hanoi+0x22c>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
		}

		rotate_the_ring(0);
 8002be6:	2000      	movs	r0, #0
 8002be8:	f7ff f8da 	bl	8001da0 <rotate_the_ring>
		mission_array[0] = 2;
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <Tower_of_Hanoi+0x228>)
 8002bee:	2202      	movs	r2, #2
 8002bf0:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 8002bf2:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <Tower_of_Hanoi+0x22c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	f000 bc3b 	b.w	8003472 <Tower_of_Hanoi+0xa8e>
 8002bfc:	20000014 	.word	0x20000014
 8002c00:	200009cc 	.word	0x200009cc
 8002c04:	20001530 	.word	0x20001530
 8002c08:	2000152c 	.word	0x2000152c
 8002c0c:	20001558 	.word	0x20001558
 8002c10:	20001550 	.word	0x20001550
	}

	else if (cake_order == 2) {
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	f040 80c8 	bne.w	8002dac <Tower_of_Hanoi+0x3c8>
		rotate_the_ring(1);
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	f7ff f8bf 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(3, 3);
 8002c22:	2103      	movs	r1, #3
 8002c24:	2003      	movs	r0, #3
 8002c26:	f7fe ffbf 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002c2a:	f7fe fed5 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002c2e:	f7ff fe21 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(2);
 8002c32:	2002      	movs	r0, #2
 8002c34:	f7ff f8b4 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8002c38:	2102      	movs	r1, #2
 8002c3a:	2004      	movs	r0, #4
 8002c3c:	f7fe ffb4 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002c40:	f7fe feca 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002c44:	f7ff fe16 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(3);
 8002c48:	2003      	movs	r0, #3
 8002c4a:	f7ff f8a9 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(7, 1);
 8002c4e:	2101      	movs	r1, #1
 8002c50:	2007      	movs	r0, #7
 8002c52:	f7fe ffa9 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002c56:	f7fe febf 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002c5a:	f7ff fe0b 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(0);
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f7ff f89e 	bl	8001da0 <rotate_the_ring>
		suck_the_cake(7, 2);
 8002c64:	2102      	movs	r1, #2
 8002c66:	2007      	movs	r0, #7
 8002c68:	f7fe fdda 	bl	8001820 <suck_the_cake>
		suck_the_cake(4, 2);
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	2004      	movs	r0, #4
 8002c70:	f7fe fdd6 	bl	8001820 <suck_the_cake>
		suck_the_cake(3, 2);
 8002c74:	2102      	movs	r1, #2
 8002c76:	2003      	movs	r0, #3
 8002c78:	f7fe fdd2 	bl	8001820 <suck_the_cake>
		press_sensor_feedback();
 8002c7c:	f7fe feac 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002c80:	f7ff fdf8 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(1);
 8002c84:	2001      	movs	r0, #1
 8002c86:	f7ff f88b 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8002c8a:	2102      	movs	r1, #2
 8002c8c:	2004      	movs	r0, #4
 8002c8e:	f7fe ff8b 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002c92:	f7fe fea1 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002c96:	f7ff fded 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(2);
 8002c9a:	2002      	movs	r0, #2
 8002c9c:	f7ff f880 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(7, 1);
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	2007      	movs	r0, #7
 8002ca4:	f7fe ff80 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002ca8:	f7fe fe96 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002cac:	f7ff fde2 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(0);
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f7ff f875 	bl	8001da0 <rotate_the_ring>
		suck_the_cake(4, 3);
 8002cb6:	2103      	movs	r1, #3
 8002cb8:	2004      	movs	r0, #4
 8002cba:	f7fe fdb1 	bl	8001820 <suck_the_cake>
		suck_the_cake(7, 3);
 8002cbe:	2103      	movs	r1, #3
 8002cc0:	2007      	movs	r0, #7
 8002cc2:	f7fe fdad 	bl	8001820 <suck_the_cake>
		press_sensor_feedback();
 8002cc6:	f7fe fe87 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002cca:	f7ff fdd3 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(3);
 8002cce:	2003      	movs	r0, #3
 8002cd0:	f7ff f866 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(3, 3);
 8002cd4:	2103      	movs	r1, #3
 8002cd6:	2003      	movs	r0, #3
 8002cd8:	f7fe ff66 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002cdc:	f7fe fe7c 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002ce0:	f7ff fdc8 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(0);
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7ff f85b 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8002cea:	2102      	movs	r1, #2
 8002cec:	2004      	movs	r0, #4
 8002cee:	f7fe ff5b 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002cf2:	f7fe fe71 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002cf6:	f7ff fdbd 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(1);
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f7ff f850 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(7, 1);
 8002d00:	2101      	movs	r1, #1
 8002d02:	2007      	movs	r0, #7
 8002d04:	f7fe ff50 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002d08:	f7fe fe66 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002d0c:	f7ff fdb2 	bl	8002874 <pauseHanoiing>
		homefree = 1;
 8002d10:	4b8c      	ldr	r3, [pc, #560]	; (8002f44 <Tower_of_Hanoi+0x560>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
		cake_check(0, 0);
 8002d16:	2100      	movs	r1, #0
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f7fe fe9b 	bl	8001a54 <cake_check>
		cake_check(1, 0);
 8002d1e:	2100      	movs	r1, #0
 8002d20:	2001      	movs	r0, #1
 8002d22:	f7fe fe97 	bl	8001a54 <cake_check>
		cake_check(2, 0);
 8002d26:	2100      	movs	r1, #0
 8002d28:	2002      	movs	r0, #2
 8002d2a:	f7fe fe93 	bl	8001a54 <cake_check>
		cake_check(3, 0);
 8002d2e:	2100      	movs	r1, #0
 8002d30:	2003      	movs	r0, #3
 8002d32:	f7fe fe8f 	bl	8001a54 <cake_check>
		if (pauseHanoi == 1) {
 8002d36:	4b84      	ldr	r3, [pc, #528]	; (8002f48 <Tower_of_Hanoi+0x564>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d105      	bne.n	8002d4a <Tower_of_Hanoi+0x366>
			mission_array[0] = 1;
 8002d3e:	4b83      	ldr	r3, [pc, #524]	; (8002f4c <Tower_of_Hanoi+0x568>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8002d44:	4b82      	ldr	r3, [pc, #520]	; (8002f50 <Tower_of_Hanoi+0x56c>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
		}
		put_the_cherry(0);
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7ff f976 	bl	800203c <put_the_cherry>
		if (pauseHanoi == 1) {
 8002d50:	4b7d      	ldr	r3, [pc, #500]	; (8002f48 <Tower_of_Hanoi+0x564>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d105      	bne.n	8002d64 <Tower_of_Hanoi+0x380>
			mission_array[0] = 1;
 8002d58:	4b7c      	ldr	r3, [pc, #496]	; (8002f4c <Tower_of_Hanoi+0x568>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8002d5e:	4b7c      	ldr	r3, [pc, #496]	; (8002f50 <Tower_of_Hanoi+0x56c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
		}
		put_the_cherry(3);
 8002d64:	2003      	movs	r0, #3
 8002d66:	f7ff f969 	bl	800203c <put_the_cherry>
		if (pauseHanoi == 1) {
 8002d6a:	4b77      	ldr	r3, [pc, #476]	; (8002f48 <Tower_of_Hanoi+0x564>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d105      	bne.n	8002d7e <Tower_of_Hanoi+0x39a>
			mission_array[0] = 1;
 8002d72:	4b76      	ldr	r3, [pc, #472]	; (8002f4c <Tower_of_Hanoi+0x568>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8002d78:	4b75      	ldr	r3, [pc, #468]	; (8002f50 <Tower_of_Hanoi+0x56c>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
		}
		put_the_cherry(2);
 8002d7e:	2002      	movs	r0, #2
 8002d80:	f7ff f95c 	bl	800203c <put_the_cherry>
		if (pauseHanoi == 1) {
 8002d84:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <Tower_of_Hanoi+0x564>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d105      	bne.n	8002d98 <Tower_of_Hanoi+0x3b4>
			mission_array[0] = 1;
 8002d8c:	4b6f      	ldr	r3, [pc, #444]	; (8002f4c <Tower_of_Hanoi+0x568>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8002d92:	4b6f      	ldr	r3, [pc, #444]	; (8002f50 <Tower_of_Hanoi+0x56c>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
		}
		rotate_the_ring(0);
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f7ff f801 	bl	8001da0 <rotate_the_ring>
		mission_array[0] = 2;
 8002d9e:	4b6b      	ldr	r3, [pc, #428]	; (8002f4c <Tower_of_Hanoi+0x568>)
 8002da0:	2202      	movs	r2, #2
 8002da2:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 8002da4:	4b6a      	ldr	r3, [pc, #424]	; (8002f50 <Tower_of_Hanoi+0x56c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	e362      	b.n	8003472 <Tower_of_Hanoi+0xa8e>
	}

	else if (cake_order == 3) {
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	f040 80d0 	bne.w	8002f54 <Tower_of_Hanoi+0x570>
		rotate_the_ring(2);
 8002db4:	2002      	movs	r0, #2
 8002db6:	f7fe fff3 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(4, 3);
 8002dba:	2103      	movs	r1, #3
 8002dbc:	2004      	movs	r0, #4
 8002dbe:	f7fe fef3 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002dc2:	f7fe fe09 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002dc6:	f7ff fd55 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(3);
 8002dca:	2003      	movs	r0, #3
 8002dcc:	f7fe ffe8 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(7, 2);
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	2007      	movs	r0, #7
 8002dd4:	f7fe fee8 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002dd8:	f7fe fdfe 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002ddc:	f7ff fd4a 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(1);
 8002de0:	2001      	movs	r0, #1
 8002de2:	f7fe ffdd 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8002de6:	2101      	movs	r1, #1
 8002de8:	2003      	movs	r0, #3
 8002dea:	f7fe fedd 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002dee:	f7fe fdf3 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002df2:	f7ff fd3f 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(0);
 8002df6:	2000      	movs	r0, #0
 8002df8:	f7fe ffd2 	bl	8001da0 <rotate_the_ring>
		suck_the_cake(7, 2);
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	2007      	movs	r0, #7
 8002e00:	f7fe fd0e 	bl	8001820 <suck_the_cake>
		suck_the_cake(4, 2);
 8002e04:	2102      	movs	r1, #2
 8002e06:	2004      	movs	r0, #4
 8002e08:	f7fe fd0a 	bl	8001820 <suck_the_cake>
		suck_the_cake(3, 2);
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	2003      	movs	r0, #3
 8002e10:	f7fe fd06 	bl	8001820 <suck_the_cake>
		press_sensor_feedback();
 8002e14:	f7fe fde0 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002e18:	f7ff fd2c 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(1);
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	f7fe ffbf 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(7, 2);
 8002e22:	2102      	movs	r1, #2
 8002e24:	2007      	movs	r0, #7
 8002e26:	f7fe febf 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002e2a:	f7fe fdd5 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002e2e:	f7ff fd21 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(3);
 8002e32:	2003      	movs	r0, #3
 8002e34:	f7fe ffb4 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8002e38:	2101      	movs	r1, #1
 8002e3a:	2003      	movs	r0, #3
 8002e3c:	f7fe feb4 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002e40:	f7fe fdca 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002e44:	f7ff fd16 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(0);
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f7fe ffa9 	bl	8001da0 <rotate_the_ring>
		suck_the_cake(7, 3);
 8002e4e:	2103      	movs	r1, #3
 8002e50:	2007      	movs	r0, #7
 8002e52:	f7fe fce5 	bl	8001820 <suck_the_cake>
		suck_the_cake(3, 3);
 8002e56:	2103      	movs	r1, #3
 8002e58:	2003      	movs	r0, #3
 8002e5a:	f7fe fce1 	bl	8001820 <suck_the_cake>
		press_sensor_feedback();
 8002e5e:	f7fe fdbb 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002e62:	f7ff fd07 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(1);
 8002e66:	2001      	movs	r0, #1
 8002e68:	f7fe ff9a 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(4, 3);
 8002e6c:	2103      	movs	r1, #3
 8002e6e:	2004      	movs	r0, #4
 8002e70:	f7fe fe9a 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002e74:	f7fe fdb0 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002e78:	f7ff fcfc 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(2);
 8002e7c:	2002      	movs	r0, #2
 8002e7e:	f7fe ff8f 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(7, 2);
 8002e82:	2102      	movs	r1, #2
 8002e84:	2007      	movs	r0, #7
 8002e86:	f7fe fe8f 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002e8a:	f7fe fda5 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002e8e:	f7ff fcf1 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(0);
 8002e92:	2000      	movs	r0, #0
 8002e94:	f7fe ff84 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8002e98:	2101      	movs	r1, #1
 8002e9a:	2003      	movs	r0, #3
 8002e9c:	f7fe fe84 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002ea0:	f7fe fd9a 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002ea4:	f7ff fce6 	bl	8002874 <pauseHanoiing>
		homefree = 1;
 8002ea8:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <Tower_of_Hanoi+0x560>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
		cake_check(0, 0);
 8002eae:	2100      	movs	r1, #0
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f7fe fdcf 	bl	8001a54 <cake_check>
		cake_check(1, 0);
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	2001      	movs	r0, #1
 8002eba:	f7fe fdcb 	bl	8001a54 <cake_check>
		cake_check(2, 0);
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	2002      	movs	r0, #2
 8002ec2:	f7fe fdc7 	bl	8001a54 <cake_check>
		cake_check(3, 0);
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	2003      	movs	r0, #3
 8002eca:	f7fe fdc3 	bl	8001a54 <cake_check>
		if (pauseHanoi == 1) {
 8002ece:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <Tower_of_Hanoi+0x564>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d105      	bne.n	8002ee2 <Tower_of_Hanoi+0x4fe>
			mission_array[0] = 1;
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <Tower_of_Hanoi+0x568>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8002edc:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <Tower_of_Hanoi+0x56c>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
		}
		put_the_cherry(0);
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f7ff f8aa 	bl	800203c <put_the_cherry>
		if (pauseHanoi == 1) {
 8002ee8:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <Tower_of_Hanoi+0x564>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d105      	bne.n	8002efc <Tower_of_Hanoi+0x518>
			mission_array[0] = 1;
 8002ef0:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <Tower_of_Hanoi+0x568>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8002ef6:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <Tower_of_Hanoi+0x56c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
		}
		put_the_cherry(3);
 8002efc:	2003      	movs	r0, #3
 8002efe:	f7ff f89d 	bl	800203c <put_the_cherry>
		if (pauseHanoi == 1) {
 8002f02:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <Tower_of_Hanoi+0x564>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d105      	bne.n	8002f16 <Tower_of_Hanoi+0x532>
			mission_array[0] = 1;
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <Tower_of_Hanoi+0x568>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8002f10:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <Tower_of_Hanoi+0x56c>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
		}
		put_the_cherry(2);
 8002f16:	2002      	movs	r0, #2
 8002f18:	f7ff f890 	bl	800203c <put_the_cherry>
		if (pauseHanoi == 1) {
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <Tower_of_Hanoi+0x564>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d105      	bne.n	8002f30 <Tower_of_Hanoi+0x54c>
			mission_array[0] = 1;
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <Tower_of_Hanoi+0x568>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <Tower_of_Hanoi+0x56c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
		}
		rotate_the_ring(0);
 8002f30:	2000      	movs	r0, #0
 8002f32:	f7fe ff35 	bl	8001da0 <rotate_the_ring>
		mission_array[0] = 2;
 8002f36:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <Tower_of_Hanoi+0x568>)
 8002f38:	2202      	movs	r2, #2
 8002f3a:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <Tower_of_Hanoi+0x56c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e296      	b.n	8003472 <Tower_of_Hanoi+0xa8e>
 8002f44:	20001530 	.word	0x20001530
 8002f48:	2000152c 	.word	0x2000152c
 8002f4c:	20001558 	.word	0x20001558
 8002f50:	20001550 	.word	0x20001550
	}

	else if (cake_order == 4) {
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	f040 80f0 	bne.w	800313c <Tower_of_Hanoi+0x758>
		rotate = 2;
 8002f5c:	4b72      	ldr	r3, [pc, #456]	; (8003128 <Tower_of_Hanoi+0x744>)
 8002f5e:	2202      	movs	r2, #2
 8002f60:	601a      	str	r2, [r3, #0]
		rotate_the_ring(2);
 8002f62:	2002      	movs	r0, #2
 8002f64:	f7fe ff1c 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(4, 3);
 8002f68:	2103      	movs	r1, #3
 8002f6a:	2004      	movs	r0, #4
 8002f6c:	f7fe fe1c 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002f70:	f7fe fd32 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002f74:	f7ff fc7e 	bl	8002874 <pauseHanoiing>
		rotate = 1;
 8002f78:	4b6b      	ldr	r3, [pc, #428]	; (8003128 <Tower_of_Hanoi+0x744>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
		rotate_the_ring(1);
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f7fe ff0e 	bl	8001da0 <rotate_the_ring>

		unsuck_the_cake(3, 2);
 8002f84:	2102      	movs	r1, #2
 8002f86:	2003      	movs	r0, #3
 8002f88:	f7fe fe0e 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002f8c:	f7fe fd24 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002f90:	f7ff fc70 	bl	8002874 <pauseHanoiing>
		rotate = 3;
 8002f94:	4b64      	ldr	r3, [pc, #400]	; (8003128 <Tower_of_Hanoi+0x744>)
 8002f96:	2203      	movs	r2, #3
 8002f98:	601a      	str	r2, [r3, #0]
		rotate_the_ring(3);
 8002f9a:	2003      	movs	r0, #3
 8002f9c:	f7fe ff00 	bl	8001da0 <rotate_the_ring>

		unsuck_the_cake(7, 1);
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	2007      	movs	r0, #7
 8002fa4:	f7fe fe00 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002fa8:	f7fe fd16 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002fac:	f7ff fc62 	bl	8002874 <pauseHanoiing>
		rotate = 0;
 8002fb0:	4b5d      	ldr	r3, [pc, #372]	; (8003128 <Tower_of_Hanoi+0x744>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
		rotate_the_ring(0);
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f7fe fef2 	bl	8001da0 <rotate_the_ring>

		suck_the_cake(7, 2);
 8002fbc:	2102      	movs	r1, #2
 8002fbe:	2007      	movs	r0, #7
 8002fc0:	f7fe fc2e 	bl	8001820 <suck_the_cake>
		suck_the_cake(4, 2);
 8002fc4:	2102      	movs	r1, #2
 8002fc6:	2004      	movs	r0, #4
 8002fc8:	f7fe fc2a 	bl	8001820 <suck_the_cake>
		suck_the_cake(3, 2);
 8002fcc:	2102      	movs	r1, #2
 8002fce:	2003      	movs	r0, #3
 8002fd0:	f7fe fc26 	bl	8001820 <suck_the_cake>
		press_sensor_feedback();
 8002fd4:	f7fe fd00 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002fd8:	f7ff fc4c 	bl	8002874 <pauseHanoiing>
		rotate = 3;
 8002fdc:	4b52      	ldr	r3, [pc, #328]	; (8003128 <Tower_of_Hanoi+0x744>)
 8002fde:	2203      	movs	r2, #3
 8002fe0:	601a      	str	r2, [r3, #0]
		rotate_the_ring(3);
 8002fe2:	2003      	movs	r0, #3
 8002fe4:	f7fe fedc 	bl	8001da0 <rotate_the_ring>

		unsuck_the_cake(3, 2);
 8002fe8:	2102      	movs	r1, #2
 8002fea:	2003      	movs	r0, #3
 8002fec:	f7fe fddc 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8002ff0:	f7fe fcf2 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8002ff4:	f7ff fc3e 	bl	8002874 <pauseHanoiing>
		rotate = 1;
 8002ff8:	4b4b      	ldr	r3, [pc, #300]	; (8003128 <Tower_of_Hanoi+0x744>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
		rotate_the_ring(1);
 8002ffe:	2001      	movs	r0, #1
 8003000:	f7fe fece 	bl	8001da0 <rotate_the_ring>

		unsuck_the_cake(7, 1);
 8003004:	2101      	movs	r1, #1
 8003006:	2007      	movs	r0, #7
 8003008:	f7fe fdce 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 800300c:	f7fe fce4 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8003010:	f7ff fc30 	bl	8002874 <pauseHanoiing>
		rotate = 0;
 8003014:	4b44      	ldr	r3, [pc, #272]	; (8003128 <Tower_of_Hanoi+0x744>)
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
		rotate_the_ring(0);
 800301a:	2000      	movs	r0, #0
 800301c:	f7fe fec0 	bl	8001da0 <rotate_the_ring>

		suck_the_cake(7, 3);
 8003020:	2103      	movs	r1, #3
 8003022:	2007      	movs	r0, #7
 8003024:	f7fe fbfc 	bl	8001820 <suck_the_cake>
		suck_the_cake(3, 3);
 8003028:	2103      	movs	r1, #3
 800302a:	2003      	movs	r0, #3
 800302c:	f7fe fbf8 	bl	8001820 <suck_the_cake>
		press_sensor_feedback();
 8003030:	f7fe fcd2 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8003034:	f7ff fc1e 	bl	8002874 <pauseHanoiing>
		rotate = 3;
 8003038:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <Tower_of_Hanoi+0x744>)
 800303a:	2203      	movs	r2, #3
 800303c:	601a      	str	r2, [r3, #0]
		rotate_the_ring(3);
 800303e:	2003      	movs	r0, #3
 8003040:	f7fe feae 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(4, 3);
 8003044:	2103      	movs	r1, #3
 8003046:	2004      	movs	r0, #4
 8003048:	f7fe fdae 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 800304c:	f7fe fcc4 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8003050:	f7ff fc10 	bl	8002874 <pauseHanoiing>
		rotate = 2;
 8003054:	4b34      	ldr	r3, [pc, #208]	; (8003128 <Tower_of_Hanoi+0x744>)
 8003056:	2202      	movs	r2, #2
 8003058:	601a      	str	r2, [r3, #0]
		rotate_the_ring(2);
 800305a:	2002      	movs	r0, #2
 800305c:	f7fe fea0 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(3, 2);
 8003060:	2102      	movs	r1, #2
 8003062:	2003      	movs	r0, #3
 8003064:	f7fe fda0 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8003068:	f7fe fcb6 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 800306c:	f7ff fc02 	bl	8002874 <pauseHanoiing>
		rotate = 0;
 8003070:	4b2d      	ldr	r3, [pc, #180]	; (8003128 <Tower_of_Hanoi+0x744>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
		rotate_the_ring(0);
 8003076:	2000      	movs	r0, #0
 8003078:	f7fe fe92 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(7, 1);
 800307c:	2101      	movs	r1, #1
 800307e:	2007      	movs	r0, #7
 8003080:	f7fe fd92 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8003084:	f7fe fca8 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8003088:	f7ff fbf4 	bl	8002874 <pauseHanoiing>
		homefree = 1;
 800308c:	4b27      	ldr	r3, [pc, #156]	; (800312c <Tower_of_Hanoi+0x748>)
 800308e:	2201      	movs	r2, #1
 8003090:	601a      	str	r2, [r3, #0]
		cake_check(0, 0);
 8003092:	2100      	movs	r1, #0
 8003094:	2000      	movs	r0, #0
 8003096:	f7fe fcdd 	bl	8001a54 <cake_check>
		cake_check(1, 0);
 800309a:	2100      	movs	r1, #0
 800309c:	2001      	movs	r0, #1
 800309e:	f7fe fcd9 	bl	8001a54 <cake_check>
		cake_check(2, 0);
 80030a2:	2100      	movs	r1, #0
 80030a4:	2002      	movs	r0, #2
 80030a6:	f7fe fcd5 	bl	8001a54 <cake_check>
		cake_check(3, 0);
 80030aa:	2100      	movs	r1, #0
 80030ac:	2003      	movs	r0, #3
 80030ae:	f7fe fcd1 	bl	8001a54 <cake_check>
		if (pauseHanoi == 1) {
 80030b2:	4b1f      	ldr	r3, [pc, #124]	; (8003130 <Tower_of_Hanoi+0x74c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d105      	bne.n	80030c6 <Tower_of_Hanoi+0x6e2>
			mission_array[0] = 1;
 80030ba:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <Tower_of_Hanoi+0x750>)
 80030bc:	2201      	movs	r2, #1
 80030be:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 80030c0:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <Tower_of_Hanoi+0x754>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
		}
		put_the_cherry(0);
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7fe ffb8 	bl	800203c <put_the_cherry>
		if (pauseHanoi == 1) {
 80030cc:	4b18      	ldr	r3, [pc, #96]	; (8003130 <Tower_of_Hanoi+0x74c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d105      	bne.n	80030e0 <Tower_of_Hanoi+0x6fc>
			mission_array[0] = 1;
 80030d4:	4b17      	ldr	r3, [pc, #92]	; (8003134 <Tower_of_Hanoi+0x750>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 80030da:	4b17      	ldr	r3, [pc, #92]	; (8003138 <Tower_of_Hanoi+0x754>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
		}
		put_the_cherry(1);
 80030e0:	2001      	movs	r0, #1
 80030e2:	f7fe ffab 	bl	800203c <put_the_cherry>
		if (pauseHanoi == 1) {
 80030e6:	4b12      	ldr	r3, [pc, #72]	; (8003130 <Tower_of_Hanoi+0x74c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d105      	bne.n	80030fa <Tower_of_Hanoi+0x716>
			mission_array[0] = 1;
 80030ee:	4b11      	ldr	r3, [pc, #68]	; (8003134 <Tower_of_Hanoi+0x750>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 80030f4:	4b10      	ldr	r3, [pc, #64]	; (8003138 <Tower_of_Hanoi+0x754>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
		}
		put_the_cherry(2);
 80030fa:	2002      	movs	r0, #2
 80030fc:	f7fe ff9e 	bl	800203c <put_the_cherry>
		if (pauseHanoi == 1) {
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <Tower_of_Hanoi+0x74c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d105      	bne.n	8003114 <Tower_of_Hanoi+0x730>
			mission_array[0] = 1;
 8003108:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <Tower_of_Hanoi+0x750>)
 800310a:	2201      	movs	r2, #1
 800310c:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <Tower_of_Hanoi+0x754>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
		}

		rotate_the_ring(0);
 8003114:	2000      	movs	r0, #0
 8003116:	f7fe fe43 	bl	8001da0 <rotate_the_ring>
		mission_array[0] = 2;
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <Tower_of_Hanoi+0x750>)
 800311c:	2202      	movs	r2, #2
 800311e:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <Tower_of_Hanoi+0x754>)
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	e1a4      	b.n	8003472 <Tower_of_Hanoi+0xa8e>
 8003128:	2000156c 	.word	0x2000156c
 800312c:	20001530 	.word	0x20001530
 8003130:	2000152c 	.word	0x2000152c
 8003134:	20001558 	.word	0x20001558
 8003138:	20001550 	.word	0x20001550
	}

	else if (cake_order == 5) {
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b05      	cmp	r3, #5
 8003140:	f040 80c8 	bne.w	80032d4 <Tower_of_Hanoi+0x8f0>
		rotate_the_ring(3);
 8003144:	2003      	movs	r0, #3
 8003146:	f7fe fe2b 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(7, 3);
 800314a:	2103      	movs	r1, #3
 800314c:	2007      	movs	r0, #7
 800314e:	f7fe fd2b 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8003152:	f7fe fc41 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8003156:	f7ff fb8d 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(1);
 800315a:	2001      	movs	r0, #1
 800315c:	f7fe fe20 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(3, 2);
 8003160:	2102      	movs	r1, #2
 8003162:	2003      	movs	r0, #3
 8003164:	f7fe fd20 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8003168:	f7fe fc36 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 800316c:	f7ff fb82 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(2);
 8003170:	2002      	movs	r0, #2
 8003172:	f7fe fe15 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 8003176:	2101      	movs	r1, #1
 8003178:	2004      	movs	r0, #4
 800317a:	f7fe fd15 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 800317e:	f7fe fc2b 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8003182:	f7ff fb77 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(0);
 8003186:	2000      	movs	r0, #0
 8003188:	f7fe fe0a 	bl	8001da0 <rotate_the_ring>
		suck_the_cake(7, 2);
 800318c:	2102      	movs	r1, #2
 800318e:	2007      	movs	r0, #7
 8003190:	f7fe fb46 	bl	8001820 <suck_the_cake>
		suck_the_cake(4, 2);
 8003194:	2102      	movs	r1, #2
 8003196:	2004      	movs	r0, #4
 8003198:	f7fe fb42 	bl	8001820 <suck_the_cake>
		suck_the_cake(3, 2);
 800319c:	2102      	movs	r1, #2
 800319e:	2003      	movs	r0, #3
 80031a0:	f7fe fb3e 	bl	8001820 <suck_the_cake>
		press_sensor_feedback();
 80031a4:	f7fe fc18 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 80031a8:	f7ff fb64 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(2);
 80031ac:	2002      	movs	r0, #2
 80031ae:	f7fe fdf7 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(3, 2);
 80031b2:	2102      	movs	r1, #2
 80031b4:	2003      	movs	r0, #3
 80031b6:	f7fe fcf7 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 80031ba:	f7fe fc0d 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 80031be:	f7ff fb59 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(3);
 80031c2:	2003      	movs	r0, #3
 80031c4:	f7fe fdec 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 80031c8:	2101      	movs	r1, #1
 80031ca:	2004      	movs	r0, #4
 80031cc:	f7fe fcec 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 80031d0:	f7fe fc02 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 80031d4:	f7ff fb4e 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(0);
 80031d8:	2000      	movs	r0, #0
 80031da:	f7fe fde1 	bl	8001da0 <rotate_the_ring>
		suck_the_cake(4, 3);
 80031de:	2103      	movs	r1, #3
 80031e0:	2004      	movs	r0, #4
 80031e2:	f7fe fb1d 	bl	8001820 <suck_the_cake>
		suck_the_cake(3, 3);
 80031e6:	2103      	movs	r1, #3
 80031e8:	2003      	movs	r0, #3
 80031ea:	f7fe fb19 	bl	8001820 <suck_the_cake>
		press_sensor_feedback();
 80031ee:	f7fe fbf3 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 80031f2:	f7ff fb3f 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(1);
 80031f6:	2001      	movs	r0, #1
 80031f8:	f7fe fdd2 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(7, 3);
 80031fc:	2103      	movs	r1, #3
 80031fe:	2007      	movs	r0, #7
 8003200:	f7fe fcd2 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8003204:	f7fe fbe8 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8003208:	f7ff fb34 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(3);
 800320c:	2003      	movs	r0, #3
 800320e:	f7fe fdc7 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(3, 2);
 8003212:	2102      	movs	r1, #2
 8003214:	2003      	movs	r0, #3
 8003216:	f7fe fcc7 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 800321a:	f7fe fbdd 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 800321e:	f7ff fb29 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(0);
 8003222:	2000      	movs	r0, #0
 8003224:	f7fe fdbc 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 8003228:	2101      	movs	r1, #1
 800322a:	2004      	movs	r0, #4
 800322c:	f7fe fcbc 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8003230:	f7fe fbd2 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8003234:	f7ff fb1e 	bl	8002874 <pauseHanoiing>
		homefree = 1;
 8003238:	4b8f      	ldr	r3, [pc, #572]	; (8003478 <Tower_of_Hanoi+0xa94>)
 800323a:	2201      	movs	r2, #1
 800323c:	601a      	str	r2, [r3, #0]
		cake_check(0, 0);
 800323e:	2100      	movs	r1, #0
 8003240:	2000      	movs	r0, #0
 8003242:	f7fe fc07 	bl	8001a54 <cake_check>
		cake_check(1, 0);
 8003246:	2100      	movs	r1, #0
 8003248:	2001      	movs	r0, #1
 800324a:	f7fe fc03 	bl	8001a54 <cake_check>
		cake_check(2, 0);
 800324e:	2100      	movs	r1, #0
 8003250:	2002      	movs	r0, #2
 8003252:	f7fe fbff 	bl	8001a54 <cake_check>
		cake_check(3, 0);
 8003256:	2100      	movs	r1, #0
 8003258:	2003      	movs	r0, #3
 800325a:	f7fe fbfb 	bl	8001a54 <cake_check>
		if (pauseHanoi == 1) {
 800325e:	4b87      	ldr	r3, [pc, #540]	; (800347c <Tower_of_Hanoi+0xa98>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d105      	bne.n	8003272 <Tower_of_Hanoi+0x88e>
			mission_array[0] = 1;
 8003266:	4b86      	ldr	r3, [pc, #536]	; (8003480 <Tower_of_Hanoi+0xa9c>)
 8003268:	2201      	movs	r2, #1
 800326a:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 800326c:	4b85      	ldr	r3, [pc, #532]	; (8003484 <Tower_of_Hanoi+0xaa0>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
		}
		put_the_cherry(0);
 8003272:	2000      	movs	r0, #0
 8003274:	f7fe fee2 	bl	800203c <put_the_cherry>
		if (pauseHanoi == 1) {
 8003278:	4b80      	ldr	r3, [pc, #512]	; (800347c <Tower_of_Hanoi+0xa98>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d105      	bne.n	800328c <Tower_of_Hanoi+0x8a8>
			mission_array[0] = 1;
 8003280:	4b7f      	ldr	r3, [pc, #508]	; (8003480 <Tower_of_Hanoi+0xa9c>)
 8003282:	2201      	movs	r2, #1
 8003284:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8003286:	4b7f      	ldr	r3, [pc, #508]	; (8003484 <Tower_of_Hanoi+0xaa0>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
		}
		put_the_cherry(1);
 800328c:	2001      	movs	r0, #1
 800328e:	f7fe fed5 	bl	800203c <put_the_cherry>
		if (pauseHanoi == 1) {
 8003292:	4b7a      	ldr	r3, [pc, #488]	; (800347c <Tower_of_Hanoi+0xa98>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d105      	bne.n	80032a6 <Tower_of_Hanoi+0x8c2>
			mission_array[0] = 1;
 800329a:	4b79      	ldr	r3, [pc, #484]	; (8003480 <Tower_of_Hanoi+0xa9c>)
 800329c:	2201      	movs	r2, #1
 800329e:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 80032a0:	4b78      	ldr	r3, [pc, #480]	; (8003484 <Tower_of_Hanoi+0xaa0>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
		}
		put_the_cherry(2);
 80032a6:	2002      	movs	r0, #2
 80032a8:	f7fe fec8 	bl	800203c <put_the_cherry>
		if (pauseHanoi == 1) {
 80032ac:	4b73      	ldr	r3, [pc, #460]	; (800347c <Tower_of_Hanoi+0xa98>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d105      	bne.n	80032c0 <Tower_of_Hanoi+0x8dc>
			mission_array[0] = 1;
 80032b4:	4b72      	ldr	r3, [pc, #456]	; (8003480 <Tower_of_Hanoi+0xa9c>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 80032ba:	4b72      	ldr	r3, [pc, #456]	; (8003484 <Tower_of_Hanoi+0xaa0>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
		}

		rotate_the_ring(0);
 80032c0:	2000      	movs	r0, #0
 80032c2:	f7fe fd6d 	bl	8001da0 <rotate_the_ring>
		mission_array[0] = 2;
 80032c6:	4b6e      	ldr	r3, [pc, #440]	; (8003480 <Tower_of_Hanoi+0xa9c>)
 80032c8:	2202      	movs	r2, #2
 80032ca:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 80032cc:	4b6d      	ldr	r3, [pc, #436]	; (8003484 <Tower_of_Hanoi+0xaa0>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	e0ce      	b.n	8003472 <Tower_of_Hanoi+0xa8e>
	}

	else if (cake_order == 6) {
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b06      	cmp	r3, #6
 80032d8:	f040 80cb 	bne.w	8003472 <Tower_of_Hanoi+0xa8e>
		rotate_the_ring(1);
 80032dc:	2001      	movs	r0, #1
 80032de:	f7fe fd5f 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(3, 3);
 80032e2:	2103      	movs	r1, #3
 80032e4:	2003      	movs	r0, #3
 80032e6:	f7fe fc5f 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 80032ea:	f7fe fb75 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 80032ee:	f7ff fac1 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(3);
 80032f2:	2003      	movs	r0, #3
 80032f4:	f7fe fd54 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(7, 2);
 80032f8:	2102      	movs	r1, #2
 80032fa:	2007      	movs	r0, #7
 80032fc:	f7fe fc54 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8003300:	f7fe fb6a 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8003304:	f7ff fab6 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(2);
 8003308:	2002      	movs	r0, #2
 800330a:	f7fe fd49 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 800330e:	2101      	movs	r1, #1
 8003310:	2004      	movs	r0, #4
 8003312:	f7fe fc49 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8003316:	f7fe fb5f 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 800331a:	f7ff faab 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(0);
 800331e:	2000      	movs	r0, #0
 8003320:	f7fe fd3e 	bl	8001da0 <rotate_the_ring>
		suck_the_cake(7, 2);
 8003324:	2102      	movs	r1, #2
 8003326:	2007      	movs	r0, #7
 8003328:	f7fe fa7a 	bl	8001820 <suck_the_cake>
		suck_the_cake(4, 2);
 800332c:	2102      	movs	r1, #2
 800332e:	2004      	movs	r0, #4
 8003330:	f7fe fa76 	bl	8001820 <suck_the_cake>
		suck_the_cake(3, 2);
 8003334:	2102      	movs	r1, #2
 8003336:	2003      	movs	r0, #3
 8003338:	f7fe fa72 	bl	8001820 <suck_the_cake>
		press_sensor_feedback();
 800333c:	f7fe fb4c 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8003340:	f7ff fa98 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(2);
 8003344:	2002      	movs	r0, #2
 8003346:	f7fe fd2b 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(7, 2);
 800334a:	2102      	movs	r1, #2
 800334c:	2007      	movs	r0, #7
 800334e:	f7fe fc2b 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8003352:	f7fe fb41 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 8003356:	f7ff fa8d 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(1);
 800335a:	2001      	movs	r0, #1
 800335c:	f7fe fd20 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 8003360:	2101      	movs	r1, #1
 8003362:	2004      	movs	r0, #4
 8003364:	f7fe fc20 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 8003368:	f7fe fb36 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 800336c:	f7ff fa82 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(0);
 8003370:	2000      	movs	r0, #0
 8003372:	f7fe fd15 	bl	8001da0 <rotate_the_ring>
		suck_the_cake(4, 3);
 8003376:	2103      	movs	r1, #3
 8003378:	2004      	movs	r0, #4
 800337a:	f7fe fa51 	bl	8001820 <suck_the_cake>
		suck_the_cake(7, 3);
 800337e:	2103      	movs	r1, #3
 8003380:	2007      	movs	r0, #7
 8003382:	f7fe fa4d 	bl	8001820 <suck_the_cake>
		press_sensor_feedback();
 8003386:	f7fe fb27 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 800338a:	f7ff fa73 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(3);
 800338e:	2003      	movs	r0, #3
 8003390:	f7fe fd06 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(3, 3);
 8003394:	2103      	movs	r1, #3
 8003396:	2003      	movs	r0, #3
 8003398:	f7fe fc06 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 800339c:	f7fe fb1c 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 80033a0:	f7ff fa68 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(1);
 80033a4:	2001      	movs	r0, #1
 80033a6:	f7fe fcfb 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(7, 2);
 80033aa:	2102      	movs	r1, #2
 80033ac:	2007      	movs	r0, #7
 80033ae:	f7fe fbfb 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 80033b2:	f7fe fb11 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 80033b6:	f7ff fa5d 	bl	8002874 <pauseHanoiing>
		rotate_the_ring(0);
 80033ba:	2000      	movs	r0, #0
 80033bc:	f7fe fcf0 	bl	8001da0 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 80033c0:	2101      	movs	r1, #1
 80033c2:	2004      	movs	r0, #4
 80033c4:	f7fe fbf0 	bl	8001ba8 <unsuck_the_cake>
		press_sensor_feedback();
 80033c8:	f7fe fb06 	bl	80019d8 <press_sensor_feedback>
		pauseHanoiing();
 80033cc:	f7ff fa52 	bl	8002874 <pauseHanoiing>
		homefree = 1;
 80033d0:	4b29      	ldr	r3, [pc, #164]	; (8003478 <Tower_of_Hanoi+0xa94>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
		cake_check(0, 0);
 80033d6:	2100      	movs	r1, #0
 80033d8:	2000      	movs	r0, #0
 80033da:	f7fe fb3b 	bl	8001a54 <cake_check>
		cake_check(1, 0);
 80033de:	2100      	movs	r1, #0
 80033e0:	2001      	movs	r0, #1
 80033e2:	f7fe fb37 	bl	8001a54 <cake_check>
		cake_check(2, 0);
 80033e6:	2100      	movs	r1, #0
 80033e8:	2002      	movs	r0, #2
 80033ea:	f7fe fb33 	bl	8001a54 <cake_check>
		cake_check(3, 0);
 80033ee:	2100      	movs	r1, #0
 80033f0:	2003      	movs	r0, #3
 80033f2:	f7fe fb2f 	bl	8001a54 <cake_check>
		if (pauseHanoi == 1) {
 80033f6:	4b21      	ldr	r3, [pc, #132]	; (800347c <Tower_of_Hanoi+0xa98>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d105      	bne.n	800340a <Tower_of_Hanoi+0xa26>
			mission_array[0] = 1;
 80033fe:	4b20      	ldr	r3, [pc, #128]	; (8003480 <Tower_of_Hanoi+0xa9c>)
 8003400:	2201      	movs	r2, #1
 8003402:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8003404:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <Tower_of_Hanoi+0xaa0>)
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
		}
		put_the_cherry(0);
 800340a:	2000      	movs	r0, #0
 800340c:	f7fe fe16 	bl	800203c <put_the_cherry>
		if (pauseHanoi == 1) {
 8003410:	4b1a      	ldr	r3, [pc, #104]	; (800347c <Tower_of_Hanoi+0xa98>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d105      	bne.n	8003424 <Tower_of_Hanoi+0xa40>
			mission_array[0] = 1;
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <Tower_of_Hanoi+0xa9c>)
 800341a:	2201      	movs	r2, #1
 800341c:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 800341e:	4b19      	ldr	r3, [pc, #100]	; (8003484 <Tower_of_Hanoi+0xaa0>)
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
		}
		put_the_cherry(3);
 8003424:	2003      	movs	r0, #3
 8003426:	f7fe fe09 	bl	800203c <put_the_cherry>
		if (pauseHanoi == 1) {
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <Tower_of_Hanoi+0xa98>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d105      	bne.n	800343e <Tower_of_Hanoi+0xa5a>
			mission_array[0] = 1;
 8003432:	4b13      	ldr	r3, [pc, #76]	; (8003480 <Tower_of_Hanoi+0xa9c>)
 8003434:	2201      	movs	r2, #1
 8003436:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8003438:	4b12      	ldr	r3, [pc, #72]	; (8003484 <Tower_of_Hanoi+0xaa0>)
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
		}
		put_the_cherry(2);
 800343e:	2002      	movs	r0, #2
 8003440:	f7fe fdfc 	bl	800203c <put_the_cherry>
		if (pauseHanoi == 1) {
 8003444:	4b0d      	ldr	r3, [pc, #52]	; (800347c <Tower_of_Hanoi+0xa98>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d105      	bne.n	8003458 <Tower_of_Hanoi+0xa74>
			mission_array[0] = 1;
 800344c:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <Tower_of_Hanoi+0xa9c>)
 800344e:	2201      	movs	r2, #1
 8003450:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8003452:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <Tower_of_Hanoi+0xaa0>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
		}

		rotate_the_ring(0);
 8003458:	2000      	movs	r0, #0
 800345a:	f7fe fca1 	bl	8001da0 <rotate_the_ring>
		mission_array[0] = 2;
 800345e:	4b08      	ldr	r3, [pc, #32]	; (8003480 <Tower_of_Hanoi+0xa9c>)
 8003460:	2202      	movs	r2, #2
 8003462:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 8003464:	4b07      	ldr	r3, [pc, #28]	; (8003484 <Tower_of_Hanoi+0xaa0>)
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	e002      	b.n	8003472 <Tower_of_Hanoi+0xa8e>
		return;
 800346c:	bf00      	nop
 800346e:	e000      	b.n	8003472 <Tower_of_Hanoi+0xa8e>
		return;
 8003470:	bf00      	nop
	}
}
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	20001530 	.word	0x20001530
 800347c:	2000152c 	.word	0x2000152c
 8003480:	20001558 	.word	0x20001558
 8003484:	20001550 	.word	0x20001550

08003488 <finish_all_motion>:
void finish_all_motion() {
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
	UART_Send_SetMotorPosition(1, 0, 0);
 800348c:	2200      	movs	r2, #0
 800348e:	2100      	movs	r1, #0
 8003490:	2001      	movs	r0, #1
 8003492:	f7fd fc8b 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(4, 0, 0);
 8003496:	2200      	movs	r2, #0
 8003498:	2100      	movs	r1, #0
 800349a:	2004      	movs	r0, #4
 800349c:	f7fd fc86 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(3, 0, 0);
 80034a0:	2200      	movs	r2, #0
 80034a2:	2100      	movs	r1, #0
 80034a4:	2003      	movs	r0, #3
 80034a6:	f7fd fc81 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(5, 0, 0);
 80034aa:	2200      	movs	r2, #0
 80034ac:	2100      	movs	r1, #0
 80034ae:	2005      	movs	r0, #5
 80034b0:	f7fd fc7c 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(6, 0, 0);
 80034b4:	2200      	movs	r2, #0
 80034b6:	2100      	movs	r1, #0
 80034b8:	2006      	movs	r0, #6
 80034ba:	f7fd fc77 	bl	8000dac <UART_Send_SetMotorPosition>
	HAL_GPIO_WritePin(Step1_EN_Port, Step1_EN_Pin, GPIO_PIN_SET);
 80034be:	2201      	movs	r2, #1
 80034c0:	2108      	movs	r1, #8
 80034c2:	480e      	ldr	r0, [pc, #56]	; (80034fc <finish_all_motion+0x74>)
 80034c4:	f006 f9e4 	bl	8009890 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80034c8:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <finish_all_motion+0x78>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2200      	movs	r2, #0
 80034ce:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <finish_all_motion+0x78>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2200      	movs	r2, #0
 80034d6:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <finish_all_motion+0x7c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2200      	movs	r2, #0
 80034de:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80034e0:	4b08      	ldr	r3, [pc, #32]	; (8003504 <finish_all_motion+0x7c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2200      	movs	r2, #0
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <finish_all_motion+0x7c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2200      	movs	r2, #0
 80034ee:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 80034f0:	4b04      	ldr	r3, [pc, #16]	; (8003504 <finish_all_motion+0x7c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2200      	movs	r2, #0
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80034f8:	bf00      	nop
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40020400 	.word	0x40020400
 8003500:	200015fc 	.word	0x200015fc
 8003504:	20001644 	.word	0x20001644

08003508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	4b23      	ldr	r3, [pc, #140]	; (80035a0 <MX_DMA_Init+0x98>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	4a22      	ldr	r2, [pc, #136]	; (80035a0 <MX_DMA_Init+0x98>)
 8003518:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800351c:	6313      	str	r3, [r2, #48]	; 0x30
 800351e:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <MX_DMA_Init+0x98>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	603b      	str	r3, [r7, #0]
 800352e:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <MX_DMA_Init+0x98>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <MX_DMA_Init+0x98>)
 8003534:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003538:	6313      	str	r3, [r2, #48]	; 0x30
 800353a:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <MX_DMA_Init+0x98>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003546:	2200      	movs	r2, #0
 8003548:	2100      	movs	r1, #0
 800354a:	2010      	movs	r0, #16
 800354c:	f005 fa65 	bl	8008a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003550:	2010      	movs	r0, #16
 8003552:	f005 fa7e 	bl	8008a52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003556:	2200      	movs	r2, #0
 8003558:	2100      	movs	r1, #0
 800355a:	2011      	movs	r0, #17
 800355c:	f005 fa5d 	bl	8008a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003560:	2011      	movs	r0, #17
 8003562:	f005 fa76 	bl	8008a52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003566:	2200      	movs	r2, #0
 8003568:	2100      	movs	r1, #0
 800356a:	2038      	movs	r0, #56	; 0x38
 800356c:	f005 fa55 	bl	8008a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003570:	2038      	movs	r0, #56	; 0x38
 8003572:	f005 fa6e 	bl	8008a52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003576:	2200      	movs	r2, #0
 8003578:	2100      	movs	r1, #0
 800357a:	203a      	movs	r0, #58	; 0x3a
 800357c:	f005 fa4d 	bl	8008a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003580:	203a      	movs	r0, #58	; 0x3a
 8003582:	f005 fa66 	bl	8008a52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003586:	2200      	movs	r2, #0
 8003588:	2100      	movs	r1, #0
 800358a:	2046      	movs	r0, #70	; 0x46
 800358c:	f005 fa45 	bl	8008a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003590:	2046      	movs	r0, #70	; 0x46
 8003592:	f005 fa5e 	bl	8008a52 <HAL_NVIC_EnableIRQ>

}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800

080035a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08a      	sub	sp, #40	; 0x28
 80035a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035aa:	f107 0314 	add.w	r3, r7, #20
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	609a      	str	r2, [r3, #8]
 80035b6:	60da      	str	r2, [r3, #12]
 80035b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	4b64      	ldr	r3, [pc, #400]	; (8003750 <MX_GPIO_Init+0x1ac>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	4a63      	ldr	r2, [pc, #396]	; (8003750 <MX_GPIO_Init+0x1ac>)
 80035c4:	f043 0304 	orr.w	r3, r3, #4
 80035c8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ca:	4b61      	ldr	r3, [pc, #388]	; (8003750 <MX_GPIO_Init+0x1ac>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	4b5d      	ldr	r3, [pc, #372]	; (8003750 <MX_GPIO_Init+0x1ac>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	4a5c      	ldr	r2, [pc, #368]	; (8003750 <MX_GPIO_Init+0x1ac>)
 80035e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e4:	6313      	str	r3, [r2, #48]	; 0x30
 80035e6:	4b5a      	ldr	r3, [pc, #360]	; (8003750 <MX_GPIO_Init+0x1ac>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	4b56      	ldr	r3, [pc, #344]	; (8003750 <MX_GPIO_Init+0x1ac>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	4a55      	ldr	r2, [pc, #340]	; (8003750 <MX_GPIO_Init+0x1ac>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6313      	str	r3, [r2, #48]	; 0x30
 8003602:	4b53      	ldr	r3, [pc, #332]	; (8003750 <MX_GPIO_Init+0x1ac>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	4b4f      	ldr	r3, [pc, #316]	; (8003750 <MX_GPIO_Init+0x1ac>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	4a4e      	ldr	r2, [pc, #312]	; (8003750 <MX_GPIO_Init+0x1ac>)
 8003618:	f043 0302 	orr.w	r3, r3, #2
 800361c:	6313      	str	r3, [r2, #48]	; 0x30
 800361e:	4b4c      	ldr	r3, [pc, #304]	; (8003750 <MX_GPIO_Init+0x1ac>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	607b      	str	r3, [r7, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	603b      	str	r3, [r7, #0]
 800362e:	4b48      	ldr	r3, [pc, #288]	; (8003750 <MX_GPIO_Init+0x1ac>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a47      	ldr	r2, [pc, #284]	; (8003750 <MX_GPIO_Init+0x1ac>)
 8003634:	f043 0308 	orr.w	r3, r3, #8
 8003638:	6313      	str	r3, [r2, #48]	; 0x30
 800363a:	4b45      	ldr	r3, [pc, #276]	; (8003750 <MX_GPIO_Init+0x1ac>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8003646:	2200      	movs	r2, #0
 8003648:	f243 0128 	movw	r1, #12328	; 0x3028
 800364c:	4841      	ldr	r0, [pc, #260]	; (8003754 <MX_GPIO_Init+0x1b0>)
 800364e:	f006 f91f 	bl	8009890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8003652:	2200      	movs	r2, #0
 8003654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003658:	483f      	ldr	r0, [pc, #252]	; (8003758 <MX_GPIO_Init+0x1b4>)
 800365a:	f006 f919 	bl	8009890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800365e:	2200      	movs	r2, #0
 8003660:	2104      	movs	r1, #4
 8003662:	483e      	ldr	r0, [pc, #248]	; (800375c <MX_GPIO_Init+0x1b8>)
 8003664:	f006 f914 	bl	8009890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800366c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800366e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003678:	f107 0314 	add.w	r3, r7, #20
 800367c:	4619      	mov	r1, r3
 800367e:	4836      	ldr	r0, [pc, #216]	; (8003758 <MX_GPIO_Init+0x1b4>)
 8003680:	f005 fe7e 	bl	8009380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003684:	2303      	movs	r3, #3
 8003686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003688:	2300      	movs	r3, #0
 800368a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	2300      	movs	r3, #0
 800368e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003690:	f107 0314 	add.w	r3, r7, #20
 8003694:	4619      	mov	r1, r3
 8003696:	4830      	ldr	r0, [pc, #192]	; (8003758 <MX_GPIO_Init+0x1b4>)
 8003698:	f005 fe72 	bl	8009380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_11;
 800369c:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 80036a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80036a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ac:	f107 0314 	add.w	r3, r7, #20
 80036b0:	4619      	mov	r1, r3
 80036b2:	4829      	ldr	r0, [pc, #164]	; (8003758 <MX_GPIO_Init+0x1b4>)
 80036b4:	f005 fe64 	bl	8009380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036b8:	2301      	movs	r3, #1
 80036ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036bc:	2300      	movs	r3, #0
 80036be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c4:	f107 0314 	add.w	r3, r7, #20
 80036c8:	4619      	mov	r1, r3
 80036ca:	4822      	ldr	r0, [pc, #136]	; (8003754 <MX_GPIO_Init+0x1b0>)
 80036cc:	f005 fe58 	bl	8009380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_5;
 80036d0:	f243 0328 	movw	r3, #12328	; 0x3028
 80036d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036d6:	2301      	movs	r3, #1
 80036d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036de:	2300      	movs	r3, #0
 80036e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e2:	f107 0314 	add.w	r3, r7, #20
 80036e6:	4619      	mov	r1, r3
 80036e8:	481a      	ldr	r0, [pc, #104]	; (8003754 <MX_GPIO_Init+0x1b0>)
 80036ea:	f005 fe49 	bl	8009380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80036ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036f4:	2301      	movs	r3, #1
 80036f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fc:	2300      	movs	r3, #0
 80036fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003700:	f107 0314 	add.w	r3, r7, #20
 8003704:	4619      	mov	r1, r3
 8003706:	4814      	ldr	r0, [pc, #80]	; (8003758 <MX_GPIO_Init+0x1b4>)
 8003708:	f005 fe3a 	bl	8009380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800370c:	2304      	movs	r3, #4
 800370e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003710:	2301      	movs	r3, #1
 8003712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003714:	2300      	movs	r3, #0
 8003716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003718:	2300      	movs	r3, #0
 800371a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800371c:	f107 0314 	add.w	r3, r7, #20
 8003720:	4619      	mov	r1, r3
 8003722:	480e      	ldr	r0, [pc, #56]	; (800375c <MX_GPIO_Init+0x1b8>)
 8003724:	f005 fe2c 	bl	8009380 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003728:	2200      	movs	r2, #0
 800372a:	2100      	movs	r1, #0
 800372c:	200a      	movs	r0, #10
 800372e:	f005 f974 	bl	8008a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003732:	200a      	movs	r0, #10
 8003734:	f005 f98d 	bl	8008a52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003738:	2200      	movs	r2, #0
 800373a:	2100      	movs	r1, #0
 800373c:	2028      	movs	r0, #40	; 0x28
 800373e:	f005 f96c 	bl	8008a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003742:	2028      	movs	r0, #40	; 0x28
 8003744:	f005 f985 	bl	8008a52 <HAL_NVIC_EnableIRQ>

}
 8003748:	bf00      	nop
 800374a:	3728      	adds	r7, #40	; 0x28
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40023800 	.word	0x40023800
 8003754:	40020400 	.word	0x40020400
 8003758:	40020800 	.word	0x40020800
 800375c:	40020c00 	.word	0x40020c00

08003760 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003764:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <MX_I2C1_Init+0x50>)
 8003766:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <MX_I2C1_Init+0x54>)
 8003768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <MX_I2C1_Init+0x50>)
 800376c:	4a12      	ldr	r2, [pc, #72]	; (80037b8 <MX_I2C1_Init+0x58>)
 800376e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <MX_I2C1_Init+0x50>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003776:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <MX_I2C1_Init+0x50>)
 8003778:	2200      	movs	r2, #0
 800377a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <MX_I2C1_Init+0x50>)
 800377e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003782:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <MX_I2C1_Init+0x50>)
 8003786:	2200      	movs	r2, #0
 8003788:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800378a:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <MX_I2C1_Init+0x50>)
 800378c:	2200      	movs	r2, #0
 800378e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003790:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <MX_I2C1_Init+0x50>)
 8003792:	2200      	movs	r2, #0
 8003794:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <MX_I2C1_Init+0x50>)
 8003798:	2200      	movs	r2, #0
 800379a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800379c:	4804      	ldr	r0, [pc, #16]	; (80037b0 <MX_I2C1_Init+0x50>)
 800379e:	f006 f8a9 	bl	80098f4 <HAL_I2C_Init>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80037a8:	f000 f8f8 	bl	800399c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80037ac:	bf00      	nop
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	200009d0 	.word	0x200009d0
 80037b4:	40005400 	.word	0x40005400
 80037b8:	000186a0 	.word	0x000186a0

080037bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c4:	f107 0314 	add.w	r3, r7, #20
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	60da      	str	r2, [r3, #12]
 80037d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a21      	ldr	r2, [pc, #132]	; (8003860 <HAL_I2C_MspInit+0xa4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d13c      	bne.n	8003858 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <HAL_I2C_MspInit+0xa8>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <HAL_I2C_MspInit+0xa8>)
 80037e8:	f043 0302 	orr.w	r3, r3, #2
 80037ec:	6313      	str	r3, [r2, #48]	; 0x30
 80037ee:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_I2C_MspInit+0xa8>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80037fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003800:	2312      	movs	r3, #18
 8003802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003804:	2300      	movs	r3, #0
 8003806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003808:	2303      	movs	r3, #3
 800380a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800380c:	2304      	movs	r3, #4
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003810:	f107 0314 	add.w	r3, r7, #20
 8003814:	4619      	mov	r1, r3
 8003816:	4814      	ldr	r0, [pc, #80]	; (8003868 <HAL_I2C_MspInit+0xac>)
 8003818:	f005 fdb2 	bl	8009380 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	4b10      	ldr	r3, [pc, #64]	; (8003864 <HAL_I2C_MspInit+0xa8>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	4a0f      	ldr	r2, [pc, #60]	; (8003864 <HAL_I2C_MspInit+0xa8>)
 8003826:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800382a:	6413      	str	r3, [r2, #64]	; 0x40
 800382c:	4b0d      	ldr	r3, [pc, #52]	; (8003864 <HAL_I2C_MspInit+0xa8>)
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003838:	2200      	movs	r2, #0
 800383a:	2100      	movs	r1, #0
 800383c:	201f      	movs	r0, #31
 800383e:	f005 f8ec 	bl	8008a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003842:	201f      	movs	r0, #31
 8003844:	f005 f905 	bl	8008a52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003848:	2200      	movs	r2, #0
 800384a:	2100      	movs	r1, #0
 800384c:	2020      	movs	r0, #32
 800384e:	f005 f8e4 	bl	8008a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003852:	2020      	movs	r0, #32
 8003854:	f005 f8fd 	bl	8008a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003858:	bf00      	nop
 800385a:	3728      	adds	r7, #40	; 0x28
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40005400 	.word	0x40005400
 8003864:	40023800 	.word	0x40023800
 8003868:	40020400 	.word	0x40020400

0800386c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003870:	f004 fccc 	bl	800820c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003874:	f000 f826 	bl	80038c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003878:	f7ff fe94 	bl	80035a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800387c:	f7ff fe44 	bl	8003508 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003880:	f004 fa54 	bl	8007d2c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8003884:	f003 feae 	bl	80075e4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8003888:	f7fd fd22 	bl	80012d0 <MX_ADC1_Init>
  MX_TIM6_Init();
 800388c:	f003 ff24 	bl	80076d8 <MX_TIM6_Init>
  MX_TIM2_Init();
 8003890:	f003 fe44 	bl	800751c <MX_TIM2_Init>
  MX_TIM7_Init();
 8003894:	f003 ff56 	bl	8007744 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8003898:	f004 f9f4 	bl	8007c84 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800389c:	f004 fa1c 	bl	8007cd8 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 80038a0:	f003 ffd6 	bl	8007850 <MX_TIM10_Init>
  MX_TIM11_Init();
 80038a4:	f003 fff8 	bl	8007898 <MX_TIM11_Init>
  MX_I2C1_Init();
 80038a8:	f7ff ff5a 	bl	8003760 <MX_I2C1_Init>
  MX_TIM13_Init();
 80038ac:	f004 f816 	bl	80078dc <MX_TIM13_Init>
  MX_TIM8_Init();
 80038b0:	f003 ff7e 	bl	80077b0 <MX_TIM8_Init>
  MX_TIM1_Init();
 80038b4:	f003 fdb0 	bl	8007418 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	// DMA_init is in front of ADC
	setup();
 80038b8:	f001 fe72 	bl	80055a0 <setup>
	mainrun();
 80038bc:	f002 fd02 	bl	80062c4 <mainrun>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80038c0:	e7fe      	b.n	80038c0 <main+0x54>
	...

080038c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b094      	sub	sp, #80	; 0x50
 80038c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038ca:	f107 031c 	add.w	r3, r7, #28
 80038ce:	2234      	movs	r2, #52	; 0x34
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f010 fbe2 	bl	801409c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038d8:	f107 0308 	add.w	r3, r7, #8
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	60da      	str	r2, [r3, #12]
 80038e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038e8:	2300      	movs	r3, #0
 80038ea:	607b      	str	r3, [r7, #4]
 80038ec:	4b29      	ldr	r3, [pc, #164]	; (8003994 <SystemClock_Config+0xd0>)
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	4a28      	ldr	r2, [pc, #160]	; (8003994 <SystemClock_Config+0xd0>)
 80038f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f6:	6413      	str	r3, [r2, #64]	; 0x40
 80038f8:	4b26      	ldr	r3, [pc, #152]	; (8003994 <SystemClock_Config+0xd0>)
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003900:	607b      	str	r3, [r7, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003904:	2300      	movs	r3, #0
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	4b23      	ldr	r3, [pc, #140]	; (8003998 <SystemClock_Config+0xd4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a22      	ldr	r2, [pc, #136]	; (8003998 <SystemClock_Config+0xd4>)
 800390e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	4b20      	ldr	r3, [pc, #128]	; (8003998 <SystemClock_Config+0xd4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003920:	2301      	movs	r3, #1
 8003922:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003924:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003928:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800392a:	2302      	movs	r3, #2
 800392c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800392e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003932:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003934:	2304      	movs	r3, #4
 8003936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003938:	23a8      	movs	r3, #168	; 0xa8
 800393a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800393c:	2302      	movs	r3, #2
 800393e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003940:	2302      	movs	r3, #2
 8003942:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003944:	2302      	movs	r3, #2
 8003946:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003948:	f107 031c 	add.w	r3, r7, #28
 800394c:	4618      	mov	r0, r3
 800394e:	f008 ff8b 	bl	800c868 <HAL_RCC_OscConfig>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003958:	f000 f820 	bl	800399c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800395c:	230f      	movs	r3, #15
 800395e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8003960:	2303      	movs	r3, #3
 8003962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003964:	2300      	movs	r3, #0
 8003966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003968:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800396c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800396e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003972:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003974:	f107 0308 	add.w	r3, r7, #8
 8003978:	2105      	movs	r1, #5
 800397a:	4618      	mov	r0, r3
 800397c:	f008 fc2a 	bl	800c1d4 <HAL_RCC_ClockConfig>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003986:	f000 f809 	bl	800399c <Error_Handler>
  }
}
 800398a:	bf00      	nop
 800398c:	3750      	adds	r7, #80	; 0x50
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	40007000 	.word	0x40007000

0800399c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039a0:	b672      	cpsid	i
}
 80039a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80039a4:	e7fe      	b.n	80039a4 <Error_Handler+0x8>

080039a6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <_ZN3ros3MsgC1Ev+0x1c>)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	080147bc 	.word	0x080147bc

080039e8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
      data()
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff ffe8 	bl	80039c8 <_ZN3ros3MsgC1Ev>
 80039f8:	4a06      	ldr	r2, [pc, #24]	; (8003a14 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3304      	adds	r3, #4
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff ffcf 	bl	80039a6 <_ZN3ros4TimeC1Ev>
    {
    }
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	080147a4 	.word	0x080147a4

08003a18 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6859      	ldr	r1, [r3, #4]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	4413      	add	r3, r2
 8003a30:	b2ca      	uxtb	r2, r1
 8003a32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	0a19      	lsrs	r1, r3, #8
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	4413      	add	r3, r2
 8003a42:	b2ca      	uxtb	r2, r1
 8003a44:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	0c19      	lsrs	r1, r3, #16
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3302      	adds	r3, #2
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	4413      	add	r3, r2
 8003a54:	b2ca      	uxtb	r2, r1
 8003a56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	0e19      	lsrs	r1, r3, #24
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3303      	adds	r3, #3
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	4413      	add	r3, r2
 8003a66:	b2ca      	uxtb	r2, r1
 8003a68:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6899      	ldr	r1, [r3, #8]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	4413      	add	r3, r2
 8003a7a:	b2ca      	uxtb	r2, r1
 8003a7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	0a19      	lsrs	r1, r3, #8
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3301      	adds	r3, #1
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	b2ca      	uxtb	r2, r1
 8003a8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	0c19      	lsrs	r1, r3, #16
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	3302      	adds	r3, #2
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	b2ca      	uxtb	r2, r1
 8003aa0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	0e19      	lsrs	r1, r3, #24
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3303      	adds	r3, #3
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	4413      	add	r3, r2
 8003ab0:	b2ca      	uxtb	r2, r1
 8003ab2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	60fb      	str	r3, [r7, #12]
      return offset;
 8003aba:	68fb      	ldr	r3, [r7, #12]
    }
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	4413      	add	r3, r2
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	3301      	adds	r3, #1
 8003aec:	6839      	ldr	r1, [r7, #0]
 8003aee:	440b      	add	r3, r1
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	021b      	lsls	r3, r3, #8
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3302      	adds	r3, #2
 8003b02:	6839      	ldr	r1, [r7, #0]
 8003b04:	440b      	add	r3, r1
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	041b      	lsls	r3, r3, #16
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	3303      	adds	r3, #3
 8003b18:	6839      	ldr	r1, [r7, #0]
 8003b1a:	440b      	add	r3, r1
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	061b      	lsls	r3, r3, #24
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	4413      	add	r3, r2
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	461a      	mov	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3301      	adds	r3, #1
 8003b42:	6839      	ldr	r1, [r7, #0]
 8003b44:	440b      	add	r3, r1
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	021b      	lsls	r3, r3, #8
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3302      	adds	r3, #2
 8003b58:	6839      	ldr	r1, [r7, #0]
 8003b5a:	440b      	add	r3, r1
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	041b      	lsls	r3, r3, #16
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3303      	adds	r3, #3
 8003b6e:	6839      	ldr	r1, [r7, #0]
 8003b70:	440b      	add	r3, r1
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	061b      	lsls	r3, r3, #24
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	60fb      	str	r3, [r7, #12]
     return offset;
 8003b82:	68fb      	ldr	r3, [r7, #12]
    }
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	08014414 	.word	0x08014414

08003bac <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	4b03      	ldr	r3, [pc, #12]	; (8003bc4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	08014424 	.word	0x08014424

08003bc8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff fef8 	bl	80039c8 <_ZN3ros3MsgC1Ev>
 8003bd8:	4a0b      	ldr	r2, [pc, #44]	; (8003c08 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	809a      	strh	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a09      	ldr	r2, [pc, #36]	; (8003c0c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003be8:	609a      	str	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a07      	ldr	r2, [pc, #28]	; (8003c0c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003bee:	60da      	str	r2, [r3, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a06      	ldr	r2, [pc, #24]	; (8003c0c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003bf4:	611a      	str	r2, [r3, #16]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	615a      	str	r2, [r3, #20]
    {
    }
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	0801478c 	.word	0x0801478c
 8003c0c:	08014448 	.word	0x08014448

08003c10 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8899      	ldrh	r1, [r3, #4]
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	4413      	add	r3, r2
 8003c28:	b2ca      	uxtb	r2, r1
 8003c2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	889b      	ldrh	r3, [r3, #4]
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	b299      	uxth	r1, r3
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	3301      	adds	r3, #1
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	b2ca      	uxtb	r2, r1
 8003c3e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	3302      	adds	r3, #2
 8003c44:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fc fae6 	bl	800021c <strlen>
 8003c50:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	4413      	add	r3, r2
 8003c58:	69b9      	ldr	r1, [r7, #24]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f001 fcd8 	bl	8005610 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	3304      	adds	r3, #4
 8003c64:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	18d0      	adds	r0, r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4619      	mov	r1, r3
 8003c74:	f010 fa04 	bl	8014080 <memcpy>
      offset += length_topic_name;
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fc fac9 	bl	800021c <strlen>
 8003c8a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	4413      	add	r3, r2
 8003c92:	6979      	ldr	r1, [r7, #20]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f001 fcbb 	bl	8005610 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	18d0      	adds	r0, r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4619      	mov	r1, r3
 8003cae:	f010 f9e7 	bl	8014080 <memcpy>
      offset += length_message_type;
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fc faac 	bl	800021c <strlen>
 8003cc4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	4413      	add	r3, r2
 8003ccc:	6939      	ldr	r1, [r7, #16]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f001 fc9e 	bl	8005610 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	18d0      	adds	r0, r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	f010 f9ca 	bl	8014080 <memcpy>
      offset += length_md5sum;
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8003cfa:	68f9      	ldr	r1, [r7, #12]
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	4413      	add	r3, r2
 8003d02:	b2ca      	uxtb	r2, r1
 8003d04:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	0a19      	lsrs	r1, r3, #8
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	4413      	add	r3, r2
 8003d12:	b2ca      	uxtb	r2, r1
 8003d14:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	0c19      	lsrs	r1, r3, #16
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	4413      	add	r3, r2
 8003d22:	b2ca      	uxtb	r2, r1
 8003d24:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	0e19      	lsrs	r1, r3, #24
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	3303      	adds	r3, #3
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	4413      	add	r3, r2
 8003d32:	b2ca      	uxtb	r2, r1
 8003d34:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	61fb      	str	r3, [r7, #28]
      return offset;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
    }
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3720      	adds	r7, #32
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b08a      	sub	sp, #40	; 0x28
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	4413      	add	r3, r2
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	889b      	ldrh	r3, [r3, #4]
 8003d66:	b21a      	sxth	r2, r3
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	6839      	ldr	r1, [r7, #0]
 8003d6e:	440b      	add	r3, r1
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	b21b      	sxth	r3, r3
 8003d76:	4313      	orrs	r3, r2
 8003d78:	b21b      	sxth	r3, r3
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	3302      	adds	r3, #2
 8003d84:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	441a      	add	r2, r3
 8003d8c:	f107 0314 	add.w	r3, r7, #20
 8003d90:	4611      	mov	r1, r2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f001 fc5a 	bl	800564c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	4413      	add	r3, r2
 8003da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d20c      	bcs.n	8003dc8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	441a      	add	r2, r3
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	3b01      	subs	r3, #1
 8003db8:	6839      	ldr	r1, [r7, #0]
 8003dba:	440b      	add	r3, r1
 8003dbc:	7812      	ldrb	r2, [r2, #0]
 8003dbe:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc6:	e7ec      	b.n	8003da2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	4413      	add	r3, r2
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	441a      	add	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	4413      	add	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	441a      	add	r2, r3
 8003df2:	f107 0310 	add.w	r3, r7, #16
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f001 fc27 	bl	800564c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	3304      	adds	r3, #4
 8003e02:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	623b      	str	r3, [r7, #32]
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	6a3a      	ldr	r2, [r7, #32]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d20c      	bcs.n	8003e2e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	441a      	add	r2, r3
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	6839      	ldr	r1, [r7, #0]
 8003e20:	440b      	add	r3, r1
 8003e22:	7812      	ldrb	r2, [r2, #0]
 8003e24:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	623b      	str	r3, [r7, #32]
 8003e2c:	e7ec      	b.n	8003e08 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4413      	add	r3, r2
 8003e34:	3b01      	subs	r3, #1
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	4413      	add	r3, r2
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	441a      	add	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4413      	add	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	441a      	add	r2, r3
 8003e58:	f107 030c 	add.w	r3, r7, #12
 8003e5c:	4611      	mov	r1, r2
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 fbf4 	bl	800564c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	3304      	adds	r3, #4
 8003e68:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	61fb      	str	r3, [r7, #28]
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d20c      	bcs.n	8003e94 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	441a      	add	r2, r3
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	6839      	ldr	r1, [r7, #0]
 8003e86:	440b      	add	r3, r1
 8003e88:	7812      	ldrb	r2, [r2, #0]
 8003e8a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	e7ec      	b.n	8003e6e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4413      	add	r3, r2
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	441a      	add	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	6839      	ldr	r1, [r7, #0]
 8003ec2:	440a      	add	r2, r1
 8003ec4:	7812      	ldrb	r2, [r2, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	6839      	ldr	r1, [r7, #0]
 8003ed2:	440b      	add	r3, r1
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	3302      	adds	r3, #2
 8003ee2:	6839      	ldr	r1, [r7, #0]
 8003ee4:	440b      	add	r3, r1
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	3303      	adds	r3, #3
 8003ef4:	6839      	ldr	r1, [r7, #0]
 8003ef6:	440b      	add	r3, r1
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	061b      	lsls	r3, r3, #24
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	61bb      	str	r3, [r7, #24]
     return offset;
 8003f0c:	69bb      	ldr	r3, [r7, #24]
    }
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3728      	adds	r7, #40	; 0x28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8003f22:	4618      	mov	r0, r3
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	0801444c 	.word	0x0801444c

08003f34 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	4b03      	ldr	r3, [pc, #12]	; (8003f4c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	08014468 	.word	0x08014468

08003f50 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff fd34 	bl	80039c8 <_ZN3ros3MsgC1Ev>
 8003f60:	4a06      	ldr	r2, [pc, #24]	; (8003f7c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	711a      	strb	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8003f70:	609a      	str	r2, [r3, #8]
    {
    }
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	08014774 	.word	0x08014774
 8003f80:	08014448 	.word	0x08014448

08003f84 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	4413      	add	r3, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	7912      	ldrb	r2, [r2, #4]
 8003f9c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fc f937 	bl	800021c <strlen>
 8003fae:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f001 fb29 	bl	8005610 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	18d0      	adds	r0, r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f010 f855 	bl	8014080 <memcpy>
      offset += length_msg;
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4413      	add	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
      return offset;
 8003fde:	68fb      	ldr	r3, [r7, #12]
    }
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	781a      	ldrb	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	3301      	adds	r3, #1
 8004006:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	441a      	add	r2, r3
 800400e:	f107 030c 	add.w	r3, r7, #12
 8004012:	4611      	mov	r1, r2
 8004014:	4618      	mov	r0, r3
 8004016:	f001 fb19 	bl	800564c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	3304      	adds	r3, #4
 800401e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4413      	add	r3, r2
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	429a      	cmp	r2, r3
 800402e:	d20c      	bcs.n	800404a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	441a      	add	r2, r3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	3b01      	subs	r3, #1
 800403a:	6839      	ldr	r1, [r7, #0]
 800403c:	440b      	add	r3, r1
 800403e:	7812      	ldrb	r2, [r2, #0]
 8004040:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	3301      	adds	r3, #1
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	e7ec      	b.n	8004024 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	3b01      	subs	r3, #1
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	4413      	add	r3, r2
 8004056:	2200      	movs	r2, #0
 8004058:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	3b01      	subs	r3, #1
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	441a      	add	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
     return offset;
 800406e:	693b      	ldr	r3, [r7, #16]
    }
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	4b03      	ldr	r3, [pc, #12]	; (8004090 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	0801448c 	.word	0x0801448c

08004094 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	4b03      	ldr	r3, [pc, #12]	; (80040ac <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800409e:	4618      	mov	r0, r3
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	080144a0 	.word	0x080144a0

080040b0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff fc84 	bl	80039c8 <_ZN3ros3MsgC1Ev>
 80040c0:	4a0c      	ldr	r2, [pc, #48]	; (80040f4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	60da      	str	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	611a      	str	r2, [r3, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	619a      	str	r2, [r3, #24]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	61da      	str	r2, [r3, #28]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	0801475c 	.word	0x0801475c

080040f8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08a      	sub	sp, #40	; 0x28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6859      	ldr	r1, [r3, #4]
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	4413      	add	r3, r2
 8004110:	b2ca      	uxtb	r2, r1
 8004112:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	0a19      	lsrs	r1, r3, #8
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	3301      	adds	r3, #1
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	4413      	add	r3, r2
 8004122:	b2ca      	uxtb	r2, r1
 8004124:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	0c19      	lsrs	r1, r3, #16
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	3302      	adds	r3, #2
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	4413      	add	r3, r2
 8004134:	b2ca      	uxtb	r2, r1
 8004136:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	0e19      	lsrs	r1, r3, #24
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	3303      	adds	r3, #3
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	4413      	add	r3, r2
 8004146:	b2ca      	uxtb	r2, r1
 8004148:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	3304      	adds	r3, #4
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8004150:	2300      	movs	r3, #0
 8004152:	623b      	str	r3, [r7, #32]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	6a3a      	ldr	r2, [r7, #32]
 800415a:	429a      	cmp	r2, r3
 800415c:	d22b      	bcs.n	80041b6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800416c:	6939      	ldr	r1, [r7, #16]
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	4413      	add	r3, r2
 8004174:	b2ca      	uxtb	r2, r1
 8004176:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	0a19      	lsrs	r1, r3, #8
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	3301      	adds	r3, #1
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	4413      	add	r3, r2
 8004184:	b2ca      	uxtb	r2, r1
 8004186:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	0c19      	lsrs	r1, r3, #16
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	3302      	adds	r3, #2
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	4413      	add	r3, r2
 8004194:	b2ca      	uxtb	r2, r1
 8004196:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	0e19      	lsrs	r1, r3, #24
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	3303      	adds	r3, #3
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	4413      	add	r3, r2
 80041a4:	b2ca      	uxtb	r2, r1
 80041a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	3304      	adds	r3, #4
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	3301      	adds	r3, #1
 80041b2:	623b      	str	r3, [r7, #32]
 80041b4:	e7ce      	b.n	8004154 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6919      	ldr	r1, [r3, #16]
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	4413      	add	r3, r2
 80041c0:	b2ca      	uxtb	r2, r1
 80041c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	0a19      	lsrs	r1, r3, #8
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	3301      	adds	r3, #1
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	4413      	add	r3, r2
 80041d2:	b2ca      	uxtb	r2, r1
 80041d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	0c19      	lsrs	r1, r3, #16
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	3302      	adds	r3, #2
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	4413      	add	r3, r2
 80041e4:	b2ca      	uxtb	r2, r1
 80041e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	0e19      	lsrs	r1, r3, #24
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	3303      	adds	r3, #3
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	4413      	add	r3, r2
 80041f6:	b2ca      	uxtb	r2, r1
 80041f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	3304      	adds	r3, #4
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	69fa      	ldr	r2, [r7, #28]
 800420a:	429a      	cmp	r2, r3
 800420c:	d22b      	bcs.n	8004266 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800421c:	68f9      	ldr	r1, [r7, #12]
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	4413      	add	r3, r2
 8004224:	b2ca      	uxtb	r2, r1
 8004226:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	0a19      	lsrs	r1, r3, #8
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	3301      	adds	r3, #1
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	4413      	add	r3, r2
 8004234:	b2ca      	uxtb	r2, r1
 8004236:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	0c19      	lsrs	r1, r3, #16
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	3302      	adds	r3, #2
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	4413      	add	r3, r2
 8004244:	b2ca      	uxtb	r2, r1
 8004246:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	0e19      	lsrs	r1, r3, #24
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	3303      	adds	r3, #3
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	4413      	add	r3, r2
 8004254:	b2ca      	uxtb	r2, r1
 8004256:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	3304      	adds	r3, #4
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	3301      	adds	r3, #1
 8004262:	61fb      	str	r3, [r7, #28]
 8004264:	e7ce      	b.n	8004204 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69d9      	ldr	r1, [r3, #28]
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	4413      	add	r3, r2
 8004270:	b2ca      	uxtb	r2, r1
 8004272:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	0a19      	lsrs	r1, r3, #8
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	3301      	adds	r3, #1
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	4413      	add	r3, r2
 8004282:	b2ca      	uxtb	r2, r1
 8004284:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	0c19      	lsrs	r1, r3, #16
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	3302      	adds	r3, #2
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	4413      	add	r3, r2
 8004294:	b2ca      	uxtb	r2, r1
 8004296:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	0e19      	lsrs	r1, r3, #24
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	3303      	adds	r3, #3
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	4413      	add	r3, r2
 80042a6:	b2ca      	uxtb	r2, r1
 80042a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	3304      	adds	r3, #4
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80042b0:	2300      	movs	r3, #0
 80042b2:	61bb      	str	r3, [r7, #24]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d228      	bcs.n	8004310 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fb ffa6 	bl	800021c <strlen>
 80042d0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	4413      	add	r3, r2
 80042d8:	6979      	ldr	r1, [r7, #20]
 80042da:	4618      	mov	r0, r3
 80042dc:	f001 f998 	bl	8005610 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	3304      	adds	r3, #4
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	18d0      	adds	r0, r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4619      	mov	r1, r3
 80042fc:	f00f fec0 	bl	8014080 <memcpy>
      offset += length_stringsi;
 8004300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	4413      	add	r3, r2
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	3301      	adds	r3, #1
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	e7d1      	b.n	80042b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004312:	4618      	mov	r0, r3
 8004314:	3728      	adds	r7, #40	; 0x28
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800431a:	b580      	push	{r7, lr}
 800431c:	b08e      	sub	sp, #56	; 0x38
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	4413      	add	r3, r2
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004334:	3301      	adds	r3, #1
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	4413      	add	r3, r2
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	6a3a      	ldr	r2, [r7, #32]
 8004340:	4313      	orrs	r3, r2
 8004342:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004346:	3302      	adds	r3, #2
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	4413      	add	r3, r2
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	041b      	lsls	r3, r3, #16
 8004350:	6a3a      	ldr	r2, [r7, #32]
 8004352:	4313      	orrs	r3, r2
 8004354:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004358:	3303      	adds	r3, #3
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	4413      	add	r3, r2
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	061b      	lsls	r3, r3, #24
 8004362:	6a3a      	ldr	r2, [r7, #32]
 8004364:	4313      	orrs	r3, r2
 8004366:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8004368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436a:	3304      	adds	r3, #4
 800436c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	6a3a      	ldr	r2, [r7, #32]
 8004374:	429a      	cmp	r2, r3
 8004376:	d90a      	bls.n	800438e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f00f fe92 	bl	80140ac <realloc>
 8004388:	4602      	mov	r2, r0
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a3a      	ldr	r2, [r7, #32]
 8004392:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8004394:	2300      	movs	r3, #0
 8004396:	633b      	str	r3, [r7, #48]	; 0x30
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439e:	429a      	cmp	r2, r3
 80043a0:	d236      	bcs.n	8004410 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043aa:	6839      	ldr	r1, [r7, #0]
 80043ac:	440a      	add	r2, r1
 80043ae:	7812      	ldrb	r2, [r2, #0]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b8:	3301      	adds	r3, #1
 80043ba:	6839      	ldr	r1, [r7, #0]
 80043bc:	440b      	add	r3, r1
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ca:	3302      	adds	r3, #2
 80043cc:	6839      	ldr	r1, [r7, #0]
 80043ce:	440b      	add	r3, r1
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043dc:	3303      	adds	r3, #3
 80043de:	6839      	ldr	r1, [r7, #0]
 80043e0:	440b      	add	r3, r1
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	061b      	lsls	r3, r3, #24
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80043f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f2:	3304      	adds	r3, #4
 80043f4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	3208      	adds	r2, #8
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8004408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440a:	3301      	adds	r3, #1
 800440c:	633b      	str	r3, [r7, #48]	; 0x30
 800440e:	e7c3      	b.n	8004398 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	4413      	add	r3, r2
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800441a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441c:	3301      	adds	r3, #1
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	4413      	add	r3, r2
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	4313      	orrs	r3, r2
 800442a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800442c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442e:	3302      	adds	r3, #2
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	4413      	add	r3, r2
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	041b      	lsls	r3, r3, #16
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	4313      	orrs	r3, r2
 800443c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800443e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004440:	3303      	adds	r3, #3
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	4413      	add	r3, r2
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	061b      	lsls	r3, r3, #24
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	4313      	orrs	r3, r2
 800444e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8004450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004452:	3304      	adds	r3, #4
 8004454:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	429a      	cmp	r2, r3
 800445e:	d90a      	bls.n	8004476 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699a      	ldr	r2, [r3, #24]
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4619      	mov	r1, r3
 800446a:	4610      	mov	r0, r2
 800446c:	f00f fe1e 	bl	80140ac <realloc>
 8004470:	4602      	mov	r2, r0
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800447c:	2300      	movs	r3, #0
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004486:	429a      	cmp	r2, r3
 8004488:	d236      	bcs.n	80044f8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800448a:	2300      	movs	r3, #0
 800448c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004492:	6839      	ldr	r1, [r7, #0]
 8004494:	440a      	add	r2, r1
 8004496:	7812      	ldrb	r2, [r2, #0]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a0:	3301      	adds	r3, #1
 80044a2:	6839      	ldr	r1, [r7, #0]
 80044a4:	440b      	add	r3, r1
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	021b      	lsls	r3, r3, #8
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b2:	3302      	adds	r3, #2
 80044b4:	6839      	ldr	r1, [r7, #0]
 80044b6:	440b      	add	r3, r1
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	041b      	lsls	r3, r3, #16
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c4:	3303      	adds	r3, #3
 80044c6:	6839      	ldr	r1, [r7, #0]
 80044c8:	440b      	add	r3, r1
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	061b      	lsls	r3, r3, #24
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80044d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044da:	3304      	adds	r3, #4
 80044dc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	3214      	adds	r2, #20
 80044ec:	6812      	ldr	r2, [r2, #0]
 80044ee:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80044f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f2:	3301      	adds	r3, #1
 80044f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f6:	e7c3      	b.n	8004480 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80044f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	4413      	add	r3, r2
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004504:	3301      	adds	r3, #1
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	4413      	add	r3, r2
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4313      	orrs	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004516:	3302      	adds	r3, #2
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	4413      	add	r3, r2
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	041b      	lsls	r3, r3, #16
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4313      	orrs	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004528:	3303      	adds	r3, #3
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	4413      	add	r3, r2
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	061b      	lsls	r3, r3, #24
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4313      	orrs	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8004538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453a:	3304      	adds	r3, #4
 800453c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	429a      	cmp	r2, r3
 8004546:	d90a      	bls.n	800455e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f00f fdaa 	bl	80140ac <realloc>
 8004558:	4602      	mov	r2, r0
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8004564:	2300      	movs	r3, #0
 8004566:	62bb      	str	r3, [r7, #40]	; 0x28
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800456e:	429a      	cmp	r2, r3
 8004570:	d23f      	bcs.n	80045f2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8004572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	441a      	add	r2, r3
 8004578:	f107 030c 	add.w	r3, r7, #12
 800457c:	4611      	mov	r1, r2
 800457e:	4618      	mov	r0, r3
 8004580:	f001 f864 	bl	800564c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004586:	3304      	adds	r3, #4
 8004588:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800458a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
 800458e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004596:	429a      	cmp	r2, r3
 8004598:	d20c      	bcs.n	80045b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	441a      	add	r2, r3
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	3b01      	subs	r3, #1
 80045a4:	6839      	ldr	r1, [r7, #0]
 80045a6:	440b      	add	r3, r1
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	3301      	adds	r3, #1
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
 80045b2:	e7ec      	b.n	800458e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80045b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4413      	add	r3, r2
 80045ba:	3b01      	subs	r3, #1
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	4413      	add	r3, r2
 80045c0:	2200      	movs	r2, #0
 80045c2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80045c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c6:	3b01      	subs	r3, #1
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	441a      	add	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80045d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4413      	add	r3, r2
 80045d6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	3220      	adds	r2, #32
 80045e6:	6812      	ldr	r2, [r2, #0]
 80045e8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	3301      	adds	r3, #1
 80045ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80045f0:	e7ba      	b.n	8004568 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80045f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80045f4:	4618      	mov	r0, r3
 80045f6:	3738      	adds	r7, #56	; 0x38
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	4b03      	ldr	r3, [pc, #12]	; (8004614 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	08014680 	.word	0x08014680

08004618 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	4b03      	ldr	r3, [pc, #12]	; (8004630 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8004622:	4618      	mov	r0, r3
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	080144c4 	.word	0x080144c4

08004634 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	605a      	str	r2, [r3, #4]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	611a      	str	r2, [r3, #16]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4618      	mov	r0, r3
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68d8      	ldr	r0, [r3, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6891      	ldr	r1, [r2, #8]
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	4798      	blx	r3
 8004680:	4603      	mov	r3, r0
  };
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
  }
 8004696:	4618      	mov	r0, r3
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <_ZN13STM32Hardware10getRdmaIndEv>:
	UART_HandleTypeDef *huart;

	const static uint16_t rbuflen = 512;
	uint8_t rbuf[rbuflen];
	uint32_t rind;
	inline uint32_t getRdmaInd(void) {
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
		return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80046b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
	}
 80046bc:	4618      	mov	r0, r3
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <_ZN13STM32HardwareC1Ev>:
	const static uint16_t tbuflen = 512;
	uint8_t tbuf[tbuflen];
	uint32_t twind, tfind;

public:
	STM32Hardware() :
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
			huart(&huart2), rind(0), twind(0), tfind(0) {
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <_ZN13STM32HardwareC1Ev+0x34>)
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	}
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	20001880 	.word	0x20001880

08004700 <_ZN13STM32Hardware4initEv>:

	STM32Hardware(UART_HandleTypeDef *huart_) :
			huart(huart_), rind(0), twind(0), tfind(0) {
	}

	void init() {
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
		reset_rbuf();
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f804 	bl	8004716 <_ZN13STM32Hardware10reset_rbufEv>
	}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <_ZN13STM32Hardware10reset_rbufEv>:

	void reset_rbuf(void) {
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
		HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3304      	adds	r3, #4
 8004726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800472a:	4619      	mov	r1, r3
 800472c:	f009 fd90 	bl	800e250 <HAL_UART_Receive_DMA>
	}
 8004730:	bf00      	nop
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <_ZN13STM32Hardware4readEv>:

	int read() {
 8004738:	b590      	push	{r4, r7, lr}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
		int c = -1;
 8004740:	f04f 33ff 	mov.w	r3, #4294967295
 8004744:	60fb      	str	r3, [r7, #12]
		if (rind != getRdmaInd()) {
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff ffa8 	bl	80046a2 <_ZN13STM32Hardware10getRdmaIndEv>
 8004752:	4603      	mov	r3, r0
 8004754:	429c      	cmp	r4, r3
 8004756:	bf14      	ite	ne
 8004758:	2301      	movne	r3, #1
 800475a:	2300      	moveq	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d012      	beq.n	8004788 <_ZN13STM32Hardware4readEv+0x50>
			c = rbuf[rind++];
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004768:	1c59      	adds	r1, r3, #1
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	4413      	add	r3, r2
 8004774:	791b      	ldrb	r3, [r3, #4]
 8004776:	60fb      	str	r3, [r7, #12]
			rind &= rbuflen - 1;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800477e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		}
		return c;
 8004788:	68fb      	ldr	r3, [r7, #12]
	}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	bd90      	pop	{r4, r7, pc}
	...

08004794 <_ZN13STM32Hardware5flushEv>:

	void flush(void) {
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
		static bool mutex = false;

		if ((huart->gState == HAL_UART_STATE_READY) && !mutex) {
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d108      	bne.n	80047bc <_ZN13STM32Hardware5flushEv+0x28>
 80047aa:	4b28      	ldr	r3, [pc, #160]	; (800484c <_ZN13STM32Hardware5flushEv+0xb8>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	f083 0301 	eor.w	r3, r3, #1
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <_ZN13STM32Hardware5flushEv+0x28>
 80047b8:	2301      	movs	r3, #1
 80047ba:	e000      	b.n	80047be <_ZN13STM32Hardware5flushEv+0x2a>
 80047bc:	2300      	movs	r3, #0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d03f      	beq.n	8004842 <_ZN13STM32Hardware5flushEv+0xae>
			mutex = true;
 80047c2:	4b22      	ldr	r3, [pc, #136]	; (800484c <_ZN13STM32Hardware5flushEv+0xb8>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	701a      	strb	r2, [r3, #0]

			if (twind != tfind) {
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d031      	beq.n	800483c <_ZN13STM32Hardware5flushEv+0xa8>
				uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d20a      	bcs.n	80047fe <_ZN13STM32Hardware5flushEv+0x6a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	e006      	b.n	800480c <_ZN13STM32Hardware5flushEv+0x78>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004804:	b29b      	uxth	r3, r3
 8004806:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800480a:	b29b      	uxth	r3, r3
 800480c:	81fb      	strh	r3, [r7, #14]
				HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004818:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	4413      	add	r3, r2
 8004820:	89fa      	ldrh	r2, [r7, #14]
 8004822:	4619      	mov	r1, r3
 8004824:	f009 fc96 	bl	800e154 <HAL_UART_Transmit_DMA>
				tfind = (tfind + len) & (tbuflen - 1);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800482e:	89fb      	ldrh	r3, [r7, #14]
 8004830:	4413      	add	r3, r2
 8004832:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			}
			mutex = false;
 800483c:	4b03      	ldr	r3, [pc, #12]	; (800484c <_ZN13STM32Hardware5flushEv+0xb8>)
 800483e:	2200      	movs	r2, #0
 8004840:	701a      	strb	r2, [r3, #0]
		}
	}
 8004842:	bf00      	nop
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20000a24 	.word	0x20000a24

08004850 <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t *data, int length) {
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
		int n = length;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	617b      	str	r3, [r7, #20]
		n = n <= tbuflen ? n : tbuflen;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004866:	bfa8      	it	ge
 8004868:	f44f 7300 	movge.w	r3, #512	; 0x200
 800486c:	617b      	str	r3, [r7, #20]

		int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004874:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	4293      	cmp	r3, r2
 800487c:	bf28      	it	cs
 800487e:	4613      	movcs	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
		memcpy(&(tbuf[twind]), data, n_tail);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004888:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	4618      	mov	r0, r3
 8004896:	f00f fbf3 	bl	8014080 <memcpy>
		twind = (twind + n) & (tbuflen - 1);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	4413      	add	r3, r2
 80048a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

		if (n != n_tail) {
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d00b      	beq.n	80048ce <_ZN13STM32Hardware5writeEPhi+0x7e>
			memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	18d1      	adds	r1, r2, r3
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	f00f fbd9 	bl	8014080 <memcpy>
		}

		flush();
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f7ff ff60 	bl	8004794 <_ZN13STM32Hardware5flushEv>
	}
 80048d4:	bf00      	nop
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <_ZN13STM32Hardware4timeEv>:

	unsigned long time() {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
		return HAL_GetTick();;
 80048e4:	f003 fcf8 	bl	80082d8 <HAL_GetTick>
 80048e8:	4603      	mov	r3, r0
	}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7ff f862 	bl	80039c8 <_ZN3ros3MsgC1Ev>
 8004904:	4a08      	ldr	r2, [pc, #32]	; (8004928 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a07      	ldr	r2, [pc, #28]	; (800492c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 800490e:	605a      	str	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	609a      	str	r2, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	60da      	str	r2, [r3, #12]
    {
    }
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	08014718 	.word	0x08014718
 800492c:	08014448 	.word	0x08014448

08004930 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	4618      	mov	r0, r3
 8004944:	f7fb fc6a 	bl	800021c <strlen>
 8004948:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	4413      	add	r3, r2
 8004950:	68b9      	ldr	r1, [r7, #8]
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fe5c 	bl	8005610 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	3304      	adds	r3, #4
 800495c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	18d0      	adds	r0, r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	4619      	mov	r1, r3
 800496c:	f00f fb88 	bl	8014080 <memcpy>
      offset += length_label;
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4413      	add	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6899      	ldr	r1, [r3, #8]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	4413      	add	r3, r2
 8004982:	b2ca      	uxtb	r2, r1
 8004984:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	0a19      	lsrs	r1, r3, #8
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3301      	adds	r3, #1
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	4413      	add	r3, r2
 8004994:	b2ca      	uxtb	r2, r1
 8004996:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	0c19      	lsrs	r1, r3, #16
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	3302      	adds	r3, #2
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	4413      	add	r3, r2
 80049a6:	b2ca      	uxtb	r2, r1
 80049a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	0e19      	lsrs	r1, r3, #24
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3303      	adds	r3, #3
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	4413      	add	r3, r2
 80049b8:	b2ca      	uxtb	r2, r1
 80049ba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3304      	adds	r3, #4
 80049c0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68d9      	ldr	r1, [r3, #12]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	4413      	add	r3, r2
 80049cc:	b2ca      	uxtb	r2, r1
 80049ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	0a19      	lsrs	r1, r3, #8
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3301      	adds	r3, #1
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	4413      	add	r3, r2
 80049de:	b2ca      	uxtb	r2, r1
 80049e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	0c19      	lsrs	r1, r3, #16
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3302      	adds	r3, #2
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	4413      	add	r3, r2
 80049f0:	b2ca      	uxtb	r2, r1
 80049f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	0e19      	lsrs	r1, r3, #24
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3303      	adds	r3, #3
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	4413      	add	r3, r2
 8004a02:	b2ca      	uxtb	r2, r1
 8004a04:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	60fb      	str	r3, [r7, #12]
      return offset;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
    }
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b086      	sub	sp, #24
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	441a      	add	r2, r3
 8004a2a:	f107 030c 	add.w	r3, r7, #12
 8004a2e:	4611      	mov	r1, r2
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fe0b 	bl	800564c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4413      	add	r3, r2
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d20c      	bcs.n	8004a66 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	441a      	add	r2, r3
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	6839      	ldr	r1, [r7, #0]
 8004a58:	440b      	add	r3, r1
 8004a5a:	7812      	ldrb	r2, [r2, #0]
 8004a5c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	3301      	adds	r3, #1
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	e7ec      	b.n	8004a40 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	4413      	add	r3, r2
 8004a72:	2200      	movs	r2, #0
 8004a74:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	441a      	add	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	4413      	add	r3, r2
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	6839      	ldr	r1, [r7, #0]
 8004aa2:	440b      	add	r3, r1
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	3302      	adds	r3, #2
 8004ab6:	6839      	ldr	r1, [r7, #0]
 8004ab8:	440b      	add	r3, r1
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	041b      	lsls	r3, r3, #16
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	3303      	adds	r3, #3
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	440b      	add	r3, r1
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	061b      	lsls	r3, r3, #24
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	3304      	adds	r3, #4
 8004ade:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	3301      	adds	r3, #1
 8004af6:	6839      	ldr	r1, [r7, #0]
 8004af8:	440b      	add	r3, r1
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	021b      	lsls	r3, r3, #8
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	3302      	adds	r3, #2
 8004b0c:	6839      	ldr	r1, [r7, #0]
 8004b0e:	440b      	add	r3, r1
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	041b      	lsls	r3, r3, #16
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	3303      	adds	r3, #3
 8004b22:	6839      	ldr	r1, [r7, #0]
 8004b24:	440b      	add	r3, r1
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	3304      	adds	r3, #4
 8004b34:	613b      	str	r3, [r7, #16]
     return offset;
 8004b36:	693b      	ldr	r3, [r7, #16]
    }
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	080144e8 	.word	0x080144e8

08004b5c <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	4b03      	ldr	r3, [pc, #12]	; (8004b74 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	08014508 	.word	0x08014508

08004b78 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe ff20 	bl	80039c8 <_ZN3ros3MsgC1Ev>
 8004b88:	4a0a      	ldr	r2, [pc, #40]	; (8004bb4 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	605a      	str	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3308      	adds	r3, #8
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff feab 	bl	80048f4 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	619a      	str	r2, [r3, #24]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	61da      	str	r2, [r3, #28]
    {
    }
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	08014700 	.word	0x08014700

08004bb8 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6859      	ldr	r1, [r3, #4]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	4413      	add	r3, r2
 8004bd0:	b2ca      	uxtb	r2, r1
 8004bd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	0a19      	lsrs	r1, r3, #8
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	4413      	add	r3, r2
 8004be2:	b2ca      	uxtb	r2, r1
 8004be4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	0c19      	lsrs	r1, r3, #16
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3302      	adds	r3, #2
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	b2ca      	uxtb	r2, r1
 8004bf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	0e19      	lsrs	r1, r3, #24
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3303      	adds	r3, #3
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	4413      	add	r3, r2
 8004c06:	b2ca      	uxtb	r2, r1
 8004c08:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8004c10:	2300      	movs	r3, #0
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d218      	bcs.n	8004c50 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699a      	ldr	r2, [r3, #24]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	18d0      	adds	r0, r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699a      	ldr	r2, [r3, #24]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	4413      	add	r3, r2
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	6839      	ldr	r1, [r7, #0]
 8004c3a:	440a      	add	r2, r1
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	4798      	blx	r3
 8004c40:	4602      	mov	r2, r0
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	e7e1      	b.n	8004c14 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	69d9      	ldr	r1, [r3, #28]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	4413      	add	r3, r2
 8004c5a:	b2ca      	uxtb	r2, r1
 8004c5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	0a19      	lsrs	r1, r3, #8
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3301      	adds	r3, #1
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	b2ca      	uxtb	r2, r1
 8004c6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	0c19      	lsrs	r1, r3, #16
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3302      	adds	r3, #2
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	b2ca      	uxtb	r2, r1
 8004c80:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	0e19      	lsrs	r1, r3, #24
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3303      	adds	r3, #3
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	4413      	add	r3, r2
 8004c90:	b2ca      	uxtb	r2, r1
 8004c92:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	3304      	adds	r3, #4
 8004c98:	60fb      	str	r3, [r7, #12]
      return offset;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
    }
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	3302      	adds	r3, #2
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	041b      	lsls	r3, r3, #16
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	3303      	adds	r3, #3
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	061b      	lsls	r3, r3, #24
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d90a      	bls.n	8004d18 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	f00f f9cd 	bl	80140ac <realloc>
 8004d12:	4602      	mov	r2, r0
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8004d1e:	2300      	movs	r3, #0
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d21b      	bcs.n	8004d64 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f103 0008 	add.w	r0, r3, #8
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	4413      	add	r3, r2
 8004d38:	4619      	mov	r1, r3
 8004d3a:	f7ff fe6c 	bl	8004a16 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	4413      	add	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	18d0      	adds	r0, r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3308      	adds	r3, #8
 8004d54:	2210      	movs	r2, #16
 8004d56:	4619      	mov	r1, r3
 8004d58:	f00f f992 	bl	8014080 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	e7de      	b.n	8004d22 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	4413      	add	r3, r2
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69da      	ldr	r2, [r3, #28]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	6839      	ldr	r1, [r7, #0]
 8004d7c:	440b      	add	r3, r1
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	021b      	lsls	r3, r3, #8
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	3302      	adds	r3, #2
 8004d90:	6839      	ldr	r1, [r7, #0]
 8004d92:	440b      	add	r3, r1
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	041b      	lsls	r3, r3, #16
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69da      	ldr	r2, [r3, #28]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	3303      	adds	r3, #3
 8004da6:	6839      	ldr	r1, [r7, #0]
 8004da8:	440b      	add	r3, r1
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	061b      	lsls	r3, r3, #24
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	3304      	adds	r3, #4
 8004db8:	617b      	str	r3, [r7, #20]
     return offset;
 8004dba:	697b      	ldr	r3, [r7, #20]
    }
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	4b03      	ldr	r3, [pc, #12]	; (8004ddc <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8004dce:	4618      	mov	r0, r3
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	0801452c 	.word	0x0801452c

08004de0 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	4b03      	ldr	r3, [pc, #12]	; (8004df8 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8004dea:	4618      	mov	r0, r3
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	08014548 	.word	0x08014548

08004dfc <_ZN8std_msgs15Int16MultiArrayC1Ev>:
      uint32_t data_length;
      typedef int16_t _data_type;
      _data_type st_data;
      _data_type * data;

    Int16MultiArray():
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe fdde 	bl	80039c8 <_ZN3ros3MsgC1Ev>
 8004e0c:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <_ZN8std_msgs15Int16MultiArrayC1Ev+0x38>)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3304      	adds	r3, #4
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff feae 	bl	8004b78 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	625a      	str	r2, [r3, #36]	; 0x24
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	080146e8 	.word	0x080146e8

08004e38 <_ZNK8std_msgs15Int16MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	1d18      	adds	r0, r3, #4
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	4413      	add	r3, r2
 8004e50:	4619      	mov	r1, r3
 8004e52:	f7ff feb1 	bl	8004bb8 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8004e56:	4602      	mov	r2, r0
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	4413      	add	r3, r2
 8004e68:	b2ca      	uxtb	r2, r1
 8004e6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	0a19      	lsrs	r1, r3, #8
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	3301      	adds	r3, #1
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	4413      	add	r3, r2
 8004e7a:	b2ca      	uxtb	r2, r1
 8004e7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	0c19      	lsrs	r1, r3, #16
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	3302      	adds	r3, #2
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	b2ca      	uxtb	r2, r1
 8004e8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	0e19      	lsrs	r1, r3, #24
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	3303      	adds	r3, #3
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	b2ca      	uxtb	r2, r1
 8004ea0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	613b      	str	r3, [r7, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d21d      	bcs.n	8004ef2 <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0xba>
      union {
        int16_t real;
        uint16_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ec4:	81bb      	strh	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8004ec6:	89b9      	ldrh	r1, [r7, #12]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	4413      	add	r3, r2
 8004ece:	b2ca      	uxtb	r2, r1
 8004ed0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8004ed2:	89bb      	ldrh	r3, [r7, #12]
 8004ed4:	0a1b      	lsrs	r3, r3, #8
 8004ed6:	b299      	uxth	r1, r3
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	3301      	adds	r3, #1
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	4413      	add	r3, r2
 8004ee0:	b2ca      	uxtb	r2, r1
 8004ee2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	3302      	adds	r3, #2
 8004ee8:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	3301      	adds	r3, #1
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	e7dc      	b.n	8004eac <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0x74>
      }
      return offset;
 8004ef2:	697b      	ldr	r3, [r7, #20]
    }
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <_ZN8std_msgs15Int16MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	1d18      	adds	r0, r3, #4
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	4413      	add	r3, r2
 8004f14:	4619      	mov	r1, r3
 8004f16:	f7ff fec5 	bl	8004ca4 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4413      	add	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	4413      	add	r3, r2
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	4413      	add	r3, r2
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	3302      	adds	r3, #2
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	4413      	add	r3, r2
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	041b      	lsls	r3, r3, #16
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	3303      	adds	r3, #3
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	4413      	add	r3, r2
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	061b      	lsls	r3, r3, #24
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	3304      	adds	r3, #4
 8004f66:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d90a      	bls.n	8004f88 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x8c>
        this->data = (int16_t*)realloc(this->data, data_lengthT * sizeof(int16_t));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f00f f895 	bl	80140ac <realloc>
 8004f82:	4602      	mov	r2, r0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8004f8e:	2300      	movs	r3, #0
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d22c      	bcs.n	8004ff6 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0xfa>
      union {
        int16_t real;
        uint16_t base;
      } u_st_data;
      u_st_data.base = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004fa0:	893a      	ldrh	r2, [r7, #8]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	6839      	ldr	r1, [r7, #0]
 8004fa6:	440b      	add	r3, r1
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	4313      	orrs	r3, r2
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004fb2:	893b      	ldrh	r3, [r7, #8]
 8004fb4:	b21a      	sxth	r2, r3
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	6839      	ldr	r1, [r7, #0]
 8004fbc:	440b      	add	r3, r1
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	021b      	lsls	r3, r3, #8
 8004fc2:	b21b      	sxth	r3, r3
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	b21b      	sxth	r3, r3
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	813b      	strh	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8004fcc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	851a      	strh	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	3302      	adds	r3, #2
 8004fd8:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int16_t));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	4413      	add	r3, r2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	3228      	adds	r2, #40	; 0x28
 8004fe8:	8812      	ldrh	r2, [r2, #0]
 8004fea:	b292      	uxth	r2, r2
 8004fec:	801a      	strh	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	e7cd      	b.n	8004f92 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x96>
      }
     return offset;
 8004ff6:	697b      	ldr	r3, [r7, #20]
    }
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <_ZN8std_msgs15Int16MultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/Int16MultiArray"; };
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	4b03      	ldr	r3, [pc, #12]	; (8005018 <_ZN8std_msgs15Int16MultiArray7getTypeEv+0x18>)
 800500a:	4618      	mov	r0, r3
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	0801456c 	.word	0x0801456c

0800501c <_ZN8std_msgs15Int16MultiArray6getMD5Ev>:
    const char * getMD5(){ return "d9338d7f523fcb692fae9d0a0e9f067c"; };
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	4b03      	ldr	r3, [pc, #12]	; (8005034 <_ZN8std_msgs15Int16MultiArray6getMD5Ev+0x18>)
 8005026:	4618      	mov	r0, r3
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	08014588 	.word	0x08014588

08005038 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
      data("")
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4618      	mov	r0, r3
 8005044:	f7fe fcc0 	bl	80039c8 <_ZN3ros3MsgC1Ev>
 8005048:	4a05      	ldr	r2, [pc, #20]	; (8005060 <_ZN8std_msgs6StringC1Ev+0x28>)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a04      	ldr	r2, [pc, #16]	; (8005064 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8005052:	605a      	str	r2, [r3, #4]
    {
    }
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	080146d0 	.word	0x080146d0
 8005064:	08014448 	.word	0x08014448

08005068 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	4618      	mov	r0, r3
 800507c:	f7fb f8ce 	bl	800021c <strlen>
 8005080:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	4413      	add	r3, r2
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fac0 	bl	8005610 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3304      	adds	r3, #4
 8005094:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	18d0      	adds	r0, r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	4619      	mov	r1, r3
 80050a4:	f00e ffec 	bl	8014080 <memcpy>
      offset += length_data;
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4413      	add	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
      return offset;
 80050b0:	68fb      	ldr	r3, [r7, #12]
    }
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b086      	sub	sp, #24
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80050c4:	2300      	movs	r3, #0
 80050c6:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	441a      	add	r2, r3
 80050ce:	f107 030c 	add.w	r3, r7, #12
 80050d2:	4611      	mov	r1, r2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fab9 	bl	800564c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	3304      	adds	r3, #4
 80050de:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4413      	add	r3, r2
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d20c      	bcs.n	800510a <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	441a      	add	r2, r3
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	3b01      	subs	r3, #1
 80050fa:	6839      	ldr	r1, [r7, #0]
 80050fc:	440b      	add	r3, r1
 80050fe:	7812      	ldrb	r2, [r2, #0]
 8005100:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	3301      	adds	r3, #1
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	e7ec      	b.n	80050e4 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	3b01      	subs	r3, #1
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	4413      	add	r3, r2
 8005116:	2200      	movs	r2, #0
 8005118:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	3b01      	subs	r3, #1
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	441a      	add	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
     return offset;
 800512e:	693b      	ldr	r3, [r7, #16]
    }
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	4b03      	ldr	r3, [pc, #12]	; (8005150 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8005142:	4618      	mov	r0, r3
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	080145ac 	.word	0x080145ac

08005154 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	4b03      	ldr	r3, [pc, #12]	; (800516c <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800515e:	4618      	mov	r0, r3
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	080145bc 	.word	0x080145bc

08005170 <_Z13cake_callbackRKN8std_msgs6StringE>:
char handshake[2] = { 0 };
extern int counttry;
extern int tower_step, temp_pub;
extern int finish, disguise, home, steal, putcherry, score_flag[10], unload,
		unload_temp, transfer_the_order, cake_order;
void cake_callback(const std_msgs::String &msg) {
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
	handshake[0] = msg.data[0];
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	781a      	ldrb	r2, [r3, #0]
 800517e:	4b8c      	ldr	r3, [pc, #560]	; (80053b0 <_Z13cake_callbackRKN8std_msgs6StringE+0x240>)
 8005180:	701a      	strb	r2, [r3, #0]
	handshake[1] = msg.data[1];
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	3301      	adds	r3, #1
 8005188:	781a      	ldrb	r2, [r3, #0]
 800518a:	4b89      	ldr	r3, [pc, #548]	; (80053b0 <_Z13cake_callbackRKN8std_msgs6StringE+0x240>)
 800518c:	705a      	strb	r2, [r3, #1]
//	std::string str = msg.data; // string data
	if (msg.data[0] == 'b' || msg.data[0] == 'y' || msg.data[0] == 'p') {
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b62      	cmp	r3, #98	; 0x62
 8005196:	d00a      	beq.n	80051ae <_Z13cake_callbackRKN8std_msgs6StringE+0x3e>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b79      	cmp	r3, #121	; 0x79
 80051a0:	d005      	beq.n	80051ae <_Z13cake_callbackRKN8std_msgs6StringE+0x3e>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	2b70      	cmp	r3, #112	; 0x70
 80051aa:	f040 80c1 	bne.w	8005330 <_Z13cake_callbackRKN8std_msgs6StringE+0x1c0>
		mission_array[0] = 0;
 80051ae:	4b81      	ldr	r3, [pc, #516]	; (80053b4 <_Z13cake_callbackRKN8std_msgs6StringE+0x244>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	801a      	strh	r2, [r3, #0]
		if (msg.data[0] == 'b' && b_bool == 1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b62      	cmp	r3, #98	; 0x62
 80051bc:	d128      	bne.n	8005210 <_Z13cake_callbackRKN8std_msgs6StringE+0xa0>
 80051be:	4b7e      	ldr	r3, [pc, #504]	; (80053b8 <_Z13cake_callbackRKN8std_msgs6StringE+0x248>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d124      	bne.n	8005210 <_Z13cake_callbackRKN8std_msgs6StringE+0xa0>
				&& hole[(size_t) (msg.data[1] - '0')] != msg.data[0]) {
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	3301      	adds	r3, #1
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	3b30      	subs	r3, #48	; 0x30
 80051d0:	461a      	mov	r2, r3
 80051d2:	4b7a      	ldr	r3, [pc, #488]	; (80053bc <_Z13cake_callbackRKN8std_msgs6StringE+0x24c>)
 80051d4:	5c9a      	ldrb	r2, [r3, r2]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d017      	beq.n	8005210 <_Z13cake_callbackRKN8std_msgs6StringE+0xa0>
			b_bool = 0;
 80051e0:	4b75      	ldr	r3, [pc, #468]	; (80053b8 <_Z13cake_callbackRKN8std_msgs6StringE+0x248>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	dc0f      	bgt.n	8005210 <_Z13cake_callbackRKN8std_msgs6StringE+0xa0>
				if (hole[i] == 'b') {
 80051f0:	4a72      	ldr	r2, [pc, #456]	; (80053bc <_Z13cake_callbackRKN8std_msgs6StringE+0x24c>)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	4413      	add	r3, r2
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b62      	cmp	r3, #98	; 0x62
 80051fa:	d105      	bne.n	8005208 <_Z13cake_callbackRKN8std_msgs6StringE+0x98>
					hole[i] = 0;
 80051fc:	4a6f      	ldr	r2, [pc, #444]	; (80053bc <_Z13cake_callbackRKN8std_msgs6StringE+0x24c>)
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	4413      	add	r3, r2
 8005202:	2200      	movs	r2, #0
 8005204:	701a      	strb	r2, [r3, #0]
					break;
 8005206:	e003      	b.n	8005210 <_Z13cake_callbackRKN8std_msgs6StringE+0xa0>
			for (int i = 0; i < 4; i++) {
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	3301      	adds	r3, #1
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	e7ec      	b.n	80051ea <_Z13cake_callbackRKN8std_msgs6StringE+0x7a>
				}
			}
		}
		if (msg.data[0] == 'y' && y_bool == 1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b79      	cmp	r3, #121	; 0x79
 8005218:	d128      	bne.n	800526c <_Z13cake_callbackRKN8std_msgs6StringE+0xfc>
 800521a:	4b69      	ldr	r3, [pc, #420]	; (80053c0 <_Z13cake_callbackRKN8std_msgs6StringE+0x250>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d124      	bne.n	800526c <_Z13cake_callbackRKN8std_msgs6StringE+0xfc>
				&& hole[(size_t) (msg.data[1] - '0')] != msg.data[0]) {
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	3301      	adds	r3, #1
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	3b30      	subs	r3, #48	; 0x30
 800522c:	461a      	mov	r2, r3
 800522e:	4b63      	ldr	r3, [pc, #396]	; (80053bc <_Z13cake_callbackRKN8std_msgs6StringE+0x24c>)
 8005230:	5c9a      	ldrb	r2, [r3, r2]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d017      	beq.n	800526c <_Z13cake_callbackRKN8std_msgs6StringE+0xfc>
			y_bool = 0;
 800523c:	4b60      	ldr	r3, [pc, #384]	; (80053c0 <_Z13cake_callbackRKN8std_msgs6StringE+0x250>)
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 8005242:	2300      	movs	r3, #0
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b03      	cmp	r3, #3
 800524a:	dc0f      	bgt.n	800526c <_Z13cake_callbackRKN8std_msgs6StringE+0xfc>
				if (hole[i] == 'y') {
 800524c:	4a5b      	ldr	r2, [pc, #364]	; (80053bc <_Z13cake_callbackRKN8std_msgs6StringE+0x24c>)
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	4413      	add	r3, r2
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b79      	cmp	r3, #121	; 0x79
 8005256:	d105      	bne.n	8005264 <_Z13cake_callbackRKN8std_msgs6StringE+0xf4>
					hole[i] = 0;
 8005258:	4a58      	ldr	r2, [pc, #352]	; (80053bc <_Z13cake_callbackRKN8std_msgs6StringE+0x24c>)
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	4413      	add	r3, r2
 800525e:	2200      	movs	r2, #0
 8005260:	701a      	strb	r2, [r3, #0]
					break;
 8005262:	e003      	b.n	800526c <_Z13cake_callbackRKN8std_msgs6StringE+0xfc>
			for (int i = 0; i < 4; i++) {
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	3301      	adds	r3, #1
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	e7ec      	b.n	8005246 <_Z13cake_callbackRKN8std_msgs6StringE+0xd6>
				}
			}
		}
		if (msg.data[0] == 'p' && p_bool == 1
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b70      	cmp	r3, #112	; 0x70
 8005274:	d128      	bne.n	80052c8 <_Z13cake_callbackRKN8std_msgs6StringE+0x158>
 8005276:	4b53      	ldr	r3, [pc, #332]	; (80053c4 <_Z13cake_callbackRKN8std_msgs6StringE+0x254>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d124      	bne.n	80052c8 <_Z13cake_callbackRKN8std_msgs6StringE+0x158>
				&& hole[(size_t) (msg.data[1] - '0')] != msg.data[0]) {
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	3301      	adds	r3, #1
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	3b30      	subs	r3, #48	; 0x30
 8005288:	461a      	mov	r2, r3
 800528a:	4b4c      	ldr	r3, [pc, #304]	; (80053bc <_Z13cake_callbackRKN8std_msgs6StringE+0x24c>)
 800528c:	5c9a      	ldrb	r2, [r3, r2]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d017      	beq.n	80052c8 <_Z13cake_callbackRKN8std_msgs6StringE+0x158>
			p_bool = 0;
 8005298:	4b4a      	ldr	r3, [pc, #296]	; (80053c4 <_Z13cake_callbackRKN8std_msgs6StringE+0x254>)
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	dc0f      	bgt.n	80052c8 <_Z13cake_callbackRKN8std_msgs6StringE+0x158>
				if (hole[i] == 'p') {
 80052a8:	4a44      	ldr	r2, [pc, #272]	; (80053bc <_Z13cake_callbackRKN8std_msgs6StringE+0x24c>)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4413      	add	r3, r2
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b70      	cmp	r3, #112	; 0x70
 80052b2:	d105      	bne.n	80052c0 <_Z13cake_callbackRKN8std_msgs6StringE+0x150>
					hole[i] = 0;
 80052b4:	4a41      	ldr	r2, [pc, #260]	; (80053bc <_Z13cake_callbackRKN8std_msgs6StringE+0x24c>)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4413      	add	r3, r2
 80052ba:	2200      	movs	r2, #0
 80052bc:	701a      	strb	r2, [r3, #0]
					break;
 80052be:	e003      	b.n	80052c8 <_Z13cake_callbackRKN8std_msgs6StringE+0x158>
			for (int i = 0; i < 4; i++) {
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3301      	adds	r3, #1
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	e7ec      	b.n	80052a2 <_Z13cake_callbackRKN8std_msgs6StringE+0x132>
				}
			}
		}
		hole[(size_t) (msg.data[1] - '0')] = msg.data[0];
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6852      	ldr	r2, [r2, #4]
 80052d0:	3201      	adds	r2, #1
 80052d2:	7812      	ldrb	r2, [r2, #0]
 80052d4:	3a30      	subs	r2, #48	; 0x30
 80052d6:	7819      	ldrb	r1, [r3, #0]
 80052d8:	4b38      	ldr	r3, [pc, #224]	; (80053bc <_Z13cake_callbackRKN8std_msgs6StringE+0x24c>)
 80052da:	5499      	strb	r1, [r3, r2]
		temp_pub = 0;
 80052dc:	4b3a      	ldr	r3, [pc, #232]	; (80053c8 <_Z13cake_callbackRKN8std_msgs6StringE+0x258>)
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]
//		mission_array[(size_t) (msg.data[1] - '0')] = 1;
		if (msg.data[0] == 'b' && b_bool == 0) {
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b62      	cmp	r3, #98	; 0x62
 80052ea:	d106      	bne.n	80052fa <_Z13cake_callbackRKN8std_msgs6StringE+0x18a>
 80052ec:	4b32      	ldr	r3, [pc, #200]	; (80053b8 <_Z13cake_callbackRKN8std_msgs6StringE+0x248>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d102      	bne.n	80052fa <_Z13cake_callbackRKN8std_msgs6StringE+0x18a>
			b_bool = 1;
 80052f4:	4b30      	ldr	r3, [pc, #192]	; (80053b8 <_Z13cake_callbackRKN8std_msgs6StringE+0x248>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	601a      	str	r2, [r3, #0]

		}

		if (msg.data[0] == 'y' && y_bool == 0) {
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b79      	cmp	r3, #121	; 0x79
 8005302:	d106      	bne.n	8005312 <_Z13cake_callbackRKN8std_msgs6StringE+0x1a2>
 8005304:	4b2e      	ldr	r3, [pc, #184]	; (80053c0 <_Z13cake_callbackRKN8std_msgs6StringE+0x250>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d102      	bne.n	8005312 <_Z13cake_callbackRKN8std_msgs6StringE+0x1a2>
			y_bool = 1;
 800530c:	4b2c      	ldr	r3, [pc, #176]	; (80053c0 <_Z13cake_callbackRKN8std_msgs6StringE+0x250>)
 800530e:	2201      	movs	r2, #1
 8005310:	601a      	str	r2, [r3, #0]

		}

		if (msg.data[0] == 'p' && p_bool == 0) {
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b70      	cmp	r3, #112	; 0x70
 800531a:	f040 80d2 	bne.w	80054c2 <_Z13cake_callbackRKN8std_msgs6StringE+0x352>
 800531e:	4b29      	ldr	r3, [pc, #164]	; (80053c4 <_Z13cake_callbackRKN8std_msgs6StringE+0x254>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	f040 80cd 	bne.w	80054c2 <_Z13cake_callbackRKN8std_msgs6StringE+0x352>
			p_bool = 1;
 8005328:	4b26      	ldr	r3, [pc, #152]	; (80053c4 <_Z13cake_callbackRKN8std_msgs6StringE+0x254>)
 800532a:	2201      	movs	r2, #1
 800532c:	601a      	str	r2, [r3, #0]

		}
 800532e:	e0c8      	b.n	80054c2 <_Z13cake_callbackRKN8std_msgs6StringE+0x352>

	}
	else if (msg.data[0] == 'h') {
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b68      	cmp	r3, #104	; 0x68
 8005338:	d150      	bne.n	80053dc <_Z13cake_callbackRKN8std_msgs6StringE+0x26c>
		if ((msg.data[1] == '0' || msg.data[1] == '3') && h_bool == 0) {
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	3301      	adds	r3, #1
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b30      	cmp	r3, #48	; 0x30
 8005344:	d005      	beq.n	8005352 <_Z13cake_callbackRKN8std_msgs6StringE+0x1e2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	3301      	adds	r3, #1
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b33      	cmp	r3, #51	; 0x33
 8005350:	d10c      	bne.n	800536c <_Z13cake_callbackRKN8std_msgs6StringE+0x1fc>
 8005352:	4b1e      	ldr	r3, [pc, #120]	; (80053cc <_Z13cake_callbackRKN8std_msgs6StringE+0x25c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d108      	bne.n	800536c <_Z13cake_callbackRKN8std_msgs6StringE+0x1fc>
			h_bool = 1;
 800535a:	4b1c      	ldr	r3, [pc, #112]	; (80053cc <_Z13cake_callbackRKN8std_msgs6StringE+0x25c>)
 800535c:	2201      	movs	r2, #1
 800535e:	601a      	str	r2, [r3, #0]
			mission_array[0] = 0;
 8005360:	4b14      	ldr	r3, [pc, #80]	; (80053b4 <_Z13cake_callbackRKN8std_msgs6StringE+0x244>)
 8005362:	2200      	movs	r2, #0
 8005364:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8005366:	4b18      	ldr	r3, [pc, #96]	; (80053c8 <_Z13cake_callbackRKN8std_msgs6StringE+0x258>)
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
		}
		if (msg.data[1] == '1' && homefree == 0) {
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	3301      	adds	r3, #1
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b31      	cmp	r3, #49	; 0x31
 8005376:	d106      	bne.n	8005386 <_Z13cake_callbackRKN8std_msgs6StringE+0x216>
 8005378:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <_Z13cake_callbackRKN8std_msgs6StringE+0x260>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d102      	bne.n	8005386 <_Z13cake_callbackRKN8std_msgs6StringE+0x216>
			pauseHanoi = 1;
 8005380:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <_Z13cake_callbackRKN8std_msgs6StringE+0x264>)
 8005382:	2201      	movs	r2, #1
 8005384:	601a      	str	r2, [r3, #0]
		}
		if (msg.data[1] == '2') {
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	3301      	adds	r3, #1
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b32      	cmp	r3, #50	; 0x32
 8005390:	d102      	bne.n	8005398 <_Z13cake_callbackRKN8std_msgs6StringE+0x228>
			pauseHanoi = 0;
 8005392:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <_Z13cake_callbackRKN8std_msgs6StringE+0x264>)
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
		}
		if (msg.data[1] == '4') {
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	3301      	adds	r3, #1
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b34      	cmp	r3, #52	; 0x34
 80053a2:	f040 808f 	bne.w	80054c4 <_Z13cake_callbackRKN8std_msgs6StringE+0x354>
			transfer_the_order = 1;
 80053a6:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <_Z13cake_callbackRKN8std_msgs6StringE+0x268>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
	else if (msg.data[0] == 'r') {

		putcherry = 1;
	}

}
 80053ac:	e08a      	b.n	80054c4 <_Z13cake_callbackRKN8std_msgs6StringE+0x354>
 80053ae:	bf00      	nop
 80053b0:	20000a28 	.word	0x20000a28
 80053b4:	20001558 	.word	0x20001558
 80053b8:	2000151c 	.word	0x2000151c
 80053bc:	200014e0 	.word	0x200014e0
 80053c0:	20001520 	.word	0x20001520
 80053c4:	20001524 	.word	0x20001524
 80053c8:	20001550 	.word	0x20001550
 80053cc:	20001528 	.word	0x20001528
 80053d0:	20001530 	.word	0x20001530
 80053d4:	2000152c 	.word	0x2000152c
 80053d8:	200015a0 	.word	0x200015a0
	else if (msg.data[0] == 'o') {
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b6f      	cmp	r3, #111	; 0x6f
 80053e4:	d11e      	bne.n	8005424 <_Z13cake_callbackRKN8std_msgs6StringE+0x2b4>
		if (mission_array[(size_t) (msg.data[1] - '0' + 1)] == 1) {
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	3301      	adds	r3, #1
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	3b2f      	subs	r3, #47	; 0x2f
 80053f0:	461a      	mov	r2, r3
 80053f2:	4b37      	ldr	r3, [pc, #220]	; (80054d0 <_Z13cake_callbackRKN8std_msgs6StringE+0x360>)
 80053f4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d163      	bne.n	80054c4 <_Z13cake_callbackRKN8std_msgs6StringE+0x354>
			score_flag[(size_t) (msg.data[1] - '0')] += 1;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	3301      	adds	r3, #1
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	3b30      	subs	r3, #48	; 0x30
 8005406:	461a      	mov	r2, r3
 8005408:	4b32      	ldr	r3, [pc, #200]	; (80054d4 <_Z13cake_callbackRKN8std_msgs6StringE+0x364>)
 800540a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6852      	ldr	r2, [r2, #4]
 8005412:	3201      	adds	r2, #1
 8005414:	7812      	ldrb	r2, [r2, #0]
 8005416:	3a30      	subs	r2, #48	; 0x30
 8005418:	4611      	mov	r1, r2
 800541a:	3301      	adds	r3, #1
 800541c:	4a2d      	ldr	r2, [pc, #180]	; (80054d4 <_Z13cake_callbackRKN8std_msgs6StringE+0x364>)
 800541e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8005422:	e04f      	b.n	80054c4 <_Z13cake_callbackRKN8std_msgs6StringE+0x354>
	else if (msg.data[0] == 'u') {
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b75      	cmp	r3, #117	; 0x75
 800542c:	d106      	bne.n	800543c <_Z13cake_callbackRKN8std_msgs6StringE+0x2cc>
		unload = 1;
 800542e:	4b2a      	ldr	r3, [pc, #168]	; (80054d8 <_Z13cake_callbackRKN8std_msgs6StringE+0x368>)
 8005430:	2201      	movs	r2, #1
 8005432:	601a      	str	r2, [r3, #0]
		unload_temp = 0;
 8005434:	4b29      	ldr	r3, [pc, #164]	; (80054dc <_Z13cake_callbackRKN8std_msgs6StringE+0x36c>)
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
}
 800543a:	e043      	b.n	80054c4 <_Z13cake_callbackRKN8std_msgs6StringE+0x354>
	else if (msg.data[0] == 'd') {
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b64      	cmp	r3, #100	; 0x64
 8005444:	d108      	bne.n	8005458 <_Z13cake_callbackRKN8std_msgs6StringE+0x2e8>
		score_flag[4] += 1;
 8005446:	4b23      	ldr	r3, [pc, #140]	; (80054d4 <_Z13cake_callbackRKN8std_msgs6StringE+0x364>)
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	3301      	adds	r3, #1
 800544c:	4a21      	ldr	r2, [pc, #132]	; (80054d4 <_Z13cake_callbackRKN8std_msgs6StringE+0x364>)
 800544e:	6113      	str	r3, [r2, #16]
		disguise = 1;
 8005450:	4b23      	ldr	r3, [pc, #140]	; (80054e0 <_Z13cake_callbackRKN8std_msgs6StringE+0x370>)
 8005452:	2201      	movs	r2, #1
 8005454:	601a      	str	r2, [r3, #0]
}
 8005456:	e035      	b.n	80054c4 <_Z13cake_callbackRKN8std_msgs6StringE+0x354>
	else if (msg.data[0] == 'f') {
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b66      	cmp	r3, #102	; 0x66
 8005460:	d108      	bne.n	8005474 <_Z13cake_callbackRKN8std_msgs6StringE+0x304>
		score_flag[5] += 1;
 8005462:	4b1c      	ldr	r3, [pc, #112]	; (80054d4 <_Z13cake_callbackRKN8std_msgs6StringE+0x364>)
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	3301      	adds	r3, #1
 8005468:	4a1a      	ldr	r2, [pc, #104]	; (80054d4 <_Z13cake_callbackRKN8std_msgs6StringE+0x364>)
 800546a:	6153      	str	r3, [r2, #20]
		finish = 1;
 800546c:	4b1d      	ldr	r3, [pc, #116]	; (80054e4 <_Z13cake_callbackRKN8std_msgs6StringE+0x374>)
 800546e:	2201      	movs	r2, #1
 8005470:	601a      	str	r2, [r3, #0]
}
 8005472:	e027      	b.n	80054c4 <_Z13cake_callbackRKN8std_msgs6StringE+0x354>
	else if (msg.data[0] == 'A') {
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b41      	cmp	r3, #65	; 0x41
 800547c:	d108      	bne.n	8005490 <_Z13cake_callbackRKN8std_msgs6StringE+0x320>
		score_flag[6] += 1;
 800547e:	4b15      	ldr	r3, [pc, #84]	; (80054d4 <_Z13cake_callbackRKN8std_msgs6StringE+0x364>)
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	3301      	adds	r3, #1
 8005484:	4a13      	ldr	r2, [pc, #76]	; (80054d4 <_Z13cake_callbackRKN8std_msgs6StringE+0x364>)
 8005486:	6193      	str	r3, [r2, #24]
		home = 1;
 8005488:	4b17      	ldr	r3, [pc, #92]	; (80054e8 <_Z13cake_callbackRKN8std_msgs6StringE+0x378>)
 800548a:	2201      	movs	r2, #1
 800548c:	601a      	str	r2, [r3, #0]
}
 800548e:	e019      	b.n	80054c4 <_Z13cake_callbackRKN8std_msgs6StringE+0x354>
	else if (msg.data[0] == 't') {
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b74      	cmp	r3, #116	; 0x74
 8005498:	d10a      	bne.n	80054b0 <_Z13cake_callbackRKN8std_msgs6StringE+0x340>
		score_flag[7] += 1;
 800549a:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <_Z13cake_callbackRKN8std_msgs6StringE+0x364>)
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	3301      	adds	r3, #1
 80054a0:	4a0c      	ldr	r2, [pc, #48]	; (80054d4 <_Z13cake_callbackRKN8std_msgs6StringE+0x364>)
 80054a2:	61d3      	str	r3, [r2, #28]
		steal++;
 80054a4:	4b11      	ldr	r3, [pc, #68]	; (80054ec <_Z13cake_callbackRKN8std_msgs6StringE+0x37c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3301      	adds	r3, #1
 80054aa:	4a10      	ldr	r2, [pc, #64]	; (80054ec <_Z13cake_callbackRKN8std_msgs6StringE+0x37c>)
 80054ac:	6013      	str	r3, [r2, #0]
}
 80054ae:	e009      	b.n	80054c4 <_Z13cake_callbackRKN8std_msgs6StringE+0x354>
	else if (msg.data[0] == 'r') {
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b72      	cmp	r3, #114	; 0x72
 80054b8:	d104      	bne.n	80054c4 <_Z13cake_callbackRKN8std_msgs6StringE+0x354>
		putcherry = 1;
 80054ba:	4b0d      	ldr	r3, [pc, #52]	; (80054f0 <_Z13cake_callbackRKN8std_msgs6StringE+0x380>)
 80054bc:	2201      	movs	r2, #1
 80054be:	601a      	str	r2, [r3, #0]
}
 80054c0:	e000      	b.n	80054c4 <_Z13cake_callbackRKN8std_msgs6StringE+0x354>
		}
 80054c2:	bf00      	nop
}
 80054c4:	bf00      	nop
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	20001558 	.word	0x20001558
 80054d4:	200014f4 	.word	0x200014f4
 80054d8:	20001598 	.word	0x20001598
 80054dc:	2000159c 	.word	0x2000159c
 80054e0:	20001588 	.word	0x20001588
 80054e4:	200014ec 	.word	0x200014ec
 80054e8:	2000158c 	.word	0x2000158c
 80054ec:	20001590 	.word	0x20001590
 80054f0:	20001594 	.word	0x20001594

080054f4 <HAL_UART_TxCpltCallback>:
// (2) Create a publisher
ros::Publisher pub("donefullness1", &feedback);
ros::Publisher pub1("lightgate1", &gate);
ros::Publisher pub2("hand_door1", &door);
ros::Publisher pub3("handshakier1", &check);
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 80054fc:	4805      	ldr	r0, [pc, #20]	; (8005514 <HAL_UART_TxCpltCallback+0x20>)
 80054fe:	f000 f98f 	bl	8005820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8005502:	4603      	mov	r3, r0
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff f945 	bl	8004794 <_ZN13STM32Hardware5flushEv>
}
 800550a:	bf00      	nop
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20000ac4 	.word	0x20000ac4

08005518 <HAL_UART_ErrorCallback>:
//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
//	nh.getHardware()->reset_rbuf();
//}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a09      	ldr	r2, [pc, #36]	; (8005548 <HAL_UART_ErrorCallback+0x30>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d10b      	bne.n	8005540 <HAL_UART_ErrorCallback+0x28>
		HAL_UART_DeInit(&huart2);
 8005528:	4807      	ldr	r0, [pc, #28]	; (8005548 <HAL_UART_ErrorCallback+0x30>)
 800552a:	f008 fd0c 	bl	800df46 <HAL_UART_DeInit>
		MX_USART2_UART_Init();
 800552e:	f002 fbd3 	bl	8007cd8 <MX_USART2_UART_Init>
		nh.getHardware()->init();
 8005532:	4806      	ldr	r0, [pc, #24]	; (800554c <HAL_UART_ErrorCallback+0x34>)
 8005534:	f000 f974 	bl	8005820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8005538:	4603      	mov	r3, r0
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff f8e0 	bl	8004700 <_ZN13STM32Hardware4initEv>
	}
}
 8005540:	bf00      	nop
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20001880 	.word	0x20001880
 800554c:	20000ac4 	.word	0x20000ac4

08005550 <pub_to_ros>:

void pub_to_ros() {
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
	// (4) Publish your data
//	feedback.data = (std_msgs::Int16MultiArray::_data_type*) malloc(
//			5 * sizeof(std_msgs::Int16MultiArray::_data_type));
	feedback.data_length = 5;
 8005554:	4b05      	ldr	r3, [pc, #20]	; (800556c <pub_to_ros+0x1c>)
 8005556:	2205      	movs	r2, #5
 8005558:	625a      	str	r2, [r3, #36]	; 0x24
	feedback.data = mission_array;
 800555a:	4b04      	ldr	r3, [pc, #16]	; (800556c <pub_to_ros+0x1c>)
 800555c:	4a04      	ldr	r2, [pc, #16]	; (8005570 <pub_to_ros+0x20>)
 800555e:	62da      	str	r2, [r3, #44]	; 0x2c
//	feedback.data[5] = tower_step;

	pub.publish(&feedback);
 8005560:	4902      	ldr	r1, [pc, #8]	; (800556c <pub_to_ros+0x1c>)
 8005562:	4804      	ldr	r0, [pc, #16]	; (8005574 <pub_to_ros+0x24>)
 8005564:	f7ff f87d 	bl	8004662 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8005568:	bf00      	nop
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20000a2c 	.word	0x20000a2c
 8005570:	20001558 	.word	0x20001558
 8005574:	2000141c 	.word	0x2000141c

08005578 <pub_the_hand_transfer>:
void pub_the_gate() {
	gate.data_length = 3;
	gate.data = rotate_state;
	pub1.publish(&gate);
}
void pub_the_hand_transfer() {
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
	door.data_length = 4;
 800557c:	4b05      	ldr	r3, [pc, #20]	; (8005594 <pub_the_hand_transfer+0x1c>)
 800557e:	2204      	movs	r2, #4
 8005580:	625a      	str	r2, [r3, #36]	; 0x24
	door.data = hand_transfer;
 8005582:	4b04      	ldr	r3, [pc, #16]	; (8005594 <pub_the_hand_transfer+0x1c>)
 8005584:	4a04      	ldr	r2, [pc, #16]	; (8005598 <pub_the_hand_transfer+0x20>)
 8005586:	62da      	str	r2, [r3, #44]	; 0x2c
	pub2.publish(&door);
 8005588:	4902      	ldr	r1, [pc, #8]	; (8005594 <pub_the_hand_transfer+0x1c>)
 800558a:	4804      	ldr	r0, [pc, #16]	; (800559c <pub_the_hand_transfer+0x24>)
 800558c:	f7ff f869 	bl	8004662 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8005590:	bf00      	nop
 8005592:	bd80      	pop	{r7, pc}
 8005594:	20000a8c 	.word	0x20000a8c
 8005598:	20000980 	.word	0x20000980
 800559c:	20001444 	.word	0x20001444

080055a0 <setup>:
void hand_shake() {
	check.data = handshake;
	pub3.publish(&check);
}
void setup(void) {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
	nh.initNode();
 80055a4:	480c      	ldr	r0, [pc, #48]	; (80055d8 <setup+0x38>)
 80055a6:	f000 f947 	bl	8005838 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.subscribe(sub);
 80055aa:	490c      	ldr	r1, [pc, #48]	; (80055dc <setup+0x3c>)
 80055ac:	480a      	ldr	r0, [pc, #40]	; (80055d8 <setup+0x38>)
 80055ae:	f000 f960 	bl	8005872 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_>

	// (3) Init your publisher with roscore
	nh.advertise(pub);
 80055b2:	490b      	ldr	r1, [pc, #44]	; (80055e0 <setup+0x40>)
 80055b4:	4808      	ldr	r0, [pc, #32]	; (80055d8 <setup+0x38>)
 80055b6:	f000 f987 	bl	80058c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(pub1);
 80055ba:	490a      	ldr	r1, [pc, #40]	; (80055e4 <setup+0x44>)
 80055bc:	4806      	ldr	r0, [pc, #24]	; (80055d8 <setup+0x38>)
 80055be:	f000 f983 	bl	80058c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(pub2);
 80055c2:	4909      	ldr	r1, [pc, #36]	; (80055e8 <setup+0x48>)
 80055c4:	4804      	ldr	r0, [pc, #16]	; (80055d8 <setup+0x38>)
 80055c6:	f000 f97f 	bl	80058c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(pub3);
 80055ca:	4908      	ldr	r1, [pc, #32]	; (80055ec <setup+0x4c>)
 80055cc:	4802      	ldr	r0, [pc, #8]	; (80055d8 <setup+0x38>)
 80055ce:	f000 f97b 	bl	80058c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80055d2:	bf00      	nop
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000ac4 	.word	0x20000ac4
 80055dc:	20001400 	.word	0x20001400
 80055e0:	2000141c 	.word	0x2000141c
 80055e4:	20001430 	.word	0x20001430
 80055e8:	20001444 	.word	0x20001444
 80055ec:	20001458 	.word	0x20001458

080055f0 <loop>:
void loop(void) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
	nh.spinOnce();
 80055f4:	4804      	ldr	r0, [pc, #16]	; (8005608 <loop+0x18>)
 80055f6:	f000 f997 	bl	8005928 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	counttry++;
 80055fa:	4b04      	ldr	r3, [pc, #16]	; (800560c <loop+0x1c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3301      	adds	r3, #1
 8005600:	4a02      	ldr	r2, [pc, #8]	; (800560c <loop+0x1c>)
 8005602:	6013      	str	r3, [r2, #0]
}
 8005604:	bf00      	nop
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20000ac4 	.word	0x20000ac4
 800560c:	200014e8 	.word	0x200014e8

08005610 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b03      	cmp	r3, #3
 8005622:	d80d      	bhi.n	8005640 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	fa22 f103 	lsr.w	r1, r2, r3
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4413      	add	r3, r2
 8005634:	b2ca      	uxtb	r2, r1
 8005636:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3301      	adds	r3, #1
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	e7ee      	b.n	800561e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8005640:	bf00      	nop
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800565c:	2300      	movs	r3, #0
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b03      	cmp	r3, #3
 8005664:	d811      	bhi.n	800568a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6839      	ldr	r1, [r7, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	440a      	add	r2, r1
 8005670:	7812      	ldrb	r2, [r2, #0]
 8005672:	4611      	mov	r1, r2
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	00d2      	lsls	r2, r2, #3
 8005678:	fa01 f202 	lsl.w	r2, r1, r2
 800567c:	431a      	orrs	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3301      	adds	r3, #1
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	e7ea      	b.n	8005660 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800568a:	bf00      	nop
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <_ZN3ros15NodeHandleBase_C1Ev>:

#include "ros/msg.h"

namespace ros {

class NodeHandleBase_ {
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	4a04      	ldr	r2, [pc, #16]	; (80056b4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	08014748 	.word	0x08014748

080056b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

	/*
	 * Setup Functions
	 */
public:
	NodeHandle_() :
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
			configured_(false) {
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7ff ffe8 	bl	8005698 <_ZN3ros15NodeHandleBase_C1Ev>
 80056c8:	4a3a      	ldr	r2, [pc, #232]	; (80057b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3304      	adds	r3, #4
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fe fff8 	bl	80046c8 <_ZN13STM32HardwareC1Ev>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fce2 	bl	80040b0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>

		for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80056ec:	2300      	movs	r3, #0
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2b18      	cmp	r3, #24
 80056f4:	d80b      	bhi.n	800570e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
			publishers[i] = 0;
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	2200      	movs	r2, #0
 8005704:	605a      	str	r2, [r3, #4]
		for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	3301      	adds	r3, #1
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	e7f0      	b.n	80056f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

		for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800570e:	2300      	movs	r3, #0
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2b18      	cmp	r3, #24
 8005716:	d80a      	bhi.n	800572e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
			subscribers[i] = 0;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005720:	2100      	movs	r1, #0
 8005722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	3301      	adds	r3, #1
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	e7f1      	b.n	8005712 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

		for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005738:	d20a      	bcs.n	8005750 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
			message_in[i] = 0;
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005744:	2200      	movs	r2, #0
 8005746:	701a      	strb	r2, [r3, #0]
		for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3301      	adds	r3, #1
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	e7f0      	b.n	8005732 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

		for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8005750:	2300      	movs	r3, #0
 8005752:	60bb      	str	r3, [r7, #8]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800575a:	d20a      	bcs.n	8005772 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
			message_out[i] = 0;
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	4413      	add	r3, r2
 8005762:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005766:	2200      	movs	r2, #0
 8005768:	701a      	strb	r2, [r3, #0]
		for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	3301      	adds	r3, #1
 800576e:	60bb      	str	r3, [r7, #8]
 8005770:	e7f0      	b.n	8005754 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

		req_param_resp.ints_length = 0;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
		req_param_resp.ints = NULL;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
		req_param_resp.floats_length = 0;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
		req_param_resp.floats = NULL;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
		req_param_resp.ints_length = 0;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
		req_param_resp.ints = NULL;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

		spin_timeout_ = 0;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	}
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4618      	mov	r0, r3
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	080146bc 	.word	0x080146bc

080057b8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	4a04      	ldr	r2, [pc, #16]	; (80057d4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4618      	mov	r0, r3
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	08014730 	.word	0x08014730

080057d8 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff ffe5 	bl	80057b8 <_ZN3ros11Subscriber_C1Ev>
 80057ee:	4a0b      	ldr	r2, [pc, #44]	; (800581c <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei+0x44>)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	330c      	adds	r3, #12
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff fc1d 	bl	8005038 <_ZN8std_msgs6StringC1Ev>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	615a      	str	r2, [r3, #20]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	609a      	str	r2, [r3, #8]
  };
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	080146a4 	.word	0x080146a4

08005820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

	Hardware* getHardware() {
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
		return &hardware_;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3304      	adds	r3, #4
	}
 800582c:	4618      	mov	r0, r3
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

	/* Start serial, initialize buffers */
	void initNode() {
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
		hardware_.init();
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3304      	adds	r3, #4
 8005844:	4618      	mov	r0, r3
 8005846:	f7fe ff5b 	bl	8004700 <_ZN13STM32Hardware4initEv>
		mode_ = 0;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
		bytes_ = 0;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
		index_ = 0;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		topic_ = 0;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
	}
 800586a:	bf00      	nop
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_>:
		return false;
	}

	/* Register a new subscriber */
	template<typename SubscriberT>
	bool subscribe(SubscriberT &s) {
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]
		for (int i = 0; i < MAX_SUBSCRIBERS; i++) {
 800587c:	2300      	movs	r3, #0
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b18      	cmp	r3, #24
 8005884:	dc19      	bgt.n	80058ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_+0x48>
			if (subscribers[i] == 0) // empty slot
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800588e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10d      	bne.n	80058b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_+0x40>
					{
				subscribers[i] = static_cast<Subscriber_*>(&s);
 8005896:	6839      	ldr	r1, [r7, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	f202 2222 	addw	r2, r2, #546	; 0x222
 80058a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				s.id_ = i + 100;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	605a      	str	r2, [r3, #4]
				return true;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e004      	b.n	80058bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_+0x4a>
		for (int i = 0; i < MAX_SUBSCRIBERS; i++) {
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3301      	adds	r3, #1
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	e7e2      	b.n	8005880 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_+0xe>
			}
		}
		return false;
 80058ba:	2300      	movs	r3, #0
	}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
	bool advertise(Publisher &p) {
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
		for (int i = 0; i < MAX_PUBLISHERS; i++) {
 80058d2:	2300      	movs	r3, #0
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b18      	cmp	r3, #24
 80058da:	dc1e      	bgt.n	800591a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
			if (publishers[i] == 0) // empty slot
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d111      	bne.n	8005912 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
				publishers[i] = &p;
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	605a      	str	r2, [r3, #4]
				p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	609a      	str	r2, [r3, #8]
				p.nh_ = this;
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	60da      	str	r2, [r3, #12]
				return true;
 800590e:	2301      	movs	r3, #1
 8005910:	e004      	b.n	800591c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
		for (int i = 0; i < MAX_PUBLISHERS; i++) {
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3301      	adds	r3, #1
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	e7dd      	b.n	80058d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
		return false;
 800591a:	2300      	movs	r3, #0
	}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
	virtual int spinOnce() {
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
		uint32_t c_time = hardware_.time();
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3304      	adds	r3, #4
 8005934:	4618      	mov	r0, r3
 8005936:	f7fe ffd1 	bl	80048dc <_ZN13STM32Hardware4timeEv>
 800593a:	60f8      	str	r0, [r7, #12]
		if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200)) {
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	f640 0298 	movw	r2, #2200	; 0x898
 800594a:	4293      	cmp	r3, r2
 800594c:	d903      	bls.n	8005956 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
			configured_ = false;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
		if (mode_ != MODE_FIRST_FF) {
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800595c:	2b00      	cmp	r3, #0
 800595e:	d009      	beq.n	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
			if (c_time > last_msg_timeout_time) {
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	429a      	cmp	r2, r3
 800596a:	d903      	bls.n	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
				mode_ = MODE_FIRST_FF;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
			if (spin_timeout_ > 0) {
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800597a:	2b00      	cmp	r3, #0
 800597c:	d014      	beq.n	80059a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
				if ((hardware_.time() - c_time) > spin_timeout_) {
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	3304      	adds	r3, #4
 8005982:	4618      	mov	r0, r3
 8005984:	f7fe ffaa 	bl	80048dc <_ZN13STM32Hardware4timeEv>
 8005988:	4602      	mov	r2, r0
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1ad2      	subs	r2, r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005994:	429a      	cmp	r2, r3
 8005996:	bf8c      	ite	hi
 8005998:	2301      	movhi	r3, #1
 800599a:	2300      	movls	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
					return SPIN_TIMEOUT;
 80059a2:	f06f 0301 	mvn.w	r3, #1
 80059a6:	e192      	b.n	8005cce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a6>
			int data = hardware_.read();
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3304      	adds	r3, #4
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fe fec3 	bl	8004738 <_ZN13STM32Hardware4readEv>
 80059b2:	60b8      	str	r0, [r7, #8]
			if (data < 0)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f2c0 8173 	blt.w	8005ca2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37a>
			checksum_ += data;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	441a      	add	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
			if (mode_ == MODE_MESSAGE) /* message data being recieved */
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80059d2:	2b07      	cmp	r3, #7
 80059d4:	d11e      	bne.n	8005a14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
				message_in[index_++] = data;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80059dc:	1c59      	adds	r1, r3, #1
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	b2d1      	uxtb	r1, r2
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	4413      	add	r3, r2
 80059ec:	460a      	mov	r2, r1
 80059ee:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
				bytes_--;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80059f8:	1e5a      	subs	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
				if (bytes_ == 0) /* is message complete? if so, checksum */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1b4      	bne.n	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
					mode_ = MODE_MSG_CHECKSUM;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2208      	movs	r2, #8
 8005a0e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005a12:	e7af      	b.n	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
			else if (mode_ == MODE_FIRST_FF) {
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d127      	bne.n	8005a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x146>
				if (data == 0xff) {
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2bff      	cmp	r3, #255	; 0xff
 8005a22:	d10d      	bne.n	8005a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
					mode_++;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
					last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f103 0214 	add.w	r2, r3, #20
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8005a3e:	e799      	b.n	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
				else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000)) {
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fe ff49 	bl	80048dc <_ZN13STM32Hardware4timeEv>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a54:	bf8c      	ite	hi
 8005a56:	2301      	movhi	r3, #1
 8005a58:	2300      	movls	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d089      	beq.n	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
					configured_ = false;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
					return SPIN_TIMEOUT;
 8005a68:	f06f 0301 	mvn.w	r3, #1
 8005a6c:	e12f      	b.n	8005cce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a6>
			else if (mode_ == MODE_PROTOCOL_VER) {
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d118      	bne.n	8005aaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x182>
				if (data == PROTOCOL_VER) {
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2bfe      	cmp	r3, #254	; 0xfe
 8005a7c:	d107      	bne.n	8005a8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x166>
					mode_++;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005a8c:	e772      	b.n	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
					mode_ = MODE_FIRST_FF;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
					if (configured_ == false)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f47f af69 	bne.w	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
						requestSyncTime(); /* send a msg back showing our protocol version */
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f917 	bl	8005cd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8005aa8:	e764      	b.n	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
			else if (mode_ == MODE_SIZE_L) /* bottom half of message size */
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d113      	bne.n	8005adc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b4>
				bytes_ = data;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
				index_ = 0;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
				mode_++;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
				checksum_ = data; /* first byte for calculating size checksum */
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8005ada:	e74b      	b.n	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
			else if (mode_ == MODE_SIZE_H) /* top half of message size */
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d110      	bne.n	8005b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e0>
				bytes_ += data << 8;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	021b      	lsls	r3, r3, #8
 8005af0:	441a      	add	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
				mode_++;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005b06:	e735      	b.n	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
			else if (mode_ == MODE_SIZE_CHECKSUM) {
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d116      	bne.n	8005b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x218>
				if ((checksum_ % 256) == 255)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8005b18:	425a      	negs	r2, r3
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	bf58      	it	pl
 8005b20:	4253      	negpl	r3, r2
 8005b22:	2bff      	cmp	r3, #255	; 0xff
 8005b24:	d107      	bne.n	8005b36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20e>
					mode_++;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005b34:	e71e      	b.n	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
					mode_ = MODE_FIRST_FF; /* Abandon the frame if the msg len is wrong */
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005b3e:	e719      	b.n	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
			else if (mode_ == MODE_TOPIC_L) /* bottom half of topic id */
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005b46:	2b05      	cmp	r3, #5
 8005b48:	d10f      	bne.n	8005b6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
				topic_ = data;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
				mode_++;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
				checksum_ = data; /* first byte included in checksum */
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8005b68:	e704      	b.n	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
			else if (mode_ == MODE_TOPIC_H) /* top half of topic id */
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005b70:	2b06      	cmp	r3, #6
 8005b72:	d117      	bne.n	8005ba4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27c>
				topic_ += data << 8;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	441a      	add	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
				mode_ = MODE_MESSAGE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2207      	movs	r2, #7
 8005b8a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
				if (bytes_ == 0)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f47f aeed 	bne.w	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
					mode_ = MODE_MSG_CHECKSUM;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2208      	movs	r2, #8
 8005b9e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005ba2:	e6e7      	b.n	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
			else if (mode_ == MODE_MSG_CHECKSUM) /* do checksum */
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005baa:	2b08      	cmp	r3, #8
 8005bac:	f47f aee2 	bne.w	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
				mode_ = MODE_FIRST_FF;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
				if ((checksum_ % 256) == 255) {
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8005bbe:	425a      	negs	r2, r3
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	b2d2      	uxtb	r2, r2
 8005bc4:	bf58      	it	pl
 8005bc6:	4253      	negpl	r3, r2
 8005bc8:	2bff      	cmp	r3, #255	; 0xff
 8005bca:	f47f aed3 	bne.w	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
					if (topic_ == TopicInfo::ID_PUBLISHER) {
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d110      	bne.n	8005bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d2>
						requestSyncTime();
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f87c 	bl	8005cd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
						negotiateTopics();
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f897 	bl	8005d12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
						last_sync_time = c_time;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
						last_sync_receive_time = c_time;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
						return SPIN_ERR;
 8005bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf8:	e069      	b.n	8005cce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a6>
					else if (topic_ == TopicInfo::ID_TIME) {
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005c00:	2b0a      	cmp	r3, #10
 8005c02:	d107      	bne.n	8005c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ec>
						syncTime(message_in);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f95f 	bl	8005ed0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8005c12:	e6af      	b.n	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
					else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST) {
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005c1a:	2b06      	cmp	r3, #6
 8005c1c:	d10e      	bne.n	8005c3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x314>
						req_param_resp.deserialize(message_in);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	f7fe fb74 	bl	800431a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
						param_recieved = true;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8005c3a:	e69b      	b.n	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
					else if (topic_ == TopicInfo::ID_TX_STOP) {
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005c42:	2b0b      	cmp	r3, #11
 8005c44:	d104      	bne.n	8005c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x328>
						configured_ = false;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8005c4e:	e691      	b.n	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
						if (subscribers[topic_ - 100])
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005c56:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f43f ae85 	beq.w	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
							subscribers[topic_ - 100]->callback(message_in);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005c70:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005c7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005c84:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	4798      	blx	r3
		while (true) {
 8005ca0:	e668      	b.n	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
				break;
 8005ca2:	bf00      	nop
		if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500))) {
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00e      	beq.n	8005ccc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005cbc:	d906      	bls.n	8005ccc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
			requestSyncTime();
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f809 	bl	8005cd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
			last_sync_time = c_time;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
		return SPIN_OK;
 8005ccc:	2300      	movs	r3, #0
	}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
	void requestSyncTime() {
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b086      	sub	sp, #24
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
		std_msgs::Time t;
 8005cde:	f107 030c 	add.w	r3, r7, #12
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fd fe80 	bl	80039e8 <_ZN8std_msgs4TimeC1Ev>
		publish(TopicInfo::ID_TIME, &t);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f107 020c 	add.w	r2, r7, #12
 8005cf2:	210a      	movs	r1, #10
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	4798      	blx	r3
		rt_time = hardware_.time();
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fe fded 	bl	80048dc <_ZN13STM32Hardware4timeEv>
 8005d02:	4602      	mov	r2, r0
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	}
 8005d0a:	bf00      	nop
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
			}
		}
		return false;
	}

	void negotiateTopics() {
 8005d12:	b590      	push	{r4, r7, lr}
 8005d14:	b08b      	sub	sp, #44	; 0x2c
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
		rosserial_msgs::TopicInfo ti;
 8005d1a:	f107 030c 	add.w	r3, r7, #12
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fd ff52 	bl	8003bc8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
		int i;
		for (i = 0; i < MAX_PUBLISHERS; i++) {
 8005d24:	2300      	movs	r3, #0
 8005d26:	627b      	str	r3, [r7, #36]	; 0x24
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	2b18      	cmp	r3, #24
 8005d2c:	dc63      	bgt.n	8005df6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
			if (publishers[i] != 0) // non-empty slot
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d056      	beq.n	8005dee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
					{
				ti.topic_id = publishers[i]->id_;
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	823b      	strh	r3, [r7, #16]
				ti.topic_name = (char*) publishers[i]->topic_;
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	617b      	str	r3, [r7, #20]
				ti.message_type = (char*) publishers[i]->msg_->getType();
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	6859      	ldr	r1, [r3, #4]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3308      	adds	r3, #8
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	4798      	blx	r3
 8005d90:	4603      	mov	r3, r0
 8005d92:	61bb      	str	r3, [r7, #24]
				ti.md5sum = (char*) publishers[i]->msg_->getMD5();
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	6859      	ldr	r1, [r3, #4]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	330c      	adds	r3, #12
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4608      	mov	r0, r1
 8005dbc:	4798      	blx	r3
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	61fb      	str	r3, [r7, #28]
				ti.buffer_size = OUTPUT_SIZE;
 8005dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dc6:	623b      	str	r3, [r7, #32]
				publish(publishers[i]->getEndpointType(), &ti);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681c      	ldr	r4, [r3, #0]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fe fc54 	bl	800468a <_ZN3ros9Publisher15getEndpointTypeEv>
 8005de2:	4601      	mov	r1, r0
 8005de4:	f107 030c 	add.w	r3, r7, #12
 8005de8:	461a      	mov	r2, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	47a0      	blx	r4
		for (i = 0; i < MAX_PUBLISHERS; i++) {
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	3301      	adds	r3, #1
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
 8005df4:	e798      	b.n	8005d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
			}
		}
		for (i = 0; i < MAX_SUBSCRIBERS; i++) {
 8005df6:	2300      	movs	r3, #0
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	2b18      	cmp	r3, #24
 8005dfe:	dc5f      	bgt.n	8005ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
			if (subscribers[i] != 0) // non-empty slot
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e04:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d053      	beq.n	8005eb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
					{
				ti.topic_id = subscribers[i]->id_;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e14:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	823b      	strh	r3, [r7, #16]
				ti.topic_name = (char*) subscribers[i]->topic_;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e26:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	617b      	str	r3, [r7, #20]
				ti.message_type = (char*) subscribers[i]->getMsgType();
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e36:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005e3a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e42:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4608      	mov	r0, r1
 8005e52:	4798      	blx	r3
 8005e54:	4603      	mov	r3, r0
 8005e56:	61bb      	str	r3, [r7, #24]
				ti.md5sum = (char*) subscribers[i]->getMsgMD5();
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e68:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	330c      	adds	r3, #12
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4608      	mov	r0, r1
 8005e78:	4798      	blx	r3
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	61fb      	str	r3, [r7, #28]
				ti.buffer_size = INPUT_SIZE;
 8005e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e82:	623b      	str	r3, [r7, #32]
				publish(subscribers[i]->getEndpointType(), &ti);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681c      	ldr	r4, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e8e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005e92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e9a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	4798      	blx	r3
 8005eac:	4601      	mov	r1, r0
 8005eae:	f107 030c 	add.w	r3, r7, #12
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	47a0      	blx	r4
		for (i = 0; i < MAX_SUBSCRIBERS; i++) {
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	3301      	adds	r3, #1
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ebe:	e79c      	b.n	8005dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
			}
		}
		configured_ = true;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
	}
 8005ec8:	bf00      	nop
 8005eca:	372c      	adds	r7, #44	; 0x2c
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd90      	pop	{r4, r7, pc}

08005ed0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
	void syncTime(uint8_t *data) {
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
		std_msgs::Time t;
 8005eda:	f107 0308 	add.w	r3, r7, #8
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fd fd82 	bl	80039e8 <_ZN8std_msgs4TimeC1Ev>
		uint32_t offset = hardware_.time() - rt_time;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fe fcf7 	bl	80048dc <_ZN13STM32Hardware4timeEv>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	617b      	str	r3, [r7, #20]
		t.deserialize(data);
 8005efa:	f107 0308 	add.w	r3, r7, #8
 8005efe:	6839      	ldr	r1, [r7, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fd fde1 	bl	8003ac8 <_ZN8std_msgs4Time11deserializeEPh>
		t.data.sec += offset / 1000;
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	4915      	ldr	r1, [pc, #84]	; (8005f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8005f0c:	fba1 1303 	umull	r1, r3, r1, r3
 8005f10:	099b      	lsrs	r3, r3, #6
 8005f12:	4413      	add	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]
		t.data.nsec += (offset % 1000) * 1000000UL;
 8005f16:	6939      	ldr	r1, [r7, #16]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4b11      	ldr	r3, [pc, #68]	; (8005f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8005f1c:	fba3 0302 	umull	r0, r3, r3, r2
 8005f20:	099b      	lsrs	r3, r3, #6
 8005f22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f26:	fb00 f303 	mul.w	r3, r0, r3
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	4a0d      	ldr	r2, [pc, #52]	; (8005f64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8005f2e:	fb02 f303 	mul.w	r3, r2, r3
 8005f32:	440b      	add	r3, r1
 8005f34:	613b      	str	r3, [r7, #16]
		this->setNow(t.data);
 8005f36:	f107 0308 	add.w	r3, r7, #8
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f8a6 	bl	8006090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
		last_sync_receive_time = hardware_.time();
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3304      	adds	r3, #4
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fe fcc7 	bl	80048dc <_ZN13STM32Hardware4timeEv>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
	}
 8005f56:	bf00      	nop
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	10624dd3 	.word	0x10624dd3
 8005f64:	000f4240 	.word	0x000f4240

08005f68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

	virtual int publish(int id, const Msg *msg) {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
		if (id >= 100 && !configured_)
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2b63      	cmp	r3, #99	; 0x63
 8005f78:	dd09      	ble.n	8005f8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8005f80:	f083 0301 	eor.w	r3, r3, #1
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
			return 0;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e079      	b.n	8006082 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

		/* serialize message */
		int l = msg->serialize(message_out + 7);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8005f9a:	3207      	adds	r2, #7
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	4798      	blx	r3
 8005fa2:	6178      	str	r0, [r7, #20]

		/* setup the header */
		message_out[0] = 0xff;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	22ff      	movs	r2, #255	; 0xff
 8005fa8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
		message_out[1] = PROTOCOL_VER;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	22fe      	movs	r2, #254	; 0xfe
 8005fb0:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
		message_out[2] = (uint8_t) ((uint16_t) l & 255);
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
		message_out[3] = (uint8_t) ((uint16_t) l >> 8);
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	0a1b      	lsrs	r3, r3, #8
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
		message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8005fda:	4413      	add	r3, r2
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	43db      	mvns	r3, r3
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
		message_out[5] = (uint8_t) ((int16_t) id & 255);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
		message_out[6] = (uint8_t) ((int16_t) id >> 8);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	b21b      	sxth	r3, r3
 8005ff6:	121b      	asrs	r3, r3, #8
 8005ff8:	b21b      	sxth	r3, r3
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

		/* calculate checksum */
		int chk = 0;
 8006002:	2300      	movs	r3, #0
 8006004:	61fb      	str	r3, [r7, #28]
		for (int i = 5; i < l + 7; i++)
 8006006:	2305      	movs	r3, #5
 8006008:	61bb      	str	r3, [r7, #24]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	3306      	adds	r3, #6
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	429a      	cmp	r2, r3
 8006012:	dc0d      	bgt.n	8006030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
			chk += message_out[i];
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	4413      	add	r3, r2
 800601a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	4413      	add	r3, r2
 8006026:	61fb      	str	r3, [r7, #28]
		for (int i = 5; i < l + 7; i++)
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	3301      	adds	r3, #1
 800602c:	61bb      	str	r3, [r7, #24]
 800602e:	e7ec      	b.n	800600a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
		l += 7;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	3307      	adds	r3, #7
 8006034:	617b      	str	r3, [r7, #20]
		message_out[l++] = 255 - (chk % 256);
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	425a      	negs	r2, r3
 800603a:	b2db      	uxtb	r3, r3
 800603c:	b2d2      	uxtb	r2, r2
 800603e:	bf58      	it	pl
 8006040:	4253      	negpl	r3, r2
 8006042:	b2da      	uxtb	r2, r3
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	1c59      	adds	r1, r3, #1
 8006048:	6179      	str	r1, [r7, #20]
 800604a:	43d2      	mvns	r2, r2
 800604c:	b2d1      	uxtb	r1, r2
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4413      	add	r3, r2
 8006052:	460a      	mov	r2, r1
 8006054:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

		if (l <= OUTPUT_SIZE) {
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800605e:	dc0a      	bgt.n	8006076 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
			hardware_.write(message_out, l);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	1d18      	adds	r0, r3, #4
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	4619      	mov	r1, r3
 800606e:	f7fe fbef 	bl	8004850 <_ZN13STM32Hardware5writeEPhi>
			return l;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	e005      	b.n	8006082 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
		}
		else {
			logerror(
 8006076:	4905      	ldr	r1, [pc, #20]	; (800608c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 f849 	bl	8006110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
					"Message from device dropped: message larger than buffer.");
			return -1;
 800607e:	f04f 33ff 	mov.w	r3, #4294967295
		}
	}
 8006082:	4618      	mov	r0, r3
 8006084:	3720      	adds	r7, #32
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	080145e0 	.word	0x080145e0

08006090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
	void setNow(Time &new_now) {
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
		uint32_t ms = hardware_.time();
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3304      	adds	r3, #4
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fe fc1c 	bl	80048dc <_ZN13STM32Hardware4timeEv>
 80060a4:	60f8      	str	r0, [r7, #12]
		sec_offset = new_now.sec - ms / 1000 - 1;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4915      	ldr	r1, [pc, #84]	; (8006104 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80060ae:	fba1 1303 	umull	r1, r3, r1, r3
 80060b2:	099b      	lsrs	r3, r3, #6
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	1e5a      	subs	r2, r3, #1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	6859      	ldr	r1, [r3, #4]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4b0f      	ldr	r3, [pc, #60]	; (8006104 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80060c6:	fba3 0302 	umull	r0, r3, r3, r2
 80060ca:	099b      	lsrs	r3, r3, #6
 80060cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80060d0:	fb00 f303 	mul.w	r3, r0, r3
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	4a0c      	ldr	r2, [pc, #48]	; (8006108 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80060d8:	fb02 f303 	mul.w	r3, r2, r3
 80060dc:	1aca      	subs	r2, r1, r3
 80060de:	4b0b      	ldr	r3, [pc, #44]	; (800610c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80060e0:	4413      	add	r3, r2
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
		normalizeSecNSec(sec_offset, nsec_offset);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80060f4:	4619      	mov	r1, r3
 80060f6:	4610      	mov	r0, r2
 80060f8:	f7fa fe10 	bl	8000d1c <_ZN3ros16normalizeSecNSecERmS0_>
	}
 80060fc:	bf00      	nop
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	10624dd3 	.word	0x10624dd3
 8006108:	000f4240 	.word	0x000f4240
 800610c:	3b9aca00 	.word	0x3b9aca00

08006110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
		log(rosserial_msgs::Log::INFO, msg);
	}
	void logwarn(const char *msg) {
		log(rosserial_msgs::Log::WARN, msg);
	}
	void logerror(const char *msg) {
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
		log(rosserial_msgs::Log::ERROR, msg);
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	2103      	movs	r1, #3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f804 	bl	800612c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
	}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
	void log(char byte, const char *msg) {
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	460b      	mov	r3, r1
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	72fb      	strb	r3, [r7, #11]
		rosserial_msgs::Log l;
 800613a:	f107 0314 	add.w	r3, r7, #20
 800613e:	4618      	mov	r0, r3
 8006140:	f7fd ff06 	bl	8003f50 <_ZN14rosserial_msgs3LogC1Ev>
		l.level = byte;
 8006144:	7afb      	ldrb	r3, [r7, #11]
 8006146:	763b      	strb	r3, [r7, #24]
		l.msg = (char*) msg;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	61fb      	str	r3, [r7, #28]
		publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f107 0214 	add.w	r2, r7, #20
 8006156:	2107      	movs	r1, #7
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	4798      	blx	r3
	}
 800615c:	bf00      	nop
 800615e:	3720      	adds	r7, #32
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <_Z41__static_initialization_and_destruction_0ii>:
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d131      	bne.n	80061d8 <_Z41__static_initialization_and_destruction_0ii+0x74>
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800617a:	4293      	cmp	r3, r2
 800617c:	d12c      	bne.n	80061d8 <_Z41__static_initialization_and_destruction_0ii+0x74>
std_msgs::Int16MultiArray feedback;
 800617e:	4818      	ldr	r0, [pc, #96]	; (80061e0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8006180:	f7fe fe3c 	bl	8004dfc <_ZN8std_msgs15Int16MultiArrayC1Ev>
std_msgs::Int16MultiArray gate;
 8006184:	4817      	ldr	r0, [pc, #92]	; (80061e4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006186:	f7fe fe39 	bl	8004dfc <_ZN8std_msgs15Int16MultiArrayC1Ev>
std_msgs::Int16MultiArray door;
 800618a:	4817      	ldr	r0, [pc, #92]	; (80061e8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800618c:	f7fe fe36 	bl	8004dfc <_ZN8std_msgs15Int16MultiArrayC1Ev>
std_msgs::String check;
 8006190:	4816      	ldr	r0, [pc, #88]	; (80061ec <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006192:	f7fe ff51 	bl	8005038 <_ZN8std_msgs6StringC1Ev>
ros::NodeHandle nh;
 8006196:	4816      	ldr	r0, [pc, #88]	; (80061f0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006198:	f7ff fa8e 	bl	80056b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::String> sub("mission1", cake_callback);
 800619c:	2301      	movs	r3, #1
 800619e:	4a15      	ldr	r2, [pc, #84]	; (80061f4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80061a0:	4915      	ldr	r1, [pc, #84]	; (80061f8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80061a2:	4816      	ldr	r0, [pc, #88]	; (80061fc <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80061a4:	f7ff fb18 	bl	80057d8 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub("donefullness1", &feedback);
 80061a8:	2300      	movs	r3, #0
 80061aa:	4a0d      	ldr	r2, [pc, #52]	; (80061e0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80061ac:	4914      	ldr	r1, [pc, #80]	; (8006200 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80061ae:	4815      	ldr	r0, [pc, #84]	; (8006204 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80061b0:	f7fe fa40 	bl	8004634 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub1("lightgate1", &gate);
 80061b4:	2300      	movs	r3, #0
 80061b6:	4a0b      	ldr	r2, [pc, #44]	; (80061e4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80061b8:	4913      	ldr	r1, [pc, #76]	; (8006208 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80061ba:	4814      	ldr	r0, [pc, #80]	; (800620c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80061bc:	f7fe fa3a 	bl	8004634 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub2("hand_door1", &door);
 80061c0:	2300      	movs	r3, #0
 80061c2:	4a09      	ldr	r2, [pc, #36]	; (80061e8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80061c4:	4912      	ldr	r1, [pc, #72]	; (8006210 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80061c6:	4813      	ldr	r0, [pc, #76]	; (8006214 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80061c8:	f7fe fa34 	bl	8004634 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub3("handshakier1", &check);
 80061cc:	2300      	movs	r3, #0
 80061ce:	4a07      	ldr	r2, [pc, #28]	; (80061ec <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80061d0:	4911      	ldr	r1, [pc, #68]	; (8006218 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80061d2:	4812      	ldr	r0, [pc, #72]	; (800621c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80061d4:	f7fe fa2e 	bl	8004634 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80061d8:	bf00      	nop
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	20000a2c 	.word	0x20000a2c
 80061e4:	20000a5c 	.word	0x20000a5c
 80061e8:	20000a8c 	.word	0x20000a8c
 80061ec:	20000abc 	.word	0x20000abc
 80061f0:	20000ac4 	.word	0x20000ac4
 80061f4:	08005171 	.word	0x08005171
 80061f8:	0801461c 	.word	0x0801461c
 80061fc:	20001400 	.word	0x20001400
 8006200:	08014628 	.word	0x08014628
 8006204:	2000141c 	.word	0x2000141c
 8006208:	08014638 	.word	0x08014638
 800620c:	20001430 	.word	0x20001430
 8006210:	08014644 	.word	0x08014644
 8006214:	20001444 	.word	0x20001444
 8006218:	08014650 	.word	0x08014650
 800621c:	20001458 	.word	0x20001458

08006220 <_ZN3ros10SubscriberIN8std_msgs6StringEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	330c      	adds	r3, #12
 800622e:	6839      	ldr	r1, [r7, #0]
 8006230:	4618      	mov	r0, r3
 8006232:	f7fe ff42 	bl	80050ba <_ZN8std_msgs6String11deserializeEPh>
    this->cb_(msg);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	320c      	adds	r2, #12
 800623e:	4610      	mov	r0, r2
 8006240:	4798      	blx	r3
  }
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <_ZN3ros10SubscriberIN8std_msgs6StringEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699b      	ldr	r3, [r3, #24]
  }
 8006256:	4618      	mov	r0, r3
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <_ZN3ros10SubscriberIN8std_msgs6StringEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8006262:	b580      	push	{r7, lr}
 8006264:	b082      	sub	sp, #8
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	330c      	adds	r3, #12
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe ff62 	bl	8005138 <_ZN8std_msgs6String7getTypeEv>
 8006274:	4603      	mov	r3, r0
  }
 8006276:	4618      	mov	r0, r3
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <_ZN3ros10SubscriberIN8std_msgs6StringEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800627e:	b580      	push	{r7, lr}
 8006280:	b082      	sub	sp, #8
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	330c      	adds	r3, #12
 800628a:	4618      	mov	r0, r3
 800628c:	f7fe ff62 	bl	8005154 <_ZN8std_msgs6String6getMD5Ev>
 8006290:	4603      	mov	r3, r0
  }
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
	virtual bool connected() {
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
		return configured_;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
	}
 80062a8:	4618      	mov	r0, r3
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <_GLOBAL__sub_I_handshake>:
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80062bc:	2001      	movs	r0, #1
 80062be:	f7ff ff51 	bl	8006164 <_Z41__static_initialization_and_destruction_0ii>
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <mainrun>:
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart3;
extern ADC_HandleTypeDef hadc1;
extern DMA_HandleTypeDef hdma_adc1;

void mainrun() {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Step1_EN_Port, Step1_EN_Pin, GPIO_PIN_RESET);
 80062c8:	2200      	movs	r2, #0
 80062ca:	2108      	movs	r1, #8
 80062cc:	4887      	ldr	r0, [pc, #540]	; (80064ec <mainrun+0x228>)
 80062ce:	f003 fadf 	bl	8009890 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim6); //clock for step1
 80062d2:	4887      	ldr	r0, [pc, #540]	; (80064f0 <mainrun+0x22c>)
 80062d4:	f006 fdb6 	bl	800ce44 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7); //clock for feedback
 80062d8:	4886      	ldr	r0, [pc, #536]	; (80064f4 <mainrun+0x230>)
 80062da:	f006 fdb3 	bl	800ce44 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 80062de:	4886      	ldr	r0, [pc, #536]	; (80064f8 <mainrun+0x234>)
 80062e0:	f006 fdb0 	bl	800ce44 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10); //clock for communicate
 80062e4:	4885      	ldr	r0, [pc, #532]	; (80064fc <mainrun+0x238>)
 80062e6:	f006 fdad 	bl	800ce44 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80062ea:	4885      	ldr	r0, [pc, #532]	; (8006500 <mainrun+0x23c>)
 80062ec:	f006 fdaa 	bl	800ce44 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); //for pump1 PA0
 80062f0:	210c      	movs	r1, #12
 80062f2:	4884      	ldr	r0, [pc, #528]	; (8006504 <mainrun+0x240>)
 80062f4:	f006 fe66 	bl	800cfc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //for pump1 PA0
 80062f8:	2100      	movs	r1, #0
 80062fa:	4883      	ldr	r0, [pc, #524]	; (8006508 <mainrun+0x244>)
 80062fc:	f006 fe62 	bl	800cfc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //for valve1 PA1
 8006300:	2104      	movs	r1, #4
 8006302:	4881      	ldr	r0, [pc, #516]	; (8006508 <mainrun+0x244>)
 8006304:	f006 fe5e 	bl	800cfc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for pump4 PC6
 8006308:	2100      	movs	r1, #0
 800630a:	4880      	ldr	r0, [pc, #512]	; (800650c <mainrun+0x248>)
 800630c:	f006 fe5a 	bl	800cfc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for valve4 PC7
 8006310:	2104      	movs	r1, #4
 8006312:	487e      	ldr	r0, [pc, #504]	; (800650c <mainrun+0x248>)
 8006314:	f006 fe56 	bl	800cfc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //for pump3 PC8
 8006318:	2108      	movs	r1, #8
 800631a:	487c      	ldr	r0, [pc, #496]	; (800650c <mainrun+0x248>)
 800631c:	f006 fe52 	bl	800cfc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); //for valve3 Pc9
 8006320:	210c      	movs	r1, #12
 8006322:	487a      	ldr	r0, [pc, #488]	; (800650c <mainrun+0x248>)
 8006324:	f006 fe4e 	bl	800cfc4 <HAL_TIM_PWM_Start>
//	hole[1] = 'p';
//	hole[2] = 'y';
//	hole[3] = 0;
	//initialization all the mosfet
	//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_cake, 3);
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8006328:	4b76      	ldr	r3, [pc, #472]	; (8006504 <mainrun+0x240>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2200      	movs	r2, #0
 800632e:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8006330:	4b75      	ldr	r3, [pc, #468]	; (8006508 <mainrun+0x244>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2200      	movs	r2, #0
 8006336:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8006338:	4b73      	ldr	r3, [pc, #460]	; (8006508 <mainrun+0x244>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2200      	movs	r2, #0
 800633e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8006340:	4b72      	ldr	r3, [pc, #456]	; (800650c <mainrun+0x248>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2200      	movs	r2, #0
 8006346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8006348:	4b70      	ldr	r3, [pc, #448]	; (800650c <mainrun+0x248>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2200      	movs	r2, #0
 800634e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8006350:	4b6e      	ldr	r3, [pc, #440]	; (800650c <mainrun+0x248>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2200      	movs	r2, #0
 8006356:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8006358:	4b6c      	ldr	r3, [pc, #432]	; (800650c <mainrun+0x248>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2200      	movs	r2, #0
 800635e:	641a      	str	r2, [r3, #64]	; 0x40
	VL53_Init();
 8006360:	f7fa fd68 	bl	8000e34 <VL53_Init>
	//initialization all the servo
	UART_Send_SetMotorPosition(7, 1250, 300);
 8006364:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006368:	f240 41e2 	movw	r1, #1250	; 0x4e2
 800636c:	2007      	movs	r0, #7
 800636e:	f7fa fd1d 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(4, 1250, 300);
 8006372:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006376:	f240 41e2 	movw	r1, #1250	; 0x4e2
 800637a:	2004      	movs	r0, #4
 800637c:	f7fa fd16 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(3, 1250, 300);
 8006380:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006384:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8006388:	2003      	movs	r0, #3
 800638a:	f7fa fd0f 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(5, 1250, 300);
 800638e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006392:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8006396:	2005      	movs	r0, #5
 8006398:	f7fa fd08 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(6, 1000, 300);
 800639c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80063a4:	2006      	movs	r0, #6
 80063a6:	f7fa fd01 	bl	8000dac <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 80063aa:	4b59      	ldr	r3, [pc, #356]	; (8006510 <mainrun+0x24c>)
 80063ac:	2201      	movs	r2, #1
 80063ae:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0) {
 80063b0:	4b57      	ldr	r3, [pc, #348]	; (8006510 <mainrun+0x24c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d000      	beq.n	80063ba <mainrun+0xf6>
 80063b8:	e7fa      	b.n	80063b0 <mainrun+0xec>
			break;
 80063ba:	bf00      	nop
		}

	}
	UART_Send_SetMotorPosition(7, 1350, 300);
 80063bc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063c0:	f240 5146 	movw	r1, #1350	; 0x546
 80063c4:	2007      	movs	r0, #7
 80063c6:	f7fa fcf1 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(4, 1300, 300);
 80063ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063ce:	f240 5114 	movw	r1, #1300	; 0x514
 80063d2:	2004      	movs	r0, #4
 80063d4:	f7fa fcea 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(3, 1300, 300);
 80063d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063dc:	f240 5114 	movw	r1, #1300	; 0x514
 80063e0:	2003      	movs	r0, #3
 80063e2:	f7fa fce3 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(5, 1300, 300);
 80063e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063ea:	f240 5114 	movw	r1, #1300	; 0x514
 80063ee:	2005      	movs	r0, #5
 80063f0:	f7fa fcdc 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(6, 2100, 300);
 80063f4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063f8:	f640 0134 	movw	r1, #2100	; 0x834
 80063fc:	2006      	movs	r0, #6
 80063fe:	f7fa fcd5 	bl	8000dac <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 8006402:	4b43      	ldr	r3, [pc, #268]	; (8006510 <mainrun+0x24c>)
 8006404:	2201      	movs	r2, #1
 8006406:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0) {
 8006408:	4b41      	ldr	r3, [pc, #260]	; (8006510 <mainrun+0x24c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d000      	beq.n	8006412 <mainrun+0x14e>
 8006410:	e7fa      	b.n	8006408 <mainrun+0x144>
			break;
 8006412:	bf00      	nop
		}

	}
	UART_Send_SetMotorPosition(7, 1300, 300);
 8006414:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006418:	f240 5114 	movw	r1, #1300	; 0x514
 800641c:	2007      	movs	r0, #7
 800641e:	f7fa fcc5 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(4, 1250, 300);
 8006422:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006426:	f240 41e2 	movw	r1, #1250	; 0x4e2
 800642a:	2004      	movs	r0, #4
 800642c:	f7fa fcbe 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(3, 1250, 300);
 8006430:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006434:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8006438:	2003      	movs	r0, #3
 800643a:	f7fa fcb7 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(5, 1250, 300);
 800643e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006442:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8006446:	2005      	movs	r0, #5
 8006448:	f7fa fcb0 	bl	8000dac <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(6, 1000, 300);
 800644c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006450:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006454:	2006      	movs	r0, #6
 8006456:	f7fa fca9 	bl	8000dac <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 800645a:	4b2d      	ldr	r3, [pc, #180]	; (8006510 <mainrun+0x24c>)
 800645c:	2201      	movs	r2, #1
 800645e:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0) {
 8006460:	4b2b      	ldr	r3, [pc, #172]	; (8006510 <mainrun+0x24c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d000      	beq.n	800646a <mainrun+0x1a6>
 8006468:	e7fa      	b.n	8006460 <mainrun+0x19c>
			break;
 800646a:	bf00      	nop
		}

	}
	VL53_FirstMeasurement();
 800646c:	f7fa fddc 	bl	8001028 <VL53_FirstMeasurement>
//		}
//		rotate_the_ring(rotate);
//		states = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
//		HAL_Delay(5000);
//		VL53_Update();
		if (servo_delay_temp == 0) {
 8006470:	4b27      	ldr	r3, [pc, #156]	; (8006510 <mainrun+0x24c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	f040 809f 	bne.w	80065b8 <mainrun+0x2f4>

			if (b_bool == 1 && y_bool == 1 && p_bool == 1 && h_bool == 1) {
 800647a:	4b26      	ldr	r3, [pc, #152]	; (8006514 <mainrun+0x250>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b01      	cmp	r3, #1
 8006480:	f040 8082 	bne.w	8006588 <mainrun+0x2c4>
 8006484:	4b24      	ldr	r3, [pc, #144]	; (8006518 <mainrun+0x254>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d17d      	bne.n	8006588 <mainrun+0x2c4>
 800648c:	4b23      	ldr	r3, [pc, #140]	; (800651c <mainrun+0x258>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d179      	bne.n	8006588 <mainrun+0x2c4>
 8006494:	4b22      	ldr	r3, [pc, #136]	; (8006520 <mainrun+0x25c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d175      	bne.n	8006588 <mainrun+0x2c4>

				judge_the_empty_and_order();
 800649c:	f7fb fea8 	bl	80021f0 <judge_the_empty_and_order>
				cake_check(4, 0);
 80064a0:	2100      	movs	r1, #0
 80064a2:	2004      	movs	r0, #4
 80064a4:	f7fb fad6 	bl	8001a54 <cake_check>

				mission_array[0] = 3;
 80064a8:	4b1e      	ldr	r3, [pc, #120]	; (8006524 <mainrun+0x260>)
 80064aa:	2203      	movs	r2, #3
 80064ac:	801a      	strh	r2, [r3, #0]
				temp_pub = 0;
 80064ae:	4b1e      	ldr	r3, [pc, #120]	; (8006528 <mainrun+0x264>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	601a      	str	r2, [r3, #0]
				//	rotate_the_ring(2);
				//	UART_Send_SetMotorPosition(5, 1800, 1500);

				Tower_of_Hanoi(cake_order);
 80064b4:	4b1d      	ldr	r3, [pc, #116]	; (800652c <mainrun+0x268>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fc fa93 	bl	80029e4 <Tower_of_Hanoi>
				mission_array[0] = 2;
 80064be:	4b19      	ldr	r3, [pc, #100]	; (8006524 <mainrun+0x260>)
 80064c0:	2202      	movs	r2, #2
 80064c2:	801a      	strh	r2, [r3, #0]
				temp_pub = 0;
 80064c4:	4b18      	ldr	r3, [pc, #96]	; (8006528 <mainrun+0x264>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	601a      	str	r2, [r3, #0]
				if (num == 1) {
 80064ca:	4b19      	ldr	r3, [pc, #100]	; (8006530 <mainrun+0x26c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d103      	bne.n	80064da <mainrun+0x216>
					rotate_the_ring(3);
 80064d2:	2003      	movs	r0, #3
 80064d4:	f7fb fc64 	bl	8001da0 <rotate_the_ring>
 80064d8:	e033      	b.n	8006542 <mainrun+0x27e>
				}
				else if (num == 2) {
 80064da:	4b15      	ldr	r3, [pc, #84]	; (8006530 <mainrun+0x26c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d128      	bne.n	8006534 <mainrun+0x270>
					rotate_the_ring(2);
 80064e2:	2002      	movs	r0, #2
 80064e4:	f7fb fc5c 	bl	8001da0 <rotate_the_ring>
 80064e8:	e02b      	b.n	8006542 <mainrun+0x27e>
 80064ea:	bf00      	nop
 80064ec:	40020400 	.word	0x40020400
 80064f0:	2000168c 	.word	0x2000168c
 80064f4:	200016d4 	.word	0x200016d4
 80064f8:	2000171c 	.word	0x2000171c
 80064fc:	20001764 	.word	0x20001764
 8006500:	200017f4 	.word	0x200017f4
 8006504:	200015b4 	.word	0x200015b4
 8006508:	200015fc 	.word	0x200015fc
 800650c:	20001644 	.word	0x20001644
 8006510:	2000154c 	.word	0x2000154c
 8006514:	2000151c 	.word	0x2000151c
 8006518:	20001520 	.word	0x20001520
 800651c:	20001524 	.word	0x20001524
 8006520:	20001528 	.word	0x20001528
 8006524:	20001558 	.word	0x20001558
 8006528:	20001550 	.word	0x20001550
 800652c:	20000010 	.word	0x20000010
 8006530:	200014f0 	.word	0x200014f0
				}
				else if (num == 3) {
 8006534:	4b5c      	ldr	r3, [pc, #368]	; (80066a8 <mainrun+0x3e4>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b03      	cmp	r3, #3
 800653a:	d102      	bne.n	8006542 <mainrun+0x27e>
					rotate_the_ring(1);
 800653c:	2001      	movs	r0, #1
 800653e:	f7fb fc2f 	bl	8001da0 <rotate_the_ring>
				}
				HAL_Delay(5000);
 8006542:	f241 3088 	movw	r0, #5000	; 0x1388
 8006546:	f001 fed3 	bl	80082f0 <HAL_Delay>
				anglebefore = 0;
 800654a:	4b58      	ldr	r3, [pc, #352]	; (80066ac <mainrun+0x3e8>)
 800654c:	2200      	movs	r2, #0
 800654e:	601a      	str	r2, [r3, #0]
				rotate_dir = 1;
 8006550:	4b57      	ldr	r3, [pc, #348]	; (80066b0 <mainrun+0x3ec>)
 8006552:	2201      	movs	r2, #1
 8006554:	601a      	str	r2, [r3, #0]
				cake_order = -1;
 8006556:	4b57      	ldr	r3, [pc, #348]	; (80066b4 <mainrun+0x3f0>)
 8006558:	f04f 32ff 	mov.w	r2, #4294967295
 800655c:	601a      	str	r2, [r3, #0]
				rotate_state[0] = 0;
 800655e:	4b56      	ldr	r3, [pc, #344]	; (80066b8 <mainrun+0x3f4>)
 8006560:	2200      	movs	r2, #0
 8006562:	801a      	strh	r2, [r3, #0]
				rotate_state[1] = 0;
 8006564:	4b54      	ldr	r3, [pc, #336]	; (80066b8 <mainrun+0x3f4>)
 8006566:	2200      	movs	r2, #0
 8006568:	805a      	strh	r2, [r3, #2]
				rotate_state[2] = 0;
 800656a:	4b53      	ldr	r3, [pc, #332]	; (80066b8 <mainrun+0x3f4>)
 800656c:	2200      	movs	r2, #0
 800656e:	809a      	strh	r2, [r3, #4]
				b_bool = 0;
 8006570:	4b52      	ldr	r3, [pc, #328]	; (80066bc <mainrun+0x3f8>)
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
				y_bool = 0;
 8006576:	4b52      	ldr	r3, [pc, #328]	; (80066c0 <mainrun+0x3fc>)
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]
				p_bool = 0;
 800657c:	4b51      	ldr	r3, [pc, #324]	; (80066c4 <mainrun+0x400>)
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]
				h_bool = 0;
 8006582:	4b51      	ldr	r3, [pc, #324]	; (80066c8 <mainrun+0x404>)
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]
			}

//		 close all the mosfet
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8006588:	4b50      	ldr	r3, [pc, #320]	; (80066cc <mainrun+0x408>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2200      	movs	r2, #0
 800658e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8006590:	4b4e      	ldr	r3, [pc, #312]	; (80066cc <mainrun+0x408>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2200      	movs	r2, #0
 8006596:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8006598:	4b4d      	ldr	r3, [pc, #308]	; (80066d0 <mainrun+0x40c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2200      	movs	r2, #0
 800659e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80065a0:	4b4b      	ldr	r3, [pc, #300]	; (80066d0 <mainrun+0x40c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2200      	movs	r2, #0
 80065a6:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80065a8:	4b49      	ldr	r3, [pc, #292]	; (80066d0 <mainrun+0x40c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2200      	movs	r2, #0
 80065ae:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 80065b0:	4b47      	ldr	r3, [pc, #284]	; (80066d0 <mainrun+0x40c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2200      	movs	r2, #0
 80065b6:	641a      	str	r2, [r3, #64]	; 0x40
//			finish_all_motion();

		}
		if (putcherry == 1 && finish != 1) {
 80065b8:	4b46      	ldr	r3, [pc, #280]	; (80066d4 <mainrun+0x410>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d128      	bne.n	8006612 <mainrun+0x34e>
 80065c0:	4b45      	ldr	r3, [pc, #276]	; (80066d8 <mainrun+0x414>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d024      	beq.n	8006612 <mainrun+0x34e>
			steady = 0;
 80065c8:	4b44      	ldr	r3, [pc, #272]	; (80066dc <mainrun+0x418>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]
			cake_check(0, 0);
 80065ce:	2100      	movs	r1, #0
 80065d0:	2000      	movs	r0, #0
 80065d2:	f7fb fa3f 	bl	8001a54 <cake_check>
			cake_check(1, 0);
 80065d6:	2100      	movs	r1, #0
 80065d8:	2001      	movs	r0, #1
 80065da:	f7fb fa3b 	bl	8001a54 <cake_check>
			cake_check(2, 0);
 80065de:	2100      	movs	r1, #0
 80065e0:	2002      	movs	r0, #2
 80065e2:	f7fb fa37 	bl	8001a54 <cake_check>
			cake_check(3, 0);
 80065e6:	2100      	movs	r1, #0
 80065e8:	2003      	movs	r0, #3
 80065ea:	f7fb fa33 	bl	8001a54 <cake_check>
			put_the_cherry(0);
 80065ee:	2000      	movs	r0, #0
 80065f0:	f7fb fd24 	bl	800203c <put_the_cherry>
			put_the_cherry(1);
 80065f4:	2001      	movs	r0, #1
 80065f6:	f7fb fd21 	bl	800203c <put_the_cherry>
			put_the_cherry(2);
 80065fa:	2002      	movs	r0, #2
 80065fc:	f7fb fd1e 	bl	800203c <put_the_cherry>
			put_the_cherry(3);
 8006600:	2003      	movs	r0, #3
 8006602:	f7fb fd1b 	bl	800203c <put_the_cherry>
			rotate_the_ring(0);
 8006606:	2000      	movs	r0, #0
 8006608:	f7fb fbca 	bl	8001da0 <rotate_the_ring>
			putcherry = 0;
 800660c:	4b31      	ldr	r3, [pc, #196]	; (80066d4 <mainrun+0x410>)
 800660e:	2200      	movs	r2, #0
 8006610:	601a      	str	r2, [r3, #0]

		}
		if (mission_array[0] == 0) {
 8006612:	4b33      	ldr	r3, [pc, #204]	; (80066e0 <mainrun+0x41c>)
 8006614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d122      	bne.n	8006662 <mainrun+0x39e>
			UART_Send_SetMotorPosition(7, 1300, 300);
 800661c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006620:	f240 5114 	movw	r1, #1300	; 0x514
 8006624:	2007      	movs	r0, #7
 8006626:	f7fa fbc1 	bl	8000dac <UART_Send_SetMotorPosition>
			UART_Send_SetMotorPosition(4, 1250, 300);
 800662a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800662e:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8006632:	2004      	movs	r0, #4
 8006634:	f7fa fbba 	bl	8000dac <UART_Send_SetMotorPosition>
			UART_Send_SetMotorPosition(3, 1250, 300);
 8006638:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800663c:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8006640:	2003      	movs	r0, #3
 8006642:	f7fa fbb3 	bl	8000dac <UART_Send_SetMotorPosition>
			UART_Send_SetMotorPosition(5, 1250, 300);
 8006646:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800664a:	f240 41e2 	movw	r1, #1250	; 0x4e2
 800664e:	2005      	movs	r0, #5
 8006650:	f7fa fbac 	bl	8000dac <UART_Send_SetMotorPosition>
			UART_Send_SetMotorPosition(6, 950, 300);
 8006654:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006658:	f240 31b6 	movw	r1, #950	; 0x3b6
 800665c:	2006      	movs	r0, #6
 800665e:	f7fa fba5 	bl	8000dac <UART_Send_SetMotorPosition>
		}
		if (transfer_the_order == 1) {
 8006662:	4b20      	ldr	r3, [pc, #128]	; (80066e4 <mainrun+0x420>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d10e      	bne.n	8006688 <mainrun+0x3c4>
			judge_the_empty_and_order();
 800666a:	f7fb fdc1 	bl	80021f0 <judge_the_empty_and_order>
			mission_array[0] = 3;
 800666e:	4b1c      	ldr	r3, [pc, #112]	; (80066e0 <mainrun+0x41c>)
 8006670:	2203      	movs	r2, #3
 8006672:	801a      	strh	r2, [r3, #0]
			temp_pub = 0;
 8006674:	4b1c      	ldr	r3, [pc, #112]	; (80066e8 <mainrun+0x424>)
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]
			cake_order = -1;
 800667a:	4b0e      	ldr	r3, [pc, #56]	; (80066b4 <mainrun+0x3f0>)
 800667c:	f04f 32ff 	mov.w	r2, #4294967295
 8006680:	601a      	str	r2, [r3, #0]
			transfer_the_order = 0;
 8006682:	4b18      	ldr	r3, [pc, #96]	; (80066e4 <mainrun+0x420>)
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]
		}
		if (finish == 1) {
 8006688:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <mainrun+0x414>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d101      	bne.n	8006694 <mainrun+0x3d0>
			finish_all_motion();
 8006690:	f7fc fefa 	bl	8003488 <finish_all_motion>
		}
		if (disguise == 1) {
 8006694:	4b15      	ldr	r3, [pc, #84]	; (80066ec <mainrun+0x428>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b01      	cmp	r3, #1
 800669a:	f47f aee9 	bne.w	8006470 <mainrun+0x1ac>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20000 * 255);
 800669e:	4b14      	ldr	r3, [pc, #80]	; (80066f0 <mainrun+0x42c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a14      	ldr	r2, [pc, #80]	; (80066f4 <mainrun+0x430>)
 80066a4:	641a      	str	r2, [r3, #64]	; 0x40
		if (servo_delay_temp == 0) {
 80066a6:	e6e3      	b.n	8006470 <mainrun+0x1ac>
 80066a8:	200014f0 	.word	0x200014f0
 80066ac:	20001478 	.word	0x20001478
 80066b0:	20001570 	.word	0x20001570
 80066b4:	20000010 	.word	0x20000010
 80066b8:	20001564 	.word	0x20001564
 80066bc:	2000151c 	.word	0x2000151c
 80066c0:	20001520 	.word	0x20001520
 80066c4:	20001524 	.word	0x20001524
 80066c8:	20001528 	.word	0x20001528
 80066cc:	200015fc 	.word	0x200015fc
 80066d0:	20001644 	.word	0x20001644
 80066d4:	20001594 	.word	0x20001594
 80066d8:	200014ec 	.word	0x200014ec
 80066dc:	20000018 	.word	0x20000018
 80066e0:	20001558 	.word	0x20001558
 80066e4:	200015a0 	.word	0x200015a0
 80066e8:	20001550 	.word	0x20001550
 80066ec:	20001588 	.word	0x20001588
 80066f0:	200015b4 	.word	0x200015b4
 80066f4:	004dd1e0 	.word	0x004dd1e0

080066f8 <HAL_GPIO_EXTI_Callback>:

		}
	}

}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	4603      	mov	r3, r0
 8006700:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_4) {            //1
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	2b10      	cmp	r3, #16
 8006706:	d102      	bne.n	800670e <HAL_GPIO_EXTI_Callback+0x16>
		rotate_state[0] = 1;
 8006708:	4b0b      	ldr	r3, [pc, #44]	; (8006738 <HAL_GPIO_EXTI_Callback+0x40>)
 800670a:	2201      	movs	r2, #1
 800670c:	801a      	strh	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_10) {            //2
 800670e:	88fb      	ldrh	r3, [r7, #6]
 8006710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006714:	d102      	bne.n	800671c <HAL_GPIO_EXTI_Callback+0x24>
		rotate_state[1] = 1;
 8006716:	4b08      	ldr	r3, [pc, #32]	; (8006738 <HAL_GPIO_EXTI_Callback+0x40>)
 8006718:	2201      	movs	r2, #1
 800671a:	805a      	strh	r2, [r3, #2]
	}

	if (GPIO_Pin == GPIO_PIN_11) {            //3
 800671c:	88fb      	ldrh	r3, [r7, #6]
 800671e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006722:	d102      	bne.n	800672a <HAL_GPIO_EXTI_Callback+0x32>
		rotate_state[2] = 1;
 8006724:	4b04      	ldr	r3, [pc, #16]	; (8006738 <HAL_GPIO_EXTI_Callback+0x40>)
 8006726:	2201      	movs	r2, #1
 8006728:	809a      	strh	r2, [r3, #4]
	}

}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20001564 	.word	0x20001564

0800673c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a7f      	ldr	r2, [pc, #508]	; (8006948 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	f040 81af 	bne.w	8006aae <HAL_TIM_PeriodElapsedCallback+0x372>

		ms1++;
 8006750:	4b7e      	ldr	r3, [pc, #504]	; (800694c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3301      	adds	r3, #1
 8006756:	4a7d      	ldr	r2, [pc, #500]	; (800694c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8006758:	6013      	str	r3, [r2, #0]
		if (step != 0) {
 800675a:	4b7d      	ldr	r3, [pc, #500]	; (8006950 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 81a5 	beq.w	8006aae <HAL_TIM_PeriodElapsedCallback+0x372>
			HAL_GPIO_WritePin(Step1_EN_Port, Step1_EN_Pin, GPIO_PIN_RESET);
 8006764:	2200      	movs	r2, #0
 8006766:	2108      	movs	r1, #8
 8006768:	487a      	ldr	r0, [pc, #488]	; (8006954 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800676a:	f003 f891 	bl	8009890 <HAL_GPIO_WritePin>
			if (dir_state1 == 1)
 800676e:	4b7a      	ldr	r3, [pc, #488]	; (8006958 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d106      	bne.n	8006784 <HAL_TIM_PeriodElapsedCallback+0x48>
				HAL_GPIO_WritePin(Step1_DIR_Port, Step1_DIR_Pin, GPIO_PIN_SET);
 8006776:	2201      	movs	r2, #1
 8006778:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800677c:	4877      	ldr	r0, [pc, #476]	; (800695c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800677e:	f003 f887 	bl	8009890 <HAL_GPIO_WritePin>
 8006782:	e009      	b.n	8006798 <HAL_TIM_PeriodElapsedCallback+0x5c>
			else if (dir_state1 == 0)
 8006784:	4b74      	ldr	r3, [pc, #464]	; (8006958 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d105      	bne.n	8006798 <HAL_TIM_PeriodElapsedCallback+0x5c>
				HAL_GPIO_WritePin(Step1_DIR_Port, Step1_DIR_Pin,
 800678c:	2200      	movs	r2, #0
 800678e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006792:	4872      	ldr	r0, [pc, #456]	; (800695c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8006794:	f003 f87c 	bl	8009890 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
			temp++;
 8006798:	4b71      	ldr	r3, [pc, #452]	; (8006960 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3301      	adds	r3, #1
 800679e:	4a70      	ldr	r2, [pc, #448]	; (8006960 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80067a0:	6013      	str	r3, [r2, #0]
			if (step_state1 == 1) {
 80067a2:	4b70      	ldr	r3, [pc, #448]	; (8006964 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d108      	bne.n	80067bc <HAL_TIM_PeriodElapsedCallback+0x80>
				HAL_GPIO_WritePin(Step1_STEP_Port, Step1_STEP_Pin,
 80067aa:	2200      	movs	r2, #0
 80067ac:	2104      	movs	r1, #4
 80067ae:	486e      	ldr	r0, [pc, #440]	; (8006968 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80067b0:	f003 f86e 	bl	8009890 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);

				step_state1 = 0;
 80067b4:	4b6b      	ldr	r3, [pc, #428]	; (8006964 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	e015      	b.n	80067e8 <HAL_TIM_PeriodElapsedCallback+0xac>
			}
			else if (step_state1 == 0) {
 80067bc:	4b69      	ldr	r3, [pc, #420]	; (8006964 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d111      	bne.n	80067e8 <HAL_TIM_PeriodElapsedCallback+0xac>
				HAL_GPIO_WritePin(Step1_STEP_Port, Step1_STEP_Pin,
 80067c4:	2201      	movs	r2, #1
 80067c6:	2104      	movs	r1, #4
 80067c8:	4867      	ldr	r0, [pc, #412]	; (8006968 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80067ca:	f003 f861 	bl	8009890 <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
				step_state1 = 1;
 80067ce:	4b65      	ldr	r3, [pc, #404]	; (8006964 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80067d0:	2201      	movs	r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
				step--;
 80067d4:	4b5e      	ldr	r3, [pc, #376]	; (8006950 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3b01      	subs	r3, #1
 80067da:	4a5d      	ldr	r2, [pc, #372]	; (8006950 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80067dc:	6013      	str	r3, [r2, #0]
				rotate_temp++;
 80067de:	4b63      	ldr	r3, [pc, #396]	; (800696c <HAL_TIM_PeriodElapsedCallback+0x230>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3301      	adds	r3, #1
 80067e4:	4a61      	ldr	r2, [pc, #388]	; (800696c <HAL_TIM_PeriodElapsedCallback+0x230>)
 80067e6:	6013      	str	r3, [r2, #0]
			}
			if (temp == 2) {
 80067e8:	4b5d      	ldr	r3, [pc, #372]	; (8006960 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d132      	bne.n	8006856 <HAL_TIM_PeriodElapsedCallback+0x11a>
				if (step > 250) {
 80067f0:	4b57      	ldr	r3, [pc, #348]	; (8006950 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2bfa      	cmp	r3, #250	; 0xfa
 80067f6:	dd18      	ble.n	800682a <HAL_TIM_PeriodElapsedCallback+0xee>
					arr = arr - 4;
 80067f8:	4b5d      	ldr	r3, [pc, #372]	; (8006970 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3b04      	subs	r3, #4
 80067fe:	4a5c      	ldr	r2, [pc, #368]	; (8006970 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8006800:	6013      	str	r3, [r2, #0]
					if (arr < 140)
 8006802:	4b5b      	ldr	r3, [pc, #364]	; (8006970 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b8b      	cmp	r3, #139	; 0x8b
 8006808:	dc02      	bgt.n	8006810 <HAL_TIM_PeriodElapsedCallback+0xd4>
						arr = 140;
 800680a:	4b59      	ldr	r3, [pc, #356]	; (8006970 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800680c:	228c      	movs	r2, #140	; 0x8c
 800680e:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_AUTORELOAD(&htim6, arr);
 8006810:	4b57      	ldr	r3, [pc, #348]	; (8006970 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	4b57      	ldr	r3, [pc, #348]	; (8006974 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	62da      	str	r2, [r3, #44]	; 0x2c
 800681a:	4b55      	ldr	r3, [pc, #340]	; (8006970 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	4b54      	ldr	r3, [pc, #336]	; (8006974 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8006822:	60da      	str	r2, [r3, #12]
					temp = 0;
 8006824:	4b4e      	ldr	r3, [pc, #312]	; (8006960 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8006826:	2200      	movs	r2, #0
 8006828:	601a      	str	r2, [r3, #0]
				}

				if (step <= 250) {
 800682a:	4b49      	ldr	r3, [pc, #292]	; (8006950 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2bfa      	cmp	r3, #250	; 0xfa
 8006830:	dc11      	bgt.n	8006856 <HAL_TIM_PeriodElapsedCallback+0x11a>
					arr = arr + 4;
 8006832:	4b4f      	ldr	r3, [pc, #316]	; (8006970 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3304      	adds	r3, #4
 8006838:	4a4d      	ldr	r2, [pc, #308]	; (8006970 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800683a:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_AUTORELOAD(&htim6, arr);
 800683c:	4b4c      	ldr	r3, [pc, #304]	; (8006970 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	4b4c      	ldr	r3, [pc, #304]	; (8006974 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	62da      	str	r2, [r3, #44]	; 0x2c
 8006846:	4b4a      	ldr	r3, [pc, #296]	; (8006970 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	4b49      	ldr	r3, [pc, #292]	; (8006974 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800684e:	60da      	str	r2, [r3, #12]
					temp = 0;
 8006850:	4b43      	ldr	r3, [pc, #268]	; (8006960 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8006852:	2200      	movs	r2, #0
 8006854:	601a      	str	r2, [r3, #0]

				}
			}
			if (flag == 0 && rotate_temp >= 444 && if_gate_ok != 2) {
 8006856:	4b48      	ldr	r3, [pc, #288]	; (8006978 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d114      	bne.n	8006888 <HAL_TIM_PeriodElapsedCallback+0x14c>
 800685e:	4b43      	ldr	r3, [pc, #268]	; (800696c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 8006866:	db0f      	blt.n	8006888 <HAL_TIM_PeriodElapsedCallback+0x14c>
 8006868:	4b44      	ldr	r3, [pc, #272]	; (800697c <HAL_TIM_PeriodElapsedCallback+0x240>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b02      	cmp	r3, #2
 800686e:	d00b      	beq.n	8006888 <HAL_TIM_PeriodElapsedCallback+0x14c>
				flag = 1;
 8006870:	4b41      	ldr	r3, [pc, #260]	; (8006978 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006872:	2201      	movs	r2, #1
 8006874:	601a      	str	r2, [r3, #0]
				rotate_state[0] = 0;
 8006876:	4b42      	ldr	r3, [pc, #264]	; (8006980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006878:	2200      	movs	r2, #0
 800687a:	801a      	strh	r2, [r3, #0]
				rotate_state[1] = 0;
 800687c:	4b40      	ldr	r3, [pc, #256]	; (8006980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800687e:	2200      	movs	r2, #0
 8006880:	805a      	strh	r2, [r3, #2]
				rotate_state[2] = 0;
 8006882:	4b3f      	ldr	r3, [pc, #252]	; (8006980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006884:	2200      	movs	r2, #0
 8006886:	809a      	strh	r2, [r3, #4]
			}
			if (rotate_state[0] + rotate_state[1] + rotate_state[2] == 3
 8006888:	4b3d      	ldr	r3, [pc, #244]	; (8006980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800688a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800688e:	461a      	mov	r2, r3
 8006890:	4b3b      	ldr	r3, [pc, #236]	; (8006980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006892:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006896:	4413      	add	r3, r2
 8006898:	4a39      	ldr	r2, [pc, #228]	; (8006980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800689a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800689e:	4413      	add	r3, r2
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	d117      	bne.n	80068d4 <HAL_TIM_PeriodElapsedCallback+0x198>
					&& rotate_temp >= 444 && if_gate_ok != 2) {
 80068a4:	4b31      	ldr	r3, [pc, #196]	; (800696c <HAL_TIM_PeriodElapsedCallback+0x230>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 80068ac:	db12      	blt.n	80068d4 <HAL_TIM_PeriodElapsedCallback+0x198>
 80068ae:	4b33      	ldr	r3, [pc, #204]	; (800697c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d00e      	beq.n	80068d4 <HAL_TIM_PeriodElapsedCallback+0x198>
				rotate_state[0] = 0;
 80068b6:	4b32      	ldr	r3, [pc, #200]	; (8006980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	801a      	strh	r2, [r3, #0]
				rotate_state[1] = 0;
 80068bc:	4b30      	ldr	r3, [pc, #192]	; (8006980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80068be:	2200      	movs	r2, #0
 80068c0:	805a      	strh	r2, [r3, #2]
				rotate_state[2] = 0;
 80068c2:	4b2f      	ldr	r3, [pc, #188]	; (8006980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	809a      	strh	r2, [r3, #4]
				rotate_temp = 0;
 80068c8:	4b28      	ldr	r3, [pc, #160]	; (800696c <HAL_TIM_PeriodElapsedCallback+0x230>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
				flag = 0;
 80068ce:	4b2a      	ldr	r3, [pc, #168]	; (8006978 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]

			}
			if (rotate_temp >= 444 && flag == 1) {
 80068d4:	4b25      	ldr	r3, [pc, #148]	; (800696c <HAL_TIM_PeriodElapsedCallback+0x230>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 80068dc:	f2c0 80e7 	blt.w	8006aae <HAL_TIM_PeriodElapsedCallback+0x372>
 80068e0:	4b25      	ldr	r3, [pc, #148]	; (8006978 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	f040 80e2 	bne.w	8006aae <HAL_TIM_PeriodElapsedCallback+0x372>
				if (rotate_state[0] == 0 && rotate_state[1] == 1
 80068ea:	4b25      	ldr	r3, [pc, #148]	; (8006980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80068ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d149      	bne.n	8006988 <HAL_TIM_PeriodElapsedCallback+0x24c>
 80068f4:	4b22      	ldr	r3, [pc, #136]	; (8006980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80068f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d144      	bne.n	8006988 <HAL_TIM_PeriodElapsedCallback+0x24c>
						&& rotate_state[2] == 1
 80068fe:	4b20      	ldr	r3, [pc, #128]	; (8006980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006900:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d13f      	bne.n	8006988 <HAL_TIM_PeriodElapsedCallback+0x24c>
						&& (rotate_dir == 3 || rotate_dir == 1)
 8006908:	4b1e      	ldr	r3, [pc, #120]	; (8006984 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b03      	cmp	r3, #3
 800690e:	d003      	beq.n	8006918 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8006910:	4b1c      	ldr	r3, [pc, #112]	; (8006984 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d137      	bne.n	8006988 <HAL_TIM_PeriodElapsedCallback+0x24c>
						&& if_gate_ok != 2) {
 8006918:	4b18      	ldr	r3, [pc, #96]	; (800697c <HAL_TIM_PeriodElapsedCallback+0x240>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b02      	cmp	r3, #2
 800691e:	d033      	beq.n	8006988 <HAL_TIM_PeriodElapsedCallback+0x24c>
//						step1 = 2.86 * 5 * 8 / 1.8;
					rotate_dir = 0;
 8006920:	4b18      	ldr	r3, [pc, #96]	; (8006984 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
					rotate_state[0] = 0;
 8006926:	4b16      	ldr	r3, [pc, #88]	; (8006980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006928:	2200      	movs	r2, #0
 800692a:	801a      	strh	r2, [r3, #0]
					rotate_state[1] = 0;
 800692c:	4b14      	ldr	r3, [pc, #80]	; (8006980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800692e:	2200      	movs	r2, #0
 8006930:	805a      	strh	r2, [r3, #2]
					rotate_state[2] = 0;
 8006932:	4b13      	ldr	r3, [pc, #76]	; (8006980 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006934:	2200      	movs	r2, #0
 8006936:	809a      	strh	r2, [r3, #4]
					rotate_temp = 0;
 8006938:	4b0c      	ldr	r3, [pc, #48]	; (800696c <HAL_TIM_PeriodElapsedCallback+0x230>)
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]
					flag = 0;
 800693e:	4b0e      	ldr	r3, [pc, #56]	; (8006978 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006940:	2200      	movs	r2, #0
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	e0b3      	b.n	8006aae <HAL_TIM_PeriodElapsedCallback+0x372>
 8006946:	bf00      	nop
 8006948:	40001000 	.word	0x40001000
 800694c:	20001480 	.word	0x20001480
 8006950:	200014dc 	.word	0x200014dc
 8006954:	40020400 	.word	0x40020400
 8006958:	20001470 	.word	0x20001470
 800695c:	40020800 	.word	0x40020800
 8006960:	200014e4 	.word	0x200014e4
 8006964:	2000147c 	.word	0x2000147c
 8006968:	40020c00 	.word	0x40020c00
 800696c:	20001574 	.word	0x20001574
 8006970:	2000000c 	.word	0x2000000c
 8006974:	2000168c 	.word	0x2000168c
 8006978:	20001578 	.word	0x20001578
 800697c:	20000014 	.word	0x20000014
 8006980:	20001564 	.word	0x20001564
 8006984:	20001570 	.word	0x20001570

				}
				else if (rotate_state[0] == 1 && rotate_state[1] == 1
 8006988:	4b2d      	ldr	r3, [pc, #180]	; (8006a40 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800698a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d128      	bne.n	80069e4 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 8006992:	4b2b      	ldr	r3, [pc, #172]	; (8006a40 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8006994:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d123      	bne.n	80069e4 <HAL_TIM_PeriodElapsedCallback+0x2a8>
						&& rotate_state[2] == 0
 800699c:	4b28      	ldr	r3, [pc, #160]	; (8006a40 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800699e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d11e      	bne.n	80069e4 <HAL_TIM_PeriodElapsedCallback+0x2a8>
						&& (rotate_dir == 0 || rotate_dir == 2)
 80069a6:	4b27      	ldr	r3, [pc, #156]	; (8006a44 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_TIM_PeriodElapsedCallback+0x27a>
 80069ae:	4b25      	ldr	r3, [pc, #148]	; (8006a44 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d116      	bne.n	80069e4 <HAL_TIM_PeriodElapsedCallback+0x2a8>
						&& if_gate_ok != 2) {
 80069b6:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d012      	beq.n	80069e4 <HAL_TIM_PeriodElapsedCallback+0x2a8>
//						step1 = 2.86 * 5 * 8 / 1.8;
					rotate_dir = 1;
 80069be:	4b21      	ldr	r3, [pc, #132]	; (8006a44 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80069c0:	2201      	movs	r2, #1
 80069c2:	601a      	str	r2, [r3, #0]
					rotate_state[0] = 0;
 80069c4:	4b1e      	ldr	r3, [pc, #120]	; (8006a40 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	801a      	strh	r2, [r3, #0]
					rotate_state[1] = 0;
 80069ca:	4b1d      	ldr	r3, [pc, #116]	; (8006a40 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	805a      	strh	r2, [r3, #2]
					rotate_state[2] = 0;
 80069d0:	4b1b      	ldr	r3, [pc, #108]	; (8006a40 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	809a      	strh	r2, [r3, #4]
					rotate_temp = 0;
 80069d6:	4b1d      	ldr	r3, [pc, #116]	; (8006a4c <HAL_TIM_PeriodElapsedCallback+0x310>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]
					flag = 0;
 80069dc:	4b1c      	ldr	r3, [pc, #112]	; (8006a50 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	e064      	b.n	8006aae <HAL_TIM_PeriodElapsedCallback+0x372>

				}
				else if (rotate_state[0] == 1 && rotate_state[1] == 0
 80069e4:	4b16      	ldr	r3, [pc, #88]	; (8006a40 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80069e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d132      	bne.n	8006a54 <HAL_TIM_PeriodElapsedCallback+0x318>
 80069ee:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80069f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d12d      	bne.n	8006a54 <HAL_TIM_PeriodElapsedCallback+0x318>
						&& rotate_state[2] == 0
 80069f8:	4b11      	ldr	r3, [pc, #68]	; (8006a40 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80069fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d128      	bne.n	8006a54 <HAL_TIM_PeriodElapsedCallback+0x318>
						&& (rotate_dir == 1 || rotate_dir == 3)
 8006a02:	4b10      	ldr	r3, [pc, #64]	; (8006a44 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d003      	beq.n	8006a12 <HAL_TIM_PeriodElapsedCallback+0x2d6>
 8006a0a:	4b0e      	ldr	r3, [pc, #56]	; (8006a44 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d120      	bne.n	8006a54 <HAL_TIM_PeriodElapsedCallback+0x318>
						&& if_gate_ok != 2) {
 8006a12:	4b0d      	ldr	r3, [pc, #52]	; (8006a48 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d01c      	beq.n	8006a54 <HAL_TIM_PeriodElapsedCallback+0x318>
//						step1 = 2.86 * 5 * 8 / 1.8;
					rotate_dir = 2;
 8006a1a:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	601a      	str	r2, [r3, #0]
					rotate_state[0] = 0;
 8006a20:	4b07      	ldr	r3, [pc, #28]	; (8006a40 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	801a      	strh	r2, [r3, #0]
					rotate_state[1] = 0;
 8006a26:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	805a      	strh	r2, [r3, #2]
					rotate_state[2] = 0;
 8006a2c:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	809a      	strh	r2, [r3, #4]
					rotate_temp = 0;
 8006a32:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <HAL_TIM_PeriodElapsedCallback+0x310>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	601a      	str	r2, [r3, #0]
					flag = 0;
 8006a38:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	e036      	b.n	8006aae <HAL_TIM_PeriodElapsedCallback+0x372>
 8006a40:	20001564 	.word	0x20001564
 8006a44:	20001570 	.word	0x20001570
 8006a48:	20000014 	.word	0x20000014
 8006a4c:	20001574 	.word	0x20001574
 8006a50:	20001578 	.word	0x20001578

				}
				else if (rotate_state[0] == 0 && rotate_state[1] == 0
 8006a54:	4b83      	ldr	r3, [pc, #524]	; (8006c64 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8006a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d127      	bne.n	8006aae <HAL_TIM_PeriodElapsedCallback+0x372>
 8006a5e:	4b81      	ldr	r3, [pc, #516]	; (8006c64 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8006a60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d122      	bne.n	8006aae <HAL_TIM_PeriodElapsedCallback+0x372>
						&& rotate_state[2] == 1
 8006a68:	4b7e      	ldr	r3, [pc, #504]	; (8006c64 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8006a6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d11d      	bne.n	8006aae <HAL_TIM_PeriodElapsedCallback+0x372>
						&& (rotate_dir == 2 || rotate_dir == 0)
 8006a72:	4b7d      	ldr	r3, [pc, #500]	; (8006c68 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d003      	beq.n	8006a82 <HAL_TIM_PeriodElapsedCallback+0x346>
 8006a7a:	4b7b      	ldr	r3, [pc, #492]	; (8006c68 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d115      	bne.n	8006aae <HAL_TIM_PeriodElapsedCallback+0x372>
						&& if_gate_ok != 2) {
 8006a82:	4b7a      	ldr	r3, [pc, #488]	; (8006c6c <HAL_TIM_PeriodElapsedCallback+0x530>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d011      	beq.n	8006aae <HAL_TIM_PeriodElapsedCallback+0x372>
//						step1 = 2.86 * 5 * 8 / 1.8;
					rotate_dir = 3;
 8006a8a:	4b77      	ldr	r3, [pc, #476]	; (8006c68 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8006a8c:	2203      	movs	r2, #3
 8006a8e:	601a      	str	r2, [r3, #0]
					rotate_state[0] = 0;
 8006a90:	4b74      	ldr	r3, [pc, #464]	; (8006c64 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	801a      	strh	r2, [r3, #0]
					rotate_state[1] = 0;
 8006a96:	4b73      	ldr	r3, [pc, #460]	; (8006c64 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	805a      	strh	r2, [r3, #2]
					rotate_state[2] = 0;
 8006a9c:	4b71      	ldr	r3, [pc, #452]	; (8006c64 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	809a      	strh	r2, [r3, #4]
					rotate_temp = 0;
 8006aa2:	4b73      	ldr	r3, [pc, #460]	; (8006c70 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	601a      	str	r2, [r3, #0]
					flag = 0;
 8006aa8:	4b72      	ldr	r3, [pc, #456]	; (8006c74 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]
//				}
			}

		}
	}
	if (htim->Instance == TIM7) {
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a71      	ldr	r2, [pc, #452]	; (8006c78 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	f040 80cc 	bne.w	8006c52 <HAL_TIM_PeriodElapsedCallback+0x516>

		if (suck[0] == 1) {           //press_sensor1 feedback(suck)
 8006aba:	4b70      	ldr	r3, [pc, #448]	; (8006c7c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d11d      	bne.n	8006afe <HAL_TIM_PeriodElapsedCallback+0x3c2>
			i1++;
 8006ac2:	4b6f      	ldr	r3, [pc, #444]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	4a6d      	ldr	r2, [pc, #436]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8006aca:	6013      	str	r3, [r2, #0]
//			if (ADC_cake[0] < 200) {        //PA5
			if (i1 == 500) {
 8006acc:	4b6c      	ldr	r3, [pc, #432]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006ad4:	d113      	bne.n	8006afe <HAL_TIM_PeriodElapsedCallback+0x3c2>
				suck_success1 = 1;
 8006ad6:	4b6b      	ldr	r3, [pc, #428]	; (8006c84 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8006ad8:	2201      	movs	r2, #1
 8006ada:	601a      	str	r2, [r3, #0]
				suck[0] = 0;
 8006adc:	4b67      	ldr	r3, [pc, #412]	; (8006c7c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(7, 1300, 0);
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f240 5114 	movw	r1, #1300	; 0x514
 8006ae8:	2007      	movs	r0, #7
 8006aea:	f7fa f95f 	bl	8000dac <UART_Send_SetMotorPosition>
				i1 = 0;
 8006aee:	4b64      	ldr	r3, [pc, #400]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]
				suck_temp--;
 8006af4:	4b64      	ldr	r3, [pc, #400]	; (8006c88 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	4a63      	ldr	r2, [pc, #396]	; (8006c88 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8006afc:	6013      	str	r3, [r2, #0]
				//			}
			}
		}
		if (suck[1] == 1) {             //press_sensor4 feedback(suck)
 8006afe:	4b5f      	ldr	r3, [pc, #380]	; (8006c7c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d11d      	bne.n	8006b42 <HAL_TIM_PeriodElapsedCallback+0x406>
			i2++;
 8006b06:	4b61      	ldr	r3, [pc, #388]	; (8006c8c <HAL_TIM_PeriodElapsedCallback+0x550>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	4a5f      	ldr	r2, [pc, #380]	; (8006c8c <HAL_TIM_PeriodElapsedCallback+0x550>)
 8006b0e:	6013      	str	r3, [r2, #0]
//			if (ADC_cake[1] < 200) {     //PA6
			if (i2 == 500) {
 8006b10:	4b5e      	ldr	r3, [pc, #376]	; (8006c8c <HAL_TIM_PeriodElapsedCallback+0x550>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006b18:	d113      	bne.n	8006b42 <HAL_TIM_PeriodElapsedCallback+0x406>
				suck_success4 = 1;
 8006b1a:	4b5d      	ldr	r3, [pc, #372]	; (8006c90 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(4, 1200, 200);
 8006b20:	22c8      	movs	r2, #200	; 0xc8
 8006b22:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006b26:	2004      	movs	r0, #4
 8006b28:	f7fa f940 	bl	8000dac <UART_Send_SetMotorPosition>
				i2 = 0;
 8006b2c:	4b57      	ldr	r3, [pc, #348]	; (8006c8c <HAL_TIM_PeriodElapsedCallback+0x550>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	601a      	str	r2, [r3, #0]
				suck_temp--;
 8006b32:	4b55      	ldr	r3, [pc, #340]	; (8006c88 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	4a53      	ldr	r2, [pc, #332]	; (8006c88 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8006b3a:	6013      	str	r3, [r2, #0]
				suck[1] = 0;
 8006b3c:	4b4f      	ldr	r3, [pc, #316]	; (8006c7c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	605a      	str	r2, [r3, #4]
				//			}
			}
		}
		if (suck[2] == 1) {             //press_sensor3 feedback(suck)
 8006b42:	4b4e      	ldr	r3, [pc, #312]	; (8006c7c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d11d      	bne.n	8006b86 <HAL_TIM_PeriodElapsedCallback+0x44a>
			i3++;
 8006b4a:	4b52      	ldr	r3, [pc, #328]	; (8006c94 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	4a50      	ldr	r2, [pc, #320]	; (8006c94 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8006b52:	6013      	str	r3, [r2, #0]
//			if (ADC_cake[2] < 200) {      //PA7
			if (i3 == 500) {
 8006b54:	4b4f      	ldr	r3, [pc, #316]	; (8006c94 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006b5c:	d113      	bne.n	8006b86 <HAL_TIM_PeriodElapsedCallback+0x44a>
				suck_success3 = 1;
 8006b5e:	4b4e      	ldr	r3, [pc, #312]	; (8006c98 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8006b60:	2201      	movs	r2, #1
 8006b62:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(3, 1200, 200);
 8006b64:	22c8      	movs	r2, #200	; 0xc8
 8006b66:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006b6a:	2003      	movs	r0, #3
 8006b6c:	f7fa f91e 	bl	8000dac <UART_Send_SetMotorPosition>
				i3 = 0;
 8006b70:	4b48      	ldr	r3, [pc, #288]	; (8006c94 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
				suck_temp--;
 8006b76:	4b44      	ldr	r3, [pc, #272]	; (8006c88 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	4a42      	ldr	r2, [pc, #264]	; (8006c88 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8006b7e:	6013      	str	r3, [r2, #0]
				suck[2] = 0;
 8006b80:	4b3e      	ldr	r3, [pc, #248]	; (8006c7c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	609a      	str	r2, [r3, #8]
				//			}
			}
		}
		if (unsuck[0] == 1) {         //press_sensor1 feedback(unsuck)
 8006b86:	4b45      	ldr	r3, [pc, #276]	; (8006c9c <HAL_TIM_PeriodElapsedCallback+0x560>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d11d      	bne.n	8006bca <HAL_TIM_PeriodElapsedCallback+0x48e>
			i4++;
 8006b8e:	4b44      	ldr	r3, [pc, #272]	; (8006ca0 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3301      	adds	r3, #1
 8006b94:	4a42      	ldr	r2, [pc, #264]	; (8006ca0 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8006b96:	6013      	str	r3, [r2, #0]

//			if (ADC_cake[0] > 1900) {       //PA5
			if (i4 == 500) {
 8006b98:	4b41      	ldr	r3, [pc, #260]	; (8006ca0 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006ba0:	d113      	bne.n	8006bca <HAL_TIM_PeriodElapsedCallback+0x48e>
				unsuck_success1 = 1;
 8006ba2:	4b40      	ldr	r3, [pc, #256]	; (8006ca4 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(7, 1300, 200);
 8006ba8:	22c8      	movs	r2, #200	; 0xc8
 8006baa:	f240 5114 	movw	r1, #1300	; 0x514
 8006bae:	2007      	movs	r0, #7
 8006bb0:	f7fa f8fc 	bl	8000dac <UART_Send_SetMotorPosition>
				i4 = 0;
 8006bb4:	4b3a      	ldr	r3, [pc, #232]	; (8006ca0 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	601a      	str	r2, [r3, #0]
				unsuck_temp--;
 8006bba:	4b3b      	ldr	r3, [pc, #236]	; (8006ca8 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	4a39      	ldr	r2, [pc, #228]	; (8006ca8 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8006bc2:	6013      	str	r3, [r2, #0]
				unsuck[0] = 0;
 8006bc4:	4b35      	ldr	r3, [pc, #212]	; (8006c9c <HAL_TIM_PeriodElapsedCallback+0x560>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	601a      	str	r2, [r3, #0]
				//			}
			}
		}
		if (unsuck[1] == 1) {        // press_sensor4 feedback(unsuck)
 8006bca:	4b34      	ldr	r3, [pc, #208]	; (8006c9c <HAL_TIM_PeriodElapsedCallback+0x560>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d11d      	bne.n	8006c0e <HAL_TIM_PeriodElapsedCallback+0x4d2>
			i5++;
 8006bd2:	4b36      	ldr	r3, [pc, #216]	; (8006cac <HAL_TIM_PeriodElapsedCallback+0x570>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	4a34      	ldr	r2, [pc, #208]	; (8006cac <HAL_TIM_PeriodElapsedCallback+0x570>)
 8006bda:	6013      	str	r3, [r2, #0]
//			if (ADC_cake[1] > 1900) {               //PA6
			if (i5 == 500) {
 8006bdc:	4b33      	ldr	r3, [pc, #204]	; (8006cac <HAL_TIM_PeriodElapsedCallback+0x570>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006be4:	d113      	bne.n	8006c0e <HAL_TIM_PeriodElapsedCallback+0x4d2>
				unsuck_success4 = 1;
 8006be6:	4b32      	ldr	r3, [pc, #200]	; (8006cb0 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8006be8:	2201      	movs	r2, #1
 8006bea:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(4, 1200, 200);
 8006bec:	22c8      	movs	r2, #200	; 0xc8
 8006bee:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006bf2:	2004      	movs	r0, #4
 8006bf4:	f7fa f8da 	bl	8000dac <UART_Send_SetMotorPosition>
				i5 = 0;
 8006bf8:	4b2c      	ldr	r3, [pc, #176]	; (8006cac <HAL_TIM_PeriodElapsedCallback+0x570>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	601a      	str	r2, [r3, #0]
				unsuck_temp--;
 8006bfe:	4b2a      	ldr	r3, [pc, #168]	; (8006ca8 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	4a28      	ldr	r2, [pc, #160]	; (8006ca8 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8006c06:	6013      	str	r3, [r2, #0]
				unsuck[1] = 0;
 8006c08:	4b24      	ldr	r3, [pc, #144]	; (8006c9c <HAL_TIM_PeriodElapsedCallback+0x560>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	605a      	str	r2, [r3, #4]
				//			}
			}
		}
		if (unsuck[2] == 1) {      //press_sensor3 feedback(unsuck)
 8006c0e:	4b23      	ldr	r3, [pc, #140]	; (8006c9c <HAL_TIM_PeriodElapsedCallback+0x560>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d11d      	bne.n	8006c52 <HAL_TIM_PeriodElapsedCallback+0x516>
			i6++;
 8006c16:	4b27      	ldr	r3, [pc, #156]	; (8006cb4 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	4a25      	ldr	r2, [pc, #148]	; (8006cb4 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8006c1e:	6013      	str	r3, [r2, #0]
//			if (ADC_cake[2] > 1900) {          //PA7
			if (i6 == 500) {
 8006c20:	4b24      	ldr	r3, [pc, #144]	; (8006cb4 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006c28:	d113      	bne.n	8006c52 <HAL_TIM_PeriodElapsedCallback+0x516>
				unsuck_success3 = 1;
 8006c2a:	4b23      	ldr	r3, [pc, #140]	; (8006cb8 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(3, 1200, 200);
 8006c30:	22c8      	movs	r2, #200	; 0xc8
 8006c32:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006c36:	2003      	movs	r0, #3
 8006c38:	f7fa f8b8 	bl	8000dac <UART_Send_SetMotorPosition>
				i6 = 0;
 8006c3c:	4b1d      	ldr	r3, [pc, #116]	; (8006cb4 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]
				unsuck_temp--;
 8006c42:	4b19      	ldr	r3, [pc, #100]	; (8006ca8 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3b01      	subs	r3, #1
 8006c48:	4a17      	ldr	r2, [pc, #92]	; (8006ca8 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8006c4a:	6013      	str	r3, [r2, #0]
				unsuck[2] = 0;
 8006c4c:	4b13      	ldr	r3, [pc, #76]	; (8006c9c <HAL_TIM_PeriodElapsedCallback+0x560>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	609a      	str	r2, [r3, #8]

	}
//	if (htim->Instance == TIM8) {
//
//	}
	if (htim->Instance == TIM10) {
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a19      	ldr	r2, [pc, #100]	; (8006cbc <HAL_TIM_PeriodElapsedCallback+0x580>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	f040 8215 	bne.w	8007088 <HAL_TIM_PeriodElapsedCallback+0x94c>
		for (int i = 0; i < 4; i++) {
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60fb      	str	r3, [r7, #12]
 8006c62:	e14d      	b.n	8006f00 <HAL_TIM_PeriodElapsedCallback+0x7c4>
 8006c64:	20001564 	.word	0x20001564
 8006c68:	20001570 	.word	0x20001570
 8006c6c:	20000014 	.word	0x20000014
 8006c70:	20001574 	.word	0x20001574
 8006c74:	20001578 	.word	0x20001578
 8006c78:	40001400 	.word	0x40001400
 8006c7c:	20001484 	.word	0x20001484
 8006c80:	200014c4 	.word	0x200014c4
 8006c84:	200014ac 	.word	0x200014ac
 8006c88:	200014a4 	.word	0x200014a4
 8006c8c:	200014c8 	.word	0x200014c8
 8006c90:	200014b0 	.word	0x200014b0
 8006c94:	200014cc 	.word	0x200014cc
 8006c98:	200014b4 	.word	0x200014b4
 8006c9c:	20001494 	.word	0x20001494
 8006ca0:	200014d0 	.word	0x200014d0
 8006ca4:	200014b8 	.word	0x200014b8
 8006ca8:	200014a8 	.word	0x200014a8
 8006cac:	200014d4 	.word	0x200014d4
 8006cb0:	200014bc 	.word	0x200014bc
 8006cb4:	200014d8 	.word	0x200014d8
 8006cb8:	200014c0 	.word	0x200014c0
 8006cbc:	40014400 	.word	0x40014400
			if (suck[i] == 1) {
 8006cc0:	4aa5      	ldr	r2, [pc, #660]	; (8006f58 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	f040 80c5 	bne.w	8006e58 <HAL_TIM_PeriodElapsedCallback+0x71c>
				if (S == 0 && i == 0) {
 8006cce:	4ba3      	ldr	r3, [pc, #652]	; (8006f5c <HAL_TIM_PeriodElapsedCallback+0x820>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d108      	bne.n	8006ce8 <HAL_TIM_PeriodElapsedCallback+0x5ac>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d105      	bne.n	8006ce8 <HAL_TIM_PeriodElapsedCallback+0x5ac>
					UART_Send_SetMotorPosition(7, 1440, 200);
 8006cdc:	22c8      	movs	r2, #200	; 0xc8
 8006cde:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8006ce2:	2007      	movs	r0, #7
 8006ce4:	f7fa f862 	bl	8000dac <UART_Send_SetMotorPosition>
				}
				if (S == 0 && i == 1) {
 8006ce8:	4b9c      	ldr	r3, [pc, #624]	; (8006f5c <HAL_TIM_PeriodElapsedCallback+0x820>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d108      	bne.n	8006d02 <HAL_TIM_PeriodElapsedCallback+0x5c6>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d105      	bne.n	8006d02 <HAL_TIM_PeriodElapsedCallback+0x5c6>
					UART_Send_SetMotorPosition(4, 1440, 200);
 8006cf6:	22c8      	movs	r2, #200	; 0xc8
 8006cf8:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8006cfc:	2004      	movs	r0, #4
 8006cfe:	f7fa f855 	bl	8000dac <UART_Send_SetMotorPosition>
				}
				if (S == 0 && i == 2) {
 8006d02:	4b96      	ldr	r3, [pc, #600]	; (8006f5c <HAL_TIM_PeriodElapsedCallback+0x820>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d108      	bne.n	8006d1c <HAL_TIM_PeriodElapsedCallback+0x5e0>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d105      	bne.n	8006d1c <HAL_TIM_PeriodElapsedCallback+0x5e0>
					UART_Send_SetMotorPosition(3, 1440, 200);
 8006d10:	22c8      	movs	r2, #200	; 0xc8
 8006d12:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8006d16:	2003      	movs	r0, #3
 8006d18:	f7fa f848 	bl	8000dac <UART_Send_SetMotorPosition>
				}
				if (S == 1 && i == 0) {
 8006d1c:	4b8f      	ldr	r3, [pc, #572]	; (8006f5c <HAL_TIM_PeriodElapsedCallback+0x820>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d108      	bne.n	8006d36 <HAL_TIM_PeriodElapsedCallback+0x5fa>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d105      	bne.n	8006d36 <HAL_TIM_PeriodElapsedCallback+0x5fa>
					UART_Send_SetMotorPosition(7, 1500, 200);
 8006d2a:	22c8      	movs	r2, #200	; 0xc8
 8006d2c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8006d30:	2007      	movs	r0, #7
 8006d32:	f7fa f83b 	bl	8000dac <UART_Send_SetMotorPosition>
				}
				if (S == 1 && i == 1) {
 8006d36:	4b89      	ldr	r3, [pc, #548]	; (8006f5c <HAL_TIM_PeriodElapsedCallback+0x820>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d108      	bne.n	8006d50 <HAL_TIM_PeriodElapsedCallback+0x614>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d105      	bne.n	8006d50 <HAL_TIM_PeriodElapsedCallback+0x614>
					UART_Send_SetMotorPosition(4, 1500, 200);
 8006d44:	22c8      	movs	r2, #200	; 0xc8
 8006d46:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8006d4a:	2004      	movs	r0, #4
 8006d4c:	f7fa f82e 	bl	8000dac <UART_Send_SetMotorPosition>
				}
				if (S == 1 && i == 2) {
 8006d50:	4b82      	ldr	r3, [pc, #520]	; (8006f5c <HAL_TIM_PeriodElapsedCallback+0x820>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d108      	bne.n	8006d6a <HAL_TIM_PeriodElapsedCallback+0x62e>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d105      	bne.n	8006d6a <HAL_TIM_PeriodElapsedCallback+0x62e>
					UART_Send_SetMotorPosition(3, 1500, 200);
 8006d5e:	22c8      	movs	r2, #200	; 0xc8
 8006d60:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8006d64:	2003      	movs	r0, #3
 8006d66:	f7fa f821 	bl	8000dac <UART_Send_SetMotorPosition>
				}
				if (S == 1 && i == 3) {
 8006d6a:	4b7c      	ldr	r3, [pc, #496]	; (8006f5c <HAL_TIM_PeriodElapsedCallback+0x820>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d109      	bne.n	8006d86 <HAL_TIM_PeriodElapsedCallback+0x64a>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d106      	bne.n	8006d86 <HAL_TIM_PeriodElapsedCallback+0x64a>
					UART_Send_SetMotorPosition(5, 1330, 300);
 8006d78:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006d7c:	f240 5132 	movw	r1, #1330	; 0x532
 8006d80:	2005      	movs	r0, #5
 8006d82:	f7fa f813 	bl	8000dac <UART_Send_SetMotorPosition>
				}
				if (S == 2 && i == 0) {
 8006d86:	4b75      	ldr	r3, [pc, #468]	; (8006f5c <HAL_TIM_PeriodElapsedCallback+0x820>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d108      	bne.n	8006da0 <HAL_TIM_PeriodElapsedCallback+0x664>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d105      	bne.n	8006da0 <HAL_TIM_PeriodElapsedCallback+0x664>
					UART_Send_SetMotorPosition(7, 1590, 200);
 8006d94:	22c8      	movs	r2, #200	; 0xc8
 8006d96:	f240 6136 	movw	r1, #1590	; 0x636
 8006d9a:	2007      	movs	r0, #7
 8006d9c:	f7fa f806 	bl	8000dac <UART_Send_SetMotorPosition>
				}
				if (S == 2 && i == 1) {
 8006da0:	4b6e      	ldr	r3, [pc, #440]	; (8006f5c <HAL_TIM_PeriodElapsedCallback+0x820>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d108      	bne.n	8006dba <HAL_TIM_PeriodElapsedCallback+0x67e>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d105      	bne.n	8006dba <HAL_TIM_PeriodElapsedCallback+0x67e>
					UART_Send_SetMotorPosition(4, 1590, 200);
 8006dae:	22c8      	movs	r2, #200	; 0xc8
 8006db0:	f240 6136 	movw	r1, #1590	; 0x636
 8006db4:	2004      	movs	r0, #4
 8006db6:	f7f9 fff9 	bl	8000dac <UART_Send_SetMotorPosition>
				}
				if (S == 2 && i == 2) {
 8006dba:	4b68      	ldr	r3, [pc, #416]	; (8006f5c <HAL_TIM_PeriodElapsedCallback+0x820>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d108      	bne.n	8006dd4 <HAL_TIM_PeriodElapsedCallback+0x698>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d105      	bne.n	8006dd4 <HAL_TIM_PeriodElapsedCallback+0x698>
					UART_Send_SetMotorPosition(3, 1590, 200);
 8006dc8:	22c8      	movs	r2, #200	; 0xc8
 8006dca:	f240 6136 	movw	r1, #1590	; 0x636
 8006dce:	2003      	movs	r0, #3
 8006dd0:	f7f9 ffec 	bl	8000dac <UART_Send_SetMotorPosition>
				}
				if (S == 2 && i == 3) {
 8006dd4:	4b61      	ldr	r3, [pc, #388]	; (8006f5c <HAL_TIM_PeriodElapsedCallback+0x820>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d109      	bne.n	8006df0 <HAL_TIM_PeriodElapsedCallback+0x6b4>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	d106      	bne.n	8006df0 <HAL_TIM_PeriodElapsedCallback+0x6b4>
					UART_Send_SetMotorPosition(5, 1350, 300);
 8006de2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006de6:	f240 5146 	movw	r1, #1350	; 0x546
 8006dea:	2005      	movs	r0, #5
 8006dec:	f7f9 ffde 	bl	8000dac <UART_Send_SetMotorPosition>
				}
				if (S == 3 && i == 0) {
 8006df0:	4b5a      	ldr	r3, [pc, #360]	; (8006f5c <HAL_TIM_PeriodElapsedCallback+0x820>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d108      	bne.n	8006e0a <HAL_TIM_PeriodElapsedCallback+0x6ce>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d105      	bne.n	8006e0a <HAL_TIM_PeriodElapsedCallback+0x6ce>
					UART_Send_SetMotorPosition(7, 1715, 200);
 8006dfe:	22c8      	movs	r2, #200	; 0xc8
 8006e00:	f240 61b3 	movw	r1, #1715	; 0x6b3
 8006e04:	2007      	movs	r0, #7
 8006e06:	f7f9 ffd1 	bl	8000dac <UART_Send_SetMotorPosition>
				}
				if (S == 3 && i == 1) {
 8006e0a:	4b54      	ldr	r3, [pc, #336]	; (8006f5c <HAL_TIM_PeriodElapsedCallback+0x820>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d108      	bne.n	8006e24 <HAL_TIM_PeriodElapsedCallback+0x6e8>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d105      	bne.n	8006e24 <HAL_TIM_PeriodElapsedCallback+0x6e8>
					UART_Send_SetMotorPosition(4, 1715, 200);
 8006e18:	22c8      	movs	r2, #200	; 0xc8
 8006e1a:	f240 61b3 	movw	r1, #1715	; 0x6b3
 8006e1e:	2004      	movs	r0, #4
 8006e20:	f7f9 ffc4 	bl	8000dac <UART_Send_SetMotorPosition>
				}
				if (S == 3 && i == 2) {
 8006e24:	4b4d      	ldr	r3, [pc, #308]	; (8006f5c <HAL_TIM_PeriodElapsedCallback+0x820>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b03      	cmp	r3, #3
 8006e2a:	d108      	bne.n	8006e3e <HAL_TIM_PeriodElapsedCallback+0x702>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d105      	bne.n	8006e3e <HAL_TIM_PeriodElapsedCallback+0x702>
					UART_Send_SetMotorPosition(3, 1715, 200);
 8006e32:	22c8      	movs	r2, #200	; 0xc8
 8006e34:	f240 61b3 	movw	r1, #1715	; 0x6b3
 8006e38:	2003      	movs	r0, #3
 8006e3a:	f7f9 ffb7 	bl	8000dac <UART_Send_SetMotorPosition>
				}
				if (S == 3 && i == 3) {
 8006e3e:	4b47      	ldr	r3, [pc, #284]	; (8006f5c <HAL_TIM_PeriodElapsedCallback+0x820>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d108      	bne.n	8006e58 <HAL_TIM_PeriodElapsedCallback+0x71c>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2b03      	cmp	r3, #3
 8006e4a:	d105      	bne.n	8006e58 <HAL_TIM_PeriodElapsedCallback+0x71c>
					UART_Send_SetMotorPosition(5, 1450, 200);
 8006e4c:	22c8      	movs	r2, #200	; 0xc8
 8006e4e:	f240 51aa 	movw	r1, #1450	; 0x5aa
 8006e52:	2005      	movs	r0, #5
 8006e54:	f7f9 ffaa 	bl	8000dac <UART_Send_SetMotorPosition>
				}

			}
			if (unsuck[i] == 1) {
 8006e58:	4a41      	ldr	r2, [pc, #260]	; (8006f60 <HAL_TIM_PeriodElapsedCallback+0x824>)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d11a      	bne.n	8006e9a <HAL_TIM_PeriodElapsedCallback+0x75e>
				if (i == 0)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d105      	bne.n	8006e76 <HAL_TIM_PeriodElapsedCallback+0x73a>
					UART_Send_SetMotorPosition(7, 1480, 200);
 8006e6a:	22c8      	movs	r2, #200	; 0xc8
 8006e6c:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
 8006e70:	2007      	movs	r0, #7
 8006e72:	f7f9 ff9b 	bl	8000dac <UART_Send_SetMotorPosition>
				if (i == 1)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d105      	bne.n	8006e88 <HAL_TIM_PeriodElapsedCallback+0x74c>
					UART_Send_SetMotorPosition(4, 1480, 200);
 8006e7c:	22c8      	movs	r2, #200	; 0xc8
 8006e7e:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
 8006e82:	2004      	movs	r0, #4
 8006e84:	f7f9 ff92 	bl	8000dac <UART_Send_SetMotorPosition>
				if (i == 2)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d105      	bne.n	8006e9a <HAL_TIM_PeriodElapsedCallback+0x75e>
					UART_Send_SetMotorPosition(3, 1480, 200);
 8006e8e:	22c8      	movs	r2, #200	; 0xc8
 8006e90:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
 8006e94:	2003      	movs	r0, #3
 8006e96:	f7f9 ff89 	bl	8000dac <UART_Send_SetMotorPosition>
			}
			if (unsuck[i] == 0 || suck[i] == 0) {
 8006e9a:	4a31      	ldr	r2, [pc, #196]	; (8006f60 <HAL_TIM_PeriodElapsedCallback+0x824>)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d005      	beq.n	8006eb2 <HAL_TIM_PeriodElapsedCallback+0x776>
 8006ea6:	4a2c      	ldr	r2, [pc, #176]	; (8006f58 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d123      	bne.n	8006efa <HAL_TIM_PeriodElapsedCallback+0x7be>
				if (i == 0)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d105      	bne.n	8006ec4 <HAL_TIM_PeriodElapsedCallback+0x788>
					UART_Send_SetMotorPosition(7, 1300, 200);
 8006eb8:	22c8      	movs	r2, #200	; 0xc8
 8006eba:	f240 5114 	movw	r1, #1300	; 0x514
 8006ebe:	2007      	movs	r0, #7
 8006ec0:	f7f9 ff74 	bl	8000dac <UART_Send_SetMotorPosition>
				if (i == 1)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d105      	bne.n	8006ed6 <HAL_TIM_PeriodElapsedCallback+0x79a>
					UART_Send_SetMotorPosition(4, 1200, 200);
 8006eca:	22c8      	movs	r2, #200	; 0xc8
 8006ecc:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006ed0:	2004      	movs	r0, #4
 8006ed2:	f7f9 ff6b 	bl	8000dac <UART_Send_SetMotorPosition>
				if (i == 2)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d105      	bne.n	8006ee8 <HAL_TIM_PeriodElapsedCallback+0x7ac>
					UART_Send_SetMotorPosition(3, 1200, 200);
 8006edc:	22c8      	movs	r2, #200	; 0xc8
 8006ede:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006ee2:	2003      	movs	r0, #3
 8006ee4:	f7f9 ff62 	bl	8000dac <UART_Send_SetMotorPosition>
				if (i == 3)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	d105      	bne.n	8006efa <HAL_TIM_PeriodElapsedCallback+0x7be>
					UART_Send_SetMotorPosition(5, 1200, 200);
 8006eee:	22c8      	movs	r2, #200	; 0xc8
 8006ef0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006ef4:	2005      	movs	r0, #5
 8006ef6:	f7f9 ff59 	bl	8000dac <UART_Send_SetMotorPosition>
		for (int i = 0; i < 4; i++) {
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3301      	adds	r3, #1
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	f77f aedc 	ble.w	8006cc0 <HAL_TIM_PeriodElapsedCallback+0x584>
			}
		}
		the_gate++;
 8006f08:	4b16      	ldr	r3, [pc, #88]	; (8006f64 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	4a15      	ldr	r2, [pc, #84]	; (8006f64 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8006f10:	6013      	str	r3, [r2, #0]
		door_temp++;
 8006f12:	4b15      	ldr	r3, [pc, #84]	; (8006f68 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3301      	adds	r3, #1
 8006f18:	4a13      	ldr	r2, [pc, #76]	; (8006f68 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8006f1a:	6013      	str	r3, [r2, #0]
		handshake_temp++;
 8006f1c:	4b13      	ldr	r3, [pc, #76]	; (8006f6c <HAL_TIM_PeriodElapsedCallback+0x830>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3301      	adds	r3, #1
 8006f22:	4a12      	ldr	r2, [pc, #72]	; (8006f6c <HAL_TIM_PeriodElapsedCallback+0x830>)
 8006f24:	6013      	str	r3, [r2, #0]
		if (suck_delay_temp == 1) {
 8006f26:	4b12      	ldr	r3, [pc, #72]	; (8006f70 <HAL_TIM_PeriodElapsedCallback+0x834>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d10e      	bne.n	8006f4c <HAL_TIM_PeriodElapsedCallback+0x810>
			suck_delay++;
 8006f2e:	4b11      	ldr	r3, [pc, #68]	; (8006f74 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3301      	adds	r3, #1
 8006f34:	4a0f      	ldr	r2, [pc, #60]	; (8006f74 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8006f36:	6013      	str	r3, [r2, #0]
			if (suck_delay == 30) {
 8006f38:	4b0e      	ldr	r3, [pc, #56]	; (8006f74 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b1e      	cmp	r3, #30
 8006f3e:	d105      	bne.n	8006f4c <HAL_TIM_PeriodElapsedCallback+0x810>
				suck_delay = 0;
 8006f40:	4b0c      	ldr	r3, [pc, #48]	; (8006f74 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
				suck_delay_temp = 0;
 8006f46:	4b0a      	ldr	r3, [pc, #40]	; (8006f70 <HAL_TIM_PeriodElapsedCallback+0x834>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]
			}
		}
		if (unsuck_delay_temp == 1) {
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d122      	bne.n	8006f9a <HAL_TIM_PeriodElapsedCallback+0x85e>
 8006f54:	e012      	b.n	8006f7c <HAL_TIM_PeriodElapsedCallback+0x840>
 8006f56:	bf00      	nop
 8006f58:	20001484 	.word	0x20001484
 8006f5c:	200015a4 	.word	0x200015a4
 8006f60:	20001494 	.word	0x20001494
 8006f64:	20001584 	.word	0x20001584
 8006f68:	2000157c 	.word	0x2000157c
 8006f6c:	20001580 	.word	0x20001580
 8006f70:	20001548 	.word	0x20001548
 8006f74:	20001538 	.word	0x20001538
 8006f78:	20001544 	.word	0x20001544
			unsuck_delay++;
 8006f7c:	4b4a      	ldr	r3, [pc, #296]	; (80070a8 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	4a49      	ldr	r2, [pc, #292]	; (80070a8 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8006f84:	6013      	str	r3, [r2, #0]
			if (unsuck_delay == 30) {
 8006f86:	4b48      	ldr	r3, [pc, #288]	; (80070a8 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b1e      	cmp	r3, #30
 8006f8c:	d105      	bne.n	8006f9a <HAL_TIM_PeriodElapsedCallback+0x85e>
				unsuck_delay = 0;
 8006f8e:	4b46      	ldr	r3, [pc, #280]	; (80070a8 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]
				unsuck_delay_temp = 0;
 8006f94:	4b45      	ldr	r3, [pc, #276]	; (80070ac <HAL_TIM_PeriodElapsedCallback+0x970>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	601a      	str	r2, [r3, #0]
			}
		}
		if (servo_delay_temp == 1) {
 8006f9a:	4b45      	ldr	r3, [pc, #276]	; (80070b0 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d10e      	bne.n	8006fc0 <HAL_TIM_PeriodElapsedCallback+0x884>
			servo_delay++;
 8006fa2:	4b44      	ldr	r3, [pc, #272]	; (80070b4 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	4a42      	ldr	r2, [pc, #264]	; (80070b4 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8006faa:	6013      	str	r3, [r2, #0]
			if (servo_delay == 40) {
 8006fac:	4b41      	ldr	r3, [pc, #260]	; (80070b4 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b28      	cmp	r3, #40	; 0x28
 8006fb2:	d105      	bne.n	8006fc0 <HAL_TIM_PeriodElapsedCallback+0x884>
				servo_delay = 0;
 8006fb4:	4b3f      	ldr	r3, [pc, #252]	; (80070b4 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]
				servo_delay_temp = 0;
 8006fba:	4b3d      	ldr	r3, [pc, #244]	; (80070b0 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]
			}
		}
		if (door_temp == 10) {
 8006fc0:	4b3d      	ldr	r3, [pc, #244]	; (80070b8 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b0a      	cmp	r3, #10
 8006fc6:	d104      	bne.n	8006fd2 <HAL_TIM_PeriodElapsedCallback+0x896>
			pub_the_hand_transfer();
 8006fc8:	f7fe fad6 	bl	8005578 <pub_the_hand_transfer>
			door_temp = 0;
 8006fcc:	4b3a      	ldr	r3, [pc, #232]	; (80070b8 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]

		}
		if (cherry_delay_temp == 1) {
 8006fd2:	4b3a      	ldr	r3, [pc, #232]	; (80070bc <HAL_TIM_PeriodElapsedCallback+0x980>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d10e      	bne.n	8006ff8 <HAL_TIM_PeriodElapsedCallback+0x8bc>
			cherry_delay++;
 8006fda:	4b39      	ldr	r3, [pc, #228]	; (80070c0 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	4a37      	ldr	r2, [pc, #220]	; (80070c0 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8006fe2:	6013      	str	r3, [r2, #0]
			if (cherry_delay == 80) {
 8006fe4:	4b36      	ldr	r3, [pc, #216]	; (80070c0 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b50      	cmp	r3, #80	; 0x50
 8006fea:	d105      	bne.n	8006ff8 <HAL_TIM_PeriodElapsedCallback+0x8bc>
				cherry_delay = 0;
 8006fec:	4b34      	ldr	r3, [pc, #208]	; (80070c0 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	601a      	str	r2, [r3, #0]
				cherry_delay_temp = 0;
 8006ff2:	4b32      	ldr	r3, [pc, #200]	; (80070bc <HAL_TIM_PeriodElapsedCallback+0x980>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	601a      	str	r2, [r3, #0]
//		}
//		if (the_gate == 1) {
//			pub_the_gate();
//			the_gate = 0;
//		}
		if (mission_array[0] >= 1 && temp_pub < 1) {
 8006ff8:	4b32      	ldr	r3, [pc, #200]	; (80070c4 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8006ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	dd0a      	ble.n	8007018 <HAL_TIM_PeriodElapsedCallback+0x8dc>
 8007002:	4b31      	ldr	r3, [pc, #196]	; (80070c8 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	dc06      	bgt.n	8007018 <HAL_TIM_PeriodElapsedCallback+0x8dc>
			pub_to_ros();
 800700a:	f7fe faa1 	bl	8005550 <pub_to_ros>
			temp_pub++;
 800700e:	4b2e      	ldr	r3, [pc, #184]	; (80070c8 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3301      	adds	r3, #1
 8007014:	4a2c      	ldr	r2, [pc, #176]	; (80070c8 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8007016:	6013      	str	r3, [r2, #0]
		}
		if (unload == 1) {
 8007018:	4b2c      	ldr	r3, [pc, #176]	; (80070cc <HAL_TIM_PeriodElapsedCallback+0x990>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d111      	bne.n	8007044 <HAL_TIM_PeriodElapsedCallback+0x908>
			unload_temp++;
 8007020:	4b2b      	ldr	r3, [pc, #172]	; (80070d0 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3301      	adds	r3, #1
 8007026:	4a2a      	ldr	r2, [pc, #168]	; (80070d0 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8007028:	6013      	str	r3, [r2, #0]
			if (unload_temp == 300) {
 800702a:	4b29      	ldr	r3, [pc, #164]	; (80070d0 <HAL_TIM_PeriodElapsedCallback+0x994>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007032:	d107      	bne.n	8007044 <HAL_TIM_PeriodElapsedCallback+0x908>
				score = 'i';
 8007034:	4b27      	ldr	r3, [pc, #156]	; (80070d4 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8007036:	2269      	movs	r2, #105	; 0x69
 8007038:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, &score, sizeof(score));
 800703a:	2201      	movs	r2, #1
 800703c:	4925      	ldr	r1, [pc, #148]	; (80070d4 <HAL_TIM_PeriodElapsedCallback+0x998>)
 800703e:	4826      	ldr	r0, [pc, #152]	; (80070d8 <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8007040:	f007 f842 	bl	800e0c8 <HAL_UART_Transmit_IT>
			}
		}
		for (score_num = 0; score_num < 10; score_num++) {
 8007044:	4b25      	ldr	r3, [pc, #148]	; (80070dc <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8007046:	2200      	movs	r2, #0
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	e018      	b.n	800707e <HAL_TIM_PeriodElapsedCallback+0x942>
			if (score_flag[score_num] >= 1) {
 800704c:	4b23      	ldr	r3, [pc, #140]	; (80070dc <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a23      	ldr	r2, [pc, #140]	; (80070e0 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8007052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007056:	2b00      	cmp	r3, #0
 8007058:	dd0c      	ble.n	8007074 <HAL_TIM_PeriodElapsedCallback+0x938>
				score_transfer();
 800705a:	f7fa fa99 	bl	8001590 <score_transfer>
				score_flag[score_num] -= 1;
 800705e:	4b1f      	ldr	r3, [pc, #124]	; (80070dc <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a1f      	ldr	r2, [pc, #124]	; (80070e0 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8007064:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007068:	4b1c      	ldr	r3, [pc, #112]	; (80070dc <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3a01      	subs	r2, #1
 800706e:	491c      	ldr	r1, [pc, #112]	; (80070e0 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8007070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (score_num = 0; score_num < 10; score_num++) {
 8007074:	4b19      	ldr	r3, [pc, #100]	; (80070dc <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3301      	adds	r3, #1
 800707a:	4a18      	ldr	r2, [pc, #96]	; (80070dc <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	4b17      	ldr	r3, [pc, #92]	; (80070dc <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b09      	cmp	r3, #9
 8007084:	dde2      	ble.n	800704c <HAL_TIM_PeriodElapsedCallback+0x910>
	}
	else if (htim->Instance == TIM13) {
		loop();
		counttry++;
	}
}
 8007086:	e00b      	b.n	80070a0 <HAL_TIM_PeriodElapsedCallback+0x964>
	else if (htim->Instance == TIM13) {
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a15      	ldr	r2, [pc, #84]	; (80070e4 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d106      	bne.n	80070a0 <HAL_TIM_PeriodElapsedCallback+0x964>
		loop();
 8007092:	f7fe faad 	bl	80055f0 <loop>
		counttry++;
 8007096:	4b14      	ldr	r3, [pc, #80]	; (80070e8 <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3301      	adds	r3, #1
 800709c:	4a12      	ldr	r2, [pc, #72]	; (80070e8 <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 800709e:	6013      	str	r3, [r2, #0]
}
 80070a0:	bf00      	nop
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	20001534 	.word	0x20001534
 80070ac:	20001544 	.word	0x20001544
 80070b0:	2000154c 	.word	0x2000154c
 80070b4:	2000153c 	.word	0x2000153c
 80070b8:	2000157c 	.word	0x2000157c
 80070bc:	20001554 	.word	0x20001554
 80070c0:	20001540 	.word	0x20001540
 80070c4:	20001558 	.word	0x20001558
 80070c8:	20001550 	.word	0x20001550
 80070cc:	20001598 	.word	0x20001598
 80070d0:	2000159c 	.word	0x2000159c
 80070d4:	200015ac 	.word	0x200015ac
 80070d8:	2000183c 	.word	0x2000183c
 80070dc:	200015a8 	.word	0x200015a8
 80070e0:	200014f4 	.word	0x200014f4
 80070e4:	40001c00 	.word	0x40001c00
 80070e8:	200014e8 	.word	0x200014e8

080070ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070f2:	2300      	movs	r3, #0
 80070f4:	607b      	str	r3, [r7, #4]
 80070f6:	4b18      	ldr	r3, [pc, #96]	; (8007158 <HAL_MspInit+0x6c>)
 80070f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fa:	4a17      	ldr	r2, [pc, #92]	; (8007158 <HAL_MspInit+0x6c>)
 80070fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007100:	6453      	str	r3, [r2, #68]	; 0x44
 8007102:	4b15      	ldr	r3, [pc, #84]	; (8007158 <HAL_MspInit+0x6c>)
 8007104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800710a:	607b      	str	r3, [r7, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800710e:	2300      	movs	r3, #0
 8007110:	603b      	str	r3, [r7, #0]
 8007112:	4b11      	ldr	r3, [pc, #68]	; (8007158 <HAL_MspInit+0x6c>)
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	4a10      	ldr	r2, [pc, #64]	; (8007158 <HAL_MspInit+0x6c>)
 8007118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800711c:	6413      	str	r3, [r2, #64]	; 0x40
 800711e:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <HAL_MspInit+0x6c>)
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800712a:	2007      	movs	r0, #7
 800712c:	f001 fc6a 	bl	8008a04 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8007130:	2200      	movs	r2, #0
 8007132:	2100      	movs	r1, #0
 8007134:	2005      	movs	r0, #5
 8007136:	f001 fc70 	bl	8008a1a <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800713a:	2005      	movs	r0, #5
 800713c:	f001 fc89 	bl	8008a52 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8007140:	2200      	movs	r2, #0
 8007142:	2100      	movs	r1, #0
 8007144:	2005      	movs	r0, #5
 8007146:	f001 fc68 	bl	8008a1a <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800714a:	2005      	movs	r0, #5
 800714c:	f001 fc81 	bl	8008a52 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	40023800 	.word	0x40023800

0800715c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007160:	e7fe      	b.n	8007160 <NMI_Handler+0x4>

08007162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007162:	b480      	push	{r7}
 8007164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007166:	e7fe      	b.n	8007166 <HardFault_Handler+0x4>

08007168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800716c:	e7fe      	b.n	800716c <MemManage_Handler+0x4>

0800716e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800716e:	b480      	push	{r7}
 8007170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007172:	e7fe      	b.n	8007172 <BusFault_Handler+0x4>

08007174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007178:	e7fe      	b.n	8007178 <UsageFault_Handler+0x4>

0800717a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800717a:	b480      	push	{r7}
 800717c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800717e:	bf00      	nop
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007188:	b480      	push	{r7}
 800718a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800718c:	bf00      	nop
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007196:	b480      	push	{r7}
 8007198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800719a:	bf00      	nop
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80071a8:	f001 f882 	bl	80082b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80071ac:	bf00      	nop
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80071b0:	b480      	push	{r7}
 80071b2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80071b4:	bf00      	nop
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80071c2:	2010      	movs	r0, #16
 80071c4:	f002 fb7e 	bl	80098c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80071c8:	bf00      	nop
 80071ca:	bd80      	pop	{r7, pc}

080071cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80071d0:	4802      	ldr	r0, [pc, #8]	; (80071dc <DMA1_Stream5_IRQHandler+0x10>)
 80071d2:	f001 fe5d 	bl	8008e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80071d6:	bf00      	nop
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20001a28 	.word	0x20001a28

080071e0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80071e4:	4802      	ldr	r0, [pc, #8]	; (80071f0 <DMA1_Stream6_IRQHandler+0x10>)
 80071e6:	f001 fe53 	bl	8008e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80071ea:	bf00      	nop
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	200019c8 	.word	0x200019c8

080071f4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80071f8:	4802      	ldr	r0, [pc, #8]	; (8007204 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80071fa:	f005 ffab 	bl	800d154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80071fe:	bf00      	nop
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	200015b4 	.word	0x200015b4

08007208 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800720c:	4803      	ldr	r0, [pc, #12]	; (800721c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800720e:	f005 ffa1 	bl	800d154 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8007212:	4803      	ldr	r0, [pc, #12]	; (8007220 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8007214:	f005 ff9e 	bl	800d154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007218:	bf00      	nop
 800721a:	bd80      	pop	{r7, pc}
 800721c:	200015b4 	.word	0x200015b4
 8007220:	20001764 	.word	0x20001764

08007224 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007228:	4803      	ldr	r0, [pc, #12]	; (8007238 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800722a:	f005 ff93 	bl	800d154 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800722e:	4803      	ldr	r0, [pc, #12]	; (800723c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8007230:	f005 ff90 	bl	800d154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8007234:	bf00      	nop
 8007236:	bd80      	pop	{r7, pc}
 8007238:	200015b4 	.word	0x200015b4
 800723c:	200017ac 	.word	0x200017ac

08007240 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007244:	4802      	ldr	r0, [pc, #8]	; (8007250 <TIM1_CC_IRQHandler+0x10>)
 8007246:	f005 ff85 	bl	800d154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800724a:	bf00      	nop
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	200015b4 	.word	0x200015b4

08007254 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8007258:	4802      	ldr	r0, [pc, #8]	; (8007264 <I2C1_EV_IRQHandler+0x10>)
 800725a:	f002 ffb3 	bl	800a1c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800725e:	bf00      	nop
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	200009d0 	.word	0x200009d0

08007268 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800726c:	4802      	ldr	r0, [pc, #8]	; (8007278 <I2C1_ER_IRQHandler+0x10>)
 800726e:	f003 f91a 	bl	800a4a6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8007272:	bf00      	nop
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	200009d0 	.word	0x200009d0

0800727c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007280:	4802      	ldr	r0, [pc, #8]	; (800728c <USART1_IRQHandler+0x10>)
 8007282:	f007 f815 	bl	800e2b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007286:	bf00      	nop
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	2000183c 	.word	0x2000183c

08007290 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007294:	4802      	ldr	r0, [pc, #8]	; (80072a0 <USART2_IRQHandler+0x10>)
 8007296:	f007 f80b 	bl	800e2b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800729a:	bf00      	nop
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	20001880 	.word	0x20001880

080072a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80072a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80072ac:	f002 fb0a 	bl	80098c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80072b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80072b4:	f002 fb06 	bl	80098c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80072b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80072bc:	f002 fb02 	bl	80098c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80072c0:	bf00      	nop
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80072c8:	4803      	ldr	r0, [pc, #12]	; (80072d8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80072ca:	f005 ff43 	bl	800d154 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80072ce:	4803      	ldr	r0, [pc, #12]	; (80072dc <TIM8_UP_TIM13_IRQHandler+0x18>)
 80072d0:	f005 ff40 	bl	800d154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80072d4:	bf00      	nop
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	2000171c 	.word	0x2000171c
 80072dc:	200017f4 	.word	0x200017f4

080072e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80072e4:	4802      	ldr	r0, [pc, #8]	; (80072f0 <TIM6_DAC_IRQHandler+0x10>)
 80072e6:	f005 ff35 	bl	800d154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80072ea:	bf00      	nop
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	2000168c 	.word	0x2000168c

080072f4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80072f8:	4802      	ldr	r0, [pc, #8]	; (8007304 <TIM7_IRQHandler+0x10>)
 80072fa:	f005 ff2b 	bl	800d154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80072fe:	bf00      	nop
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	200016d4 	.word	0x200016d4

08007308 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800730c:	4802      	ldr	r0, [pc, #8]	; (8007318 <DMA2_Stream0_IRQHandler+0x10>)
 800730e:	f001 fdbf 	bl	8008e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007312:	bf00      	nop
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20000914 	.word	0x20000914

0800731c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007320:	4802      	ldr	r0, [pc, #8]	; (800732c <DMA2_Stream2_IRQHandler+0x10>)
 8007322:	f001 fdb5 	bl	8008e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007326:	bf00      	nop
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20001908 	.word	0x20001908

08007330 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007334:	4802      	ldr	r0, [pc, #8]	; (8007340 <DMA2_Stream7_IRQHandler+0x10>)
 8007336:	f001 fdab 	bl	8008e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800733a:	bf00      	nop
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20001968 	.word	0x20001968

08007344 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007344:	b480      	push	{r7}
 8007346:	af00      	add	r7, sp, #0
	return 1;
 8007348:	2301      	movs	r3, #1
}
 800734a:	4618      	mov	r0, r3
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <_kill>:

int _kill(int pid, int sig)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800735e:	f00c fe65 	bl	801402c <__errno>
 8007362:	4603      	mov	r3, r0
 8007364:	2216      	movs	r2, #22
 8007366:	601a      	str	r2, [r3, #0]
	return -1;
 8007368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <_exit>:

void _exit (int status)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800737c:	f04f 31ff 	mov.w	r1, #4294967295
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff ffe7 	bl	8007354 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007386:	e7fe      	b.n	8007386 <_exit+0x12>

08007388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007390:	4a14      	ldr	r2, [pc, #80]	; (80073e4 <_sbrk+0x5c>)
 8007392:	4b15      	ldr	r3, [pc, #84]	; (80073e8 <_sbrk+0x60>)
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800739c:	4b13      	ldr	r3, [pc, #76]	; (80073ec <_sbrk+0x64>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d102      	bne.n	80073aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80073a4:	4b11      	ldr	r3, [pc, #68]	; (80073ec <_sbrk+0x64>)
 80073a6:	4a12      	ldr	r2, [pc, #72]	; (80073f0 <_sbrk+0x68>)
 80073a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80073aa:	4b10      	ldr	r3, [pc, #64]	; (80073ec <_sbrk+0x64>)
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4413      	add	r3, r2
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d207      	bcs.n	80073c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80073b8:	f00c fe38 	bl	801402c <__errno>
 80073bc:	4603      	mov	r3, r0
 80073be:	220c      	movs	r2, #12
 80073c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80073c2:	f04f 33ff 	mov.w	r3, #4294967295
 80073c6:	e009      	b.n	80073dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80073c8:	4b08      	ldr	r3, [pc, #32]	; (80073ec <_sbrk+0x64>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80073ce:	4b07      	ldr	r3, [pc, #28]	; (80073ec <_sbrk+0x64>)
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4413      	add	r3, r2
 80073d6:	4a05      	ldr	r2, [pc, #20]	; (80073ec <_sbrk+0x64>)
 80073d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80073da:	68fb      	ldr	r3, [r7, #12]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	20020000 	.word	0x20020000
 80073e8:	00000400 	.word	0x00000400
 80073ec:	200015b0 	.word	0x200015b0
 80073f0:	20001ae0 	.word	0x20001ae0

080073f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80073f4:	b480      	push	{r7}
 80073f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80073f8:	4b06      	ldr	r3, [pc, #24]	; (8007414 <SystemInit+0x20>)
 80073fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073fe:	4a05      	ldr	r2, [pc, #20]	; (8007414 <SystemInit+0x20>)
 8007400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007408:	bf00      	nop
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	e000ed00 	.word	0xe000ed00

08007418 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b092      	sub	sp, #72	; 0x48
 800741c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800741e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	605a      	str	r2, [r3, #4]
 8007432:	609a      	str	r2, [r3, #8]
 8007434:	60da      	str	r2, [r3, #12]
 8007436:	611a      	str	r2, [r3, #16]
 8007438:	615a      	str	r2, [r3, #20]
 800743a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800743c:	1d3b      	adds	r3, r7, #4
 800743e:	2220      	movs	r2, #32
 8007440:	2100      	movs	r1, #0
 8007442:	4618      	mov	r0, r3
 8007444:	f00c fe2a 	bl	801409c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007448:	4b32      	ldr	r3, [pc, #200]	; (8007514 <MX_TIM1_Init+0xfc>)
 800744a:	4a33      	ldr	r2, [pc, #204]	; (8007518 <MX_TIM1_Init+0x100>)
 800744c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800744e:	4b31      	ldr	r3, [pc, #196]	; (8007514 <MX_TIM1_Init+0xfc>)
 8007450:	22a7      	movs	r2, #167	; 0xa7
 8007452:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007454:	4b2f      	ldr	r3, [pc, #188]	; (8007514 <MX_TIM1_Init+0xfc>)
 8007456:	2200      	movs	r2, #0
 8007458:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800745a:	4b2e      	ldr	r3, [pc, #184]	; (8007514 <MX_TIM1_Init+0xfc>)
 800745c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8007460:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007462:	4b2c      	ldr	r3, [pc, #176]	; (8007514 <MX_TIM1_Init+0xfc>)
 8007464:	2200      	movs	r2, #0
 8007466:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007468:	4b2a      	ldr	r3, [pc, #168]	; (8007514 <MX_TIM1_Init+0xfc>)
 800746a:	2200      	movs	r2, #0
 800746c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800746e:	4b29      	ldr	r3, [pc, #164]	; (8007514 <MX_TIM1_Init+0xfc>)
 8007470:	2200      	movs	r2, #0
 8007472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007474:	4827      	ldr	r0, [pc, #156]	; (8007514 <MX_TIM1_Init+0xfc>)
 8007476:	f005 fd55 	bl	800cf24 <HAL_TIM_PWM_Init>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8007480:	f7fc fa8c 	bl	800399c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007484:	2300      	movs	r3, #0
 8007486:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007488:	2300      	movs	r3, #0
 800748a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800748c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007490:	4619      	mov	r1, r3
 8007492:	4820      	ldr	r0, [pc, #128]	; (8007514 <MX_TIM1_Init+0xfc>)
 8007494:	f006 fc28 	bl	800dce8 <HAL_TIMEx_MasterConfigSynchronization>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800749e:	f7fc fa7d 	bl	800399c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80074a2:	2360      	movs	r3, #96	; 0x60
 80074a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80074aa:	2300      	movs	r3, #0
 80074ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80074ae:	2300      	movs	r3, #0
 80074b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80074b2:	2300      	movs	r3, #0
 80074b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80074b6:	2300      	movs	r3, #0
 80074b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80074ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074be:	220c      	movs	r2, #12
 80074c0:	4619      	mov	r1, r3
 80074c2:	4814      	ldr	r0, [pc, #80]	; (8007514 <MX_TIM1_Init+0xfc>)
 80074c4:	f005 ff4e 	bl	800d364 <HAL_TIM_PWM_ConfigChannel>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80074ce:	f7fc fa65 	bl	800399c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80074d2:	2300      	movs	r3, #0
 80074d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80074d6:	2300      	movs	r3, #0
 80074d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80074da:	2300      	movs	r3, #0
 80074dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80074de:	2300      	movs	r3, #0
 80074e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80074e2:	2300      	movs	r3, #0
 80074e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80074e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80074ec:	2300      	movs	r3, #0
 80074ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80074f0:	1d3b      	adds	r3, r7, #4
 80074f2:	4619      	mov	r1, r3
 80074f4:	4807      	ldr	r0, [pc, #28]	; (8007514 <MX_TIM1_Init+0xfc>)
 80074f6:	f006 fc73 	bl	800dde0 <HAL_TIMEx_ConfigBreakDeadTime>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8007500:	f7fc fa4c 	bl	800399c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8007504:	4803      	ldr	r0, [pc, #12]	; (8007514 <MX_TIM1_Init+0xfc>)
 8007506:	f000 fb35 	bl	8007b74 <HAL_TIM_MspPostInit>

}
 800750a:	bf00      	nop
 800750c:	3748      	adds	r7, #72	; 0x48
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	200015b4 	.word	0x200015b4
 8007518:	40010000 	.word	0x40010000

0800751c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08a      	sub	sp, #40	; 0x28
 8007520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007522:	f107 0320 	add.w	r3, r7, #32
 8007526:	2200      	movs	r2, #0
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800752c:	1d3b      	adds	r3, r7, #4
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	605a      	str	r2, [r3, #4]
 8007534:	609a      	str	r2, [r3, #8]
 8007536:	60da      	str	r2, [r3, #12]
 8007538:	611a      	str	r2, [r3, #16]
 800753a:	615a      	str	r2, [r3, #20]
 800753c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800753e:	4b28      	ldr	r3, [pc, #160]	; (80075e0 <MX_TIM2_Init+0xc4>)
 8007540:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007544:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 179;
 8007546:	4b26      	ldr	r3, [pc, #152]	; (80075e0 <MX_TIM2_Init+0xc4>)
 8007548:	22b3      	movs	r2, #179	; 0xb3
 800754a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800754c:	4b24      	ldr	r3, [pc, #144]	; (80075e0 <MX_TIM2_Init+0xc4>)
 800754e:	2200      	movs	r2, #0
 8007550:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8007552:	4b23      	ldr	r3, [pc, #140]	; (80075e0 <MX_TIM2_Init+0xc4>)
 8007554:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8007558:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800755a:	4b21      	ldr	r3, [pc, #132]	; (80075e0 <MX_TIM2_Init+0xc4>)
 800755c:	2200      	movs	r2, #0
 800755e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007560:	4b1f      	ldr	r3, [pc, #124]	; (80075e0 <MX_TIM2_Init+0xc4>)
 8007562:	2200      	movs	r2, #0
 8007564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007566:	481e      	ldr	r0, [pc, #120]	; (80075e0 <MX_TIM2_Init+0xc4>)
 8007568:	f005 fcdc 	bl	800cf24 <HAL_TIM_PWM_Init>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8007572:	f7fc fa13 	bl	800399c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007576:	2300      	movs	r3, #0
 8007578:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800757a:	2300      	movs	r3, #0
 800757c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800757e:	f107 0320 	add.w	r3, r7, #32
 8007582:	4619      	mov	r1, r3
 8007584:	4816      	ldr	r0, [pc, #88]	; (80075e0 <MX_TIM2_Init+0xc4>)
 8007586:	f006 fbaf 	bl	800dce8 <HAL_TIMEx_MasterConfigSynchronization>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8007590:	f7fc fa04 	bl	800399c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007594:	2360      	movs	r3, #96	; 0x60
 8007596:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800759c:	2300      	movs	r3, #0
 800759e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80075a0:	2300      	movs	r3, #0
 80075a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80075a4:	1d3b      	adds	r3, r7, #4
 80075a6:	2200      	movs	r2, #0
 80075a8:	4619      	mov	r1, r3
 80075aa:	480d      	ldr	r0, [pc, #52]	; (80075e0 <MX_TIM2_Init+0xc4>)
 80075ac:	f005 feda 	bl	800d364 <HAL_TIM_PWM_ConfigChannel>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80075b6:	f7fc f9f1 	bl	800399c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80075ba:	1d3b      	adds	r3, r7, #4
 80075bc:	2204      	movs	r2, #4
 80075be:	4619      	mov	r1, r3
 80075c0:	4807      	ldr	r0, [pc, #28]	; (80075e0 <MX_TIM2_Init+0xc4>)
 80075c2:	f005 fecf 	bl	800d364 <HAL_TIM_PWM_ConfigChannel>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80075cc:	f7fc f9e6 	bl	800399c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80075d0:	4803      	ldr	r0, [pc, #12]	; (80075e0 <MX_TIM2_Init+0xc4>)
 80075d2:	f000 facf 	bl	8007b74 <HAL_TIM_MspPostInit>

}
 80075d6:	bf00      	nop
 80075d8:	3728      	adds	r7, #40	; 0x28
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	200015fc 	.word	0x200015fc

080075e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b08a      	sub	sp, #40	; 0x28
 80075e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80075ea:	f107 0320 	add.w	r3, r7, #32
 80075ee:	2200      	movs	r2, #0
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80075f4:	1d3b      	adds	r3, r7, #4
 80075f6:	2200      	movs	r2, #0
 80075f8:	601a      	str	r2, [r3, #0]
 80075fa:	605a      	str	r2, [r3, #4]
 80075fc:	609a      	str	r2, [r3, #8]
 80075fe:	60da      	str	r2, [r3, #12]
 8007600:	611a      	str	r2, [r3, #16]
 8007602:	615a      	str	r2, [r3, #20]
 8007604:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007606:	4b32      	ldr	r3, [pc, #200]	; (80076d0 <MX_TIM3_Init+0xec>)
 8007608:	4a32      	ldr	r2, [pc, #200]	; (80076d4 <MX_TIM3_Init+0xf0>)
 800760a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 179;
 800760c:	4b30      	ldr	r3, [pc, #192]	; (80076d0 <MX_TIM3_Init+0xec>)
 800760e:	22b3      	movs	r2, #179	; 0xb3
 8007610:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007612:	4b2f      	ldr	r3, [pc, #188]	; (80076d0 <MX_TIM3_Init+0xec>)
 8007614:	2200      	movs	r2, #0
 8007616:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8007618:	4b2d      	ldr	r3, [pc, #180]	; (80076d0 <MX_TIM3_Init+0xec>)
 800761a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800761e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007620:	4b2b      	ldr	r3, [pc, #172]	; (80076d0 <MX_TIM3_Init+0xec>)
 8007622:	2200      	movs	r2, #0
 8007624:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007626:	4b2a      	ldr	r3, [pc, #168]	; (80076d0 <MX_TIM3_Init+0xec>)
 8007628:	2200      	movs	r2, #0
 800762a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800762c:	4828      	ldr	r0, [pc, #160]	; (80076d0 <MX_TIM3_Init+0xec>)
 800762e:	f005 fc79 	bl	800cf24 <HAL_TIM_PWM_Init>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8007638:	f7fc f9b0 	bl	800399c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800763c:	2300      	movs	r3, #0
 800763e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007640:	2300      	movs	r3, #0
 8007642:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007644:	f107 0320 	add.w	r3, r7, #32
 8007648:	4619      	mov	r1, r3
 800764a:	4821      	ldr	r0, [pc, #132]	; (80076d0 <MX_TIM3_Init+0xec>)
 800764c:	f006 fb4c 	bl	800dce8 <HAL_TIMEx_MasterConfigSynchronization>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8007656:	f7fc f9a1 	bl	800399c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800765a:	2360      	movs	r3, #96	; 0x60
 800765c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800765e:	2300      	movs	r3, #0
 8007660:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007662:	2300      	movs	r3, #0
 8007664:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007666:	2300      	movs	r3, #0
 8007668:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800766a:	1d3b      	adds	r3, r7, #4
 800766c:	2200      	movs	r2, #0
 800766e:	4619      	mov	r1, r3
 8007670:	4817      	ldr	r0, [pc, #92]	; (80076d0 <MX_TIM3_Init+0xec>)
 8007672:	f005 fe77 	bl	800d364 <HAL_TIM_PWM_ConfigChannel>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800767c:	f7fc f98e 	bl	800399c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007680:	1d3b      	adds	r3, r7, #4
 8007682:	2204      	movs	r2, #4
 8007684:	4619      	mov	r1, r3
 8007686:	4812      	ldr	r0, [pc, #72]	; (80076d0 <MX_TIM3_Init+0xec>)
 8007688:	f005 fe6c 	bl	800d364 <HAL_TIM_PWM_ConfigChannel>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8007692:	f7fc f983 	bl	800399c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007696:	1d3b      	adds	r3, r7, #4
 8007698:	2208      	movs	r2, #8
 800769a:	4619      	mov	r1, r3
 800769c:	480c      	ldr	r0, [pc, #48]	; (80076d0 <MX_TIM3_Init+0xec>)
 800769e:	f005 fe61 	bl	800d364 <HAL_TIM_PWM_ConfigChannel>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80076a8:	f7fc f978 	bl	800399c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80076ac:	1d3b      	adds	r3, r7, #4
 80076ae:	220c      	movs	r2, #12
 80076b0:	4619      	mov	r1, r3
 80076b2:	4807      	ldr	r0, [pc, #28]	; (80076d0 <MX_TIM3_Init+0xec>)
 80076b4:	f005 fe56 	bl	800d364 <HAL_TIM_PWM_ConfigChannel>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80076be:	f7fc f96d 	bl	800399c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80076c2:	4803      	ldr	r0, [pc, #12]	; (80076d0 <MX_TIM3_Init+0xec>)
 80076c4:	f000 fa56 	bl	8007b74 <HAL_TIM_MspPostInit>

}
 80076c8:	bf00      	nop
 80076ca:	3728      	adds	r7, #40	; 0x28
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	20001644 	.word	0x20001644
 80076d4:	40000400 	.word	0x40000400

080076d8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80076de:	463b      	mov	r3, r7
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80076e6:	4b15      	ldr	r3, [pc, #84]	; (800773c <MX_TIM6_Init+0x64>)
 80076e8:	4a15      	ldr	r2, [pc, #84]	; (8007740 <MX_TIM6_Init+0x68>)
 80076ea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 120;
 80076ec:	4b13      	ldr	r3, [pc, #76]	; (800773c <MX_TIM6_Init+0x64>)
 80076ee:	2278      	movs	r2, #120	; 0x78
 80076f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80076f2:	4b12      	ldr	r3, [pc, #72]	; (800773c <MX_TIM6_Init+0x64>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80076f8:	4b10      	ldr	r3, [pc, #64]	; (800773c <MX_TIM6_Init+0x64>)
 80076fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80076fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007700:	4b0e      	ldr	r3, [pc, #56]	; (800773c <MX_TIM6_Init+0x64>)
 8007702:	2200      	movs	r2, #0
 8007704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007706:	480d      	ldr	r0, [pc, #52]	; (800773c <MX_TIM6_Init+0x64>)
 8007708:	f005 fb4c 	bl	800cda4 <HAL_TIM_Base_Init>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8007712:	f7fc f943 	bl	800399c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007716:	2300      	movs	r3, #0
 8007718:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800771a:	2300      	movs	r3, #0
 800771c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800771e:	463b      	mov	r3, r7
 8007720:	4619      	mov	r1, r3
 8007722:	4806      	ldr	r0, [pc, #24]	; (800773c <MX_TIM6_Init+0x64>)
 8007724:	f006 fae0 	bl	800dce8 <HAL_TIMEx_MasterConfigSynchronization>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800772e:	f7fc f935 	bl	800399c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8007732:	bf00      	nop
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	2000168c 	.word	0x2000168c
 8007740:	40001000 	.word	0x40001000

08007744 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800774a:	463b      	mov	r3, r7
 800774c:	2200      	movs	r2, #0
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8007752:	4b15      	ldr	r3, [pc, #84]	; (80077a8 <MX_TIM7_Init+0x64>)
 8007754:	4a15      	ldr	r2, [pc, #84]	; (80077ac <MX_TIM7_Init+0x68>)
 8007756:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 167;
 8007758:	4b13      	ldr	r3, [pc, #76]	; (80077a8 <MX_TIM7_Init+0x64>)
 800775a:	22a7      	movs	r2, #167	; 0xa7
 800775c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800775e:	4b12      	ldr	r3, [pc, #72]	; (80077a8 <MX_TIM7_Init+0x64>)
 8007760:	2200      	movs	r2, #0
 8007762:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 8007764:	4b10      	ldr	r3, [pc, #64]	; (80077a8 <MX_TIM7_Init+0x64>)
 8007766:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800776a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800776c:	4b0e      	ldr	r3, [pc, #56]	; (80077a8 <MX_TIM7_Init+0x64>)
 800776e:	2200      	movs	r2, #0
 8007770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8007772:	480d      	ldr	r0, [pc, #52]	; (80077a8 <MX_TIM7_Init+0x64>)
 8007774:	f005 fb16 	bl	800cda4 <HAL_TIM_Base_Init>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800777e:	f7fc f90d 	bl	800399c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007782:	2300      	movs	r3, #0
 8007784:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007786:	2300      	movs	r3, #0
 8007788:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800778a:	463b      	mov	r3, r7
 800778c:	4619      	mov	r1, r3
 800778e:	4806      	ldr	r0, [pc, #24]	; (80077a8 <MX_TIM7_Init+0x64>)
 8007790:	f006 faaa 	bl	800dce8 <HAL_TIMEx_MasterConfigSynchronization>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800779a:	f7fc f8ff 	bl	800399c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800779e:	bf00      	nop
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	200016d4 	.word	0x200016d4
 80077ac:	40001400 	.word	0x40001400

080077b0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80077b6:	f107 0308 	add.w	r3, r7, #8
 80077ba:	2200      	movs	r2, #0
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	605a      	str	r2, [r3, #4]
 80077c0:	609a      	str	r2, [r3, #8]
 80077c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077c4:	463b      	mov	r3, r7
 80077c6:	2200      	movs	r2, #0
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80077cc:	4b1e      	ldr	r3, [pc, #120]	; (8007848 <MX_TIM8_Init+0x98>)
 80077ce:	4a1f      	ldr	r2, [pc, #124]	; (800784c <MX_TIM8_Init+0x9c>)
 80077d0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 80077d2:	4b1d      	ldr	r3, [pc, #116]	; (8007848 <MX_TIM8_Init+0x98>)
 80077d4:	223f      	movs	r2, #63	; 0x3f
 80077d6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077d8:	4b1b      	ldr	r3, [pc, #108]	; (8007848 <MX_TIM8_Init+0x98>)
 80077da:	2200      	movs	r2, #0
 80077dc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 80077de:	4b1a      	ldr	r3, [pc, #104]	; (8007848 <MX_TIM8_Init+0x98>)
 80077e0:	2263      	movs	r2, #99	; 0x63
 80077e2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077e4:	4b18      	ldr	r3, [pc, #96]	; (8007848 <MX_TIM8_Init+0x98>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80077ea:	4b17      	ldr	r3, [pc, #92]	; (8007848 <MX_TIM8_Init+0x98>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077f0:	4b15      	ldr	r3, [pc, #84]	; (8007848 <MX_TIM8_Init+0x98>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80077f6:	4814      	ldr	r0, [pc, #80]	; (8007848 <MX_TIM8_Init+0x98>)
 80077f8:	f005 fad4 	bl	800cda4 <HAL_TIM_Base_Init>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <MX_TIM8_Init+0x56>
  {
    Error_Handler();
 8007802:	f7fc f8cb 	bl	800399c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800780a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800780c:	f107 0308 	add.w	r3, r7, #8
 8007810:	4619      	mov	r1, r3
 8007812:	480d      	ldr	r0, [pc, #52]	; (8007848 <MX_TIM8_Init+0x98>)
 8007814:	f005 fe68 	bl	800d4e8 <HAL_TIM_ConfigClockSource>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <MX_TIM8_Init+0x72>
  {
    Error_Handler();
 800781e:	f7fc f8bd 	bl	800399c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007822:	2300      	movs	r3, #0
 8007824:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007826:	2300      	movs	r3, #0
 8007828:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800782a:	463b      	mov	r3, r7
 800782c:	4619      	mov	r1, r3
 800782e:	4806      	ldr	r0, [pc, #24]	; (8007848 <MX_TIM8_Init+0x98>)
 8007830:	f006 fa5a 	bl	800dce8 <HAL_TIMEx_MasterConfigSynchronization>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 800783a:	f7fc f8af 	bl	800399c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800783e:	bf00      	nop
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	2000171c 	.word	0x2000171c
 800784c:	40010400 	.word	0x40010400

08007850 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8007854:	4b0e      	ldr	r3, [pc, #56]	; (8007890 <MX_TIM10_Init+0x40>)
 8007856:	4a0f      	ldr	r2, [pc, #60]	; (8007894 <MX_TIM10_Init+0x44>)
 8007858:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 167;
 800785a:	4b0d      	ldr	r3, [pc, #52]	; (8007890 <MX_TIM10_Init+0x40>)
 800785c:	22a7      	movs	r2, #167	; 0xa7
 800785e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007860:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <MX_TIM10_Init+0x40>)
 8007862:	2200      	movs	r2, #0
 8007864:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8007866:	4b0a      	ldr	r3, [pc, #40]	; (8007890 <MX_TIM10_Init+0x40>)
 8007868:	f242 720f 	movw	r2, #9999	; 0x270f
 800786c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800786e:	4b08      	ldr	r3, [pc, #32]	; (8007890 <MX_TIM10_Init+0x40>)
 8007870:	2200      	movs	r2, #0
 8007872:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007874:	4b06      	ldr	r3, [pc, #24]	; (8007890 <MX_TIM10_Init+0x40>)
 8007876:	2200      	movs	r2, #0
 8007878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800787a:	4805      	ldr	r0, [pc, #20]	; (8007890 <MX_TIM10_Init+0x40>)
 800787c:	f005 fa92 	bl	800cda4 <HAL_TIM_Base_Init>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8007886:	f7fc f889 	bl	800399c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800788a:	bf00      	nop
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20001764 	.word	0x20001764
 8007894:	40014400 	.word	0x40014400

08007898 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800789c:	4b0d      	ldr	r3, [pc, #52]	; (80078d4 <MX_TIM11_Init+0x3c>)
 800789e:	4a0e      	ldr	r2, [pc, #56]	; (80078d8 <MX_TIM11_Init+0x40>)
 80078a0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 63;
 80078a2:	4b0c      	ldr	r3, [pc, #48]	; (80078d4 <MX_TIM11_Init+0x3c>)
 80078a4:	223f      	movs	r2, #63	; 0x3f
 80078a6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078a8:	4b0a      	ldr	r3, [pc, #40]	; (80078d4 <MX_TIM11_Init+0x3c>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 80078ae:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <MX_TIM11_Init+0x3c>)
 80078b0:	2263      	movs	r2, #99	; 0x63
 80078b2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078b4:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <MX_TIM11_Init+0x3c>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078ba:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <MX_TIM11_Init+0x3c>)
 80078bc:	2200      	movs	r2, #0
 80078be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80078c0:	4804      	ldr	r0, [pc, #16]	; (80078d4 <MX_TIM11_Init+0x3c>)
 80078c2:	f005 fa6f 	bl	800cda4 <HAL_TIM_Base_Init>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 80078cc:	f7fc f866 	bl	800399c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80078d0:	bf00      	nop
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	200017ac 	.word	0x200017ac
 80078d8:	40014800 	.word	0x40014800

080078dc <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80078e0:	4b0e      	ldr	r3, [pc, #56]	; (800791c <MX_TIM13_Init+0x40>)
 80078e2:	4a0f      	ldr	r2, [pc, #60]	; (8007920 <MX_TIM13_Init+0x44>)
 80078e4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 167;
 80078e6:	4b0d      	ldr	r3, [pc, #52]	; (800791c <MX_TIM13_Init+0x40>)
 80078e8:	22a7      	movs	r2, #167	; 0xa7
 80078ea:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078ec:	4b0b      	ldr	r3, [pc, #44]	; (800791c <MX_TIM13_Init+0x40>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 80078f2:	4b0a      	ldr	r3, [pc, #40]	; (800791c <MX_TIM13_Init+0x40>)
 80078f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80078f8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078fa:	4b08      	ldr	r3, [pc, #32]	; (800791c <MX_TIM13_Init+0x40>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007900:	4b06      	ldr	r3, [pc, #24]	; (800791c <MX_TIM13_Init+0x40>)
 8007902:	2200      	movs	r2, #0
 8007904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8007906:	4805      	ldr	r0, [pc, #20]	; (800791c <MX_TIM13_Init+0x40>)
 8007908:	f005 fa4c 	bl	800cda4 <HAL_TIM_Base_Init>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8007912:	f7fc f843 	bl	800399c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8007916:	bf00      	nop
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	200017f4 	.word	0x200017f4
 8007920:	40001c00 	.word	0x40001c00

08007924 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a2e      	ldr	r2, [pc, #184]	; (80079ec <HAL_TIM_PWM_MspInit+0xc8>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d12e      	bne.n	8007994 <HAL_TIM_PWM_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007936:	2300      	movs	r3, #0
 8007938:	617b      	str	r3, [r7, #20]
 800793a:	4b2d      	ldr	r3, [pc, #180]	; (80079f0 <HAL_TIM_PWM_MspInit+0xcc>)
 800793c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800793e:	4a2c      	ldr	r2, [pc, #176]	; (80079f0 <HAL_TIM_PWM_MspInit+0xcc>)
 8007940:	f043 0301 	orr.w	r3, r3, #1
 8007944:	6453      	str	r3, [r2, #68]	; 0x44
 8007946:	4b2a      	ldr	r3, [pc, #168]	; (80079f0 <HAL_TIM_PWM_MspInit+0xcc>)
 8007948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8007952:	2200      	movs	r2, #0
 8007954:	2100      	movs	r1, #0
 8007956:	2018      	movs	r0, #24
 8007958:	f001 f85f 	bl	8008a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800795c:	2018      	movs	r0, #24
 800795e:	f001 f878 	bl	8008a52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007962:	2200      	movs	r2, #0
 8007964:	2100      	movs	r1, #0
 8007966:	2019      	movs	r0, #25
 8007968:	f001 f857 	bl	8008a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800796c:	2019      	movs	r0, #25
 800796e:	f001 f870 	bl	8008a52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8007972:	2200      	movs	r2, #0
 8007974:	2100      	movs	r1, #0
 8007976:	201a      	movs	r0, #26
 8007978:	f001 f84f 	bl	8008a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800797c:	201a      	movs	r0, #26
 800797e:	f001 f868 	bl	8008a52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8007982:	2200      	movs	r2, #0
 8007984:	2100      	movs	r1, #0
 8007986:	201b      	movs	r0, #27
 8007988:	f001 f847 	bl	8008a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800798c:	201b      	movs	r0, #27
 800798e:	f001 f860 	bl	8008a52 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8007992:	e026      	b.n	80079e2 <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM2)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800799c:	d10e      	bne.n	80079bc <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800799e:	2300      	movs	r3, #0
 80079a0:	613b      	str	r3, [r7, #16]
 80079a2:	4b13      	ldr	r3, [pc, #76]	; (80079f0 <HAL_TIM_PWM_MspInit+0xcc>)
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	4a12      	ldr	r2, [pc, #72]	; (80079f0 <HAL_TIM_PWM_MspInit+0xcc>)
 80079a8:	f043 0301 	orr.w	r3, r3, #1
 80079ac:	6413      	str	r3, [r2, #64]	; 0x40
 80079ae:	4b10      	ldr	r3, [pc, #64]	; (80079f0 <HAL_TIM_PWM_MspInit+0xcc>)
 80079b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	613b      	str	r3, [r7, #16]
 80079b8:	693b      	ldr	r3, [r7, #16]
}
 80079ba:	e012      	b.n	80079e2 <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM3)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a0c      	ldr	r2, [pc, #48]	; (80079f4 <HAL_TIM_PWM_MspInit+0xd0>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d10d      	bne.n	80079e2 <HAL_TIM_PWM_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80079c6:	2300      	movs	r3, #0
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	4b09      	ldr	r3, [pc, #36]	; (80079f0 <HAL_TIM_PWM_MspInit+0xcc>)
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	4a08      	ldr	r2, [pc, #32]	; (80079f0 <HAL_TIM_PWM_MspInit+0xcc>)
 80079d0:	f043 0302 	orr.w	r3, r3, #2
 80079d4:	6413      	str	r3, [r2, #64]	; 0x40
 80079d6:	4b06      	ldr	r3, [pc, #24]	; (80079f0 <HAL_TIM_PWM_MspInit+0xcc>)
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	68fb      	ldr	r3, [r7, #12]
}
 80079e2:	bf00      	nop
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	40010000 	.word	0x40010000
 80079f0:	40023800 	.word	0x40023800
 80079f4:	40000400 	.word	0x40000400

080079f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b088      	sub	sp, #32
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a54      	ldr	r2, [pc, #336]	; (8007b58 <HAL_TIM_Base_MspInit+0x160>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d116      	bne.n	8007a38 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	61fb      	str	r3, [r7, #28]
 8007a0e:	4b53      	ldr	r3, [pc, #332]	; (8007b5c <HAL_TIM_Base_MspInit+0x164>)
 8007a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a12:	4a52      	ldr	r2, [pc, #328]	; (8007b5c <HAL_TIM_Base_MspInit+0x164>)
 8007a14:	f043 0310 	orr.w	r3, r3, #16
 8007a18:	6413      	str	r3, [r2, #64]	; 0x40
 8007a1a:	4b50      	ldr	r3, [pc, #320]	; (8007b5c <HAL_TIM_Base_MspInit+0x164>)
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	f003 0310 	and.w	r3, r3, #16
 8007a22:	61fb      	str	r3, [r7, #28]
 8007a24:	69fb      	ldr	r3, [r7, #28]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8007a26:	2200      	movs	r2, #0
 8007a28:	2100      	movs	r1, #0
 8007a2a:	2036      	movs	r0, #54	; 0x36
 8007a2c:	f000 fff5 	bl	8008a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007a30:	2036      	movs	r0, #54	; 0x36
 8007a32:	f001 f80e 	bl	8008a52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8007a36:	e08a      	b.n	8007b4e <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM7)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a48      	ldr	r2, [pc, #288]	; (8007b60 <HAL_TIM_Base_MspInit+0x168>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d116      	bne.n	8007a70 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007a42:	2300      	movs	r3, #0
 8007a44:	61bb      	str	r3, [r7, #24]
 8007a46:	4b45      	ldr	r3, [pc, #276]	; (8007b5c <HAL_TIM_Base_MspInit+0x164>)
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	4a44      	ldr	r2, [pc, #272]	; (8007b5c <HAL_TIM_Base_MspInit+0x164>)
 8007a4c:	f043 0320 	orr.w	r3, r3, #32
 8007a50:	6413      	str	r3, [r2, #64]	; 0x40
 8007a52:	4b42      	ldr	r3, [pc, #264]	; (8007b5c <HAL_TIM_Base_MspInit+0x164>)
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	61bb      	str	r3, [r7, #24]
 8007a5c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007a5e:	2200      	movs	r2, #0
 8007a60:	2100      	movs	r1, #0
 8007a62:	2037      	movs	r0, #55	; 0x37
 8007a64:	f000 ffd9 	bl	8008a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007a68:	2037      	movs	r0, #55	; 0x37
 8007a6a:	f000 fff2 	bl	8008a52 <HAL_NVIC_EnableIRQ>
}
 8007a6e:	e06e      	b.n	8007b4e <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM8)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a3b      	ldr	r2, [pc, #236]	; (8007b64 <HAL_TIM_Base_MspInit+0x16c>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d116      	bne.n	8007aa8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	617b      	str	r3, [r7, #20]
 8007a7e:	4b37      	ldr	r3, [pc, #220]	; (8007b5c <HAL_TIM_Base_MspInit+0x164>)
 8007a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a82:	4a36      	ldr	r2, [pc, #216]	; (8007b5c <HAL_TIM_Base_MspInit+0x164>)
 8007a84:	f043 0302 	orr.w	r3, r3, #2
 8007a88:	6453      	str	r3, [r2, #68]	; 0x44
 8007a8a:	4b34      	ldr	r3, [pc, #208]	; (8007b5c <HAL_TIM_Base_MspInit+0x164>)
 8007a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	617b      	str	r3, [r7, #20]
 8007a94:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007a96:	2200      	movs	r2, #0
 8007a98:	2100      	movs	r1, #0
 8007a9a:	202c      	movs	r0, #44	; 0x2c
 8007a9c:	f000 ffbd 	bl	8008a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007aa0:	202c      	movs	r0, #44	; 0x2c
 8007aa2:	f000 ffd6 	bl	8008a52 <HAL_NVIC_EnableIRQ>
}
 8007aa6:	e052      	b.n	8007b4e <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM10)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a2e      	ldr	r2, [pc, #184]	; (8007b68 <HAL_TIM_Base_MspInit+0x170>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d116      	bne.n	8007ae0 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	613b      	str	r3, [r7, #16]
 8007ab6:	4b29      	ldr	r3, [pc, #164]	; (8007b5c <HAL_TIM_Base_MspInit+0x164>)
 8007ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aba:	4a28      	ldr	r2, [pc, #160]	; (8007b5c <HAL_TIM_Base_MspInit+0x164>)
 8007abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8007ac2:	4b26      	ldr	r3, [pc, #152]	; (8007b5c <HAL_TIM_Base_MspInit+0x164>)
 8007ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aca:	613b      	str	r3, [r7, #16]
 8007acc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	2019      	movs	r0, #25
 8007ad4:	f000 ffa1 	bl	8008a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007ad8:	2019      	movs	r0, #25
 8007ada:	f000 ffba 	bl	8008a52 <HAL_NVIC_EnableIRQ>
}
 8007ade:	e036      	b.n	8007b4e <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM11)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a21      	ldr	r2, [pc, #132]	; (8007b6c <HAL_TIM_Base_MspInit+0x174>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d116      	bne.n	8007b18 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007aea:	2300      	movs	r3, #0
 8007aec:	60fb      	str	r3, [r7, #12]
 8007aee:	4b1b      	ldr	r3, [pc, #108]	; (8007b5c <HAL_TIM_Base_MspInit+0x164>)
 8007af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af2:	4a1a      	ldr	r2, [pc, #104]	; (8007b5c <HAL_TIM_Base_MspInit+0x164>)
 8007af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007af8:	6453      	str	r3, [r2, #68]	; 0x44
 8007afa:	4b18      	ldr	r3, [pc, #96]	; (8007b5c <HAL_TIM_Base_MspInit+0x164>)
 8007afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8007b06:	2200      	movs	r2, #0
 8007b08:	2100      	movs	r1, #0
 8007b0a:	201a      	movs	r0, #26
 8007b0c:	f000 ff85 	bl	8008a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8007b10:	201a      	movs	r0, #26
 8007b12:	f000 ff9e 	bl	8008a52 <HAL_NVIC_EnableIRQ>
}
 8007b16:	e01a      	b.n	8007b4e <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM13)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a14      	ldr	r2, [pc, #80]	; (8007b70 <HAL_TIM_Base_MspInit+0x178>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d115      	bne.n	8007b4e <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007b22:	2300      	movs	r3, #0
 8007b24:	60bb      	str	r3, [r7, #8]
 8007b26:	4b0d      	ldr	r3, [pc, #52]	; (8007b5c <HAL_TIM_Base_MspInit+0x164>)
 8007b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2a:	4a0c      	ldr	r2, [pc, #48]	; (8007b5c <HAL_TIM_Base_MspInit+0x164>)
 8007b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b30:	6413      	str	r3, [r2, #64]	; 0x40
 8007b32:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <HAL_TIM_Base_MspInit+0x164>)
 8007b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b3a:	60bb      	str	r3, [r7, #8]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2100      	movs	r1, #0
 8007b42:	202c      	movs	r0, #44	; 0x2c
 8007b44:	f000 ff69 	bl	8008a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007b48:	202c      	movs	r0, #44	; 0x2c
 8007b4a:	f000 ff82 	bl	8008a52 <HAL_NVIC_EnableIRQ>
}
 8007b4e:	bf00      	nop
 8007b50:	3720      	adds	r7, #32
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	40001000 	.word	0x40001000
 8007b5c:	40023800 	.word	0x40023800
 8007b60:	40001400 	.word	0x40001400
 8007b64:	40010400 	.word	0x40010400
 8007b68:	40014400 	.word	0x40014400
 8007b6c:	40014800 	.word	0x40014800
 8007b70:	40001c00 	.word	0x40001c00

08007b74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b08a      	sub	sp, #40	; 0x28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b7c:	f107 0314 	add.w	r3, r7, #20
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	605a      	str	r2, [r3, #4]
 8007b86:	609a      	str	r2, [r3, #8]
 8007b88:	60da      	str	r2, [r3, #12]
 8007b8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a37      	ldr	r2, [pc, #220]	; (8007c70 <HAL_TIM_MspPostInit+0xfc>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d11f      	bne.n	8007bd6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b96:	2300      	movs	r3, #0
 8007b98:	613b      	str	r3, [r7, #16]
 8007b9a:	4b36      	ldr	r3, [pc, #216]	; (8007c74 <HAL_TIM_MspPostInit+0x100>)
 8007b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9e:	4a35      	ldr	r2, [pc, #212]	; (8007c74 <HAL_TIM_MspPostInit+0x100>)
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8007ba6:	4b33      	ldr	r3, [pc, #204]	; (8007c74 <HAL_TIM_MspPostInit+0x100>)
 8007ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	613b      	str	r3, [r7, #16]
 8007bb0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007bb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bb8:	2302      	movs	r3, #2
 8007bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bc8:	f107 0314 	add.w	r3, r7, #20
 8007bcc:	4619      	mov	r1, r3
 8007bce:	482a      	ldr	r0, [pc, #168]	; (8007c78 <HAL_TIM_MspPostInit+0x104>)
 8007bd0:	f001 fbd6 	bl	8009380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007bd4:	e047      	b.n	8007c66 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM2)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bde:	d11e      	bne.n	8007c1e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007be0:	2300      	movs	r3, #0
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	4b23      	ldr	r3, [pc, #140]	; (8007c74 <HAL_TIM_MspPostInit+0x100>)
 8007be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be8:	4a22      	ldr	r2, [pc, #136]	; (8007c74 <HAL_TIM_MspPostInit+0x100>)
 8007bea:	f043 0301 	orr.w	r3, r3, #1
 8007bee:	6313      	str	r3, [r2, #48]	; 0x30
 8007bf0:	4b20      	ldr	r3, [pc, #128]	; (8007c74 <HAL_TIM_MspPostInit+0x100>)
 8007bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	60fb      	str	r3, [r7, #12]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c00:	2302      	movs	r3, #2
 8007c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c04:	2300      	movs	r3, #0
 8007c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c10:	f107 0314 	add.w	r3, r7, #20
 8007c14:	4619      	mov	r1, r3
 8007c16:	4818      	ldr	r0, [pc, #96]	; (8007c78 <HAL_TIM_MspPostInit+0x104>)
 8007c18:	f001 fbb2 	bl	8009380 <HAL_GPIO_Init>
}
 8007c1c:	e023      	b.n	8007c66 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a16      	ldr	r2, [pc, #88]	; (8007c7c <HAL_TIM_MspPostInit+0x108>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d11e      	bne.n	8007c66 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60bb      	str	r3, [r7, #8]
 8007c2c:	4b11      	ldr	r3, [pc, #68]	; (8007c74 <HAL_TIM_MspPostInit+0x100>)
 8007c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c30:	4a10      	ldr	r2, [pc, #64]	; (8007c74 <HAL_TIM_MspPostInit+0x100>)
 8007c32:	f043 0304 	orr.w	r3, r3, #4
 8007c36:	6313      	str	r3, [r2, #48]	; 0x30
 8007c38:	4b0e      	ldr	r3, [pc, #56]	; (8007c74 <HAL_TIM_MspPostInit+0x100>)
 8007c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	60bb      	str	r3, [r7, #8]
 8007c42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8007c44:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8007c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c52:	2300      	movs	r3, #0
 8007c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007c56:	2302      	movs	r3, #2
 8007c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c5a:	f107 0314 	add.w	r3, r7, #20
 8007c5e:	4619      	mov	r1, r3
 8007c60:	4807      	ldr	r0, [pc, #28]	; (8007c80 <HAL_TIM_MspPostInit+0x10c>)
 8007c62:	f001 fb8d 	bl	8009380 <HAL_GPIO_Init>
}
 8007c66:	bf00      	nop
 8007c68:	3728      	adds	r7, #40	; 0x28
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	40010000 	.word	0x40010000
 8007c74:	40023800 	.word	0x40023800
 8007c78:	40020000 	.word	0x40020000
 8007c7c:	40000400 	.word	0x40000400
 8007c80:	40020800 	.word	0x40020800

08007c84 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007c88:	4b11      	ldr	r3, [pc, #68]	; (8007cd0 <MX_USART1_UART_Init+0x4c>)
 8007c8a:	4a12      	ldr	r2, [pc, #72]	; (8007cd4 <MX_USART1_UART_Init+0x50>)
 8007c8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8007c8e:	4b10      	ldr	r3, [pc, #64]	; (8007cd0 <MX_USART1_UART_Init+0x4c>)
 8007c90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007c94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007c96:	4b0e      	ldr	r3, [pc, #56]	; (8007cd0 <MX_USART1_UART_Init+0x4c>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007c9c:	4b0c      	ldr	r3, [pc, #48]	; (8007cd0 <MX_USART1_UART_Init+0x4c>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007ca2:	4b0b      	ldr	r3, [pc, #44]	; (8007cd0 <MX_USART1_UART_Init+0x4c>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007ca8:	4b09      	ldr	r3, [pc, #36]	; (8007cd0 <MX_USART1_UART_Init+0x4c>)
 8007caa:	220c      	movs	r2, #12
 8007cac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007cae:	4b08      	ldr	r3, [pc, #32]	; (8007cd0 <MX_USART1_UART_Init+0x4c>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007cb4:	4b06      	ldr	r3, [pc, #24]	; (8007cd0 <MX_USART1_UART_Init+0x4c>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007cba:	4805      	ldr	r0, [pc, #20]	; (8007cd0 <MX_USART1_UART_Init+0x4c>)
 8007cbc:	f006 f8f6 	bl	800deac <HAL_UART_Init>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007cc6:	f7fb fe69 	bl	800399c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007cca:	bf00      	nop
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	2000183c 	.word	0x2000183c
 8007cd4:	40011000 	.word	0x40011000

08007cd8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007cdc:	4b11      	ldr	r3, [pc, #68]	; (8007d24 <MX_USART2_UART_Init+0x4c>)
 8007cde:	4a12      	ldr	r2, [pc, #72]	; (8007d28 <MX_USART2_UART_Init+0x50>)
 8007ce0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007ce2:	4b10      	ldr	r3, [pc, #64]	; (8007d24 <MX_USART2_UART_Init+0x4c>)
 8007ce4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007ce8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007cea:	4b0e      	ldr	r3, [pc, #56]	; (8007d24 <MX_USART2_UART_Init+0x4c>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007cf0:	4b0c      	ldr	r3, [pc, #48]	; (8007d24 <MX_USART2_UART_Init+0x4c>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007cf6:	4b0b      	ldr	r3, [pc, #44]	; (8007d24 <MX_USART2_UART_Init+0x4c>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007cfc:	4b09      	ldr	r3, [pc, #36]	; (8007d24 <MX_USART2_UART_Init+0x4c>)
 8007cfe:	220c      	movs	r2, #12
 8007d00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d02:	4b08      	ldr	r3, [pc, #32]	; (8007d24 <MX_USART2_UART_Init+0x4c>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d08:	4b06      	ldr	r3, [pc, #24]	; (8007d24 <MX_USART2_UART_Init+0x4c>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007d0e:	4805      	ldr	r0, [pc, #20]	; (8007d24 <MX_USART2_UART_Init+0x4c>)
 8007d10:	f006 f8cc 	bl	800deac <HAL_UART_Init>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007d1a:	f7fb fe3f 	bl	800399c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007d1e:	bf00      	nop
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20001880 	.word	0x20001880
 8007d28:	40004400 	.word	0x40004400

08007d2c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007d30:	4b10      	ldr	r3, [pc, #64]	; (8007d74 <MX_USART3_UART_Init+0x48>)
 8007d32:	4a11      	ldr	r2, [pc, #68]	; (8007d78 <MX_USART3_UART_Init+0x4c>)
 8007d34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 8007d36:	4b0f      	ldr	r3, [pc, #60]	; (8007d74 <MX_USART3_UART_Init+0x48>)
 8007d38:	4a10      	ldr	r2, [pc, #64]	; (8007d7c <MX_USART3_UART_Init+0x50>)
 8007d3a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007d3c:	4b0d      	ldr	r3, [pc, #52]	; (8007d74 <MX_USART3_UART_Init+0x48>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007d42:	4b0c      	ldr	r3, [pc, #48]	; (8007d74 <MX_USART3_UART_Init+0x48>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007d48:	4b0a      	ldr	r3, [pc, #40]	; (8007d74 <MX_USART3_UART_Init+0x48>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007d4e:	4b09      	ldr	r3, [pc, #36]	; (8007d74 <MX_USART3_UART_Init+0x48>)
 8007d50:	220c      	movs	r2, #12
 8007d52:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d54:	4b07      	ldr	r3, [pc, #28]	; (8007d74 <MX_USART3_UART_Init+0x48>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d5a:	4b06      	ldr	r3, [pc, #24]	; (8007d74 <MX_USART3_UART_Init+0x48>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007d60:	4804      	ldr	r0, [pc, #16]	; (8007d74 <MX_USART3_UART_Init+0x48>)
 8007d62:	f006 f8a3 	bl	800deac <HAL_UART_Init>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8007d6c:	f7fb fe16 	bl	800399c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007d70:	bf00      	nop
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	200018c4 	.word	0x200018c4
 8007d78:	40004800 	.word	0x40004800
 8007d7c:	0007a120 	.word	0x0007a120

08007d80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b08e      	sub	sp, #56	; 0x38
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	601a      	str	r2, [r3, #0]
 8007d90:	605a      	str	r2, [r3, #4]
 8007d92:	609a      	str	r2, [r3, #8]
 8007d94:	60da      	str	r2, [r3, #12]
 8007d96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a99      	ldr	r2, [pc, #612]	; (8008004 <HAL_UART_MspInit+0x284>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	f040 8096 	bne.w	8007ed0 <HAL_UART_MspInit+0x150>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007da4:	2300      	movs	r3, #0
 8007da6:	623b      	str	r3, [r7, #32]
 8007da8:	4b97      	ldr	r3, [pc, #604]	; (8008008 <HAL_UART_MspInit+0x288>)
 8007daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dac:	4a96      	ldr	r2, [pc, #600]	; (8008008 <HAL_UART_MspInit+0x288>)
 8007dae:	f043 0310 	orr.w	r3, r3, #16
 8007db2:	6453      	str	r3, [r2, #68]	; 0x44
 8007db4:	4b94      	ldr	r3, [pc, #592]	; (8008008 <HAL_UART_MspInit+0x288>)
 8007db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db8:	f003 0310 	and.w	r3, r3, #16
 8007dbc:	623b      	str	r3, [r7, #32]
 8007dbe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	61fb      	str	r3, [r7, #28]
 8007dc4:	4b90      	ldr	r3, [pc, #576]	; (8008008 <HAL_UART_MspInit+0x288>)
 8007dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc8:	4a8f      	ldr	r2, [pc, #572]	; (8008008 <HAL_UART_MspInit+0x288>)
 8007dca:	f043 0301 	orr.w	r3, r3, #1
 8007dce:	6313      	str	r3, [r2, #48]	; 0x30
 8007dd0:	4b8d      	ldr	r3, [pc, #564]	; (8008008 <HAL_UART_MspInit+0x288>)
 8007dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	61fb      	str	r3, [r7, #28]
 8007dda:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007ddc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007de2:	2302      	movs	r3, #2
 8007de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007de6:	2300      	movs	r3, #0
 8007de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dea:	2303      	movs	r3, #3
 8007dec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007dee:	2307      	movs	r3, #7
 8007df0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007df6:	4619      	mov	r1, r3
 8007df8:	4884      	ldr	r0, [pc, #528]	; (800800c <HAL_UART_MspInit+0x28c>)
 8007dfa:	f001 fac1 	bl	8009380 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8007dfe:	4b84      	ldr	r3, [pc, #528]	; (8008010 <HAL_UART_MspInit+0x290>)
 8007e00:	4a84      	ldr	r2, [pc, #528]	; (8008014 <HAL_UART_MspInit+0x294>)
 8007e02:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8007e04:	4b82      	ldr	r3, [pc, #520]	; (8008010 <HAL_UART_MspInit+0x290>)
 8007e06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007e0a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007e0c:	4b80      	ldr	r3, [pc, #512]	; (8008010 <HAL_UART_MspInit+0x290>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e12:	4b7f      	ldr	r3, [pc, #508]	; (8008010 <HAL_UART_MspInit+0x290>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007e18:	4b7d      	ldr	r3, [pc, #500]	; (8008010 <HAL_UART_MspInit+0x290>)
 8007e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e1e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007e20:	4b7b      	ldr	r3, [pc, #492]	; (8008010 <HAL_UART_MspInit+0x290>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007e26:	4b7a      	ldr	r3, [pc, #488]	; (8008010 <HAL_UART_MspInit+0x290>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8007e2c:	4b78      	ldr	r3, [pc, #480]	; (8008010 <HAL_UART_MspInit+0x290>)
 8007e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e32:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8007e34:	4b76      	ldr	r3, [pc, #472]	; (8008010 <HAL_UART_MspInit+0x290>)
 8007e36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007e3a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007e3c:	4b74      	ldr	r3, [pc, #464]	; (8008010 <HAL_UART_MspInit+0x290>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007e42:	4873      	ldr	r0, [pc, #460]	; (8008010 <HAL_UART_MspInit+0x290>)
 8007e44:	f000 fe2e 	bl	8008aa4 <HAL_DMA_Init>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8007e4e:	f7fb fda5 	bl	800399c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a6e      	ldr	r2, [pc, #440]	; (8008010 <HAL_UART_MspInit+0x290>)
 8007e56:	639a      	str	r2, [r3, #56]	; 0x38
 8007e58:	4a6d      	ldr	r2, [pc, #436]	; (8008010 <HAL_UART_MspInit+0x290>)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8007e5e:	4b6e      	ldr	r3, [pc, #440]	; (8008018 <HAL_UART_MspInit+0x298>)
 8007e60:	4a6e      	ldr	r2, [pc, #440]	; (800801c <HAL_UART_MspInit+0x29c>)
 8007e62:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8007e64:	4b6c      	ldr	r3, [pc, #432]	; (8008018 <HAL_UART_MspInit+0x298>)
 8007e66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007e6a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007e6c:	4b6a      	ldr	r3, [pc, #424]	; (8008018 <HAL_UART_MspInit+0x298>)
 8007e6e:	2240      	movs	r2, #64	; 0x40
 8007e70:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e72:	4b69      	ldr	r3, [pc, #420]	; (8008018 <HAL_UART_MspInit+0x298>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007e78:	4b67      	ldr	r3, [pc, #412]	; (8008018 <HAL_UART_MspInit+0x298>)
 8007e7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e7e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007e80:	4b65      	ldr	r3, [pc, #404]	; (8008018 <HAL_UART_MspInit+0x298>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007e86:	4b64      	ldr	r3, [pc, #400]	; (8008018 <HAL_UART_MspInit+0x298>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8007e8c:	4b62      	ldr	r3, [pc, #392]	; (8008018 <HAL_UART_MspInit+0x298>)
 8007e8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e92:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8007e94:	4b60      	ldr	r3, [pc, #384]	; (8008018 <HAL_UART_MspInit+0x298>)
 8007e96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007e9a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007e9c:	4b5e      	ldr	r3, [pc, #376]	; (8008018 <HAL_UART_MspInit+0x298>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007ea2:	485d      	ldr	r0, [pc, #372]	; (8008018 <HAL_UART_MspInit+0x298>)
 8007ea4:	f000 fdfe 	bl	8008aa4 <HAL_DMA_Init>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8007eae:	f7fb fd75 	bl	800399c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a58      	ldr	r2, [pc, #352]	; (8008018 <HAL_UART_MspInit+0x298>)
 8007eb6:	635a      	str	r2, [r3, #52]	; 0x34
 8007eb8:	4a57      	ldr	r2, [pc, #348]	; (8008018 <HAL_UART_MspInit+0x298>)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	2025      	movs	r0, #37	; 0x25
 8007ec4:	f000 fda9 	bl	8008a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007ec8:	2025      	movs	r0, #37	; 0x25
 8007eca:	f000 fdc2 	bl	8008a52 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8007ece:	e101      	b.n	80080d4 <HAL_UART_MspInit+0x354>
  else if(uartHandle->Instance==USART2)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a52      	ldr	r2, [pc, #328]	; (8008020 <HAL_UART_MspInit+0x2a0>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	f040 80ac 	bne.w	8008034 <HAL_UART_MspInit+0x2b4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007edc:	2300      	movs	r3, #0
 8007ede:	61bb      	str	r3, [r7, #24]
 8007ee0:	4b49      	ldr	r3, [pc, #292]	; (8008008 <HAL_UART_MspInit+0x288>)
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee4:	4a48      	ldr	r2, [pc, #288]	; (8008008 <HAL_UART_MspInit+0x288>)
 8007ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eea:	6413      	str	r3, [r2, #64]	; 0x40
 8007eec:	4b46      	ldr	r3, [pc, #280]	; (8008008 <HAL_UART_MspInit+0x288>)
 8007eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ef4:	61bb      	str	r3, [r7, #24]
 8007ef6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ef8:	2300      	movs	r3, #0
 8007efa:	617b      	str	r3, [r7, #20]
 8007efc:	4b42      	ldr	r3, [pc, #264]	; (8008008 <HAL_UART_MspInit+0x288>)
 8007efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f00:	4a41      	ldr	r2, [pc, #260]	; (8008008 <HAL_UART_MspInit+0x288>)
 8007f02:	f043 0301 	orr.w	r3, r3, #1
 8007f06:	6313      	str	r3, [r2, #48]	; 0x30
 8007f08:	4b3f      	ldr	r3, [pc, #252]	; (8008008 <HAL_UART_MspInit+0x288>)
 8007f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	617b      	str	r3, [r7, #20]
 8007f12:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007f14:	230c      	movs	r3, #12
 8007f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f18:	2302      	movs	r3, #2
 8007f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f20:	2303      	movs	r3, #3
 8007f22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007f24:	2307      	movs	r3, #7
 8007f26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	4837      	ldr	r0, [pc, #220]	; (800800c <HAL_UART_MspInit+0x28c>)
 8007f30:	f001 fa26 	bl	8009380 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8007f34:	4b3b      	ldr	r3, [pc, #236]	; (8008024 <HAL_UART_MspInit+0x2a4>)
 8007f36:	4a3c      	ldr	r2, [pc, #240]	; (8008028 <HAL_UART_MspInit+0x2a8>)
 8007f38:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8007f3a:	4b3a      	ldr	r3, [pc, #232]	; (8008024 <HAL_UART_MspInit+0x2a4>)
 8007f3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007f40:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007f42:	4b38      	ldr	r3, [pc, #224]	; (8008024 <HAL_UART_MspInit+0x2a4>)
 8007f44:	2240      	movs	r2, #64	; 0x40
 8007f46:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f48:	4b36      	ldr	r3, [pc, #216]	; (8008024 <HAL_UART_MspInit+0x2a4>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007f4e:	4b35      	ldr	r3, [pc, #212]	; (8008024 <HAL_UART_MspInit+0x2a4>)
 8007f50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f54:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007f56:	4b33      	ldr	r3, [pc, #204]	; (8008024 <HAL_UART_MspInit+0x2a4>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007f5c:	4b31      	ldr	r3, [pc, #196]	; (8008024 <HAL_UART_MspInit+0x2a4>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007f62:	4b30      	ldr	r3, [pc, #192]	; (8008024 <HAL_UART_MspInit+0x2a4>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8007f68:	4b2e      	ldr	r3, [pc, #184]	; (8008024 <HAL_UART_MspInit+0x2a4>)
 8007f6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007f6e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007f70:	4b2c      	ldr	r3, [pc, #176]	; (8008024 <HAL_UART_MspInit+0x2a4>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007f76:	482b      	ldr	r0, [pc, #172]	; (8008024 <HAL_UART_MspInit+0x2a4>)
 8007f78:	f000 fd94 	bl	8008aa4 <HAL_DMA_Init>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <HAL_UART_MspInit+0x206>
      Error_Handler();
 8007f82:	f7fb fd0b 	bl	800399c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a26      	ldr	r2, [pc, #152]	; (8008024 <HAL_UART_MspInit+0x2a4>)
 8007f8a:	635a      	str	r2, [r3, #52]	; 0x34
 8007f8c:	4a25      	ldr	r2, [pc, #148]	; (8008024 <HAL_UART_MspInit+0x2a4>)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8007f92:	4b26      	ldr	r3, [pc, #152]	; (800802c <HAL_UART_MspInit+0x2ac>)
 8007f94:	4a26      	ldr	r2, [pc, #152]	; (8008030 <HAL_UART_MspInit+0x2b0>)
 8007f96:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007f98:	4b24      	ldr	r3, [pc, #144]	; (800802c <HAL_UART_MspInit+0x2ac>)
 8007f9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007f9e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007fa0:	4b22      	ldr	r3, [pc, #136]	; (800802c <HAL_UART_MspInit+0x2ac>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007fa6:	4b21      	ldr	r3, [pc, #132]	; (800802c <HAL_UART_MspInit+0x2ac>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007fac:	4b1f      	ldr	r3, [pc, #124]	; (800802c <HAL_UART_MspInit+0x2ac>)
 8007fae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007fb2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007fb4:	4b1d      	ldr	r3, [pc, #116]	; (800802c <HAL_UART_MspInit+0x2ac>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007fba:	4b1c      	ldr	r3, [pc, #112]	; (800802c <HAL_UART_MspInit+0x2ac>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8007fc0:	4b1a      	ldr	r3, [pc, #104]	; (800802c <HAL_UART_MspInit+0x2ac>)
 8007fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fc6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8007fc8:	4b18      	ldr	r3, [pc, #96]	; (800802c <HAL_UART_MspInit+0x2ac>)
 8007fca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007fce:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007fd0:	4b16      	ldr	r3, [pc, #88]	; (800802c <HAL_UART_MspInit+0x2ac>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007fd6:	4815      	ldr	r0, [pc, #84]	; (800802c <HAL_UART_MspInit+0x2ac>)
 8007fd8:	f000 fd64 	bl	8008aa4 <HAL_DMA_Init>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <HAL_UART_MspInit+0x266>
      Error_Handler();
 8007fe2:	f7fb fcdb 	bl	800399c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a10      	ldr	r2, [pc, #64]	; (800802c <HAL_UART_MspInit+0x2ac>)
 8007fea:	639a      	str	r2, [r3, #56]	; 0x38
 8007fec:	4a0f      	ldr	r2, [pc, #60]	; (800802c <HAL_UART_MspInit+0x2ac>)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	2026      	movs	r0, #38	; 0x26
 8007ff8:	f000 fd0f 	bl	8008a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007ffc:	2026      	movs	r0, #38	; 0x26
 8007ffe:	f000 fd28 	bl	8008a52 <HAL_NVIC_EnableIRQ>
}
 8008002:	e067      	b.n	80080d4 <HAL_UART_MspInit+0x354>
 8008004:	40011000 	.word	0x40011000
 8008008:	40023800 	.word	0x40023800
 800800c:	40020000 	.word	0x40020000
 8008010:	20001908 	.word	0x20001908
 8008014:	40026440 	.word	0x40026440
 8008018:	20001968 	.word	0x20001968
 800801c:	400264b8 	.word	0x400264b8
 8008020:	40004400 	.word	0x40004400
 8008024:	200019c8 	.word	0x200019c8
 8008028:	400260a0 	.word	0x400260a0
 800802c:	20001a28 	.word	0x20001a28
 8008030:	40026088 	.word	0x40026088
  else if(uartHandle->Instance==USART3)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a28      	ldr	r2, [pc, #160]	; (80080dc <HAL_UART_MspInit+0x35c>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d14a      	bne.n	80080d4 <HAL_UART_MspInit+0x354>
    __HAL_RCC_USART3_CLK_ENABLE();
 800803e:	2300      	movs	r3, #0
 8008040:	613b      	str	r3, [r7, #16]
 8008042:	4b27      	ldr	r3, [pc, #156]	; (80080e0 <HAL_UART_MspInit+0x360>)
 8008044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008046:	4a26      	ldr	r2, [pc, #152]	; (80080e0 <HAL_UART_MspInit+0x360>)
 8008048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800804c:	6413      	str	r3, [r2, #64]	; 0x40
 800804e:	4b24      	ldr	r3, [pc, #144]	; (80080e0 <HAL_UART_MspInit+0x360>)
 8008050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008056:	613b      	str	r3, [r7, #16]
 8008058:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800805a:	2300      	movs	r3, #0
 800805c:	60fb      	str	r3, [r7, #12]
 800805e:	4b20      	ldr	r3, [pc, #128]	; (80080e0 <HAL_UART_MspInit+0x360>)
 8008060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008062:	4a1f      	ldr	r2, [pc, #124]	; (80080e0 <HAL_UART_MspInit+0x360>)
 8008064:	f043 0304 	orr.w	r3, r3, #4
 8008068:	6313      	str	r3, [r2, #48]	; 0x30
 800806a:	4b1d      	ldr	r3, [pc, #116]	; (80080e0 <HAL_UART_MspInit+0x360>)
 800806c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806e:	f003 0304 	and.w	r3, r3, #4
 8008072:	60fb      	str	r3, [r7, #12]
 8008074:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008076:	2300      	movs	r3, #0
 8008078:	60bb      	str	r3, [r7, #8]
 800807a:	4b19      	ldr	r3, [pc, #100]	; (80080e0 <HAL_UART_MspInit+0x360>)
 800807c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800807e:	4a18      	ldr	r2, [pc, #96]	; (80080e0 <HAL_UART_MspInit+0x360>)
 8008080:	f043 0302 	orr.w	r3, r3, #2
 8008084:	6313      	str	r3, [r2, #48]	; 0x30
 8008086:	4b16      	ldr	r3, [pc, #88]	; (80080e0 <HAL_UART_MspInit+0x360>)
 8008088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	60bb      	str	r3, [r7, #8]
 8008090:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8008092:	2320      	movs	r3, #32
 8008094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008096:	2302      	movs	r3, #2
 8008098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800809a:	2300      	movs	r3, #0
 800809c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800809e:	2303      	movs	r3, #3
 80080a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80080a2:	2307      	movs	r3, #7
 80080a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080aa:	4619      	mov	r1, r3
 80080ac:	480d      	ldr	r0, [pc, #52]	; (80080e4 <HAL_UART_MspInit+0x364>)
 80080ae:	f001 f967 	bl	8009380 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80080b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080b8:	2302      	movs	r3, #2
 80080ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080bc:	2300      	movs	r3, #0
 80080be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080c0:	2303      	movs	r3, #3
 80080c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80080c4:	2307      	movs	r3, #7
 80080c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080cc:	4619      	mov	r1, r3
 80080ce:	4806      	ldr	r0, [pc, #24]	; (80080e8 <HAL_UART_MspInit+0x368>)
 80080d0:	f001 f956 	bl	8009380 <HAL_GPIO_Init>
}
 80080d4:	bf00      	nop
 80080d6:	3738      	adds	r7, #56	; 0x38
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	40004800 	.word	0x40004800
 80080e0:	40023800 	.word	0x40023800
 80080e4:	40020800 	.word	0x40020800
 80080e8:	40020400 	.word	0x40020400

080080ec <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a28      	ldr	r2, [pc, #160]	; (800819c <HAL_UART_MspDeInit+0xb0>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d118      	bne.n	8008130 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80080fe:	4b28      	ldr	r3, [pc, #160]	; (80081a0 <HAL_UART_MspDeInit+0xb4>)
 8008100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008102:	4a27      	ldr	r2, [pc, #156]	; (80081a0 <HAL_UART_MspDeInit+0xb4>)
 8008104:	f023 0310 	bic.w	r3, r3, #16
 8008108:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800810a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800810e:	4825      	ldr	r0, [pc, #148]	; (80081a4 <HAL_UART_MspDeInit+0xb8>)
 8008110:	f001 faca 	bl	80096a8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008118:	4618      	mov	r0, r3
 800811a:	f000 fd71 	bl	8008c00 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008122:	4618      	mov	r0, r3
 8008124:	f000 fd6c 	bl	8008c00 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8008128:	2025      	movs	r0, #37	; 0x25
 800812a:	f000 fca0 	bl	8008a6e <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 800812e:	e030      	b.n	8008192 <HAL_UART_MspDeInit+0xa6>
  else if(uartHandle->Instance==USART2)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a1c      	ldr	r2, [pc, #112]	; (80081a8 <HAL_UART_MspDeInit+0xbc>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d117      	bne.n	800816a <HAL_UART_MspDeInit+0x7e>
    __HAL_RCC_USART2_CLK_DISABLE();
 800813a:	4b19      	ldr	r3, [pc, #100]	; (80081a0 <HAL_UART_MspDeInit+0xb4>)
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	4a18      	ldr	r2, [pc, #96]	; (80081a0 <HAL_UART_MspDeInit+0xb4>)
 8008140:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008144:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8008146:	210c      	movs	r1, #12
 8008148:	4816      	ldr	r0, [pc, #88]	; (80081a4 <HAL_UART_MspDeInit+0xb8>)
 800814a:	f001 faad 	bl	80096a8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008152:	4618      	mov	r0, r3
 8008154:	f000 fd54 	bl	8008c00 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815c:	4618      	mov	r0, r3
 800815e:	f000 fd4f 	bl	8008c00 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8008162:	2026      	movs	r0, #38	; 0x26
 8008164:	f000 fc83 	bl	8008a6e <HAL_NVIC_DisableIRQ>
}
 8008168:	e013      	b.n	8008192 <HAL_UART_MspDeInit+0xa6>
  else if(uartHandle->Instance==USART3)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a0f      	ldr	r2, [pc, #60]	; (80081ac <HAL_UART_MspDeInit+0xc0>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d10e      	bne.n	8008192 <HAL_UART_MspDeInit+0xa6>
    __HAL_RCC_USART3_CLK_DISABLE();
 8008174:	4b0a      	ldr	r3, [pc, #40]	; (80081a0 <HAL_UART_MspDeInit+0xb4>)
 8008176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008178:	4a09      	ldr	r2, [pc, #36]	; (80081a0 <HAL_UART_MspDeInit+0xb4>)
 800817a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800817e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_5);
 8008180:	2120      	movs	r1, #32
 8008182:	480b      	ldr	r0, [pc, #44]	; (80081b0 <HAL_UART_MspDeInit+0xc4>)
 8008184:	f001 fa90 	bl	80096a8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8008188:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800818c:	4809      	ldr	r0, [pc, #36]	; (80081b4 <HAL_UART_MspDeInit+0xc8>)
 800818e:	f001 fa8b 	bl	80096a8 <HAL_GPIO_DeInit>
}
 8008192:	bf00      	nop
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	40011000 	.word	0x40011000
 80081a0:	40023800 	.word	0x40023800
 80081a4:	40020000 	.word	0x40020000
 80081a8:	40004400 	.word	0x40004400
 80081ac:	40004800 	.word	0x40004800
 80081b0:	40020800 	.word	0x40020800
 80081b4:	40020400 	.word	0x40020400

080081b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80081b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80081f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80081bc:	480d      	ldr	r0, [pc, #52]	; (80081f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80081be:	490e      	ldr	r1, [pc, #56]	; (80081f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80081c0:	4a0e      	ldr	r2, [pc, #56]	; (80081fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80081c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80081c4:	e002      	b.n	80081cc <LoopCopyDataInit>

080081c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80081c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80081c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80081ca:	3304      	adds	r3, #4

080081cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80081cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80081ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80081d0:	d3f9      	bcc.n	80081c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80081d2:	4a0b      	ldr	r2, [pc, #44]	; (8008200 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80081d4:	4c0b      	ldr	r4, [pc, #44]	; (8008204 <LoopFillZerobss+0x26>)
  movs r3, #0
 80081d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80081d8:	e001      	b.n	80081de <LoopFillZerobss>

080081da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80081da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80081dc:	3204      	adds	r2, #4

080081de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80081de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80081e0:	d3fb      	bcc.n	80081da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80081e2:	f7ff f907 	bl	80073f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80081e6:	f00b ff27 	bl	8014038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80081ea:	f7fb fb3f 	bl	800386c <main>
  bx  lr    
 80081ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80081f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80081f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80081f8:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 80081fc:	08014800 	.word	0x08014800
  ldr r2, =_sbss
 8008200:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 8008204:	20001adc 	.word	0x20001adc

08008208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008208:	e7fe      	b.n	8008208 <ADC_IRQHandler>
	...

0800820c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008210:	4b0e      	ldr	r3, [pc, #56]	; (800824c <HAL_Init+0x40>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a0d      	ldr	r2, [pc, #52]	; (800824c <HAL_Init+0x40>)
 8008216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800821a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800821c:	4b0b      	ldr	r3, [pc, #44]	; (800824c <HAL_Init+0x40>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a0a      	ldr	r2, [pc, #40]	; (800824c <HAL_Init+0x40>)
 8008222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008226:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008228:	4b08      	ldr	r3, [pc, #32]	; (800824c <HAL_Init+0x40>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a07      	ldr	r2, [pc, #28]	; (800824c <HAL_Init+0x40>)
 800822e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008234:	2003      	movs	r0, #3
 8008236:	f000 fbe5 	bl	8008a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800823a:	2000      	movs	r0, #0
 800823c:	f000 f808 	bl	8008250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008240:	f7fe ff54 	bl	80070ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	40023c00 	.word	0x40023c00

08008250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008258:	4b12      	ldr	r3, [pc, #72]	; (80082a4 <HAL_InitTick+0x54>)
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	4b12      	ldr	r3, [pc, #72]	; (80082a8 <HAL_InitTick+0x58>)
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	4619      	mov	r1, r3
 8008262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008266:	fbb3 f3f1 	udiv	r3, r3, r1
 800826a:	fbb2 f3f3 	udiv	r3, r2, r3
 800826e:	4618      	mov	r0, r3
 8008270:	f000 fc0b 	bl	8008a8a <HAL_SYSTICK_Config>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e00e      	b.n	800829c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b0f      	cmp	r3, #15
 8008282:	d80a      	bhi.n	800829a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008284:	2200      	movs	r2, #0
 8008286:	6879      	ldr	r1, [r7, #4]
 8008288:	f04f 30ff 	mov.w	r0, #4294967295
 800828c:	f000 fbc5 	bl	8008a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008290:	4a06      	ldr	r2, [pc, #24]	; (80082ac <HAL_InitTick+0x5c>)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	e000      	b.n	800829c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
}
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	2000001c 	.word	0x2000001c
 80082a8:	20000024 	.word	0x20000024
 80082ac:	20000020 	.word	0x20000020

080082b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80082b0:	b480      	push	{r7}
 80082b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80082b4:	4b06      	ldr	r3, [pc, #24]	; (80082d0 <HAL_IncTick+0x20>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	461a      	mov	r2, r3
 80082ba:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <HAL_IncTick+0x24>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4413      	add	r3, r2
 80082c0:	4a04      	ldr	r2, [pc, #16]	; (80082d4 <HAL_IncTick+0x24>)
 80082c2:	6013      	str	r3, [r2, #0]
}
 80082c4:	bf00      	nop
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	20000024 	.word	0x20000024
 80082d4:	20001a88 	.word	0x20001a88

080082d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80082d8:	b480      	push	{r7}
 80082da:	af00      	add	r7, sp, #0
  return uwTick;
 80082dc:	4b03      	ldr	r3, [pc, #12]	; (80082ec <HAL_GetTick+0x14>)
 80082de:	681b      	ldr	r3, [r3, #0]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	20001a88 	.word	0x20001a88

080082f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80082f8:	f7ff ffee 	bl	80082d8 <HAL_GetTick>
 80082fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008308:	d005      	beq.n	8008316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800830a:	4b0a      	ldr	r3, [pc, #40]	; (8008334 <HAL_Delay+0x44>)
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	461a      	mov	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	4413      	add	r3, r2
 8008314:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008316:	bf00      	nop
 8008318:	f7ff ffde 	bl	80082d8 <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	429a      	cmp	r2, r3
 8008326:	d8f7      	bhi.n	8008318 <HAL_Delay+0x28>
  {
  }
}
 8008328:	bf00      	nop
 800832a:	bf00      	nop
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	20000024 	.word	0x20000024

08008338 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e033      	b.n	80083b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008352:	2b00      	cmp	r3, #0
 8008354:	d109      	bne.n	800836a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7f9 f828 	bl	80013ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836e:	f003 0310 	and.w	r3, r3, #16
 8008372:	2b00      	cmp	r3, #0
 8008374:	d118      	bne.n	80083a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800837e:	f023 0302 	bic.w	r3, r3, #2
 8008382:	f043 0202 	orr.w	r2, r3, #2
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f94a 	bl	8008624 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839a:	f023 0303 	bic.w	r3, r3, #3
 800839e:	f043 0201 	orr.w	r2, r3, #1
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	641a      	str	r2, [r3, #64]	; 0x40
 80083a6:	e001      	b.n	80083ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80083ca:	2300      	movs	r3, #0
 80083cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d101      	bne.n	80083dc <HAL_ADC_ConfigChannel+0x1c>
 80083d8:	2302      	movs	r3, #2
 80083da:	e113      	b.n	8008604 <HAL_ADC_ConfigChannel+0x244>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b09      	cmp	r3, #9
 80083ea:	d925      	bls.n	8008438 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68d9      	ldr	r1, [r3, #12]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	461a      	mov	r2, r3
 80083fa:	4613      	mov	r3, r2
 80083fc:	005b      	lsls	r3, r3, #1
 80083fe:	4413      	add	r3, r2
 8008400:	3b1e      	subs	r3, #30
 8008402:	2207      	movs	r2, #7
 8008404:	fa02 f303 	lsl.w	r3, r2, r3
 8008408:	43da      	mvns	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	400a      	ands	r2, r1
 8008410:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68d9      	ldr	r1, [r3, #12]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	b29b      	uxth	r3, r3
 8008422:	4618      	mov	r0, r3
 8008424:	4603      	mov	r3, r0
 8008426:	005b      	lsls	r3, r3, #1
 8008428:	4403      	add	r3, r0
 800842a:	3b1e      	subs	r3, #30
 800842c:	409a      	lsls	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	60da      	str	r2, [r3, #12]
 8008436:	e022      	b.n	800847e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6919      	ldr	r1, [r3, #16]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	b29b      	uxth	r3, r3
 8008444:	461a      	mov	r2, r3
 8008446:	4613      	mov	r3, r2
 8008448:	005b      	lsls	r3, r3, #1
 800844a:	4413      	add	r3, r2
 800844c:	2207      	movs	r2, #7
 800844e:	fa02 f303 	lsl.w	r3, r2, r3
 8008452:	43da      	mvns	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	400a      	ands	r2, r1
 800845a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6919      	ldr	r1, [r3, #16]
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	689a      	ldr	r2, [r3, #8]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	b29b      	uxth	r3, r3
 800846c:	4618      	mov	r0, r3
 800846e:	4603      	mov	r3, r0
 8008470:	005b      	lsls	r3, r3, #1
 8008472:	4403      	add	r3, r0
 8008474:	409a      	lsls	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	430a      	orrs	r2, r1
 800847c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	2b06      	cmp	r3, #6
 8008484:	d824      	bhi.n	80084d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	4613      	mov	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	3b05      	subs	r3, #5
 8008498:	221f      	movs	r2, #31
 800849a:	fa02 f303 	lsl.w	r3, r2, r3
 800849e:	43da      	mvns	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	400a      	ands	r2, r1
 80084a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	4618      	mov	r0, r3
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	685a      	ldr	r2, [r3, #4]
 80084ba:	4613      	mov	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4413      	add	r3, r2
 80084c0:	3b05      	subs	r3, #5
 80084c2:	fa00 f203 	lsl.w	r2, r0, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	430a      	orrs	r2, r1
 80084cc:	635a      	str	r2, [r3, #52]	; 0x34
 80084ce:	e04c      	b.n	800856a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	2b0c      	cmp	r3, #12
 80084d6:	d824      	bhi.n	8008522 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	4613      	mov	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	3b23      	subs	r3, #35	; 0x23
 80084ea:	221f      	movs	r2, #31
 80084ec:	fa02 f303 	lsl.w	r3, r2, r3
 80084f0:	43da      	mvns	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	400a      	ands	r2, r1
 80084f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	b29b      	uxth	r3, r3
 8008506:	4618      	mov	r0, r3
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	4613      	mov	r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	3b23      	subs	r3, #35	; 0x23
 8008514:	fa00 f203 	lsl.w	r2, r0, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	430a      	orrs	r2, r1
 800851e:	631a      	str	r2, [r3, #48]	; 0x30
 8008520:	e023      	b.n	800856a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	4613      	mov	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	3b41      	subs	r3, #65	; 0x41
 8008534:	221f      	movs	r2, #31
 8008536:	fa02 f303 	lsl.w	r3, r2, r3
 800853a:	43da      	mvns	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	400a      	ands	r2, r1
 8008542:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	b29b      	uxth	r3, r3
 8008550:	4618      	mov	r0, r3
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	4613      	mov	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	3b41      	subs	r3, #65	; 0x41
 800855e:	fa00 f203 	lsl.w	r2, r0, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	430a      	orrs	r2, r1
 8008568:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800856a:	4b29      	ldr	r3, [pc, #164]	; (8008610 <HAL_ADC_ConfigChannel+0x250>)
 800856c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a28      	ldr	r2, [pc, #160]	; (8008614 <HAL_ADC_ConfigChannel+0x254>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d10f      	bne.n	8008598 <HAL_ADC_ConfigChannel+0x1d8>
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b12      	cmp	r3, #18
 800857e:	d10b      	bne.n	8008598 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a1d      	ldr	r2, [pc, #116]	; (8008614 <HAL_ADC_ConfigChannel+0x254>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d12b      	bne.n	80085fa <HAL_ADC_ConfigChannel+0x23a>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a1c      	ldr	r2, [pc, #112]	; (8008618 <HAL_ADC_ConfigChannel+0x258>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d003      	beq.n	80085b4 <HAL_ADC_ConfigChannel+0x1f4>
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b11      	cmp	r3, #17
 80085b2:	d122      	bne.n	80085fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a11      	ldr	r2, [pc, #68]	; (8008618 <HAL_ADC_ConfigChannel+0x258>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d111      	bne.n	80085fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80085d6:	4b11      	ldr	r3, [pc, #68]	; (800861c <HAL_ADC_ConfigChannel+0x25c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a11      	ldr	r2, [pc, #68]	; (8008620 <HAL_ADC_ConfigChannel+0x260>)
 80085dc:	fba2 2303 	umull	r2, r3, r2, r3
 80085e0:	0c9a      	lsrs	r2, r3, #18
 80085e2:	4613      	mov	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	005b      	lsls	r3, r3, #1
 80085ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80085ec:	e002      	b.n	80085f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	3b01      	subs	r3, #1
 80085f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1f9      	bne.n	80085ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	40012300 	.word	0x40012300
 8008614:	40012000 	.word	0x40012000
 8008618:	10000012 	.word	0x10000012
 800861c:	2000001c 	.word	0x2000001c
 8008620:	431bde83 	.word	0x431bde83

08008624 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800862c:	4b79      	ldr	r3, [pc, #484]	; (8008814 <ADC_Init+0x1f0>)
 800862e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	431a      	orrs	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008658:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6859      	ldr	r1, [r3, #4]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	021a      	lsls	r2, r3, #8
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	430a      	orrs	r2, r1
 800866c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800867c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	6859      	ldr	r1, [r3, #4]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	689a      	ldr	r2, [r3, #8]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	430a      	orrs	r2, r1
 800868e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689a      	ldr	r2, [r3, #8]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800869e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	6899      	ldr	r1, [r3, #8]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	430a      	orrs	r2, r1
 80086b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b6:	4a58      	ldr	r2, [pc, #352]	; (8008818 <ADC_Init+0x1f4>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d022      	beq.n	8008702 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	689a      	ldr	r2, [r3, #8]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80086ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6899      	ldr	r1, [r3, #8]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	430a      	orrs	r2, r1
 80086dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	689a      	ldr	r2, [r3, #8]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80086ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	6899      	ldr	r1, [r3, #8]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	430a      	orrs	r2, r1
 80086fe:	609a      	str	r2, [r3, #8]
 8008700:	e00f      	b.n	8008722 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	689a      	ldr	r2, [r3, #8]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008710:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689a      	ldr	r2, [r3, #8]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008720:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	689a      	ldr	r2, [r3, #8]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 0202 	bic.w	r2, r2, #2
 8008730:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6899      	ldr	r1, [r3, #8]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	7e1b      	ldrb	r3, [r3, #24]
 800873c:	005a      	lsls	r2, r3, #1
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d01b      	beq.n	8008788 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685a      	ldr	r2, [r3, #4]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800875e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800876e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6859      	ldr	r1, [r3, #4]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877a:	3b01      	subs	r3, #1
 800877c:	035a      	lsls	r2, r3, #13
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	605a      	str	r2, [r3, #4]
 8008786:	e007      	b.n	8008798 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008796:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80087a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	3b01      	subs	r3, #1
 80087b4:	051a      	lsls	r2, r3, #20
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	430a      	orrs	r2, r1
 80087bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	689a      	ldr	r2, [r3, #8]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80087cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	6899      	ldr	r1, [r3, #8]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087da:	025a      	lsls	r2, r3, #9
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	430a      	orrs	r2, r1
 80087e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689a      	ldr	r2, [r3, #8]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6899      	ldr	r1, [r3, #8]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	029a      	lsls	r2, r3, #10
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	430a      	orrs	r2, r1
 8008806:	609a      	str	r2, [r3, #8]
}
 8008808:	bf00      	nop
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr
 8008814:	40012300 	.word	0x40012300
 8008818:	0f000001 	.word	0x0f000001

0800881c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f003 0307 	and.w	r3, r3, #7
 800882a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800882c:	4b0c      	ldr	r3, [pc, #48]	; (8008860 <__NVIC_SetPriorityGrouping+0x44>)
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008838:	4013      	ands	r3, r2
 800883a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800884c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800884e:	4a04      	ldr	r2, [pc, #16]	; (8008860 <__NVIC_SetPriorityGrouping+0x44>)
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	60d3      	str	r3, [r2, #12]
}
 8008854:	bf00      	nop
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	e000ed00 	.word	0xe000ed00

08008864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008864:	b480      	push	{r7}
 8008866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008868:	4b04      	ldr	r3, [pc, #16]	; (800887c <__NVIC_GetPriorityGrouping+0x18>)
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	0a1b      	lsrs	r3, r3, #8
 800886e:	f003 0307 	and.w	r3, r3, #7
}
 8008872:	4618      	mov	r0, r3
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	e000ed00 	.word	0xe000ed00

08008880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	4603      	mov	r3, r0
 8008888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800888a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800888e:	2b00      	cmp	r3, #0
 8008890:	db0b      	blt.n	80088aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	f003 021f 	and.w	r2, r3, #31
 8008898:	4907      	ldr	r1, [pc, #28]	; (80088b8 <__NVIC_EnableIRQ+0x38>)
 800889a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800889e:	095b      	lsrs	r3, r3, #5
 80088a0:	2001      	movs	r0, #1
 80088a2:	fa00 f202 	lsl.w	r2, r0, r2
 80088a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80088aa:	bf00      	nop
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	e000e100 	.word	0xe000e100

080088bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	4603      	mov	r3, r0
 80088c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	db12      	blt.n	80088f4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088ce:	79fb      	ldrb	r3, [r7, #7]
 80088d0:	f003 021f 	and.w	r2, r3, #31
 80088d4:	490a      	ldr	r1, [pc, #40]	; (8008900 <__NVIC_DisableIRQ+0x44>)
 80088d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088da:	095b      	lsrs	r3, r3, #5
 80088dc:	2001      	movs	r0, #1
 80088de:	fa00 f202 	lsl.w	r2, r0, r2
 80088e2:	3320      	adds	r3, #32
 80088e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80088e8:	f3bf 8f4f 	dsb	sy
}
 80088ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80088ee:	f3bf 8f6f 	isb	sy
}
 80088f2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	e000e100 	.word	0xe000e100

08008904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	4603      	mov	r3, r0
 800890c:	6039      	str	r1, [r7, #0]
 800890e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008914:	2b00      	cmp	r3, #0
 8008916:	db0a      	blt.n	800892e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	b2da      	uxtb	r2, r3
 800891c:	490c      	ldr	r1, [pc, #48]	; (8008950 <__NVIC_SetPriority+0x4c>)
 800891e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008922:	0112      	lsls	r2, r2, #4
 8008924:	b2d2      	uxtb	r2, r2
 8008926:	440b      	add	r3, r1
 8008928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800892c:	e00a      	b.n	8008944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	b2da      	uxtb	r2, r3
 8008932:	4908      	ldr	r1, [pc, #32]	; (8008954 <__NVIC_SetPriority+0x50>)
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	f003 030f 	and.w	r3, r3, #15
 800893a:	3b04      	subs	r3, #4
 800893c:	0112      	lsls	r2, r2, #4
 800893e:	b2d2      	uxtb	r2, r2
 8008940:	440b      	add	r3, r1
 8008942:	761a      	strb	r2, [r3, #24]
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	e000e100 	.word	0xe000e100
 8008954:	e000ed00 	.word	0xe000ed00

08008958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008958:	b480      	push	{r7}
 800895a:	b089      	sub	sp, #36	; 0x24
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f003 0307 	and.w	r3, r3, #7
 800896a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	f1c3 0307 	rsb	r3, r3, #7
 8008972:	2b04      	cmp	r3, #4
 8008974:	bf28      	it	cs
 8008976:	2304      	movcs	r3, #4
 8008978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	3304      	adds	r3, #4
 800897e:	2b06      	cmp	r3, #6
 8008980:	d902      	bls.n	8008988 <NVIC_EncodePriority+0x30>
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	3b03      	subs	r3, #3
 8008986:	e000      	b.n	800898a <NVIC_EncodePriority+0x32>
 8008988:	2300      	movs	r3, #0
 800898a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800898c:	f04f 32ff 	mov.w	r2, #4294967295
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	fa02 f303 	lsl.w	r3, r2, r3
 8008996:	43da      	mvns	r2, r3
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	401a      	ands	r2, r3
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80089a0:	f04f 31ff 	mov.w	r1, #4294967295
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	fa01 f303 	lsl.w	r3, r1, r3
 80089aa:	43d9      	mvns	r1, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089b0:	4313      	orrs	r3, r2
         );
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3724      	adds	r7, #36	; 0x24
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
	...

080089c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3b01      	subs	r3, #1
 80089cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089d0:	d301      	bcc.n	80089d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80089d2:	2301      	movs	r3, #1
 80089d4:	e00f      	b.n	80089f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80089d6:	4a0a      	ldr	r2, [pc, #40]	; (8008a00 <SysTick_Config+0x40>)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3b01      	subs	r3, #1
 80089dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80089de:	210f      	movs	r1, #15
 80089e0:	f04f 30ff 	mov.w	r0, #4294967295
 80089e4:	f7ff ff8e 	bl	8008904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80089e8:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <SysTick_Config+0x40>)
 80089ea:	2200      	movs	r2, #0
 80089ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80089ee:	4b04      	ldr	r3, [pc, #16]	; (8008a00 <SysTick_Config+0x40>)
 80089f0:	2207      	movs	r2, #7
 80089f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	e000e010 	.word	0xe000e010

08008a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f7ff ff05 	bl	800881c <__NVIC_SetPriorityGrouping>
}
 8008a12:	bf00      	nop
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b086      	sub	sp, #24
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	4603      	mov	r3, r0
 8008a22:	60b9      	str	r1, [r7, #8]
 8008a24:	607a      	str	r2, [r7, #4]
 8008a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008a2c:	f7ff ff1a 	bl	8008864 <__NVIC_GetPriorityGrouping>
 8008a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	68b9      	ldr	r1, [r7, #8]
 8008a36:	6978      	ldr	r0, [r7, #20]
 8008a38:	f7ff ff8e 	bl	8008958 <NVIC_EncodePriority>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a42:	4611      	mov	r1, r2
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7ff ff5d 	bl	8008904 <__NVIC_SetPriority>
}
 8008a4a:	bf00      	nop
 8008a4c:	3718      	adds	r7, #24
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b082      	sub	sp, #8
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	4603      	mov	r3, r0
 8008a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7ff ff0d 	bl	8008880 <__NVIC_EnableIRQ>
}
 8008a66:	bf00      	nop
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b082      	sub	sp, #8
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	4603      	mov	r3, r0
 8008a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7ff ff1d 	bl	80088bc <__NVIC_DisableIRQ>
}
 8008a82:	bf00      	nop
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b082      	sub	sp, #8
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7ff ff94 	bl	80089c0 <SysTick_Config>
 8008a98:	4603      	mov	r3, r0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
	...

08008aa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008aac:	2300      	movs	r3, #0
 8008aae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008ab0:	f7ff fc12 	bl	80082d8 <HAL_GetTick>
 8008ab4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e099      	b.n	8008bf4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f022 0201 	bic.w	r2, r2, #1
 8008ade:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008ae0:	e00f      	b.n	8008b02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008ae2:	f7ff fbf9 	bl	80082d8 <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	2b05      	cmp	r3, #5
 8008aee:	d908      	bls.n	8008b02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2220      	movs	r2, #32
 8008af4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2203      	movs	r2, #3
 8008afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e078      	b.n	8008bf4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1e8      	bne.n	8008ae2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	4b38      	ldr	r3, [pc, #224]	; (8008bfc <HAL_DMA_Init+0x158>)
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685a      	ldr	r2, [r3, #4]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a1b      	ldr	r3, [r3, #32]
 8008b4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b58:	2b04      	cmp	r3, #4
 8008b5a:	d107      	bne.n	8008b6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b64:	4313      	orrs	r3, r2
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	f023 0307 	bic.w	r3, r3, #7
 8008b82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b92:	2b04      	cmp	r3, #4
 8008b94:	d117      	bne.n	8008bc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00e      	beq.n	8008bc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fb6d 	bl	8009288 <DMA_CheckFifoParam>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d008      	beq.n	8008bc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2240      	movs	r2, #64	; 0x40
 8008bb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e016      	b.n	8008bf4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fb24 	bl	800921c <DMA_CalcBaseAndBitshift>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bdc:	223f      	movs	r2, #63	; 0x3f
 8008bde:	409a      	lsls	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	f010803f 	.word	0xf010803f

08008c00 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e050      	b.n	8008cb4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d101      	bne.n	8008c22 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8008c1e:	2302      	movs	r3, #2
 8008c20:	e048      	b.n	8008cb4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f022 0201 	bic.w	r2, r2, #1
 8008c30:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2200      	movs	r2, #0
 8008c38:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2200      	movs	r2, #0
 8008c48:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2200      	movs	r2, #0
 8008c58:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2221      	movs	r2, #33	; 0x21
 8008c60:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fada 	bl	800921c <DMA_CalcBaseAndBitshift>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c94:	223f      	movs	r2, #63	; 0x3f
 8008c96:	409a      	lsls	r2, r3
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
 8008cc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d101      	bne.n	8008ce2 <HAL_DMA_Start_IT+0x26>
 8008cde:	2302      	movs	r3, #2
 8008ce0:	e040      	b.n	8008d64 <HAL_DMA_Start_IT+0xa8>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d12f      	bne.n	8008d56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	68b9      	ldr	r1, [r7, #8]
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f000 fa58 	bl	80091c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d14:	223f      	movs	r2, #63	; 0x3f
 8008d16:	409a      	lsls	r2, r3
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f042 0216 	orr.w	r2, r2, #22
 8008d2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d007      	beq.n	8008d44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f042 0208 	orr.w	r2, r2, #8
 8008d42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f042 0201 	orr.w	r2, r2, #1
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	e005      	b.n	8008d62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008d5e:	2302      	movs	r3, #2
 8008d60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3718      	adds	r7, #24
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008d7a:	f7ff faad 	bl	80082d8 <HAL_GetTick>
 8008d7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d008      	beq.n	8008d9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2280      	movs	r2, #128	; 0x80
 8008d90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e052      	b.n	8008e44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f022 0216 	bic.w	r2, r2, #22
 8008dac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	695a      	ldr	r2, [r3, #20]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dbc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d103      	bne.n	8008dce <HAL_DMA_Abort+0x62>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d007      	beq.n	8008dde <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 0208 	bic.w	r2, r2, #8
 8008ddc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f022 0201 	bic.w	r2, r2, #1
 8008dec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008dee:	e013      	b.n	8008e18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008df0:	f7ff fa72 	bl	80082d8 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	2b05      	cmp	r3, #5
 8008dfc:	d90c      	bls.n	8008e18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2220      	movs	r2, #32
 8008e02:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2203      	movs	r2, #3
 8008e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008e14:	2303      	movs	r3, #3
 8008e16:	e015      	b.n	8008e44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1e4      	bne.n	8008df0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e2a:	223f      	movs	r2, #63	; 0x3f
 8008e2c:	409a      	lsls	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d004      	beq.n	8008e6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2280      	movs	r2, #128	; 0x80
 8008e64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e00c      	b.n	8008e84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2205      	movs	r2, #5
 8008e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f022 0201 	bic.w	r2, r2, #1
 8008e80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008e9c:	4b8e      	ldr	r3, [pc, #568]	; (80090d8 <HAL_DMA_IRQHandler+0x248>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a8e      	ldr	r2, [pc, #568]	; (80090dc <HAL_DMA_IRQHandler+0x24c>)
 8008ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea6:	0a9b      	lsrs	r3, r3, #10
 8008ea8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eba:	2208      	movs	r2, #8
 8008ebc:	409a      	lsls	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d01a      	beq.n	8008efc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 0304 	and.w	r3, r3, #4
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d013      	beq.n	8008efc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f022 0204 	bic.w	r2, r2, #4
 8008ee2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ee8:	2208      	movs	r2, #8
 8008eea:	409a      	lsls	r2, r3
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ef4:	f043 0201 	orr.w	r2, r3, #1
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f00:	2201      	movs	r2, #1
 8008f02:	409a      	lsls	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4013      	ands	r3, r2
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d012      	beq.n	8008f32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00b      	beq.n	8008f32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f1e:	2201      	movs	r2, #1
 8008f20:	409a      	lsls	r2, r3
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f2a:	f043 0202 	orr.w	r2, r3, #2
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f36:	2204      	movs	r2, #4
 8008f38:	409a      	lsls	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d012      	beq.n	8008f68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0302 	and.w	r3, r3, #2
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00b      	beq.n	8008f68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f54:	2204      	movs	r2, #4
 8008f56:	409a      	lsls	r2, r3
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f60:	f043 0204 	orr.w	r2, r3, #4
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f6c:	2210      	movs	r2, #16
 8008f6e:	409a      	lsls	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	4013      	ands	r3, r2
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d043      	beq.n	8009000 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 0308 	and.w	r3, r3, #8
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d03c      	beq.n	8009000 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f8a:	2210      	movs	r2, #16
 8008f8c:	409a      	lsls	r2, r3
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d018      	beq.n	8008fd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d108      	bne.n	8008fc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d024      	beq.n	8009000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	4798      	blx	r3
 8008fbe:	e01f      	b.n	8009000 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d01b      	beq.n	8009000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	4798      	blx	r3
 8008fd0:	e016      	b.n	8009000 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d107      	bne.n	8008ff0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f022 0208 	bic.w	r2, r2, #8
 8008fee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d003      	beq.n	8009000 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009004:	2220      	movs	r2, #32
 8009006:	409a      	lsls	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	4013      	ands	r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 808f 	beq.w	8009130 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 0310 	and.w	r3, r3, #16
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 8087 	beq.w	8009130 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009026:	2220      	movs	r2, #32
 8009028:	409a      	lsls	r2, r3
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b05      	cmp	r3, #5
 8009038:	d136      	bne.n	80090a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f022 0216 	bic.w	r2, r2, #22
 8009048:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	695a      	ldr	r2, [r3, #20]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009058:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905e:	2b00      	cmp	r3, #0
 8009060:	d103      	bne.n	800906a <HAL_DMA_IRQHandler+0x1da>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009066:	2b00      	cmp	r3, #0
 8009068:	d007      	beq.n	800907a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f022 0208 	bic.w	r2, r2, #8
 8009078:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800907e:	223f      	movs	r2, #63	; 0x3f
 8009080:	409a      	lsls	r2, r3
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800909a:	2b00      	cmp	r3, #0
 800909c:	d07e      	beq.n	800919c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	4798      	blx	r3
        }
        return;
 80090a6:	e079      	b.n	800919c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d01d      	beq.n	80090f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10d      	bne.n	80090e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d031      	beq.n	8009130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	4798      	blx	r3
 80090d4:	e02c      	b.n	8009130 <HAL_DMA_IRQHandler+0x2a0>
 80090d6:	bf00      	nop
 80090d8:	2000001c 	.word	0x2000001c
 80090dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d023      	beq.n	8009130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	4798      	blx	r3
 80090f0:	e01e      	b.n	8009130 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10f      	bne.n	8009120 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f022 0210 	bic.w	r2, r2, #16
 800910e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009124:	2b00      	cmp	r3, #0
 8009126:	d003      	beq.n	8009130 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009134:	2b00      	cmp	r3, #0
 8009136:	d032      	beq.n	800919e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800913c:	f003 0301 	and.w	r3, r3, #1
 8009140:	2b00      	cmp	r3, #0
 8009142:	d022      	beq.n	800918a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2205      	movs	r2, #5
 8009148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f022 0201 	bic.w	r2, r2, #1
 800915a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	3301      	adds	r3, #1
 8009160:	60bb      	str	r3, [r7, #8]
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	429a      	cmp	r2, r3
 8009166:	d307      	bcc.n	8009178 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1f2      	bne.n	800915c <HAL_DMA_IRQHandler+0x2cc>
 8009176:	e000      	b.n	800917a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009178:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800918e:	2b00      	cmp	r3, #0
 8009190:	d005      	beq.n	800919e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	4798      	blx	r3
 800919a:	e000      	b.n	800919e <HAL_DMA_IRQHandler+0x30e>
        return;
 800919c:	bf00      	nop
    }
  }
}
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80091b2:	b2db      	uxtb	r3, r3
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
 80091cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80091dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	2b40      	cmp	r3, #64	; 0x40
 80091ec:	d108      	bne.n	8009200 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80091fe:	e007      	b.n	8009210 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	60da      	str	r2, [r3, #12]
}
 8009210:	bf00      	nop
 8009212:	3714      	adds	r7, #20
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	b2db      	uxtb	r3, r3
 800922a:	3b10      	subs	r3, #16
 800922c:	4a14      	ldr	r2, [pc, #80]	; (8009280 <DMA_CalcBaseAndBitshift+0x64>)
 800922e:	fba2 2303 	umull	r2, r3, r2, r3
 8009232:	091b      	lsrs	r3, r3, #4
 8009234:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009236:	4a13      	ldr	r2, [pc, #76]	; (8009284 <DMA_CalcBaseAndBitshift+0x68>)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4413      	add	r3, r2
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2b03      	cmp	r3, #3
 8009248:	d909      	bls.n	800925e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009252:	f023 0303 	bic.w	r3, r3, #3
 8009256:	1d1a      	adds	r2, r3, #4
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	659a      	str	r2, [r3, #88]	; 0x58
 800925c:	e007      	b.n	800926e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009266:	f023 0303 	bic.w	r3, r3, #3
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	aaaaaaab 	.word	0xaaaaaaab
 8009284:	080147e4 	.word	0x080147e4

08009288 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009290:	2300      	movs	r3, #0
 8009292:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009298:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d11f      	bne.n	80092e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2b03      	cmp	r3, #3
 80092a6:	d856      	bhi.n	8009356 <DMA_CheckFifoParam+0xce>
 80092a8:	a201      	add	r2, pc, #4	; (adr r2, 80092b0 <DMA_CheckFifoParam+0x28>)
 80092aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ae:	bf00      	nop
 80092b0:	080092c1 	.word	0x080092c1
 80092b4:	080092d3 	.word	0x080092d3
 80092b8:	080092c1 	.word	0x080092c1
 80092bc:	08009357 	.word	0x08009357
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d046      	beq.n	800935a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80092d0:	e043      	b.n	800935a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80092da:	d140      	bne.n	800935e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80092e0:	e03d      	b.n	800935e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092ea:	d121      	bne.n	8009330 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	d837      	bhi.n	8009362 <DMA_CheckFifoParam+0xda>
 80092f2:	a201      	add	r2, pc, #4	; (adr r2, 80092f8 <DMA_CheckFifoParam+0x70>)
 80092f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f8:	08009309 	.word	0x08009309
 80092fc:	0800930f 	.word	0x0800930f
 8009300:	08009309 	.word	0x08009309
 8009304:	08009321 	.word	0x08009321
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	73fb      	strb	r3, [r7, #15]
      break;
 800930c:	e030      	b.n	8009370 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009312:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009316:	2b00      	cmp	r3, #0
 8009318:	d025      	beq.n	8009366 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800931e:	e022      	b.n	8009366 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009324:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009328:	d11f      	bne.n	800936a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800932e:	e01c      	b.n	800936a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	2b02      	cmp	r3, #2
 8009334:	d903      	bls.n	800933e <DMA_CheckFifoParam+0xb6>
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2b03      	cmp	r3, #3
 800933a:	d003      	beq.n	8009344 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800933c:	e018      	b.n	8009370 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	73fb      	strb	r3, [r7, #15]
      break;
 8009342:	e015      	b.n	8009370 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00e      	beq.n	800936e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	73fb      	strb	r3, [r7, #15]
      break;
 8009354:	e00b      	b.n	800936e <DMA_CheckFifoParam+0xe6>
      break;
 8009356:	bf00      	nop
 8009358:	e00a      	b.n	8009370 <DMA_CheckFifoParam+0xe8>
      break;
 800935a:	bf00      	nop
 800935c:	e008      	b.n	8009370 <DMA_CheckFifoParam+0xe8>
      break;
 800935e:	bf00      	nop
 8009360:	e006      	b.n	8009370 <DMA_CheckFifoParam+0xe8>
      break;
 8009362:	bf00      	nop
 8009364:	e004      	b.n	8009370 <DMA_CheckFifoParam+0xe8>
      break;
 8009366:	bf00      	nop
 8009368:	e002      	b.n	8009370 <DMA_CheckFifoParam+0xe8>
      break;   
 800936a:	bf00      	nop
 800936c:	e000      	b.n	8009370 <DMA_CheckFifoParam+0xe8>
      break;
 800936e:	bf00      	nop
    }
  } 
  
  return status; 
 8009370:	7bfb      	ldrb	r3, [r7, #15]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop

08009380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009380:	b480      	push	{r7}
 8009382:	b089      	sub	sp, #36	; 0x24
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800938a:	2300      	movs	r3, #0
 800938c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800938e:	2300      	movs	r3, #0
 8009390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009392:	2300      	movs	r3, #0
 8009394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009396:	2300      	movs	r3, #0
 8009398:	61fb      	str	r3, [r7, #28]
 800939a:	e165      	b.n	8009668 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800939c:	2201      	movs	r2, #1
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	fa02 f303 	lsl.w	r3, r2, r3
 80093a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	697a      	ldr	r2, [r7, #20]
 80093ac:	4013      	ands	r3, r2
 80093ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80093b0:	693a      	ldr	r2, [r7, #16]
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	f040 8154 	bne.w	8009662 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	f003 0303 	and.w	r3, r3, #3
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d005      	beq.n	80093d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d130      	bne.n	8009434 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	2203      	movs	r2, #3
 80093de:	fa02 f303 	lsl.w	r3, r2, r3
 80093e2:	43db      	mvns	r3, r3
 80093e4:	69ba      	ldr	r2, [r7, #24]
 80093e6:	4013      	ands	r3, r2
 80093e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	68da      	ldr	r2, [r3, #12]
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	005b      	lsls	r3, r3, #1
 80093f2:	fa02 f303 	lsl.w	r3, r2, r3
 80093f6:	69ba      	ldr	r2, [r7, #24]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	69ba      	ldr	r2, [r7, #24]
 8009400:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009408:	2201      	movs	r2, #1
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	fa02 f303 	lsl.w	r3, r2, r3
 8009410:	43db      	mvns	r3, r3
 8009412:	69ba      	ldr	r2, [r7, #24]
 8009414:	4013      	ands	r3, r2
 8009416:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	091b      	lsrs	r3, r3, #4
 800941e:	f003 0201 	and.w	r2, r3, #1
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	fa02 f303 	lsl.w	r3, r2, r3
 8009428:	69ba      	ldr	r2, [r7, #24]
 800942a:	4313      	orrs	r3, r2
 800942c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	69ba      	ldr	r2, [r7, #24]
 8009432:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	f003 0303 	and.w	r3, r3, #3
 800943c:	2b03      	cmp	r3, #3
 800943e:	d017      	beq.n	8009470 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	2203      	movs	r2, #3
 800944c:	fa02 f303 	lsl.w	r3, r2, r3
 8009450:	43db      	mvns	r3, r3
 8009452:	69ba      	ldr	r2, [r7, #24]
 8009454:	4013      	ands	r3, r2
 8009456:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	689a      	ldr	r2, [r3, #8]
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	005b      	lsls	r3, r3, #1
 8009460:	fa02 f303 	lsl.w	r3, r2, r3
 8009464:	69ba      	ldr	r2, [r7, #24]
 8009466:	4313      	orrs	r3, r2
 8009468:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	f003 0303 	and.w	r3, r3, #3
 8009478:	2b02      	cmp	r3, #2
 800947a:	d123      	bne.n	80094c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	08da      	lsrs	r2, r3, #3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	3208      	adds	r2, #8
 8009484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009488:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	f003 0307 	and.w	r3, r3, #7
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	220f      	movs	r2, #15
 8009494:	fa02 f303 	lsl.w	r3, r2, r3
 8009498:	43db      	mvns	r3, r3
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	4013      	ands	r3, r2
 800949e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	691a      	ldr	r2, [r3, #16]
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	f003 0307 	and.w	r3, r3, #7
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	fa02 f303 	lsl.w	r3, r2, r3
 80094b0:	69ba      	ldr	r2, [r7, #24]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	08da      	lsrs	r2, r3, #3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	3208      	adds	r2, #8
 80094be:	69b9      	ldr	r1, [r7, #24]
 80094c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	005b      	lsls	r3, r3, #1
 80094ce:	2203      	movs	r2, #3
 80094d0:	fa02 f303 	lsl.w	r3, r2, r3
 80094d4:	43db      	mvns	r3, r3
 80094d6:	69ba      	ldr	r2, [r7, #24]
 80094d8:	4013      	ands	r3, r2
 80094da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	f003 0203 	and.w	r2, r3, #3
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	005b      	lsls	r3, r3, #1
 80094e8:	fa02 f303 	lsl.w	r3, r2, r3
 80094ec:	69ba      	ldr	r2, [r7, #24]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	69ba      	ldr	r2, [r7, #24]
 80094f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 80ae 	beq.w	8009662 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009506:	2300      	movs	r3, #0
 8009508:	60fb      	str	r3, [r7, #12]
 800950a:	4b5d      	ldr	r3, [pc, #372]	; (8009680 <HAL_GPIO_Init+0x300>)
 800950c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800950e:	4a5c      	ldr	r2, [pc, #368]	; (8009680 <HAL_GPIO_Init+0x300>)
 8009510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009514:	6453      	str	r3, [r2, #68]	; 0x44
 8009516:	4b5a      	ldr	r3, [pc, #360]	; (8009680 <HAL_GPIO_Init+0x300>)
 8009518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800951a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800951e:	60fb      	str	r3, [r7, #12]
 8009520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009522:	4a58      	ldr	r2, [pc, #352]	; (8009684 <HAL_GPIO_Init+0x304>)
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	089b      	lsrs	r3, r3, #2
 8009528:	3302      	adds	r3, #2
 800952a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800952e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	f003 0303 	and.w	r3, r3, #3
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	220f      	movs	r2, #15
 800953a:	fa02 f303 	lsl.w	r3, r2, r3
 800953e:	43db      	mvns	r3, r3
 8009540:	69ba      	ldr	r2, [r7, #24]
 8009542:	4013      	ands	r3, r2
 8009544:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a4f      	ldr	r2, [pc, #316]	; (8009688 <HAL_GPIO_Init+0x308>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d025      	beq.n	800959a <HAL_GPIO_Init+0x21a>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a4e      	ldr	r2, [pc, #312]	; (800968c <HAL_GPIO_Init+0x30c>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d01f      	beq.n	8009596 <HAL_GPIO_Init+0x216>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a4d      	ldr	r2, [pc, #308]	; (8009690 <HAL_GPIO_Init+0x310>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d019      	beq.n	8009592 <HAL_GPIO_Init+0x212>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a4c      	ldr	r2, [pc, #304]	; (8009694 <HAL_GPIO_Init+0x314>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d013      	beq.n	800958e <HAL_GPIO_Init+0x20e>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a4b      	ldr	r2, [pc, #300]	; (8009698 <HAL_GPIO_Init+0x318>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d00d      	beq.n	800958a <HAL_GPIO_Init+0x20a>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a4a      	ldr	r2, [pc, #296]	; (800969c <HAL_GPIO_Init+0x31c>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d007      	beq.n	8009586 <HAL_GPIO_Init+0x206>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a49      	ldr	r2, [pc, #292]	; (80096a0 <HAL_GPIO_Init+0x320>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d101      	bne.n	8009582 <HAL_GPIO_Init+0x202>
 800957e:	2306      	movs	r3, #6
 8009580:	e00c      	b.n	800959c <HAL_GPIO_Init+0x21c>
 8009582:	2307      	movs	r3, #7
 8009584:	e00a      	b.n	800959c <HAL_GPIO_Init+0x21c>
 8009586:	2305      	movs	r3, #5
 8009588:	e008      	b.n	800959c <HAL_GPIO_Init+0x21c>
 800958a:	2304      	movs	r3, #4
 800958c:	e006      	b.n	800959c <HAL_GPIO_Init+0x21c>
 800958e:	2303      	movs	r3, #3
 8009590:	e004      	b.n	800959c <HAL_GPIO_Init+0x21c>
 8009592:	2302      	movs	r3, #2
 8009594:	e002      	b.n	800959c <HAL_GPIO_Init+0x21c>
 8009596:	2301      	movs	r3, #1
 8009598:	e000      	b.n	800959c <HAL_GPIO_Init+0x21c>
 800959a:	2300      	movs	r3, #0
 800959c:	69fa      	ldr	r2, [r7, #28]
 800959e:	f002 0203 	and.w	r2, r2, #3
 80095a2:	0092      	lsls	r2, r2, #2
 80095a4:	4093      	lsls	r3, r2
 80095a6:	69ba      	ldr	r2, [r7, #24]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80095ac:	4935      	ldr	r1, [pc, #212]	; (8009684 <HAL_GPIO_Init+0x304>)
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	089b      	lsrs	r3, r3, #2
 80095b2:	3302      	adds	r3, #2
 80095b4:	69ba      	ldr	r2, [r7, #24]
 80095b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80095ba:	4b3a      	ldr	r3, [pc, #232]	; (80096a4 <HAL_GPIO_Init+0x324>)
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	43db      	mvns	r3, r3
 80095c4:	69ba      	ldr	r2, [r7, #24]
 80095c6:	4013      	ands	r3, r2
 80095c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d003      	beq.n	80095de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80095d6:	69ba      	ldr	r2, [r7, #24]
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	4313      	orrs	r3, r2
 80095dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80095de:	4a31      	ldr	r2, [pc, #196]	; (80096a4 <HAL_GPIO_Init+0x324>)
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80095e4:	4b2f      	ldr	r3, [pc, #188]	; (80096a4 <HAL_GPIO_Init+0x324>)
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	43db      	mvns	r3, r3
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	4013      	ands	r3, r2
 80095f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d003      	beq.n	8009608 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8009600:	69ba      	ldr	r2, [r7, #24]
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	4313      	orrs	r3, r2
 8009606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009608:	4a26      	ldr	r2, [pc, #152]	; (80096a4 <HAL_GPIO_Init+0x324>)
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800960e:	4b25      	ldr	r3, [pc, #148]	; (80096a4 <HAL_GPIO_Init+0x324>)
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	43db      	mvns	r3, r3
 8009618:	69ba      	ldr	r2, [r7, #24]
 800961a:	4013      	ands	r3, r2
 800961c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009626:	2b00      	cmp	r3, #0
 8009628:	d003      	beq.n	8009632 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	4313      	orrs	r3, r2
 8009630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009632:	4a1c      	ldr	r2, [pc, #112]	; (80096a4 <HAL_GPIO_Init+0x324>)
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009638:	4b1a      	ldr	r3, [pc, #104]	; (80096a4 <HAL_GPIO_Init+0x324>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	43db      	mvns	r3, r3
 8009642:	69ba      	ldr	r2, [r7, #24]
 8009644:	4013      	ands	r3, r2
 8009646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d003      	beq.n	800965c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009654:	69ba      	ldr	r2, [r7, #24]
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	4313      	orrs	r3, r2
 800965a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800965c:	4a11      	ldr	r2, [pc, #68]	; (80096a4 <HAL_GPIO_Init+0x324>)
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	3301      	adds	r3, #1
 8009666:	61fb      	str	r3, [r7, #28]
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	2b0f      	cmp	r3, #15
 800966c:	f67f ae96 	bls.w	800939c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009670:	bf00      	nop
 8009672:	bf00      	nop
 8009674:	3724      	adds	r7, #36	; 0x24
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	40023800 	.word	0x40023800
 8009684:	40013800 	.word	0x40013800
 8009688:	40020000 	.word	0x40020000
 800968c:	40020400 	.word	0x40020400
 8009690:	40020800 	.word	0x40020800
 8009694:	40020c00 	.word	0x40020c00
 8009698:	40021000 	.word	0x40021000
 800969c:	40021400 	.word	0x40021400
 80096a0:	40021800 	.word	0x40021800
 80096a4:	40013c00 	.word	0x40013c00

080096a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b087      	sub	sp, #28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80096b2:	2300      	movs	r3, #0
 80096b4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80096b6:	2300      	movs	r3, #0
 80096b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80096ba:	2300      	movs	r3, #0
 80096bc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80096be:	2300      	movs	r3, #0
 80096c0:	617b      	str	r3, [r7, #20]
 80096c2:	e0c7      	b.n	8009854 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80096c4:	2201      	movs	r2, #1
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	fa02 f303 	lsl.w	r3, r2, r3
 80096cc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	4013      	ands	r3, r2
 80096d4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	429a      	cmp	r2, r3
 80096dc:	f040 80b7 	bne.w	800984e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80096e0:	4a62      	ldr	r2, [pc, #392]	; (800986c <HAL_GPIO_DeInit+0x1c4>)
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	089b      	lsrs	r3, r3, #2
 80096e6:	3302      	adds	r3, #2
 80096e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096ec:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f003 0303 	and.w	r3, r3, #3
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	220f      	movs	r2, #15
 80096f8:	fa02 f303 	lsl.w	r3, r2, r3
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	4013      	ands	r3, r2
 8009700:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a5a      	ldr	r2, [pc, #360]	; (8009870 <HAL_GPIO_DeInit+0x1c8>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d025      	beq.n	8009756 <HAL_GPIO_DeInit+0xae>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a59      	ldr	r2, [pc, #356]	; (8009874 <HAL_GPIO_DeInit+0x1cc>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d01f      	beq.n	8009752 <HAL_GPIO_DeInit+0xaa>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a58      	ldr	r2, [pc, #352]	; (8009878 <HAL_GPIO_DeInit+0x1d0>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d019      	beq.n	800974e <HAL_GPIO_DeInit+0xa6>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a57      	ldr	r2, [pc, #348]	; (800987c <HAL_GPIO_DeInit+0x1d4>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d013      	beq.n	800974a <HAL_GPIO_DeInit+0xa2>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a56      	ldr	r2, [pc, #344]	; (8009880 <HAL_GPIO_DeInit+0x1d8>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d00d      	beq.n	8009746 <HAL_GPIO_DeInit+0x9e>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a55      	ldr	r2, [pc, #340]	; (8009884 <HAL_GPIO_DeInit+0x1dc>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d007      	beq.n	8009742 <HAL_GPIO_DeInit+0x9a>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a54      	ldr	r2, [pc, #336]	; (8009888 <HAL_GPIO_DeInit+0x1e0>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d101      	bne.n	800973e <HAL_GPIO_DeInit+0x96>
 800973a:	2306      	movs	r3, #6
 800973c:	e00c      	b.n	8009758 <HAL_GPIO_DeInit+0xb0>
 800973e:	2307      	movs	r3, #7
 8009740:	e00a      	b.n	8009758 <HAL_GPIO_DeInit+0xb0>
 8009742:	2305      	movs	r3, #5
 8009744:	e008      	b.n	8009758 <HAL_GPIO_DeInit+0xb0>
 8009746:	2304      	movs	r3, #4
 8009748:	e006      	b.n	8009758 <HAL_GPIO_DeInit+0xb0>
 800974a:	2303      	movs	r3, #3
 800974c:	e004      	b.n	8009758 <HAL_GPIO_DeInit+0xb0>
 800974e:	2302      	movs	r3, #2
 8009750:	e002      	b.n	8009758 <HAL_GPIO_DeInit+0xb0>
 8009752:	2301      	movs	r3, #1
 8009754:	e000      	b.n	8009758 <HAL_GPIO_DeInit+0xb0>
 8009756:	2300      	movs	r3, #0
 8009758:	697a      	ldr	r2, [r7, #20]
 800975a:	f002 0203 	and.w	r2, r2, #3
 800975e:	0092      	lsls	r2, r2, #2
 8009760:	4093      	lsls	r3, r2
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	429a      	cmp	r2, r3
 8009766:	d132      	bne.n	80097ce <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009768:	4b48      	ldr	r3, [pc, #288]	; (800988c <HAL_GPIO_DeInit+0x1e4>)
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	43db      	mvns	r3, r3
 8009770:	4946      	ldr	r1, [pc, #280]	; (800988c <HAL_GPIO_DeInit+0x1e4>)
 8009772:	4013      	ands	r3, r2
 8009774:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009776:	4b45      	ldr	r3, [pc, #276]	; (800988c <HAL_GPIO_DeInit+0x1e4>)
 8009778:	685a      	ldr	r2, [r3, #4]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	43db      	mvns	r3, r3
 800977e:	4943      	ldr	r1, [pc, #268]	; (800988c <HAL_GPIO_DeInit+0x1e4>)
 8009780:	4013      	ands	r3, r2
 8009782:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009784:	4b41      	ldr	r3, [pc, #260]	; (800988c <HAL_GPIO_DeInit+0x1e4>)
 8009786:	68da      	ldr	r2, [r3, #12]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	43db      	mvns	r3, r3
 800978c:	493f      	ldr	r1, [pc, #252]	; (800988c <HAL_GPIO_DeInit+0x1e4>)
 800978e:	4013      	ands	r3, r2
 8009790:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009792:	4b3e      	ldr	r3, [pc, #248]	; (800988c <HAL_GPIO_DeInit+0x1e4>)
 8009794:	689a      	ldr	r2, [r3, #8]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	43db      	mvns	r3, r3
 800979a:	493c      	ldr	r1, [pc, #240]	; (800988c <HAL_GPIO_DeInit+0x1e4>)
 800979c:	4013      	ands	r3, r2
 800979e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f003 0303 	and.w	r3, r3, #3
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	220f      	movs	r2, #15
 80097aa:	fa02 f303 	lsl.w	r3, r2, r3
 80097ae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80097b0:	4a2e      	ldr	r2, [pc, #184]	; (800986c <HAL_GPIO_DeInit+0x1c4>)
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	089b      	lsrs	r3, r3, #2
 80097b6:	3302      	adds	r3, #2
 80097b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	43da      	mvns	r2, r3
 80097c0:	482a      	ldr	r0, [pc, #168]	; (800986c <HAL_GPIO_DeInit+0x1c4>)
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	089b      	lsrs	r3, r3, #2
 80097c6:	400a      	ands	r2, r1
 80097c8:	3302      	adds	r3, #2
 80097ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	2103      	movs	r1, #3
 80097d8:	fa01 f303 	lsl.w	r3, r1, r3
 80097dc:	43db      	mvns	r3, r3
 80097de:	401a      	ands	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	08da      	lsrs	r2, r3, #3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	3208      	adds	r2, #8
 80097ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	f003 0307 	and.w	r3, r3, #7
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	220f      	movs	r2, #15
 80097fa:	fa02 f303 	lsl.w	r3, r2, r3
 80097fe:	43db      	mvns	r3, r3
 8009800:	697a      	ldr	r2, [r7, #20]
 8009802:	08d2      	lsrs	r2, r2, #3
 8009804:	4019      	ands	r1, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	3208      	adds	r2, #8
 800980a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68da      	ldr	r2, [r3, #12]
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	005b      	lsls	r3, r3, #1
 8009816:	2103      	movs	r1, #3
 8009818:	fa01 f303 	lsl.w	r3, r1, r3
 800981c:	43db      	mvns	r3, r3
 800981e:	401a      	ands	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	2101      	movs	r1, #1
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	fa01 f303 	lsl.w	r3, r1, r3
 8009830:	43db      	mvns	r3, r3
 8009832:	401a      	ands	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	689a      	ldr	r2, [r3, #8]
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	005b      	lsls	r3, r3, #1
 8009840:	2103      	movs	r1, #3
 8009842:	fa01 f303 	lsl.w	r3, r1, r3
 8009846:	43db      	mvns	r3, r3
 8009848:	401a      	ands	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	3301      	adds	r3, #1
 8009852:	617b      	str	r3, [r7, #20]
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	2b0f      	cmp	r3, #15
 8009858:	f67f af34 	bls.w	80096c4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800985c:	bf00      	nop
 800985e:	bf00      	nop
 8009860:	371c      	adds	r7, #28
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	40013800 	.word	0x40013800
 8009870:	40020000 	.word	0x40020000
 8009874:	40020400 	.word	0x40020400
 8009878:	40020800 	.word	0x40020800
 800987c:	40020c00 	.word	0x40020c00
 8009880:	40021000 	.word	0x40021000
 8009884:	40021400 	.word	0x40021400
 8009888:	40021800 	.word	0x40021800
 800988c:	40013c00 	.word	0x40013c00

08009890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	807b      	strh	r3, [r7, #2]
 800989c:	4613      	mov	r3, r2
 800989e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80098a0:	787b      	ldrb	r3, [r7, #1]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80098a6:	887a      	ldrh	r2, [r7, #2]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80098ac:	e003      	b.n	80098b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80098ae:	887b      	ldrh	r3, [r7, #2]
 80098b0:	041a      	lsls	r2, r3, #16
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	619a      	str	r2, [r3, #24]
}
 80098b6:	bf00      	nop
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
	...

080098c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	4603      	mov	r3, r0
 80098cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80098ce:	4b08      	ldr	r3, [pc, #32]	; (80098f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80098d0:	695a      	ldr	r2, [r3, #20]
 80098d2:	88fb      	ldrh	r3, [r7, #6]
 80098d4:	4013      	ands	r3, r2
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d006      	beq.n	80098e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80098da:	4a05      	ldr	r2, [pc, #20]	; (80098f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80098dc:	88fb      	ldrh	r3, [r7, #6]
 80098de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80098e0:	88fb      	ldrh	r3, [r7, #6]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fc ff08 	bl	80066f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80098e8:	bf00      	nop
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	40013c00 	.word	0x40013c00

080098f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d101      	bne.n	8009906 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e12b      	b.n	8009b5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800990c:	b2db      	uxtb	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	d106      	bne.n	8009920 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7f9 ff4e 	bl	80037bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2224      	movs	r2, #36	; 0x24
 8009924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f022 0201 	bic.w	r2, r2, #1
 8009936:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009946:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009956:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009958:	f002 fd2e 	bl	800c3b8 <HAL_RCC_GetPCLK1Freq>
 800995c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	4a81      	ldr	r2, [pc, #516]	; (8009b68 <HAL_I2C_Init+0x274>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d807      	bhi.n	8009978 <HAL_I2C_Init+0x84>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	4a80      	ldr	r2, [pc, #512]	; (8009b6c <HAL_I2C_Init+0x278>)
 800996c:	4293      	cmp	r3, r2
 800996e:	bf94      	ite	ls
 8009970:	2301      	movls	r3, #1
 8009972:	2300      	movhi	r3, #0
 8009974:	b2db      	uxtb	r3, r3
 8009976:	e006      	b.n	8009986 <HAL_I2C_Init+0x92>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	4a7d      	ldr	r2, [pc, #500]	; (8009b70 <HAL_I2C_Init+0x27c>)
 800997c:	4293      	cmp	r3, r2
 800997e:	bf94      	ite	ls
 8009980:	2301      	movls	r3, #1
 8009982:	2300      	movhi	r3, #0
 8009984:	b2db      	uxtb	r3, r3
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e0e7      	b.n	8009b5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	4a78      	ldr	r2, [pc, #480]	; (8009b74 <HAL_I2C_Init+0x280>)
 8009992:	fba2 2303 	umull	r2, r3, r2, r3
 8009996:	0c9b      	lsrs	r3, r3, #18
 8009998:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	430a      	orrs	r2, r1
 80099ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	6a1b      	ldr	r3, [r3, #32]
 80099b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	4a6a      	ldr	r2, [pc, #424]	; (8009b68 <HAL_I2C_Init+0x274>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d802      	bhi.n	80099c8 <HAL_I2C_Init+0xd4>
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	3301      	adds	r3, #1
 80099c6:	e009      	b.n	80099dc <HAL_I2C_Init+0xe8>
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80099ce:	fb02 f303 	mul.w	r3, r2, r3
 80099d2:	4a69      	ldr	r2, [pc, #420]	; (8009b78 <HAL_I2C_Init+0x284>)
 80099d4:	fba2 2303 	umull	r2, r3, r2, r3
 80099d8:	099b      	lsrs	r3, r3, #6
 80099da:	3301      	adds	r3, #1
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	6812      	ldr	r2, [r2, #0]
 80099e0:	430b      	orrs	r3, r1
 80099e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	69db      	ldr	r3, [r3, #28]
 80099ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80099ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	495c      	ldr	r1, [pc, #368]	; (8009b68 <HAL_I2C_Init+0x274>)
 80099f8:	428b      	cmp	r3, r1
 80099fa:	d819      	bhi.n	8009a30 <HAL_I2C_Init+0x13c>
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	1e59      	subs	r1, r3, #1
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	005b      	lsls	r3, r3, #1
 8009a06:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a0a:	1c59      	adds	r1, r3, #1
 8009a0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009a10:	400b      	ands	r3, r1
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00a      	beq.n	8009a2c <HAL_I2C_Init+0x138>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	1e59      	subs	r1, r3, #1
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	005b      	lsls	r3, r3, #1
 8009a20:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a24:	3301      	adds	r3, #1
 8009a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a2a:	e051      	b.n	8009ad0 <HAL_I2C_Init+0x1dc>
 8009a2c:	2304      	movs	r3, #4
 8009a2e:	e04f      	b.n	8009ad0 <HAL_I2C_Init+0x1dc>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d111      	bne.n	8009a5c <HAL_I2C_Init+0x168>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	1e58      	subs	r0, r3, #1
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6859      	ldr	r1, [r3, #4]
 8009a40:	460b      	mov	r3, r1
 8009a42:	005b      	lsls	r3, r3, #1
 8009a44:	440b      	add	r3, r1
 8009a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	bf0c      	ite	eq
 8009a54:	2301      	moveq	r3, #1
 8009a56:	2300      	movne	r3, #0
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	e012      	b.n	8009a82 <HAL_I2C_Init+0x18e>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	1e58      	subs	r0, r3, #1
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6859      	ldr	r1, [r3, #4]
 8009a64:	460b      	mov	r3, r1
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	440b      	add	r3, r1
 8009a6a:	0099      	lsls	r1, r3, #2
 8009a6c:	440b      	add	r3, r1
 8009a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a72:	3301      	adds	r3, #1
 8009a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	bf0c      	ite	eq
 8009a7c:	2301      	moveq	r3, #1
 8009a7e:	2300      	movne	r3, #0
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d001      	beq.n	8009a8a <HAL_I2C_Init+0x196>
 8009a86:	2301      	movs	r3, #1
 8009a88:	e022      	b.n	8009ad0 <HAL_I2C_Init+0x1dc>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10e      	bne.n	8009ab0 <HAL_I2C_Init+0x1bc>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	1e58      	subs	r0, r3, #1
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6859      	ldr	r1, [r3, #4]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	005b      	lsls	r3, r3, #1
 8009a9e:	440b      	add	r3, r1
 8009aa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aae:	e00f      	b.n	8009ad0 <HAL_I2C_Init+0x1dc>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	1e58      	subs	r0, r3, #1
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6859      	ldr	r1, [r3, #4]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	440b      	add	r3, r1
 8009abe:	0099      	lsls	r1, r3, #2
 8009ac0:	440b      	add	r3, r1
 8009ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009acc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ad0:	6879      	ldr	r1, [r7, #4]
 8009ad2:	6809      	ldr	r1, [r1, #0]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	69da      	ldr	r2, [r3, #28]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	431a      	orrs	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	430a      	orrs	r2, r1
 8009af2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009afe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	6911      	ldr	r1, [r2, #16]
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	68d2      	ldr	r2, [r2, #12]
 8009b0a:	4311      	orrs	r1, r2
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	6812      	ldr	r2, [r2, #0]
 8009b10:	430b      	orrs	r3, r1
 8009b12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	695a      	ldr	r2, [r3, #20]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	431a      	orrs	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f042 0201 	orr.w	r2, r2, #1
 8009b3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2220      	movs	r2, #32
 8009b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	000186a0 	.word	0x000186a0
 8009b6c:	001e847f 	.word	0x001e847f
 8009b70:	003d08ff 	.word	0x003d08ff
 8009b74:	431bde83 	.word	0x431bde83
 8009b78:	10624dd3 	.word	0x10624dd3

08009b7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b088      	sub	sp, #32
 8009b80:	af02      	add	r7, sp, #8
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	607a      	str	r2, [r7, #4]
 8009b86:	461a      	mov	r2, r3
 8009b88:	460b      	mov	r3, r1
 8009b8a:	817b      	strh	r3, [r7, #10]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b90:	f7fe fba2 	bl	80082d8 <HAL_GetTick>
 8009b94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b20      	cmp	r3, #32
 8009ba0:	f040 80e0 	bne.w	8009d64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	2319      	movs	r3, #25
 8009baa:	2201      	movs	r2, #1
 8009bac:	4970      	ldr	r1, [pc, #448]	; (8009d70 <HAL_I2C_Master_Transmit+0x1f4>)
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f002 f8e6 	bl	800bd80 <I2C_WaitOnFlagUntilTimeout>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d001      	beq.n	8009bbe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009bba:	2302      	movs	r3, #2
 8009bbc:	e0d3      	b.n	8009d66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d101      	bne.n	8009bcc <HAL_I2C_Master_Transmit+0x50>
 8009bc8:	2302      	movs	r3, #2
 8009bca:	e0cc      	b.n	8009d66 <HAL_I2C_Master_Transmit+0x1ea>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f003 0301 	and.w	r3, r3, #1
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d007      	beq.n	8009bf2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f042 0201 	orr.w	r2, r2, #1
 8009bf0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2221      	movs	r2, #33	; 0x21
 8009c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2210      	movs	r2, #16
 8009c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	893a      	ldrh	r2, [r7, #8]
 8009c22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4a50      	ldr	r2, [pc, #320]	; (8009d74 <HAL_I2C_Master_Transmit+0x1f8>)
 8009c32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009c34:	8979      	ldrh	r1, [r7, #10]
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	6a3a      	ldr	r2, [r7, #32]
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f001 fea8 	bl	800b990 <I2C_MasterRequestWrite>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e08d      	b.n	8009d66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	613b      	str	r3, [r7, #16]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	695b      	ldr	r3, [r3, #20]
 8009c54:	613b      	str	r3, [r7, #16]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	699b      	ldr	r3, [r3, #24]
 8009c5c:	613b      	str	r3, [r7, #16]
 8009c5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009c60:	e066      	b.n	8009d30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c62:	697a      	ldr	r2, [r7, #20]
 8009c64:	6a39      	ldr	r1, [r7, #32]
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f002 f960 	bl	800bf2c <I2C_WaitOnTXEFlagUntilTimeout>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00d      	beq.n	8009c8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c76:	2b04      	cmp	r3, #4
 8009c78:	d107      	bne.n	8009c8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e06b      	b.n	8009d66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c92:	781a      	ldrb	r2, [r3, #0]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	3b01      	subs	r3, #1
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	695b      	ldr	r3, [r3, #20]
 8009cc4:	f003 0304 	and.w	r3, r3, #4
 8009cc8:	2b04      	cmp	r3, #4
 8009cca:	d11b      	bne.n	8009d04 <HAL_I2C_Master_Transmit+0x188>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d017      	beq.n	8009d04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd8:	781a      	ldrb	r2, [r3, #0]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce4:	1c5a      	adds	r2, r3, #1
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	6a39      	ldr	r1, [r7, #32]
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f002 f950 	bl	800bfae <I2C_WaitOnBTFFlagUntilTimeout>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00d      	beq.n	8009d30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d18:	2b04      	cmp	r3, #4
 8009d1a:	d107      	bne.n	8009d2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e01a      	b.n	8009d66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d194      	bne.n	8009c62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	e000      	b.n	8009d66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009d64:	2302      	movs	r3, #2
  }
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3718      	adds	r7, #24
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	00100002 	.word	0x00100002
 8009d74:	ffff0000 	.word	0xffff0000

08009d78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b08c      	sub	sp, #48	; 0x30
 8009d7c:	af02      	add	r7, sp, #8
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	607a      	str	r2, [r7, #4]
 8009d82:	461a      	mov	r2, r3
 8009d84:	460b      	mov	r3, r1
 8009d86:	817b      	strh	r3, [r7, #10]
 8009d88:	4613      	mov	r3, r2
 8009d8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009d8c:	f7fe faa4 	bl	80082d8 <HAL_GetTick>
 8009d90:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	2b20      	cmp	r3, #32
 8009d9c:	f040 820b 	bne.w	800a1b6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	2319      	movs	r3, #25
 8009da6:	2201      	movs	r2, #1
 8009da8:	497c      	ldr	r1, [pc, #496]	; (8009f9c <HAL_I2C_Master_Receive+0x224>)
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	f001 ffe8 	bl	800bd80 <I2C_WaitOnFlagUntilTimeout>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d001      	beq.n	8009dba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009db6:	2302      	movs	r3, #2
 8009db8:	e1fe      	b.n	800a1b8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d101      	bne.n	8009dc8 <HAL_I2C_Master_Receive+0x50>
 8009dc4:	2302      	movs	r3, #2
 8009dc6:	e1f7      	b.n	800a1b8 <HAL_I2C_Master_Receive+0x440>
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d007      	beq.n	8009dee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f042 0201 	orr.w	r2, r2, #1
 8009dec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009dfc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2222      	movs	r2, #34	; 0x22
 8009e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2210      	movs	r2, #16
 8009e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	893a      	ldrh	r2, [r7, #8]
 8009e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	4a5c      	ldr	r2, [pc, #368]	; (8009fa0 <HAL_I2C_Master_Receive+0x228>)
 8009e2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009e30:	8979      	ldrh	r1, [r7, #10]
 8009e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e36:	68f8      	ldr	r0, [r7, #12]
 8009e38:	f001 fe2c 	bl	800ba94 <I2C_MasterRequestRead>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e1b8      	b.n	800a1b8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d113      	bne.n	8009e76 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e4e:	2300      	movs	r3, #0
 8009e50:	623b      	str	r3, [r7, #32]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	623b      	str	r3, [r7, #32]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	623b      	str	r3, [r7, #32]
 8009e62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	e18c      	b.n	800a190 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d11b      	bne.n	8009eb6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e8e:	2300      	movs	r3, #0
 8009e90:	61fb      	str	r3, [r7, #28]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	695b      	ldr	r3, [r3, #20]
 8009e98:	61fb      	str	r3, [r7, #28]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	61fb      	str	r3, [r7, #28]
 8009ea2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	e16c      	b.n	800a190 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eba:	2b02      	cmp	r3, #2
 8009ebc:	d11b      	bne.n	8009ef6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ecc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009edc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ede:	2300      	movs	r3, #0
 8009ee0:	61bb      	str	r3, [r7, #24]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	61bb      	str	r3, [r7, #24]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	61bb      	str	r3, [r7, #24]
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	e14c      	b.n	800a190 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f06:	2300      	movs	r3, #0
 8009f08:	617b      	str	r3, [r7, #20]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	617b      	str	r3, [r7, #20]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	699b      	ldr	r3, [r3, #24]
 8009f18:	617b      	str	r3, [r7, #20]
 8009f1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009f1c:	e138      	b.n	800a190 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f22:	2b03      	cmp	r3, #3
 8009f24:	f200 80f1 	bhi.w	800a10a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d123      	bne.n	8009f78 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f002 f8ad 	bl	800c094 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d001      	beq.n	8009f44 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e139      	b.n	800a1b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	691a      	ldr	r2, [r3, #16]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4e:	b2d2      	uxtb	r2, r2
 8009f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f56:	1c5a      	adds	r2, r3, #1
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f60:	3b01      	subs	r3, #1
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f76:	e10b      	b.n	800a190 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d14e      	bne.n	800a01e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f86:	2200      	movs	r2, #0
 8009f88:	4906      	ldr	r1, [pc, #24]	; (8009fa4 <HAL_I2C_Master_Receive+0x22c>)
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f001 fef8 	bl	800bd80 <I2C_WaitOnFlagUntilTimeout>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d008      	beq.n	8009fa8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e10e      	b.n	800a1b8 <HAL_I2C_Master_Receive+0x440>
 8009f9a:	bf00      	nop
 8009f9c:	00100002 	.word	0x00100002
 8009fa0:	ffff0000 	.word	0xffff0000
 8009fa4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	691a      	ldr	r2, [r3, #16]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc2:	b2d2      	uxtb	r2, r2
 8009fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	1c5a      	adds	r2, r3, #1
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	691a      	ldr	r2, [r3, #16]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff4:	b2d2      	uxtb	r2, r2
 8009ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffc:	1c5a      	adds	r2, r3, #1
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a006:	3b01      	subs	r3, #1
 800a008:	b29a      	uxth	r2, r3
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a012:	b29b      	uxth	r3, r3
 800a014:	3b01      	subs	r3, #1
 800a016:	b29a      	uxth	r2, r3
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a01c:	e0b8      	b.n	800a190 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a024:	2200      	movs	r2, #0
 800a026:	4966      	ldr	r1, [pc, #408]	; (800a1c0 <HAL_I2C_Master_Receive+0x448>)
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f001 fea9 	bl	800bd80 <I2C_WaitOnFlagUntilTimeout>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	e0bf      	b.n	800a1b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	691a      	ldr	r2, [r3, #16]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a052:	b2d2      	uxtb	r2, r2
 800a054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05a:	1c5a      	adds	r2, r3, #1
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a064:	3b01      	subs	r3, #1
 800a066:	b29a      	uxth	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a070:	b29b      	uxth	r3, r3
 800a072:	3b01      	subs	r3, #1
 800a074:	b29a      	uxth	r2, r3
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a080:	2200      	movs	r2, #0
 800a082:	494f      	ldr	r1, [pc, #316]	; (800a1c0 <HAL_I2C_Master_Receive+0x448>)
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f001 fe7b 	bl	800bd80 <I2C_WaitOnFlagUntilTimeout>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d001      	beq.n	800a094 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e091      	b.n	800a1b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	691a      	ldr	r2, [r3, #16]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ae:	b2d2      	uxtb	r2, r2
 800a0b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b6:	1c5a      	adds	r2, r3, #1
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	691a      	ldr	r2, [r3, #16]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e0:	b2d2      	uxtb	r2, r2
 800a0e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e8:	1c5a      	adds	r2, r3, #1
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	3b01      	subs	r3, #1
 800a102:	b29a      	uxth	r2, r3
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a108:	e042      	b.n	800a190 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a10a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a10c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f001 ffc0 	bl	800c094 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e04c      	b.n	800a1b8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	691a      	ldr	r2, [r3, #16]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	b2d2      	uxtb	r2, r2
 800a12a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a13a:	3b01      	subs	r3, #1
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a146:	b29b      	uxth	r3, r3
 800a148:	3b01      	subs	r3, #1
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	695b      	ldr	r3, [r3, #20]
 800a156:	f003 0304 	and.w	r3, r3, #4
 800a15a:	2b04      	cmp	r3, #4
 800a15c:	d118      	bne.n	800a190 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	691a      	ldr	r2, [r3, #16]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a168:	b2d2      	uxtb	r2, r2
 800a16a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a170:	1c5a      	adds	r2, r3, #1
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a17a:	3b01      	subs	r3, #1
 800a17c:	b29a      	uxth	r2, r3
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a186:	b29b      	uxth	r3, r3
 800a188:	3b01      	subs	r3, #1
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a194:	2b00      	cmp	r3, #0
 800a196:	f47f aec2 	bne.w	8009f1e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2220      	movs	r2, #32
 800a19e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	e000      	b.n	800a1b8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a1b6:	2302      	movs	r3, #2
  }
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3728      	adds	r7, #40	; 0x28
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	00010004 	.word	0x00010004

0800a1c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b088      	sub	sp, #32
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1dc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1ec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a1ee:	7bfb      	ldrb	r3, [r7, #15]
 800a1f0:	2b10      	cmp	r3, #16
 800a1f2:	d003      	beq.n	800a1fc <HAL_I2C_EV_IRQHandler+0x38>
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
 800a1f6:	2b40      	cmp	r3, #64	; 0x40
 800a1f8:	f040 80c1 	bne.w	800a37e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	f003 0301 	and.w	r3, r3, #1
 800a212:	2b00      	cmp	r3, #0
 800a214:	d10d      	bne.n	800a232 <HAL_I2C_EV_IRQHandler+0x6e>
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a21c:	d003      	beq.n	800a226 <HAL_I2C_EV_IRQHandler+0x62>
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a224:	d101      	bne.n	800a22a <HAL_I2C_EV_IRQHandler+0x66>
 800a226:	2301      	movs	r3, #1
 800a228:	e000      	b.n	800a22c <HAL_I2C_EV_IRQHandler+0x68>
 800a22a:	2300      	movs	r3, #0
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	f000 8132 	beq.w	800a496 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	f003 0301 	and.w	r3, r3, #1
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00c      	beq.n	800a256 <HAL_I2C_EV_IRQHandler+0x92>
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	0a5b      	lsrs	r3, r3, #9
 800a240:	f003 0301 	and.w	r3, r3, #1
 800a244:	2b00      	cmp	r3, #0
 800a246:	d006      	beq.n	800a256 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f001 ffa8 	bl	800c19e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fd83 	bl	800ad5a <I2C_Master_SB>
 800a254:	e092      	b.n	800a37c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	08db      	lsrs	r3, r3, #3
 800a25a:	f003 0301 	and.w	r3, r3, #1
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d009      	beq.n	800a276 <HAL_I2C_EV_IRQHandler+0xb2>
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	0a5b      	lsrs	r3, r3, #9
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d003      	beq.n	800a276 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 fdf9 	bl	800ae66 <I2C_Master_ADD10>
 800a274:	e082      	b.n	800a37c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	085b      	lsrs	r3, r3, #1
 800a27a:	f003 0301 	and.w	r3, r3, #1
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d009      	beq.n	800a296 <HAL_I2C_EV_IRQHandler+0xd2>
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	0a5b      	lsrs	r3, r3, #9
 800a286:	f003 0301 	and.w	r3, r3, #1
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d003      	beq.n	800a296 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 fe13 	bl	800aeba <I2C_Master_ADDR>
 800a294:	e072      	b.n	800a37c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	089b      	lsrs	r3, r3, #2
 800a29a:	f003 0301 	and.w	r3, r3, #1
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d03b      	beq.n	800a31a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2b0:	f000 80f3 	beq.w	800a49a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	09db      	lsrs	r3, r3, #7
 800a2b8:	f003 0301 	and.w	r3, r3, #1
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00f      	beq.n	800a2e0 <HAL_I2C_EV_IRQHandler+0x11c>
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	0a9b      	lsrs	r3, r3, #10
 800a2c4:	f003 0301 	and.w	r3, r3, #1
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d009      	beq.n	800a2e0 <HAL_I2C_EV_IRQHandler+0x11c>
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	089b      	lsrs	r3, r3, #2
 800a2d0:	f003 0301 	and.w	r3, r3, #1
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d103      	bne.n	800a2e0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f9f3 	bl	800a6c4 <I2C_MasterTransmit_TXE>
 800a2de:	e04d      	b.n	800a37c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	089b      	lsrs	r3, r3, #2
 800a2e4:	f003 0301 	and.w	r3, r3, #1
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f000 80d6 	beq.w	800a49a <HAL_I2C_EV_IRQHandler+0x2d6>
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	0a5b      	lsrs	r3, r3, #9
 800a2f2:	f003 0301 	and.w	r3, r3, #1
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f000 80cf 	beq.w	800a49a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a2fc:	7bbb      	ldrb	r3, [r7, #14]
 800a2fe:	2b21      	cmp	r3, #33	; 0x21
 800a300:	d103      	bne.n	800a30a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 fa7a 	bl	800a7fc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a308:	e0c7      	b.n	800a49a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800a30a:	7bfb      	ldrb	r3, [r7, #15]
 800a30c:	2b40      	cmp	r3, #64	; 0x40
 800a30e:	f040 80c4 	bne.w	800a49a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fae8 	bl	800a8e8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a318:	e0bf      	b.n	800a49a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a328:	f000 80b7 	beq.w	800a49a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	099b      	lsrs	r3, r3, #6
 800a330:	f003 0301 	and.w	r3, r3, #1
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00f      	beq.n	800a358 <HAL_I2C_EV_IRQHandler+0x194>
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	0a9b      	lsrs	r3, r3, #10
 800a33c:	f003 0301 	and.w	r3, r3, #1
 800a340:	2b00      	cmp	r3, #0
 800a342:	d009      	beq.n	800a358 <HAL_I2C_EV_IRQHandler+0x194>
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	089b      	lsrs	r3, r3, #2
 800a348:	f003 0301 	and.w	r3, r3, #1
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d103      	bne.n	800a358 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 fb5d 	bl	800aa10 <I2C_MasterReceive_RXNE>
 800a356:	e011      	b.n	800a37c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	089b      	lsrs	r3, r3, #2
 800a35c:	f003 0301 	and.w	r3, r3, #1
 800a360:	2b00      	cmp	r3, #0
 800a362:	f000 809a 	beq.w	800a49a <HAL_I2C_EV_IRQHandler+0x2d6>
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	0a5b      	lsrs	r3, r3, #9
 800a36a:	f003 0301 	and.w	r3, r3, #1
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f000 8093 	beq.w	800a49a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fc06 	bl	800ab86 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a37a:	e08e      	b.n	800a49a <HAL_I2C_EV_IRQHandler+0x2d6>
 800a37c:	e08d      	b.n	800a49a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a382:	2b00      	cmp	r3, #0
 800a384:	d004      	beq.n	800a390 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	61fb      	str	r3, [r7, #28]
 800a38e:	e007      	b.n	800a3a0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	699b      	ldr	r3, [r3, #24]
 800a396:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	695b      	ldr	r3, [r3, #20]
 800a39e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	085b      	lsrs	r3, r3, #1
 800a3a4:	f003 0301 	and.w	r3, r3, #1
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d012      	beq.n	800a3d2 <HAL_I2C_EV_IRQHandler+0x20e>
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	0a5b      	lsrs	r3, r3, #9
 800a3b0:	f003 0301 	and.w	r3, r3, #1
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00c      	beq.n	800a3d2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d003      	beq.n	800a3c8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	699b      	ldr	r3, [r3, #24]
 800a3c6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800a3c8:	69b9      	ldr	r1, [r7, #24]
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 ffc4 	bl	800b358 <I2C_Slave_ADDR>
 800a3d0:	e066      	b.n	800a4a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	091b      	lsrs	r3, r3, #4
 800a3d6:	f003 0301 	and.w	r3, r3, #1
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d009      	beq.n	800a3f2 <HAL_I2C_EV_IRQHandler+0x22e>
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	0a5b      	lsrs	r3, r3, #9
 800a3e2:	f003 0301 	and.w	r3, r3, #1
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d003      	beq.n	800a3f2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fffe 	bl	800b3ec <I2C_Slave_STOPF>
 800a3f0:	e056      	b.n	800a4a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a3f2:	7bbb      	ldrb	r3, [r7, #14]
 800a3f4:	2b21      	cmp	r3, #33	; 0x21
 800a3f6:	d002      	beq.n	800a3fe <HAL_I2C_EV_IRQHandler+0x23a>
 800a3f8:	7bbb      	ldrb	r3, [r7, #14]
 800a3fa:	2b29      	cmp	r3, #41	; 0x29
 800a3fc:	d125      	bne.n	800a44a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	09db      	lsrs	r3, r3, #7
 800a402:	f003 0301 	and.w	r3, r3, #1
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00f      	beq.n	800a42a <HAL_I2C_EV_IRQHandler+0x266>
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	0a9b      	lsrs	r3, r3, #10
 800a40e:	f003 0301 	and.w	r3, r3, #1
 800a412:	2b00      	cmp	r3, #0
 800a414:	d009      	beq.n	800a42a <HAL_I2C_EV_IRQHandler+0x266>
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	089b      	lsrs	r3, r3, #2
 800a41a:	f003 0301 	and.w	r3, r3, #1
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d103      	bne.n	800a42a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 feda 	bl	800b1dc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a428:	e039      	b.n	800a49e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	089b      	lsrs	r3, r3, #2
 800a42e:	f003 0301 	and.w	r3, r3, #1
 800a432:	2b00      	cmp	r3, #0
 800a434:	d033      	beq.n	800a49e <HAL_I2C_EV_IRQHandler+0x2da>
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	0a5b      	lsrs	r3, r3, #9
 800a43a:	f003 0301 	and.w	r3, r3, #1
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d02d      	beq.n	800a49e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 ff07 	bl	800b256 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a448:	e029      	b.n	800a49e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	099b      	lsrs	r3, r3, #6
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00f      	beq.n	800a476 <HAL_I2C_EV_IRQHandler+0x2b2>
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	0a9b      	lsrs	r3, r3, #10
 800a45a:	f003 0301 	and.w	r3, r3, #1
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d009      	beq.n	800a476 <HAL_I2C_EV_IRQHandler+0x2b2>
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	089b      	lsrs	r3, r3, #2
 800a466:	f003 0301 	and.w	r3, r3, #1
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d103      	bne.n	800a476 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 ff12 	bl	800b298 <I2C_SlaveReceive_RXNE>
 800a474:	e014      	b.n	800a4a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	089b      	lsrs	r3, r3, #2
 800a47a:	f003 0301 	and.w	r3, r3, #1
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00e      	beq.n	800a4a0 <HAL_I2C_EV_IRQHandler+0x2dc>
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	0a5b      	lsrs	r3, r3, #9
 800a486:	f003 0301 	and.w	r3, r3, #1
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d008      	beq.n	800a4a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 ff40 	bl	800b314 <I2C_SlaveReceive_BTF>
 800a494:	e004      	b.n	800a4a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800a496:	bf00      	nop
 800a498:	e002      	b.n	800a4a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a49a:	bf00      	nop
 800a49c:	e000      	b.n	800a4a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a49e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800a4a0:	3720      	adds	r7, #32
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b08a      	sub	sp, #40	; 0x28
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4c8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a4ca:	6a3b      	ldr	r3, [r7, #32]
 800a4cc:	0a1b      	lsrs	r3, r3, #8
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00e      	beq.n	800a4f4 <HAL_I2C_ER_IRQHandler+0x4e>
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	0a1b      	lsrs	r3, r3, #8
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d008      	beq.n	800a4f4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e4:	f043 0301 	orr.w	r3, r3, #1
 800a4e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a4f2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a4f4:	6a3b      	ldr	r3, [r7, #32]
 800a4f6:	0a5b      	lsrs	r3, r3, #9
 800a4f8:	f003 0301 	and.w	r3, r3, #1
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00e      	beq.n	800a51e <HAL_I2C_ER_IRQHandler+0x78>
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	0a1b      	lsrs	r3, r3, #8
 800a504:	f003 0301 	and.w	r3, r3, #1
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d008      	beq.n	800a51e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50e:	f043 0302 	orr.w	r3, r3, #2
 800a512:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800a51c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a51e:	6a3b      	ldr	r3, [r7, #32]
 800a520:	0a9b      	lsrs	r3, r3, #10
 800a522:	f003 0301 	and.w	r3, r3, #1
 800a526:	2b00      	cmp	r3, #0
 800a528:	d03f      	beq.n	800a5aa <HAL_I2C_ER_IRQHandler+0x104>
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	0a1b      	lsrs	r3, r3, #8
 800a52e:	f003 0301 	and.w	r3, r3, #1
 800a532:	2b00      	cmp	r3, #0
 800a534:	d039      	beq.n	800a5aa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800a536:	7efb      	ldrb	r3, [r7, #27]
 800a538:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a53e:	b29b      	uxth	r3, r3
 800a540:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a548:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a54e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800a550:	7ebb      	ldrb	r3, [r7, #26]
 800a552:	2b20      	cmp	r3, #32
 800a554:	d112      	bne.n	800a57c <HAL_I2C_ER_IRQHandler+0xd6>
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10f      	bne.n	800a57c <HAL_I2C_ER_IRQHandler+0xd6>
 800a55c:	7cfb      	ldrb	r3, [r7, #19]
 800a55e:	2b21      	cmp	r3, #33	; 0x21
 800a560:	d008      	beq.n	800a574 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800a562:	7cfb      	ldrb	r3, [r7, #19]
 800a564:	2b29      	cmp	r3, #41	; 0x29
 800a566:	d005      	beq.n	800a574 <HAL_I2C_ER_IRQHandler+0xce>
 800a568:	7cfb      	ldrb	r3, [r7, #19]
 800a56a:	2b28      	cmp	r3, #40	; 0x28
 800a56c:	d106      	bne.n	800a57c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2b21      	cmp	r3, #33	; 0x21
 800a572:	d103      	bne.n	800a57c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f001 f869 	bl	800b64c <I2C_Slave_AF>
 800a57a:	e016      	b.n	800a5aa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a584:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a588:	f043 0304 	orr.w	r3, r3, #4
 800a58c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a58e:	7efb      	ldrb	r3, [r7, #27]
 800a590:	2b10      	cmp	r3, #16
 800a592:	d002      	beq.n	800a59a <HAL_I2C_ER_IRQHandler+0xf4>
 800a594:	7efb      	ldrb	r3, [r7, #27]
 800a596:	2b40      	cmp	r3, #64	; 0x40
 800a598:	d107      	bne.n	800a5aa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5a8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a5aa:	6a3b      	ldr	r3, [r7, #32]
 800a5ac:	0adb      	lsrs	r3, r3, #11
 800a5ae:	f003 0301 	and.w	r3, r3, #1
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00e      	beq.n	800a5d4 <HAL_I2C_ER_IRQHandler+0x12e>
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	0a1b      	lsrs	r3, r3, #8
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d008      	beq.n	800a5d4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800a5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c4:	f043 0308 	orr.w	r3, r3, #8
 800a5c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800a5d2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d008      	beq.n	800a5ec <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e0:	431a      	orrs	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f001 f8a0 	bl	800b72c <I2C_ITError>
  }
}
 800a5ec:	bf00      	nop
 800a5ee:	3728      	adds	r7, #40	; 0x28
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a5fc:	bf00      	nop
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	460b      	mov	r3, r1
 800a64e:	70fb      	strb	r3, [r7, #3]
 800a650:	4613      	mov	r3, r2
 800a652:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a654:	bf00      	nop
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a690:	bf00      	nop
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a6da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d150      	bne.n	800a78c <I2C_MasterTransmit_TXE+0xc8>
 800a6ea:	7bfb      	ldrb	r3, [r7, #15]
 800a6ec:	2b21      	cmp	r3, #33	; 0x21
 800a6ee:	d14d      	bne.n	800a78c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	2b08      	cmp	r3, #8
 800a6f4:	d01d      	beq.n	800a732 <I2C_MasterTransmit_TXE+0x6e>
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	2b20      	cmp	r3, #32
 800a6fa:	d01a      	beq.n	800a732 <I2C_MasterTransmit_TXE+0x6e>
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a702:	d016      	beq.n	800a732 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	685a      	ldr	r2, [r3, #4]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a712:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2211      	movs	r2, #17
 800a718:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2220      	movs	r2, #32
 800a726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f7ff ff62 	bl	800a5f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a730:	e060      	b.n	800a7f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	685a      	ldr	r2, [r3, #4]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a740:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a750:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2220      	movs	r2, #32
 800a75c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a766:	b2db      	uxtb	r3, r3
 800a768:	2b40      	cmp	r3, #64	; 0x40
 800a76a:	d107      	bne.n	800a77c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f7ff ff7d 	bl	800a674 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a77a:	e03b      	b.n	800a7f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f7ff ff35 	bl	800a5f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a78a:	e033      	b.n	800a7f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800a78c:	7bfb      	ldrb	r3, [r7, #15]
 800a78e:	2b21      	cmp	r3, #33	; 0x21
 800a790:	d005      	beq.n	800a79e <I2C_MasterTransmit_TXE+0xda>
 800a792:	7bbb      	ldrb	r3, [r7, #14]
 800a794:	2b40      	cmp	r3, #64	; 0x40
 800a796:	d12d      	bne.n	800a7f4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800a798:	7bfb      	ldrb	r3, [r7, #15]
 800a79a:	2b22      	cmp	r3, #34	; 0x22
 800a79c:	d12a      	bne.n	800a7f4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d108      	bne.n	800a7ba <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	685a      	ldr	r2, [r3, #4]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7b6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a7b8:	e01c      	b.n	800a7f4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	2b40      	cmp	r3, #64	; 0x40
 800a7c4:	d103      	bne.n	800a7ce <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f88e 	bl	800a8e8 <I2C_MemoryTransmit_TXE_BTF>
}
 800a7cc:	e012      	b.n	800a7f4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d2:	781a      	ldrb	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7de:	1c5a      	adds	r2, r3, #1
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a7f2:	e7ff      	b.n	800a7f4 <I2C_MasterTransmit_TXE+0x130>
 800a7f4:	bf00      	nop
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a808:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a810:	b2db      	uxtb	r3, r3
 800a812:	2b21      	cmp	r3, #33	; 0x21
 800a814:	d164      	bne.n	800a8e0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d012      	beq.n	800a846 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a824:	781a      	ldrb	r2, [r3, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a830:	1c5a      	adds	r2, r3, #1
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	3b01      	subs	r3, #1
 800a83e:	b29a      	uxth	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800a844:	e04c      	b.n	800a8e0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2b08      	cmp	r3, #8
 800a84a:	d01d      	beq.n	800a888 <I2C_MasterTransmit_BTF+0x8c>
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2b20      	cmp	r3, #32
 800a850:	d01a      	beq.n	800a888 <I2C_MasterTransmit_BTF+0x8c>
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a858:	d016      	beq.n	800a888 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	685a      	ldr	r2, [r3, #4]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a868:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2211      	movs	r2, #17
 800a86e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2220      	movs	r2, #32
 800a87c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f7ff feb7 	bl	800a5f4 <HAL_I2C_MasterTxCpltCallback>
}
 800a886:	e02b      	b.n	800a8e0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	685a      	ldr	r2, [r3, #4]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a896:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8a6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2220      	movs	r2, #32
 800a8b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	2b40      	cmp	r3, #64	; 0x40
 800a8c0:	d107      	bne.n	800a8d2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f7ff fed2 	bl	800a674 <HAL_I2C_MemTxCpltCallback>
}
 800a8d0:	e006      	b.n	800a8e0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f7ff fe8a 	bl	800a5f4 <HAL_I2C_MasterTxCpltCallback>
}
 800a8e0:	bf00      	nop
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d11d      	bne.n	800a93c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a904:	2b01      	cmp	r3, #1
 800a906:	d10b      	bne.n	800a920 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a918:	1c9a      	adds	r2, r3, #2
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800a91e:	e073      	b.n	800aa08 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a924:	b29b      	uxth	r3, r3
 800a926:	121b      	asrs	r3, r3, #8
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a934:	1c5a      	adds	r2, r3, #1
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a93a:	e065      	b.n	800aa08 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a940:	2b01      	cmp	r3, #1
 800a942:	d10b      	bne.n	800a95c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a948:	b2da      	uxtb	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a954:	1c5a      	adds	r2, r3, #1
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a95a:	e055      	b.n	800aa08 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a960:	2b02      	cmp	r3, #2
 800a962:	d151      	bne.n	800aa08 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800a964:	7bfb      	ldrb	r3, [r7, #15]
 800a966:	2b22      	cmp	r3, #34	; 0x22
 800a968:	d10d      	bne.n	800a986 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a978:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a97e:	1c5a      	adds	r2, r3, #1
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a984:	e040      	b.n	800aa08 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d015      	beq.n	800a9bc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800a990:	7bfb      	ldrb	r3, [r7, #15]
 800a992:	2b21      	cmp	r3, #33	; 0x21
 800a994:	d112      	bne.n	800a9bc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99a:	781a      	ldrb	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a6:	1c5a      	adds	r2, r3, #1
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a9ba:	e025      	b.n	800aa08 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d120      	bne.n	800aa08 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800a9c6:	7bfb      	ldrb	r3, [r7, #15]
 800a9c8:	2b21      	cmp	r3, #33	; 0x21
 800a9ca:	d11d      	bne.n	800aa08 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	685a      	ldr	r2, [r3, #4]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a9da:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2220      	movs	r2, #32
 800a9f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7ff fe36 	bl	800a674 <HAL_I2C_MemTxCpltCallback>
}
 800aa08:	bf00      	nop
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b22      	cmp	r3, #34	; 0x22
 800aa22:	f040 80ac 	bne.w	800ab7e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2b03      	cmp	r3, #3
 800aa32:	d921      	bls.n	800aa78 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	691a      	ldr	r2, [r3, #16]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3e:	b2d2      	uxtb	r2, r2
 800aa40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa46:	1c5a      	adds	r2, r3, #1
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	3b01      	subs	r3, #1
 800aa54:	b29a      	uxth	r2, r3
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	2b03      	cmp	r3, #3
 800aa62:	f040 808c 	bne.w	800ab7e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa74:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800aa76:	e082      	b.n	800ab7e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d075      	beq.n	800ab6c <I2C_MasterReceive_RXNE+0x15c>
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d002      	beq.n	800aa8c <I2C_MasterReceive_RXNE+0x7c>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d16f      	bne.n	800ab6c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f001 facf 	bl	800c030 <I2C_WaitOnSTOPRequestThroughIT>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d142      	bne.n	800ab1e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aaa6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	685a      	ldr	r2, [r3, #4]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800aab6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	691a      	ldr	r2, [r3, #16]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac2:	b2d2      	uxtb	r2, r2
 800aac4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaca:	1c5a      	adds	r2, r3, #1
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	3b01      	subs	r3, #1
 800aad8:	b29a      	uxth	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2220      	movs	r2, #32
 800aae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	2b40      	cmp	r3, #64	; 0x40
 800aaf0:	d10a      	bne.n	800ab08 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f7ff fdc1 	bl	800a688 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ab06:	e03a      	b.n	800ab7e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2212      	movs	r2, #18
 800ab14:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7ff fd76 	bl	800a608 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ab1c:	e02f      	b.n	800ab7e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	685a      	ldr	r2, [r3, #4]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ab2c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	691a      	ldr	r2, [r3, #16]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab38:	b2d2      	uxtb	r2, r2
 800ab3a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab40:	1c5a      	adds	r2, r3, #1
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2220      	movs	r2, #32
 800ab58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7ff fd99 	bl	800a69c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ab6a:	e008      	b.n	800ab7e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	685a      	ldr	r2, [r3, #4]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab7a:	605a      	str	r2, [r3, #4]
}
 800ab7c:	e7ff      	b.n	800ab7e <I2C_MasterReceive_RXNE+0x16e>
 800ab7e:	bf00      	nop
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b084      	sub	sp, #16
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab92:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	2b04      	cmp	r3, #4
 800ab9c:	d11b      	bne.n	800abd6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	685a      	ldr	r2, [r3, #4]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abac:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	691a      	ldr	r2, [r3, #16]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb8:	b2d2      	uxtb	r2, r2
 800abba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc0:	1c5a      	adds	r2, r3, #1
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abca:	b29b      	uxth	r3, r3
 800abcc:	3b01      	subs	r3, #1
 800abce:	b29a      	uxth	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800abd4:	e0bd      	b.n	800ad52 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abda:	b29b      	uxth	r3, r3
 800abdc:	2b03      	cmp	r3, #3
 800abde:	d129      	bne.n	800ac34 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	685a      	ldr	r2, [r3, #4]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abee:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2b04      	cmp	r3, #4
 800abf4:	d00a      	beq.n	800ac0c <I2C_MasterReceive_BTF+0x86>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2b02      	cmp	r3, #2
 800abfa:	d007      	beq.n	800ac0c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac0a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	691a      	ldr	r2, [r3, #16]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac16:	b2d2      	uxtb	r2, r2
 800ac18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1e:	1c5a      	adds	r2, r3, #1
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800ac32:	e08e      	b.n	800ad52 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d176      	bne.n	800ad2c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d002      	beq.n	800ac4a <I2C_MasterReceive_BTF+0xc4>
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2b10      	cmp	r3, #16
 800ac48:	d108      	bne.n	800ac5c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac58:	601a      	str	r2, [r3, #0]
 800ac5a:	e019      	b.n	800ac90 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2b04      	cmp	r3, #4
 800ac60:	d002      	beq.n	800ac68 <I2C_MasterReceive_BTF+0xe2>
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2b02      	cmp	r3, #2
 800ac66:	d108      	bne.n	800ac7a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ac76:	601a      	str	r2, [r3, #0]
 800ac78:	e00a      	b.n	800ac90 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2b10      	cmp	r3, #16
 800ac7e:	d007      	beq.n	800ac90 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac8e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	691a      	ldr	r2, [r3, #16]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9a:	b2d2      	uxtb	r2, r2
 800ac9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acac:	b29b      	uxth	r3, r3
 800acae:	3b01      	subs	r3, #1
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	691a      	ldr	r2, [r3, #16]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc0:	b2d2      	uxtb	r2, r2
 800acc2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc8:	1c5a      	adds	r2, r3, #1
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	3b01      	subs	r3, #1
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	685a      	ldr	r2, [r3, #4]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800acea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2220      	movs	r2, #32
 800acf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	2b40      	cmp	r3, #64	; 0x40
 800acfe:	d10a      	bne.n	800ad16 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f7ff fcba 	bl	800a688 <HAL_I2C_MemRxCpltCallback>
}
 800ad14:	e01d      	b.n	800ad52 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2212      	movs	r2, #18
 800ad22:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7ff fc6f 	bl	800a608 <HAL_I2C_MasterRxCpltCallback>
}
 800ad2a:	e012      	b.n	800ad52 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	691a      	ldr	r2, [r3, #16]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad36:	b2d2      	uxtb	r2, r2
 800ad38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3e:	1c5a      	adds	r2, r3, #1
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800ad52:	bf00      	nop
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b083      	sub	sp, #12
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	2b40      	cmp	r3, #64	; 0x40
 800ad6c:	d117      	bne.n	800ad9e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d109      	bne.n	800ad8a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ad86:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800ad88:	e067      	b.n	800ae5a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	f043 0301 	orr.w	r3, r3, #1
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	611a      	str	r2, [r3, #16]
}
 800ad9c:	e05d      	b.n	800ae5a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ada6:	d133      	bne.n	800ae10 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	2b21      	cmp	r3, #33	; 0x21
 800adb2:	d109      	bne.n	800adc8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	461a      	mov	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800adc4:	611a      	str	r2, [r3, #16]
 800adc6:	e008      	b.n	800adda <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	f043 0301 	orr.w	r3, r3, #1
 800add2:	b2da      	uxtb	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d004      	beq.n	800adec <I2C_Master_SB+0x92>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d108      	bne.n	800adfe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d032      	beq.n	800ae5a <I2C_Master_SB+0x100>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d02d      	beq.n	800ae5a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	685a      	ldr	r2, [r3, #4]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae0c:	605a      	str	r2, [r3, #4]
}
 800ae0e:	e024      	b.n	800ae5a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d10e      	bne.n	800ae36 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	11db      	asrs	r3, r3, #7
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	f003 0306 	and.w	r3, r3, #6
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	f063 030f 	orn	r3, r3, #15
 800ae2c:	b2da      	uxtb	r2, r3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	611a      	str	r2, [r3, #16]
}
 800ae34:	e011      	b.n	800ae5a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d10d      	bne.n	800ae5a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	11db      	asrs	r3, r3, #7
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	f003 0306 	and.w	r3, r3, #6
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	f063 030e 	orn	r3, r3, #14
 800ae52:	b2da      	uxtb	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	611a      	str	r2, [r3, #16]
}
 800ae5a:	bf00      	nop
 800ae5c:	370c      	adds	r7, #12
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800ae66:	b480      	push	{r7}
 800ae68:	b083      	sub	sp, #12
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae72:	b2da      	uxtb	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d004      	beq.n	800ae8c <I2C_Master_ADD10+0x26>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d108      	bne.n	800ae9e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00c      	beq.n	800aeae <I2C_Master_ADD10+0x48>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d007      	beq.n	800aeae <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	685a      	ldr	r2, [r3, #4]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aeac:	605a      	str	r2, [r3, #4]
  }
}
 800aeae:	bf00      	nop
 800aeb0:	370c      	adds	r7, #12
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr

0800aeba <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800aeba:	b480      	push	{r7}
 800aebc:	b091      	sub	sp, #68	; 0x44
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aec8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aed6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	2b22      	cmp	r3, #34	; 0x22
 800aee2:	f040 8169 	bne.w	800b1b8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10f      	bne.n	800af0e <I2C_Master_ADDR+0x54>
 800aeee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aef2:	2b40      	cmp	r3, #64	; 0x40
 800aef4:	d10b      	bne.n	800af0e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aef6:	2300      	movs	r3, #0
 800aef8:	633b      	str	r3, [r7, #48]	; 0x30
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	695b      	ldr	r3, [r3, #20]
 800af00:	633b      	str	r3, [r7, #48]	; 0x30
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	699b      	ldr	r3, [r3, #24]
 800af08:	633b      	str	r3, [r7, #48]	; 0x30
 800af0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0c:	e160      	b.n	800b1d0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af12:	2b00      	cmp	r3, #0
 800af14:	d11d      	bne.n	800af52 <I2C_Master_ADDR+0x98>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800af1e:	d118      	bne.n	800af52 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af20:	2300      	movs	r3, #0
 800af22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	695b      	ldr	r3, [r3, #20]
 800af2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	699b      	ldr	r3, [r3, #24]
 800af32:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af34:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af44:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af4a:	1c5a      	adds	r2, r3, #1
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	651a      	str	r2, [r3, #80]	; 0x50
 800af50:	e13e      	b.n	800b1d0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af56:	b29b      	uxth	r3, r3
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d113      	bne.n	800af84 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af5c:	2300      	movs	r3, #0
 800af5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	695b      	ldr	r3, [r3, #20]
 800af66:	62bb      	str	r3, [r7, #40]	; 0x28
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	699b      	ldr	r3, [r3, #24]
 800af6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800af70:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af80:	601a      	str	r2, [r3, #0]
 800af82:	e115      	b.n	800b1b0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af88:	b29b      	uxth	r3, r3
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	f040 808a 	bne.w	800b0a4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800af90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800af96:	d137      	bne.n	800b008 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afa6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afb6:	d113      	bne.n	800afe0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afc6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800afc8:	2300      	movs	r3, #0
 800afca:	627b      	str	r3, [r7, #36]	; 0x24
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	695b      	ldr	r3, [r3, #20]
 800afd2:	627b      	str	r3, [r7, #36]	; 0x24
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	699b      	ldr	r3, [r3, #24]
 800afda:	627b      	str	r3, [r7, #36]	; 0x24
 800afdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afde:	e0e7      	b.n	800b1b0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800afe0:	2300      	movs	r3, #0
 800afe2:	623b      	str	r3, [r7, #32]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	623b      	str	r3, [r7, #32]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	699b      	ldr	r3, [r3, #24]
 800aff2:	623b      	str	r3, [r7, #32]
 800aff4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b004:	601a      	str	r2, [r3, #0]
 800b006:	e0d3      	b.n	800b1b0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800b008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00a:	2b08      	cmp	r3, #8
 800b00c:	d02e      	beq.n	800b06c <I2C_Master_ADDR+0x1b2>
 800b00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b010:	2b20      	cmp	r3, #32
 800b012:	d02b      	beq.n	800b06c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800b014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b016:	2b12      	cmp	r3, #18
 800b018:	d102      	bne.n	800b020 <I2C_Master_ADDR+0x166>
 800b01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d125      	bne.n	800b06c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b022:	2b04      	cmp	r3, #4
 800b024:	d00e      	beq.n	800b044 <I2C_Master_ADDR+0x18a>
 800b026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b028:	2b02      	cmp	r3, #2
 800b02a:	d00b      	beq.n	800b044 <I2C_Master_ADDR+0x18a>
 800b02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02e:	2b10      	cmp	r3, #16
 800b030:	d008      	beq.n	800b044 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b040:	601a      	str	r2, [r3, #0]
 800b042:	e007      	b.n	800b054 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b052:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b054:	2300      	movs	r3, #0
 800b056:	61fb      	str	r3, [r7, #28]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	695b      	ldr	r3, [r3, #20]
 800b05e:	61fb      	str	r3, [r7, #28]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	699b      	ldr	r3, [r3, #24]
 800b066:	61fb      	str	r3, [r7, #28]
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	e0a1      	b.n	800b1b0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b07a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b07c:	2300      	movs	r3, #0
 800b07e:	61bb      	str	r3, [r7, #24]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	61bb      	str	r3, [r7, #24]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	699b      	ldr	r3, [r3, #24]
 800b08e:	61bb      	str	r3, [r7, #24]
 800b090:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0a0:	601a      	str	r2, [r3, #0]
 800b0a2:	e085      	b.n	800b1b0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d14d      	bne.n	800b14a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b0:	2b04      	cmp	r3, #4
 800b0b2:	d016      	beq.n	800b0e2 <I2C_Master_ADDR+0x228>
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d013      	beq.n	800b0e2 <I2C_Master_ADDR+0x228>
 800b0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0bc:	2b10      	cmp	r3, #16
 800b0be:	d010      	beq.n	800b0e2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0ce:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0de:	601a      	str	r2, [r3, #0]
 800b0e0:	e007      	b.n	800b0f2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b0f0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b100:	d117      	bne.n	800b132 <I2C_Master_ADDR+0x278>
 800b102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b104:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b108:	d00b      	beq.n	800b122 <I2C_Master_ADDR+0x268>
 800b10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d008      	beq.n	800b122 <I2C_Master_ADDR+0x268>
 800b110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b112:	2b08      	cmp	r3, #8
 800b114:	d005      	beq.n	800b122 <I2C_Master_ADDR+0x268>
 800b116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b118:	2b10      	cmp	r3, #16
 800b11a:	d002      	beq.n	800b122 <I2C_Master_ADDR+0x268>
 800b11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11e:	2b20      	cmp	r3, #32
 800b120:	d107      	bne.n	800b132 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	685a      	ldr	r2, [r3, #4]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b130:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b132:	2300      	movs	r3, #0
 800b134:	617b      	str	r3, [r7, #20]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	695b      	ldr	r3, [r3, #20]
 800b13c:	617b      	str	r3, [r7, #20]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	699b      	ldr	r3, [r3, #24]
 800b144:	617b      	str	r3, [r7, #20]
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	e032      	b.n	800b1b0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b158:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b168:	d117      	bne.n	800b19a <I2C_Master_ADDR+0x2e0>
 800b16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b170:	d00b      	beq.n	800b18a <I2C_Master_ADDR+0x2d0>
 800b172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b174:	2b01      	cmp	r3, #1
 800b176:	d008      	beq.n	800b18a <I2C_Master_ADDR+0x2d0>
 800b178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17a:	2b08      	cmp	r3, #8
 800b17c:	d005      	beq.n	800b18a <I2C_Master_ADDR+0x2d0>
 800b17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b180:	2b10      	cmp	r3, #16
 800b182:	d002      	beq.n	800b18a <I2C_Master_ADDR+0x2d0>
 800b184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b186:	2b20      	cmp	r3, #32
 800b188:	d107      	bne.n	800b19a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	685a      	ldr	r2, [r3, #4]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b198:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b19a:	2300      	movs	r3, #0
 800b19c:	613b      	str	r3, [r7, #16]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	695b      	ldr	r3, [r3, #20]
 800b1a4:	613b      	str	r3, [r7, #16]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	613b      	str	r3, [r7, #16]
 800b1ae:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800b1b6:	e00b      	b.n	800b1d0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	60fb      	str	r3, [r7, #12]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	60fb      	str	r3, [r7, #12]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	699b      	ldr	r3, [r3, #24]
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
}
 800b1ce:	e7ff      	b.n	800b1d0 <I2C_Master_ADDR+0x316>
 800b1d0:	bf00      	nop
 800b1d2:	3744      	adds	r7, #68	; 0x44
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d02b      	beq.n	800b24e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fa:	781a      	ldrb	r2, [r3, #0]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b206:	1c5a      	adds	r2, r3, #1
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b210:	b29b      	uxth	r3, r3
 800b212:	3b01      	subs	r3, #1
 800b214:	b29a      	uxth	r2, r3
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b21e:	b29b      	uxth	r3, r3
 800b220:	2b00      	cmp	r3, #0
 800b222:	d114      	bne.n	800b24e <I2C_SlaveTransmit_TXE+0x72>
 800b224:	7bfb      	ldrb	r3, [r7, #15]
 800b226:	2b29      	cmp	r3, #41	; 0x29
 800b228:	d111      	bne.n	800b24e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	685a      	ldr	r2, [r3, #4]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b238:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2221      	movs	r2, #33	; 0x21
 800b23e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2228      	movs	r2, #40	; 0x28
 800b244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7ff f9e7 	bl	800a61c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b24e:	bf00      	nop
 800b250:	3710      	adds	r7, #16
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b256:	b480      	push	{r7}
 800b258:	b083      	sub	sp, #12
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b262:	b29b      	uxth	r3, r3
 800b264:	2b00      	cmp	r3, #0
 800b266:	d011      	beq.n	800b28c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26c:	781a      	ldrb	r2, [r3, #0]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b278:	1c5a      	adds	r2, r3, #1
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b282:	b29b      	uxth	r3, r3
 800b284:	3b01      	subs	r3, #1
 800b286:	b29a      	uxth	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800b28c:	bf00      	nop
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d02c      	beq.n	800b30c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	691a      	ldr	r2, [r3, #16]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	b2d2      	uxtb	r2, r2
 800b2be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c4:	1c5a      	adds	r2, r3, #1
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d114      	bne.n	800b30c <I2C_SlaveReceive_RXNE+0x74>
 800b2e2:	7bfb      	ldrb	r3, [r7, #15]
 800b2e4:	2b2a      	cmp	r3, #42	; 0x2a
 800b2e6:	d111      	bne.n	800b30c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	685a      	ldr	r2, [r3, #4]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2f6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2222      	movs	r2, #34	; 0x22
 800b2fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2228      	movs	r2, #40	; 0x28
 800b302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f7ff f992 	bl	800a630 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b30c:	bf00      	nop
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b320:	b29b      	uxth	r3, r3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d012      	beq.n	800b34c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	691a      	ldr	r2, [r3, #16]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b330:	b2d2      	uxtb	r2, r2
 800b332:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b338:	1c5a      	adds	r2, r3, #1
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b342:	b29b      	uxth	r3, r3
 800b344:	3b01      	subs	r3, #1
 800b346:	b29a      	uxth	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800b34c:	bf00      	nop
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800b362:	2300      	movs	r3, #0
 800b364:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b372:	2b28      	cmp	r3, #40	; 0x28
 800b374:	d127      	bne.n	800b3c6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	685a      	ldr	r2, [r3, #4]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b384:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	089b      	lsrs	r3, r3, #2
 800b38a:	f003 0301 	and.w	r3, r3, #1
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d101      	bne.n	800b396 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800b392:	2301      	movs	r3, #1
 800b394:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	09db      	lsrs	r3, r3, #7
 800b39a:	f003 0301 	and.w	r3, r3, #1
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d103      	bne.n	800b3aa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	81bb      	strh	r3, [r7, #12]
 800b3a8:	e002      	b.n	800b3b0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	699b      	ldr	r3, [r3, #24]
 800b3ae:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800b3b8:	89ba      	ldrh	r2, [r7, #12]
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	4619      	mov	r1, r3
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7ff f940 	bl	800a644 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b3c4:	e00e      	b.n	800b3e4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	60bb      	str	r3, [r7, #8]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	695b      	ldr	r3, [r3, #20]
 800b3d0:	60bb      	str	r3, [r7, #8]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	699b      	ldr	r3, [r3, #24]
 800b3d8:	60bb      	str	r3, [r7, #8]
 800b3da:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800b3e4:	bf00      	nop
 800b3e6:	3710      	adds	r7, #16
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	685a      	ldr	r2, [r3, #4]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b40a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800b40c:	2300      	movs	r3, #0
 800b40e:	60bb      	str	r3, [r7, #8]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	695b      	ldr	r3, [r3, #20]
 800b416:	60bb      	str	r3, [r7, #8]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f042 0201 	orr.w	r2, r2, #1
 800b426:	601a      	str	r2, [r3, #0]
 800b428:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b438:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b448:	d172      	bne.n	800b530 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b44a:	7bfb      	ldrb	r3, [r7, #15]
 800b44c:	2b22      	cmp	r3, #34	; 0x22
 800b44e:	d002      	beq.n	800b456 <I2C_Slave_STOPF+0x6a>
 800b450:	7bfb      	ldrb	r3, [r7, #15]
 800b452:	2b2a      	cmp	r3, #42	; 0x2a
 800b454:	d135      	bne.n	800b4c2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	b29a      	uxth	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b468:	b29b      	uxth	r3, r3
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d005      	beq.n	800b47a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b472:	f043 0204 	orr.w	r2, r3, #4
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	685a      	ldr	r2, [r3, #4]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b488:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fd fe88 	bl	80091a4 <HAL_DMA_GetState>
 800b494:	4603      	mov	r3, r0
 800b496:	2b01      	cmp	r3, #1
 800b498:	d049      	beq.n	800b52e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b49e:	4a69      	ldr	r2, [pc, #420]	; (800b644 <I2C_Slave_STOPF+0x258>)
 800b4a0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fd fcd0 	bl	8008e4c <HAL_DMA_Abort_IT>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d03d      	beq.n	800b52e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b4bc:	4610      	mov	r0, r2
 800b4be:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b4c0:	e035      	b.n	800b52e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	b29a      	uxth	r2, r3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d005      	beq.n	800b4e6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4de:	f043 0204 	orr.w	r2, r3, #4
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b4f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7fd fe52 	bl	80091a4 <HAL_DMA_GetState>
 800b500:	4603      	mov	r3, r0
 800b502:	2b01      	cmp	r3, #1
 800b504:	d014      	beq.n	800b530 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b50a:	4a4e      	ldr	r2, [pc, #312]	; (800b644 <I2C_Slave_STOPF+0x258>)
 800b50c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b512:	4618      	mov	r0, r3
 800b514:	f7fd fc9a 	bl	8008e4c <HAL_DMA_Abort_IT>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d008      	beq.n	800b530 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b528:	4610      	mov	r0, r2
 800b52a:	4798      	blx	r3
 800b52c:	e000      	b.n	800b530 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b52e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b534:	b29b      	uxth	r3, r3
 800b536:	2b00      	cmp	r3, #0
 800b538:	d03e      	beq.n	800b5b8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	695b      	ldr	r3, [r3, #20]
 800b540:	f003 0304 	and.w	r3, r3, #4
 800b544:	2b04      	cmp	r3, #4
 800b546:	d112      	bne.n	800b56e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	691a      	ldr	r2, [r3, #16]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b552:	b2d2      	uxtb	r2, r2
 800b554:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55a:	1c5a      	adds	r2, r3, #1
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b564:	b29b      	uxth	r3, r3
 800b566:	3b01      	subs	r3, #1
 800b568:	b29a      	uxth	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	695b      	ldr	r3, [r3, #20]
 800b574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b578:	2b40      	cmp	r3, #64	; 0x40
 800b57a:	d112      	bne.n	800b5a2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	691a      	ldr	r2, [r3, #16]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b586:	b2d2      	uxtb	r2, r2
 800b588:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58e:	1c5a      	adds	r2, r3, #1
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b598:	b29b      	uxth	r3, r3
 800b59a:	3b01      	subs	r3, #1
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d005      	beq.n	800b5b8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b0:	f043 0204 	orr.w	r2, r3, #4
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d003      	beq.n	800b5c8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f8b3 	bl	800b72c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800b5c6:	e039      	b.n	800b63c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b5c8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ca:	2b2a      	cmp	r3, #42	; 0x2a
 800b5cc:	d109      	bne.n	800b5e2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2228      	movs	r2, #40	; 0x28
 800b5d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f7ff f827 	bl	800a630 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b28      	cmp	r3, #40	; 0x28
 800b5ec:	d111      	bne.n	800b612 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a15      	ldr	r2, [pc, #84]	; (800b648 <I2C_Slave_STOPF+0x25c>)
 800b5f2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2220      	movs	r2, #32
 800b5fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7ff f828 	bl	800a660 <HAL_I2C_ListenCpltCallback>
}
 800b610:	e014      	b.n	800b63c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b616:	2b22      	cmp	r3, #34	; 0x22
 800b618:	d002      	beq.n	800b620 <I2C_Slave_STOPF+0x234>
 800b61a:	7bfb      	ldrb	r3, [r7, #15]
 800b61c:	2b22      	cmp	r3, #34	; 0x22
 800b61e:	d10d      	bne.n	800b63c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2220      	movs	r2, #32
 800b62a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7fe fffa 	bl	800a630 <HAL_I2C_SlaveRxCpltCallback>
}
 800b63c:	bf00      	nop
 800b63e:	3710      	adds	r7, #16
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	0800bc31 	.word	0x0800bc31
 800b648:	ffff0000 	.word	0xffff0000

0800b64c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b65a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b660:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	2b08      	cmp	r3, #8
 800b666:	d002      	beq.n	800b66e <I2C_Slave_AF+0x22>
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	2b20      	cmp	r3, #32
 800b66c:	d129      	bne.n	800b6c2 <I2C_Slave_AF+0x76>
 800b66e:	7bfb      	ldrb	r3, [r7, #15]
 800b670:	2b28      	cmp	r3, #40	; 0x28
 800b672:	d126      	bne.n	800b6c2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a2c      	ldr	r2, [pc, #176]	; (800b728 <I2C_Slave_AF+0xdc>)
 800b678:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	685a      	ldr	r2, [r3, #4]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b688:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b692:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6a2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2220      	movs	r2, #32
 800b6ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f7fe ffd0 	bl	800a660 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800b6c0:	e02e      	b.n	800b720 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800b6c2:	7bfb      	ldrb	r3, [r7, #15]
 800b6c4:	2b21      	cmp	r3, #33	; 0x21
 800b6c6:	d126      	bne.n	800b716 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a17      	ldr	r2, [pc, #92]	; (800b728 <I2C_Slave_AF+0xdc>)
 800b6cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2221      	movs	r2, #33	; 0x21
 800b6d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2220      	movs	r2, #32
 800b6d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	685a      	ldr	r2, [r3, #4]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b6f2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b6fc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b70c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f7fe ff84 	bl	800a61c <HAL_I2C_SlaveTxCpltCallback>
}
 800b714:	e004      	b.n	800b720 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b71e:	615a      	str	r2, [r3, #20]
}
 800b720:	bf00      	nop
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	ffff0000 	.word	0xffff0000

0800b72c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b73a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b742:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b744:	7bbb      	ldrb	r3, [r7, #14]
 800b746:	2b10      	cmp	r3, #16
 800b748:	d002      	beq.n	800b750 <I2C_ITError+0x24>
 800b74a:	7bbb      	ldrb	r3, [r7, #14]
 800b74c:	2b40      	cmp	r3, #64	; 0x40
 800b74e:	d10a      	bne.n	800b766 <I2C_ITError+0x3a>
 800b750:	7bfb      	ldrb	r3, [r7, #15]
 800b752:	2b22      	cmp	r3, #34	; 0x22
 800b754:	d107      	bne.n	800b766 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b764:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b766:	7bfb      	ldrb	r3, [r7, #15]
 800b768:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b76c:	2b28      	cmp	r3, #40	; 0x28
 800b76e:	d107      	bne.n	800b780 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2228      	movs	r2, #40	; 0x28
 800b77a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b77e:	e015      	b.n	800b7ac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b78a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b78e:	d00a      	beq.n	800b7a6 <I2C_ITError+0x7a>
 800b790:	7bfb      	ldrb	r3, [r7, #15]
 800b792:	2b60      	cmp	r3, #96	; 0x60
 800b794:	d007      	beq.n	800b7a6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2220      	movs	r2, #32
 800b79a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7ba:	d162      	bne.n	800b882 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	685a      	ldr	r2, [r3, #4]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b7ca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d020      	beq.n	800b81c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7de:	4a6a      	ldr	r2, [pc, #424]	; (800b988 <I2C_ITError+0x25c>)
 800b7e0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7fd fb30 	bl	8008e4c <HAL_DMA_Abort_IT>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f000 8089 	beq.w	800b906 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f022 0201 	bic.w	r2, r2, #1
 800b802:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2220      	movs	r2, #32
 800b808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b816:	4610      	mov	r0, r2
 800b818:	4798      	blx	r3
 800b81a:	e074      	b.n	800b906 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b820:	4a59      	ldr	r2, [pc, #356]	; (800b988 <I2C_ITError+0x25c>)
 800b822:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b828:	4618      	mov	r0, r3
 800b82a:	f7fd fb0f 	bl	8008e4c <HAL_DMA_Abort_IT>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d068      	beq.n	800b906 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	695b      	ldr	r3, [r3, #20]
 800b83a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b83e:	2b40      	cmp	r3, #64	; 0x40
 800b840:	d10b      	bne.n	800b85a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	691a      	ldr	r2, [r3, #16]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84c:	b2d2      	uxtb	r2, r2
 800b84e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b854:	1c5a      	adds	r2, r3, #1
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f022 0201 	bic.w	r2, r2, #1
 800b868:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2220      	movs	r2, #32
 800b86e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b87c:	4610      	mov	r0, r2
 800b87e:	4798      	blx	r3
 800b880:	e041      	b.n	800b906 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	2b60      	cmp	r3, #96	; 0x60
 800b88c:	d125      	bne.n	800b8da <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2220      	movs	r2, #32
 800b892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	695b      	ldr	r3, [r3, #20]
 800b8a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8a6:	2b40      	cmp	r3, #64	; 0x40
 800b8a8:	d10b      	bne.n	800b8c2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	691a      	ldr	r2, [r3, #16]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b4:	b2d2      	uxtb	r2, r2
 800b8b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8bc:	1c5a      	adds	r2, r3, #1
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f022 0201 	bic.w	r2, r2, #1
 800b8d0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f7fe feec 	bl	800a6b0 <HAL_I2C_AbortCpltCallback>
 800b8d8:	e015      	b.n	800b906 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	695b      	ldr	r3, [r3, #20]
 800b8e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8e4:	2b40      	cmp	r3, #64	; 0x40
 800b8e6:	d10b      	bne.n	800b900 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	691a      	ldr	r2, [r3, #16]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f2:	b2d2      	uxtb	r2, r2
 800b8f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fa:	1c5a      	adds	r2, r3, #1
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f7fe fecb 	bl	800a69c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b90a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	f003 0301 	and.w	r3, r3, #1
 800b912:	2b00      	cmp	r3, #0
 800b914:	d10e      	bne.n	800b934 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d109      	bne.n	800b934 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b926:	2b00      	cmp	r3, #0
 800b928:	d104      	bne.n	800b934 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b930:	2b00      	cmp	r3, #0
 800b932:	d007      	beq.n	800b944 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	685a      	ldr	r2, [r3, #4]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b942:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b94a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b950:	f003 0304 	and.w	r3, r3, #4
 800b954:	2b04      	cmp	r3, #4
 800b956:	d113      	bne.n	800b980 <I2C_ITError+0x254>
 800b958:	7bfb      	ldrb	r3, [r7, #15]
 800b95a:	2b28      	cmp	r3, #40	; 0x28
 800b95c:	d110      	bne.n	800b980 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	4a0a      	ldr	r2, [pc, #40]	; (800b98c <I2C_ITError+0x260>)
 800b962:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2220      	movs	r2, #32
 800b96e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2200      	movs	r2, #0
 800b976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f7fe fe70 	bl	800a660 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b980:	bf00      	nop
 800b982:	3710      	adds	r7, #16
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	0800bc31 	.word	0x0800bc31
 800b98c:	ffff0000 	.word	0xffff0000

0800b990 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b088      	sub	sp, #32
 800b994:	af02      	add	r7, sp, #8
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	607a      	str	r2, [r7, #4]
 800b99a:	603b      	str	r3, [r7, #0]
 800b99c:	460b      	mov	r3, r1
 800b99e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	2b08      	cmp	r3, #8
 800b9aa:	d006      	beq.n	800b9ba <I2C_MasterRequestWrite+0x2a>
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d003      	beq.n	800b9ba <I2C_MasterRequestWrite+0x2a>
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b9b8:	d108      	bne.n	800b9cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9c8:	601a      	str	r2, [r3, #0]
 800b9ca:	e00b      	b.n	800b9e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9d0:	2b12      	cmp	r3, #18
 800b9d2:	d107      	bne.n	800b9e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f000 f9c5 	bl	800bd80 <I2C_WaitOnFlagUntilTimeout>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00d      	beq.n	800ba18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba0a:	d103      	bne.n	800ba14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ba14:	2303      	movs	r3, #3
 800ba16:	e035      	b.n	800ba84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	691b      	ldr	r3, [r3, #16]
 800ba1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba20:	d108      	bne.n	800ba34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ba22:	897b      	ldrh	r3, [r7, #10]
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	461a      	mov	r2, r3
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ba30:	611a      	str	r2, [r3, #16]
 800ba32:	e01b      	b.n	800ba6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ba34:	897b      	ldrh	r3, [r7, #10]
 800ba36:	11db      	asrs	r3, r3, #7
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	f003 0306 	and.w	r3, r3, #6
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	f063 030f 	orn	r3, r3, #15
 800ba44:	b2da      	uxtb	r2, r3
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	490e      	ldr	r1, [pc, #56]	; (800ba8c <I2C_MasterRequestWrite+0xfc>)
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f000 f9eb 	bl	800be2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d001      	beq.n	800ba62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e010      	b.n	800ba84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ba62:	897b      	ldrh	r3, [r7, #10]
 800ba64:	b2da      	uxtb	r2, r3
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	4907      	ldr	r1, [pc, #28]	; (800ba90 <I2C_MasterRequestWrite+0x100>)
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f000 f9db 	bl	800be2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d001      	beq.n	800ba82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e000      	b.n	800ba84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3718      	adds	r7, #24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	00010008 	.word	0x00010008
 800ba90:	00010002 	.word	0x00010002

0800ba94 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b088      	sub	sp, #32
 800ba98:	af02      	add	r7, sp, #8
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	607a      	str	r2, [r7, #4]
 800ba9e:	603b      	str	r3, [r7, #0]
 800baa0:	460b      	mov	r3, r1
 800baa2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bab8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	2b08      	cmp	r3, #8
 800babe:	d006      	beq.n	800bace <I2C_MasterRequestRead+0x3a>
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d003      	beq.n	800bace <I2C_MasterRequestRead+0x3a>
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bacc:	d108      	bne.n	800bae0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800badc:	601a      	str	r2, [r3, #0]
 800bade:	e00b      	b.n	800baf8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bae4:	2b11      	cmp	r3, #17
 800bae6:	d107      	bne.n	800baf8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800baf6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f000 f93b 	bl	800bd80 <I2C_WaitOnFlagUntilTimeout>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00d      	beq.n	800bb2c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb1e:	d103      	bne.n	800bb28 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bb28:	2303      	movs	r3, #3
 800bb2a:	e079      	b.n	800bc20 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb34:	d108      	bne.n	800bb48 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bb36:	897b      	ldrh	r3, [r7, #10]
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	f043 0301 	orr.w	r3, r3, #1
 800bb3e:	b2da      	uxtb	r2, r3
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	611a      	str	r2, [r3, #16]
 800bb46:	e05f      	b.n	800bc08 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bb48:	897b      	ldrh	r3, [r7, #10]
 800bb4a:	11db      	asrs	r3, r3, #7
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	f003 0306 	and.w	r3, r3, #6
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	f063 030f 	orn	r3, r3, #15
 800bb58:	b2da      	uxtb	r2, r3
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	4930      	ldr	r1, [pc, #192]	; (800bc28 <I2C_MasterRequestRead+0x194>)
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f000 f961 	bl	800be2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d001      	beq.n	800bb76 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bb72:	2301      	movs	r3, #1
 800bb74:	e054      	b.n	800bc20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bb76:	897b      	ldrh	r3, [r7, #10]
 800bb78:	b2da      	uxtb	r2, r3
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	4929      	ldr	r1, [pc, #164]	; (800bc2c <I2C_MasterRequestRead+0x198>)
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	f000 f951 	bl	800be2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d001      	beq.n	800bb96 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bb92:	2301      	movs	r3, #1
 800bb94:	e044      	b.n	800bc20 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb96:	2300      	movs	r3, #0
 800bb98:	613b      	str	r3, [r7, #16]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	695b      	ldr	r3, [r3, #20]
 800bba0:	613b      	str	r3, [r7, #16]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	699b      	ldr	r3, [r3, #24]
 800bba8:	613b      	str	r3, [r7, #16]
 800bbaa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f000 f8d9 	bl	800bd80 <I2C_WaitOnFlagUntilTimeout>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00d      	beq.n	800bbf0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbe2:	d103      	bne.n	800bbec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800bbec:	2303      	movs	r3, #3
 800bbee:	e017      	b.n	800bc20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bbf0:	897b      	ldrh	r3, [r7, #10]
 800bbf2:	11db      	asrs	r3, r3, #7
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	f003 0306 	and.w	r3, r3, #6
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	f063 030e 	orn	r3, r3, #14
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	4907      	ldr	r1, [pc, #28]	; (800bc2c <I2C_MasterRequestRead+0x198>)
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f000 f90d 	bl	800be2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d001      	beq.n	800bc1e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e000      	b.n	800bc20 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3718      	adds	r7, #24
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	00010008 	.word	0x00010008
 800bc2c:	00010002 	.word	0x00010002

0800bc30 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc40:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc48:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800bc4a:	4b4b      	ldr	r3, [pc, #300]	; (800bd78 <I2C_DMAAbort+0x148>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	08db      	lsrs	r3, r3, #3
 800bc50:	4a4a      	ldr	r2, [pc, #296]	; (800bd7c <I2C_DMAAbort+0x14c>)
 800bc52:	fba2 2303 	umull	r2, r3, r2, r3
 800bc56:	0a1a      	lsrs	r2, r3, #8
 800bc58:	4613      	mov	r3, r2
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	4413      	add	r3, r2
 800bc5e:	00da      	lsls	r2, r3, #3
 800bc60:	1ad3      	subs	r3, r2, r3
 800bc62:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d106      	bne.n	800bc78 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc6e:	f043 0220 	orr.w	r2, r3, #32
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800bc76:	e00a      	b.n	800bc8e <I2C_DMAAbort+0x5e>
    }
    count--;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc8c:	d0ea      	beq.n	800bc64 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d003      	beq.n	800bc9e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d003      	beq.n	800bcae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcaa:	2200      	movs	r2, #0
 800bcac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcbc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d003      	beq.n	800bcd4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d003      	beq.n	800bce4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce0:	2200      	movs	r2, #0
 800bce2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f022 0201 	bic.w	r2, r2, #1
 800bcf2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	2b60      	cmp	r3, #96	; 0x60
 800bcfe:	d10e      	bne.n	800bd1e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	2220      	movs	r2, #32
 800bd04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	2200      	movs	r2, #0
 800bd14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800bd16:	6978      	ldr	r0, [r7, #20]
 800bd18:	f7fe fcca 	bl	800a6b0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bd1c:	e027      	b.n	800bd6e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bd1e:	7cfb      	ldrb	r3, [r7, #19]
 800bd20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bd24:	2b28      	cmp	r3, #40	; 0x28
 800bd26:	d117      	bne.n	800bd58 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f042 0201 	orr.w	r2, r2, #1
 800bd36:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bd46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	2228      	movs	r2, #40	; 0x28
 800bd52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800bd56:	e007      	b.n	800bd68 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	2220      	movs	r2, #32
 800bd5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	2200      	movs	r2, #0
 800bd64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800bd68:	6978      	ldr	r0, [r7, #20]
 800bd6a:	f7fe fc97 	bl	800a69c <HAL_I2C_ErrorCallback>
}
 800bd6e:	bf00      	nop
 800bd70:	3718      	adds	r7, #24
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	2000001c 	.word	0x2000001c
 800bd7c:	14f8b589 	.word	0x14f8b589

0800bd80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	603b      	str	r3, [r7, #0]
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd90:	e025      	b.n	800bdde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd98:	d021      	beq.n	800bdde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd9a:	f7fc fa9d 	bl	80082d8 <HAL_GetTick>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	1ad3      	subs	r3, r2, r3
 800bda4:	683a      	ldr	r2, [r7, #0]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d302      	bcc.n	800bdb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d116      	bne.n	800bdde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2220      	movs	r2, #32
 800bdba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdca:	f043 0220 	orr.w	r2, r3, #32
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bdda:	2301      	movs	r3, #1
 800bddc:	e023      	b.n	800be26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	0c1b      	lsrs	r3, r3, #16
 800bde2:	b2db      	uxtb	r3, r3
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d10d      	bne.n	800be04 <I2C_WaitOnFlagUntilTimeout+0x84>
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	695b      	ldr	r3, [r3, #20]
 800bdee:	43da      	mvns	r2, r3
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	bf0c      	ite	eq
 800bdfa:	2301      	moveq	r3, #1
 800bdfc:	2300      	movne	r3, #0
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	461a      	mov	r2, r3
 800be02:	e00c      	b.n	800be1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	699b      	ldr	r3, [r3, #24]
 800be0a:	43da      	mvns	r2, r3
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	4013      	ands	r3, r2
 800be10:	b29b      	uxth	r3, r3
 800be12:	2b00      	cmp	r3, #0
 800be14:	bf0c      	ite	eq
 800be16:	2301      	moveq	r3, #1
 800be18:	2300      	movne	r3, #0
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	461a      	mov	r2, r3
 800be1e:	79fb      	ldrb	r3, [r7, #7]
 800be20:	429a      	cmp	r2, r3
 800be22:	d0b6      	beq.n	800bd92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b084      	sub	sp, #16
 800be32:	af00      	add	r7, sp, #0
 800be34:	60f8      	str	r0, [r7, #12]
 800be36:	60b9      	str	r1, [r7, #8]
 800be38:	607a      	str	r2, [r7, #4]
 800be3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800be3c:	e051      	b.n	800bee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	695b      	ldr	r3, [r3, #20]
 800be44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be4c:	d123      	bne.n	800be96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800be66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2200      	movs	r2, #0
 800be6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2220      	movs	r2, #32
 800be72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2200      	movs	r2, #0
 800be7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be82:	f043 0204 	orr.w	r2, r3, #4
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800be92:	2301      	movs	r3, #1
 800be94:	e046      	b.n	800bf24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9c:	d021      	beq.n	800bee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be9e:	f7fc fa1b 	bl	80082d8 <HAL_GetTick>
 800bea2:	4602      	mov	r2, r0
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	1ad3      	subs	r3, r2, r3
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d302      	bcc.n	800beb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d116      	bne.n	800bee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2200      	movs	r2, #0
 800beb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2220      	movs	r2, #32
 800bebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2200      	movs	r2, #0
 800bec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bece:	f043 0220 	orr.w	r2, r3, #32
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2200      	movs	r2, #0
 800beda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bede:	2301      	movs	r3, #1
 800bee0:	e020      	b.n	800bf24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	0c1b      	lsrs	r3, r3, #16
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d10c      	bne.n	800bf06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	695b      	ldr	r3, [r3, #20]
 800bef2:	43da      	mvns	r2, r3
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	4013      	ands	r3, r2
 800bef8:	b29b      	uxth	r3, r3
 800befa:	2b00      	cmp	r3, #0
 800befc:	bf14      	ite	ne
 800befe:	2301      	movne	r3, #1
 800bf00:	2300      	moveq	r3, #0
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	e00b      	b.n	800bf1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	699b      	ldr	r3, [r3, #24]
 800bf0c:	43da      	mvns	r2, r3
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	4013      	ands	r3, r2
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	bf14      	ite	ne
 800bf18:	2301      	movne	r3, #1
 800bf1a:	2300      	moveq	r3, #0
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d18d      	bne.n	800be3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800bf22:	2300      	movs	r3, #0
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3710      	adds	r7, #16
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b084      	sub	sp, #16
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bf38:	e02d      	b.n	800bf96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	f000 f900 	bl	800c140 <I2C_IsAcknowledgeFailed>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d001      	beq.n	800bf4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bf46:	2301      	movs	r3, #1
 800bf48:	e02d      	b.n	800bfa6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf50:	d021      	beq.n	800bf96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf52:	f7fc f9c1 	bl	80082d8 <HAL_GetTick>
 800bf56:	4602      	mov	r2, r0
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	1ad3      	subs	r3, r2, r3
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d302      	bcc.n	800bf68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d116      	bne.n	800bf96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2220      	movs	r2, #32
 800bf72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf82:	f043 0220 	orr.w	r2, r3, #32
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf92:	2301      	movs	r3, #1
 800bf94:	e007      	b.n	800bfa6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	695b      	ldr	r3, [r3, #20]
 800bf9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfa0:	2b80      	cmp	r3, #128	; 0x80
 800bfa2:	d1ca      	bne.n	800bf3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bfa4:	2300      	movs	r3, #0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b084      	sub	sp, #16
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	60f8      	str	r0, [r7, #12]
 800bfb6:	60b9      	str	r1, [r7, #8]
 800bfb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bfba:	e02d      	b.n	800c018 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f000 f8bf 	bl	800c140 <I2C_IsAcknowledgeFailed>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d001      	beq.n	800bfcc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	e02d      	b.n	800c028 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd2:	d021      	beq.n	800c018 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfd4:	f7fc f980 	bl	80082d8 <HAL_GetTick>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	1ad3      	subs	r3, r2, r3
 800bfde:	68ba      	ldr	r2, [r7, #8]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d302      	bcc.n	800bfea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d116      	bne.n	800c018 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2200      	movs	r2, #0
 800bfee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2220      	movs	r2, #32
 800bff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2200      	movs	r2, #0
 800bffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c004:	f043 0220 	orr.w	r2, r3, #32
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2200      	movs	r2, #0
 800c010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c014:	2301      	movs	r3, #1
 800c016:	e007      	b.n	800c028 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	695b      	ldr	r3, [r3, #20]
 800c01e:	f003 0304 	and.w	r3, r3, #4
 800c022:	2b04      	cmp	r3, #4
 800c024:	d1ca      	bne.n	800bfbc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c026:	2300      	movs	r3, #0
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3710      	adds	r7, #16
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c038:	2300      	movs	r3, #0
 800c03a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800c03c:	4b13      	ldr	r3, [pc, #76]	; (800c08c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	08db      	lsrs	r3, r3, #3
 800c042:	4a13      	ldr	r2, [pc, #76]	; (800c090 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800c044:	fba2 2303 	umull	r2, r3, r2, r3
 800c048:	0a1a      	lsrs	r2, r3, #8
 800c04a:	4613      	mov	r3, r2
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	4413      	add	r3, r2
 800c050:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	3b01      	subs	r3, #1
 800c056:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d107      	bne.n	800c06e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c062:	f043 0220 	orr.w	r2, r3, #32
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c06a:	2301      	movs	r3, #1
 800c06c:	e008      	b.n	800c080 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c07c:	d0e9      	beq.n	800c052 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800c07e:	2300      	movs	r3, #0
}
 800c080:	4618      	mov	r0, r3
 800c082:	3714      	adds	r7, #20
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr
 800c08c:	2000001c 	.word	0x2000001c
 800c090:	14f8b589 	.word	0x14f8b589

0800c094 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	60f8      	str	r0, [r7, #12]
 800c09c:	60b9      	str	r1, [r7, #8]
 800c09e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c0a0:	e042      	b.n	800c128 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	695b      	ldr	r3, [r3, #20]
 800c0a8:	f003 0310 	and.w	r3, r3, #16
 800c0ac:	2b10      	cmp	r3, #16
 800c0ae:	d119      	bne.n	800c0e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f06f 0210 	mvn.w	r2, #16
 800c0b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2220      	movs	r2, #32
 800c0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e029      	b.n	800c138 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0e4:	f7fc f8f8 	bl	80082d8 <HAL_GetTick>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	1ad3      	subs	r3, r2, r3
 800c0ee:	68ba      	ldr	r2, [r7, #8]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d302      	bcc.n	800c0fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d116      	bne.n	800c128 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2220      	movs	r2, #32
 800c104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c114:	f043 0220 	orr.w	r2, r3, #32
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2200      	movs	r2, #0
 800c120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c124:	2301      	movs	r3, #1
 800c126:	e007      	b.n	800c138 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	695b      	ldr	r3, [r3, #20]
 800c12e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c132:	2b40      	cmp	r3, #64	; 0x40
 800c134:	d1b5      	bne.n	800c0a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c136:	2300      	movs	r3, #0
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	695b      	ldr	r3, [r3, #20]
 800c14e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c156:	d11b      	bne.n	800c190 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c160:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2220      	movs	r2, #32
 800c16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c17c:	f043 0204 	orr.w	r2, r3, #4
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c18c:	2301      	movs	r3, #1
 800c18e:	e000      	b.n	800c192 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	370c      	adds	r7, #12
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800c19e:	b480      	push	{r7}
 800c1a0:	b083      	sub	sp, #12
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1aa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800c1ae:	d103      	bne.n	800c1b8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800c1b6:	e007      	b.n	800c1c8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800c1c0:	d102      	bne.n	800c1c8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2208      	movs	r2, #8
 800c1c6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c1c8:	bf00      	nop
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d101      	bne.n	800c1e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e0cc      	b.n	800c382 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c1e8:	4b68      	ldr	r3, [pc, #416]	; (800c38c <HAL_RCC_ClockConfig+0x1b8>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f003 030f 	and.w	r3, r3, #15
 800c1f0:	683a      	ldr	r2, [r7, #0]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d90c      	bls.n	800c210 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c1f6:	4b65      	ldr	r3, [pc, #404]	; (800c38c <HAL_RCC_ClockConfig+0x1b8>)
 800c1f8:	683a      	ldr	r2, [r7, #0]
 800c1fa:	b2d2      	uxtb	r2, r2
 800c1fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c1fe:	4b63      	ldr	r3, [pc, #396]	; (800c38c <HAL_RCC_ClockConfig+0x1b8>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f003 030f 	and.w	r3, r3, #15
 800c206:	683a      	ldr	r2, [r7, #0]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d001      	beq.n	800c210 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c20c:	2301      	movs	r3, #1
 800c20e:	e0b8      	b.n	800c382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f003 0302 	and.w	r3, r3, #2
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d020      	beq.n	800c25e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f003 0304 	and.w	r3, r3, #4
 800c224:	2b00      	cmp	r3, #0
 800c226:	d005      	beq.n	800c234 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c228:	4b59      	ldr	r3, [pc, #356]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c22a:	689b      	ldr	r3, [r3, #8]
 800c22c:	4a58      	ldr	r2, [pc, #352]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c22e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c232:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f003 0308 	and.w	r3, r3, #8
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d005      	beq.n	800c24c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c240:	4b53      	ldr	r3, [pc, #332]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	4a52      	ldr	r2, [pc, #328]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c246:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c24a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c24c:	4b50      	ldr	r3, [pc, #320]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	494d      	ldr	r1, [pc, #308]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c25a:	4313      	orrs	r3, r2
 800c25c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f003 0301 	and.w	r3, r3, #1
 800c266:	2b00      	cmp	r3, #0
 800c268:	d044      	beq.n	800c2f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d107      	bne.n	800c282 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c272:	4b47      	ldr	r3, [pc, #284]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d119      	bne.n	800c2b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c27e:	2301      	movs	r3, #1
 800c280:	e07f      	b.n	800c382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	2b02      	cmp	r3, #2
 800c288:	d003      	beq.n	800c292 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c28e:	2b03      	cmp	r3, #3
 800c290:	d107      	bne.n	800c2a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c292:	4b3f      	ldr	r3, [pc, #252]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d109      	bne.n	800c2b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e06f      	b.n	800c382 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c2a2:	4b3b      	ldr	r3, [pc, #236]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f003 0302 	and.w	r3, r3, #2
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d101      	bne.n	800c2b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	e067      	b.n	800c382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c2b2:	4b37      	ldr	r3, [pc, #220]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	f023 0203 	bic.w	r2, r3, #3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	4934      	ldr	r1, [pc, #208]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c2c4:	f7fc f808 	bl	80082d8 <HAL_GetTick>
 800c2c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c2ca:	e00a      	b.n	800c2e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c2cc:	f7fc f804 	bl	80082d8 <HAL_GetTick>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d901      	bls.n	800c2e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c2de:	2303      	movs	r3, #3
 800c2e0:	e04f      	b.n	800c382 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c2e2:	4b2b      	ldr	r3, [pc, #172]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	f003 020c 	and.w	r2, r3, #12
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d1eb      	bne.n	800c2cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c2f4:	4b25      	ldr	r3, [pc, #148]	; (800c38c <HAL_RCC_ClockConfig+0x1b8>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f003 030f 	and.w	r3, r3, #15
 800c2fc:	683a      	ldr	r2, [r7, #0]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d20c      	bcs.n	800c31c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c302:	4b22      	ldr	r3, [pc, #136]	; (800c38c <HAL_RCC_ClockConfig+0x1b8>)
 800c304:	683a      	ldr	r2, [r7, #0]
 800c306:	b2d2      	uxtb	r2, r2
 800c308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c30a:	4b20      	ldr	r3, [pc, #128]	; (800c38c <HAL_RCC_ClockConfig+0x1b8>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f003 030f 	and.w	r3, r3, #15
 800c312:	683a      	ldr	r2, [r7, #0]
 800c314:	429a      	cmp	r2, r3
 800c316:	d001      	beq.n	800c31c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c318:	2301      	movs	r3, #1
 800c31a:	e032      	b.n	800c382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f003 0304 	and.w	r3, r3, #4
 800c324:	2b00      	cmp	r3, #0
 800c326:	d008      	beq.n	800c33a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c328:	4b19      	ldr	r3, [pc, #100]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	4916      	ldr	r1, [pc, #88]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c336:	4313      	orrs	r3, r2
 800c338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f003 0308 	and.w	r3, r3, #8
 800c342:	2b00      	cmp	r3, #0
 800c344:	d009      	beq.n	800c35a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c346:	4b12      	ldr	r3, [pc, #72]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	691b      	ldr	r3, [r3, #16]
 800c352:	00db      	lsls	r3, r3, #3
 800c354:	490e      	ldr	r1, [pc, #56]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c356:	4313      	orrs	r3, r2
 800c358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c35a:	f000 f855 	bl	800c408 <HAL_RCC_GetSysClockFreq>
 800c35e:	4602      	mov	r2, r0
 800c360:	4b0b      	ldr	r3, [pc, #44]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c362:	689b      	ldr	r3, [r3, #8]
 800c364:	091b      	lsrs	r3, r3, #4
 800c366:	f003 030f 	and.w	r3, r3, #15
 800c36a:	490a      	ldr	r1, [pc, #40]	; (800c394 <HAL_RCC_ClockConfig+0x1c0>)
 800c36c:	5ccb      	ldrb	r3, [r1, r3]
 800c36e:	fa22 f303 	lsr.w	r3, r2, r3
 800c372:	4a09      	ldr	r2, [pc, #36]	; (800c398 <HAL_RCC_ClockConfig+0x1c4>)
 800c374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c376:	4b09      	ldr	r3, [pc, #36]	; (800c39c <HAL_RCC_ClockConfig+0x1c8>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7fb ff68 	bl	8008250 <HAL_InitTick>

  return HAL_OK;
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	3710      	adds	r7, #16
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	40023c00 	.word	0x40023c00
 800c390:	40023800 	.word	0x40023800
 800c394:	080147cc 	.word	0x080147cc
 800c398:	2000001c 	.word	0x2000001c
 800c39c:	20000020 	.word	0x20000020

0800c3a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c3a4:	4b03      	ldr	r3, [pc, #12]	; (800c3b4 <HAL_RCC_GetHCLKFreq+0x14>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr
 800c3b2:	bf00      	nop
 800c3b4:	2000001c 	.word	0x2000001c

0800c3b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c3bc:	f7ff fff0 	bl	800c3a0 <HAL_RCC_GetHCLKFreq>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	4b05      	ldr	r3, [pc, #20]	; (800c3d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	0a9b      	lsrs	r3, r3, #10
 800c3c8:	f003 0307 	and.w	r3, r3, #7
 800c3cc:	4903      	ldr	r1, [pc, #12]	; (800c3dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800c3ce:	5ccb      	ldrb	r3, [r1, r3]
 800c3d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	40023800 	.word	0x40023800
 800c3dc:	080147dc 	.word	0x080147dc

0800c3e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c3e4:	f7ff ffdc 	bl	800c3a0 <HAL_RCC_GetHCLKFreq>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	4b05      	ldr	r3, [pc, #20]	; (800c400 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c3ec:	689b      	ldr	r3, [r3, #8]
 800c3ee:	0b5b      	lsrs	r3, r3, #13
 800c3f0:	f003 0307 	and.w	r3, r3, #7
 800c3f4:	4903      	ldr	r1, [pc, #12]	; (800c404 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c3f6:	5ccb      	ldrb	r3, [r1, r3]
 800c3f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	40023800 	.word	0x40023800
 800c404:	080147dc 	.word	0x080147dc

0800c408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c40c:	b0ae      	sub	sp, #184	; 0xb8
 800c40e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c410:	2300      	movs	r3, #0
 800c412:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800c416:	2300      	movs	r3, #0
 800c418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800c41c:	2300      	movs	r3, #0
 800c41e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800c422:	2300      	movs	r3, #0
 800c424:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800c428:	2300      	movs	r3, #0
 800c42a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c42e:	4bcb      	ldr	r3, [pc, #812]	; (800c75c <HAL_RCC_GetSysClockFreq+0x354>)
 800c430:	689b      	ldr	r3, [r3, #8]
 800c432:	f003 030c 	and.w	r3, r3, #12
 800c436:	2b0c      	cmp	r3, #12
 800c438:	f200 8206 	bhi.w	800c848 <HAL_RCC_GetSysClockFreq+0x440>
 800c43c:	a201      	add	r2, pc, #4	; (adr r2, 800c444 <HAL_RCC_GetSysClockFreq+0x3c>)
 800c43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c442:	bf00      	nop
 800c444:	0800c479 	.word	0x0800c479
 800c448:	0800c849 	.word	0x0800c849
 800c44c:	0800c849 	.word	0x0800c849
 800c450:	0800c849 	.word	0x0800c849
 800c454:	0800c481 	.word	0x0800c481
 800c458:	0800c849 	.word	0x0800c849
 800c45c:	0800c849 	.word	0x0800c849
 800c460:	0800c849 	.word	0x0800c849
 800c464:	0800c489 	.word	0x0800c489
 800c468:	0800c849 	.word	0x0800c849
 800c46c:	0800c849 	.word	0x0800c849
 800c470:	0800c849 	.word	0x0800c849
 800c474:	0800c679 	.word	0x0800c679
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c478:	4bb9      	ldr	r3, [pc, #740]	; (800c760 <HAL_RCC_GetSysClockFreq+0x358>)
 800c47a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800c47e:	e1e7      	b.n	800c850 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c480:	4bb8      	ldr	r3, [pc, #736]	; (800c764 <HAL_RCC_GetSysClockFreq+0x35c>)
 800c482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c486:	e1e3      	b.n	800c850 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c488:	4bb4      	ldr	r3, [pc, #720]	; (800c75c <HAL_RCC_GetSysClockFreq+0x354>)
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c490:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c494:	4bb1      	ldr	r3, [pc, #708]	; (800c75c <HAL_RCC_GetSysClockFreq+0x354>)
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d071      	beq.n	800c584 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c4a0:	4bae      	ldr	r3, [pc, #696]	; (800c75c <HAL_RCC_GetSysClockFreq+0x354>)
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	099b      	lsrs	r3, r3, #6
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c4ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800c4b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c4b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c4bc:	2300      	movs	r3, #0
 800c4be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c4c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c4c6:	4622      	mov	r2, r4
 800c4c8:	462b      	mov	r3, r5
 800c4ca:	f04f 0000 	mov.w	r0, #0
 800c4ce:	f04f 0100 	mov.w	r1, #0
 800c4d2:	0159      	lsls	r1, r3, #5
 800c4d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c4d8:	0150      	lsls	r0, r2, #5
 800c4da:	4602      	mov	r2, r0
 800c4dc:	460b      	mov	r3, r1
 800c4de:	4621      	mov	r1, r4
 800c4e0:	1a51      	subs	r1, r2, r1
 800c4e2:	6439      	str	r1, [r7, #64]	; 0x40
 800c4e4:	4629      	mov	r1, r5
 800c4e6:	eb63 0301 	sbc.w	r3, r3, r1
 800c4ea:	647b      	str	r3, [r7, #68]	; 0x44
 800c4ec:	f04f 0200 	mov.w	r2, #0
 800c4f0:	f04f 0300 	mov.w	r3, #0
 800c4f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800c4f8:	4649      	mov	r1, r9
 800c4fa:	018b      	lsls	r3, r1, #6
 800c4fc:	4641      	mov	r1, r8
 800c4fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c502:	4641      	mov	r1, r8
 800c504:	018a      	lsls	r2, r1, #6
 800c506:	4641      	mov	r1, r8
 800c508:	1a51      	subs	r1, r2, r1
 800c50a:	63b9      	str	r1, [r7, #56]	; 0x38
 800c50c:	4649      	mov	r1, r9
 800c50e:	eb63 0301 	sbc.w	r3, r3, r1
 800c512:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c514:	f04f 0200 	mov.w	r2, #0
 800c518:	f04f 0300 	mov.w	r3, #0
 800c51c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800c520:	4649      	mov	r1, r9
 800c522:	00cb      	lsls	r3, r1, #3
 800c524:	4641      	mov	r1, r8
 800c526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c52a:	4641      	mov	r1, r8
 800c52c:	00ca      	lsls	r2, r1, #3
 800c52e:	4610      	mov	r0, r2
 800c530:	4619      	mov	r1, r3
 800c532:	4603      	mov	r3, r0
 800c534:	4622      	mov	r2, r4
 800c536:	189b      	adds	r3, r3, r2
 800c538:	633b      	str	r3, [r7, #48]	; 0x30
 800c53a:	462b      	mov	r3, r5
 800c53c:	460a      	mov	r2, r1
 800c53e:	eb42 0303 	adc.w	r3, r2, r3
 800c542:	637b      	str	r3, [r7, #52]	; 0x34
 800c544:	f04f 0200 	mov.w	r2, #0
 800c548:	f04f 0300 	mov.w	r3, #0
 800c54c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c550:	4629      	mov	r1, r5
 800c552:	024b      	lsls	r3, r1, #9
 800c554:	4621      	mov	r1, r4
 800c556:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c55a:	4621      	mov	r1, r4
 800c55c:	024a      	lsls	r2, r1, #9
 800c55e:	4610      	mov	r0, r2
 800c560:	4619      	mov	r1, r3
 800c562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c566:	2200      	movs	r2, #0
 800c568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c56c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c570:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c574:	f7f4 fa50 	bl	8000a18 <__aeabi_uldivmod>
 800c578:	4602      	mov	r2, r0
 800c57a:	460b      	mov	r3, r1
 800c57c:	4613      	mov	r3, r2
 800c57e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c582:	e067      	b.n	800c654 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c584:	4b75      	ldr	r3, [pc, #468]	; (800c75c <HAL_RCC_GetSysClockFreq+0x354>)
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	099b      	lsrs	r3, r3, #6
 800c58a:	2200      	movs	r2, #0
 800c58c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c590:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800c594:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c59c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c59e:	2300      	movs	r3, #0
 800c5a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c5a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800c5a6:	4622      	mov	r2, r4
 800c5a8:	462b      	mov	r3, r5
 800c5aa:	f04f 0000 	mov.w	r0, #0
 800c5ae:	f04f 0100 	mov.w	r1, #0
 800c5b2:	0159      	lsls	r1, r3, #5
 800c5b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c5b8:	0150      	lsls	r0, r2, #5
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	460b      	mov	r3, r1
 800c5be:	4621      	mov	r1, r4
 800c5c0:	1a51      	subs	r1, r2, r1
 800c5c2:	62b9      	str	r1, [r7, #40]	; 0x28
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	eb63 0301 	sbc.w	r3, r3, r1
 800c5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5cc:	f04f 0200 	mov.w	r2, #0
 800c5d0:	f04f 0300 	mov.w	r3, #0
 800c5d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800c5d8:	4649      	mov	r1, r9
 800c5da:	018b      	lsls	r3, r1, #6
 800c5dc:	4641      	mov	r1, r8
 800c5de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c5e2:	4641      	mov	r1, r8
 800c5e4:	018a      	lsls	r2, r1, #6
 800c5e6:	4641      	mov	r1, r8
 800c5e8:	ebb2 0a01 	subs.w	sl, r2, r1
 800c5ec:	4649      	mov	r1, r9
 800c5ee:	eb63 0b01 	sbc.w	fp, r3, r1
 800c5f2:	f04f 0200 	mov.w	r2, #0
 800c5f6:	f04f 0300 	mov.w	r3, #0
 800c5fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c5fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c602:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c606:	4692      	mov	sl, r2
 800c608:	469b      	mov	fp, r3
 800c60a:	4623      	mov	r3, r4
 800c60c:	eb1a 0303 	adds.w	r3, sl, r3
 800c610:	623b      	str	r3, [r7, #32]
 800c612:	462b      	mov	r3, r5
 800c614:	eb4b 0303 	adc.w	r3, fp, r3
 800c618:	627b      	str	r3, [r7, #36]	; 0x24
 800c61a:	f04f 0200 	mov.w	r2, #0
 800c61e:	f04f 0300 	mov.w	r3, #0
 800c622:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c626:	4629      	mov	r1, r5
 800c628:	028b      	lsls	r3, r1, #10
 800c62a:	4621      	mov	r1, r4
 800c62c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c630:	4621      	mov	r1, r4
 800c632:	028a      	lsls	r2, r1, #10
 800c634:	4610      	mov	r0, r2
 800c636:	4619      	mov	r1, r3
 800c638:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c63c:	2200      	movs	r2, #0
 800c63e:	673b      	str	r3, [r7, #112]	; 0x70
 800c640:	677a      	str	r2, [r7, #116]	; 0x74
 800c642:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c646:	f7f4 f9e7 	bl	8000a18 <__aeabi_uldivmod>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	4613      	mov	r3, r2
 800c650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c654:	4b41      	ldr	r3, [pc, #260]	; (800c75c <HAL_RCC_GetSysClockFreq+0x354>)
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	0c1b      	lsrs	r3, r3, #16
 800c65a:	f003 0303 	and.w	r3, r3, #3
 800c65e:	3301      	adds	r3, #1
 800c660:	005b      	lsls	r3, r3, #1
 800c662:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800c666:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c66a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c66e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c676:	e0eb      	b.n	800c850 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c678:	4b38      	ldr	r3, [pc, #224]	; (800c75c <HAL_RCC_GetSysClockFreq+0x354>)
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c684:	4b35      	ldr	r3, [pc, #212]	; (800c75c <HAL_RCC_GetSysClockFreq+0x354>)
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d06b      	beq.n	800c768 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c690:	4b32      	ldr	r3, [pc, #200]	; (800c75c <HAL_RCC_GetSysClockFreq+0x354>)
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	099b      	lsrs	r3, r3, #6
 800c696:	2200      	movs	r2, #0
 800c698:	66bb      	str	r3, [r7, #104]	; 0x68
 800c69a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c69c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c69e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6a2:	663b      	str	r3, [r7, #96]	; 0x60
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	667b      	str	r3, [r7, #100]	; 0x64
 800c6a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800c6ac:	4622      	mov	r2, r4
 800c6ae:	462b      	mov	r3, r5
 800c6b0:	f04f 0000 	mov.w	r0, #0
 800c6b4:	f04f 0100 	mov.w	r1, #0
 800c6b8:	0159      	lsls	r1, r3, #5
 800c6ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c6be:	0150      	lsls	r0, r2, #5
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	4621      	mov	r1, r4
 800c6c6:	1a51      	subs	r1, r2, r1
 800c6c8:	61b9      	str	r1, [r7, #24]
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	eb63 0301 	sbc.w	r3, r3, r1
 800c6d0:	61fb      	str	r3, [r7, #28]
 800c6d2:	f04f 0200 	mov.w	r2, #0
 800c6d6:	f04f 0300 	mov.w	r3, #0
 800c6da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800c6de:	4659      	mov	r1, fp
 800c6e0:	018b      	lsls	r3, r1, #6
 800c6e2:	4651      	mov	r1, sl
 800c6e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c6e8:	4651      	mov	r1, sl
 800c6ea:	018a      	lsls	r2, r1, #6
 800c6ec:	4651      	mov	r1, sl
 800c6ee:	ebb2 0801 	subs.w	r8, r2, r1
 800c6f2:	4659      	mov	r1, fp
 800c6f4:	eb63 0901 	sbc.w	r9, r3, r1
 800c6f8:	f04f 0200 	mov.w	r2, #0
 800c6fc:	f04f 0300 	mov.w	r3, #0
 800c700:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c704:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c708:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c70c:	4690      	mov	r8, r2
 800c70e:	4699      	mov	r9, r3
 800c710:	4623      	mov	r3, r4
 800c712:	eb18 0303 	adds.w	r3, r8, r3
 800c716:	613b      	str	r3, [r7, #16]
 800c718:	462b      	mov	r3, r5
 800c71a:	eb49 0303 	adc.w	r3, r9, r3
 800c71e:	617b      	str	r3, [r7, #20]
 800c720:	f04f 0200 	mov.w	r2, #0
 800c724:	f04f 0300 	mov.w	r3, #0
 800c728:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c72c:	4629      	mov	r1, r5
 800c72e:	024b      	lsls	r3, r1, #9
 800c730:	4621      	mov	r1, r4
 800c732:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c736:	4621      	mov	r1, r4
 800c738:	024a      	lsls	r2, r1, #9
 800c73a:	4610      	mov	r0, r2
 800c73c:	4619      	mov	r1, r3
 800c73e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c742:	2200      	movs	r2, #0
 800c744:	65bb      	str	r3, [r7, #88]	; 0x58
 800c746:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c748:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c74c:	f7f4 f964 	bl	8000a18 <__aeabi_uldivmod>
 800c750:	4602      	mov	r2, r0
 800c752:	460b      	mov	r3, r1
 800c754:	4613      	mov	r3, r2
 800c756:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c75a:	e065      	b.n	800c828 <HAL_RCC_GetSysClockFreq+0x420>
 800c75c:	40023800 	.word	0x40023800
 800c760:	00f42400 	.word	0x00f42400
 800c764:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c768:	4b3d      	ldr	r3, [pc, #244]	; (800c860 <HAL_RCC_GetSysClockFreq+0x458>)
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	099b      	lsrs	r3, r3, #6
 800c76e:	2200      	movs	r2, #0
 800c770:	4618      	mov	r0, r3
 800c772:	4611      	mov	r1, r2
 800c774:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c778:	653b      	str	r3, [r7, #80]	; 0x50
 800c77a:	2300      	movs	r3, #0
 800c77c:	657b      	str	r3, [r7, #84]	; 0x54
 800c77e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800c782:	4642      	mov	r2, r8
 800c784:	464b      	mov	r3, r9
 800c786:	f04f 0000 	mov.w	r0, #0
 800c78a:	f04f 0100 	mov.w	r1, #0
 800c78e:	0159      	lsls	r1, r3, #5
 800c790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c794:	0150      	lsls	r0, r2, #5
 800c796:	4602      	mov	r2, r0
 800c798:	460b      	mov	r3, r1
 800c79a:	4641      	mov	r1, r8
 800c79c:	1a51      	subs	r1, r2, r1
 800c79e:	60b9      	str	r1, [r7, #8]
 800c7a0:	4649      	mov	r1, r9
 800c7a2:	eb63 0301 	sbc.w	r3, r3, r1
 800c7a6:	60fb      	str	r3, [r7, #12]
 800c7a8:	f04f 0200 	mov.w	r2, #0
 800c7ac:	f04f 0300 	mov.w	r3, #0
 800c7b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800c7b4:	4659      	mov	r1, fp
 800c7b6:	018b      	lsls	r3, r1, #6
 800c7b8:	4651      	mov	r1, sl
 800c7ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c7be:	4651      	mov	r1, sl
 800c7c0:	018a      	lsls	r2, r1, #6
 800c7c2:	4651      	mov	r1, sl
 800c7c4:	1a54      	subs	r4, r2, r1
 800c7c6:	4659      	mov	r1, fp
 800c7c8:	eb63 0501 	sbc.w	r5, r3, r1
 800c7cc:	f04f 0200 	mov.w	r2, #0
 800c7d0:	f04f 0300 	mov.w	r3, #0
 800c7d4:	00eb      	lsls	r3, r5, #3
 800c7d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c7da:	00e2      	lsls	r2, r4, #3
 800c7dc:	4614      	mov	r4, r2
 800c7de:	461d      	mov	r5, r3
 800c7e0:	4643      	mov	r3, r8
 800c7e2:	18e3      	adds	r3, r4, r3
 800c7e4:	603b      	str	r3, [r7, #0]
 800c7e6:	464b      	mov	r3, r9
 800c7e8:	eb45 0303 	adc.w	r3, r5, r3
 800c7ec:	607b      	str	r3, [r7, #4]
 800c7ee:	f04f 0200 	mov.w	r2, #0
 800c7f2:	f04f 0300 	mov.w	r3, #0
 800c7f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c7fa:	4629      	mov	r1, r5
 800c7fc:	028b      	lsls	r3, r1, #10
 800c7fe:	4621      	mov	r1, r4
 800c800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c804:	4621      	mov	r1, r4
 800c806:	028a      	lsls	r2, r1, #10
 800c808:	4610      	mov	r0, r2
 800c80a:	4619      	mov	r1, r3
 800c80c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c810:	2200      	movs	r2, #0
 800c812:	64bb      	str	r3, [r7, #72]	; 0x48
 800c814:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c816:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c81a:	f7f4 f8fd 	bl	8000a18 <__aeabi_uldivmod>
 800c81e:	4602      	mov	r2, r0
 800c820:	460b      	mov	r3, r1
 800c822:	4613      	mov	r3, r2
 800c824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800c828:	4b0d      	ldr	r3, [pc, #52]	; (800c860 <HAL_RCC_GetSysClockFreq+0x458>)
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	0f1b      	lsrs	r3, r3, #28
 800c82e:	f003 0307 	and.w	r3, r3, #7
 800c832:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800c836:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c83a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c83e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c842:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c846:	e003      	b.n	800c850 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c848:	4b06      	ldr	r3, [pc, #24]	; (800c864 <HAL_RCC_GetSysClockFreq+0x45c>)
 800c84a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c84e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c850:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800c854:	4618      	mov	r0, r3
 800c856:	37b8      	adds	r7, #184	; 0xb8
 800c858:	46bd      	mov	sp, r7
 800c85a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c85e:	bf00      	nop
 800c860:	40023800 	.word	0x40023800
 800c864:	00f42400 	.word	0x00f42400

0800c868 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b086      	sub	sp, #24
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d101      	bne.n	800c87a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c876:	2301      	movs	r3, #1
 800c878:	e28d      	b.n	800cd96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f003 0301 	and.w	r3, r3, #1
 800c882:	2b00      	cmp	r3, #0
 800c884:	f000 8083 	beq.w	800c98e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c888:	4b94      	ldr	r3, [pc, #592]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	f003 030c 	and.w	r3, r3, #12
 800c890:	2b04      	cmp	r3, #4
 800c892:	d019      	beq.n	800c8c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c894:	4b91      	ldr	r3, [pc, #580]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c89c:	2b08      	cmp	r3, #8
 800c89e:	d106      	bne.n	800c8ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c8a0:	4b8e      	ldr	r3, [pc, #568]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c8ac:	d00c      	beq.n	800c8c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c8ae:	4b8b      	ldr	r3, [pc, #556]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c8b0:	689b      	ldr	r3, [r3, #8]
 800c8b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c8b6:	2b0c      	cmp	r3, #12
 800c8b8:	d112      	bne.n	800c8e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c8ba:	4b88      	ldr	r3, [pc, #544]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c8c6:	d10b      	bne.n	800c8e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c8c8:	4b84      	ldr	r3, [pc, #528]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d05b      	beq.n	800c98c <HAL_RCC_OscConfig+0x124>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d157      	bne.n	800c98c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	e25a      	b.n	800cd96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8e8:	d106      	bne.n	800c8f8 <HAL_RCC_OscConfig+0x90>
 800c8ea:	4b7c      	ldr	r3, [pc, #496]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a7b      	ldr	r2, [pc, #492]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c8f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c8f4:	6013      	str	r3, [r2, #0]
 800c8f6:	e01d      	b.n	800c934 <HAL_RCC_OscConfig+0xcc>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c900:	d10c      	bne.n	800c91c <HAL_RCC_OscConfig+0xb4>
 800c902:	4b76      	ldr	r3, [pc, #472]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a75      	ldr	r2, [pc, #468]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c90c:	6013      	str	r3, [r2, #0]
 800c90e:	4b73      	ldr	r3, [pc, #460]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4a72      	ldr	r2, [pc, #456]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c918:	6013      	str	r3, [r2, #0]
 800c91a:	e00b      	b.n	800c934 <HAL_RCC_OscConfig+0xcc>
 800c91c:	4b6f      	ldr	r3, [pc, #444]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a6e      	ldr	r2, [pc, #440]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c926:	6013      	str	r3, [r2, #0]
 800c928:	4b6c      	ldr	r3, [pc, #432]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a6b      	ldr	r2, [pc, #428]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c92e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c932:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d013      	beq.n	800c964 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c93c:	f7fb fccc 	bl	80082d8 <HAL_GetTick>
 800c940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c942:	e008      	b.n	800c956 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c944:	f7fb fcc8 	bl	80082d8 <HAL_GetTick>
 800c948:	4602      	mov	r2, r0
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	1ad3      	subs	r3, r2, r3
 800c94e:	2b64      	cmp	r3, #100	; 0x64
 800c950:	d901      	bls.n	800c956 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c952:	2303      	movs	r3, #3
 800c954:	e21f      	b.n	800cd96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c956:	4b61      	ldr	r3, [pc, #388]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d0f0      	beq.n	800c944 <HAL_RCC_OscConfig+0xdc>
 800c962:	e014      	b.n	800c98e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c964:	f7fb fcb8 	bl	80082d8 <HAL_GetTick>
 800c968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c96a:	e008      	b.n	800c97e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c96c:	f7fb fcb4 	bl	80082d8 <HAL_GetTick>
 800c970:	4602      	mov	r2, r0
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	1ad3      	subs	r3, r2, r3
 800c976:	2b64      	cmp	r3, #100	; 0x64
 800c978:	d901      	bls.n	800c97e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800c97a:	2303      	movs	r3, #3
 800c97c:	e20b      	b.n	800cd96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c97e:	4b57      	ldr	r3, [pc, #348]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c986:	2b00      	cmp	r3, #0
 800c988:	d1f0      	bne.n	800c96c <HAL_RCC_OscConfig+0x104>
 800c98a:	e000      	b.n	800c98e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c98c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f003 0302 	and.w	r3, r3, #2
 800c996:	2b00      	cmp	r3, #0
 800c998:	d06f      	beq.n	800ca7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c99a:	4b50      	ldr	r3, [pc, #320]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	f003 030c 	and.w	r3, r3, #12
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d017      	beq.n	800c9d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c9a6:	4b4d      	ldr	r3, [pc, #308]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c9a8:	689b      	ldr	r3, [r3, #8]
 800c9aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c9ae:	2b08      	cmp	r3, #8
 800c9b0:	d105      	bne.n	800c9be <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c9b2:	4b4a      	ldr	r3, [pc, #296]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c9b4:	685b      	ldr	r3, [r3, #4]
 800c9b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d00b      	beq.n	800c9d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c9be:	4b47      	ldr	r3, [pc, #284]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c9c6:	2b0c      	cmp	r3, #12
 800c9c8:	d11c      	bne.n	800ca04 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c9ca:	4b44      	ldr	r3, [pc, #272]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d116      	bne.n	800ca04 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c9d6:	4b41      	ldr	r3, [pc, #260]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f003 0302 	and.w	r3, r3, #2
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d005      	beq.n	800c9ee <HAL_RCC_OscConfig+0x186>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	68db      	ldr	r3, [r3, #12]
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d001      	beq.n	800c9ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	e1d3      	b.n	800cd96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c9ee:	4b3b      	ldr	r3, [pc, #236]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	691b      	ldr	r3, [r3, #16]
 800c9fa:	00db      	lsls	r3, r3, #3
 800c9fc:	4937      	ldr	r1, [pc, #220]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ca02:	e03a      	b.n	800ca7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d020      	beq.n	800ca4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ca0c:	4b34      	ldr	r3, [pc, #208]	; (800cae0 <HAL_RCC_OscConfig+0x278>)
 800ca0e:	2201      	movs	r2, #1
 800ca10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca12:	f7fb fc61 	bl	80082d8 <HAL_GetTick>
 800ca16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ca18:	e008      	b.n	800ca2c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ca1a:	f7fb fc5d 	bl	80082d8 <HAL_GetTick>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	1ad3      	subs	r3, r2, r3
 800ca24:	2b02      	cmp	r3, #2
 800ca26:	d901      	bls.n	800ca2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800ca28:	2303      	movs	r3, #3
 800ca2a:	e1b4      	b.n	800cd96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ca2c:	4b2b      	ldr	r3, [pc, #172]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f003 0302 	and.w	r3, r3, #2
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d0f0      	beq.n	800ca1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca38:	4b28      	ldr	r3, [pc, #160]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	691b      	ldr	r3, [r3, #16]
 800ca44:	00db      	lsls	r3, r3, #3
 800ca46:	4925      	ldr	r1, [pc, #148]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	600b      	str	r3, [r1, #0]
 800ca4c:	e015      	b.n	800ca7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ca4e:	4b24      	ldr	r3, [pc, #144]	; (800cae0 <HAL_RCC_OscConfig+0x278>)
 800ca50:	2200      	movs	r2, #0
 800ca52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca54:	f7fb fc40 	bl	80082d8 <HAL_GetTick>
 800ca58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ca5a:	e008      	b.n	800ca6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ca5c:	f7fb fc3c 	bl	80082d8 <HAL_GetTick>
 800ca60:	4602      	mov	r2, r0
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	2b02      	cmp	r3, #2
 800ca68:	d901      	bls.n	800ca6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ca6a:	2303      	movs	r3, #3
 800ca6c:	e193      	b.n	800cd96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ca6e:	4b1b      	ldr	r3, [pc, #108]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f003 0302 	and.w	r3, r3, #2
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1f0      	bne.n	800ca5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f003 0308 	and.w	r3, r3, #8
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d036      	beq.n	800caf4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	695b      	ldr	r3, [r3, #20]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d016      	beq.n	800cabc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ca8e:	4b15      	ldr	r3, [pc, #84]	; (800cae4 <HAL_RCC_OscConfig+0x27c>)
 800ca90:	2201      	movs	r2, #1
 800ca92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca94:	f7fb fc20 	bl	80082d8 <HAL_GetTick>
 800ca98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ca9a:	e008      	b.n	800caae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ca9c:	f7fb fc1c 	bl	80082d8 <HAL_GetTick>
 800caa0:	4602      	mov	r2, r0
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	1ad3      	subs	r3, r2, r3
 800caa6:	2b02      	cmp	r3, #2
 800caa8:	d901      	bls.n	800caae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800caaa:	2303      	movs	r3, #3
 800caac:	e173      	b.n	800cd96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800caae:	4b0b      	ldr	r3, [pc, #44]	; (800cadc <HAL_RCC_OscConfig+0x274>)
 800cab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cab2:	f003 0302 	and.w	r3, r3, #2
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d0f0      	beq.n	800ca9c <HAL_RCC_OscConfig+0x234>
 800caba:	e01b      	b.n	800caf4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cabc:	4b09      	ldr	r3, [pc, #36]	; (800cae4 <HAL_RCC_OscConfig+0x27c>)
 800cabe:	2200      	movs	r2, #0
 800cac0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cac2:	f7fb fc09 	bl	80082d8 <HAL_GetTick>
 800cac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cac8:	e00e      	b.n	800cae8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800caca:	f7fb fc05 	bl	80082d8 <HAL_GetTick>
 800cace:	4602      	mov	r2, r0
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	1ad3      	subs	r3, r2, r3
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	d907      	bls.n	800cae8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800cad8:	2303      	movs	r3, #3
 800cada:	e15c      	b.n	800cd96 <HAL_RCC_OscConfig+0x52e>
 800cadc:	40023800 	.word	0x40023800
 800cae0:	42470000 	.word	0x42470000
 800cae4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cae8:	4b8a      	ldr	r3, [pc, #552]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800caea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800caec:	f003 0302 	and.w	r3, r3, #2
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d1ea      	bne.n	800caca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f003 0304 	and.w	r3, r3, #4
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f000 8097 	beq.w	800cc30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cb02:	2300      	movs	r3, #0
 800cb04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cb06:	4b83      	ldr	r3, [pc, #524]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cb08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d10f      	bne.n	800cb32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cb12:	2300      	movs	r3, #0
 800cb14:	60bb      	str	r3, [r7, #8]
 800cb16:	4b7f      	ldr	r3, [pc, #508]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cb18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb1a:	4a7e      	ldr	r2, [pc, #504]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cb1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb20:	6413      	str	r3, [r2, #64]	; 0x40
 800cb22:	4b7c      	ldr	r3, [pc, #496]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cb24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb2a:	60bb      	str	r3, [r7, #8]
 800cb2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cb32:	4b79      	ldr	r3, [pc, #484]	; (800cd18 <HAL_RCC_OscConfig+0x4b0>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d118      	bne.n	800cb70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cb3e:	4b76      	ldr	r3, [pc, #472]	; (800cd18 <HAL_RCC_OscConfig+0x4b0>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a75      	ldr	r2, [pc, #468]	; (800cd18 <HAL_RCC_OscConfig+0x4b0>)
 800cb44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cb4a:	f7fb fbc5 	bl	80082d8 <HAL_GetTick>
 800cb4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cb50:	e008      	b.n	800cb64 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cb52:	f7fb fbc1 	bl	80082d8 <HAL_GetTick>
 800cb56:	4602      	mov	r2, r0
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	1ad3      	subs	r3, r2, r3
 800cb5c:	2b02      	cmp	r3, #2
 800cb5e:	d901      	bls.n	800cb64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800cb60:	2303      	movs	r3, #3
 800cb62:	e118      	b.n	800cd96 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cb64:	4b6c      	ldr	r3, [pc, #432]	; (800cd18 <HAL_RCC_OscConfig+0x4b0>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d0f0      	beq.n	800cb52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	689b      	ldr	r3, [r3, #8]
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d106      	bne.n	800cb86 <HAL_RCC_OscConfig+0x31e>
 800cb78:	4b66      	ldr	r3, [pc, #408]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cb7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb7c:	4a65      	ldr	r2, [pc, #404]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cb7e:	f043 0301 	orr.w	r3, r3, #1
 800cb82:	6713      	str	r3, [r2, #112]	; 0x70
 800cb84:	e01c      	b.n	800cbc0 <HAL_RCC_OscConfig+0x358>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	2b05      	cmp	r3, #5
 800cb8c:	d10c      	bne.n	800cba8 <HAL_RCC_OscConfig+0x340>
 800cb8e:	4b61      	ldr	r3, [pc, #388]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cb90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb92:	4a60      	ldr	r2, [pc, #384]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cb94:	f043 0304 	orr.w	r3, r3, #4
 800cb98:	6713      	str	r3, [r2, #112]	; 0x70
 800cb9a:	4b5e      	ldr	r3, [pc, #376]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cb9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb9e:	4a5d      	ldr	r2, [pc, #372]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cba0:	f043 0301 	orr.w	r3, r3, #1
 800cba4:	6713      	str	r3, [r2, #112]	; 0x70
 800cba6:	e00b      	b.n	800cbc0 <HAL_RCC_OscConfig+0x358>
 800cba8:	4b5a      	ldr	r3, [pc, #360]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cbaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbac:	4a59      	ldr	r2, [pc, #356]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cbae:	f023 0301 	bic.w	r3, r3, #1
 800cbb2:	6713      	str	r3, [r2, #112]	; 0x70
 800cbb4:	4b57      	ldr	r3, [pc, #348]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cbb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbb8:	4a56      	ldr	r2, [pc, #344]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cbba:	f023 0304 	bic.w	r3, r3, #4
 800cbbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	689b      	ldr	r3, [r3, #8]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d015      	beq.n	800cbf4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbc8:	f7fb fb86 	bl	80082d8 <HAL_GetTick>
 800cbcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cbce:	e00a      	b.n	800cbe6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cbd0:	f7fb fb82 	bl	80082d8 <HAL_GetTick>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	1ad3      	subs	r3, r2, r3
 800cbda:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d901      	bls.n	800cbe6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800cbe2:	2303      	movs	r3, #3
 800cbe4:	e0d7      	b.n	800cd96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cbe6:	4b4b      	ldr	r3, [pc, #300]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cbe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbea:	f003 0302 	and.w	r3, r3, #2
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d0ee      	beq.n	800cbd0 <HAL_RCC_OscConfig+0x368>
 800cbf2:	e014      	b.n	800cc1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbf4:	f7fb fb70 	bl	80082d8 <HAL_GetTick>
 800cbf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cbfa:	e00a      	b.n	800cc12 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cbfc:	f7fb fb6c 	bl	80082d8 <HAL_GetTick>
 800cc00:	4602      	mov	r2, r0
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	1ad3      	subs	r3, r2, r3
 800cc06:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d901      	bls.n	800cc12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800cc0e:	2303      	movs	r3, #3
 800cc10:	e0c1      	b.n	800cd96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cc12:	4b40      	ldr	r3, [pc, #256]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cc14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc16:	f003 0302 	and.w	r3, r3, #2
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d1ee      	bne.n	800cbfc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cc1e:	7dfb      	ldrb	r3, [r7, #23]
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d105      	bne.n	800cc30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cc24:	4b3b      	ldr	r3, [pc, #236]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cc26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc28:	4a3a      	ldr	r2, [pc, #232]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cc2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	699b      	ldr	r3, [r3, #24]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	f000 80ad 	beq.w	800cd94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cc3a:	4b36      	ldr	r3, [pc, #216]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cc3c:	689b      	ldr	r3, [r3, #8]
 800cc3e:	f003 030c 	and.w	r3, r3, #12
 800cc42:	2b08      	cmp	r3, #8
 800cc44:	d060      	beq.n	800cd08 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	699b      	ldr	r3, [r3, #24]
 800cc4a:	2b02      	cmp	r3, #2
 800cc4c:	d145      	bne.n	800ccda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cc4e:	4b33      	ldr	r3, [pc, #204]	; (800cd1c <HAL_RCC_OscConfig+0x4b4>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc54:	f7fb fb40 	bl	80082d8 <HAL_GetTick>
 800cc58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cc5a:	e008      	b.n	800cc6e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cc5c:	f7fb fb3c 	bl	80082d8 <HAL_GetTick>
 800cc60:	4602      	mov	r2, r0
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	1ad3      	subs	r3, r2, r3
 800cc66:	2b02      	cmp	r3, #2
 800cc68:	d901      	bls.n	800cc6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800cc6a:	2303      	movs	r3, #3
 800cc6c:	e093      	b.n	800cd96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cc6e:	4b29      	ldr	r3, [pc, #164]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d1f0      	bne.n	800cc5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	69da      	ldr	r2, [r3, #28]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6a1b      	ldr	r3, [r3, #32]
 800cc82:	431a      	orrs	r2, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc88:	019b      	lsls	r3, r3, #6
 800cc8a:	431a      	orrs	r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc90:	085b      	lsrs	r3, r3, #1
 800cc92:	3b01      	subs	r3, #1
 800cc94:	041b      	lsls	r3, r3, #16
 800cc96:	431a      	orrs	r2, r3
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc9c:	061b      	lsls	r3, r3, #24
 800cc9e:	431a      	orrs	r2, r3
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cca4:	071b      	lsls	r3, r3, #28
 800cca6:	491b      	ldr	r1, [pc, #108]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ccac:	4b1b      	ldr	r3, [pc, #108]	; (800cd1c <HAL_RCC_OscConfig+0x4b4>)
 800ccae:	2201      	movs	r2, #1
 800ccb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccb2:	f7fb fb11 	bl	80082d8 <HAL_GetTick>
 800ccb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ccb8:	e008      	b.n	800cccc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ccba:	f7fb fb0d 	bl	80082d8 <HAL_GetTick>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	1ad3      	subs	r3, r2, r3
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	d901      	bls.n	800cccc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800ccc8:	2303      	movs	r3, #3
 800ccca:	e064      	b.n	800cd96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cccc:	4b11      	ldr	r3, [pc, #68]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d0f0      	beq.n	800ccba <HAL_RCC_OscConfig+0x452>
 800ccd8:	e05c      	b.n	800cd94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ccda:	4b10      	ldr	r3, [pc, #64]	; (800cd1c <HAL_RCC_OscConfig+0x4b4>)
 800ccdc:	2200      	movs	r2, #0
 800ccde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cce0:	f7fb fafa 	bl	80082d8 <HAL_GetTick>
 800cce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cce6:	e008      	b.n	800ccfa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cce8:	f7fb faf6 	bl	80082d8 <HAL_GetTick>
 800ccec:	4602      	mov	r2, r0
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	1ad3      	subs	r3, r2, r3
 800ccf2:	2b02      	cmp	r3, #2
 800ccf4:	d901      	bls.n	800ccfa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800ccf6:	2303      	movs	r3, #3
 800ccf8:	e04d      	b.n	800cd96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ccfa:	4b06      	ldr	r3, [pc, #24]	; (800cd14 <HAL_RCC_OscConfig+0x4ac>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d1f0      	bne.n	800cce8 <HAL_RCC_OscConfig+0x480>
 800cd06:	e045      	b.n	800cd94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	699b      	ldr	r3, [r3, #24]
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d107      	bne.n	800cd20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800cd10:	2301      	movs	r3, #1
 800cd12:	e040      	b.n	800cd96 <HAL_RCC_OscConfig+0x52e>
 800cd14:	40023800 	.word	0x40023800
 800cd18:	40007000 	.word	0x40007000
 800cd1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cd20:	4b1f      	ldr	r3, [pc, #124]	; (800cda0 <HAL_RCC_OscConfig+0x538>)
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	699b      	ldr	r3, [r3, #24]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d030      	beq.n	800cd90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d129      	bne.n	800cd90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d122      	bne.n	800cd90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cd4a:	68fa      	ldr	r2, [r7, #12]
 800cd4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cd50:	4013      	ands	r3, r2
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cd56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d119      	bne.n	800cd90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd66:	085b      	lsrs	r3, r3, #1
 800cd68:	3b01      	subs	r3, #1
 800cd6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d10f      	bne.n	800cd90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d107      	bne.n	800cd90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d001      	beq.n	800cd94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800cd90:	2301      	movs	r3, #1
 800cd92:	e000      	b.n	800cd96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800cd94:	2300      	movs	r3, #0
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3718      	adds	r7, #24
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	40023800 	.word	0x40023800

0800cda4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d101      	bne.n	800cdb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e041      	b.n	800ce3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d106      	bne.n	800cdd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f7fa fe14 	bl	80079f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2202      	movs	r2, #2
 800cdd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	3304      	adds	r3, #4
 800cde0:	4619      	mov	r1, r3
 800cde2:	4610      	mov	r0, r2
 800cde4:	f000 fc70 	bl	800d6c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2201      	movs	r2, #1
 800cdec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2201      	movs	r2, #1
 800ce14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2201      	movs	r2, #1
 800ce34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce38:	2300      	movs	r3, #0
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3708      	adds	r7, #8
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
	...

0800ce44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b085      	sub	sp, #20
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d001      	beq.n	800ce5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ce58:	2301      	movs	r3, #1
 800ce5a:	e04e      	b.n	800cefa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2202      	movs	r2, #2
 800ce60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	68da      	ldr	r2, [r3, #12]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f042 0201 	orr.w	r2, r2, #1
 800ce72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a23      	ldr	r2, [pc, #140]	; (800cf08 <HAL_TIM_Base_Start_IT+0xc4>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d022      	beq.n	800cec4 <HAL_TIM_Base_Start_IT+0x80>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce86:	d01d      	beq.n	800cec4 <HAL_TIM_Base_Start_IT+0x80>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a1f      	ldr	r2, [pc, #124]	; (800cf0c <HAL_TIM_Base_Start_IT+0xc8>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d018      	beq.n	800cec4 <HAL_TIM_Base_Start_IT+0x80>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a1e      	ldr	r2, [pc, #120]	; (800cf10 <HAL_TIM_Base_Start_IT+0xcc>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d013      	beq.n	800cec4 <HAL_TIM_Base_Start_IT+0x80>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a1c      	ldr	r2, [pc, #112]	; (800cf14 <HAL_TIM_Base_Start_IT+0xd0>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d00e      	beq.n	800cec4 <HAL_TIM_Base_Start_IT+0x80>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4a1b      	ldr	r2, [pc, #108]	; (800cf18 <HAL_TIM_Base_Start_IT+0xd4>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d009      	beq.n	800cec4 <HAL_TIM_Base_Start_IT+0x80>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4a19      	ldr	r2, [pc, #100]	; (800cf1c <HAL_TIM_Base_Start_IT+0xd8>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d004      	beq.n	800cec4 <HAL_TIM_Base_Start_IT+0x80>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4a18      	ldr	r2, [pc, #96]	; (800cf20 <HAL_TIM_Base_Start_IT+0xdc>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d111      	bne.n	800cee8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	f003 0307 	and.w	r3, r3, #7
 800cece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2b06      	cmp	r3, #6
 800ced4:	d010      	beq.n	800cef8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f042 0201 	orr.w	r2, r2, #1
 800cee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cee6:	e007      	b.n	800cef8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f042 0201 	orr.w	r2, r2, #1
 800cef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3714      	adds	r7, #20
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr
 800cf06:	bf00      	nop
 800cf08:	40010000 	.word	0x40010000
 800cf0c:	40000400 	.word	0x40000400
 800cf10:	40000800 	.word	0x40000800
 800cf14:	40000c00 	.word	0x40000c00
 800cf18:	40010400 	.word	0x40010400
 800cf1c:	40014000 	.word	0x40014000
 800cf20:	40001800 	.word	0x40001800

0800cf24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d101      	bne.n	800cf36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cf32:	2301      	movs	r3, #1
 800cf34:	e041      	b.n	800cfba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d106      	bne.n	800cf50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2200      	movs	r2, #0
 800cf46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f7fa fcea 	bl	8007924 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2202      	movs	r2, #2
 800cf54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	3304      	adds	r3, #4
 800cf60:	4619      	mov	r1, r3
 800cf62:	4610      	mov	r0, r2
 800cf64:	f000 fbb0 	bl	800d6c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2201      	movs	r2, #1
 800cf84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2201      	movs	r2, #1
 800cf94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2201      	movs	r2, #1
 800cfa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cfb8:	2300      	movs	r3, #0
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3708      	adds	r7, #8
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
	...

0800cfc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d109      	bne.n	800cfe8 <HAL_TIM_PWM_Start+0x24>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	bf14      	ite	ne
 800cfe0:	2301      	movne	r3, #1
 800cfe2:	2300      	moveq	r3, #0
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	e022      	b.n	800d02e <HAL_TIM_PWM_Start+0x6a>
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	2b04      	cmp	r3, #4
 800cfec:	d109      	bne.n	800d002 <HAL_TIM_PWM_Start+0x3e>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cff4:	b2db      	uxtb	r3, r3
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	bf14      	ite	ne
 800cffa:	2301      	movne	r3, #1
 800cffc:	2300      	moveq	r3, #0
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	e015      	b.n	800d02e <HAL_TIM_PWM_Start+0x6a>
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	2b08      	cmp	r3, #8
 800d006:	d109      	bne.n	800d01c <HAL_TIM_PWM_Start+0x58>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	2b01      	cmp	r3, #1
 800d012:	bf14      	ite	ne
 800d014:	2301      	movne	r3, #1
 800d016:	2300      	moveq	r3, #0
 800d018:	b2db      	uxtb	r3, r3
 800d01a:	e008      	b.n	800d02e <HAL_TIM_PWM_Start+0x6a>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d022:	b2db      	uxtb	r3, r3
 800d024:	2b01      	cmp	r3, #1
 800d026:	bf14      	ite	ne
 800d028:	2301      	movne	r3, #1
 800d02a:	2300      	moveq	r3, #0
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d001      	beq.n	800d036 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800d032:	2301      	movs	r3, #1
 800d034:	e07c      	b.n	800d130 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d104      	bne.n	800d046 <HAL_TIM_PWM_Start+0x82>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2202      	movs	r2, #2
 800d040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d044:	e013      	b.n	800d06e <HAL_TIM_PWM_Start+0xaa>
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	2b04      	cmp	r3, #4
 800d04a:	d104      	bne.n	800d056 <HAL_TIM_PWM_Start+0x92>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2202      	movs	r2, #2
 800d050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d054:	e00b      	b.n	800d06e <HAL_TIM_PWM_Start+0xaa>
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	2b08      	cmp	r3, #8
 800d05a:	d104      	bne.n	800d066 <HAL_TIM_PWM_Start+0xa2>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2202      	movs	r2, #2
 800d060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d064:	e003      	b.n	800d06e <HAL_TIM_PWM_Start+0xaa>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2202      	movs	r2, #2
 800d06a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2201      	movs	r2, #1
 800d074:	6839      	ldr	r1, [r7, #0]
 800d076:	4618      	mov	r0, r3
 800d078:	f000 fe10 	bl	800dc9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a2d      	ldr	r2, [pc, #180]	; (800d138 <HAL_TIM_PWM_Start+0x174>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d004      	beq.n	800d090 <HAL_TIM_PWM_Start+0xcc>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a2c      	ldr	r2, [pc, #176]	; (800d13c <HAL_TIM_PWM_Start+0x178>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d101      	bne.n	800d094 <HAL_TIM_PWM_Start+0xd0>
 800d090:	2301      	movs	r3, #1
 800d092:	e000      	b.n	800d096 <HAL_TIM_PWM_Start+0xd2>
 800d094:	2300      	movs	r3, #0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d007      	beq.n	800d0aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d0a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a22      	ldr	r2, [pc, #136]	; (800d138 <HAL_TIM_PWM_Start+0x174>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d022      	beq.n	800d0fa <HAL_TIM_PWM_Start+0x136>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0bc:	d01d      	beq.n	800d0fa <HAL_TIM_PWM_Start+0x136>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4a1f      	ldr	r2, [pc, #124]	; (800d140 <HAL_TIM_PWM_Start+0x17c>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d018      	beq.n	800d0fa <HAL_TIM_PWM_Start+0x136>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a1d      	ldr	r2, [pc, #116]	; (800d144 <HAL_TIM_PWM_Start+0x180>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d013      	beq.n	800d0fa <HAL_TIM_PWM_Start+0x136>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a1c      	ldr	r2, [pc, #112]	; (800d148 <HAL_TIM_PWM_Start+0x184>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d00e      	beq.n	800d0fa <HAL_TIM_PWM_Start+0x136>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a16      	ldr	r2, [pc, #88]	; (800d13c <HAL_TIM_PWM_Start+0x178>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d009      	beq.n	800d0fa <HAL_TIM_PWM_Start+0x136>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4a18      	ldr	r2, [pc, #96]	; (800d14c <HAL_TIM_PWM_Start+0x188>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d004      	beq.n	800d0fa <HAL_TIM_PWM_Start+0x136>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a16      	ldr	r2, [pc, #88]	; (800d150 <HAL_TIM_PWM_Start+0x18c>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d111      	bne.n	800d11e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	689b      	ldr	r3, [r3, #8]
 800d100:	f003 0307 	and.w	r3, r3, #7
 800d104:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2b06      	cmp	r3, #6
 800d10a:	d010      	beq.n	800d12e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f042 0201 	orr.w	r2, r2, #1
 800d11a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d11c:	e007      	b.n	800d12e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f042 0201 	orr.w	r2, r2, #1
 800d12c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	40010000 	.word	0x40010000
 800d13c:	40010400 	.word	0x40010400
 800d140:	40000400 	.word	0x40000400
 800d144:	40000800 	.word	0x40000800
 800d148:	40000c00 	.word	0x40000c00
 800d14c:	40014000 	.word	0x40014000
 800d150:	40001800 	.word	0x40001800

0800d154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	691b      	ldr	r3, [r3, #16]
 800d162:	f003 0302 	and.w	r3, r3, #2
 800d166:	2b02      	cmp	r3, #2
 800d168:	d122      	bne.n	800d1b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	f003 0302 	and.w	r3, r3, #2
 800d174:	2b02      	cmp	r3, #2
 800d176:	d11b      	bne.n	800d1b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f06f 0202 	mvn.w	r2, #2
 800d180:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2201      	movs	r2, #1
 800d186:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	699b      	ldr	r3, [r3, #24]
 800d18e:	f003 0303 	and.w	r3, r3, #3
 800d192:	2b00      	cmp	r3, #0
 800d194:	d003      	beq.n	800d19e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f000 fa77 	bl	800d68a <HAL_TIM_IC_CaptureCallback>
 800d19c:	e005      	b.n	800d1aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 fa69 	bl	800d676 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 fa7a 	bl	800d69e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	691b      	ldr	r3, [r3, #16]
 800d1b6:	f003 0304 	and.w	r3, r3, #4
 800d1ba:	2b04      	cmp	r3, #4
 800d1bc:	d122      	bne.n	800d204 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	f003 0304 	and.w	r3, r3, #4
 800d1c8:	2b04      	cmp	r3, #4
 800d1ca:	d11b      	bne.n	800d204 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f06f 0204 	mvn.w	r2, #4
 800d1d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2202      	movs	r2, #2
 800d1da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	699b      	ldr	r3, [r3, #24]
 800d1e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d003      	beq.n	800d1f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 fa4d 	bl	800d68a <HAL_TIM_IC_CaptureCallback>
 800d1f0:	e005      	b.n	800d1fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f000 fa3f 	bl	800d676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 fa50 	bl	800d69e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2200      	movs	r2, #0
 800d202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	f003 0308 	and.w	r3, r3, #8
 800d20e:	2b08      	cmp	r3, #8
 800d210:	d122      	bne.n	800d258 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	68db      	ldr	r3, [r3, #12]
 800d218:	f003 0308 	and.w	r3, r3, #8
 800d21c:	2b08      	cmp	r3, #8
 800d21e:	d11b      	bne.n	800d258 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f06f 0208 	mvn.w	r2, #8
 800d228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2204      	movs	r2, #4
 800d22e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	69db      	ldr	r3, [r3, #28]
 800d236:	f003 0303 	and.w	r3, r3, #3
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d003      	beq.n	800d246 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 fa23 	bl	800d68a <HAL_TIM_IC_CaptureCallback>
 800d244:	e005      	b.n	800d252 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 fa15 	bl	800d676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 fa26 	bl	800d69e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2200      	movs	r2, #0
 800d256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	691b      	ldr	r3, [r3, #16]
 800d25e:	f003 0310 	and.w	r3, r3, #16
 800d262:	2b10      	cmp	r3, #16
 800d264:	d122      	bne.n	800d2ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	f003 0310 	and.w	r3, r3, #16
 800d270:	2b10      	cmp	r3, #16
 800d272:	d11b      	bne.n	800d2ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f06f 0210 	mvn.w	r2, #16
 800d27c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2208      	movs	r2, #8
 800d282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	69db      	ldr	r3, [r3, #28]
 800d28a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d003      	beq.n	800d29a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 f9f9 	bl	800d68a <HAL_TIM_IC_CaptureCallback>
 800d298:	e005      	b.n	800d2a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 f9eb 	bl	800d676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 f9fc 	bl	800d69e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	691b      	ldr	r3, [r3, #16]
 800d2b2:	f003 0301 	and.w	r3, r3, #1
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	d10e      	bne.n	800d2d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	f003 0301 	and.w	r3, r3, #1
 800d2c4:	2b01      	cmp	r3, #1
 800d2c6:	d107      	bne.n	800d2d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f06f 0201 	mvn.w	r2, #1
 800d2d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f7f9 fa32 	bl	800673c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	691b      	ldr	r3, [r3, #16]
 800d2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2e2:	2b80      	cmp	r3, #128	; 0x80
 800d2e4:	d10e      	bne.n	800d304 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2f0:	2b80      	cmp	r3, #128	; 0x80
 800d2f2:	d107      	bne.n	800d304 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d2fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 fdca 	bl	800de98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	691b      	ldr	r3, [r3, #16]
 800d30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d30e:	2b40      	cmp	r3, #64	; 0x40
 800d310:	d10e      	bne.n	800d330 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d31c:	2b40      	cmp	r3, #64	; 0x40
 800d31e:	d107      	bne.n	800d330 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f000 f9c1 	bl	800d6b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	691b      	ldr	r3, [r3, #16]
 800d336:	f003 0320 	and.w	r3, r3, #32
 800d33a:	2b20      	cmp	r3, #32
 800d33c:	d10e      	bne.n	800d35c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	f003 0320 	and.w	r3, r3, #32
 800d348:	2b20      	cmp	r3, #32
 800d34a:	d107      	bne.n	800d35c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f06f 0220 	mvn.w	r2, #32
 800d354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 fd94 	bl	800de84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d35c:	bf00      	nop
 800d35e:	3708      	adds	r7, #8
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b086      	sub	sp, #24
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d370:	2300      	movs	r3, #0
 800d372:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d101      	bne.n	800d382 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d37e:	2302      	movs	r3, #2
 800d380:	e0ae      	b.n	800d4e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	2201      	movs	r2, #1
 800d386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2b0c      	cmp	r3, #12
 800d38e:	f200 809f 	bhi.w	800d4d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d392:	a201      	add	r2, pc, #4	; (adr r2, 800d398 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d398:	0800d3cd 	.word	0x0800d3cd
 800d39c:	0800d4d1 	.word	0x0800d4d1
 800d3a0:	0800d4d1 	.word	0x0800d4d1
 800d3a4:	0800d4d1 	.word	0x0800d4d1
 800d3a8:	0800d40d 	.word	0x0800d40d
 800d3ac:	0800d4d1 	.word	0x0800d4d1
 800d3b0:	0800d4d1 	.word	0x0800d4d1
 800d3b4:	0800d4d1 	.word	0x0800d4d1
 800d3b8:	0800d44f 	.word	0x0800d44f
 800d3bc:	0800d4d1 	.word	0x0800d4d1
 800d3c0:	0800d4d1 	.word	0x0800d4d1
 800d3c4:	0800d4d1 	.word	0x0800d4d1
 800d3c8:	0800d48f 	.word	0x0800d48f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	68b9      	ldr	r1, [r7, #8]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f000 fa18 	bl	800d808 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	699a      	ldr	r2, [r3, #24]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f042 0208 	orr.w	r2, r2, #8
 800d3e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	699a      	ldr	r2, [r3, #24]
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f022 0204 	bic.w	r2, r2, #4
 800d3f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	6999      	ldr	r1, [r3, #24]
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	691a      	ldr	r2, [r3, #16]
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	430a      	orrs	r2, r1
 800d408:	619a      	str	r2, [r3, #24]
      break;
 800d40a:	e064      	b.n	800d4d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	68b9      	ldr	r1, [r7, #8]
 800d412:	4618      	mov	r0, r3
 800d414:	f000 fa68 	bl	800d8e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	699a      	ldr	r2, [r3, #24]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	699a      	ldr	r2, [r3, #24]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	6999      	ldr	r1, [r3, #24]
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	691b      	ldr	r3, [r3, #16]
 800d442:	021a      	lsls	r2, r3, #8
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	430a      	orrs	r2, r1
 800d44a:	619a      	str	r2, [r3, #24]
      break;
 800d44c:	e043      	b.n	800d4d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	68b9      	ldr	r1, [r7, #8]
 800d454:	4618      	mov	r0, r3
 800d456:	f000 fabd 	bl	800d9d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	69da      	ldr	r2, [r3, #28]
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f042 0208 	orr.w	r2, r2, #8
 800d468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	69da      	ldr	r2, [r3, #28]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f022 0204 	bic.w	r2, r2, #4
 800d478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	69d9      	ldr	r1, [r3, #28]
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	691a      	ldr	r2, [r3, #16]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	430a      	orrs	r2, r1
 800d48a:	61da      	str	r2, [r3, #28]
      break;
 800d48c:	e023      	b.n	800d4d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	68b9      	ldr	r1, [r7, #8]
 800d494:	4618      	mov	r0, r3
 800d496:	f000 fb11 	bl	800dabc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	69da      	ldr	r2, [r3, #28]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	69da      	ldr	r2, [r3, #28]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	69d9      	ldr	r1, [r3, #28]
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	691b      	ldr	r3, [r3, #16]
 800d4c4:	021a      	lsls	r2, r3, #8
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	430a      	orrs	r2, r1
 800d4cc:	61da      	str	r2, [r3, #28]
      break;
 800d4ce:	e002      	b.n	800d4d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	75fb      	strb	r3, [r7, #23]
      break;
 800d4d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d4de:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3718      	adds	r7, #24
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b084      	sub	sp, #16
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d101      	bne.n	800d504 <HAL_TIM_ConfigClockSource+0x1c>
 800d500:	2302      	movs	r3, #2
 800d502:	e0b4      	b.n	800d66e <HAL_TIM_ConfigClockSource+0x186>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2201      	movs	r2, #1
 800d508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2202      	movs	r2, #2
 800d510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	689b      	ldr	r3, [r3, #8]
 800d51a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d52a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	68ba      	ldr	r2, [r7, #8]
 800d532:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d53c:	d03e      	beq.n	800d5bc <HAL_TIM_ConfigClockSource+0xd4>
 800d53e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d542:	f200 8087 	bhi.w	800d654 <HAL_TIM_ConfigClockSource+0x16c>
 800d546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d54a:	f000 8086 	beq.w	800d65a <HAL_TIM_ConfigClockSource+0x172>
 800d54e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d552:	d87f      	bhi.n	800d654 <HAL_TIM_ConfigClockSource+0x16c>
 800d554:	2b70      	cmp	r3, #112	; 0x70
 800d556:	d01a      	beq.n	800d58e <HAL_TIM_ConfigClockSource+0xa6>
 800d558:	2b70      	cmp	r3, #112	; 0x70
 800d55a:	d87b      	bhi.n	800d654 <HAL_TIM_ConfigClockSource+0x16c>
 800d55c:	2b60      	cmp	r3, #96	; 0x60
 800d55e:	d050      	beq.n	800d602 <HAL_TIM_ConfigClockSource+0x11a>
 800d560:	2b60      	cmp	r3, #96	; 0x60
 800d562:	d877      	bhi.n	800d654 <HAL_TIM_ConfigClockSource+0x16c>
 800d564:	2b50      	cmp	r3, #80	; 0x50
 800d566:	d03c      	beq.n	800d5e2 <HAL_TIM_ConfigClockSource+0xfa>
 800d568:	2b50      	cmp	r3, #80	; 0x50
 800d56a:	d873      	bhi.n	800d654 <HAL_TIM_ConfigClockSource+0x16c>
 800d56c:	2b40      	cmp	r3, #64	; 0x40
 800d56e:	d058      	beq.n	800d622 <HAL_TIM_ConfigClockSource+0x13a>
 800d570:	2b40      	cmp	r3, #64	; 0x40
 800d572:	d86f      	bhi.n	800d654 <HAL_TIM_ConfigClockSource+0x16c>
 800d574:	2b30      	cmp	r3, #48	; 0x30
 800d576:	d064      	beq.n	800d642 <HAL_TIM_ConfigClockSource+0x15a>
 800d578:	2b30      	cmp	r3, #48	; 0x30
 800d57a:	d86b      	bhi.n	800d654 <HAL_TIM_ConfigClockSource+0x16c>
 800d57c:	2b20      	cmp	r3, #32
 800d57e:	d060      	beq.n	800d642 <HAL_TIM_ConfigClockSource+0x15a>
 800d580:	2b20      	cmp	r3, #32
 800d582:	d867      	bhi.n	800d654 <HAL_TIM_ConfigClockSource+0x16c>
 800d584:	2b00      	cmp	r3, #0
 800d586:	d05c      	beq.n	800d642 <HAL_TIM_ConfigClockSource+0x15a>
 800d588:	2b10      	cmp	r3, #16
 800d58a:	d05a      	beq.n	800d642 <HAL_TIM_ConfigClockSource+0x15a>
 800d58c:	e062      	b.n	800d654 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6818      	ldr	r0, [r3, #0]
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	6899      	ldr	r1, [r3, #8]
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	685a      	ldr	r2, [r3, #4]
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	68db      	ldr	r3, [r3, #12]
 800d59e:	f000 fb5d 	bl	800dc5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	689b      	ldr	r3, [r3, #8]
 800d5a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d5b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	68ba      	ldr	r2, [r7, #8]
 800d5b8:	609a      	str	r2, [r3, #8]
      break;
 800d5ba:	e04f      	b.n	800d65c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6818      	ldr	r0, [r3, #0]
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	6899      	ldr	r1, [r3, #8]
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	685a      	ldr	r2, [r3, #4]
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	68db      	ldr	r3, [r3, #12]
 800d5cc:	f000 fb46 	bl	800dc5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	689a      	ldr	r2, [r3, #8]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d5de:	609a      	str	r2, [r3, #8]
      break;
 800d5e0:	e03c      	b.n	800d65c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6818      	ldr	r0, [r3, #0]
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	6859      	ldr	r1, [r3, #4]
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	68db      	ldr	r3, [r3, #12]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	f000 faba 	bl	800db68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2150      	movs	r1, #80	; 0x50
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f000 fb13 	bl	800dc26 <TIM_ITRx_SetConfig>
      break;
 800d600:	e02c      	b.n	800d65c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6818      	ldr	r0, [r3, #0]
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	6859      	ldr	r1, [r3, #4]
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	461a      	mov	r2, r3
 800d610:	f000 fad9 	bl	800dbc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	2160      	movs	r1, #96	; 0x60
 800d61a:	4618      	mov	r0, r3
 800d61c:	f000 fb03 	bl	800dc26 <TIM_ITRx_SetConfig>
      break;
 800d620:	e01c      	b.n	800d65c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6818      	ldr	r0, [r3, #0]
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	6859      	ldr	r1, [r3, #4]
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	68db      	ldr	r3, [r3, #12]
 800d62e:	461a      	mov	r2, r3
 800d630:	f000 fa9a 	bl	800db68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	2140      	movs	r1, #64	; 0x40
 800d63a:	4618      	mov	r0, r3
 800d63c:	f000 faf3 	bl	800dc26 <TIM_ITRx_SetConfig>
      break;
 800d640:	e00c      	b.n	800d65c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4619      	mov	r1, r3
 800d64c:	4610      	mov	r0, r2
 800d64e:	f000 faea 	bl	800dc26 <TIM_ITRx_SetConfig>
      break;
 800d652:	e003      	b.n	800d65c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d654:	2301      	movs	r3, #1
 800d656:	73fb      	strb	r3, [r7, #15]
      break;
 800d658:	e000      	b.n	800d65c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d65a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2201      	movs	r2, #1
 800d660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2200      	movs	r2, #0
 800d668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3710      	adds	r7, #16
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d676:	b480      	push	{r7}
 800d678:	b083      	sub	sp, #12
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d67e:	bf00      	nop
 800d680:	370c      	adds	r7, #12
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr

0800d68a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d68a:	b480      	push	{r7}
 800d68c:	b083      	sub	sp, #12
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d692:	bf00      	nop
 800d694:	370c      	adds	r7, #12
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr

0800d69e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d69e:	b480      	push	{r7}
 800d6a0:	b083      	sub	sp, #12
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d6a6:	bf00      	nop
 800d6a8:	370c      	adds	r7, #12
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr

0800d6b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d6b2:	b480      	push	{r7}
 800d6b4:	b083      	sub	sp, #12
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d6ba:	bf00      	nop
 800d6bc:	370c      	adds	r7, #12
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c4:	4770      	bx	lr
	...

0800d6c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b085      	sub	sp, #20
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	4a40      	ldr	r2, [pc, #256]	; (800d7dc <TIM_Base_SetConfig+0x114>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d013      	beq.n	800d708 <TIM_Base_SetConfig+0x40>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6e6:	d00f      	beq.n	800d708 <TIM_Base_SetConfig+0x40>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4a3d      	ldr	r2, [pc, #244]	; (800d7e0 <TIM_Base_SetConfig+0x118>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d00b      	beq.n	800d708 <TIM_Base_SetConfig+0x40>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	4a3c      	ldr	r2, [pc, #240]	; (800d7e4 <TIM_Base_SetConfig+0x11c>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d007      	beq.n	800d708 <TIM_Base_SetConfig+0x40>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	4a3b      	ldr	r2, [pc, #236]	; (800d7e8 <TIM_Base_SetConfig+0x120>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d003      	beq.n	800d708 <TIM_Base_SetConfig+0x40>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	4a3a      	ldr	r2, [pc, #232]	; (800d7ec <TIM_Base_SetConfig+0x124>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d108      	bne.n	800d71a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d70e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	68fa      	ldr	r2, [r7, #12]
 800d716:	4313      	orrs	r3, r2
 800d718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	4a2f      	ldr	r2, [pc, #188]	; (800d7dc <TIM_Base_SetConfig+0x114>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d02b      	beq.n	800d77a <TIM_Base_SetConfig+0xb2>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d728:	d027      	beq.n	800d77a <TIM_Base_SetConfig+0xb2>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	4a2c      	ldr	r2, [pc, #176]	; (800d7e0 <TIM_Base_SetConfig+0x118>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	d023      	beq.n	800d77a <TIM_Base_SetConfig+0xb2>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	4a2b      	ldr	r2, [pc, #172]	; (800d7e4 <TIM_Base_SetConfig+0x11c>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d01f      	beq.n	800d77a <TIM_Base_SetConfig+0xb2>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	4a2a      	ldr	r2, [pc, #168]	; (800d7e8 <TIM_Base_SetConfig+0x120>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d01b      	beq.n	800d77a <TIM_Base_SetConfig+0xb2>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	4a29      	ldr	r2, [pc, #164]	; (800d7ec <TIM_Base_SetConfig+0x124>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d017      	beq.n	800d77a <TIM_Base_SetConfig+0xb2>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	4a28      	ldr	r2, [pc, #160]	; (800d7f0 <TIM_Base_SetConfig+0x128>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	d013      	beq.n	800d77a <TIM_Base_SetConfig+0xb2>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	4a27      	ldr	r2, [pc, #156]	; (800d7f4 <TIM_Base_SetConfig+0x12c>)
 800d756:	4293      	cmp	r3, r2
 800d758:	d00f      	beq.n	800d77a <TIM_Base_SetConfig+0xb2>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	4a26      	ldr	r2, [pc, #152]	; (800d7f8 <TIM_Base_SetConfig+0x130>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d00b      	beq.n	800d77a <TIM_Base_SetConfig+0xb2>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	4a25      	ldr	r2, [pc, #148]	; (800d7fc <TIM_Base_SetConfig+0x134>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d007      	beq.n	800d77a <TIM_Base_SetConfig+0xb2>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	4a24      	ldr	r2, [pc, #144]	; (800d800 <TIM_Base_SetConfig+0x138>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d003      	beq.n	800d77a <TIM_Base_SetConfig+0xb2>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	4a23      	ldr	r2, [pc, #140]	; (800d804 <TIM_Base_SetConfig+0x13c>)
 800d776:	4293      	cmp	r3, r2
 800d778:	d108      	bne.n	800d78c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	68db      	ldr	r3, [r3, #12]
 800d786:	68fa      	ldr	r2, [r7, #12]
 800d788:	4313      	orrs	r3, r2
 800d78a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	695b      	ldr	r3, [r3, #20]
 800d796:	4313      	orrs	r3, r2
 800d798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	689a      	ldr	r2, [r3, #8]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	4a0a      	ldr	r2, [pc, #40]	; (800d7dc <TIM_Base_SetConfig+0x114>)
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d003      	beq.n	800d7c0 <TIM_Base_SetConfig+0xf8>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	4a0c      	ldr	r2, [pc, #48]	; (800d7ec <TIM_Base_SetConfig+0x124>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d103      	bne.n	800d7c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	691a      	ldr	r2, [r3, #16]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	615a      	str	r2, [r3, #20]
}
 800d7ce:	bf00      	nop
 800d7d0:	3714      	adds	r7, #20
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr
 800d7da:	bf00      	nop
 800d7dc:	40010000 	.word	0x40010000
 800d7e0:	40000400 	.word	0x40000400
 800d7e4:	40000800 	.word	0x40000800
 800d7e8:	40000c00 	.word	0x40000c00
 800d7ec:	40010400 	.word	0x40010400
 800d7f0:	40014000 	.word	0x40014000
 800d7f4:	40014400 	.word	0x40014400
 800d7f8:	40014800 	.word	0x40014800
 800d7fc:	40001800 	.word	0x40001800
 800d800:	40001c00 	.word	0x40001c00
 800d804:	40002000 	.word	0x40002000

0800d808 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d808:	b480      	push	{r7}
 800d80a:	b087      	sub	sp, #28
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6a1b      	ldr	r3, [r3, #32]
 800d816:	f023 0201 	bic.w	r2, r3, #1
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6a1b      	ldr	r3, [r3, #32]
 800d822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	699b      	ldr	r3, [r3, #24]
 800d82e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f023 0303 	bic.w	r3, r3, #3
 800d83e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	68fa      	ldr	r2, [r7, #12]
 800d846:	4313      	orrs	r3, r2
 800d848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	f023 0302 	bic.w	r3, r3, #2
 800d850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	689b      	ldr	r3, [r3, #8]
 800d856:	697a      	ldr	r2, [r7, #20]
 800d858:	4313      	orrs	r3, r2
 800d85a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	4a20      	ldr	r2, [pc, #128]	; (800d8e0 <TIM_OC1_SetConfig+0xd8>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d003      	beq.n	800d86c <TIM_OC1_SetConfig+0x64>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4a1f      	ldr	r2, [pc, #124]	; (800d8e4 <TIM_OC1_SetConfig+0xdc>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d10c      	bne.n	800d886 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	f023 0308 	bic.w	r3, r3, #8
 800d872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	68db      	ldr	r3, [r3, #12]
 800d878:	697a      	ldr	r2, [r7, #20]
 800d87a:	4313      	orrs	r3, r2
 800d87c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	f023 0304 	bic.w	r3, r3, #4
 800d884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	4a15      	ldr	r2, [pc, #84]	; (800d8e0 <TIM_OC1_SetConfig+0xd8>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d003      	beq.n	800d896 <TIM_OC1_SetConfig+0x8e>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	4a14      	ldr	r2, [pc, #80]	; (800d8e4 <TIM_OC1_SetConfig+0xdc>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d111      	bne.n	800d8ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d89c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d8a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	695b      	ldr	r3, [r3, #20]
 800d8aa:	693a      	ldr	r2, [r7, #16]
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	699b      	ldr	r3, [r3, #24]
 800d8b4:	693a      	ldr	r2, [r7, #16]
 800d8b6:	4313      	orrs	r3, r2
 800d8b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	693a      	ldr	r2, [r7, #16]
 800d8be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	68fa      	ldr	r2, [r7, #12]
 800d8c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	685a      	ldr	r2, [r3, #4]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	697a      	ldr	r2, [r7, #20]
 800d8d2:	621a      	str	r2, [r3, #32]
}
 800d8d4:	bf00      	nop
 800d8d6:	371c      	adds	r7, #28
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr
 800d8e0:	40010000 	.word	0x40010000
 800d8e4:	40010400 	.word	0x40010400

0800d8e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b087      	sub	sp, #28
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6a1b      	ldr	r3, [r3, #32]
 800d8f6:	f023 0210 	bic.w	r2, r3, #16
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6a1b      	ldr	r3, [r3, #32]
 800d902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	699b      	ldr	r3, [r3, #24]
 800d90e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d91e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	021b      	lsls	r3, r3, #8
 800d926:	68fa      	ldr	r2, [r7, #12]
 800d928:	4313      	orrs	r3, r2
 800d92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	f023 0320 	bic.w	r3, r3, #32
 800d932:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	689b      	ldr	r3, [r3, #8]
 800d938:	011b      	lsls	r3, r3, #4
 800d93a:	697a      	ldr	r2, [r7, #20]
 800d93c:	4313      	orrs	r3, r2
 800d93e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	4a22      	ldr	r2, [pc, #136]	; (800d9cc <TIM_OC2_SetConfig+0xe4>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d003      	beq.n	800d950 <TIM_OC2_SetConfig+0x68>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	4a21      	ldr	r2, [pc, #132]	; (800d9d0 <TIM_OC2_SetConfig+0xe8>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d10d      	bne.n	800d96c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	68db      	ldr	r3, [r3, #12]
 800d95c:	011b      	lsls	r3, r3, #4
 800d95e:	697a      	ldr	r2, [r7, #20]
 800d960:	4313      	orrs	r3, r2
 800d962:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d96a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	4a17      	ldr	r2, [pc, #92]	; (800d9cc <TIM_OC2_SetConfig+0xe4>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d003      	beq.n	800d97c <TIM_OC2_SetConfig+0x94>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	4a16      	ldr	r2, [pc, #88]	; (800d9d0 <TIM_OC2_SetConfig+0xe8>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d113      	bne.n	800d9a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d982:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d98a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	695b      	ldr	r3, [r3, #20]
 800d990:	009b      	lsls	r3, r3, #2
 800d992:	693a      	ldr	r2, [r7, #16]
 800d994:	4313      	orrs	r3, r2
 800d996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	699b      	ldr	r3, [r3, #24]
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	693a      	ldr	r2, [r7, #16]
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	693a      	ldr	r2, [r7, #16]
 800d9a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	68fa      	ldr	r2, [r7, #12]
 800d9ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	685a      	ldr	r2, [r3, #4]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	697a      	ldr	r2, [r7, #20]
 800d9bc:	621a      	str	r2, [r3, #32]
}
 800d9be:	bf00      	nop
 800d9c0:	371c      	adds	r7, #28
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr
 800d9ca:	bf00      	nop
 800d9cc:	40010000 	.word	0x40010000
 800d9d0:	40010400 	.word	0x40010400

0800d9d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b087      	sub	sp, #28
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6a1b      	ldr	r3, [r3, #32]
 800d9e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6a1b      	ldr	r3, [r3, #32]
 800d9ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	685b      	ldr	r3, [r3, #4]
 800d9f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	69db      	ldr	r3, [r3, #28]
 800d9fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f023 0303 	bic.w	r3, r3, #3
 800da0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	68fa      	ldr	r2, [r7, #12]
 800da12:	4313      	orrs	r3, r2
 800da14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	689b      	ldr	r3, [r3, #8]
 800da22:	021b      	lsls	r3, r3, #8
 800da24:	697a      	ldr	r2, [r7, #20]
 800da26:	4313      	orrs	r3, r2
 800da28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	4a21      	ldr	r2, [pc, #132]	; (800dab4 <TIM_OC3_SetConfig+0xe0>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d003      	beq.n	800da3a <TIM_OC3_SetConfig+0x66>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	4a20      	ldr	r2, [pc, #128]	; (800dab8 <TIM_OC3_SetConfig+0xe4>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d10d      	bne.n	800da56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	68db      	ldr	r3, [r3, #12]
 800da46:	021b      	lsls	r3, r3, #8
 800da48:	697a      	ldr	r2, [r7, #20]
 800da4a:	4313      	orrs	r3, r2
 800da4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	4a16      	ldr	r2, [pc, #88]	; (800dab4 <TIM_OC3_SetConfig+0xe0>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d003      	beq.n	800da66 <TIM_OC3_SetConfig+0x92>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	4a15      	ldr	r2, [pc, #84]	; (800dab8 <TIM_OC3_SetConfig+0xe4>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d113      	bne.n	800da8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800da74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	695b      	ldr	r3, [r3, #20]
 800da7a:	011b      	lsls	r3, r3, #4
 800da7c:	693a      	ldr	r2, [r7, #16]
 800da7e:	4313      	orrs	r3, r2
 800da80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	699b      	ldr	r3, [r3, #24]
 800da86:	011b      	lsls	r3, r3, #4
 800da88:	693a      	ldr	r2, [r7, #16]
 800da8a:	4313      	orrs	r3, r2
 800da8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	693a      	ldr	r2, [r7, #16]
 800da92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	68fa      	ldr	r2, [r7, #12]
 800da98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	685a      	ldr	r2, [r3, #4]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	697a      	ldr	r2, [r7, #20]
 800daa6:	621a      	str	r2, [r3, #32]
}
 800daa8:	bf00      	nop
 800daaa:	371c      	adds	r7, #28
 800daac:	46bd      	mov	sp, r7
 800daae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab2:	4770      	bx	lr
 800dab4:	40010000 	.word	0x40010000
 800dab8:	40010400 	.word	0x40010400

0800dabc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b087      	sub	sp, #28
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6a1b      	ldr	r3, [r3, #32]
 800daca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6a1b      	ldr	r3, [r3, #32]
 800dad6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	69db      	ldr	r3, [r3, #28]
 800dae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800daea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800daf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	021b      	lsls	r3, r3, #8
 800dafa:	68fa      	ldr	r2, [r7, #12]
 800dafc:	4313      	orrs	r3, r2
 800dafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	689b      	ldr	r3, [r3, #8]
 800db0c:	031b      	lsls	r3, r3, #12
 800db0e:	693a      	ldr	r2, [r7, #16]
 800db10:	4313      	orrs	r3, r2
 800db12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	4a12      	ldr	r2, [pc, #72]	; (800db60 <TIM_OC4_SetConfig+0xa4>)
 800db18:	4293      	cmp	r3, r2
 800db1a:	d003      	beq.n	800db24 <TIM_OC4_SetConfig+0x68>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	4a11      	ldr	r2, [pc, #68]	; (800db64 <TIM_OC4_SetConfig+0xa8>)
 800db20:	4293      	cmp	r3, r2
 800db22:	d109      	bne.n	800db38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800db2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	695b      	ldr	r3, [r3, #20]
 800db30:	019b      	lsls	r3, r3, #6
 800db32:	697a      	ldr	r2, [r7, #20]
 800db34:	4313      	orrs	r3, r2
 800db36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	697a      	ldr	r2, [r7, #20]
 800db3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	685a      	ldr	r2, [r3, #4]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	693a      	ldr	r2, [r7, #16]
 800db50:	621a      	str	r2, [r3, #32]
}
 800db52:	bf00      	nop
 800db54:	371c      	adds	r7, #28
 800db56:	46bd      	mov	sp, r7
 800db58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5c:	4770      	bx	lr
 800db5e:	bf00      	nop
 800db60:	40010000 	.word	0x40010000
 800db64:	40010400 	.word	0x40010400

0800db68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800db68:	b480      	push	{r7}
 800db6a:	b087      	sub	sp, #28
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	6a1b      	ldr	r3, [r3, #32]
 800db78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	6a1b      	ldr	r3, [r3, #32]
 800db7e:	f023 0201 	bic.w	r2, r3, #1
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	699b      	ldr	r3, [r3, #24]
 800db8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800db92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	011b      	lsls	r3, r3, #4
 800db98:	693a      	ldr	r2, [r7, #16]
 800db9a:	4313      	orrs	r3, r2
 800db9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	f023 030a 	bic.w	r3, r3, #10
 800dba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dba6:	697a      	ldr	r2, [r7, #20]
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	693a      	ldr	r2, [r7, #16]
 800dbb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	697a      	ldr	r2, [r7, #20]
 800dbb8:	621a      	str	r2, [r3, #32]
}
 800dbba:	bf00      	nop
 800dbbc:	371c      	adds	r7, #28
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc4:	4770      	bx	lr

0800dbc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dbc6:	b480      	push	{r7}
 800dbc8:	b087      	sub	sp, #28
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	60f8      	str	r0, [r7, #12]
 800dbce:	60b9      	str	r1, [r7, #8]
 800dbd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	6a1b      	ldr	r3, [r3, #32]
 800dbd6:	f023 0210 	bic.w	r2, r3, #16
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	699b      	ldr	r3, [r3, #24]
 800dbe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	6a1b      	ldr	r3, [r3, #32]
 800dbe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dbf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	031b      	lsls	r3, r3, #12
 800dbf6:	697a      	ldr	r2, [r7, #20]
 800dbf8:	4313      	orrs	r3, r2
 800dbfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dc02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	011b      	lsls	r3, r3, #4
 800dc08:	693a      	ldr	r2, [r7, #16]
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	697a      	ldr	r2, [r7, #20]
 800dc12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	693a      	ldr	r2, [r7, #16]
 800dc18:	621a      	str	r2, [r3, #32]
}
 800dc1a:	bf00      	nop
 800dc1c:	371c      	adds	r7, #28
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr

0800dc26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dc26:	b480      	push	{r7}
 800dc28:	b085      	sub	sp, #20
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
 800dc2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	689b      	ldr	r3, [r3, #8]
 800dc34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dc3e:	683a      	ldr	r2, [r7, #0]
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	4313      	orrs	r3, r2
 800dc44:	f043 0307 	orr.w	r3, r3, #7
 800dc48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	68fa      	ldr	r2, [r7, #12]
 800dc4e:	609a      	str	r2, [r3, #8]
}
 800dc50:	bf00      	nop
 800dc52:	3714      	adds	r7, #20
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr

0800dc5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b087      	sub	sp, #28
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	60b9      	str	r1, [r7, #8]
 800dc66:	607a      	str	r2, [r7, #4]
 800dc68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	689b      	ldr	r3, [r3, #8]
 800dc6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	021a      	lsls	r2, r3, #8
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	431a      	orrs	r2, r3
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	4313      	orrs	r3, r2
 800dc84:	697a      	ldr	r2, [r7, #20]
 800dc86:	4313      	orrs	r3, r2
 800dc88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	697a      	ldr	r2, [r7, #20]
 800dc8e:	609a      	str	r2, [r3, #8]
}
 800dc90:	bf00      	nop
 800dc92:	371c      	adds	r7, #28
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr

0800dc9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b087      	sub	sp, #28
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	f003 031f 	and.w	r3, r3, #31
 800dcae:	2201      	movs	r2, #1
 800dcb0:	fa02 f303 	lsl.w	r3, r2, r3
 800dcb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	6a1a      	ldr	r2, [r3, #32]
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	43db      	mvns	r3, r3
 800dcbe:	401a      	ands	r2, r3
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	6a1a      	ldr	r2, [r3, #32]
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	f003 031f 	and.w	r3, r3, #31
 800dcce:	6879      	ldr	r1, [r7, #4]
 800dcd0:	fa01 f303 	lsl.w	r3, r1, r3
 800dcd4:	431a      	orrs	r2, r3
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	621a      	str	r2, [r3, #32]
}
 800dcda:	bf00      	nop
 800dcdc:	371c      	adds	r7, #28
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr
	...

0800dce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b085      	sub	sp, #20
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d101      	bne.n	800dd00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dcfc:	2302      	movs	r3, #2
 800dcfe:	e05a      	b.n	800ddb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2201      	movs	r2, #1
 800dd04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2202      	movs	r2, #2
 800dd0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	689b      	ldr	r3, [r3, #8]
 800dd1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	68fa      	ldr	r2, [r7, #12]
 800dd38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	4a21      	ldr	r2, [pc, #132]	; (800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d022      	beq.n	800dd8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd4c:	d01d      	beq.n	800dd8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	4a1d      	ldr	r2, [pc, #116]	; (800ddc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d018      	beq.n	800dd8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4a1b      	ldr	r2, [pc, #108]	; (800ddcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d013      	beq.n	800dd8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	4a1a      	ldr	r2, [pc, #104]	; (800ddd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d00e      	beq.n	800dd8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	4a18      	ldr	r2, [pc, #96]	; (800ddd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d009      	beq.n	800dd8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4a17      	ldr	r2, [pc, #92]	; (800ddd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d004      	beq.n	800dd8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4a15      	ldr	r2, [pc, #84]	; (800dddc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d10c      	bne.n	800dda4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	68ba      	ldr	r2, [r7, #8]
 800dd98:	4313      	orrs	r3, r2
 800dd9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	68ba      	ldr	r2, [r7, #8]
 800dda2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2201      	movs	r2, #1
 800dda8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ddb4:	2300      	movs	r3, #0
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3714      	adds	r7, #20
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr
 800ddc2:	bf00      	nop
 800ddc4:	40010000 	.word	0x40010000
 800ddc8:	40000400 	.word	0x40000400
 800ddcc:	40000800 	.word	0x40000800
 800ddd0:	40000c00 	.word	0x40000c00
 800ddd4:	40010400 	.word	0x40010400
 800ddd8:	40014000 	.word	0x40014000
 800dddc:	40001800 	.word	0x40001800

0800dde0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b085      	sub	sp, #20
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ddea:	2300      	movs	r3, #0
 800ddec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	d101      	bne.n	800ddfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ddf8:	2302      	movs	r3, #2
 800ddfa:	e03d      	b.n	800de78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2201      	movs	r2, #1
 800de00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	68db      	ldr	r3, [r3, #12]
 800de0e:	4313      	orrs	r3, r2
 800de10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	689b      	ldr	r3, [r3, #8]
 800de1c:	4313      	orrs	r3, r2
 800de1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	685b      	ldr	r3, [r3, #4]
 800de2a:	4313      	orrs	r3, r2
 800de2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4313      	orrs	r3, r2
 800de3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	691b      	ldr	r3, [r3, #16]
 800de46:	4313      	orrs	r3, r2
 800de48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	695b      	ldr	r3, [r3, #20]
 800de54:	4313      	orrs	r3, r2
 800de56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	69db      	ldr	r3, [r3, #28]
 800de62:	4313      	orrs	r3, r2
 800de64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	68fa      	ldr	r2, [r7, #12]
 800de6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2200      	movs	r2, #0
 800de72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800de76:	2300      	movs	r3, #0
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3714      	adds	r7, #20
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800de84:	b480      	push	{r7}
 800de86:	b083      	sub	sp, #12
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800de8c:	bf00      	nop
 800de8e:	370c      	adds	r7, #12
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dea0:	bf00      	nop
 800dea2:	370c      	adds	r7, #12
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr

0800deac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d101      	bne.n	800debe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800deba:	2301      	movs	r3, #1
 800debc:	e03f      	b.n	800df3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d106      	bne.n	800ded8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2200      	movs	r2, #0
 800dece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f7f9 ff54 	bl	8007d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2224      	movs	r2, #36	; 0x24
 800dedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	68da      	ldr	r2, [r3, #12]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800deee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f001 f8b7 	bl	800f064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	691a      	ldr	r2, [r3, #16]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800df04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	695a      	ldr	r2, [r3, #20]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800df14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	68da      	ldr	r2, [r3, #12]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800df24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2200      	movs	r2, #0
 800df2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2220      	movs	r2, #32
 800df30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2220      	movs	r2, #32
 800df38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3708      	adds	r7, #8
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}

0800df46 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800df46:	b580      	push	{r7, lr}
 800df48:	b082      	sub	sp, #8
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d101      	bne.n	800df58 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800df54:	2301      	movs	r3, #1
 800df56:	e021      	b.n	800df9c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2224      	movs	r2, #36	; 0x24
 800df5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	68da      	ldr	r2, [r3, #12]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800df6e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f7fa f8bb 	bl	80080ec <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2200      	movs	r2, #0
 800df7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2200      	movs	r2, #0
 800df80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2200      	movs	r2, #0
 800df88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2200      	movs	r2, #0
 800df96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800df9a:	2300      	movs	r3, #0
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3708      	adds	r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b08a      	sub	sp, #40	; 0x28
 800dfa8:	af02      	add	r7, sp, #8
 800dfaa:	60f8      	str	r0, [r7, #12]
 800dfac:	60b9      	str	r1, [r7, #8]
 800dfae:	603b      	str	r3, [r7, #0]
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	2b20      	cmp	r3, #32
 800dfc2:	d17c      	bne.n	800e0be <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d002      	beq.n	800dfd0 <HAL_UART_Transmit+0x2c>
 800dfca:	88fb      	ldrh	r3, [r7, #6]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d101      	bne.n	800dfd4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	e075      	b.n	800e0c0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d101      	bne.n	800dfe2 <HAL_UART_Transmit+0x3e>
 800dfde:	2302      	movs	r3, #2
 800dfe0:	e06e      	b.n	800e0c0 <HAL_UART_Transmit+0x11c>
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2200      	movs	r2, #0
 800dfee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2221      	movs	r2, #33	; 0x21
 800dff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dff8:	f7fa f96e 	bl	80082d8 <HAL_GetTick>
 800dffc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	88fa      	ldrh	r2, [r7, #6]
 800e002:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	88fa      	ldrh	r2, [r7, #6]
 800e008:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	689b      	ldr	r3, [r3, #8]
 800e00e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e012:	d108      	bne.n	800e026 <HAL_UART_Transmit+0x82>
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	691b      	ldr	r3, [r3, #16]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d104      	bne.n	800e026 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800e01c:	2300      	movs	r3, #0
 800e01e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	61bb      	str	r3, [r7, #24]
 800e024:	e003      	b.n	800e02e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e02a:	2300      	movs	r3, #0
 800e02c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2200      	movs	r2, #0
 800e032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800e036:	e02a      	b.n	800e08e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	9300      	str	r3, [sp, #0]
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	2200      	movs	r2, #0
 800e040:	2180      	movs	r1, #128	; 0x80
 800e042:	68f8      	ldr	r0, [r7, #12]
 800e044:	f000 fd3f 	bl	800eac6 <UART_WaitOnFlagUntilTimeout>
 800e048:	4603      	mov	r3, r0
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d001      	beq.n	800e052 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800e04e:	2303      	movs	r3, #3
 800e050:	e036      	b.n	800e0c0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800e052:	69fb      	ldr	r3, [r7, #28]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d10b      	bne.n	800e070 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e058:	69bb      	ldr	r3, [r7, #24]
 800e05a:	881b      	ldrh	r3, [r3, #0]
 800e05c:	461a      	mov	r2, r3
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e066:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e068:	69bb      	ldr	r3, [r7, #24]
 800e06a:	3302      	adds	r3, #2
 800e06c:	61bb      	str	r3, [r7, #24]
 800e06e:	e007      	b.n	800e080 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	781a      	ldrb	r2, [r3, #0]
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	3301      	adds	r3, #1
 800e07e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e084:	b29b      	uxth	r3, r3
 800e086:	3b01      	subs	r3, #1
 800e088:	b29a      	uxth	r2, r3
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e092:	b29b      	uxth	r3, r3
 800e094:	2b00      	cmp	r3, #0
 800e096:	d1cf      	bne.n	800e038 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	9300      	str	r3, [sp, #0]
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	2140      	movs	r1, #64	; 0x40
 800e0a2:	68f8      	ldr	r0, [r7, #12]
 800e0a4:	f000 fd0f 	bl	800eac6 <UART_WaitOnFlagUntilTimeout>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d001      	beq.n	800e0b2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800e0ae:	2303      	movs	r3, #3
 800e0b0:	e006      	b.n	800e0c0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2220      	movs	r2, #32
 800e0b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	e000      	b.n	800e0c0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800e0be:	2302      	movs	r3, #2
  }
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3720      	adds	r7, #32
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b085      	sub	sp, #20
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	4613      	mov	r3, r2
 800e0d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	2b20      	cmp	r3, #32
 800e0e0:	d130      	bne.n	800e144 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d002      	beq.n	800e0ee <HAL_UART_Transmit_IT+0x26>
 800e0e8:	88fb      	ldrh	r3, [r7, #6]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d101      	bne.n	800e0f2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	e029      	b.n	800e146 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d101      	bne.n	800e100 <HAL_UART_Transmit_IT+0x38>
 800e0fc:	2302      	movs	r3, #2
 800e0fe:	e022      	b.n	800e146 <HAL_UART_Transmit_IT+0x7e>
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	2201      	movs	r2, #1
 800e104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	68ba      	ldr	r2, [r7, #8]
 800e10c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	88fa      	ldrh	r2, [r7, #6]
 800e112:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	88fa      	ldrh	r2, [r7, #6]
 800e118:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2200      	movs	r2, #0
 800e11e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2221      	movs	r2, #33	; 0x21
 800e124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	2200      	movs	r2, #0
 800e12c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	68da      	ldr	r2, [r3, #12]
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e13e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800e140:	2300      	movs	r3, #0
 800e142:	e000      	b.n	800e146 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800e144:	2302      	movs	r3, #2
  }
}
 800e146:	4618      	mov	r0, r3
 800e148:	3714      	adds	r7, #20
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr
	...

0800e154 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b08c      	sub	sp, #48	; 0x30
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	4613      	mov	r3, r2
 800e160:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	2b20      	cmp	r3, #32
 800e16c:	d165      	bne.n	800e23a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d002      	beq.n	800e17a <HAL_UART_Transmit_DMA+0x26>
 800e174:	88fb      	ldrh	r3, [r7, #6]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d101      	bne.n	800e17e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e17a:	2301      	movs	r3, #1
 800e17c:	e05e      	b.n	800e23c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e184:	2b01      	cmp	r3, #1
 800e186:	d101      	bne.n	800e18c <HAL_UART_Transmit_DMA+0x38>
 800e188:	2302      	movs	r3, #2
 800e18a:	e057      	b.n	800e23c <HAL_UART_Transmit_DMA+0xe8>
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2201      	movs	r2, #1
 800e190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800e194:	68ba      	ldr	r2, [r7, #8]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	88fa      	ldrh	r2, [r7, #6]
 800e19e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	88fa      	ldrh	r2, [r7, #6]
 800e1a4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2221      	movs	r2, #33	; 0x21
 800e1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1b8:	4a22      	ldr	r2, [pc, #136]	; (800e244 <HAL_UART_Transmit_DMA+0xf0>)
 800e1ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1c0:	4a21      	ldr	r2, [pc, #132]	; (800e248 <HAL_UART_Transmit_DMA+0xf4>)
 800e1c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1c8:	4a20      	ldr	r2, [pc, #128]	; (800e24c <HAL_UART_Transmit_DMA+0xf8>)
 800e1ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800e1d4:	f107 0308 	add.w	r3, r7, #8
 800e1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e0:	6819      	ldr	r1, [r3, #0]
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	3304      	adds	r3, #4
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	88fb      	ldrh	r3, [r7, #6]
 800e1ec:	f7fa fd66 	bl	8008cbc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e1f8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	3314      	adds	r3, #20
 800e208:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e20a:	69bb      	ldr	r3, [r7, #24]
 800e20c:	e853 3f00 	ldrex	r3, [r3]
 800e210:	617b      	str	r3, [r7, #20]
   return(result);
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e218:	62bb      	str	r3, [r7, #40]	; 0x28
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	3314      	adds	r3, #20
 800e220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e222:	627a      	str	r2, [r7, #36]	; 0x24
 800e224:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e226:	6a39      	ldr	r1, [r7, #32]
 800e228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e22a:	e841 2300 	strex	r3, r2, [r1]
 800e22e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d1e5      	bne.n	800e202 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800e236:	2300      	movs	r3, #0
 800e238:	e000      	b.n	800e23c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800e23a:	2302      	movs	r3, #2
  }
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3730      	adds	r7, #48	; 0x30
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}
 800e244:	0800e821 	.word	0x0800e821
 800e248:	0800e8bb 	.word	0x0800e8bb
 800e24c:	0800ea33 	.word	0x0800ea33

0800e250 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af00      	add	r7, sp, #0
 800e256:	60f8      	str	r0, [r7, #12]
 800e258:	60b9      	str	r1, [r7, #8]
 800e25a:	4613      	mov	r3, r2
 800e25c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e264:	b2db      	uxtb	r3, r3
 800e266:	2b20      	cmp	r3, #32
 800e268:	d11d      	bne.n	800e2a6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d002      	beq.n	800e276 <HAL_UART_Receive_DMA+0x26>
 800e270:	88fb      	ldrh	r3, [r7, #6]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d101      	bne.n	800e27a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800e276:	2301      	movs	r3, #1
 800e278:	e016      	b.n	800e2a8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e280:	2b01      	cmp	r3, #1
 800e282:	d101      	bne.n	800e288 <HAL_UART_Receive_DMA+0x38>
 800e284:	2302      	movs	r3, #2
 800e286:	e00f      	b.n	800e2a8 <HAL_UART_Receive_DMA+0x58>
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2201      	movs	r2, #1
 800e28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2200      	movs	r2, #0
 800e294:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e296:	88fb      	ldrh	r3, [r7, #6]
 800e298:	461a      	mov	r2, r3
 800e29a:	68b9      	ldr	r1, [r7, #8]
 800e29c:	68f8      	ldr	r0, [r7, #12]
 800e29e:	f000 fc81 	bl	800eba4 <UART_Start_Receive_DMA>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	e000      	b.n	800e2a8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800e2a6:	2302      	movs	r3, #2
  }
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b0ba      	sub	sp, #232	; 0xe8
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	68db      	ldr	r3, [r3, #12]
 800e2c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	695b      	ldr	r3, [r3, #20]
 800e2d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e2e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2e6:	f003 030f 	and.w	r3, r3, #15
 800e2ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800e2ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d10f      	bne.n	800e316 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2fa:	f003 0320 	and.w	r3, r3, #32
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d009      	beq.n	800e316 <HAL_UART_IRQHandler+0x66>
 800e302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e306:	f003 0320 	and.w	r3, r3, #32
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d003      	beq.n	800e316 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f000 fded 	bl	800eeee <UART_Receive_IT>
      return;
 800e314:	e256      	b.n	800e7c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800e316:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	f000 80de 	beq.w	800e4dc <HAL_UART_IRQHandler+0x22c>
 800e320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e324:	f003 0301 	and.w	r3, r3, #1
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d106      	bne.n	800e33a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e32c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e330:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e334:	2b00      	cmp	r3, #0
 800e336:	f000 80d1 	beq.w	800e4dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e33a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e33e:	f003 0301 	and.w	r3, r3, #1
 800e342:	2b00      	cmp	r3, #0
 800e344:	d00b      	beq.n	800e35e <HAL_UART_IRQHandler+0xae>
 800e346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e34a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d005      	beq.n	800e35e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e356:	f043 0201 	orr.w	r2, r3, #1
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e35e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e362:	f003 0304 	and.w	r3, r3, #4
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00b      	beq.n	800e382 <HAL_UART_IRQHandler+0xd2>
 800e36a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e36e:	f003 0301 	and.w	r3, r3, #1
 800e372:	2b00      	cmp	r3, #0
 800e374:	d005      	beq.n	800e382 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e37a:	f043 0202 	orr.w	r2, r3, #2
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e386:	f003 0302 	and.w	r3, r3, #2
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00b      	beq.n	800e3a6 <HAL_UART_IRQHandler+0xf6>
 800e38e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e392:	f003 0301 	and.w	r3, r3, #1
 800e396:	2b00      	cmp	r3, #0
 800e398:	d005      	beq.n	800e3a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e39e:	f043 0204 	orr.w	r2, r3, #4
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e3a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3aa:	f003 0308 	and.w	r3, r3, #8
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d011      	beq.n	800e3d6 <HAL_UART_IRQHandler+0x126>
 800e3b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3b6:	f003 0320 	and.w	r3, r3, #32
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d105      	bne.n	800e3ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e3be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e3c2:	f003 0301 	and.w	r3, r3, #1
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d005      	beq.n	800e3d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3ce:	f043 0208 	orr.w	r2, r3, #8
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	f000 81ed 	beq.w	800e7ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e3e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3e4:	f003 0320 	and.w	r3, r3, #32
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d008      	beq.n	800e3fe <HAL_UART_IRQHandler+0x14e>
 800e3ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3f0:	f003 0320 	and.w	r3, r3, #32
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d002      	beq.n	800e3fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f000 fd78 	bl	800eeee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	695b      	ldr	r3, [r3, #20]
 800e404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e408:	2b40      	cmp	r3, #64	; 0x40
 800e40a:	bf0c      	ite	eq
 800e40c:	2301      	moveq	r3, #1
 800e40e:	2300      	movne	r3, #0
 800e410:	b2db      	uxtb	r3, r3
 800e412:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e41a:	f003 0308 	and.w	r3, r3, #8
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d103      	bne.n	800e42a <HAL_UART_IRQHandler+0x17a>
 800e422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e426:	2b00      	cmp	r3, #0
 800e428:	d04f      	beq.n	800e4ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f000 fc80 	bl	800ed30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	695b      	ldr	r3, [r3, #20]
 800e436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e43a:	2b40      	cmp	r3, #64	; 0x40
 800e43c:	d141      	bne.n	800e4c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	3314      	adds	r3, #20
 800e444:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e448:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e44c:	e853 3f00 	ldrex	r3, [r3]
 800e450:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e454:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e45c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	3314      	adds	r3, #20
 800e466:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e46a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e46e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e472:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e476:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e47a:	e841 2300 	strex	r3, r2, [r1]
 800e47e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e486:	2b00      	cmp	r3, #0
 800e488:	d1d9      	bne.n	800e43e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d013      	beq.n	800e4ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e496:	4a7d      	ldr	r2, [pc, #500]	; (800e68c <HAL_UART_IRQHandler+0x3dc>)
 800e498:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7fa fcd4 	bl	8008e4c <HAL_DMA_Abort_IT>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d016      	beq.n	800e4d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e4b4:	4610      	mov	r0, r2
 800e4b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4b8:	e00e      	b.n	800e4d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f7f7 f82c 	bl	8005518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4c0:	e00a      	b.n	800e4d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f7f7 f828 	bl	8005518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4c8:	e006      	b.n	800e4d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f7f7 f824 	bl	8005518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800e4d6:	e170      	b.n	800e7ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4d8:	bf00      	nop
    return;
 800e4da:	e16e      	b.n	800e7ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4e0:	2b01      	cmp	r3, #1
 800e4e2:	f040 814a 	bne.w	800e77a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e4e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4ea:	f003 0310 	and.w	r3, r3, #16
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	f000 8143 	beq.w	800e77a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800e4f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4f8:	f003 0310 	and.w	r3, r3, #16
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	f000 813c 	beq.w	800e77a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e502:	2300      	movs	r3, #0
 800e504:	60bb      	str	r3, [r7, #8]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	60bb      	str	r3, [r7, #8]
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	60bb      	str	r3, [r7, #8]
 800e516:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	695b      	ldr	r3, [r3, #20]
 800e51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e522:	2b40      	cmp	r3, #64	; 0x40
 800e524:	f040 80b4 	bne.w	800e690 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e534:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e538:	2b00      	cmp	r3, #0
 800e53a:	f000 8140 	beq.w	800e7be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e542:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e546:	429a      	cmp	r2, r3
 800e548:	f080 8139 	bcs.w	800e7be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e552:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e558:	69db      	ldr	r3, [r3, #28]
 800e55a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e55e:	f000 8088 	beq.w	800e672 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	330c      	adds	r3, #12
 800e568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e56c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e570:	e853 3f00 	ldrex	r3, [r3]
 800e574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e578:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e57c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	330c      	adds	r3, #12
 800e58a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e58e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e592:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e596:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e59a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e59e:	e841 2300 	strex	r3, r2, [r1]
 800e5a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e5a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d1d9      	bne.n	800e562 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	3314      	adds	r3, #20
 800e5b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e5b8:	e853 3f00 	ldrex	r3, [r3]
 800e5bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e5be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e5c0:	f023 0301 	bic.w	r3, r3, #1
 800e5c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	3314      	adds	r3, #20
 800e5ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e5d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e5d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e5da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e5de:	e841 2300 	strex	r3, r2, [r1]
 800e5e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e5e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d1e1      	bne.n	800e5ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	3314      	adds	r3, #20
 800e5f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5f4:	e853 3f00 	ldrex	r3, [r3]
 800e5f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e5fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e600:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	3314      	adds	r3, #20
 800e60a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e60e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e610:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e612:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e614:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e616:	e841 2300 	strex	r3, r2, [r1]
 800e61a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e61c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d1e3      	bne.n	800e5ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2220      	movs	r2, #32
 800e626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2200      	movs	r2, #0
 800e62e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	330c      	adds	r3, #12
 800e636:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e63a:	e853 3f00 	ldrex	r3, [r3]
 800e63e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e642:	f023 0310 	bic.w	r3, r3, #16
 800e646:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	330c      	adds	r3, #12
 800e650:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e654:	65ba      	str	r2, [r7, #88]	; 0x58
 800e656:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e658:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e65a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e65c:	e841 2300 	strex	r3, r2, [r1]
 800e660:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e664:	2b00      	cmp	r3, #0
 800e666:	d1e3      	bne.n	800e630 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7fa fb7d 	bl	8008d6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	1ad3      	subs	r3, r2, r3
 800e67e:	b29b      	uxth	r3, r3
 800e680:	4619      	mov	r1, r3
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 f8c0 	bl	800e808 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e688:	e099      	b.n	800e7be <HAL_UART_IRQHandler+0x50e>
 800e68a:	bf00      	nop
 800e68c:	0800edf7 	.word	0x0800edf7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e698:	b29b      	uxth	r3, r3
 800e69a:	1ad3      	subs	r3, r2, r3
 800e69c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	f000 808b 	beq.w	800e7c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800e6ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f000 8086 	beq.w	800e7c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	330c      	adds	r3, #12
 800e6bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c0:	e853 3f00 	ldrex	r3, [r3]
 800e6c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e6cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	330c      	adds	r3, #12
 800e6d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e6da:	647a      	str	r2, [r7, #68]	; 0x44
 800e6dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e6e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6e2:	e841 2300 	strex	r3, r2, [r1]
 800e6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d1e3      	bne.n	800e6b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	3314      	adds	r3, #20
 800e6f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f8:	e853 3f00 	ldrex	r3, [r3]
 800e6fc:	623b      	str	r3, [r7, #32]
   return(result);
 800e6fe:	6a3b      	ldr	r3, [r7, #32]
 800e700:	f023 0301 	bic.w	r3, r3, #1
 800e704:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	3314      	adds	r3, #20
 800e70e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e712:	633a      	str	r2, [r7, #48]	; 0x30
 800e714:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e71a:	e841 2300 	strex	r3, r2, [r1]
 800e71e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e722:	2b00      	cmp	r3, #0
 800e724:	d1e3      	bne.n	800e6ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2220      	movs	r2, #32
 800e72a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2200      	movs	r2, #0
 800e732:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	330c      	adds	r3, #12
 800e73a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	e853 3f00 	ldrex	r3, [r3]
 800e742:	60fb      	str	r3, [r7, #12]
   return(result);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	f023 0310 	bic.w	r3, r3, #16
 800e74a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	330c      	adds	r3, #12
 800e754:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e758:	61fa      	str	r2, [r7, #28]
 800e75a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e75c:	69b9      	ldr	r1, [r7, #24]
 800e75e:	69fa      	ldr	r2, [r7, #28]
 800e760:	e841 2300 	strex	r3, r2, [r1]
 800e764:	617b      	str	r3, [r7, #20]
   return(result);
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d1e3      	bne.n	800e734 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e76c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e770:	4619      	mov	r1, r3
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f000 f848 	bl	800e808 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e778:	e023      	b.n	800e7c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e77a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e77e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e782:	2b00      	cmp	r3, #0
 800e784:	d009      	beq.n	800e79a <HAL_UART_IRQHandler+0x4ea>
 800e786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e78a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d003      	beq.n	800e79a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 fb43 	bl	800ee1e <UART_Transmit_IT>
    return;
 800e798:	e014      	b.n	800e7c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e79a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e79e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d00e      	beq.n	800e7c4 <HAL_UART_IRQHandler+0x514>
 800e7a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d008      	beq.n	800e7c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 fb83 	bl	800eebe <UART_EndTransmit_IT>
    return;
 800e7b8:	e004      	b.n	800e7c4 <HAL_UART_IRQHandler+0x514>
    return;
 800e7ba:	bf00      	nop
 800e7bc:	e002      	b.n	800e7c4 <HAL_UART_IRQHandler+0x514>
      return;
 800e7be:	bf00      	nop
 800e7c0:	e000      	b.n	800e7c4 <HAL_UART_IRQHandler+0x514>
      return;
 800e7c2:	bf00      	nop
  }
}
 800e7c4:	37e8      	adds	r7, #232	; 0xe8
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop

0800e7cc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e7d4:	bf00      	nop
 800e7d6:	370c      	adds	r7, #12
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e7e8:	bf00      	nop
 800e7ea:	370c      	adds	r7, #12
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800e7fc:	bf00      	nop
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e808:	b480      	push	{r7}
 800e80a:	b083      	sub	sp, #12
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	460b      	mov	r3, r1
 800e812:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e814:	bf00      	nop
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b090      	sub	sp, #64	; 0x40
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e82c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d137      	bne.n	800e8ac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800e83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e83e:	2200      	movs	r2, #0
 800e840:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	3314      	adds	r3, #20
 800e848:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84c:	e853 3f00 	ldrex	r3, [r3]
 800e850:	623b      	str	r3, [r7, #32]
   return(result);
 800e852:	6a3b      	ldr	r3, [r7, #32]
 800e854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e858:	63bb      	str	r3, [r7, #56]	; 0x38
 800e85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	3314      	adds	r3, #20
 800e860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e862:	633a      	str	r2, [r7, #48]	; 0x30
 800e864:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e86a:	e841 2300 	strex	r3, r2, [r1]
 800e86e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e872:	2b00      	cmp	r3, #0
 800e874:	d1e5      	bne.n	800e842 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	330c      	adds	r3, #12
 800e87c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	e853 3f00 	ldrex	r3, [r3]
 800e884:	60fb      	str	r3, [r7, #12]
   return(result);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e88c:	637b      	str	r3, [r7, #52]	; 0x34
 800e88e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	330c      	adds	r3, #12
 800e894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e896:	61fa      	str	r2, [r7, #28]
 800e898:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89a:	69b9      	ldr	r1, [r7, #24]
 800e89c:	69fa      	ldr	r2, [r7, #28]
 800e89e:	e841 2300 	strex	r3, r2, [r1]
 800e8a2:	617b      	str	r3, [r7, #20]
   return(result);
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d1e5      	bne.n	800e876 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e8aa:	e002      	b.n	800e8b2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800e8ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e8ae:	f7f6 fe21 	bl	80054f4 <HAL_UART_TxCpltCallback>
}
 800e8b2:	bf00      	nop
 800e8b4:	3740      	adds	r7, #64	; 0x40
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}

0800e8ba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e8ba:	b580      	push	{r7, lr}
 800e8bc:	b084      	sub	sp, #16
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e8c8:	68f8      	ldr	r0, [r7, #12]
 800e8ca:	f7ff ff7f 	bl	800e7cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e8ce:	bf00      	nop
 800e8d0:	3710      	adds	r7, #16
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e8d6:	b580      	push	{r7, lr}
 800e8d8:	b09c      	sub	sp, #112	; 0x70
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d172      	bne.n	800e9d8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800e8f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e8f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	330c      	adds	r3, #12
 800e8fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e902:	e853 3f00 	ldrex	r3, [r3]
 800e906:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e90a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e90e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	330c      	adds	r3, #12
 800e916:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e918:	65ba      	str	r2, [r7, #88]	; 0x58
 800e91a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e91c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e91e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e920:	e841 2300 	strex	r3, r2, [r1]
 800e924:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d1e5      	bne.n	800e8f8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e92c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	3314      	adds	r3, #20
 800e932:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e936:	e853 3f00 	ldrex	r3, [r3]
 800e93a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e93c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e93e:	f023 0301 	bic.w	r3, r3, #1
 800e942:	667b      	str	r3, [r7, #100]	; 0x64
 800e944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	3314      	adds	r3, #20
 800e94a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e94c:	647a      	str	r2, [r7, #68]	; 0x44
 800e94e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e950:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e952:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e954:	e841 2300 	strex	r3, r2, [r1]
 800e958:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d1e5      	bne.n	800e92c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	3314      	adds	r3, #20
 800e966:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96a:	e853 3f00 	ldrex	r3, [r3]
 800e96e:	623b      	str	r3, [r7, #32]
   return(result);
 800e970:	6a3b      	ldr	r3, [r7, #32]
 800e972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e976:	663b      	str	r3, [r7, #96]	; 0x60
 800e978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	3314      	adds	r3, #20
 800e97e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e980:	633a      	str	r2, [r7, #48]	; 0x30
 800e982:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e984:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e988:	e841 2300 	strex	r3, r2, [r1]
 800e98c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e990:	2b00      	cmp	r3, #0
 800e992:	d1e5      	bne.n	800e960 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e996:	2220      	movs	r2, #32
 800e998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e99c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e99e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d119      	bne.n	800e9d8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	330c      	adds	r3, #12
 800e9aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	e853 3f00 	ldrex	r3, [r3]
 800e9b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f023 0310 	bic.w	r3, r3, #16
 800e9ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e9bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	330c      	adds	r3, #12
 800e9c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e9c4:	61fa      	str	r2, [r7, #28]
 800e9c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c8:	69b9      	ldr	r1, [r7, #24]
 800e9ca:	69fa      	ldr	r2, [r7, #28]
 800e9cc:	e841 2300 	strex	r3, r2, [r1]
 800e9d0:	617b      	str	r3, [r7, #20]
   return(result);
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d1e5      	bne.n	800e9a4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d106      	bne.n	800e9ee <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e9e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e9e8:	f7ff ff0e 	bl	800e808 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e9ec:	e002      	b.n	800e9f4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800e9ee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e9f0:	f7ff fef6 	bl	800e7e0 <HAL_UART_RxCpltCallback>
}
 800e9f4:	bf00      	nop
 800e9f6:	3770      	adds	r7, #112	; 0x70
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea08:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d108      	bne.n	800ea24 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ea16:	085b      	lsrs	r3, r3, #1
 800ea18:	b29b      	uxth	r3, r3
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	68f8      	ldr	r0, [r7, #12]
 800ea1e:	f7ff fef3 	bl	800e808 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ea22:	e002      	b.n	800ea2a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800ea24:	68f8      	ldr	r0, [r7, #12]
 800ea26:	f7ff fee5 	bl	800e7f4 <HAL_UART_RxHalfCpltCallback>
}
 800ea2a:	bf00      	nop
 800ea2c:	3710      	adds	r7, #16
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ea32:	b580      	push	{r7, lr}
 800ea34:	b084      	sub	sp, #16
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea42:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	695b      	ldr	r3, [r3, #20]
 800ea4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea4e:	2b80      	cmp	r3, #128	; 0x80
 800ea50:	bf0c      	ite	eq
 800ea52:	2301      	moveq	r3, #1
 800ea54:	2300      	movne	r3, #0
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	2b21      	cmp	r3, #33	; 0x21
 800ea64:	d108      	bne.n	800ea78 <UART_DMAError+0x46>
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d005      	beq.n	800ea78 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ea72:	68b8      	ldr	r0, [r7, #8]
 800ea74:	f000 f934 	bl	800ece0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	695b      	ldr	r3, [r3, #20]
 800ea7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea82:	2b40      	cmp	r3, #64	; 0x40
 800ea84:	bf0c      	ite	eq
 800ea86:	2301      	moveq	r3, #1
 800ea88:	2300      	movne	r3, #0
 800ea8a:	b2db      	uxtb	r3, r3
 800ea8c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	2b22      	cmp	r3, #34	; 0x22
 800ea98:	d108      	bne.n	800eaac <UART_DMAError+0x7a>
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d005      	beq.n	800eaac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800eaa6:	68b8      	ldr	r0, [r7, #8]
 800eaa8:	f000 f942 	bl	800ed30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eab0:	f043 0210 	orr.w	r2, r3, #16
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eab8:	68b8      	ldr	r0, [r7, #8]
 800eaba:	f7f6 fd2d 	bl	8005518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eabe:	bf00      	nop
 800eac0:	3710      	adds	r7, #16
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}

0800eac6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b090      	sub	sp, #64	; 0x40
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	60f8      	str	r0, [r7, #12]
 800eace:	60b9      	str	r1, [r7, #8]
 800ead0:	603b      	str	r3, [r7, #0]
 800ead2:	4613      	mov	r3, r2
 800ead4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ead6:	e050      	b.n	800eb7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ead8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eada:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eade:	d04c      	beq.n	800eb7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800eae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d007      	beq.n	800eaf6 <UART_WaitOnFlagUntilTimeout+0x30>
 800eae6:	f7f9 fbf7 	bl	80082d8 <HAL_GetTick>
 800eaea:	4602      	mov	r2, r0
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	1ad3      	subs	r3, r2, r3
 800eaf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d241      	bcs.n	800eb7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	330c      	adds	r3, #12
 800eafc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb00:	e853 3f00 	ldrex	r3, [r3]
 800eb04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800eb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	330c      	adds	r3, #12
 800eb14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb16:	637a      	str	r2, [r7, #52]	; 0x34
 800eb18:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eb1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb1e:	e841 2300 	strex	r3, r2, [r1]
 800eb22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d1e5      	bne.n	800eaf6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	3314      	adds	r3, #20
 800eb30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	e853 3f00 	ldrex	r3, [r3]
 800eb38:	613b      	str	r3, [r7, #16]
   return(result);
 800eb3a:	693b      	ldr	r3, [r7, #16]
 800eb3c:	f023 0301 	bic.w	r3, r3, #1
 800eb40:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	3314      	adds	r3, #20
 800eb48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb4a:	623a      	str	r2, [r7, #32]
 800eb4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb4e:	69f9      	ldr	r1, [r7, #28]
 800eb50:	6a3a      	ldr	r2, [r7, #32]
 800eb52:	e841 2300 	strex	r3, r2, [r1]
 800eb56:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb58:	69bb      	ldr	r3, [r7, #24]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d1e5      	bne.n	800eb2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2220      	movs	r2, #32
 800eb62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	2220      	movs	r2, #32
 800eb6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2200      	movs	r2, #0
 800eb72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800eb76:	2303      	movs	r3, #3
 800eb78:	e00f      	b.n	800eb9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	4013      	ands	r3, r2
 800eb84:	68ba      	ldr	r2, [r7, #8]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	bf0c      	ite	eq
 800eb8a:	2301      	moveq	r3, #1
 800eb8c:	2300      	movne	r3, #0
 800eb8e:	b2db      	uxtb	r3, r3
 800eb90:	461a      	mov	r2, r3
 800eb92:	79fb      	ldrb	r3, [r7, #7]
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d09f      	beq.n	800ead8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800eb98:	2300      	movs	r3, #0
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3740      	adds	r7, #64	; 0x40
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
	...

0800eba4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b098      	sub	sp, #96	; 0x60
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	60f8      	str	r0, [r7, #12]
 800ebac:	60b9      	str	r1, [r7, #8]
 800ebae:	4613      	mov	r3, r2
 800ebb0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ebb2:	68ba      	ldr	r2, [r7, #8]
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	88fa      	ldrh	r2, [r7, #6]
 800ebbc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2222      	movs	r2, #34	; 0x22
 800ebc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebd0:	4a40      	ldr	r2, [pc, #256]	; (800ecd4 <UART_Start_Receive_DMA+0x130>)
 800ebd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebd8:	4a3f      	ldr	r2, [pc, #252]	; (800ecd8 <UART_Start_Receive_DMA+0x134>)
 800ebda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebe0:	4a3e      	ldr	r2, [pc, #248]	; (800ecdc <UART_Start_Receive_DMA+0x138>)
 800ebe2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebe8:	2200      	movs	r2, #0
 800ebea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ebec:	f107 0308 	add.w	r3, r7, #8
 800ebf0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	3304      	adds	r3, #4
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec00:	681a      	ldr	r2, [r3, #0]
 800ec02:	88fb      	ldrh	r3, [r7, #6]
 800ec04:	f7fa f85a 	bl	8008cbc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ec08:	2300      	movs	r3, #0
 800ec0a:	613b      	str	r3, [r7, #16]
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	613b      	str	r3, [r7, #16]
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	685b      	ldr	r3, [r3, #4]
 800ec1a:	613b      	str	r3, [r7, #16]
 800ec1c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	2200      	movs	r2, #0
 800ec22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	691b      	ldr	r3, [r3, #16]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d019      	beq.n	800ec62 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	330c      	adds	r3, #12
 800ec34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec38:	e853 3f00 	ldrex	r3, [r3]
 800ec3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ec3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ec44:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	330c      	adds	r3, #12
 800ec4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ec4e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ec50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ec54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ec56:	e841 2300 	strex	r3, r2, [r1]
 800ec5a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ec5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d1e5      	bne.n	800ec2e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	3314      	adds	r3, #20
 800ec68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6c:	e853 3f00 	ldrex	r3, [r3]
 800ec70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec74:	f043 0301 	orr.w	r3, r3, #1
 800ec78:	657b      	str	r3, [r7, #84]	; 0x54
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	3314      	adds	r3, #20
 800ec80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ec82:	63ba      	str	r2, [r7, #56]	; 0x38
 800ec84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec8a:	e841 2300 	strex	r3, r2, [r1]
 800ec8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ec90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d1e5      	bne.n	800ec62 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	3314      	adds	r3, #20
 800ec9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec9e:	69bb      	ldr	r3, [r7, #24]
 800eca0:	e853 3f00 	ldrex	r3, [r3]
 800eca4:	617b      	str	r3, [r7, #20]
   return(result);
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecac:	653b      	str	r3, [r7, #80]	; 0x50
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	3314      	adds	r3, #20
 800ecb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ecb6:	627a      	str	r2, [r7, #36]	; 0x24
 800ecb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecba:	6a39      	ldr	r1, [r7, #32]
 800ecbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecbe:	e841 2300 	strex	r3, r2, [r1]
 800ecc2:	61fb      	str	r3, [r7, #28]
   return(result);
 800ecc4:	69fb      	ldr	r3, [r7, #28]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d1e5      	bne.n	800ec96 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800ecca:	2300      	movs	r3, #0
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3760      	adds	r7, #96	; 0x60
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}
 800ecd4:	0800e8d7 	.word	0x0800e8d7
 800ecd8:	0800e9fd 	.word	0x0800e9fd
 800ecdc:	0800ea33 	.word	0x0800ea33

0800ece0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b089      	sub	sp, #36	; 0x24
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	330c      	adds	r3, #12
 800ecee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	e853 3f00 	ldrex	r3, [r3]
 800ecf6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ecfe:	61fb      	str	r3, [r7, #28]
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	330c      	adds	r3, #12
 800ed06:	69fa      	ldr	r2, [r7, #28]
 800ed08:	61ba      	str	r2, [r7, #24]
 800ed0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed0c:	6979      	ldr	r1, [r7, #20]
 800ed0e:	69ba      	ldr	r2, [r7, #24]
 800ed10:	e841 2300 	strex	r3, r2, [r1]
 800ed14:	613b      	str	r3, [r7, #16]
   return(result);
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d1e5      	bne.n	800ece8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2220      	movs	r2, #32
 800ed20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ed24:	bf00      	nop
 800ed26:	3724      	adds	r7, #36	; 0x24
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b095      	sub	sp, #84	; 0x54
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	330c      	adds	r3, #12
 800ed3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed42:	e853 3f00 	ldrex	r3, [r3]
 800ed46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ed48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ed4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	330c      	adds	r3, #12
 800ed56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ed58:	643a      	str	r2, [r7, #64]	; 0x40
 800ed5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ed5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ed60:	e841 2300 	strex	r3, r2, [r1]
 800ed64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ed66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d1e5      	bne.n	800ed38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	3314      	adds	r3, #20
 800ed72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed74:	6a3b      	ldr	r3, [r7, #32]
 800ed76:	e853 3f00 	ldrex	r3, [r3]
 800ed7a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed7c:	69fb      	ldr	r3, [r7, #28]
 800ed7e:	f023 0301 	bic.w	r3, r3, #1
 800ed82:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	3314      	adds	r3, #20
 800ed8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ed8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed94:	e841 2300 	strex	r3, r2, [r1]
 800ed98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ed9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d1e5      	bne.n	800ed6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eda4:	2b01      	cmp	r3, #1
 800eda6:	d119      	bne.n	800eddc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	330c      	adds	r3, #12
 800edae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	e853 3f00 	ldrex	r3, [r3]
 800edb6:	60bb      	str	r3, [r7, #8]
   return(result);
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	f023 0310 	bic.w	r3, r3, #16
 800edbe:	647b      	str	r3, [r7, #68]	; 0x44
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	330c      	adds	r3, #12
 800edc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800edc8:	61ba      	str	r2, [r7, #24]
 800edca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edcc:	6979      	ldr	r1, [r7, #20]
 800edce:	69ba      	ldr	r2, [r7, #24]
 800edd0:	e841 2300 	strex	r3, r2, [r1]
 800edd4:	613b      	str	r3, [r7, #16]
   return(result);
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d1e5      	bne.n	800eda8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2220      	movs	r2, #32
 800ede0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800edea:	bf00      	nop
 800edec:	3754      	adds	r7, #84	; 0x54
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr

0800edf6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800edf6:	b580      	push	{r7, lr}
 800edf8:	b084      	sub	sp, #16
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2200      	movs	r2, #0
 800ee08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	f7f6 fb81 	bl	8005518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee16:	bf00      	nop
 800ee18:	3710      	adds	r7, #16
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}

0800ee1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ee1e:	b480      	push	{r7}
 800ee20:	b085      	sub	sp, #20
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee2c:	b2db      	uxtb	r3, r3
 800ee2e:	2b21      	cmp	r3, #33	; 0x21
 800ee30:	d13e      	bne.n	800eeb0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	689b      	ldr	r3, [r3, #8]
 800ee36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee3a:	d114      	bne.n	800ee66 <UART_Transmit_IT+0x48>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	691b      	ldr	r3, [r3, #16]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d110      	bne.n	800ee66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6a1b      	ldr	r3, [r3, #32]
 800ee48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	881b      	ldrh	r3, [r3, #0]
 800ee4e:	461a      	mov	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ee58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6a1b      	ldr	r3, [r3, #32]
 800ee5e:	1c9a      	adds	r2, r3, #2
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	621a      	str	r2, [r3, #32]
 800ee64:	e008      	b.n	800ee78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6a1b      	ldr	r3, [r3, #32]
 800ee6a:	1c59      	adds	r1, r3, #1
 800ee6c:	687a      	ldr	r2, [r7, #4]
 800ee6e:	6211      	str	r1, [r2, #32]
 800ee70:	781a      	ldrb	r2, [r3, #0]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	3b01      	subs	r3, #1
 800ee80:	b29b      	uxth	r3, r3
 800ee82:	687a      	ldr	r2, [r7, #4]
 800ee84:	4619      	mov	r1, r3
 800ee86:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d10f      	bne.n	800eeac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	68da      	ldr	r2, [r3, #12]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ee9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	68da      	ldr	r2, [r3, #12]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eeaa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800eeac:	2300      	movs	r3, #0
 800eeae:	e000      	b.n	800eeb2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800eeb0:	2302      	movs	r3, #2
  }
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3714      	adds	r7, #20
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr

0800eebe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eebe:	b580      	push	{r7, lr}
 800eec0:	b082      	sub	sp, #8
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	68da      	ldr	r2, [r3, #12]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eed4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2220      	movs	r2, #32
 800eeda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7f6 fb08 	bl	80054f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800eee4:	2300      	movs	r3, #0
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3708      	adds	r7, #8
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}

0800eeee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800eeee:	b580      	push	{r7, lr}
 800eef0:	b08c      	sub	sp, #48	; 0x30
 800eef2:	af00      	add	r7, sp, #0
 800eef4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eefc:	b2db      	uxtb	r3, r3
 800eefe:	2b22      	cmp	r3, #34	; 0x22
 800ef00:	f040 80ab 	bne.w	800f05a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	689b      	ldr	r3, [r3, #8]
 800ef08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef0c:	d117      	bne.n	800ef3e <UART_Receive_IT+0x50>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	691b      	ldr	r3, [r3, #16]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d113      	bne.n	800ef3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ef16:	2300      	movs	r3, #0
 800ef18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef1e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef2c:	b29a      	uxth	r2, r3
 800ef2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef36:	1c9a      	adds	r2, r3, #2
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	629a      	str	r2, [r3, #40]	; 0x28
 800ef3c:	e026      	b.n	800ef8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ef44:	2300      	movs	r3, #0
 800ef46:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	689b      	ldr	r3, [r3, #8]
 800ef4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef50:	d007      	beq.n	800ef62 <UART_Receive_IT+0x74>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	689b      	ldr	r3, [r3, #8]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d10a      	bne.n	800ef70 <UART_Receive_IT+0x82>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	691b      	ldr	r3, [r3, #16]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d106      	bne.n	800ef70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	b2da      	uxtb	r2, r3
 800ef6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6c:	701a      	strb	r2, [r3, #0]
 800ef6e:	e008      	b.n	800ef82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	b2db      	uxtb	r3, r3
 800ef78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef7c:	b2da      	uxtb	r2, r3
 800ef7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef86:	1c5a      	adds	r2, r3, #1
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	3b01      	subs	r3, #1
 800ef94:	b29b      	uxth	r3, r3
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	4619      	mov	r1, r3
 800ef9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d15a      	bne.n	800f056 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	68da      	ldr	r2, [r3, #12]
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	f022 0220 	bic.w	r2, r2, #32
 800efae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	68da      	ldr	r2, [r3, #12]
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800efbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	695a      	ldr	r2, [r3, #20]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f022 0201 	bic.w	r2, r2, #1
 800efce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2220      	movs	r2, #32
 800efd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d135      	bne.n	800f04c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2200      	movs	r2, #0
 800efe4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	330c      	adds	r3, #12
 800efec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	e853 3f00 	ldrex	r3, [r3]
 800eff4:	613b      	str	r3, [r7, #16]
   return(result);
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	f023 0310 	bic.w	r3, r3, #16
 800effc:	627b      	str	r3, [r7, #36]	; 0x24
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	330c      	adds	r3, #12
 800f004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f006:	623a      	str	r2, [r7, #32]
 800f008:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f00a:	69f9      	ldr	r1, [r7, #28]
 800f00c:	6a3a      	ldr	r2, [r7, #32]
 800f00e:	e841 2300 	strex	r3, r2, [r1]
 800f012:	61bb      	str	r3, [r7, #24]
   return(result);
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d1e5      	bne.n	800efe6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f003 0310 	and.w	r3, r3, #16
 800f024:	2b10      	cmp	r3, #16
 800f026:	d10a      	bne.n	800f03e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f028:	2300      	movs	r3, #0
 800f02a:	60fb      	str	r3, [r7, #12]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	60fb      	str	r3, [r7, #12]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	685b      	ldr	r3, [r3, #4]
 800f03a:	60fb      	str	r3, [r7, #12]
 800f03c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f042:	4619      	mov	r1, r3
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f7ff fbdf 	bl	800e808 <HAL_UARTEx_RxEventCallback>
 800f04a:	e002      	b.n	800f052 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f7ff fbc7 	bl	800e7e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800f052:	2300      	movs	r3, #0
 800f054:	e002      	b.n	800f05c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800f056:	2300      	movs	r3, #0
 800f058:	e000      	b.n	800f05c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800f05a:	2302      	movs	r3, #2
  }
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3730      	adds	r7, #48	; 0x30
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f068:	b0c0      	sub	sp, #256	; 0x100
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	691b      	ldr	r3, [r3, #16]
 800f078:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f07c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f080:	68d9      	ldr	r1, [r3, #12]
 800f082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f086:	681a      	ldr	r2, [r3, #0]
 800f088:	ea40 0301 	orr.w	r3, r0, r1
 800f08c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f08e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f092:	689a      	ldr	r2, [r3, #8]
 800f094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f098:	691b      	ldr	r3, [r3, #16]
 800f09a:	431a      	orrs	r2, r3
 800f09c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f0a0:	695b      	ldr	r3, [r3, #20]
 800f0a2:	431a      	orrs	r2, r3
 800f0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f0a8:	69db      	ldr	r3, [r3, #28]
 800f0aa:	4313      	orrs	r3, r2
 800f0ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800f0b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	68db      	ldr	r3, [r3, #12]
 800f0b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800f0bc:	f021 010c 	bic.w	r1, r1, #12
 800f0c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f0c4:	681a      	ldr	r2, [r3, #0]
 800f0c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f0ca:	430b      	orrs	r3, r1
 800f0cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f0ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	695b      	ldr	r3, [r3, #20]
 800f0d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800f0da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f0de:	6999      	ldr	r1, [r3, #24]
 800f0e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f0e4:	681a      	ldr	r2, [r3, #0]
 800f0e6:	ea40 0301 	orr.w	r3, r0, r1
 800f0ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f0ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f0f0:	681a      	ldr	r2, [r3, #0]
 800f0f2:	4b8f      	ldr	r3, [pc, #572]	; (800f330 <UART_SetConfig+0x2cc>)
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d005      	beq.n	800f104 <UART_SetConfig+0xa0>
 800f0f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f0fc:	681a      	ldr	r2, [r3, #0]
 800f0fe:	4b8d      	ldr	r3, [pc, #564]	; (800f334 <UART_SetConfig+0x2d0>)
 800f100:	429a      	cmp	r2, r3
 800f102:	d104      	bne.n	800f10e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f104:	f7fd f96c 	bl	800c3e0 <HAL_RCC_GetPCLK2Freq>
 800f108:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800f10c:	e003      	b.n	800f116 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f10e:	f7fd f953 	bl	800c3b8 <HAL_RCC_GetPCLK1Freq>
 800f112:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f11a:	69db      	ldr	r3, [r3, #28]
 800f11c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f120:	f040 810c 	bne.w	800f33c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f128:	2200      	movs	r2, #0
 800f12a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f12e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800f132:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800f136:	4622      	mov	r2, r4
 800f138:	462b      	mov	r3, r5
 800f13a:	1891      	adds	r1, r2, r2
 800f13c:	65b9      	str	r1, [r7, #88]	; 0x58
 800f13e:	415b      	adcs	r3, r3
 800f140:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f142:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800f146:	4621      	mov	r1, r4
 800f148:	eb12 0801 	adds.w	r8, r2, r1
 800f14c:	4629      	mov	r1, r5
 800f14e:	eb43 0901 	adc.w	r9, r3, r1
 800f152:	f04f 0200 	mov.w	r2, #0
 800f156:	f04f 0300 	mov.w	r3, #0
 800f15a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f15e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f162:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f166:	4690      	mov	r8, r2
 800f168:	4699      	mov	r9, r3
 800f16a:	4623      	mov	r3, r4
 800f16c:	eb18 0303 	adds.w	r3, r8, r3
 800f170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f174:	462b      	mov	r3, r5
 800f176:	eb49 0303 	adc.w	r3, r9, r3
 800f17a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f17e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	2200      	movs	r2, #0
 800f186:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f18a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800f18e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f192:	460b      	mov	r3, r1
 800f194:	18db      	adds	r3, r3, r3
 800f196:	653b      	str	r3, [r7, #80]	; 0x50
 800f198:	4613      	mov	r3, r2
 800f19a:	eb42 0303 	adc.w	r3, r2, r3
 800f19e:	657b      	str	r3, [r7, #84]	; 0x54
 800f1a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f1a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800f1a8:	f7f1 fc36 	bl	8000a18 <__aeabi_uldivmod>
 800f1ac:	4602      	mov	r2, r0
 800f1ae:	460b      	mov	r3, r1
 800f1b0:	4b61      	ldr	r3, [pc, #388]	; (800f338 <UART_SetConfig+0x2d4>)
 800f1b2:	fba3 2302 	umull	r2, r3, r3, r2
 800f1b6:	095b      	lsrs	r3, r3, #5
 800f1b8:	011c      	lsls	r4, r3, #4
 800f1ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f1c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800f1c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800f1cc:	4642      	mov	r2, r8
 800f1ce:	464b      	mov	r3, r9
 800f1d0:	1891      	adds	r1, r2, r2
 800f1d2:	64b9      	str	r1, [r7, #72]	; 0x48
 800f1d4:	415b      	adcs	r3, r3
 800f1d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f1d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f1dc:	4641      	mov	r1, r8
 800f1de:	eb12 0a01 	adds.w	sl, r2, r1
 800f1e2:	4649      	mov	r1, r9
 800f1e4:	eb43 0b01 	adc.w	fp, r3, r1
 800f1e8:	f04f 0200 	mov.w	r2, #0
 800f1ec:	f04f 0300 	mov.w	r3, #0
 800f1f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f1f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f1f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f1fc:	4692      	mov	sl, r2
 800f1fe:	469b      	mov	fp, r3
 800f200:	4643      	mov	r3, r8
 800f202:	eb1a 0303 	adds.w	r3, sl, r3
 800f206:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f20a:	464b      	mov	r3, r9
 800f20c:	eb4b 0303 	adc.w	r3, fp, r3
 800f210:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f218:	685b      	ldr	r3, [r3, #4]
 800f21a:	2200      	movs	r2, #0
 800f21c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f220:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800f224:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f228:	460b      	mov	r3, r1
 800f22a:	18db      	adds	r3, r3, r3
 800f22c:	643b      	str	r3, [r7, #64]	; 0x40
 800f22e:	4613      	mov	r3, r2
 800f230:	eb42 0303 	adc.w	r3, r2, r3
 800f234:	647b      	str	r3, [r7, #68]	; 0x44
 800f236:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f23a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800f23e:	f7f1 fbeb 	bl	8000a18 <__aeabi_uldivmod>
 800f242:	4602      	mov	r2, r0
 800f244:	460b      	mov	r3, r1
 800f246:	4611      	mov	r1, r2
 800f248:	4b3b      	ldr	r3, [pc, #236]	; (800f338 <UART_SetConfig+0x2d4>)
 800f24a:	fba3 2301 	umull	r2, r3, r3, r1
 800f24e:	095b      	lsrs	r3, r3, #5
 800f250:	2264      	movs	r2, #100	; 0x64
 800f252:	fb02 f303 	mul.w	r3, r2, r3
 800f256:	1acb      	subs	r3, r1, r3
 800f258:	00db      	lsls	r3, r3, #3
 800f25a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800f25e:	4b36      	ldr	r3, [pc, #216]	; (800f338 <UART_SetConfig+0x2d4>)
 800f260:	fba3 2302 	umull	r2, r3, r3, r2
 800f264:	095b      	lsrs	r3, r3, #5
 800f266:	005b      	lsls	r3, r3, #1
 800f268:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f26c:	441c      	add	r4, r3
 800f26e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f272:	2200      	movs	r2, #0
 800f274:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f278:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f27c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800f280:	4642      	mov	r2, r8
 800f282:	464b      	mov	r3, r9
 800f284:	1891      	adds	r1, r2, r2
 800f286:	63b9      	str	r1, [r7, #56]	; 0x38
 800f288:	415b      	adcs	r3, r3
 800f28a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f28c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f290:	4641      	mov	r1, r8
 800f292:	1851      	adds	r1, r2, r1
 800f294:	6339      	str	r1, [r7, #48]	; 0x30
 800f296:	4649      	mov	r1, r9
 800f298:	414b      	adcs	r3, r1
 800f29a:	637b      	str	r3, [r7, #52]	; 0x34
 800f29c:	f04f 0200 	mov.w	r2, #0
 800f2a0:	f04f 0300 	mov.w	r3, #0
 800f2a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800f2a8:	4659      	mov	r1, fp
 800f2aa:	00cb      	lsls	r3, r1, #3
 800f2ac:	4651      	mov	r1, sl
 800f2ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f2b2:	4651      	mov	r1, sl
 800f2b4:	00ca      	lsls	r2, r1, #3
 800f2b6:	4610      	mov	r0, r2
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	4642      	mov	r2, r8
 800f2be:	189b      	adds	r3, r3, r2
 800f2c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f2c4:	464b      	mov	r3, r9
 800f2c6:	460a      	mov	r2, r1
 800f2c8:	eb42 0303 	adc.w	r3, r2, r3
 800f2cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f2dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800f2e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f2e4:	460b      	mov	r3, r1
 800f2e6:	18db      	adds	r3, r3, r3
 800f2e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2ea:	4613      	mov	r3, r2
 800f2ec:	eb42 0303 	adc.w	r3, r2, r3
 800f2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f2f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800f2fa:	f7f1 fb8d 	bl	8000a18 <__aeabi_uldivmod>
 800f2fe:	4602      	mov	r2, r0
 800f300:	460b      	mov	r3, r1
 800f302:	4b0d      	ldr	r3, [pc, #52]	; (800f338 <UART_SetConfig+0x2d4>)
 800f304:	fba3 1302 	umull	r1, r3, r3, r2
 800f308:	095b      	lsrs	r3, r3, #5
 800f30a:	2164      	movs	r1, #100	; 0x64
 800f30c:	fb01 f303 	mul.w	r3, r1, r3
 800f310:	1ad3      	subs	r3, r2, r3
 800f312:	00db      	lsls	r3, r3, #3
 800f314:	3332      	adds	r3, #50	; 0x32
 800f316:	4a08      	ldr	r2, [pc, #32]	; (800f338 <UART_SetConfig+0x2d4>)
 800f318:	fba2 2303 	umull	r2, r3, r2, r3
 800f31c:	095b      	lsrs	r3, r3, #5
 800f31e:	f003 0207 	and.w	r2, r3, #7
 800f322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	4422      	add	r2, r4
 800f32a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f32c:	e105      	b.n	800f53a <UART_SetConfig+0x4d6>
 800f32e:	bf00      	nop
 800f330:	40011000 	.word	0x40011000
 800f334:	40011400 	.word	0x40011400
 800f338:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f33c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f340:	2200      	movs	r2, #0
 800f342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f346:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800f34a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800f34e:	4642      	mov	r2, r8
 800f350:	464b      	mov	r3, r9
 800f352:	1891      	adds	r1, r2, r2
 800f354:	6239      	str	r1, [r7, #32]
 800f356:	415b      	adcs	r3, r3
 800f358:	627b      	str	r3, [r7, #36]	; 0x24
 800f35a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f35e:	4641      	mov	r1, r8
 800f360:	1854      	adds	r4, r2, r1
 800f362:	4649      	mov	r1, r9
 800f364:	eb43 0501 	adc.w	r5, r3, r1
 800f368:	f04f 0200 	mov.w	r2, #0
 800f36c:	f04f 0300 	mov.w	r3, #0
 800f370:	00eb      	lsls	r3, r5, #3
 800f372:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f376:	00e2      	lsls	r2, r4, #3
 800f378:	4614      	mov	r4, r2
 800f37a:	461d      	mov	r5, r3
 800f37c:	4643      	mov	r3, r8
 800f37e:	18e3      	adds	r3, r4, r3
 800f380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f384:	464b      	mov	r3, r9
 800f386:	eb45 0303 	adc.w	r3, r5, r3
 800f38a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f38e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	2200      	movs	r2, #0
 800f396:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f39a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f39e:	f04f 0200 	mov.w	r2, #0
 800f3a2:	f04f 0300 	mov.w	r3, #0
 800f3a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800f3aa:	4629      	mov	r1, r5
 800f3ac:	008b      	lsls	r3, r1, #2
 800f3ae:	4621      	mov	r1, r4
 800f3b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f3b4:	4621      	mov	r1, r4
 800f3b6:	008a      	lsls	r2, r1, #2
 800f3b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800f3bc:	f7f1 fb2c 	bl	8000a18 <__aeabi_uldivmod>
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	460b      	mov	r3, r1
 800f3c4:	4b60      	ldr	r3, [pc, #384]	; (800f548 <UART_SetConfig+0x4e4>)
 800f3c6:	fba3 2302 	umull	r2, r3, r3, r2
 800f3ca:	095b      	lsrs	r3, r3, #5
 800f3cc:	011c      	lsls	r4, r3, #4
 800f3ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f3d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f3dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800f3e0:	4642      	mov	r2, r8
 800f3e2:	464b      	mov	r3, r9
 800f3e4:	1891      	adds	r1, r2, r2
 800f3e6:	61b9      	str	r1, [r7, #24]
 800f3e8:	415b      	adcs	r3, r3
 800f3ea:	61fb      	str	r3, [r7, #28]
 800f3ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f3f0:	4641      	mov	r1, r8
 800f3f2:	1851      	adds	r1, r2, r1
 800f3f4:	6139      	str	r1, [r7, #16]
 800f3f6:	4649      	mov	r1, r9
 800f3f8:	414b      	adcs	r3, r1
 800f3fa:	617b      	str	r3, [r7, #20]
 800f3fc:	f04f 0200 	mov.w	r2, #0
 800f400:	f04f 0300 	mov.w	r3, #0
 800f404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f408:	4659      	mov	r1, fp
 800f40a:	00cb      	lsls	r3, r1, #3
 800f40c:	4651      	mov	r1, sl
 800f40e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f412:	4651      	mov	r1, sl
 800f414:	00ca      	lsls	r2, r1, #3
 800f416:	4610      	mov	r0, r2
 800f418:	4619      	mov	r1, r3
 800f41a:	4603      	mov	r3, r0
 800f41c:	4642      	mov	r2, r8
 800f41e:	189b      	adds	r3, r3, r2
 800f420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f424:	464b      	mov	r3, r9
 800f426:	460a      	mov	r2, r1
 800f428:	eb42 0303 	adc.w	r3, r2, r3
 800f42c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	2200      	movs	r2, #0
 800f438:	67bb      	str	r3, [r7, #120]	; 0x78
 800f43a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f43c:	f04f 0200 	mov.w	r2, #0
 800f440:	f04f 0300 	mov.w	r3, #0
 800f444:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800f448:	4649      	mov	r1, r9
 800f44a:	008b      	lsls	r3, r1, #2
 800f44c:	4641      	mov	r1, r8
 800f44e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f452:	4641      	mov	r1, r8
 800f454:	008a      	lsls	r2, r1, #2
 800f456:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800f45a:	f7f1 fadd 	bl	8000a18 <__aeabi_uldivmod>
 800f45e:	4602      	mov	r2, r0
 800f460:	460b      	mov	r3, r1
 800f462:	4b39      	ldr	r3, [pc, #228]	; (800f548 <UART_SetConfig+0x4e4>)
 800f464:	fba3 1302 	umull	r1, r3, r3, r2
 800f468:	095b      	lsrs	r3, r3, #5
 800f46a:	2164      	movs	r1, #100	; 0x64
 800f46c:	fb01 f303 	mul.w	r3, r1, r3
 800f470:	1ad3      	subs	r3, r2, r3
 800f472:	011b      	lsls	r3, r3, #4
 800f474:	3332      	adds	r3, #50	; 0x32
 800f476:	4a34      	ldr	r2, [pc, #208]	; (800f548 <UART_SetConfig+0x4e4>)
 800f478:	fba2 2303 	umull	r2, r3, r2, r3
 800f47c:	095b      	lsrs	r3, r3, #5
 800f47e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f482:	441c      	add	r4, r3
 800f484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f488:	2200      	movs	r2, #0
 800f48a:	673b      	str	r3, [r7, #112]	; 0x70
 800f48c:	677a      	str	r2, [r7, #116]	; 0x74
 800f48e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f492:	4642      	mov	r2, r8
 800f494:	464b      	mov	r3, r9
 800f496:	1891      	adds	r1, r2, r2
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	415b      	adcs	r3, r3
 800f49c:	60fb      	str	r3, [r7, #12]
 800f49e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f4a2:	4641      	mov	r1, r8
 800f4a4:	1851      	adds	r1, r2, r1
 800f4a6:	6039      	str	r1, [r7, #0]
 800f4a8:	4649      	mov	r1, r9
 800f4aa:	414b      	adcs	r3, r1
 800f4ac:	607b      	str	r3, [r7, #4]
 800f4ae:	f04f 0200 	mov.w	r2, #0
 800f4b2:	f04f 0300 	mov.w	r3, #0
 800f4b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f4ba:	4659      	mov	r1, fp
 800f4bc:	00cb      	lsls	r3, r1, #3
 800f4be:	4651      	mov	r1, sl
 800f4c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f4c4:	4651      	mov	r1, sl
 800f4c6:	00ca      	lsls	r2, r1, #3
 800f4c8:	4610      	mov	r0, r2
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	4642      	mov	r2, r8
 800f4d0:	189b      	adds	r3, r3, r2
 800f4d2:	66bb      	str	r3, [r7, #104]	; 0x68
 800f4d4:	464b      	mov	r3, r9
 800f4d6:	460a      	mov	r2, r1
 800f4d8:	eb42 0303 	adc.w	r3, r2, r3
 800f4dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f4de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	663b      	str	r3, [r7, #96]	; 0x60
 800f4e8:	667a      	str	r2, [r7, #100]	; 0x64
 800f4ea:	f04f 0200 	mov.w	r2, #0
 800f4ee:	f04f 0300 	mov.w	r3, #0
 800f4f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800f4f6:	4649      	mov	r1, r9
 800f4f8:	008b      	lsls	r3, r1, #2
 800f4fa:	4641      	mov	r1, r8
 800f4fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f500:	4641      	mov	r1, r8
 800f502:	008a      	lsls	r2, r1, #2
 800f504:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f508:	f7f1 fa86 	bl	8000a18 <__aeabi_uldivmod>
 800f50c:	4602      	mov	r2, r0
 800f50e:	460b      	mov	r3, r1
 800f510:	4b0d      	ldr	r3, [pc, #52]	; (800f548 <UART_SetConfig+0x4e4>)
 800f512:	fba3 1302 	umull	r1, r3, r3, r2
 800f516:	095b      	lsrs	r3, r3, #5
 800f518:	2164      	movs	r1, #100	; 0x64
 800f51a:	fb01 f303 	mul.w	r3, r1, r3
 800f51e:	1ad3      	subs	r3, r2, r3
 800f520:	011b      	lsls	r3, r3, #4
 800f522:	3332      	adds	r3, #50	; 0x32
 800f524:	4a08      	ldr	r2, [pc, #32]	; (800f548 <UART_SetConfig+0x4e4>)
 800f526:	fba2 2303 	umull	r2, r3, r2, r3
 800f52a:	095b      	lsrs	r3, r3, #5
 800f52c:	f003 020f 	and.w	r2, r3, #15
 800f530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	4422      	add	r2, r4
 800f538:	609a      	str	r2, [r3, #8]
}
 800f53a:	bf00      	nop
 800f53c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800f540:	46bd      	mov	sp, r7
 800f542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f546:	bf00      	nop
 800f548:	51eb851f 	.word	0x51eb851f

0800f54c <VL53L0X_GetOffsetCalibrationDataMicroMeter>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev, int32_t *pOffsetCalibrationDataMicroMeter) {
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b084      	sub	sp, #16
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f556:	2300      	movs	r3, #0
 800f558:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev, pOffsetCalibrationDataMicroMeter);
 800f55a:	6839      	ldr	r1, [r7, #0]
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f001 fca4 	bl	8010eaa <VL53L0X_get_offset_calibration_data_micro_meter>
 800f562:	4603      	mov	r3, r0
 800f564:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800f566:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3710      	adds	r7, #16
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}

0800f572 <VL53L0X_SetDeviceAddress>:
}

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress) {
 800f572:	b580      	push	{r7, lr}
 800f574:	b084      	sub	sp, #16
 800f576:	af00      	add	r7, sp, #0
 800f578:	6078      	str	r0, [r7, #4]
 800f57a:	460b      	mov	r3, r1
 800f57c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f57e:	2300      	movs	r3, #0
 800f580:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS, DeviceAddress / 2);
 800f582:	78fb      	ldrb	r3, [r7, #3]
 800f584:	085b      	lsrs	r3, r3, #1
 800f586:	b2db      	uxtb	r3, r3
 800f588:	461a      	mov	r2, r3
 800f58a:	218a      	movs	r1, #138	; 0x8a
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f004 fc03 	bl	8013d98 <VL53L0X_WrByte>
 800f592:	4603      	mov	r3, r0
 800f594:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800f596:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3710      	adds	r7, #16
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}
	...

0800f5a4 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev) {
 800f5a4:	b5b0      	push	{r4, r5, r7, lr}
 800f5a6:	b096      	sub	sp, #88	; 0x58
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800f5b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d107      	bne.n	800f5ca <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	2188      	movs	r1, #136	; 0x88
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f004 fbea 	bl	8013d98 <VL53L0X_WrByte>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f5d8:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800f5e2:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps, (FixPoint1616_t )((0x00016B85))); /* 1.42 No Cover Glass*/
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4a9e      	ldr	r2, [pc, #632]	; (800f864 <VL53L0X_DataInit+0x2c0>)
 800f5ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	4a9d      	ldr	r2, [pc, #628]	; (800f868 <VL53L0X_DataInit+0x2c4>)
 800f5f2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800f5fc:	f107 0310 	add.w	r3, r7, #16
 800f600:	4619      	mov	r1, r3
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f000 fab4 	bl	800fb70 <VL53L0X_GetDeviceParameters>
 800f608:	4603      	mov	r3, r0
 800f60a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800f60e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f612:	2b00      	cmp	r3, #0
 800f614:	d112      	bne.n	800f63c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800f616:	2300      	movs	r3, #0
 800f618:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800f61a:	2300      	movs	r3, #0
 800f61c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f103 0410 	add.w	r4, r3, #16
 800f624:	f107 0510 	add.w	r5, r7, #16
 800f628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f62a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f62c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f62e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f634:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2264      	movs	r2, #100	; 0x64
 800f640:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f44f 7261 	mov.w	r2, #900	; 0x384
 800f64a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800f654:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800f65e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2201      	movs	r2, #1
 800f666:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800f66a:	2201      	movs	r2, #1
 800f66c:	2180      	movs	r1, #128	; 0x80
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f004 fb92 	bl	8013d98 <VL53L0X_WrByte>
 800f674:	4603      	mov	r3, r0
 800f676:	461a      	mov	r2, r3
 800f678:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f67c:	4313      	orrs	r3, r2
 800f67e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800f682:	2201      	movs	r2, #1
 800f684:	21ff      	movs	r1, #255	; 0xff
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f004 fb86 	bl	8013d98 <VL53L0X_WrByte>
 800f68c:	4603      	mov	r3, r0
 800f68e:	461a      	mov	r2, r3
 800f690:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f694:	4313      	orrs	r3, r2
 800f696:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800f69a:	2200      	movs	r2, #0
 800f69c:	2100      	movs	r1, #0
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f004 fb7a 	bl	8013d98 <VL53L0X_WrByte>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6ac:	4313      	orrs	r3, r2
 800f6ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800f6b2:	f107 030f 	add.w	r3, r7, #15
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	2191      	movs	r1, #145	; 0x91
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f004 fbee 	bl	8013e9c <VL53L0X_RdByte>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6c8:	4313      	orrs	r3, r2
 800f6ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800f6ce:	7bfa      	ldrb	r2, [r7, #15]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	2100      	movs	r1, #0
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f004 fb5c 	bl	8013d98 <VL53L0X_WrByte>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6e8:	4313      	orrs	r3, r2
 800f6ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	21ff      	movs	r1, #255	; 0xff
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f004 fb50 	bl	8013d98 <VL53L0X_WrByte>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f700:	4313      	orrs	r3, r2
 800f702:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800f706:	2200      	movs	r2, #0
 800f708:	2180      	movs	r1, #128	; 0x80
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f004 fb44 	bl	8013d98 <VL53L0X_WrByte>
 800f710:	4603      	mov	r3, r0
 800f712:	461a      	mov	r2, r3
 800f714:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f718:	4313      	orrs	r3, r2
 800f71a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800f71e:	2300      	movs	r3, #0
 800f720:	653b      	str	r3, [r7, #80]	; 0x50
 800f722:	e014      	b.n	800f74e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800f724:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d114      	bne.n	800f756 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800f72c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f72e:	b29b      	uxth	r3, r3
 800f730:	2201      	movs	r2, #1
 800f732:	4619      	mov	r1, r3
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f000 fd0f 	bl	8010158 <VL53L0X_SetLimitCheckEnable>
 800f73a:	4603      	mov	r3, r0
 800f73c:	461a      	mov	r2, r3
 800f73e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f742:	4313      	orrs	r3, r2
 800f744:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800f748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f74a:	3301      	adds	r3, #1
 800f74c:	653b      	str	r3, [r7, #80]	; 0x50
 800f74e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f750:	2b05      	cmp	r3, #5
 800f752:	dde7      	ble.n	800f724 <VL53L0X_DataInit+0x180>
 800f754:	e000      	b.n	800f758 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800f756:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800f758:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d107      	bne.n	800f770 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800f760:	2200      	movs	r2, #0
 800f762:	2102      	movs	r1, #2
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f000 fcf7 	bl	8010158 <VL53L0X_SetLimitCheckEnable>
 800f76a:	4603      	mov	r3, r0
 800f76c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800f770:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f774:	2b00      	cmp	r3, #0
 800f776:	d107      	bne.n	800f788 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800f778:	2200      	movs	r2, #0
 800f77a:	2103      	movs	r1, #3
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f000 fceb 	bl	8010158 <VL53L0X_SetLimitCheckEnable>
 800f782:	4603      	mov	r3, r0
 800f784:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800f788:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d107      	bne.n	800f7a0 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800f790:	2200      	movs	r2, #0
 800f792:	2104      	movs	r1, #4
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f000 fcdf 	bl	8010158 <VL53L0X_SetLimitCheckEnable>
 800f79a:	4603      	mov	r3, r0
 800f79c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800f7a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d107      	bne.n	800f7b8 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	2105      	movs	r1, #5
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f000 fcd3 	bl	8010158 <VL53L0X_SetLimitCheckEnable>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800f7b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d108      	bne.n	800f7d2 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800f7c0:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800f7c4:	2100      	movs	r1, #0
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f000 fd76 	bl	80102b8 <VL53L0X_SetLimitCheckValue>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t) (18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800f7d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d108      	bne.n	800f7ec <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800f7da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f7de:	2101      	movs	r1, #1
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f000 fd69 	bl	80102b8 <VL53L0X_SetLimitCheckValue>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t) (25 * 65536 / 100));
		/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f7ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d108      	bne.n	800f806 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800f7f4:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800f7f8:	2102      	movs	r1, #2
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f000 fd5c 	bl	80102b8 <VL53L0X_SetLimitCheckValue>
 800f800:	4603      	mov	r3, r0
 800f802:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, (FixPoint1616_t) (35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f806:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d107      	bne.n	800f81e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800f80e:	2200      	movs	r2, #0
 800f810:	2103      	movs	r1, #3
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f000 fd50 	bl	80102b8 <VL53L0X_SetLimitCheckValue>
 800f818:	4603      	mov	r3, r0
 800f81a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, (FixPoint1616_t) (0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f81e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f822:	2b00      	cmp	r3, #0
 800f824:	d10f      	bne.n	800f846 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	22ff      	movs	r2, #255	; 0xff
 800f82a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xFF);
 800f82e:	22ff      	movs	r2, #255	; 0xff
 800f830:	2101      	movs	r1, #1
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f004 fab0 	bl	8013d98 <VL53L0X_WrByte>
 800f838:	4603      	mov	r3, r0
 800f83a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2201      	movs	r2, #1
 800f842:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800f846:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d103      	bne.n	800f856 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2200      	movs	r2, #0
 800f852:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

	LOG_FUNCTION_END(Status);
	return Status;
 800f856:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3758      	adds	r7, #88	; 0x58
 800f85e:	46bd      	mov	sp, r7
 800f860:	bdb0      	pop	{r4, r5, r7, pc}
 800f862:	bf00      	nop
 800f864:	00016b85 	.word	0x00016b85
 800f868:	000970a4 	.word	0x000970a4

0800f86c <VL53L0X_StaticInit>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev) {
 800f86c:	b5b0      	push	{r4, r5, r7, lr}
 800f86e:	b09e      	sub	sp, #120	; 0x78
 800f870:	af02      	add	r7, sp, #8
 800f872:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f874:	2300      	movs	r3, #0
 800f876:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = { 0 };
 800f87a:	f107 031c 	add.w	r3, r7, #28
 800f87e:	2240      	movs	r2, #64	; 0x40
 800f880:	2100      	movs	r1, #0
 800f882:	4618      	mov	r0, r3
 800f884:	f004 fc0a 	bl	801409c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800f888:	2300      	movs	r3, #0
 800f88a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800f88c:	2300      	movs	r3, #0
 800f88e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800f890:	2300      	movs	r3, #0
 800f892:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800f896:	2300      	movs	r3, #0
 800f898:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800f89a:	2300      	movs	r3, #0
 800f89c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800f89e:	2300      	movs	r3, #0
 800f8a0:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800f8a8:	2101      	movs	r1, #1
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f002 fa40 	bl	8011d30 <VL53L0X_get_info_from_device>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count = (uint32_t) VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadCount);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800f8bc:	663b      	str	r3, [r7, #96]	; 0x60
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadType);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800f8c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	/* NVM value invalid */
	if ((ApertureSpads > 1) || ((ApertureSpads == 1) && (count > 32)) || ((ApertureSpads == 0) && (count > 12)))
 800f8c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d80d      	bhi.n	800f8ec <VL53L0X_StaticInit+0x80>
 800f8d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f8d4:	2b01      	cmp	r3, #1
 800f8d6:	d102      	bne.n	800f8de <VL53L0X_StaticInit+0x72>
 800f8d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f8da:	2b20      	cmp	r3, #32
 800f8dc:	d806      	bhi.n	800f8ec <VL53L0X_StaticInit+0x80>
 800f8de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d10e      	bne.n	800f904 <VL53L0X_StaticInit+0x98>
 800f8e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f8e8:	2b0c      	cmp	r3, #12
 800f8ea:	d90b      	bls.n	800f904 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount, &isApertureSpads);
 800f8ec:	f107 0218 	add.w	r2, r7, #24
 800f8f0:	f107 0314 	add.w	r3, r7, #20
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f001 fcd2 	bl	80112a0 <VL53L0X_perform_ref_spad_management>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800f902:	e009      	b.n	800f918 <VL53L0X_StaticInit+0xac>
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800f904:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f908:	461a      	mov	r2, r3
 800f90a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f001 fed3 	bl	80116b8 <VL53L0X_set_reference_spads>
 800f912:	4603      	mov	r3, r0
 800f914:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800f918:	4b94      	ldr	r3, [pc, #592]	; (800fb6c <VL53L0X_StaticInit+0x300>)
 800f91a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800f91c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f920:	2b00      	cmp	r3, #0
 800f922:	d10f      	bne.n	800f944 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev, UseInternalTuningSettings);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800f92a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		if (UseInternalTuningSettings == 0)
 800f92e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f932:	2b00      	cmp	r3, #0
 800f934:	d104      	bne.n	800f940 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev, pTuningSettingsPointer);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800f93c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f93e:	e001      	b.n	800f944 <VL53L0X_StaticInit+0xd8>
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800f940:	4b8a      	ldr	r3, [pc, #552]	; (800fb6c <VL53L0X_StaticInit+0x300>)
 800f942:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800f944:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d106      	bne.n	800f95a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800f94c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f003 fb0c 	bl	8012f6c <VL53L0X_load_tuning_settings>
 800f954:	4603      	mov	r3, r0
 800f956:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800f95a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d10a      	bne.n	800f978 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800f962:	2300      	movs	r3, #0
 800f964:	9300      	str	r3, [sp, #0]
 800f966:	2304      	movs	r3, #4
 800f968:	2200      	movs	r2, #0
 800f96a:	2100      	movs	r1, #0
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f001 f8cb 	bl	8010b08 <VL53L0X_SetGpioConfig>
 800f972:	4603      	mov	r3, r0
 800f974:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f978:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d121      	bne.n	800f9c4 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800f980:	2201      	movs	r2, #1
 800f982:	21ff      	movs	r1, #255	; 0xff
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f004 fa07 	bl	8013d98 <VL53L0X_WrByte>
 800f98a:	4603      	mov	r3, r0
 800f98c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800f990:	f107 031a 	add.w	r3, r7, #26
 800f994:	461a      	mov	r2, r3
 800f996:	2184      	movs	r1, #132	; 0x84
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f004 faa9 	bl	8013ef0 <VL53L0X_RdWord>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f9a6:	4313      	orrs	r3, r2
 800f9a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	21ff      	movs	r1, #255	; 0xff
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f004 f9f1 	bl	8013d98 <VL53L0X_WrByte>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f9be:	4313      	orrs	r3, r2
 800f9c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f9c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d105      	bne.n	800f9d8 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
 800f9cc:	8b7b      	ldrh	r3, [r7, #26]
 800f9ce:	011b      	lsls	r3, r3, #4
 800f9d0:	461a      	mov	r2, r3
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800f9d8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d108      	bne.n	800f9f2 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800f9e0:	f107 031c 	add.w	r3, r7, #28
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f000 f8c2 	bl	800fb70 <VL53L0X_GetDeviceParameters>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	if (Status == VL53L0X_ERROR_NONE) {
 800f9f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d110      	bne.n	800fa1c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800f9fa:	f107 0319 	add.w	r3, r7, #25
 800f9fe:	4619      	mov	r1, r3
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f000 f984 	bl	800fd0e <VL53L0X_GetFractionEnable>
 800fa06:	4603      	mov	r3, r0
 800fa08:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800fa0c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d103      	bne.n	800fa1c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800fa14:	7e7a      	ldrb	r2, [r7, #25]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800fa1c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d10e      	bne.n	800fa42 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f103 0410 	add.w	r4, r3, #16
 800fa2a:	f107 051c 	add.w	r5, r7, #28
 800fa2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa3a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fa3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800fa42:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d111      	bne.n	800fa6e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800fa4a:	f107 0319 	add.w	r3, r7, #25
 800fa4e:	461a      	mov	r2, r3
 800fa50:	2101      	movs	r1, #1
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f004 fa22 	bl	8013e9c <VL53L0X_RdByte>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800fa5e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d103      	bne.n	800fa6e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800fa66:	7e7a      	ldrb	r2, [r7, #25]
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800fa6e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d107      	bne.n	800fa86 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800fa76:	2200      	movs	r2, #0
 800fa78:	2100      	movs	r1, #0
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f000 f9a4 	bl	800fdc8 <VL53L0X_SetSequenceStepEnable>
 800fa80:	4603      	mov	r3, r0
 800fa82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_TCC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800fa86:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d107      	bne.n	800fa9e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800fa8e:	2200      	movs	r2, #0
 800fa90:	2102      	movs	r1, #2
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f000 f998 	bl	800fdc8 <VL53L0X_SetSequenceStepEnable>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);

	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800fa9e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d103      	bne.n	800faae <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2203      	movs	r2, #3
 800faaa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800faae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d109      	bne.n	800faca <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800fab6:	f107 0313 	add.w	r3, r7, #19
 800faba:	461a      	mov	r2, r3
 800fabc:	2100      	movs	r1, #0
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f000 f96a 	bl	800fd98 <VL53L0X_GetVcselPulsePeriod>
 800fac4:	4603      	mov	r3, r0
 800fac6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_VCSEL_PERIOD_PRE_RANGE, &vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800faca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800face:	2b00      	cmp	r3, #0
 800fad0:	d103      	bne.n	800fada <VL53L0X_StaticInit+0x26e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PreRangeVcselPulsePeriod, vcselPulsePeriodPCLK);
 800fad2:	7cfa      	ldrb	r2, [r7, #19]
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800fada:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d109      	bne.n	800faf6 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800fae2:	f107 0313 	add.w	r3, r7, #19
 800fae6:	461a      	mov	r2, r3
 800fae8:	2101      	movs	r1, #1
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f000 f954 	bl	800fd98 <VL53L0X_GetVcselPulsePeriod>
 800faf0:	4603      	mov	r3, r0
 800faf2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_VCSEL_PERIOD_FINAL_RANGE, &vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800faf6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d103      	bne.n	800fb06 <VL53L0X_StaticInit+0x29a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, FinalRangeVcselPulsePeriod, vcselPulsePeriodPCLK);
 800fafe:	7cfa      	ldrb	r2, [r7, #19]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800fb06:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d109      	bne.n	800fb22 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(Dev,
 800fb0e:	f107 030c 	add.w	r3, r7, #12
 800fb12:	461a      	mov	r2, r3
 800fb14:	2103      	movs	r1, #3
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f002 fe8c 	bl	8012834 <get_sequence_step_timeout>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_PRE_RANGE, &seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800fb22:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d103      	bne.n	800fb32 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PreRangeTimeoutMicroSecs, seqTimeoutMicroSecs);
 800fb2a:	68fa      	ldr	r2, [r7, #12]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800fb32:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d109      	bne.n	800fb4e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(Dev,
 800fb3a:	f107 030c 	add.w	r3, r7, #12
 800fb3e:	461a      	mov	r2, r3
 800fb40:	2104      	movs	r1, #4
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f002 fe76 	bl	8012834 <get_sequence_step_timeout>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, &seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800fb4e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d103      	bne.n	800fb5e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, FinalRangeTimeoutMicroSecs, seqTimeoutMicroSecs);
 800fb56:	68fa      	ldr	r2, [r7, #12]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800fb5e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3770      	adds	r7, #112	; 0x70
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bdb0      	pop	{r4, r5, r7, pc}
 800fb6a:	bf00      	nop
 800fb6c:	20000028 	.word	0x20000028

0800fb70 <VL53L0X_GetDeviceParameters>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev, VL53L0X_DeviceParameters_t *pDeviceParameters) {
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	4619      	mov	r1, r3
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f000 f8b0 	bl	800fce8 <VL53L0X_GetDeviceMode>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800fb8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d107      	bne.n	800fba4 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev, &(pDeviceParameters->InterMeasurementPeriodMilliSeconds));
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	3308      	adds	r3, #8
 800fb98:	4619      	mov	r1, r3
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f000 fa60 	bl	8010060 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800fba0:	4603      	mov	r3, r0
 800fba2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800fba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d102      	bne.n	800fbb2 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800fbb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d107      	bne.n	800fbca <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev, &(pDeviceParameters->XTalkCompensationRateMegaCps));
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	3310      	adds	r3, #16
 800fbbe:	4619      	mov	r1, r3
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f000 fa96 	bl	80100f2 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800fbca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d107      	bne.n	800fbe2 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev, &(pDeviceParameters->RangeOffsetMicroMeters));
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	3314      	adds	r3, #20
 800fbd6:	4619      	mov	r1, r3
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f7ff fcb7 	bl	800f54c <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800fbe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d134      	bne.n	800fc54 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800fbea:	2300      	movs	r3, #0
 800fbec:	60bb      	str	r3, [r7, #8]
 800fbee:	e02a      	b.n	800fc46 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800fbf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d12a      	bne.n	800fc4e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i, &(pDeviceParameters->LimitChecksValue[i]));
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	b299      	uxth	r1, r3
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	3308      	adds	r3, #8
 800fc00:	009b      	lsls	r3, r3, #2
 800fc02:	683a      	ldr	r2, [r7, #0]
 800fc04:	4413      	add	r3, r2
 800fc06:	3304      	adds	r3, #4
 800fc08:	461a      	mov	r2, r3
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f000 fbb6 	bl	801037c <VL53L0X_GetLimitCheckValue>
 800fc10:	4603      	mov	r3, r0
 800fc12:	461a      	mov	r2, r3
 800fc14:	7bfb      	ldrb	r3, [r7, #15]
 800fc16:	4313      	orrs	r3, r2
 800fc18:	73fb      	strb	r3, [r7, #15]
			}
			else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800fc1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d117      	bne.n	800fc52 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i, &(pDeviceParameters->LimitChecksEnable[i]));
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	b299      	uxth	r1, r3
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	3318      	adds	r3, #24
 800fc2a:	683a      	ldr	r2, [r7, #0]
 800fc2c:	4413      	add	r3, r2
 800fc2e:	461a      	mov	r2, r3
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 fb1d 	bl	8010270 <VL53L0X_GetLimitCheckEnable>
 800fc36:	4603      	mov	r3, r0
 800fc38:	461a      	mov	r2, r3
 800fc3a:	7bfb      	ldrb	r3, [r7, #15]
 800fc3c:	4313      	orrs	r3, r2
 800fc3e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	3301      	adds	r3, #1
 800fc44:	60bb      	str	r3, [r7, #8]
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	2b05      	cmp	r3, #5
 800fc4a:	ddd1      	ble.n	800fbf0 <VL53L0X_GetDeviceParameters+0x80>
 800fc4c:	e002      	b.n	800fc54 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800fc4e:	bf00      	nop
 800fc50:	e000      	b.n	800fc54 <VL53L0X_GetDeviceParameters+0xe4>
			}
			else {
				break;
 800fc52:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800fc54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d107      	bne.n	800fc6c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev, &(pDeviceParameters->WrapAroundCheckEnable));
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	333c      	adds	r3, #60	; 0x3c
 800fc60:	4619      	mov	r1, r3
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f000 fc18 	bl	8010498 <VL53L0X_GetWrapAroundCheckEnable>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	73fb      	strb	r3, [r7, #15]
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800fc6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d107      	bne.n	800fc84 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev, &(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	3304      	adds	r3, #4
 800fc78:	4619      	mov	r1, r3
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f000 f879 	bl	800fd72 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800fc80:	4603      	mov	r3, r0
 800fc82:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800fc84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3710      	adds	r7, #16
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode) {
 800fc90:	b480      	push	{r7}
 800fc92:	b085      	sub	sp, #20
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	460b      	mov	r3, r1
 800fc9a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800fca0:	78fb      	ldrb	r3, [r7, #3]
 800fca2:	2b15      	cmp	r3, #21
 800fca4:	bf8c      	ite	hi
 800fca6:	2201      	movhi	r2, #1
 800fca8:	2200      	movls	r2, #0
 800fcaa:	b2d2      	uxtb	r2, r2
 800fcac:	2a00      	cmp	r2, #0
 800fcae:	d10e      	bne.n	800fcce <VL53L0X_SetDeviceMode+0x3e>
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	409a      	lsls	r2, r3
 800fcb4:	4b0b      	ldr	r3, [pc, #44]	; (800fce4 <VL53L0X_SetDeviceMode+0x54>)
 800fcb6:	4013      	ands	r3, r2
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	bf14      	ite	ne
 800fcbc:	2301      	movne	r3, #1
 800fcbe:	2300      	moveq	r3, #0
 800fcc0:	b2db      	uxtb	r3, r3
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d003      	beq.n	800fcce <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	78fa      	ldrb	r2, [r7, #3]
 800fcca:	741a      	strb	r2, [r3, #16]
		break;
 800fccc:	e001      	b.n	800fcd2 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800fcce:	23f8      	movs	r3, #248	; 0xf8
 800fcd0:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800fcd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3714      	adds	r7, #20
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce0:	4770      	bx	lr
 800fce2:	bf00      	nop
 800fce4:	0030000b 	.word	0x0030000b

0800fce8 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes *pDeviceMode) {
 800fce8:	b480      	push	{r7}
 800fcea:	b085      	sub	sp, #20
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	7c1a      	ldrb	r2, [r3, #16]
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800fcfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3714      	adds	r7, #20
 800fd06:	46bd      	mov	sp, r7
 800fd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0c:	4770      	bx	lr

0800fd0e <VL53L0X_GetFractionEnable>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled) {
 800fd0e:	b580      	push	{r7, lr}
 800fd10:	b084      	sub	sp, #16
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	6078      	str	r0, [r7, #4]
 800fd16:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800fd1c:	683a      	ldr	r2, [r7, #0]
 800fd1e:	2109      	movs	r1, #9
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f004 f8bb 	bl	8013e9c <VL53L0X_RdByte>
 800fd26:	4603      	mov	r3, r0
 800fd28:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800fd2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d106      	bne.n	800fd40 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	f003 0301 	and.w	r3, r3, #1
 800fd3a:	b2da      	uxtb	r2, r3
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800fd40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3710      	adds	r7, #16
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev, uint32_t MeasurementTimingBudgetMicroSeconds) {
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b084      	sub	sp, #16
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fd56:	2300      	movs	r3, #0
 800fd58:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev, MeasurementTimingBudgetMicroSeconds);
 800fd5a:	6839      	ldr	r1, [r7, #0]
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f002 ff73 	bl	8012c48 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800fd62:	4603      	mov	r3, r0
 800fd64:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);

	return Status;
 800fd66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3710      	adds	r7, #16
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}

0800fd72 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev, uint32_t *pMeasurementTimingBudgetMicroSeconds) {
 800fd72:	b580      	push	{r7, lr}
 800fd74:	b084      	sub	sp, #16
 800fd76:	af00      	add	r7, sp, #0
 800fd78:	6078      	str	r0, [r7, #4]
 800fd7a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev, pMeasurementTimingBudgetMicroSeconds);
 800fd80:	6839      	ldr	r1, [r7, #0]
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f003 f840 	bl	8012e08 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800fd8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	3710      	adds	r7, #16
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}

0800fd98 <VL53L0X_GetVcselPulsePeriod>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev, VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK) {
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b086      	sub	sp, #24
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	60f8      	str	r0, [r7, #12]
 800fda0:	460b      	mov	r3, r1
 800fda2:	607a      	str	r2, [r7, #4]
 800fda4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fda6:	2300      	movs	r3, #0
 800fda8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType, pVCSELPulsePeriodPCLK);
 800fdaa:	7afb      	ldrb	r3, [r7, #11]
 800fdac:	687a      	ldr	r2, [r7, #4]
 800fdae:	4619      	mov	r1, r3
 800fdb0:	68f8      	ldr	r0, [r7, #12]
 800fdb2:	f002 ff12 	bl	8012bda <VL53L0X_get_vcsel_pulse_period>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800fdba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3718      	adds	r7, #24
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
	...

0800fdc8 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev, VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled) {
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b086      	sub	sp, #24
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	70fb      	strb	r3, [r7, #3]
 800fdd4:	4613      	mov	r3, r2
 800fdd6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800fddc:	2300      	movs	r3, #0
 800fdde:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800fde0:	2300      	movs	r3, #0
 800fde2:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &SequenceConfig);
 800fde4:	f107 030f 	add.w	r3, r7, #15
 800fde8:	461a      	mov	r2, r3
 800fdea:	2101      	movs	r1, #1
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f004 f855 	bl	8013e9c <VL53L0X_RdByte>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	75fb      	strb	r3, [r7, #23]

	SequenceConfigNew = SequenceConfig;
 800fdf6:	7bfb      	ldrb	r3, [r7, #15]
 800fdf8:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800fdfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d15a      	bne.n	800feb8 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800fe02:	78bb      	ldrb	r3, [r7, #2]
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	d12b      	bne.n	800fe60 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800fe08:	78fb      	ldrb	r3, [r7, #3]
 800fe0a:	2b04      	cmp	r3, #4
 800fe0c:	d825      	bhi.n	800fe5a <VL53L0X_SetSequenceStepEnable+0x92>
 800fe0e:	a201      	add	r2, pc, #4	; (adr r2, 800fe14 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800fe10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe14:	0800fe29 	.word	0x0800fe29
 800fe18:	0800fe33 	.word	0x0800fe33
 800fe1c:	0800fe3d 	.word	0x0800fe3d
 800fe20:	0800fe47 	.word	0x0800fe47
 800fe24:	0800fe51 	.word	0x0800fe51
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800fe28:	7dbb      	ldrb	r3, [r7, #22]
 800fe2a:	f043 0310 	orr.w	r3, r3, #16
 800fe2e:	75bb      	strb	r3, [r7, #22]
				break;
 800fe30:	e043      	b.n	800feba <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800fe32:	7dbb      	ldrb	r3, [r7, #22]
 800fe34:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800fe38:	75bb      	strb	r3, [r7, #22]
				break;
 800fe3a:	e03e      	b.n	800feba <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800fe3c:	7dbb      	ldrb	r3, [r7, #22]
 800fe3e:	f043 0304 	orr.w	r3, r3, #4
 800fe42:	75bb      	strb	r3, [r7, #22]
				break;
 800fe44:	e039      	b.n	800feba <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800fe46:	7dbb      	ldrb	r3, [r7, #22]
 800fe48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe4c:	75bb      	strb	r3, [r7, #22]
				break;
 800fe4e:	e034      	b.n	800feba <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800fe50:	7dbb      	ldrb	r3, [r7, #22]
 800fe52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fe56:	75bb      	strb	r3, [r7, #22]
				break;
 800fe58:	e02f      	b.n	800feba <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800fe5a:	23fc      	movs	r3, #252	; 0xfc
 800fe5c:	75fb      	strb	r3, [r7, #23]
 800fe5e:	e02c      	b.n	800feba <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
		else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800fe60:	78fb      	ldrb	r3, [r7, #3]
 800fe62:	2b04      	cmp	r3, #4
 800fe64:	d825      	bhi.n	800feb2 <VL53L0X_SetSequenceStepEnable+0xea>
 800fe66:	a201      	add	r2, pc, #4	; (adr r2, 800fe6c <VL53L0X_SetSequenceStepEnable+0xa4>)
 800fe68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe6c:	0800fe81 	.word	0x0800fe81
 800fe70:	0800fe8b 	.word	0x0800fe8b
 800fe74:	0800fe95 	.word	0x0800fe95
 800fe78:	0800fe9f 	.word	0x0800fe9f
 800fe7c:	0800fea9 	.word	0x0800fea9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800fe80:	7dbb      	ldrb	r3, [r7, #22]
 800fe82:	f023 0310 	bic.w	r3, r3, #16
 800fe86:	75bb      	strb	r3, [r7, #22]
				break;
 800fe88:	e017      	b.n	800feba <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800fe8a:	7dbb      	ldrb	r3, [r7, #22]
 800fe8c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800fe90:	75bb      	strb	r3, [r7, #22]
				break;
 800fe92:	e012      	b.n	800feba <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800fe94:	7dbb      	ldrb	r3, [r7, #22]
 800fe96:	f023 0304 	bic.w	r3, r3, #4
 800fe9a:	75bb      	strb	r3, [r7, #22]
				break;
 800fe9c:	e00d      	b.n	800feba <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800fe9e:	7dbb      	ldrb	r3, [r7, #22]
 800fea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fea4:	75bb      	strb	r3, [r7, #22]
				break;
 800fea6:	e008      	b.n	800feba <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800fea8:	7dbb      	ldrb	r3, [r7, #22]
 800feaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800feae:	75bb      	strb	r3, [r7, #22]
				break;
 800feb0:	e003      	b.n	800feba <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800feb2:	23fc      	movs	r3, #252	; 0xfc
 800feb4:	75fb      	strb	r3, [r7, #23]
 800feb6:	e000      	b.n	800feba <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800feb8:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800feba:	7bfb      	ldrb	r3, [r7, #15]
 800febc:	7dba      	ldrb	r2, [r7, #22]
 800febe:	429a      	cmp	r2, r3
 800fec0:	d01e      	beq.n	800ff00 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800fec2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d107      	bne.n	800feda <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800feca:	7dbb      	ldrb	r3, [r7, #22]
 800fecc:	461a      	mov	r2, r3
 800fece:	2101      	movs	r1, #1
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f003 ff61 	bl	8013d98 <VL53L0X_WrByte>
 800fed6:	4603      	mov	r3, r0
 800fed8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800feda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d103      	bne.n	800feea <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	7dba      	ldrb	r2, [r7, #22]
 800fee6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800feea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d106      	bne.n	800ff00 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev, MeasurementTimingBudgetMicroSeconds, MeasurementTimingBudgetMicroSeconds);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	695b      	ldr	r3, [r3, #20]
 800fef6:	613b      	str	r3, [r7, #16]

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, MeasurementTimingBudgetMicroSeconds);
 800fef8:	6939      	ldr	r1, [r7, #16]
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	f7ff ff26 	bl	800fd4c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800ff00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	3718      	adds	r7, #24
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev, VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig, uint8_t *pSequenceStepEnabled) {
 800ff0c:	b480      	push	{r7}
 800ff0e:	b087      	sub	sp, #28
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	60f8      	str	r0, [r7, #12]
 800ff14:	607b      	str	r3, [r7, #4]
 800ff16:	460b      	mov	r3, r1
 800ff18:	72fb      	strb	r3, [r7, #11]
 800ff1a:	4613      	mov	r3, r2
 800ff1c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2200      	movs	r2, #0
 800ff26:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800ff28:	7afb      	ldrb	r3, [r7, #11]
 800ff2a:	2b04      	cmp	r3, #4
 800ff2c:	d836      	bhi.n	800ff9c <sequence_step_enabled+0x90>
 800ff2e:	a201      	add	r2, pc, #4	; (adr r2, 800ff34 <sequence_step_enabled+0x28>)
 800ff30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff34:	0800ff49 	.word	0x0800ff49
 800ff38:	0800ff5b 	.word	0x0800ff5b
 800ff3c:	0800ff6d 	.word	0x0800ff6d
 800ff40:	0800ff7f 	.word	0x0800ff7f
 800ff44:	0800ff91 	.word	0x0800ff91
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800ff48:	7abb      	ldrb	r3, [r7, #10]
 800ff4a:	111b      	asrs	r3, r3, #4
 800ff4c:	b2db      	uxtb	r3, r3
 800ff4e:	f003 0301 	and.w	r3, r3, #1
 800ff52:	b2da      	uxtb	r2, r3
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	701a      	strb	r2, [r3, #0]
		break;
 800ff58:	e022      	b.n	800ffa0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800ff5a:	7abb      	ldrb	r3, [r7, #10]
 800ff5c:	10db      	asrs	r3, r3, #3
 800ff5e:	b2db      	uxtb	r3, r3
 800ff60:	f003 0301 	and.w	r3, r3, #1
 800ff64:	b2da      	uxtb	r2, r3
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	701a      	strb	r2, [r3, #0]
		break;
 800ff6a:	e019      	b.n	800ffa0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800ff6c:	7abb      	ldrb	r3, [r7, #10]
 800ff6e:	109b      	asrs	r3, r3, #2
 800ff70:	b2db      	uxtb	r3, r3
 800ff72:	f003 0301 	and.w	r3, r3, #1
 800ff76:	b2da      	uxtb	r2, r3
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	701a      	strb	r2, [r3, #0]
		break;
 800ff7c:	e010      	b.n	800ffa0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800ff7e:	7abb      	ldrb	r3, [r7, #10]
 800ff80:	119b      	asrs	r3, r3, #6
 800ff82:	b2db      	uxtb	r3, r3
 800ff84:	f003 0301 	and.w	r3, r3, #1
 800ff88:	b2da      	uxtb	r2, r3
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	701a      	strb	r2, [r3, #0]
		break;
 800ff8e:	e007      	b.n	800ffa0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800ff90:	7abb      	ldrb	r3, [r7, #10]
 800ff92:	09db      	lsrs	r3, r3, #7
 800ff94:	b2da      	uxtb	r2, r3
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	701a      	strb	r2, [r3, #0]
		break;
 800ff9a:	e001      	b.n	800ffa0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ff9c:	23fc      	movs	r3, #252	; 0xfc
 800ff9e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ffa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	371c      	adds	r7, #28
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffae:	4770      	bx	lr

0800ffb0 <VL53L0X_GetSequenceStepEnables>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev, VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps) {
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b084      	sub	sp, #16
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &SequenceConfig);
 800ffc2:	f107 030e 	add.w	r3, r7, #14
 800ffc6:	461a      	mov	r2, r3
 800ffc8:	2101      	movs	r1, #1
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f003 ff66 	bl	8013e9c <VL53L0X_RdByte>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800ffd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d107      	bne.n	800ffec <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800ffdc:	7bba      	ldrb	r2, [r7, #14]
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	2100      	movs	r1, #0
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f7ff ff92 	bl	800ff0c <sequence_step_enabled>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig, &pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ffec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d108      	bne.n	8010006 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800fff4:	7bba      	ldrb	r2, [r7, #14]
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	3302      	adds	r3, #2
 800fffa:	2101      	movs	r1, #1
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f7ff ff85 	bl	800ff0c <sequence_step_enabled>
 8010002:	4603      	mov	r3, r0
 8010004:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig, &pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8010006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d108      	bne.n	8010020 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 801000e:	7bba      	ldrb	r2, [r7, #14]
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	3301      	adds	r3, #1
 8010014:	2102      	movs	r1, #2
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f7ff ff78 	bl	800ff0c <sequence_step_enabled>
 801001c:	4603      	mov	r3, r0
 801001e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig, &pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8010020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d108      	bne.n	801003a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8010028:	7bba      	ldrb	r2, [r7, #14]
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	3303      	adds	r3, #3
 801002e:	2103      	movs	r1, #3
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f7ff ff6b 	bl	800ff0c <sequence_step_enabled>
 8010036:	4603      	mov	r3, r0
 8010038:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig, &pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 801003a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d108      	bne.n	8010054 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8010042:	7bba      	ldrb	r2, [r7, #14]
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	3304      	adds	r3, #4
 8010048:	2104      	movs	r1, #4
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f7ff ff5e 	bl	800ff0c <sequence_step_enabled>
 8010050:	4603      	mov	r3, r0
 8010052:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig, &pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8010054:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010058:	4618      	mov	r0, r3
 801005a:	3710      	adds	r7, #16
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}

08010060 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev, uint32_t *pInterMeasurementPeriodMilliSeconds) {
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801006a:	2300      	movs	r3, #0
 801006c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL, &osc_calibrate_val);
 801006e:	f107 030c 	add.w	r3, r7, #12
 8010072:	461a      	mov	r2, r3
 8010074:	21f8      	movs	r1, #248	; 0xf8
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f003 ff3a 	bl	8013ef0 <VL53L0X_RdWord>
 801007c:	4603      	mov	r3, r0
 801007e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 8010080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d108      	bne.n	801009a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8010088:	f107 0308 	add.w	r3, r7, #8
 801008c:	461a      	mov	r2, r3
 801008e:	2104      	movs	r1, #4
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f003 ff65 	bl	8013f60 <VL53L0X_RdDWord>
 8010096:	4603      	mov	r3, r0
 8010098:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD, &IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 801009a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d10c      	bne.n	80100bc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80100a2:	89bb      	ldrh	r3, [r7, #12]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d005      	beq.n	80100b4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds = IMPeriodMilliSeconds / osc_calibrate_val;
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	89ba      	ldrh	r2, [r7, #12]
 80100ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev, InterMeasurementPeriodMilliSeconds, *pInterMeasurementPeriodMilliSeconds);
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	681a      	ldr	r2, [r3, #0]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	619a      	str	r2, [r3, #24]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80100bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3710      	adds	r7, #16
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}

080100c8 <VL53L0X_GetXTalkCompensationEnable>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev, uint8_t *pXTalkCompensationEnable) {
 80100c8:	b480      	push	{r7}
 80100ca:	b085      	sub	sp, #20
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80100d2:	2300      	movs	r3, #0
 80100d4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	7f1b      	ldrb	r3, [r3, #28]
 80100da:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	7bba      	ldrb	r2, [r7, #14]
 80100e0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80100e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	3714      	adds	r7, #20
 80100ea:	46bd      	mov	sp, r7
 80100ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f0:	4770      	bx	lr

080100f2 <VL53L0X_GetXTalkCompensationRateMegaCps>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev, FixPoint1616_t *pXTalkCompensationRateMegaCps) {
 80100f2:	b580      	push	{r7, lr}
 80100f4:	b086      	sub	sp, #24
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	6078      	str	r0, [r7, #4]
 80100fa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80100fc:	2300      	movs	r3, #0
 80100fe:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8010100:	f107 030e 	add.w	r3, r7, #14
 8010104:	461a      	mov	r2, r3
 8010106:	2120      	movs	r1, #32
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f003 fef1 	bl	8013ef0 <VL53L0X_RdWord>
 801010e:	4603      	mov	r3, r0
 8010110:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t*) &Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8010112:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d118      	bne.n	801014c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 801011a:	89fb      	ldrh	r3, [r7, #14]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d109      	bne.n	8010134 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, TempFix1616);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6a1b      	ldr	r3, [r3, #32]
 8010124:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	693a      	ldr	r2, [r7, #16]
 801012a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable, 0);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2200      	movs	r2, #0
 8010130:	771a      	strb	r2, [r3, #28]
 8010132:	e00b      	b.n	801014c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		}
		else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8010134:	89fb      	ldrh	r3, [r7, #14]
 8010136:	00db      	lsls	r3, r3, #3
 8010138:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	693a      	ldr	r2, [r7, #16]
 801013e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, TempFix1616);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	693a      	ldr	r2, [r7, #16]
 8010144:	621a      	str	r2, [r3, #32]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable, 1);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	2201      	movs	r2, #1
 801014a:	771a      	strb	r2, [r3, #28]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 801014c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010150:	4618      	mov	r0, r3
 8010152:	3718      	adds	r7, #24
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}

08010158 <VL53L0X_SetLimitCheckEnable>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId, uint8_t LimitCheckEnable) {
 8010158:	b580      	push	{r7, lr}
 801015a:	b086      	sub	sp, #24
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
 8010160:	460b      	mov	r3, r1
 8010162:	807b      	strh	r3, [r7, #2]
 8010164:	4613      	mov	r3, r2
 8010166:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010168:	2300      	movs	r3, #0
 801016a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 801016c:	2300      	movs	r3, #0
 801016e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8010170:	2300      	movs	r3, #0
 8010172:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8010174:	2300      	movs	r3, #0
 8010176:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8010178:	887b      	ldrh	r3, [r7, #2]
 801017a:	2b05      	cmp	r3, #5
 801017c:	d902      	bls.n	8010184 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 801017e:	23fc      	movs	r3, #252	; 0xfc
 8010180:	75fb      	strb	r3, [r7, #23]
 8010182:	e05b      	b.n	801023c <VL53L0X_SetLimitCheckEnable+0xe4>
	}
	else {
		if (LimitCheckEnable == 0) {
 8010184:	787b      	ldrb	r3, [r7, #1]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d106      	bne.n	8010198 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 801018a:	2300      	movs	r3, #0
 801018c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 801018e:	2300      	movs	r3, #0
 8010190:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8010192:	2301      	movs	r3, #1
 8010194:	73bb      	strb	r3, [r7, #14]
 8010196:	e00a      	b.n	80101ae <VL53L0X_SetLimitCheckEnable+0x56>

		}
		else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId, TempFix1616);
 8010198:	887b      	ldrh	r3, [r7, #2]
 801019a:	687a      	ldr	r2, [r7, #4]
 801019c:	330c      	adds	r3, #12
 801019e:	009b      	lsls	r3, r3, #2
 80101a0:	4413      	add	r3, r2
 80101a2:	685b      	ldr	r3, [r3, #4]
 80101a4:	613b      	str	r3, [r7, #16]
			LimitCheckDisable = 0;
 80101a6:	2300      	movs	r3, #0
 80101a8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80101aa:	2301      	movs	r3, #1
 80101ac:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80101ae:	887b      	ldrh	r3, [r7, #2]
 80101b0:	2b05      	cmp	r3, #5
 80101b2:	d841      	bhi.n	8010238 <VL53L0X_SetLimitCheckEnable+0xe0>
 80101b4:	a201      	add	r2, pc, #4	; (adr r2, 80101bc <VL53L0X_SetLimitCheckEnable+0x64>)
 80101b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ba:	bf00      	nop
 80101bc:	080101d5 	.word	0x080101d5
 80101c0:	080101df 	.word	0x080101df
 80101c4:	080101f5 	.word	0x080101f5
 80101c8:	080101ff 	.word	0x080101ff
 80101cc:	08010209 	.word	0x08010209
 80101d0:	08010221 	.word	0x08010221

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, LimitCheckEnableInt);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	7bfa      	ldrb	r2, [r7, #15]
 80101d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			break;
 80101dc:	e02e      	b.n	801023c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80101e2:	b29b      	uxth	r3, r3
 80101e4:	461a      	mov	r2, r3
 80101e6:	2144      	movs	r1, #68	; 0x44
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f003 fdf9 	bl	8013de0 <VL53L0X_WrWord>
 80101ee:	4603      	mov	r3, r0
 80101f0:	75fb      	strb	r3, [r7, #23]

			break;
 80101f2:	e023      	b.n	801023c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, LimitCheckEnableInt);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	7bfa      	ldrb	r2, [r7, #15]
 80101f8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

			break;
 80101fc:	e01e      	b.n	801023c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, LimitCheckEnableInt);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	7bfa      	ldrb	r2, [r7, #15]
 8010202:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

			break;
 8010206:	e019      	b.n	801023c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t) (LimitCheckDisable << 1);
 8010208:	7bbb      	ldrb	r3, [r7, #14]
 801020a:	005b      	lsls	r3, r3, #1
 801020c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 801020e:	7b7b      	ldrb	r3, [r7, #13]
 8010210:	22fe      	movs	r2, #254	; 0xfe
 8010212:	2160      	movs	r1, #96	; 0x60
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f003 fe0d 	bl	8013e34 <VL53L0X_UpdateByte>
 801021a:	4603      	mov	r3, r0
 801021c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_MSRC_CONFIG_CONTROL, 0xFE, Temp8);

			break;
 801021e:	e00d      	b.n	801023c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t) (LimitCheckDisable << 4);
 8010220:	7bbb      	ldrb	r3, [r7, #14]
 8010222:	011b      	lsls	r3, r3, #4
 8010224:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8010226:	7b7b      	ldrb	r3, [r7, #13]
 8010228:	22ef      	movs	r2, #239	; 0xef
 801022a:	2160      	movs	r1, #96	; 0x60
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f003 fe01 	bl	8013e34 <VL53L0X_UpdateByte>
 8010232:	4603      	mov	r3, r0
 8010234:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_MSRC_CONFIG_CONTROL, 0xEF, Temp8);

			break;
 8010236:	e001      	b.n	801023c <VL53L0X_SetLimitCheckEnable+0xe4>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8010238:	23fc      	movs	r3, #252	; 0xfc
 801023a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 801023c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d10f      	bne.n	8010264 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8010244:	787b      	ldrb	r3, [r7, #1]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d106      	bne.n	8010258 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 0);
 801024a:	887b      	ldrh	r3, [r7, #2]
 801024c:	687a      	ldr	r2, [r7, #4]
 801024e:	4413      	add	r3, r2
 8010250:	2200      	movs	r2, #0
 8010252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8010256:	e005      	b.n	8010264 <VL53L0X_SetLimitCheckEnable+0x10c>
		}
		else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 1);
 8010258:	887b      	ldrh	r3, [r7, #2]
 801025a:	687a      	ldr	r2, [r7, #4]
 801025c:	4413      	add	r3, r2
 801025e:	2201      	movs	r2, #1
 8010260:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8010264:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010268:	4618      	mov	r0, r3
 801026a:	3718      	adds	r7, #24
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}

08010270 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId, uint8_t *pLimitCheckEnable) {
 8010270:	b480      	push	{r7}
 8010272:	b087      	sub	sp, #28
 8010274:	af00      	add	r7, sp, #0
 8010276:	60f8      	str	r0, [r7, #12]
 8010278:	460b      	mov	r3, r1
 801027a:	607a      	str	r2, [r7, #4]
 801027c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801027e:	2300      	movs	r3, #0
 8010280:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8010282:	897b      	ldrh	r3, [r7, #10]
 8010284:	2b05      	cmp	r3, #5
 8010286:	d905      	bls.n	8010294 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8010288:	23fc      	movs	r3, #252	; 0xfc
 801028a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2200      	movs	r2, #0
 8010290:	701a      	strb	r2, [r3, #0]
 8010292:	e008      	b.n	80102a6 <VL53L0X_GetLimitCheckEnable+0x36>
	}
	else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, Temp8);
 8010294:	897b      	ldrh	r3, [r7, #10]
 8010296:	68fa      	ldr	r2, [r7, #12]
 8010298:	4413      	add	r3, r2
 801029a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801029e:	75bb      	strb	r3, [r7, #22]
		*pLimitCheckEnable = Temp8;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	7dba      	ldrb	r2, [r7, #22]
 80102a4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80102a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80102aa:	4618      	mov	r0, r3
 80102ac:	371c      	adds	r7, #28
 80102ae:	46bd      	mov	sp, r7
 80102b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b4:	4770      	bx	lr
	...

080102b8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId, FixPoint1616_t LimitCheckValue) {
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b086      	sub	sp, #24
 80102bc:	af00      	add	r7, sp, #0
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	460b      	mov	r3, r1
 80102c2:	607a      	str	r2, [r7, #4]
 80102c4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80102c6:	2300      	movs	r3, #0
 80102c8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, Temp8);
 80102ca:	897b      	ldrh	r3, [r7, #10]
 80102cc:	68fa      	ldr	r2, [r7, #12]
 80102ce:	4413      	add	r3, r2
 80102d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80102d4:	75bb      	strb	r3, [r7, #22]

	if (Temp8 == 0) { /* disabled write only internal value */
 80102d6:	7dbb      	ldrb	r3, [r7, #22]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d107      	bne.n	80102ec <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId, LimitCheckValue);
 80102dc:	897b      	ldrh	r3, [r7, #10]
 80102de:	68fa      	ldr	r2, [r7, #12]
 80102e0:	330c      	adds	r3, #12
 80102e2:	009b      	lsls	r3, r3, #2
 80102e4:	4413      	add	r3, r2
 80102e6:	687a      	ldr	r2, [r7, #4]
 80102e8:	605a      	str	r2, [r3, #4]
 80102ea:	e040      	b.n	801036e <VL53L0X_SetLimitCheckValue+0xb6>
	}
	else {

		switch (LimitCheckId) {
 80102ec:	897b      	ldrh	r3, [r7, #10]
 80102ee:	2b05      	cmp	r3, #5
 80102f0:	d830      	bhi.n	8010354 <VL53L0X_SetLimitCheckValue+0x9c>
 80102f2:	a201      	add	r2, pc, #4	; (adr r2, 80102f8 <VL53L0X_SetLimitCheckValue+0x40>)
 80102f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102f8:	08010311 	.word	0x08010311
 80102fc:	08010319 	.word	0x08010319
 8010300:	0801032f 	.word	0x0801032f
 8010304:	08010337 	.word	0x08010337
 8010308:	0801033f 	.word	0x0801033f
 801030c:	0801033f 	.word	0x0801033f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, LimitCheckValue);
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	687a      	ldr	r2, [r7, #4]
 8010314:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8010316:	e01f      	b.n	8010358 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, VL53L0X_FIXPOINT1616TOFIXPOINT97(LimitCheckValue));
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 801031c:	b29b      	uxth	r3, r3
 801031e:	461a      	mov	r2, r3
 8010320:	2144      	movs	r1, #68	; 0x44
 8010322:	68f8      	ldr	r0, [r7, #12]
 8010324:	f003 fd5c 	bl	8013de0 <VL53L0X_WrWord>
 8010328:	4603      	mov	r3, r0
 801032a:	75fb      	strb	r3, [r7, #23]

			break;
 801032c:	e014      	b.n	8010358 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, LimitCheckValue);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	687a      	ldr	r2, [r7, #4]
 8010332:	63da      	str	r2, [r3, #60]	; 0x3c

			break;
 8010334:	e010      	b.n	8010358 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, LimitCheckValue);
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	687a      	ldr	r2, [r7, #4]
 801033a:	641a      	str	r2, [r3, #64]	; 0x40

			break;
 801033c:	e00c      	b.n	8010358 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT, VL53L0X_FIXPOINT1616TOFIXPOINT97(LimitCheckValue));
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8010342:	b29b      	uxth	r3, r3
 8010344:	461a      	mov	r2, r3
 8010346:	2164      	movs	r1, #100	; 0x64
 8010348:	68f8      	ldr	r0, [r7, #12]
 801034a:	f003 fd49 	bl	8013de0 <VL53L0X_WrWord>
 801034e:	4603      	mov	r3, r0
 8010350:	75fb      	strb	r3, [r7, #23]

			break;
 8010352:	e001      	b.n	8010358 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8010354:	23fc      	movs	r3, #252	; 0xfc
 8010356:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8010358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d106      	bne.n	801036e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId, LimitCheckValue);
 8010360:	897b      	ldrh	r3, [r7, #10]
 8010362:	68fa      	ldr	r2, [r7, #12]
 8010364:	330c      	adds	r3, #12
 8010366:	009b      	lsls	r3, r3, #2
 8010368:	4413      	add	r3, r2
 801036a:	687a      	ldr	r2, [r7, #4]
 801036c:	605a      	str	r2, [r3, #4]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 801036e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010372:	4618      	mov	r0, r3
 8010374:	3718      	adds	r7, #24
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
 801037a:	bf00      	nop

0801037c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId, FixPoint1616_t *pLimitCheckValue) {
 801037c:	b580      	push	{r7, lr}
 801037e:	b088      	sub	sp, #32
 8010380:	af00      	add	r7, sp, #0
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	460b      	mov	r3, r1
 8010386:	607a      	str	r2, [r7, #4]
 8010388:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801038a:	2300      	movs	r3, #0
 801038c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 801038e:	2300      	movs	r3, #0
 8010390:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8010392:	897b      	ldrh	r3, [r7, #10]
 8010394:	2b05      	cmp	r3, #5
 8010396:	d847      	bhi.n	8010428 <VL53L0X_GetLimitCheckValue+0xac>
 8010398:	a201      	add	r2, pc, #4	; (adr r2, 80103a0 <VL53L0X_GetLimitCheckValue+0x24>)
 801039a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801039e:	bf00      	nop
 80103a0:	080103b9 	.word	0x080103b9
 80103a4:	080103c5 	.word	0x080103c5
 80103a8:	080103eb 	.word	0x080103eb
 80103ac:	080103f7 	.word	0x080103f7
 80103b0:	08010403 	.word	0x08010403
 80103b4:	08010403 	.word	0x08010403

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103bc:	61bb      	str	r3, [r7, #24]
		EnableZeroValue = 0;
 80103be:	2300      	movs	r3, #0
 80103c0:	77bb      	strb	r3, [r7, #30]
		break;
 80103c2:	e033      	b.n	801042c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80103c4:	f107 0316 	add.w	r3, r7, #22
 80103c8:	461a      	mov	r2, r3
 80103ca:	2144      	movs	r1, #68	; 0x44
 80103cc:	68f8      	ldr	r0, [r7, #12]
 80103ce:	f003 fd8f 	bl	8013ef0 <VL53L0X_RdWord>
 80103d2:	4603      	mov	r3, r0
 80103d4:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, &Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80103d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d102      	bne.n	80103e4 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80103de:	8afb      	ldrh	r3, [r7, #22]
 80103e0:	025b      	lsls	r3, r3, #9
 80103e2:	61bb      	str	r3, [r7, #24]

		EnableZeroValue = 1;
 80103e4:	2301      	movs	r3, #1
 80103e6:	77bb      	strb	r3, [r7, #30]
		break;
 80103e8:	e020      	b.n	801042c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103ee:	61bb      	str	r3, [r7, #24]
		EnableZeroValue = 0;
 80103f0:	2300      	movs	r3, #0
 80103f2:	77bb      	strb	r3, [r7, #30]
		break;
 80103f4:	e01a      	b.n	801042c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103fa:	61bb      	str	r3, [r7, #24]
		EnableZeroValue = 0;
 80103fc:	2300      	movs	r3, #0
 80103fe:	77bb      	strb	r3, [r7, #30]
		break;
 8010400:	e014      	b.n	801042c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8010402:	f107 0316 	add.w	r3, r7, #22
 8010406:	461a      	mov	r2, r3
 8010408:	2164      	movs	r1, #100	; 0x64
 801040a:	68f8      	ldr	r0, [r7, #12]
 801040c:	f003 fd70 	bl	8013ef0 <VL53L0X_RdWord>
 8010410:	4603      	mov	r3, r0
 8010412:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT, &Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8010414:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d102      	bne.n	8010422 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 801041c:	8afb      	ldrh	r3, [r7, #22]
 801041e:	025b      	lsls	r3, r3, #9
 8010420:	61bb      	str	r3, [r7, #24]

		EnableZeroValue = 0;
 8010422:	2300      	movs	r3, #0
 8010424:	77bb      	strb	r3, [r7, #30]
		break;
 8010426:	e001      	b.n	801042c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8010428:	23fc      	movs	r3, #252	; 0xfc
 801042a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 801042c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d12a      	bne.n	801048a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8010434:	7fbb      	ldrb	r3, [r7, #30]
 8010436:	2b01      	cmp	r3, #1
 8010438:	d124      	bne.n	8010484 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 801043a:	69bb      	ldr	r3, [r7, #24]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d110      	bne.n	8010462 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId, TempFix1616);
 8010440:	897b      	ldrh	r3, [r7, #10]
 8010442:	68fa      	ldr	r2, [r7, #12]
 8010444:	330c      	adds	r3, #12
 8010446:	009b      	lsls	r3, r3, #2
 8010448:	4413      	add	r3, r2
 801044a:	685b      	ldr	r3, [r3, #4]
 801044c:	61bb      	str	r3, [r7, #24]
				*pLimitCheckValue = TempFix1616;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	69ba      	ldr	r2, [r7, #24]
 8010452:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 0);
 8010454:	897b      	ldrh	r3, [r7, #10]
 8010456:	68fa      	ldr	r2, [r7, #12]
 8010458:	4413      	add	r3, r2
 801045a:	2200      	movs	r2, #0
 801045c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8010460:	e013      	b.n	801048a <VL53L0X_GetLimitCheckValue+0x10e>
			}
			else {
				*pLimitCheckValue = TempFix1616;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	69ba      	ldr	r2, [r7, #24]
 8010466:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId, TempFix1616);
 8010468:	897b      	ldrh	r3, [r7, #10]
 801046a:	68fa      	ldr	r2, [r7, #12]
 801046c:	330c      	adds	r3, #12
 801046e:	009b      	lsls	r3, r3, #2
 8010470:	4413      	add	r3, r2
 8010472:	69ba      	ldr	r2, [r7, #24]
 8010474:	605a      	str	r2, [r3, #4]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 1);
 8010476:	897b      	ldrh	r3, [r7, #10]
 8010478:	68fa      	ldr	r2, [r7, #12]
 801047a:	4413      	add	r3, r2
 801047c:	2201      	movs	r2, #1
 801047e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8010482:	e002      	b.n	801048a <VL53L0X_GetLimitCheckValue+0x10e>
			}
		}
		else {
			*pLimitCheckValue = TempFix1616;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	69ba      	ldr	r2, [r7, #24]
 8010488:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 801048a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 801048e:	4618      	mov	r0, r3
 8010490:	3720      	adds	r7, #32
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}
 8010496:	bf00      	nop

08010498 <VL53L0X_GetWrapAroundCheckEnable>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev, uint8_t *pWrapAroundCheckEnable) {
 8010498:	b580      	push	{r7, lr}
 801049a:	b084      	sub	sp, #16
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
 80104a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80104a2:	2300      	movs	r3, #0
 80104a4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80104a6:	f107 030e 	add.w	r3, r7, #14
 80104aa:	461a      	mov	r2, r3
 80104ac:	2101      	movs	r1, #1
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f003 fcf4 	bl	8013e9c <VL53L0X_RdByte>
 80104b4:	4603      	mov	r3, r0
 80104b6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80104b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d10e      	bne.n	80104de <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80104c0:	7bba      	ldrb	r2, [r7, #14]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80104c8:	7bbb      	ldrb	r3, [r7, #14]
 80104ca:	b25b      	sxtb	r3, r3
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	da03      	bge.n	80104d8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	2201      	movs	r2, #1
 80104d4:	701a      	strb	r2, [r3, #0]
 80104d6:	e002      	b.n	80104de <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	2200      	movs	r2, #0
 80104dc:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80104de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d104      	bne.n	80104f0 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable, *pWrapAroundCheckEnable);
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	781a      	ldrb	r2, [r3, #0]
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80104f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3710      	adds	r7, #16
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <VL53L0X_PerformSingleMeasurement>:
}

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev) {
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b084      	sub	sp, #16
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010504:	2300      	movs	r3, #0
 8010506:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8010508:	f107 030e 	add.w	r3, r7, #14
 801050c:	4619      	mov	r1, r3
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f7ff fbea 	bl	800fce8 <VL53L0X_GetDeviceMode>
 8010514:	4603      	mov	r3, r0
 8010516:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE && DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8010518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d107      	bne.n	8010530 <VL53L0X_PerformSingleMeasurement+0x34>
 8010520:	7bbb      	ldrb	r3, [r7, #14]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d104      	bne.n	8010530 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f000 f898 	bl	801065c <VL53L0X_StartMeasurement>
 801052c:	4603      	mov	r3, r0
 801052e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8010530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d104      	bne.n	8010542 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f001 fb3f 	bl	8011bbc <VL53L0X_measurement_poll_for_completion>
 801053e:	4603      	mov	r3, r0
 8010540:	73fb      	strb	r3, [r7, #15]

	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE && DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8010542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d106      	bne.n	8010558 <VL53L0X_PerformSingleMeasurement+0x5c>
 801054a:	7bbb      	ldrb	r3, [r7, #14]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d103      	bne.n	8010558 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2203      	movs	r2, #3
 8010554:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

	LOG_FUNCTION_END(Status);
	return Status;
 8010558:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801055c:	4618      	mov	r0, r3
 801055e:	3710      	adds	r7, #16
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <VL53L0X_PerformRefCalibration>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings, uint8_t *pPhaseCal) {
 8010564:	b580      	push	{r7, lr}
 8010566:	b086      	sub	sp, #24
 8010568:	af00      	add	r7, sp, #0
 801056a:	60f8      	str	r0, [r7, #12]
 801056c:	60b9      	str	r1, [r7, #8]
 801056e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010570:	2300      	movs	r3, #0
 8010572:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings, pPhaseCal, 1);
 8010574:	2301      	movs	r3, #1
 8010576:	687a      	ldr	r2, [r7, #4]
 8010578:	68b9      	ldr	r1, [r7, #8]
 801057a:	68f8      	ldr	r0, [r7, #12]
 801057c:	f001 fae1 	bl	8011b42 <VL53L0X_perform_ref_calibration>
 8010580:	4603      	mov	r3, r0
 8010582:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8010584:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010588:	4618      	mov	r0, r3
 801058a:	3718      	adds	r7, #24
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}

08010590 <VL53L0X_CheckAndLoadInterruptSettings>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev, uint8_t StartNotStopFlag) {
 8010590:	b580      	push	{r7, lr}
 8010592:	b086      	sub	sp, #24
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	460b      	mov	r3, r1
 801059a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801059c:	2300      	movs	r3, #0
 801059e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80105a6:	75bb      	strb	r3, [r7, #22]

	if ((InterruptConfig ==
 80105a8:	7dbb      	ldrb	r3, [r7, #22]
 80105aa:	2b01      	cmp	r3, #1
 80105ac:	d005      	beq.n	80105ba <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
	VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) || (InterruptConfig ==
 80105ae:	7dbb      	ldrb	r3, [r7, #22]
 80105b0:	2b02      	cmp	r3, #2
 80105b2:	d002      	beq.n	80105ba <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
	VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) || (InterruptConfig ==
 80105b4:	7dbb      	ldrb	r3, [r7, #22]
 80105b6:	2b03      	cmp	r3, #3
 80105b8:	d147      	bne.n	801064a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
	VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80105ba:	f107 030c 	add.w	r3, r7, #12
 80105be:	f107 0210 	add.w	r2, r7, #16
 80105c2:	2101      	movs	r1, #1
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f000 fbc3 	bl	8010d50 <VL53L0X_GetInterruptThresholds>
 80105ca:	4603      	mov	r3, r0
 80105cc:	75fb      	strb	r3, [r7, #23]
		VL53L0X_DEVICEMODE_CONTINUOUS_RANGING, &ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255 * 65536) || (ThresholdHigh > 255 * 65536)) && (Status == VL53L0X_ERROR_NONE)) {
 80105ce:	693b      	ldr	r3, [r7, #16]
 80105d0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80105d4:	d803      	bhi.n	80105de <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80105dc:	d935      	bls.n	801064a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
 80105de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d131      	bne.n	801064a <VL53L0X_CheckAndLoadInterruptSettings+0xba>

			if (StartNotStopFlag != 0) {
 80105e6:	78fb      	ldrb	r3, [r7, #3]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d006      	beq.n	80105fa <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev, InterruptThresholdSettings);
 80105ec:	491a      	ldr	r1, [pc, #104]	; (8010658 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f002 fcbc 	bl	8012f6c <VL53L0X_load_tuning_settings>
 80105f4:	4603      	mov	r3, r0
 80105f6:	75fb      	strb	r3, [r7, #23]
 80105f8:	e027      	b.n	801064a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			}
			else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80105fa:	2204      	movs	r2, #4
 80105fc:	21ff      	movs	r1, #255	; 0xff
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f003 fbca 	bl	8013d98 <VL53L0X_WrByte>
 8010604:	4603      	mov	r3, r0
 8010606:	461a      	mov	r2, r3
 8010608:	7dfb      	ldrb	r3, [r7, #23]
 801060a:	4313      	orrs	r3, r2
 801060c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 801060e:	2200      	movs	r2, #0
 8010610:	2170      	movs	r1, #112	; 0x70
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f003 fbc0 	bl	8013d98 <VL53L0X_WrByte>
 8010618:	4603      	mov	r3, r0
 801061a:	461a      	mov	r2, r3
 801061c:	7dfb      	ldrb	r3, [r7, #23]
 801061e:	4313      	orrs	r3, r2
 8010620:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8010622:	2200      	movs	r2, #0
 8010624:	21ff      	movs	r1, #255	; 0xff
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f003 fbb6 	bl	8013d98 <VL53L0X_WrByte>
 801062c:	4603      	mov	r3, r0
 801062e:	461a      	mov	r2, r3
 8010630:	7dfb      	ldrb	r3, [r7, #23]
 8010632:	4313      	orrs	r3, r2
 8010634:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8010636:	2200      	movs	r2, #0
 8010638:	2180      	movs	r1, #128	; 0x80
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f003 fbac 	bl	8013d98 <VL53L0X_WrByte>
 8010640:	4603      	mov	r3, r0
 8010642:	461a      	mov	r2, r3
 8010644:	7dfb      	ldrb	r3, [r7, #23]
 8010646:	4313      	orrs	r3, r2
 8010648:	75fb      	strb	r3, [r7, #23]

		}

	}

	return Status;
 801064a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 801064e:	4618      	mov	r0, r3
 8010650:	3718      	adds	r7, #24
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}
 8010656:	bf00      	nop
 8010658:	2000011c 	.word	0x2000011c

0801065c <VL53L0X_StartMeasurement>:

VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev) {
 801065c:	b580      	push	{r7, lr}
 801065e:	b086      	sub	sp, #24
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010664:	2300      	movs	r3, #0
 8010666:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8010668:	2301      	movs	r3, #1
 801066a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 801066c:	f107 030e 	add.w	r3, r7, #14
 8010670:	4619      	mov	r1, r3
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f7ff fb38 	bl	800fce8 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8010678:	2201      	movs	r2, #1
 801067a:	2180      	movs	r1, #128	; 0x80
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f003 fb8b 	bl	8013d98 <VL53L0X_WrByte>
 8010682:	4603      	mov	r3, r0
 8010684:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8010686:	2201      	movs	r2, #1
 8010688:	21ff      	movs	r1, #255	; 0xff
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f003 fb84 	bl	8013d98 <VL53L0X_WrByte>
 8010690:	4603      	mov	r3, r0
 8010692:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8010694:	2200      	movs	r2, #0
 8010696:	2100      	movs	r1, #0
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f003 fb7d 	bl	8013d98 <VL53L0X_WrByte>
 801069e:	4603      	mov	r3, r0
 80106a0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80106a8:	461a      	mov	r2, r3
 80106aa:	2191      	movs	r1, #145	; 0x91
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f003 fb73 	bl	8013d98 <VL53L0X_WrByte>
 80106b2:	4603      	mov	r3, r0
 80106b4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80106b6:	2201      	movs	r2, #1
 80106b8:	2100      	movs	r1, #0
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f003 fb6c 	bl	8013d98 <VL53L0X_WrByte>
 80106c0:	4603      	mov	r3, r0
 80106c2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80106c4:	2200      	movs	r2, #0
 80106c6:	21ff      	movs	r1, #255	; 0xff
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f003 fb65 	bl	8013d98 <VL53L0X_WrByte>
 80106ce:	4603      	mov	r3, r0
 80106d0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80106d2:	2200      	movs	r2, #0
 80106d4:	2180      	movs	r1, #128	; 0x80
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f003 fb5e 	bl	8013d98 <VL53L0X_WrByte>
 80106dc:	4603      	mov	r3, r0
 80106de:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80106e0:	7bbb      	ldrb	r3, [r7, #14]
 80106e2:	2b03      	cmp	r3, #3
 80106e4:	d054      	beq.n	8010790 <VL53L0X_StartMeasurement+0x134>
 80106e6:	2b03      	cmp	r3, #3
 80106e8:	dc6c      	bgt.n	80107c4 <VL53L0X_StartMeasurement+0x168>
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d002      	beq.n	80106f4 <VL53L0X_StartMeasurement+0x98>
 80106ee:	2b01      	cmp	r3, #1
 80106f0:	d034      	beq.n	801075c <VL53L0X_StartMeasurement+0x100>
 80106f2:	e067      	b.n	80107c4 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80106f4:	2201      	movs	r2, #1
 80106f6:	2100      	movs	r1, #0
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f003 fb4d 	bl	8013d98 <VL53L0X_WrByte>
 80106fe:	4603      	mov	r3, r0
 8010700:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8010702:	7bfb      	ldrb	r3, [r7, #15]
 8010704:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8010706:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d15d      	bne.n	80107ca <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 801070e:	2300      	movs	r3, #0
 8010710:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d008      	beq.n	801072a <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8010718:	f107 030d 	add.w	r3, r7, #13
 801071c:	461a      	mov	r2, r3
 801071e:	2100      	movs	r1, #0
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f003 fbbb 	bl	8013e9c <VL53L0X_RdByte>
 8010726:	4603      	mov	r3, r0
 8010728:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	3301      	adds	r3, #1
 801072e:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte) && (Status == VL53L0X_ERROR_NONE) && (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8010730:	7b7a      	ldrb	r2, [r7, #13]
 8010732:	7bfb      	ldrb	r3, [r7, #15]
 8010734:	4013      	ands	r3, r2
 8010736:	b2db      	uxtb	r3, r3
 8010738:	7bfa      	ldrb	r2, [r7, #15]
 801073a:	429a      	cmp	r2, r3
 801073c:	d107      	bne.n	801074e <VL53L0X_StartMeasurement+0xf2>
 801073e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d103      	bne.n	801074e <VL53L0X_StartMeasurement+0xf2>
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 801074c:	d3e1      	bcc.n	8010712 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8010754:	d339      	bcc.n	80107ca <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8010756:	23f9      	movs	r3, #249	; 0xf9
 8010758:	75fb      	strb	r3, [r7, #23]

		}

		break;
 801075a:	e036      	b.n	80107ca <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 801075c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d105      	bne.n	8010770 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8010764:	2101      	movs	r1, #1
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f7ff ff12 	bl	8010590 <VL53L0X_CheckAndLoadInterruptSettings>
 801076c:	4603      	mov	r3, r0
 801076e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8010770:	2202      	movs	r2, #2
 8010772:	2100      	movs	r1, #0
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f003 fb0f 	bl	8013d98 <VL53L0X_WrByte>
 801077a:	4603      	mov	r3, r0
 801077c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 801077e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d123      	bne.n	80107ce <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2204      	movs	r2, #4
 801078a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 801078e:	e01e      	b.n	80107ce <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8010790:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d105      	bne.n	80107a4 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8010798:	2101      	movs	r1, #1
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f7ff fef8 	bl	8010590 <VL53L0X_CheckAndLoadInterruptSettings>
 80107a0:	4603      	mov	r3, r0
 80107a2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80107a4:	2204      	movs	r2, #4
 80107a6:	2100      	movs	r1, #0
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f003 faf5 	bl	8013d98 <VL53L0X_WrByte>
 80107ae:	4603      	mov	r3, r0
 80107b0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80107b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d10b      	bne.n	80107d2 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2204      	movs	r2, #4
 80107be:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80107c2:	e006      	b.n	80107d2 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80107c4:	23f8      	movs	r3, #248	; 0xf8
 80107c6:	75fb      	strb	r3, [r7, #23]
 80107c8:	e004      	b.n	80107d4 <VL53L0X_StartMeasurement+0x178>
		break;
 80107ca:	bf00      	nop
 80107cc:	e002      	b.n	80107d4 <VL53L0X_StartMeasurement+0x178>
		break;
 80107ce:	bf00      	nop
 80107d0:	e000      	b.n	80107d4 <VL53L0X_StartMeasurement+0x178>
		break;
 80107d2:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80107d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3718      	adds	r7, #24
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}

080107e0 <VL53L0X_GetMeasurementDataReady>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev, uint8_t *pMeasurementDataReady) {
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b084      	sub	sp, #16
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80107ea:	2300      	movs	r3, #0
 80107ec:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80107f4:	73bb      	strb	r3, [r7, #14]

	if (InterruptConfig ==
 80107f6:	7bbb      	ldrb	r3, [r7, #14]
 80107f8:	2b04      	cmp	r3, #4
 80107fa:	d112      	bne.n	8010822 <VL53L0X_GetMeasurementDataReady+0x42>
	VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80107fc:	f107 0308 	add.w	r3, r7, #8
 8010800:	4619      	mov	r1, r3
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f000 fb1a 	bl	8010e3c <VL53L0X_GetInterruptMaskStatus>
 8010808:	4603      	mov	r3, r0
 801080a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	2b04      	cmp	r3, #4
 8010810:	d103      	bne.n	801081a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	2201      	movs	r2, #1
 8010816:	701a      	strb	r2, [r3, #0]
 8010818:	e01c      	b.n	8010854 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	2200      	movs	r2, #0
 801081e:	701a      	strb	r2, [r3, #0]
 8010820:	e018      	b.n	8010854 <VL53L0X_GetMeasurementDataReady+0x74>
	}
	else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS, &SysRangeStatusRegister);
 8010822:	f107 030d 	add.w	r3, r7, #13
 8010826:	461a      	mov	r2, r3
 8010828:	2114      	movs	r1, #20
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	f003 fb36 	bl	8013e9c <VL53L0X_RdByte>
 8010830:	4603      	mov	r3, r0
 8010832:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L0X_ERROR_NONE) {
 8010834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d10b      	bne.n	8010854 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 801083c:	7b7b      	ldrb	r3, [r7, #13]
 801083e:	f003 0301 	and.w	r3, r3, #1
 8010842:	2b00      	cmp	r3, #0
 8010844:	d003      	beq.n	801084e <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	2201      	movs	r2, #1
 801084a:	701a      	strb	r2, [r3, #0]
 801084c:	e002      	b.n	8010854 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	2200      	movs	r2, #0
 8010852:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8010854:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010858:	4618      	mov	r0, r3
 801085a:	3710      	adds	r7, #16
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <VL53L0X_GetRangingMeasurementData>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData) {
 8010860:	b5b0      	push	{r4, r5, r7, lr}
 8010862:	b096      	sub	sp, #88	; 0x58
 8010864:	af02      	add	r7, sp, #8
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801086a:	2300      	movs	r3, #0
 801086c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8010870:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010874:	230c      	movs	r3, #12
 8010876:	2114      	movs	r1, #20
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f003 fa61 	bl	8013d40 <VL53L0X_ReadMulti>
 801087e:	4603      	mov	r3, r0
 8010880:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8010884:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8010888:	2b00      	cmp	r3, #0
 801088a:	f040 80d1 	bne.w	8010a30 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	2200      	movs	r2, #0
 8010892:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	2200      	movs	r2, #0
 8010898:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 801089a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801089e:	b29b      	uxth	r3, r3
 80108a0:	021b      	lsls	r3, r3, #8
 80108a2:	b29a      	uxth	r2, r3
 80108a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80108a8:	b29b      	uxth	r3, r3
 80108aa:	4413      	add	r3, r2
 80108ac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	2200      	movs	r2, #0
 80108b4:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
 80108b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80108ba:	b29b      	uxth	r3, r3
 80108bc:	021b      	lsls	r3, r3, #8
 80108be:	b29a      	uxth	r2, r3
 80108c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	4413      	add	r3, r2
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	025b      	lsls	r3, r3, #9
 80108cc:	647b      	str	r3, [r7, #68]	; 0x44
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108d2:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80108d4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80108d8:	b29b      	uxth	r3, r3
 80108da:	021b      	lsls	r3, r3, #8
 80108dc:	b29a      	uxth	r2, r3
 80108de:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80108e2:	b29b      	uxth	r3, r3
 80108e4:	4413      	add	r3, r2
 80108e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps = VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80108ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80108ee:	025b      	lsls	r3, r3, #9
 80108f0:	461a      	mov	r2, r3
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3], localBuffer[2]);
 80108f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	021b      	lsls	r3, r3, #8
 80108fe:	b29a      	uxth	r2, r3
 8010900:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010904:	b29b      	uxth	r3, r3
 8010906:	4413      	add	r3, r2
 8010908:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount = EffectiveSpadRtnCount;
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010912:	829a      	strh	r2, [r3, #20]

		DeviceRangeStatus = localBuffer[0];
 8010914:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010918:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev, LinearityCorrectiveGain);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8010922:	87bb      	strh	r3, [r7, #60]	; 0x3c

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev, RangeFractionalEnable);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 801092a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		if (LinearityCorrectiveGain != 1000) {
 801092e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010930:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010934:	d046      	beq.n	80109c4 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t) ((LinearityCorrectiveGain * tmpuint16 + 500) / 1000);
 8010936:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010938:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 801093c:	fb02 f303 	mul.w	r3, r2, r3
 8010940:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8010944:	4a57      	ldr	r2, [pc, #348]	; (8010aa4 <VL53L0X_GetRangingMeasurementData+0x244>)
 8010946:	fb82 1203 	smull	r1, r2, r2, r3
 801094a:	1192      	asrs	r2, r2, #6
 801094c:	17db      	asrs	r3, r3, #31
 801094e:	1ad3      	subs	r3, r2, r3
 8010950:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, XTalkCompensationRateMegaCps);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6a1b      	ldr	r3, [r3, #32]
 8010958:	873b      	strh	r3, [r7, #56]	; 0x38
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, XTalkCompensationEnable);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	7f1b      	ldrb	r3, [r3, #28]
 801095e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			if (XTalkCompensationEnable) {
 8010962:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010966:	2b00      	cmp	r3, #0
 8010968:	d02c      	beq.n	80109c4 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate - ((XTalkCompensationRateMegaCps * EffectiveSpadRtnCount) >> 8)) <= 0) {
 801096a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801096c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010970:	fb02 f303 	mul.w	r3, r2, r3
 8010974:	121a      	asrs	r2, r3, #8
 8010976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010978:	429a      	cmp	r2, r3
 801097a:	d10d      	bne.n	8010998 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 801097c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010980:	2b00      	cmp	r3, #0
 8010982:	d004      	beq.n	801098e <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8010984:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8010988:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 801098c:	e016      	b.n	80109bc <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888 << 2;
 801098e:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8010992:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8010996:	e011      	b.n	80109bc <VL53L0X_GetRangingMeasurementData+0x15c>
				}
				else {
					XtalkRangeMilliMeter = (tmpuint16 * SignalRate) / (SignalRate - ((XTalkCompensationRateMegaCps * EffectiveSpadRtnCount) >> 8));
 8010998:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801099c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801099e:	fb03 f202 	mul.w	r2, r3, r2
 80109a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80109a4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80109a8:	fb01 f303 	mul.w	r3, r1, r3
 80109ac:	121b      	asrs	r3, r3, #8
 80109ae:	4619      	mov	r1, r3
 80109b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109b2:	1a5b      	subs	r3, r3, r1
 80109b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80109b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80109bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80109c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80109c4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d00d      	beq.n	80109e8 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter = (uint16_t) ((tmpuint16) >> 2);
 80109cc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80109d0:	089b      	lsrs	r3, r3, #2
 80109d2:	b29a      	uxth	r2, r3
 80109d4:	683b      	ldr	r3, [r7, #0]
 80109d6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = (uint8_t) ((tmpuint16 & 0x03) << 6);
 80109d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80109dc:	b2db      	uxtb	r3, r3
 80109de:	019b      	lsls	r3, r3, #6
 80109e0:	b2da      	uxtb	r2, r3
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	75da      	strb	r2, [r3, #23]
 80109e6:	e006      	b.n	80109f6 <VL53L0X_GetRangingMeasurementData+0x196>
		}
		else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80109ee:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	2200      	movs	r2, #0
 80109f4:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus, SignalRate, EffectiveSpadRtnCount, pRangingMeasurementData, &PalRangeStatus);
 80109f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80109fa:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80109fe:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8010a02:	9301      	str	r3, [sp, #4]
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	9300      	str	r3, [sp, #0]
 8010a08:	4613      	mov	r3, r2
 8010a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f002 ff4b 	bl	80138a8 <VL53L0X_get_pal_range_status>
 8010a12:	4603      	mov	r3, r0
 8010a14:	461a      	mov	r2, r3
 8010a16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010a1a:	4313      	orrs	r3, r2
 8010a1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		if (Status == VL53L0X_ERROR_NONE)
 8010a20:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d103      	bne.n	8010a30 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8010a28:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8010a30:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d12f      	bne.n	8010a98 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f107 040c 	add.w	r4, r7, #12
 8010a3e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8010a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010a4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter = pRangingMeasurementData->RangeMilliMeter;
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	891b      	ldrh	r3, [r3, #8]
 8010a52:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart = pRangingMeasurementData->RangeFractionalPart;
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	7ddb      	ldrb	r3, [r3, #23]
 8010a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter = pRangingMeasurementData->RangeDMaxMilliMeter;
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	895b      	ldrh	r3, [r3, #10]
 8010a60:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec = pRangingMeasurementData->MeasurementTimeUsec;
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	685b      	ldr	r3, [r3, #4]
 8010a66:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps = pRangingMeasurementData->SignalRateRtnMegaCps;
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	68db      	ldr	r3, [r3, #12]
 8010a6c:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps = pRangingMeasurementData->AmbientRateRtnMegaCps;
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	691b      	ldr	r3, [r3, #16]
 8010a72:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount = pRangingMeasurementData->EffectiveSpadRtnCount;
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	8a9b      	ldrh	r3, [r3, #20]
 8010a78:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus = pRangingMeasurementData->RangeStatus;
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	7e1b      	ldrb	r3, [r3, #24]
 8010a7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8010a88:	f107 050c 	add.w	r5, r7, #12
 8010a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010a94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8010a98:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3750      	adds	r7, #80	; 0x50
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8010aa4:	10624dd3 	.word	0x10624dd3

08010aa8 <VL53L0X_PerformSingleRangingMeasurement>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData) {
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b084      	sub	sp, #16
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8010ab6:	2100      	movs	r1, #0
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7ff f8e9 	bl	800fc90 <VL53L0X_SetDeviceMode>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8010ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d104      	bne.n	8010ad4 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f7ff fd16 	bl	80104fc <VL53L0X_PerformSingleMeasurement>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8010ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d105      	bne.n	8010ae8 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev, pRangingMeasurementData);
 8010adc:	6839      	ldr	r1, [r7, #0]
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f7ff febe 	bl	8010860 <VL53L0X_GetRangingMeasurementData>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8010ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d105      	bne.n	8010afc <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8010af0:	2100      	movs	r1, #0
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f000 f962 	bl	8010dbc <VL53L0X_ClearInterruptMask>
 8010af8:	4603      	mov	r3, r0
 8010afa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8010afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3710      	adds	r7, #16
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}

08010b08 <VL53L0X_SetGpioConfig>:
	return Status;
}

/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin, VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality, VL53L0X_InterruptPolarity Polarity) {
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b084      	sub	sp, #16
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	4608      	mov	r0, r1
 8010b12:	4611      	mov	r1, r2
 8010b14:	461a      	mov	r2, r3
 8010b16:	4603      	mov	r3, r0
 8010b18:	70fb      	strb	r3, [r7, #3]
 8010b1a:	460b      	mov	r3, r1
 8010b1c:	70bb      	strb	r3, [r7, #2]
 8010b1e:	4613      	mov	r3, r2
 8010b20:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010b22:	2300      	movs	r3, #0
 8010b24:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8010b26:	78fb      	ldrb	r3, [r7, #3]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d002      	beq.n	8010b32 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8010b2c:	23f6      	movs	r3, #246	; 0xf6
 8010b2e:	73fb      	strb	r3, [r7, #15]
 8010b30:	e107      	b.n	8010d42 <VL53L0X_SetGpioConfig+0x23a>
	}
	else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8010b32:	78bb      	ldrb	r3, [r7, #2]
 8010b34:	2b14      	cmp	r3, #20
 8010b36:	d110      	bne.n	8010b5a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8010b38:	7e3b      	ldrb	r3, [r7, #24]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d102      	bne.n	8010b44 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8010b3e:	2310      	movs	r3, #16
 8010b40:	73bb      	strb	r3, [r7, #14]
 8010b42:	e001      	b.n	8010b48 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8010b44:	2301      	movs	r3, #1
 8010b46:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8010b48:	7bbb      	ldrb	r3, [r7, #14]
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	2184      	movs	r1, #132	; 0x84
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f003 f922 	bl	8013d98 <VL53L0X_WrByte>
 8010b54:	4603      	mov	r3, r0
 8010b56:	73fb      	strb	r3, [r7, #15]
 8010b58:	e0f3      	b.n	8010d42 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	}
	else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8010b5a:	78bb      	ldrb	r3, [r7, #2]
 8010b5c:	2b15      	cmp	r3, #21
 8010b5e:	f040 8097 	bne.w	8010c90 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8010b62:	2201      	movs	r2, #1
 8010b64:	21ff      	movs	r1, #255	; 0xff
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f003 f916 	bl	8013d98 <VL53L0X_WrByte>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	461a      	mov	r2, r3
 8010b70:	7bfb      	ldrb	r3, [r7, #15]
 8010b72:	4313      	orrs	r3, r2
 8010b74:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8010b76:	2200      	movs	r2, #0
 8010b78:	2100      	movs	r1, #0
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f003 f90c 	bl	8013d98 <VL53L0X_WrByte>
 8010b80:	4603      	mov	r3, r0
 8010b82:	461a      	mov	r2, r3
 8010b84:	7bfb      	ldrb	r3, [r7, #15]
 8010b86:	4313      	orrs	r3, r2
 8010b88:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	21ff      	movs	r1, #255	; 0xff
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f003 f902 	bl	8013d98 <VL53L0X_WrByte>
 8010b94:	4603      	mov	r3, r0
 8010b96:	461a      	mov	r2, r3
 8010b98:	7bfb      	ldrb	r3, [r7, #15]
 8010b9a:	4313      	orrs	r3, r2
 8010b9c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	2180      	movs	r1, #128	; 0x80
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f003 f8f8 	bl	8013d98 <VL53L0X_WrByte>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	461a      	mov	r2, r3
 8010bac:	7bfb      	ldrb	r3, [r7, #15]
 8010bae:	4313      	orrs	r3, r2
 8010bb0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8010bb2:	2202      	movs	r2, #2
 8010bb4:	2185      	movs	r1, #133	; 0x85
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f003 f8ee 	bl	8013d98 <VL53L0X_WrByte>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	461a      	mov	r2, r3
 8010bc0:	7bfb      	ldrb	r3, [r7, #15]
 8010bc2:	4313      	orrs	r3, r2
 8010bc4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8010bc6:	2204      	movs	r2, #4
 8010bc8:	21ff      	movs	r1, #255	; 0xff
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f003 f8e4 	bl	8013d98 <VL53L0X_WrByte>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	461a      	mov	r2, r3
 8010bd4:	7bfb      	ldrb	r3, [r7, #15]
 8010bd6:	4313      	orrs	r3, r2
 8010bd8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8010bda:	2200      	movs	r2, #0
 8010bdc:	21cd      	movs	r1, #205	; 0xcd
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f003 f8da 	bl	8013d98 <VL53L0X_WrByte>
 8010be4:	4603      	mov	r3, r0
 8010be6:	461a      	mov	r2, r3
 8010be8:	7bfb      	ldrb	r3, [r7, #15]
 8010bea:	4313      	orrs	r3, r2
 8010bec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8010bee:	2211      	movs	r2, #17
 8010bf0:	21cc      	movs	r1, #204	; 0xcc
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f003 f8d0 	bl	8013d98 <VL53L0X_WrByte>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	7bfb      	ldrb	r3, [r7, #15]
 8010bfe:	4313      	orrs	r3, r2
 8010c00:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8010c02:	2207      	movs	r2, #7
 8010c04:	21ff      	movs	r1, #255	; 0xff
 8010c06:	6878      	ldr	r0, [r7, #4]
 8010c08:	f003 f8c6 	bl	8013d98 <VL53L0X_WrByte>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	461a      	mov	r2, r3
 8010c10:	7bfb      	ldrb	r3, [r7, #15]
 8010c12:	4313      	orrs	r3, r2
 8010c14:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8010c16:	2200      	movs	r2, #0
 8010c18:	21be      	movs	r1, #190	; 0xbe
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f003 f8bc 	bl	8013d98 <VL53L0X_WrByte>
 8010c20:	4603      	mov	r3, r0
 8010c22:	461a      	mov	r2, r3
 8010c24:	7bfb      	ldrb	r3, [r7, #15]
 8010c26:	4313      	orrs	r3, r2
 8010c28:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8010c2a:	2206      	movs	r2, #6
 8010c2c:	21ff      	movs	r1, #255	; 0xff
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	f003 f8b2 	bl	8013d98 <VL53L0X_WrByte>
 8010c34:	4603      	mov	r3, r0
 8010c36:	461a      	mov	r2, r3
 8010c38:	7bfb      	ldrb	r3, [r7, #15]
 8010c3a:	4313      	orrs	r3, r2
 8010c3c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8010c3e:	2209      	movs	r2, #9
 8010c40:	21cc      	movs	r1, #204	; 0xcc
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f003 f8a8 	bl	8013d98 <VL53L0X_WrByte>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	7bfb      	ldrb	r3, [r7, #15]
 8010c4e:	4313      	orrs	r3, r2
 8010c50:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8010c52:	2200      	movs	r2, #0
 8010c54:	21ff      	movs	r1, #255	; 0xff
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f003 f89e 	bl	8013d98 <VL53L0X_WrByte>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	461a      	mov	r2, r3
 8010c60:	7bfb      	ldrb	r3, [r7, #15]
 8010c62:	4313      	orrs	r3, r2
 8010c64:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8010c66:	2201      	movs	r2, #1
 8010c68:	21ff      	movs	r1, #255	; 0xff
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f003 f894 	bl	8013d98 <VL53L0X_WrByte>
 8010c70:	4603      	mov	r3, r0
 8010c72:	461a      	mov	r2, r3
 8010c74:	7bfb      	ldrb	r3, [r7, #15]
 8010c76:	4313      	orrs	r3, r2
 8010c78:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	2100      	movs	r1, #0
 8010c7e:	6878      	ldr	r0, [r7, #4]
 8010c80:	f003 f88a 	bl	8013d98 <VL53L0X_WrByte>
 8010c84:	4603      	mov	r3, r0
 8010c86:	461a      	mov	r2, r3
 8010c88:	7bfb      	ldrb	r3, [r7, #15]
 8010c8a:	4313      	orrs	r3, r2
 8010c8c:	73fb      	strb	r3, [r7, #15]
 8010c8e:	e058      	b.n	8010d42 <VL53L0X_SetGpioConfig+0x23a>

	}
	else {

		if (Status == VL53L0X_ERROR_NONE) {
 8010c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d121      	bne.n	8010cdc <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8010c98:	787b      	ldrb	r3, [r7, #1]
 8010c9a:	2b04      	cmp	r3, #4
 8010c9c:	d81b      	bhi.n	8010cd6 <VL53L0X_SetGpioConfig+0x1ce>
 8010c9e:	a201      	add	r2, pc, #4	; (adr r2, 8010ca4 <VL53L0X_SetGpioConfig+0x19c>)
 8010ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ca4:	08010cb9 	.word	0x08010cb9
 8010ca8:	08010cbf 	.word	0x08010cbf
 8010cac:	08010cc5 	.word	0x08010cc5
 8010cb0:	08010ccb 	.word	0x08010ccb
 8010cb4:	08010cd1 	.word	0x08010cd1
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	73bb      	strb	r3, [r7, #14]
				break;
 8010cbc:	e00f      	b.n	8010cde <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	73bb      	strb	r3, [r7, #14]
				break;
 8010cc2:	e00c      	b.n	8010cde <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8010cc4:	2302      	movs	r3, #2
 8010cc6:	73bb      	strb	r3, [r7, #14]
				break;
 8010cc8:	e009      	b.n	8010cde <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8010cca:	2303      	movs	r3, #3
 8010ccc:	73bb      	strb	r3, [r7, #14]
				break;
 8010cce:	e006      	b.n	8010cde <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8010cd0:	2304      	movs	r3, #4
 8010cd2:	73bb      	strb	r3, [r7, #14]
				break;
 8010cd4:	e003      	b.n	8010cde <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8010cd6:	23f5      	movs	r3, #245	; 0xf5
 8010cd8:	73fb      	strb	r3, [r7, #15]
 8010cda:	e000      	b.n	8010cde <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8010cdc:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8010cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d107      	bne.n	8010cf6 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8010ce6:	7bbb      	ldrb	r3, [r7, #14]
 8010ce8:	461a      	mov	r2, r3
 8010cea:	210a      	movs	r1, #10
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f003 f853 	bl	8013d98 <VL53L0X_WrByte>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8010cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d10f      	bne.n	8010d1e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8010cfe:	7e3b      	ldrb	r3, [r7, #24]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d102      	bne.n	8010d0a <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8010d04:	2300      	movs	r3, #0
 8010d06:	73bb      	strb	r3, [r7, #14]
 8010d08:	e001      	b.n	8010d0e <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t) (1 << 4);
 8010d0a:	2310      	movs	r3, #16
 8010d0c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8010d0e:	7bbb      	ldrb	r3, [r7, #14]
 8010d10:	22ef      	movs	r2, #239	; 0xef
 8010d12:	2184      	movs	r1, #132	; 0x84
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	f003 f88d 	bl	8013e34 <VL53L0X_UpdateByte>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8010d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d103      	bne.n	8010d2e <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality, Functionality);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	787a      	ldrb	r2, [r7, #1]
 8010d2a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda

		if (Status == VL53L0X_ERROR_NONE)
 8010d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d105      	bne.n	8010d42 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8010d36:	2100      	movs	r1, #0
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f000 f83f 	bl	8010dbc <VL53L0X_ClearInterruptMask>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8010d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3710      	adds	r7, #16
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}
 8010d4e:	bf00      	nop

08010d50 <VL53L0X_GetInterruptThresholds>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow, FixPoint1616_t *pThresholdHigh) {
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b086      	sub	sp, #24
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	60f8      	str	r0, [r7, #12]
 8010d58:	607a      	str	r2, [r7, #4]
 8010d5a:	603b      	str	r3, [r7, #0]
 8010d5c:	460b      	mov	r3, r1
 8010d5e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010d60:	2300      	movs	r3, #0
 8010d62:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8010d64:	f107 0314 	add.w	r3, r7, #20
 8010d68:	461a      	mov	r2, r3
 8010d6a:	210e      	movs	r1, #14
 8010d6c:	68f8      	ldr	r0, [r7, #12]
 8010d6e:	f003 f8bf 	bl	8013ef0 <VL53L0X_RdWord>
 8010d72:	4603      	mov	r3, r0
 8010d74:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t) ((0x00fff & Threshold16) << 17);
 8010d76:	8abb      	ldrh	r3, [r7, #20]
 8010d78:	045b      	lsls	r3, r3, #17
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	4b0e      	ldr	r3, [pc, #56]	; (8010db8 <VL53L0X_GetInterruptThresholds+0x68>)
 8010d7e:	4013      	ands	r3, r2
 8010d80:	687a      	ldr	r2, [r7, #4]
 8010d82:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8010d84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d10f      	bne.n	8010dac <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH, &Threshold16);
 8010d8c:	f107 0314 	add.w	r3, r7, #20
 8010d90:	461a      	mov	r2, r3
 8010d92:	210c      	movs	r1, #12
 8010d94:	68f8      	ldr	r0, [r7, #12]
 8010d96:	f003 f8ab 	bl	8013ef0 <VL53L0X_RdWord>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	75fb      	strb	r3, [r7, #23]
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh = (FixPoint1616_t) ((0x00fff & Threshold16) << 17);
 8010d9e:	8abb      	ldrh	r3, [r7, #20]
 8010da0:	045b      	lsls	r3, r3, #17
 8010da2:	461a      	mov	r2, r3
 8010da4:	4b04      	ldr	r3, [pc, #16]	; (8010db8 <VL53L0X_GetInterruptThresholds+0x68>)
 8010da6:	4013      	ands	r3, r2
 8010da8:	683a      	ldr	r2, [r7, #0]
 8010daa:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8010dac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	3718      	adds	r7, #24
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	1ffe0000 	.word	0x1ffe0000

08010dbc <VL53L0X_ClearInterruptMask>:
	LOG_FUNCTION_END(Status);
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask) {
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b084      	sub	sp, #16
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8010dce:	2201      	movs	r2, #1
 8010dd0:	210b      	movs	r1, #11
 8010dd2:	6878      	ldr	r0, [r7, #4]
 8010dd4:	f002 ffe0 	bl	8013d98 <VL53L0X_WrByte>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8010ddc:	2200      	movs	r2, #0
 8010dde:	210b      	movs	r1, #11
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f002 ffd9 	bl	8013d98 <VL53L0X_WrByte>
 8010de6:	4603      	mov	r3, r0
 8010de8:	461a      	mov	r2, r3
 8010dea:	7bfb      	ldrb	r3, [r7, #15]
 8010dec:	4313      	orrs	r3, r2
 8010dee:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8010df0:	f107 030d 	add.w	r3, r7, #13
 8010df4:	461a      	mov	r2, r3
 8010df6:	2113      	movs	r1, #19
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f003 f84f 	bl	8013e9c <VL53L0X_RdByte>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	461a      	mov	r2, r3
 8010e02:	7bfb      	ldrb	r3, [r7, #15]
 8010e04:	4313      	orrs	r3, r2
 8010e06:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8010e08:	7bbb      	ldrb	r3, [r7, #14]
 8010e0a:	3301      	adds	r3, #1
 8010e0c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00) && (LoopCount < 3) && (Status == VL53L0X_ERROR_NONE));
 8010e0e:	7b7b      	ldrb	r3, [r7, #13]
 8010e10:	f003 0307 	and.w	r3, r3, #7
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d006      	beq.n	8010e26 <VL53L0X_ClearInterruptMask+0x6a>
 8010e18:	7bbb      	ldrb	r3, [r7, #14]
 8010e1a:	2b02      	cmp	r3, #2
 8010e1c:	d803      	bhi.n	8010e26 <VL53L0X_ClearInterruptMask+0x6a>
 8010e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d0d3      	beq.n	8010dce <VL53L0X_ClearInterruptMask+0x12>

	if (LoopCount >= 3)
 8010e26:	7bbb      	ldrb	r3, [r7, #14]
 8010e28:	2b02      	cmp	r3, #2
 8010e2a:	d901      	bls.n	8010e30 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8010e2c:	23f4      	movs	r3, #244	; 0xf4
 8010e2e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8010e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	3710      	adds	r7, #16
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}

08010e3c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev, uint32_t *pInterruptMaskStatus) {
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b084      	sub	sp, #16
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
 8010e44:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010e46:	2300      	movs	r3, #0
 8010e48:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8010e4a:	f107 030e 	add.w	r3, r7, #14
 8010e4e:	461a      	mov	r2, r3
 8010e50:	2113      	movs	r1, #19
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f003 f822 	bl	8013e9c <VL53L0X_RdByte>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8010e5c:	7bbb      	ldrb	r3, [r7, #14]
 8010e5e:	f003 0207 	and.w	r2, r3, #7
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8010e66:	7bbb      	ldrb	r3, [r7, #14]
 8010e68:	f003 0318 	and.w	r3, r3, #24
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d001      	beq.n	8010e74 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8010e70:	23fa      	movs	r3, #250	; 0xfa
 8010e72:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8010e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3710      	adds	r7, #16
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}

08010e80 <VL53L0X_PerformRefSpadManagement>:
	Status = VL53L0X_get_reference_spads(Dev, pSpadCount, pIsApertureSpads);

	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev, uint32_t *refSpadCount, uint8_t *isApertureSpads) {
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b086      	sub	sp, #24
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	60f8      	str	r0, [r7, #12]
 8010e88:	60b9      	str	r1, [r7, #8]
 8010e8a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	75fb      	strb	r3, [r7, #23]

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount, isApertureSpads);
 8010e90:	687a      	ldr	r2, [r7, #4]
 8010e92:	68b9      	ldr	r1, [r7, #8]
 8010e94:	68f8      	ldr	r0, [r7, #12]
 8010e96:	f000 fa03 	bl	80112a0 <VL53L0X_perform_ref_spad_management>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	75fb      	strb	r3, [r7, #23]

	return Status;
 8010e9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3718      	adds	r7, #24
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}

08010eaa <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8010eaa:	b580      	push	{r7, lr}
 8010eac:	b084      	sub	sp, #16
 8010eae:	af00      	add	r7, sp, #0
 8010eb0:	6078      	str	r0, [r7, #4]
 8010eb2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8010eb8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8010ebc:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8010ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ec2:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8010ec4:	f107 0308 	add.w	r3, r7, #8
 8010ec8:	461a      	mov	r2, r3
 8010eca:	2128      	movs	r1, #40	; 0x28
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f003 f80f 	bl	8013ef0 <VL53L0X_RdWord>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8010ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d11e      	bne.n	8010f1c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8010ede:	893b      	ldrh	r3, [r7, #8]
 8010ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010ee4:	b29b      	uxth	r3, r3
 8010ee6:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8010ee8:	893b      	ldrh	r3, [r7, #8]
 8010eea:	461a      	mov	r2, r3
 8010eec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	dd0b      	ble.n	8010f0c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8010ef4:	893a      	ldrh	r2, [r7, #8]
 8010ef6:	897b      	ldrh	r3, [r7, #10]
 8010ef8:	1ad3      	subs	r3, r2, r3
 8010efa:	b29b      	uxth	r3, r3
 8010efc:	b21b      	sxth	r3, r3
 8010efe:	461a      	mov	r2, r3
					* 250;
 8010f00:	23fa      	movs	r3, #250	; 0xfa
 8010f02:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	601a      	str	r2, [r3, #0]
 8010f0a:	e007      	b.n	8010f1c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8010f0c:	893b      	ldrh	r3, [r7, #8]
 8010f0e:	b21b      	sxth	r3, r3
 8010f10:	461a      	mov	r2, r3
 8010f12:	23fa      	movs	r3, #250	; 0xfa
 8010f14:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8010f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	3710      	adds	r7, #16
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}

08010f28 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8010f28:	b480      	push	{r7}
 8010f2a:	b08b      	sub	sp, #44	; 0x2c
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	60f8      	str	r0, [r7, #12]
 8010f30:	60b9      	str	r1, [r7, #8]
 8010f32:	607a      	str	r2, [r7, #4]
 8010f34:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8010f36:	2308      	movs	r3, #8
 8010f38:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	f04f 32ff 	mov.w	r2, #4294967295
 8010f44:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8010f46:	687a      	ldr	r2, [r7, #4]
 8010f48:	69bb      	ldr	r3, [r7, #24]
 8010f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f4e:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	69ba      	ldr	r2, [r7, #24]
 8010f54:	fbb3 f2f2 	udiv	r2, r3, r2
 8010f58:	69b9      	ldr	r1, [r7, #24]
 8010f5a:	fb01 f202 	mul.w	r2, r1, r2
 8010f5e:	1a9b      	subs	r3, r3, r2
 8010f60:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	627b      	str	r3, [r7, #36]	; 0x24
 8010f66:	e030      	b.n	8010fca <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8010f6c:	68fa      	ldr	r2, [r7, #12]
 8010f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f70:	4413      	add	r3, r2
 8010f72:	781b      	ldrb	r3, [r3, #0]
 8010f74:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8010f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f78:	697b      	ldr	r3, [r7, #20]
 8010f7a:	429a      	cmp	r2, r3
 8010f7c:	d11e      	bne.n	8010fbc <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8010f7e:	7ffa      	ldrb	r2, [r7, #31]
 8010f80:	693b      	ldr	r3, [r7, #16]
 8010f82:	fa42 f303 	asr.w	r3, r2, r3
 8010f86:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8010f88:	693b      	ldr	r3, [r7, #16]
 8010f8a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8010f8c:	e016      	b.n	8010fbc <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8010f8e:	7ffb      	ldrb	r3, [r7, #31]
 8010f90:	f003 0301 	and.w	r3, r3, #1
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d00b      	beq.n	8010fb0 <get_next_good_spad+0x88>
				success = 1;
 8010f98:	2301      	movs	r3, #1
 8010f9a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8010f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9e:	69ba      	ldr	r2, [r7, #24]
 8010fa0:	fb03 f202 	mul.w	r2, r3, r2
 8010fa4:	6a3b      	ldr	r3, [r7, #32]
 8010fa6:	4413      	add	r3, r2
 8010fa8:	461a      	mov	r2, r3
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	601a      	str	r2, [r3, #0]
				break;
 8010fae:	e009      	b.n	8010fc4 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8010fb0:	7ffb      	ldrb	r3, [r7, #31]
 8010fb2:	085b      	lsrs	r3, r3, #1
 8010fb4:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8010fb6:	6a3b      	ldr	r3, [r7, #32]
 8010fb8:	3301      	adds	r3, #1
 8010fba:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8010fbc:	6a3a      	ldr	r2, [r7, #32]
 8010fbe:	69bb      	ldr	r3, [r7, #24]
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d3e4      	bcc.n	8010f8e <get_next_good_spad+0x66>
				coarseIndex++) {
 8010fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc6:	3301      	adds	r3, #1
 8010fc8:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8010fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d202      	bcs.n	8010fd8 <get_next_good_spad+0xb0>
 8010fd2:	7fbb      	ldrb	r3, [r7, #30]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d0c7      	beq.n	8010f68 <get_next_good_spad+0x40>
		}
	}
}
 8010fd8:	bf00      	nop
 8010fda:	372c      	adds	r7, #44	; 0x2c
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe2:	4770      	bx	lr

08010fe4 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b085      	sub	sp, #20
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8010fec:	2301      	movs	r3, #1
 8010fee:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	099b      	lsrs	r3, r3, #6
 8010ff4:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8010ff6:	4a07      	ldr	r2, [pc, #28]	; (8011014 <is_aperture+0x30>)
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d101      	bne.n	8011006 <is_aperture+0x22>
		isAperture = 0;
 8011002:	2300      	movs	r3, #0
 8011004:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8011006:	7bfb      	ldrb	r3, [r7, #15]
}
 8011008:	4618      	mov	r0, r3
 801100a:	3714      	adds	r7, #20
 801100c:	46bd      	mov	sp, r7
 801100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011012:	4770      	bx	lr
 8011014:	200002d4 	.word	0x200002d4

08011018 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8011018:	b480      	push	{r7}
 801101a:	b089      	sub	sp, #36	; 0x24
 801101c:	af00      	add	r7, sp, #0
 801101e:	60f8      	str	r0, [r7, #12]
 8011020:	60b9      	str	r1, [r7, #8]
 8011022:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8011024:	2300      	movs	r3, #0
 8011026:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8011028:	2308      	movs	r3, #8
 801102a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 801102c:	687a      	ldr	r2, [r7, #4]
 801102e:	69bb      	ldr	r3, [r7, #24]
 8011030:	fbb2 f3f3 	udiv	r3, r2, r3
 8011034:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	69ba      	ldr	r2, [r7, #24]
 801103a:	fbb3 f2f2 	udiv	r2, r3, r2
 801103e:	69b9      	ldr	r1, [r7, #24]
 8011040:	fb01 f202 	mul.w	r2, r1, r2
 8011044:	1a9b      	subs	r3, r3, r2
 8011046:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8011048:	697a      	ldr	r2, [r7, #20]
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	429a      	cmp	r2, r3
 801104e:	d302      	bcc.n	8011056 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8011050:	23ce      	movs	r3, #206	; 0xce
 8011052:	77fb      	strb	r3, [r7, #31]
 8011054:	e010      	b.n	8011078 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8011056:	68fa      	ldr	r2, [r7, #12]
 8011058:	697b      	ldr	r3, [r7, #20]
 801105a:	4413      	add	r3, r2
 801105c:	781b      	ldrb	r3, [r3, #0]
 801105e:	b25a      	sxtb	r2, r3
 8011060:	2101      	movs	r1, #1
 8011062:	693b      	ldr	r3, [r7, #16]
 8011064:	fa01 f303 	lsl.w	r3, r1, r3
 8011068:	b25b      	sxtb	r3, r3
 801106a:	4313      	orrs	r3, r2
 801106c:	b259      	sxtb	r1, r3
 801106e:	68fa      	ldr	r2, [r7, #12]
 8011070:	697b      	ldr	r3, [r7, #20]
 8011072:	4413      	add	r3, r2
 8011074:	b2ca      	uxtb	r2, r1
 8011076:	701a      	strb	r2, [r3, #0]

	return status;
 8011078:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801107c:	4618      	mov	r0, r3
 801107e:	3724      	adds	r7, #36	; 0x24
 8011080:	46bd      	mov	sp, r7
 8011082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011086:	4770      	bx	lr

08011088 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b084      	sub	sp, #16
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
 8011090:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8011092:	2306      	movs	r3, #6
 8011094:	683a      	ldr	r2, [r7, #0]
 8011096:	21b0      	movs	r1, #176	; 0xb0
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f002 fe21 	bl	8013ce0 <VL53L0X_WriteMulti>
 801109e:	4603      	mov	r3, r0
 80110a0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80110a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80110a6:	4618      	mov	r0, r3
 80110a8:	3710      	adds	r7, #16
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}

080110ae <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80110ae:	b580      	push	{r7, lr}
 80110b0:	b084      	sub	sp, #16
 80110b2:	af00      	add	r7, sp, #0
 80110b4:	6078      	str	r0, [r7, #4]
 80110b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80110b8:	2306      	movs	r3, #6
 80110ba:	683a      	ldr	r2, [r7, #0]
 80110bc:	21b0      	movs	r1, #176	; 0xb0
 80110be:	6878      	ldr	r0, [r7, #4]
 80110c0:	f002 fe3e 	bl	8013d40 <VL53L0X_ReadMulti>
 80110c4:	4603      	mov	r3, r0
 80110c6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80110c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80110cc:	4618      	mov	r0, r3
 80110ce:	3710      	adds	r7, #16
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}

080110d4 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b08c      	sub	sp, #48	; 0x30
 80110d8:	af00      	add	r7, sp, #0
 80110da:	60f8      	str	r0, [r7, #12]
 80110dc:	607a      	str	r2, [r7, #4]
 80110de:	603b      	str	r3, [r7, #0]
 80110e0:	460b      	mov	r3, r1
 80110e2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80110e4:	2300      	movs	r3, #0
 80110e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80110ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110ec:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80110ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110f0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80110f2:	2300      	movs	r3, #0
 80110f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80110f6:	e02b      	b.n	8011150 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80110f8:	f107 031c 	add.w	r3, r7, #28
 80110fc:	6a3a      	ldr	r2, [r7, #32]
 80110fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f7ff ff11 	bl	8010f28 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8011106:	69fb      	ldr	r3, [r7, #28]
 8011108:	f1b3 3fff 	cmp.w	r3, #4294967295
 801110c:	d103      	bne.n	8011116 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 801110e:	23ce      	movs	r3, #206	; 0xce
 8011110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8011114:	e020      	b.n	8011158 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8011116:	69fb      	ldr	r3, [r7, #28]
 8011118:	461a      	mov	r2, r3
 801111a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801111c:	4413      	add	r3, r2
 801111e:	4618      	mov	r0, r3
 8011120:	f7ff ff60 	bl	8010fe4 <is_aperture>
 8011124:	4603      	mov	r3, r0
 8011126:	461a      	mov	r2, r3
 8011128:	7afb      	ldrb	r3, [r7, #11]
 801112a:	4293      	cmp	r3, r2
 801112c:	d003      	beq.n	8011136 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 801112e:	23ce      	movs	r3, #206	; 0xce
 8011130:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8011134:	e010      	b.n	8011158 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8011136:	69fb      	ldr	r3, [r7, #28]
 8011138:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 801113a:	6a3a      	ldr	r2, [r7, #32]
 801113c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801113e:	6838      	ldr	r0, [r7, #0]
 8011140:	f7ff ff6a 	bl	8011018 <enable_spad_bit>
		currentSpad++;
 8011144:	6a3b      	ldr	r3, [r7, #32]
 8011146:	3301      	adds	r3, #1
 8011148:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 801114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801114c:	3301      	adds	r3, #1
 801114e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011154:	429a      	cmp	r2, r3
 8011156:	d3cf      	bcc.n	80110f8 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8011158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801115a:	6a3a      	ldr	r2, [r7, #32]
 801115c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 801115e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8011162:	2b00      	cmp	r3, #0
 8011164:	d106      	bne.n	8011174 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8011166:	6839      	ldr	r1, [r7, #0]
 8011168:	68f8      	ldr	r0, [r7, #12]
 801116a:	f7ff ff8d 	bl	8011088 <set_ref_spad_map>
 801116e:	4603      	mov	r3, r0
 8011170:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8011174:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8011178:	2b00      	cmp	r3, #0
 801117a:	d121      	bne.n	80111c0 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 801117c:	f107 0314 	add.w	r3, r7, #20
 8011180:	4619      	mov	r1, r3
 8011182:	68f8      	ldr	r0, [r7, #12]
 8011184:	f7ff ff93 	bl	80110ae <get_ref_spad_map>
 8011188:	4603      	mov	r3, r0
 801118a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 801118e:	2300      	movs	r3, #0
 8011190:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8011192:	e011      	b.n	80111b8 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8011194:	683a      	ldr	r2, [r7, #0]
 8011196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011198:	4413      	add	r3, r2
 801119a:	781a      	ldrb	r2, [r3, #0]
 801119c:	f107 0114 	add.w	r1, r7, #20
 80111a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a2:	440b      	add	r3, r1
 80111a4:	781b      	ldrb	r3, [r3, #0]
 80111a6:	429a      	cmp	r2, r3
 80111a8:	d003      	beq.n	80111b2 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80111aa:	23ce      	movs	r3, #206	; 0xce
 80111ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80111b0:	e006      	b.n	80111c0 <enable_ref_spads+0xec>
			}
			i++;
 80111b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b4:	3301      	adds	r3, #1
 80111b6:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80111b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111bc:	429a      	cmp	r2, r3
 80111be:	d3e9      	bcc.n	8011194 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80111c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80111c4:	4618      	mov	r0, r3
 80111c6:	3730      	adds	r7, #48	; 0x30
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}

080111cc <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b08a      	sub	sp, #40	; 0x28
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80111d6:	2300      	movs	r3, #0
 80111d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80111dc:	2300      	movs	r3, #0
 80111de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80111e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80111ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d107      	bne.n	8011204 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80111f4:	22c0      	movs	r2, #192	; 0xc0
 80111f6:	2101      	movs	r1, #1
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f002 fdcd 	bl	8013d98 <VL53L0X_WrByte>
 80111fe:	4603      	mov	r3, r0
 8011200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8011204:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011208:	2b00      	cmp	r3, #0
 801120a:	d108      	bne.n	801121e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 801120c:	f107 0308 	add.w	r3, r7, #8
 8011210:	4619      	mov	r1, r3
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f7ff fc48 	bl	8010aa8 <VL53L0X_PerformSingleRangingMeasurement>
 8011218:	4603      	mov	r3, r0
 801121a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 801121e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011222:	2b00      	cmp	r3, #0
 8011224:	d107      	bne.n	8011236 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8011226:	2201      	movs	r2, #1
 8011228:	21ff      	movs	r1, #255	; 0xff
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f002 fdb4 	bl	8013d98 <VL53L0X_WrByte>
 8011230:	4603      	mov	r3, r0
 8011232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8011236:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801123a:	2b00      	cmp	r3, #0
 801123c:	d107      	bne.n	801124e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 801123e:	683a      	ldr	r2, [r7, #0]
 8011240:	21b6      	movs	r1, #182	; 0xb6
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f002 fe54 	bl	8013ef0 <VL53L0X_RdWord>
 8011248:	4603      	mov	r3, r0
 801124a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 801124e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011252:	2b00      	cmp	r3, #0
 8011254:	d107      	bne.n	8011266 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8011256:	2200      	movs	r2, #0
 8011258:	21ff      	movs	r1, #255	; 0xff
 801125a:	6878      	ldr	r0, [r7, #4]
 801125c:	f002 fd9c 	bl	8013d98 <VL53L0X_WrByte>
 8011260:	4603      	mov	r3, r0
 8011262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8011266:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801126a:	2b00      	cmp	r3, #0
 801126c:	d112      	bne.n	8011294 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 801126e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011272:	461a      	mov	r2, r3
 8011274:	2101      	movs	r1, #1
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f002 fd8e 	bl	8013d98 <VL53L0X_WrByte>
 801127c:	4603      	mov	r3, r0
 801127e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8011282:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011286:	2b00      	cmp	r3, #0
 8011288:	d104      	bne.n	8011294 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8011290:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8011294:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011298:	4618      	mov	r0, r3
 801129a:	3728      	adds	r7, #40	; 0x28
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}

080112a0 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80112a0:	b590      	push	{r4, r7, lr}
 80112a2:	b09d      	sub	sp, #116	; 0x74
 80112a4:	af06      	add	r7, sp, #24
 80112a6:	60f8      	str	r0, [r7, #12]
 80112a8:	60b9      	str	r1, [r7, #8]
 80112aa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80112ac:	2300      	movs	r3, #0
 80112ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80112b2:	23b4      	movs	r3, #180	; 0xb4
 80112b4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80112b8:	2303      	movs	r3, #3
 80112ba:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80112bc:	232c      	movs	r3, #44	; 0x2c
 80112be:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80112c0:	2300      	movs	r3, #0
 80112c2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80112c4:	2300      	movs	r3, #0
 80112c6:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80112c8:	2300      	movs	r3, #0
 80112ca:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80112cc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80112d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80112d2:	2300      	movs	r3, #0
 80112d4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80112d6:	2300      	movs	r3, #0
 80112d8:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80112da:	2306      	movs	r3, #6
 80112dc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80112de:	2300      	movs	r3, #0
 80112e0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80112e2:	2300      	movs	r3, #0
 80112e4:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80112e6:	2300      	movs	r3, #0
 80112e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80112ec:	2300      	movs	r3, #0
 80112ee:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80112f0:	2300      	movs	r3, #0
 80112f2:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80112f4:	2300      	movs	r3, #0
 80112f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80112f8:	2300      	movs	r3, #0
 80112fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8011304:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8011306:	2300      	movs	r3, #0
 8011308:	64bb      	str	r3, [r7, #72]	; 0x48
 801130a:	e009      	b.n	8011320 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 801130c:	68fa      	ldr	r2, [r7, #12]
 801130e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011310:	4413      	add	r3, r2
 8011312:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8011316:	2200      	movs	r2, #0
 8011318:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 801131a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801131c:	3301      	adds	r3, #1
 801131e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011324:	429a      	cmp	r2, r3
 8011326:	d3f1      	bcc.n	801130c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8011328:	2201      	movs	r2, #1
 801132a:	21ff      	movs	r1, #255	; 0xff
 801132c:	68f8      	ldr	r0, [r7, #12]
 801132e:	f002 fd33 	bl	8013d98 <VL53L0X_WrByte>
 8011332:	4603      	mov	r3, r0
 8011334:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8011338:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 801133c:	2b00      	cmp	r3, #0
 801133e:	d107      	bne.n	8011350 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8011340:	2200      	movs	r2, #0
 8011342:	214f      	movs	r1, #79	; 0x4f
 8011344:	68f8      	ldr	r0, [r7, #12]
 8011346:	f002 fd27 	bl	8013d98 <VL53L0X_WrByte>
 801134a:	4603      	mov	r3, r0
 801134c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8011350:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8011354:	2b00      	cmp	r3, #0
 8011356:	d107      	bne.n	8011368 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8011358:	222c      	movs	r2, #44	; 0x2c
 801135a:	214e      	movs	r1, #78	; 0x4e
 801135c:	68f8      	ldr	r0, [r7, #12]
 801135e:	f002 fd1b 	bl	8013d98 <VL53L0X_WrByte>
 8011362:	4603      	mov	r3, r0
 8011364:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8011368:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 801136c:	2b00      	cmp	r3, #0
 801136e:	d107      	bne.n	8011380 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8011370:	2200      	movs	r2, #0
 8011372:	21ff      	movs	r1, #255	; 0xff
 8011374:	68f8      	ldr	r0, [r7, #12]
 8011376:	f002 fd0f 	bl	8013d98 <VL53L0X_WrByte>
 801137a:	4603      	mov	r3, r0
 801137c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8011380:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8011384:	2b00      	cmp	r3, #0
 8011386:	d109      	bne.n	801139c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8011388:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801138c:	461a      	mov	r2, r3
 801138e:	21b6      	movs	r1, #182	; 0xb6
 8011390:	68f8      	ldr	r0, [r7, #12]
 8011392:	f002 fd01 	bl	8013d98 <VL53L0X_WrByte>
 8011396:	4603      	mov	r3, r0
 8011398:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 801139c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d107      	bne.n	80113b4 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80113a4:	2200      	movs	r2, #0
 80113a6:	2180      	movs	r1, #128	; 0x80
 80113a8:	68f8      	ldr	r0, [r7, #12]
 80113aa:	f002 fcf5 	bl	8013d98 <VL53L0X_WrByte>
 80113ae:	4603      	mov	r3, r0
 80113b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80113b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d10a      	bne.n	80113d2 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80113bc:	f107 0210 	add.w	r2, r7, #16
 80113c0:	f107 0111 	add.w	r1, r7, #17
 80113c4:	2300      	movs	r3, #0
 80113c6:	68f8      	ldr	r0, [r7, #12]
 80113c8:	f000 fbbb 	bl	8011b42 <VL53L0X_perform_ref_calibration>
 80113cc:	4603      	mov	r3, r0
 80113ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80113d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d121      	bne.n	801141e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80113da:	2300      	movs	r3, #0
 80113dc:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80113de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113e0:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80113e2:	2300      	movs	r3, #0
 80113e4:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80113e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113e8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80113f6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80113fa:	f107 0218 	add.w	r2, r7, #24
 80113fe:	9204      	str	r2, [sp, #16]
 8011400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011402:	9203      	str	r2, [sp, #12]
 8011404:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011406:	9202      	str	r2, [sp, #8]
 8011408:	9301      	str	r3, [sp, #4]
 801140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140c:	9300      	str	r3, [sp, #0]
 801140e:	4623      	mov	r3, r4
 8011410:	4602      	mov	r2, r0
 8011412:	68f8      	ldr	r0, [r7, #12]
 8011414:	f7ff fe5e 	bl	80110d4 <enable_ref_spads>
 8011418:	4603      	mov	r3, r0
 801141a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 801141e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8011422:	2b00      	cmp	r3, #0
 8011424:	d174      	bne.n	8011510 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8011426:	69bb      	ldr	r3, [r7, #24]
 8011428:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 801142a:	f107 0312 	add.w	r3, r7, #18
 801142e:	4619      	mov	r1, r3
 8011430:	68f8      	ldr	r0, [r7, #12]
 8011432:	f7ff fecb 	bl	80111cc <perform_ref_signal_measurement>
 8011436:	4603      	mov	r3, r0
 8011438:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 801143c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8011440:	2b00      	cmp	r3, #0
 8011442:	d161      	bne.n	8011508 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8011444:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8011446:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011448:	429a      	cmp	r2, r3
 801144a:	d25d      	bcs.n	8011508 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 801144c:	2300      	movs	r3, #0
 801144e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011450:	e009      	b.n	8011466 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8011452:	68fa      	ldr	r2, [r7, #12]
 8011454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011456:	4413      	add	r3, r2
 8011458:	f503 7392 	add.w	r3, r3, #292	; 0x124
 801145c:	2200      	movs	r2, #0
 801145e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8011460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011462:	3301      	adds	r3, #1
 8011464:	64bb      	str	r3, [r7, #72]	; 0x48
 8011466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801146a:	429a      	cmp	r2, r3
 801146c:	d3f1      	bcc.n	8011452 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 801146e:	e002      	b.n	8011476 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8011470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011472:	3301      	adds	r3, #1
 8011474:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8011476:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 801147a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801147c:	4413      	add	r3, r2
 801147e:	4618      	mov	r0, r3
 8011480:	f7ff fdb0 	bl	8010fe4 <is_aperture>
 8011484:	4603      	mov	r3, r0
 8011486:	2b00      	cmp	r3, #0
 8011488:	d103      	bne.n	8011492 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 801148a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801148c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801148e:	429a      	cmp	r2, r3
 8011490:	d3ee      	bcc.n	8011470 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8011492:	2301      	movs	r3, #1
 8011494:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8011496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011498:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80114a6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80114aa:	f107 0218 	add.w	r2, r7, #24
 80114ae:	9204      	str	r2, [sp, #16]
 80114b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114b2:	9203      	str	r2, [sp, #12]
 80114b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80114b6:	9202      	str	r2, [sp, #8]
 80114b8:	9301      	str	r3, [sp, #4]
 80114ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114bc:	9300      	str	r3, [sp, #0]
 80114be:	4623      	mov	r3, r4
 80114c0:	4602      	mov	r2, r0
 80114c2:	68f8      	ldr	r0, [r7, #12]
 80114c4:	f7ff fe06 	bl	80110d4 <enable_ref_spads>
 80114c8:	4603      	mov	r3, r0
 80114ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80114ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d11b      	bne.n	801150e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80114d6:	69bb      	ldr	r3, [r7, #24]
 80114d8:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80114da:	f107 0312 	add.w	r3, r7, #18
 80114de:	4619      	mov	r1, r3
 80114e0:	68f8      	ldr	r0, [r7, #12]
 80114e2:	f7ff fe73 	bl	80111cc <perform_ref_signal_measurement>
 80114e6:	4603      	mov	r3, r0
 80114e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80114ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d10c      	bne.n	801150e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80114f4:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80114f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80114f8:	429a      	cmp	r2, r3
 80114fa:	d208      	bcs.n	801150e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80114fc:	2301      	movs	r3, #1
 80114fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8011502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011504:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8011506:	e002      	b.n	801150e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8011508:	2300      	movs	r3, #0
 801150a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801150c:	e000      	b.n	8011510 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 801150e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8011510:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8011514:	2b00      	cmp	r3, #0
 8011516:	f040 80af 	bne.w	8011678 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 801151a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 801151c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801151e:	429a      	cmp	r2, r3
 8011520:	f240 80aa 	bls.w	8011678 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8011524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011526:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 801152a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801152c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8011534:	f107 031c 	add.w	r3, r7, #28
 8011538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801153a:	4618      	mov	r0, r3
 801153c:	f002 fda0 	bl	8014080 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8011540:	8a7b      	ldrh	r3, [r7, #18]
 8011542:	461a      	mov	r2, r3
 8011544:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011546:	1ad3      	subs	r3, r2, r3
 8011548:	2b00      	cmp	r3, #0
 801154a:	bfb8      	it	lt
 801154c:	425b      	neglt	r3, r3
 801154e:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8011550:	2300      	movs	r3, #0
 8011552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8011556:	e086      	b.n	8011666 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 801155e:	f107 0314 	add.w	r3, r7, #20
 8011562:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011566:	f7ff fcdf 	bl	8010f28 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011570:	d103      	bne.n	801157a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8011572:	23ce      	movs	r3, #206	; 0xce
 8011574:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8011578:	e07e      	b.n	8011678 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 801157a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801157e:	697a      	ldr	r2, [r7, #20]
 8011580:	4413      	add	r3, r2
 8011582:	4618      	mov	r0, r3
 8011584:	f7ff fd2e 	bl	8010fe4 <is_aperture>
 8011588:	4603      	mov	r3, r0
 801158a:	461a      	mov	r2, r3
 801158c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801158e:	4293      	cmp	r3, r2
 8011590:	d003      	beq.n	801159a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8011592:	2301      	movs	r3, #1
 8011594:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8011598:	e06e      	b.n	8011678 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 801159a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801159c:	3301      	adds	r3, #1
 801159e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80115a0:	697b      	ldr	r3, [r7, #20]
 80115a2:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80115aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80115ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7ff fd32 	bl	8011018 <enable_spad_bit>
 80115b4:	4603      	mov	r3, r0
 80115b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80115ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d10c      	bne.n	80115dc <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80115c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115c4:	3301      	adds	r3, #1
 80115c6:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80115ce:	4619      	mov	r1, r3
 80115d0:	68f8      	ldr	r0, [r7, #12]
 80115d2:	f7ff fd59 	bl	8011088 <set_ref_spad_map>
 80115d6:	4603      	mov	r3, r0
 80115d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80115dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d146      	bne.n	8011672 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80115e4:	f107 0312 	add.w	r3, r7, #18
 80115e8:	4619      	mov	r1, r3
 80115ea:	68f8      	ldr	r0, [r7, #12]
 80115ec:	f7ff fdee 	bl	80111cc <perform_ref_signal_measurement>
 80115f0:	4603      	mov	r3, r0
 80115f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80115f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d13b      	bne.n	8011676 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80115fe:	8a7b      	ldrh	r3, [r7, #18]
 8011600:	461a      	mov	r2, r3
 8011602:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011604:	1ad3      	subs	r3, r2, r3
 8011606:	2b00      	cmp	r3, #0
 8011608:	bfb8      	it	lt
 801160a:	425b      	neglt	r3, r3
 801160c:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 801160e:	8a7b      	ldrh	r3, [r7, #18]
 8011610:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011612:	429a      	cmp	r2, r3
 8011614:	d21c      	bcs.n	8011650 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8011616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801161a:	429a      	cmp	r2, r3
 801161c:	d914      	bls.n	8011648 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 801161e:	f107 031c 	add.w	r3, r7, #28
 8011622:	4619      	mov	r1, r3
 8011624:	68f8      	ldr	r0, [r7, #12]
 8011626:	f7ff fd2f 	bl	8011088 <set_ref_spad_map>
 801162a:	4603      	mov	r3, r0
 801162c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8011636:	f107 011c 	add.w	r1, r7, #28
 801163a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801163c:	4618      	mov	r0, r3
 801163e:	f002 fd1f 	bl	8014080 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8011642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011644:	3b01      	subs	r3, #1
 8011646:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8011648:	2301      	movs	r3, #1
 801164a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801164e:	e00a      	b.n	8011666 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8011650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011652:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 801165a:	f107 031c 	add.w	r3, r7, #28
 801165e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011660:	4618      	mov	r0, r3
 8011662:	f002 fd0d 	bl	8014080 <memcpy>
		while (!complete) {
 8011666:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801166a:	2b00      	cmp	r3, #0
 801166c:	f43f af74 	beq.w	8011558 <VL53L0X_perform_ref_spad_management+0x2b8>
 8011670:	e002      	b.n	8011678 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8011672:	bf00      	nop
 8011674:	e000      	b.n	8011678 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8011676:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8011678:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 801167c:	2b00      	cmp	r3, #0
 801167e:	d115      	bne.n	80116ac <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011684:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801168c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	2201      	movs	r2, #1
 8011692:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	b2da      	uxtb	r2, r3
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	781a      	ldrb	r2, [r3, #0]
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80116ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	375c      	adds	r7, #92	; 0x5c
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd90      	pop	{r4, r7, pc}

080116b8 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80116b8:	b590      	push	{r4, r7, lr}
 80116ba:	b093      	sub	sp, #76	; 0x4c
 80116bc:	af06      	add	r7, sp, #24
 80116be:	60f8      	str	r0, [r7, #12]
 80116c0:	60b9      	str	r1, [r7, #8]
 80116c2:	4613      	mov	r3, r2
 80116c4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80116c6:	2300      	movs	r3, #0
 80116c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80116cc:	2300      	movs	r3, #0
 80116ce:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80116d0:	23b4      	movs	r3, #180	; 0xb4
 80116d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80116d6:	2306      	movs	r3, #6
 80116d8:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80116da:	232c      	movs	r3, #44	; 0x2c
 80116dc:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80116de:	2201      	movs	r2, #1
 80116e0:	21ff      	movs	r1, #255	; 0xff
 80116e2:	68f8      	ldr	r0, [r7, #12]
 80116e4:	f002 fb58 	bl	8013d98 <VL53L0X_WrByte>
 80116e8:	4603      	mov	r3, r0
 80116ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80116ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d107      	bne.n	8011706 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80116f6:	2200      	movs	r2, #0
 80116f8:	214f      	movs	r1, #79	; 0x4f
 80116fa:	68f8      	ldr	r0, [r7, #12]
 80116fc:	f002 fb4c 	bl	8013d98 <VL53L0X_WrByte>
 8011700:	4603      	mov	r3, r0
 8011702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8011706:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801170a:	2b00      	cmp	r3, #0
 801170c:	d107      	bne.n	801171e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 801170e:	222c      	movs	r2, #44	; 0x2c
 8011710:	214e      	movs	r1, #78	; 0x4e
 8011712:	68f8      	ldr	r0, [r7, #12]
 8011714:	f002 fb40 	bl	8013d98 <VL53L0X_WrByte>
 8011718:	4603      	mov	r3, r0
 801171a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 801171e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8011722:	2b00      	cmp	r3, #0
 8011724:	d107      	bne.n	8011736 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8011726:	2200      	movs	r2, #0
 8011728:	21ff      	movs	r1, #255	; 0xff
 801172a:	68f8      	ldr	r0, [r7, #12]
 801172c:	f002 fb34 	bl	8013d98 <VL53L0X_WrByte>
 8011730:	4603      	mov	r3, r0
 8011732:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8011736:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801173a:	2b00      	cmp	r3, #0
 801173c:	d109      	bne.n	8011752 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 801173e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011742:	461a      	mov	r2, r3
 8011744:	21b6      	movs	r1, #182	; 0xb6
 8011746:	68f8      	ldr	r0, [r7, #12]
 8011748:	f002 fb26 	bl	8013d98 <VL53L0X_WrByte>
 801174c:	4603      	mov	r3, r0
 801174e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8011752:	2300      	movs	r3, #0
 8011754:	627b      	str	r3, [r7, #36]	; 0x24
 8011756:	e009      	b.n	801176c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8011758:	68fa      	ldr	r2, [r7, #12]
 801175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801175c:	4413      	add	r3, r2
 801175e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8011762:	2200      	movs	r2, #0
 8011764:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8011766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011768:	3301      	adds	r3, #1
 801176a:	627b      	str	r3, [r7, #36]	; 0x24
 801176c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801176e:	69fb      	ldr	r3, [r7, #28]
 8011770:	429a      	cmp	r2, r3
 8011772:	d3f1      	bcc.n	8011758 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8011774:	79fb      	ldrb	r3, [r7, #7]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d011      	beq.n	801179e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 801177a:	e002      	b.n	8011782 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 801177c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801177e:	3301      	adds	r3, #1
 8011780:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8011782:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8011786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011788:	4413      	add	r3, r2
 801178a:	4618      	mov	r0, r3
 801178c:	f7ff fc2a 	bl	8010fe4 <is_aperture>
 8011790:	4603      	mov	r3, r0
 8011792:	2b00      	cmp	r3, #0
 8011794:	d103      	bne.n	801179e <VL53L0X_set_reference_spads+0xe6>
 8011796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011798:	69bb      	ldr	r3, [r7, #24]
 801179a:	429a      	cmp	r2, r3
 801179c:	d3ee      	bcc.n	801177c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80117aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80117ae:	79f9      	ldrb	r1, [r7, #7]
 80117b0:	f107 0214 	add.w	r2, r7, #20
 80117b4:	9204      	str	r2, [sp, #16]
 80117b6:	68ba      	ldr	r2, [r7, #8]
 80117b8:	9203      	str	r2, [sp, #12]
 80117ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117bc:	9202      	str	r2, [sp, #8]
 80117be:	9301      	str	r3, [sp, #4]
 80117c0:	69fb      	ldr	r3, [r7, #28]
 80117c2:	9300      	str	r3, [sp, #0]
 80117c4:	4623      	mov	r3, r4
 80117c6:	4602      	mov	r2, r0
 80117c8:	68f8      	ldr	r0, [r7, #12]
 80117ca:	f7ff fc83 	bl	80110d4 <enable_ref_spads>
 80117ce:	4603      	mov	r3, r0
 80117d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80117d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d10c      	bne.n	80117f6 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	2201      	movs	r2, #1
 80117e0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80117e4:	68bb      	ldr	r3, [r7, #8]
 80117e6:	b2da      	uxtb	r2, r3
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	79fa      	ldrb	r2, [r7, #7]
 80117f2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80117f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	3734      	adds	r7, #52	; 0x34
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd90      	pop	{r4, r7, pc}

08011802 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8011802:	b580      	push	{r7, lr}
 8011804:	b084      	sub	sp, #16
 8011806:	af00      	add	r7, sp, #0
 8011808:	6078      	str	r0, [r7, #4]
 801180a:	460b      	mov	r3, r1
 801180c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801180e:	2300      	movs	r3, #0
 8011810:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8011812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d10a      	bne.n	8011830 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 801181a:	78fb      	ldrb	r3, [r7, #3]
 801181c:	f043 0301 	orr.w	r3, r3, #1
 8011820:	b2db      	uxtb	r3, r3
 8011822:	461a      	mov	r2, r3
 8011824:	2100      	movs	r1, #0
 8011826:	6878      	ldr	r0, [r7, #4]
 8011828:	f002 fab6 	bl	8013d98 <VL53L0X_WrByte>
 801182c:	4603      	mov	r3, r0
 801182e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8011830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d104      	bne.n	8011842 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f000 f9bf 	bl	8011bbc <VL53L0X_measurement_poll_for_completion>
 801183e:	4603      	mov	r3, r0
 8011840:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8011842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d105      	bne.n	8011856 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 801184a:	2100      	movs	r1, #0
 801184c:	6878      	ldr	r0, [r7, #4]
 801184e:	f7ff fab5 	bl	8010dbc <VL53L0X_ClearInterruptMask>
 8011852:	4603      	mov	r3, r0
 8011854:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8011856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d106      	bne.n	801186c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 801185e:	2200      	movs	r2, #0
 8011860:	2100      	movs	r1, #0
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f002 fa98 	bl	8013d98 <VL53L0X_WrByte>
 8011868:	4603      	mov	r3, r0
 801186a:	73fb      	strb	r3, [r7, #15]

	return Status;
 801186c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011870:	4618      	mov	r0, r3
 8011872:	3710      	adds	r7, #16
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}

08011878 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b084      	sub	sp, #16
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
 8011880:	4608      	mov	r0, r1
 8011882:	4611      	mov	r1, r2
 8011884:	461a      	mov	r2, r3
 8011886:	4603      	mov	r3, r0
 8011888:	70fb      	strb	r3, [r7, #3]
 801188a:	460b      	mov	r3, r1
 801188c:	70bb      	strb	r3, [r7, #2]
 801188e:	4613      	mov	r3, r2
 8011890:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8011892:	2300      	movs	r3, #0
 8011894:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8011896:	2300      	movs	r3, #0
 8011898:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 801189a:	2201      	movs	r2, #1
 801189c:	21ff      	movs	r1, #255	; 0xff
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f002 fa7a 	bl	8013d98 <VL53L0X_WrByte>
 80118a4:	4603      	mov	r3, r0
 80118a6:	461a      	mov	r2, r3
 80118a8:	7bfb      	ldrb	r3, [r7, #15]
 80118aa:	4313      	orrs	r3, r2
 80118ac:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80118ae:	2200      	movs	r2, #0
 80118b0:	2100      	movs	r1, #0
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f002 fa70 	bl	8013d98 <VL53L0X_WrByte>
 80118b8:	4603      	mov	r3, r0
 80118ba:	461a      	mov	r2, r3
 80118bc:	7bfb      	ldrb	r3, [r7, #15]
 80118be:	4313      	orrs	r3, r2
 80118c0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80118c2:	2200      	movs	r2, #0
 80118c4:	21ff      	movs	r1, #255	; 0xff
 80118c6:	6878      	ldr	r0, [r7, #4]
 80118c8:	f002 fa66 	bl	8013d98 <VL53L0X_WrByte>
 80118cc:	4603      	mov	r3, r0
 80118ce:	461a      	mov	r2, r3
 80118d0:	7bfb      	ldrb	r3, [r7, #15]
 80118d2:	4313      	orrs	r3, r2
 80118d4:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80118d6:	78fb      	ldrb	r3, [r7, #3]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d01e      	beq.n	801191a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80118dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d009      	beq.n	80118f8 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80118e4:	69ba      	ldr	r2, [r7, #24]
 80118e6:	21cb      	movs	r1, #203	; 0xcb
 80118e8:	6878      	ldr	r0, [r7, #4]
 80118ea:	f002 fad7 	bl	8013e9c <VL53L0X_RdByte>
 80118ee:	4603      	mov	r3, r0
 80118f0:	461a      	mov	r2, r3
 80118f2:	7bfb      	ldrb	r3, [r7, #15]
 80118f4:	4313      	orrs	r3, r2
 80118f6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80118f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d02a      	beq.n	8011956 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8011900:	f107 030e 	add.w	r3, r7, #14
 8011904:	461a      	mov	r2, r3
 8011906:	21ee      	movs	r1, #238	; 0xee
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f002 fac7 	bl	8013e9c <VL53L0X_RdByte>
 801190e:	4603      	mov	r3, r0
 8011910:	461a      	mov	r2, r3
 8011912:	7bfb      	ldrb	r3, [r7, #15]
 8011914:	4313      	orrs	r3, r2
 8011916:	73fb      	strb	r3, [r7, #15]
 8011918:	e01d      	b.n	8011956 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 801191a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d00a      	beq.n	8011938 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8011922:	78bb      	ldrb	r3, [r7, #2]
 8011924:	461a      	mov	r2, r3
 8011926:	21cb      	movs	r1, #203	; 0xcb
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f002 fa35 	bl	8013d98 <VL53L0X_WrByte>
 801192e:	4603      	mov	r3, r0
 8011930:	461a      	mov	r2, r3
 8011932:	7bfb      	ldrb	r3, [r7, #15]
 8011934:	4313      	orrs	r3, r2
 8011936:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8011938:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801193c:	2b00      	cmp	r3, #0
 801193e:	d00a      	beq.n	8011956 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8011940:	787b      	ldrb	r3, [r7, #1]
 8011942:	2280      	movs	r2, #128	; 0x80
 8011944:	21ee      	movs	r1, #238	; 0xee
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f002 fa74 	bl	8013e34 <VL53L0X_UpdateByte>
 801194c:	4603      	mov	r3, r0
 801194e:	461a      	mov	r2, r3
 8011950:	7bfb      	ldrb	r3, [r7, #15]
 8011952:	4313      	orrs	r3, r2
 8011954:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8011956:	2201      	movs	r2, #1
 8011958:	21ff      	movs	r1, #255	; 0xff
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f002 fa1c 	bl	8013d98 <VL53L0X_WrByte>
 8011960:	4603      	mov	r3, r0
 8011962:	461a      	mov	r2, r3
 8011964:	7bfb      	ldrb	r3, [r7, #15]
 8011966:	4313      	orrs	r3, r2
 8011968:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 801196a:	2201      	movs	r2, #1
 801196c:	2100      	movs	r1, #0
 801196e:	6878      	ldr	r0, [r7, #4]
 8011970:	f002 fa12 	bl	8013d98 <VL53L0X_WrByte>
 8011974:	4603      	mov	r3, r0
 8011976:	461a      	mov	r2, r3
 8011978:	7bfb      	ldrb	r3, [r7, #15]
 801197a:	4313      	orrs	r3, r2
 801197c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 801197e:	2200      	movs	r2, #0
 8011980:	21ff      	movs	r1, #255	; 0xff
 8011982:	6878      	ldr	r0, [r7, #4]
 8011984:	f002 fa08 	bl	8013d98 <VL53L0X_WrByte>
 8011988:	4603      	mov	r3, r0
 801198a:	461a      	mov	r2, r3
 801198c:	7bfb      	ldrb	r3, [r7, #15]
 801198e:	4313      	orrs	r3, r2
 8011990:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8011992:	7bbb      	ldrb	r3, [r7, #14]
 8011994:	f023 0310 	bic.w	r3, r3, #16
 8011998:	b2da      	uxtb	r2, r3
 801199a:	69fb      	ldr	r3, [r7, #28]
 801199c:	701a      	strb	r2, [r3, #0]

	return Status;
 801199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80119a2:	4618      	mov	r0, r3
 80119a4:	3710      	adds	r7, #16
 80119a6:	46bd      	mov	sp, r7
 80119a8:	bd80      	pop	{r7, pc}

080119aa <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80119aa:	b580      	push	{r7, lr}
 80119ac:	b08a      	sub	sp, #40	; 0x28
 80119ae:	af04      	add	r7, sp, #16
 80119b0:	60f8      	str	r0, [r7, #12]
 80119b2:	60b9      	str	r1, [r7, #8]
 80119b4:	4611      	mov	r1, r2
 80119b6:	461a      	mov	r2, r3
 80119b8:	460b      	mov	r3, r1
 80119ba:	71fb      	strb	r3, [r7, #7]
 80119bc:	4613      	mov	r3, r2
 80119be:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80119c0:	2300      	movs	r3, #0
 80119c2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80119c4:	2300      	movs	r3, #0
 80119c6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80119c8:	2300      	movs	r3, #0
 80119ca:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80119cc:	2300      	movs	r3, #0
 80119ce:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80119d0:	2300      	movs	r3, #0
 80119d2:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80119d4:	79bb      	ldrb	r3, [r7, #6]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d003      	beq.n	80119e2 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80119e0:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80119e2:	2201      	movs	r2, #1
 80119e4:	2101      	movs	r1, #1
 80119e6:	68f8      	ldr	r0, [r7, #12]
 80119e8:	f002 f9d6 	bl	8013d98 <VL53L0X_WrByte>
 80119ec:	4603      	mov	r3, r0
 80119ee:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80119f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d105      	bne.n	8011a04 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80119f8:	2140      	movs	r1, #64	; 0x40
 80119fa:	68f8      	ldr	r0, [r7, #12]
 80119fc:	f7ff ff01 	bl	8011802 <VL53L0X_perform_single_ref_calibration>
 8011a00:	4603      	mov	r3, r0
 8011a02:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8011a04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d115      	bne.n	8011a38 <VL53L0X_perform_vhv_calibration+0x8e>
 8011a0c:	79fb      	ldrb	r3, [r7, #7]
 8011a0e:	2b01      	cmp	r3, #1
 8011a10:	d112      	bne.n	8011a38 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8011a12:	7d39      	ldrb	r1, [r7, #20]
 8011a14:	7d7a      	ldrb	r2, [r7, #21]
 8011a16:	2300      	movs	r3, #0
 8011a18:	9303      	str	r3, [sp, #12]
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	9302      	str	r3, [sp, #8]
 8011a1e:	f107 0313 	add.w	r3, r7, #19
 8011a22:	9301      	str	r3, [sp, #4]
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	9300      	str	r3, [sp, #0]
 8011a28:	460b      	mov	r3, r1
 8011a2a:	2101      	movs	r1, #1
 8011a2c:	68f8      	ldr	r0, [r7, #12]
 8011a2e:	f7ff ff23 	bl	8011878 <VL53L0X_ref_calibration_io>
 8011a32:	4603      	mov	r3, r0
 8011a34:	75fb      	strb	r3, [r7, #23]
 8011a36:	e002      	b.n	8011a3e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8011a38:	68bb      	ldr	r3, [r7, #8]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8011a3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d112      	bne.n	8011a6c <VL53L0X_perform_vhv_calibration+0xc2>
 8011a46:	79bb      	ldrb	r3, [r7, #6]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d00f      	beq.n	8011a6c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8011a4c:	7dbb      	ldrb	r3, [r7, #22]
 8011a4e:	461a      	mov	r2, r3
 8011a50:	2101      	movs	r1, #1
 8011a52:	68f8      	ldr	r0, [r7, #12]
 8011a54:	f002 f9a0 	bl	8013d98 <VL53L0X_WrByte>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8011a5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d103      	bne.n	8011a6c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	7dba      	ldrb	r2, [r7, #22]
 8011a68:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8011a6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3718      	adds	r7, #24
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}

08011a78 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b08a      	sub	sp, #40	; 0x28
 8011a7c:	af04      	add	r7, sp, #16
 8011a7e:	60f8      	str	r0, [r7, #12]
 8011a80:	60b9      	str	r1, [r7, #8]
 8011a82:	4611      	mov	r1, r2
 8011a84:	461a      	mov	r2, r3
 8011a86:	460b      	mov	r3, r1
 8011a88:	71fb      	strb	r3, [r7, #7]
 8011a8a:	4613      	mov	r3, r2
 8011a8c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8011a92:	2300      	movs	r3, #0
 8011a94:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8011a96:	2300      	movs	r3, #0
 8011a98:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8011a9e:	79bb      	ldrb	r3, [r7, #6]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d003      	beq.n	8011aac <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8011aaa:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8011aac:	2202      	movs	r2, #2
 8011aae:	2101      	movs	r1, #1
 8011ab0:	68f8      	ldr	r0, [r7, #12]
 8011ab2:	f002 f971 	bl	8013d98 <VL53L0X_WrByte>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8011aba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d105      	bne.n	8011ace <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8011ac2:	2100      	movs	r1, #0
 8011ac4:	68f8      	ldr	r0, [r7, #12]
 8011ac6:	f7ff fe9c 	bl	8011802 <VL53L0X_perform_single_ref_calibration>
 8011aca:	4603      	mov	r3, r0
 8011acc:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8011ace:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d115      	bne.n	8011b02 <VL53L0X_perform_phase_calibration+0x8a>
 8011ad6:	79fb      	ldrb	r3, [r7, #7]
 8011ad8:	2b01      	cmp	r3, #1
 8011ada:	d112      	bne.n	8011b02 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8011adc:	7d39      	ldrb	r1, [r7, #20]
 8011ade:	7d7a      	ldrb	r2, [r7, #21]
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	9303      	str	r3, [sp, #12]
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	9302      	str	r3, [sp, #8]
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	9301      	str	r3, [sp, #4]
 8011aec:	f107 0313 	add.w	r3, r7, #19
 8011af0:	9300      	str	r3, [sp, #0]
 8011af2:	460b      	mov	r3, r1
 8011af4:	2101      	movs	r1, #1
 8011af6:	68f8      	ldr	r0, [r7, #12]
 8011af8:	f7ff febe 	bl	8011878 <VL53L0X_ref_calibration_io>
 8011afc:	4603      	mov	r3, r0
 8011afe:	75fb      	strb	r3, [r7, #23]
 8011b00:	e002      	b.n	8011b08 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	2200      	movs	r2, #0
 8011b06:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8011b08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d112      	bne.n	8011b36 <VL53L0X_perform_phase_calibration+0xbe>
 8011b10:	79bb      	ldrb	r3, [r7, #6]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d00f      	beq.n	8011b36 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8011b16:	7dbb      	ldrb	r3, [r7, #22]
 8011b18:	461a      	mov	r2, r3
 8011b1a:	2101      	movs	r1, #1
 8011b1c:	68f8      	ldr	r0, [r7, #12]
 8011b1e:	f002 f93b 	bl	8013d98 <VL53L0X_WrByte>
 8011b22:	4603      	mov	r3, r0
 8011b24:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8011b26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d103      	bne.n	8011b36 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	7dba      	ldrb	r2, [r7, #22]
 8011b32:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8011b36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3718      	adds	r7, #24
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}

08011b42 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8011b42:	b580      	push	{r7, lr}
 8011b44:	b086      	sub	sp, #24
 8011b46:	af00      	add	r7, sp, #0
 8011b48:	60f8      	str	r0, [r7, #12]
 8011b4a:	60b9      	str	r1, [r7, #8]
 8011b4c:	607a      	str	r2, [r7, #4]
 8011b4e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8011b50:	2300      	movs	r3, #0
 8011b52:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8011b54:	2300      	movs	r3, #0
 8011b56:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8011b5e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8011b60:	78fa      	ldrb	r2, [r7, #3]
 8011b62:	2300      	movs	r3, #0
 8011b64:	68b9      	ldr	r1, [r7, #8]
 8011b66:	68f8      	ldr	r0, [r7, #12]
 8011b68:	f7ff ff1f 	bl	80119aa <VL53L0X_perform_vhv_calibration>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8011b70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d107      	bne.n	8011b88 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8011b78:	78fa      	ldrb	r2, [r7, #3]
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	6879      	ldr	r1, [r7, #4]
 8011b7e:	68f8      	ldr	r0, [r7, #12]
 8011b80:	f7ff ff7a 	bl	8011a78 <VL53L0X_perform_phase_calibration>
 8011b84:	4603      	mov	r3, r0
 8011b86:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8011b88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d10f      	bne.n	8011bb0 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8011b90:	7dbb      	ldrb	r3, [r7, #22]
 8011b92:	461a      	mov	r2, r3
 8011b94:	2101      	movs	r1, #1
 8011b96:	68f8      	ldr	r0, [r7, #12]
 8011b98:	f002 f8fe 	bl	8013d98 <VL53L0X_WrByte>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8011ba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d103      	bne.n	8011bb0 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	7dba      	ldrb	r2, [r7, #22]
 8011bac:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8011bb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	3718      	adds	r7, #24
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd80      	pop	{r7, pc}

08011bbc <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b086      	sub	sp, #24
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8011bc8:	2300      	movs	r3, #0
 8011bca:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8011bd0:	f107 030f 	add.w	r3, r7, #15
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f7fe fe02 	bl	80107e0 <VL53L0X_GetMeasurementDataReady>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8011be0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d110      	bne.n	8011c0a <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8011be8:	7bfb      	ldrb	r3, [r7, #15]
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d00f      	beq.n	8011c0e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8011bee:	693b      	ldr	r3, [r7, #16]
 8011bf0:	3301      	adds	r3, #1
 8011bf2:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8011bf4:	693b      	ldr	r3, [r7, #16]
 8011bf6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8011bfa:	d302      	bcc.n	8011c02 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8011bfc:	23f9      	movs	r3, #249	; 0xf9
 8011bfe:	75fb      	strb	r3, [r7, #23]
			break;
 8011c00:	e006      	b.n	8011c10 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8011c02:	6878      	ldr	r0, [r7, #4]
 8011c04:	f002 f9e8 	bl	8013fd8 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8011c08:	e7e2      	b.n	8011bd0 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8011c0a:	bf00      	nop
 8011c0c:	e000      	b.n	8011c10 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8011c0e:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8011c10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3718      	adds	r7, #24
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}

08011c1c <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	b085      	sub	sp, #20
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	4603      	mov	r3, r0
 8011c24:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8011c26:	2300      	movs	r3, #0
 8011c28:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8011c2a:	79fb      	ldrb	r3, [r7, #7]
 8011c2c:	3301      	adds	r3, #1
 8011c2e:	b2db      	uxtb	r3, r3
 8011c30:	005b      	lsls	r3, r3, #1
 8011c32:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8011c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	3714      	adds	r7, #20
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c40:	4770      	bx	lr

08011c42 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8011c42:	b480      	push	{r7}
 8011c44:	b085      	sub	sp, #20
 8011c46:	af00      	add	r7, sp, #0
 8011c48:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8011c4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011c52:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8011c54:	e002      	b.n	8011c5c <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	089b      	lsrs	r3, r3, #2
 8011c5a:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8011c5c:	68ba      	ldr	r2, [r7, #8]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d8f8      	bhi.n	8011c56 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8011c64:	e017      	b.n	8011c96 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8011c66:	68fa      	ldr	r2, [r7, #12]
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	4413      	add	r3, r2
 8011c6c:	687a      	ldr	r2, [r7, #4]
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d30b      	bcc.n	8011c8a <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8011c72:	68fa      	ldr	r2, [r7, #12]
 8011c74:	68bb      	ldr	r3, [r7, #8]
 8011c76:	4413      	add	r3, r2
 8011c78:	687a      	ldr	r2, [r7, #4]
 8011c7a:	1ad3      	subs	r3, r2, r3
 8011c7c:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	085b      	lsrs	r3, r3, #1
 8011c82:	68ba      	ldr	r2, [r7, #8]
 8011c84:	4413      	add	r3, r2
 8011c86:	60fb      	str	r3, [r7, #12]
 8011c88:	e002      	b.n	8011c90 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	085b      	lsrs	r3, r3, #1
 8011c8e:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	089b      	lsrs	r3, r3, #2
 8011c94:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d1e4      	bne.n	8011c66 <VL53L0X_isqrt+0x24>
	}

	return res;
 8011c9c:	68fb      	ldr	r3, [r7, #12]
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3714      	adds	r7, #20
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca8:	4770      	bx	lr

08011caa <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8011caa:	b580      	push	{r7, lr}
 8011cac:	b086      	sub	sp, #24
 8011cae:	af00      	add	r7, sp, #0
 8011cb0:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	2183      	movs	r1, #131	; 0x83
 8011cba:	6878      	ldr	r0, [r7, #4]
 8011cbc:	f002 f86c 	bl	8013d98 <VL53L0X_WrByte>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	461a      	mov	r2, r3
 8011cc4:	7dfb      	ldrb	r3, [r7, #23]
 8011cc6:	4313      	orrs	r3, r2
 8011cc8:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8011cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d11e      	bne.n	8011d10 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8011cd6:	f107 030f 	add.w	r3, r7, #15
 8011cda:	461a      	mov	r2, r3
 8011cdc:	2183      	movs	r1, #131	; 0x83
 8011cde:	6878      	ldr	r0, [r7, #4]
 8011ce0:	f002 f8dc 	bl	8013e9c <VL53L0X_RdByte>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8011ce8:	7bfb      	ldrb	r3, [r7, #15]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d10a      	bne.n	8011d04 <VL53L0X_device_read_strobe+0x5a>
 8011cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d106      	bne.n	8011d04 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	3301      	adds	r3, #1
 8011cfa:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8011cfc:	693b      	ldr	r3, [r7, #16]
 8011cfe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8011d02:	d3e8      	bcc.n	8011cd6 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8011d04:	693b      	ldr	r3, [r7, #16]
 8011d06:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8011d0a:	d301      	bcc.n	8011d10 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8011d0c:	23f9      	movs	r3, #249	; 0xf9
 8011d0e:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8011d10:	2201      	movs	r2, #1
 8011d12:	2183      	movs	r1, #131	; 0x83
 8011d14:	6878      	ldr	r0, [r7, #4]
 8011d16:	f002 f83f 	bl	8013d98 <VL53L0X_WrByte>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	7dfb      	ldrb	r3, [r7, #23]
 8011d20:	4313      	orrs	r3, r2
 8011d22:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8011d24:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	3718      	adds	r7, #24
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bd80      	pop	{r7, pc}

08011d30 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b098      	sub	sp, #96	; 0x60
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
 8011d38:	460b      	mov	r3, r1
 8011d3a:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8011d42:	2300      	movs	r3, #0
 8011d44:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8011d48:	2300      	movs	r3, #0
 8011d4a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8011d52:	2300      	movs	r3, #0
 8011d54:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8011d56:	2300      	movs	r3, #0
 8011d58:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8011d60:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8011d64:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8011d66:	2300      	movs	r3, #0
 8011d68:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8011d78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8011d7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011d80:	2b07      	cmp	r3, #7
 8011d82:	f000 8408 	beq.w	8012596 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8011d86:	2201      	movs	r2, #1
 8011d88:	2180      	movs	r1, #128	; 0x80
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f002 f804 	bl	8013d98 <VL53L0X_WrByte>
 8011d90:	4603      	mov	r3, r0
 8011d92:	461a      	mov	r2, r3
 8011d94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011d98:	4313      	orrs	r3, r2
 8011d9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8011d9e:	2201      	movs	r2, #1
 8011da0:	21ff      	movs	r1, #255	; 0xff
 8011da2:	6878      	ldr	r0, [r7, #4]
 8011da4:	f001 fff8 	bl	8013d98 <VL53L0X_WrByte>
 8011da8:	4603      	mov	r3, r0
 8011daa:	461a      	mov	r2, r3
 8011dac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011db0:	4313      	orrs	r3, r2
 8011db2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8011db6:	2200      	movs	r2, #0
 8011db8:	2100      	movs	r1, #0
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	f001 ffec 	bl	8013d98 <VL53L0X_WrByte>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011dc8:	4313      	orrs	r3, r2
 8011dca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8011dce:	2206      	movs	r2, #6
 8011dd0:	21ff      	movs	r1, #255	; 0xff
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f001 ffe0 	bl	8013d98 <VL53L0X_WrByte>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	461a      	mov	r2, r3
 8011ddc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011de0:	4313      	orrs	r3, r2
 8011de2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8011de6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8011dea:	461a      	mov	r2, r3
 8011dec:	2183      	movs	r1, #131	; 0x83
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f002 f854 	bl	8013e9c <VL53L0X_RdByte>
 8011df4:	4603      	mov	r3, r0
 8011df6:	461a      	mov	r2, r3
 8011df8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011dfc:	4313      	orrs	r3, r2
 8011dfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8011e02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e06:	f043 0304 	orr.w	r3, r3, #4
 8011e0a:	b2db      	uxtb	r3, r3
 8011e0c:	461a      	mov	r2, r3
 8011e0e:	2183      	movs	r1, #131	; 0x83
 8011e10:	6878      	ldr	r0, [r7, #4]
 8011e12:	f001 ffc1 	bl	8013d98 <VL53L0X_WrByte>
 8011e16:	4603      	mov	r3, r0
 8011e18:	461a      	mov	r2, r3
 8011e1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011e1e:	4313      	orrs	r3, r2
 8011e20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8011e24:	2207      	movs	r2, #7
 8011e26:	21ff      	movs	r1, #255	; 0xff
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	f001 ffb5 	bl	8013d98 <VL53L0X_WrByte>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	461a      	mov	r2, r3
 8011e32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011e36:	4313      	orrs	r3, r2
 8011e38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8011e3c:	2201      	movs	r2, #1
 8011e3e:	2181      	movs	r1, #129	; 0x81
 8011e40:	6878      	ldr	r0, [r7, #4]
 8011e42:	f001 ffa9 	bl	8013d98 <VL53L0X_WrByte>
 8011e46:	4603      	mov	r3, r0
 8011e48:	461a      	mov	r2, r3
 8011e4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011e4e:	4313      	orrs	r3, r2
 8011e50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8011e54:	6878      	ldr	r0, [r7, #4]
 8011e56:	f002 f8bf 	bl	8013fd8 <VL53L0X_PollingDelay>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	461a      	mov	r2, r3
 8011e5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011e62:	4313      	orrs	r3, r2
 8011e64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8011e68:	2201      	movs	r2, #1
 8011e6a:	2180      	movs	r1, #128	; 0x80
 8011e6c:	6878      	ldr	r0, [r7, #4]
 8011e6e:	f001 ff93 	bl	8013d98 <VL53L0X_WrByte>
 8011e72:	4603      	mov	r3, r0
 8011e74:	461a      	mov	r2, r3
 8011e76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011e7a:	4313      	orrs	r3, r2
 8011e7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8011e80:	78fb      	ldrb	r3, [r7, #3]
 8011e82:	f003 0301 	and.w	r3, r3, #1
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	f000 8098 	beq.w	8011fbc <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8011e8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011e90:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	f040 8091 	bne.w	8011fbc <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8011e9a:	226b      	movs	r2, #107	; 0x6b
 8011e9c:	2194      	movs	r1, #148	; 0x94
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f001 ff7a 	bl	8013d98 <VL53L0X_WrByte>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	461a      	mov	r2, r3
 8011ea8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011eac:	4313      	orrs	r3, r2
 8011eae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8011eb2:	6878      	ldr	r0, [r7, #4]
 8011eb4:	f7ff fef9 	bl	8011caa <VL53L0X_device_read_strobe>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	461a      	mov	r2, r3
 8011ebc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011ec0:	4313      	orrs	r3, r2
 8011ec2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8011ec6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011eca:	461a      	mov	r2, r3
 8011ecc:	2190      	movs	r1, #144	; 0x90
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f002 f846 	bl	8013f60 <VL53L0X_RdDWord>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011edc:	4313      	orrs	r3, r2
 8011ede:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8011ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee4:	0a1b      	lsrs	r3, r3, #8
 8011ee6:	b2db      	uxtb	r3, r3
 8011ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011eec:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8011ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ef2:	0bdb      	lsrs	r3, r3, #15
 8011ef4:	b2db      	uxtb	r3, r3
 8011ef6:	f003 0301 	and.w	r3, r3, #1
 8011efa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8011efe:	2224      	movs	r2, #36	; 0x24
 8011f00:	2194      	movs	r1, #148	; 0x94
 8011f02:	6878      	ldr	r0, [r7, #4]
 8011f04:	f001 ff48 	bl	8013d98 <VL53L0X_WrByte>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	461a      	mov	r2, r3
 8011f0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011f10:	4313      	orrs	r3, r2
 8011f12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f7ff fec7 	bl	8011caa <VL53L0X_device_read_strobe>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	461a      	mov	r2, r3
 8011f20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011f24:	4313      	orrs	r3, r2
 8011f26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8011f2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011f2e:	461a      	mov	r2, r3
 8011f30:	2190      	movs	r1, #144	; 0x90
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f002 f814 	bl	8013f60 <VL53L0X_RdDWord>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	461a      	mov	r2, r3
 8011f3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011f40:	4313      	orrs	r3, r2
 8011f42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8011f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f48:	0e1b      	lsrs	r3, r3, #24
 8011f4a:	b2db      	uxtb	r3, r3
 8011f4c:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8011f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f50:	0c1b      	lsrs	r3, r3, #16
 8011f52:	b2db      	uxtb	r3, r3
 8011f54:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8011f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f58:	0a1b      	lsrs	r3, r3, #8
 8011f5a:	b2db      	uxtb	r3, r3
 8011f5c:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8011f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f60:	b2db      	uxtb	r3, r3
 8011f62:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8011f64:	2225      	movs	r2, #37	; 0x25
 8011f66:	2194      	movs	r1, #148	; 0x94
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f001 ff15 	bl	8013d98 <VL53L0X_WrByte>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	461a      	mov	r2, r3
 8011f72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011f76:	4313      	orrs	r3, r2
 8011f78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f7ff fe94 	bl	8011caa <VL53L0X_device_read_strobe>
 8011f82:	4603      	mov	r3, r0
 8011f84:	461a      	mov	r2, r3
 8011f86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011f8a:	4313      	orrs	r3, r2
 8011f8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8011f90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011f94:	461a      	mov	r2, r3
 8011f96:	2190      	movs	r1, #144	; 0x90
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f001 ffe1 	bl	8013f60 <VL53L0X_RdDWord>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	461a      	mov	r2, r3
 8011fa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011fa6:	4313      	orrs	r3, r2
 8011fa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8011fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fae:	0e1b      	lsrs	r3, r3, #24
 8011fb0:	b2db      	uxtb	r3, r3
 8011fb2:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8011fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb6:	0c1b      	lsrs	r3, r3, #16
 8011fb8:	b2db      	uxtb	r3, r3
 8011fba:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8011fbc:	78fb      	ldrb	r3, [r7, #3]
 8011fbe:	f003 0302 	and.w	r3, r3, #2
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	f000 8189 	beq.w	80122da <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8011fc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011fcc:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	f040 8182 	bne.w	80122da <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8011fd6:	2202      	movs	r2, #2
 8011fd8:	2194      	movs	r1, #148	; 0x94
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f001 fedc 	bl	8013d98 <VL53L0X_WrByte>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	461a      	mov	r2, r3
 8011fe4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011fe8:	4313      	orrs	r3, r2
 8011fea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f7ff fe5b 	bl	8011caa <VL53L0X_device_read_strobe>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	461a      	mov	r2, r3
 8011ff8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011ffc:	4313      	orrs	r3, r2
 8011ffe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8012002:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8012006:	461a      	mov	r2, r3
 8012008:	2190      	movs	r1, #144	; 0x90
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f001 ff46 	bl	8013e9c <VL53L0X_RdByte>
 8012010:	4603      	mov	r3, r0
 8012012:	461a      	mov	r2, r3
 8012014:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012018:	4313      	orrs	r3, r2
 801201a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 801201e:	227b      	movs	r2, #123	; 0x7b
 8012020:	2194      	movs	r1, #148	; 0x94
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f001 feb8 	bl	8013d98 <VL53L0X_WrByte>
 8012028:	4603      	mov	r3, r0
 801202a:	461a      	mov	r2, r3
 801202c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012030:	4313      	orrs	r3, r2
 8012032:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8012036:	6878      	ldr	r0, [r7, #4]
 8012038:	f7ff fe37 	bl	8011caa <VL53L0X_device_read_strobe>
 801203c:	4603      	mov	r3, r0
 801203e:	461a      	mov	r2, r3
 8012040:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012044:	4313      	orrs	r3, r2
 8012046:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 801204a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801204e:	461a      	mov	r2, r3
 8012050:	2190      	movs	r1, #144	; 0x90
 8012052:	6878      	ldr	r0, [r7, #4]
 8012054:	f001 ff22 	bl	8013e9c <VL53L0X_RdByte>
 8012058:	4603      	mov	r3, r0
 801205a:	461a      	mov	r2, r3
 801205c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012060:	4313      	orrs	r3, r2
 8012062:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8012066:	2277      	movs	r2, #119	; 0x77
 8012068:	2194      	movs	r1, #148	; 0x94
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f001 fe94 	bl	8013d98 <VL53L0X_WrByte>
 8012070:	4603      	mov	r3, r0
 8012072:	461a      	mov	r2, r3
 8012074:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012078:	4313      	orrs	r3, r2
 801207a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	f7ff fe13 	bl	8011caa <VL53L0X_device_read_strobe>
 8012084:	4603      	mov	r3, r0
 8012086:	461a      	mov	r2, r3
 8012088:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801208c:	4313      	orrs	r3, r2
 801208e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8012092:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012096:	461a      	mov	r2, r3
 8012098:	2190      	movs	r1, #144	; 0x90
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f001 ff60 	bl	8013f60 <VL53L0X_RdDWord>
 80120a0:	4603      	mov	r3, r0
 80120a2:	461a      	mov	r2, r3
 80120a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80120a8:	4313      	orrs	r3, r2
 80120aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80120ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120b0:	0e5b      	lsrs	r3, r3, #25
 80120b2:	b2db      	uxtb	r3, r3
 80120b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120b8:	b2db      	uxtb	r3, r3
 80120ba:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80120bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120be:	0c9b      	lsrs	r3, r3, #18
 80120c0:	b2db      	uxtb	r3, r3
 80120c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80120ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120cc:	0adb      	lsrs	r3, r3, #11
 80120ce:	b2db      	uxtb	r3, r3
 80120d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120d4:	b2db      	uxtb	r3, r3
 80120d6:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80120d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120da:	091b      	lsrs	r3, r3, #4
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80120e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e8:	b2db      	uxtb	r3, r3
 80120ea:	00db      	lsls	r3, r3, #3
 80120ec:	b2db      	uxtb	r3, r3
 80120ee:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80120f2:	b2db      	uxtb	r3, r3
 80120f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80120f8:	2278      	movs	r2, #120	; 0x78
 80120fa:	2194      	movs	r1, #148	; 0x94
 80120fc:	6878      	ldr	r0, [r7, #4]
 80120fe:	f001 fe4b 	bl	8013d98 <VL53L0X_WrByte>
 8012102:	4603      	mov	r3, r0
 8012104:	461a      	mov	r2, r3
 8012106:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801210a:	4313      	orrs	r3, r2
 801210c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f7ff fdca 	bl	8011caa <VL53L0X_device_read_strobe>
 8012116:	4603      	mov	r3, r0
 8012118:	461a      	mov	r2, r3
 801211a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801211e:	4313      	orrs	r3, r2
 8012120:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8012124:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012128:	461a      	mov	r2, r3
 801212a:	2190      	movs	r1, #144	; 0x90
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f001 ff17 	bl	8013f60 <VL53L0X_RdDWord>
 8012132:	4603      	mov	r3, r0
 8012134:	461a      	mov	r2, r3
 8012136:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801213a:	4313      	orrs	r3, r2
 801213c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8012140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012142:	0f5b      	lsrs	r3, r3, #29
 8012144:	b2db      	uxtb	r3, r3
 8012146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801214a:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 801214c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012150:	4413      	add	r3, r2
 8012152:	b2db      	uxtb	r3, r3
 8012154:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8012156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012158:	0d9b      	lsrs	r3, r3, #22
 801215a:	b2db      	uxtb	r3, r3
 801215c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012160:	b2db      	uxtb	r3, r3
 8012162:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8012164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012166:	0bdb      	lsrs	r3, r3, #15
 8012168:	b2db      	uxtb	r3, r3
 801216a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801216e:	b2db      	uxtb	r3, r3
 8012170:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8012172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012174:	0a1b      	lsrs	r3, r3, #8
 8012176:	b2db      	uxtb	r3, r3
 8012178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801217c:	b2db      	uxtb	r3, r3
 801217e:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8012180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012182:	085b      	lsrs	r3, r3, #1
 8012184:	b2db      	uxtb	r3, r3
 8012186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801218a:	b2db      	uxtb	r3, r3
 801218c:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 801218e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012190:	b2db      	uxtb	r3, r3
 8012192:	019b      	lsls	r3, r3, #6
 8012194:	b2db      	uxtb	r3, r3
 8012196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801219a:	b2db      	uxtb	r3, r3
 801219c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80121a0:	2279      	movs	r2, #121	; 0x79
 80121a2:	2194      	movs	r1, #148	; 0x94
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f001 fdf7 	bl	8013d98 <VL53L0X_WrByte>
 80121aa:	4603      	mov	r3, r0
 80121ac:	461a      	mov	r2, r3
 80121ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80121b2:	4313      	orrs	r3, r2
 80121b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f7ff fd76 	bl	8011caa <VL53L0X_device_read_strobe>
 80121be:	4603      	mov	r3, r0
 80121c0:	461a      	mov	r2, r3
 80121c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80121c6:	4313      	orrs	r3, r2
 80121c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80121cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80121d0:	461a      	mov	r2, r3
 80121d2:	2190      	movs	r1, #144	; 0x90
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f001 fec3 	bl	8013f60 <VL53L0X_RdDWord>
 80121da:	4603      	mov	r3, r0
 80121dc:	461a      	mov	r2, r3
 80121de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80121e2:	4313      	orrs	r3, r2
 80121e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80121e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ea:	0e9b      	lsrs	r3, r3, #26
 80121ec:	b2db      	uxtb	r3, r3
 80121ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80121f2:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80121f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80121f8:	4413      	add	r3, r2
 80121fa:	b2db      	uxtb	r3, r3
 80121fc:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80121fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012200:	0cdb      	lsrs	r3, r3, #19
 8012202:	b2db      	uxtb	r3, r3
 8012204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012208:	b2db      	uxtb	r3, r3
 801220a:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 801220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801220e:	0b1b      	lsrs	r3, r3, #12
 8012210:	b2db      	uxtb	r3, r3
 8012212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012216:	b2db      	uxtb	r3, r3
 8012218:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 801221a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801221c:	095b      	lsrs	r3, r3, #5
 801221e:	b2db      	uxtb	r3, r3
 8012220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012224:	b2db      	uxtb	r3, r3
 8012226:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8012228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801222a:	b2db      	uxtb	r3, r3
 801222c:	009b      	lsls	r3, r3, #2
 801222e:	b2db      	uxtb	r3, r3
 8012230:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8012234:	b2db      	uxtb	r3, r3
 8012236:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 801223a:	227a      	movs	r2, #122	; 0x7a
 801223c:	2194      	movs	r1, #148	; 0x94
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	f001 fdaa 	bl	8013d98 <VL53L0X_WrByte>
 8012244:	4603      	mov	r3, r0
 8012246:	461a      	mov	r2, r3
 8012248:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801224c:	4313      	orrs	r3, r2
 801224e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8012252:	6878      	ldr	r0, [r7, #4]
 8012254:	f7ff fd29 	bl	8011caa <VL53L0X_device_read_strobe>
 8012258:	4603      	mov	r3, r0
 801225a:	461a      	mov	r2, r3
 801225c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012260:	4313      	orrs	r3, r2
 8012262:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8012266:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801226a:	461a      	mov	r2, r3
 801226c:	2190      	movs	r1, #144	; 0x90
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f001 fe76 	bl	8013f60 <VL53L0X_RdDWord>
 8012274:	4603      	mov	r3, r0
 8012276:	461a      	mov	r2, r3
 8012278:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801227c:	4313      	orrs	r3, r2
 801227e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8012282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012284:	0f9b      	lsrs	r3, r3, #30
 8012286:	b2db      	uxtb	r3, r3
 8012288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801228c:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 801228e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012292:	4413      	add	r3, r2
 8012294:	b2db      	uxtb	r3, r3
 8012296:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8012298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801229a:	0ddb      	lsrs	r3, r3, #23
 801229c:	b2db      	uxtb	r3, r3
 801229e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122a2:	b2db      	uxtb	r3, r3
 80122a4:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80122a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a8:	0c1b      	lsrs	r3, r3, #16
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122b0:	b2db      	uxtb	r3, r3
 80122b2:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80122b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b6:	0a5b      	lsrs	r3, r3, #9
 80122b8:	b2db      	uxtb	r3, r3
 80122ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122be:	b2db      	uxtb	r3, r3
 80122c0:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80122c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c6:	089b      	lsrs	r3, r3, #2
 80122c8:	b2db      	uxtb	r3, r3
 80122ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122ce:	b2db      	uxtb	r3, r3
 80122d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80122d4:	2300      	movs	r3, #0
 80122d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80122da:	78fb      	ldrb	r3, [r7, #3]
 80122dc:	f003 0304 	and.w	r3, r3, #4
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	f000 80f1 	beq.w	80124c8 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80122e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80122ea:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	f040 80ea 	bne.w	80124c8 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80122f4:	227b      	movs	r2, #123	; 0x7b
 80122f6:	2194      	movs	r1, #148	; 0x94
 80122f8:	6878      	ldr	r0, [r7, #4]
 80122fa:	f001 fd4d 	bl	8013d98 <VL53L0X_WrByte>
 80122fe:	4603      	mov	r3, r0
 8012300:	461a      	mov	r2, r3
 8012302:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012306:	4313      	orrs	r3, r2
 8012308:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f7ff fccc 	bl	8011caa <VL53L0X_device_read_strobe>
 8012312:	4603      	mov	r3, r0
 8012314:	461a      	mov	r2, r3
 8012316:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801231a:	4313      	orrs	r3, r2
 801231c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8012320:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012324:	461a      	mov	r2, r3
 8012326:	2190      	movs	r1, #144	; 0x90
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f001 fe19 	bl	8013f60 <VL53L0X_RdDWord>
 801232e:	4603      	mov	r3, r0
 8012330:	461a      	mov	r2, r3
 8012332:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012336:	4313      	orrs	r3, r2
 8012338:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 801233c:	227c      	movs	r2, #124	; 0x7c
 801233e:	2194      	movs	r1, #148	; 0x94
 8012340:	6878      	ldr	r0, [r7, #4]
 8012342:	f001 fd29 	bl	8013d98 <VL53L0X_WrByte>
 8012346:	4603      	mov	r3, r0
 8012348:	461a      	mov	r2, r3
 801234a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801234e:	4313      	orrs	r3, r2
 8012350:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f7ff fca8 	bl	8011caa <VL53L0X_device_read_strobe>
 801235a:	4603      	mov	r3, r0
 801235c:	461a      	mov	r2, r3
 801235e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012362:	4313      	orrs	r3, r2
 8012364:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8012368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801236c:	461a      	mov	r2, r3
 801236e:	2190      	movs	r1, #144	; 0x90
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f001 fdf5 	bl	8013f60 <VL53L0X_RdDWord>
 8012376:	4603      	mov	r3, r0
 8012378:	461a      	mov	r2, r3
 801237a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801237e:	4313      	orrs	r3, r2
 8012380:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8012384:	2273      	movs	r2, #115	; 0x73
 8012386:	2194      	movs	r1, #148	; 0x94
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f001 fd05 	bl	8013d98 <VL53L0X_WrByte>
 801238e:	4603      	mov	r3, r0
 8012390:	461a      	mov	r2, r3
 8012392:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012396:	4313      	orrs	r3, r2
 8012398:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f7ff fc84 	bl	8011caa <VL53L0X_device_read_strobe>
 80123a2:	4603      	mov	r3, r0
 80123a4:	461a      	mov	r2, r3
 80123a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80123aa:	4313      	orrs	r3, r2
 80123ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80123b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80123b4:	461a      	mov	r2, r3
 80123b6:	2190      	movs	r1, #144	; 0x90
 80123b8:	6878      	ldr	r0, [r7, #4]
 80123ba:	f001 fdd1 	bl	8013f60 <VL53L0X_RdDWord>
 80123be:	4603      	mov	r3, r0
 80123c0:	461a      	mov	r2, r3
 80123c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80123c6:	4313      	orrs	r3, r2
 80123c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80123cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ce:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80123d0:	b29b      	uxth	r3, r3
 80123d2:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80123d4:	2274      	movs	r2, #116	; 0x74
 80123d6:	2194      	movs	r1, #148	; 0x94
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f001 fcdd 	bl	8013d98 <VL53L0X_WrByte>
 80123de:	4603      	mov	r3, r0
 80123e0:	461a      	mov	r2, r3
 80123e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80123e6:	4313      	orrs	r3, r2
 80123e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f7ff fc5c 	bl	8011caa <VL53L0X_device_read_strobe>
 80123f2:	4603      	mov	r3, r0
 80123f4:	461a      	mov	r2, r3
 80123f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80123fa:	4313      	orrs	r3, r2
 80123fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8012400:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012404:	461a      	mov	r2, r3
 8012406:	2190      	movs	r1, #144	; 0x90
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f001 fda9 	bl	8013f60 <VL53L0X_RdDWord>
 801240e:	4603      	mov	r3, r0
 8012410:	461a      	mov	r2, r3
 8012412:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012416:	4313      	orrs	r3, r2
 8012418:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 801241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801241e:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8012420:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012422:	4313      	orrs	r3, r2
 8012424:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8012426:	2275      	movs	r2, #117	; 0x75
 8012428:	2194      	movs	r1, #148	; 0x94
 801242a:	6878      	ldr	r0, [r7, #4]
 801242c:	f001 fcb4 	bl	8013d98 <VL53L0X_WrByte>
 8012430:	4603      	mov	r3, r0
 8012432:	461a      	mov	r2, r3
 8012434:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012438:	4313      	orrs	r3, r2
 801243a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 801243e:	6878      	ldr	r0, [r7, #4]
 8012440:	f7ff fc33 	bl	8011caa <VL53L0X_device_read_strobe>
 8012444:	4603      	mov	r3, r0
 8012446:	461a      	mov	r2, r3
 8012448:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801244c:	4313      	orrs	r3, r2
 801244e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8012452:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012456:	461a      	mov	r2, r3
 8012458:	2190      	movs	r1, #144	; 0x90
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	f001 fd80 	bl	8013f60 <VL53L0X_RdDWord>
 8012460:	4603      	mov	r3, r0
 8012462:	461a      	mov	r2, r3
 8012464:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012468:	4313      	orrs	r3, r2
 801246a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 801246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012470:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8012472:	b29b      	uxth	r3, r3
 8012474:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8012476:	2276      	movs	r2, #118	; 0x76
 8012478:	2194      	movs	r1, #148	; 0x94
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	f001 fc8c 	bl	8013d98 <VL53L0X_WrByte>
 8012480:	4603      	mov	r3, r0
 8012482:	461a      	mov	r2, r3
 8012484:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012488:	4313      	orrs	r3, r2
 801248a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f7ff fc0b 	bl	8011caa <VL53L0X_device_read_strobe>
 8012494:	4603      	mov	r3, r0
 8012496:	461a      	mov	r2, r3
 8012498:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801249c:	4313      	orrs	r3, r2
 801249e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80124a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80124a6:	461a      	mov	r2, r3
 80124a8:	2190      	movs	r1, #144	; 0x90
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f001 fd58 	bl	8013f60 <VL53L0X_RdDWord>
 80124b0:	4603      	mov	r3, r0
 80124b2:	461a      	mov	r2, r3
 80124b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80124b8:	4313      	orrs	r3, r2
 80124ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80124be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c0:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80124c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80124c4:	4313      	orrs	r3, r2
 80124c6:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80124c8:	2200      	movs	r2, #0
 80124ca:	2181      	movs	r1, #129	; 0x81
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f001 fc63 	bl	8013d98 <VL53L0X_WrByte>
 80124d2:	4603      	mov	r3, r0
 80124d4:	461a      	mov	r2, r3
 80124d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80124da:	4313      	orrs	r3, r2
 80124dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80124e0:	2206      	movs	r2, #6
 80124e2:	21ff      	movs	r1, #255	; 0xff
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f001 fc57 	bl	8013d98 <VL53L0X_WrByte>
 80124ea:	4603      	mov	r3, r0
 80124ec:	461a      	mov	r2, r3
 80124ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80124f2:	4313      	orrs	r3, r2
 80124f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80124f8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80124fc:	461a      	mov	r2, r3
 80124fe:	2183      	movs	r1, #131	; 0x83
 8012500:	6878      	ldr	r0, [r7, #4]
 8012502:	f001 fccb 	bl	8013e9c <VL53L0X_RdByte>
 8012506:	4603      	mov	r3, r0
 8012508:	461a      	mov	r2, r3
 801250a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801250e:	4313      	orrs	r3, r2
 8012510:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8012514:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012518:	f023 0304 	bic.w	r3, r3, #4
 801251c:	b2db      	uxtb	r3, r3
 801251e:	461a      	mov	r2, r3
 8012520:	2183      	movs	r1, #131	; 0x83
 8012522:	6878      	ldr	r0, [r7, #4]
 8012524:	f001 fc38 	bl	8013d98 <VL53L0X_WrByte>
 8012528:	4603      	mov	r3, r0
 801252a:	461a      	mov	r2, r3
 801252c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012530:	4313      	orrs	r3, r2
 8012532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8012536:	2201      	movs	r2, #1
 8012538:	21ff      	movs	r1, #255	; 0xff
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f001 fc2c 	bl	8013d98 <VL53L0X_WrByte>
 8012540:	4603      	mov	r3, r0
 8012542:	461a      	mov	r2, r3
 8012544:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012548:	4313      	orrs	r3, r2
 801254a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 801254e:	2201      	movs	r2, #1
 8012550:	2100      	movs	r1, #0
 8012552:	6878      	ldr	r0, [r7, #4]
 8012554:	f001 fc20 	bl	8013d98 <VL53L0X_WrByte>
 8012558:	4603      	mov	r3, r0
 801255a:	461a      	mov	r2, r3
 801255c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012560:	4313      	orrs	r3, r2
 8012562:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8012566:	2200      	movs	r2, #0
 8012568:	21ff      	movs	r1, #255	; 0xff
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f001 fc14 	bl	8013d98 <VL53L0X_WrByte>
 8012570:	4603      	mov	r3, r0
 8012572:	461a      	mov	r2, r3
 8012574:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012578:	4313      	orrs	r3, r2
 801257a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 801257e:	2200      	movs	r2, #0
 8012580:	2180      	movs	r1, #128	; 0x80
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f001 fc08 	bl	8013d98 <VL53L0X_WrByte>
 8012588:	4603      	mov	r3, r0
 801258a:	461a      	mov	r2, r3
 801258c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012590:	4313      	orrs	r3, r2
 8012592:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8012596:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 801259a:	2b00      	cmp	r3, #0
 801259c:	f040 808f 	bne.w	80126be <VL53L0X_get_info_from_device+0x98e>
 80125a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80125a4:	2b07      	cmp	r3, #7
 80125a6:	f000 808a 	beq.w	80126be <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80125aa:	78fb      	ldrb	r3, [r7, #3]
 80125ac:	f003 0301 	and.w	r3, r3, #1
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d024      	beq.n	80125fe <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80125b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80125b8:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d11e      	bne.n	80125fe <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80125c6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80125d0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80125d4:	2300      	movs	r3, #0
 80125d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80125d8:	e00e      	b.n	80125f8 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80125da:	f107 0208 	add.w	r2, r7, #8
 80125de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125e0:	4413      	add	r3, r2
 80125e2:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80125e4:	687a      	ldr	r2, [r7, #4]
 80125e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125e8:	4413      	add	r3, r2
 80125ea:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80125ee:	460a      	mov	r2, r1
 80125f0:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80125f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125f4:	3301      	adds	r3, #1
 80125f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80125f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125fa:	2b05      	cmp	r3, #5
 80125fc:	dded      	ble.n	80125da <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 80125fe:	78fb      	ldrb	r3, [r7, #3]
 8012600:	f003 0302 	and.w	r3, r3, #2
 8012604:	2b00      	cmp	r3, #0
 8012606:	d018      	beq.n	801263a <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8012608:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801260c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8012610:	2b00      	cmp	r3, #0
 8012612:	d112      	bne.n	801263a <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8012614:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 801261e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	33f3      	adds	r3, #243	; 0xf3
 801262c:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 801262e:	f107 0310 	add.w	r3, r7, #16
 8012632:	4619      	mov	r1, r3
 8012634:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012636:	f001 fd85 	bl	8014144 <strcpy>

		}

		if (((option & 4) == 4) &&
 801263a:	78fb      	ldrb	r3, [r7, #3]
 801263c:	f003 0304 	and.w	r3, r3, #4
 8012640:	2b00      	cmp	r3, #0
 8012642:	d030      	beq.n	80126a6 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8012644:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012648:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 801264c:	2b00      	cmp	r3, #0
 801264e:	d12a      	bne.n	80126a6 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8012650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8012658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8012660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012662:	025b      	lsls	r3, r3, #9
 8012664:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801266a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 801266e:	2300      	movs	r3, #0
 8012670:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8012674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012676:	2b00      	cmp	r3, #0
 8012678:	d011      	beq.n	801269e <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 801267a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801267c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801267e:	1ad3      	subs	r3, r2, r3
 8012680:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8012682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012684:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012688:	fb02 f303 	mul.w	r3, r2, r3
 801268c:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 801268e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8012692:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8012696:	425b      	negs	r3, r3
 8012698:	b29b      	uxth	r3, r3
 801269a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 801269e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80126a6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80126aa:	78fb      	ldrb	r3, [r7, #3]
 80126ac:	4313      	orrs	r3, r2
 80126ae:	b2db      	uxtb	r3, r3
 80126b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80126b4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80126be:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	3760      	adds	r7, #96	; 0x60
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}

080126ca <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80126ca:	b480      	push	{r7}
 80126cc:	b087      	sub	sp, #28
 80126ce:	af00      	add	r7, sp, #0
 80126d0:	6078      	str	r0, [r7, #4]
 80126d2:	460b      	mov	r3, r1
 80126d4:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 80126d6:	f240 6277 	movw	r2, #1655	; 0x677
 80126da:	f04f 0300 	mov.w	r3, #0
 80126de:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 80126e2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80126e6:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 80126e8:	78fb      	ldrb	r3, [r7, #3]
 80126ea:	68fa      	ldr	r2, [r7, #12]
 80126ec:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 80126f0:	693a      	ldr	r2, [r7, #16]
 80126f2:	fb02 f303 	mul.w	r3, r2, r3
 80126f6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 80126f8:	68bb      	ldr	r3, [r7, #8]
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	371c      	adds	r7, #28
 80126fe:	46bd      	mov	sp, r7
 8012700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012704:	4770      	bx	lr

08012706 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8012706:	b480      	push	{r7}
 8012708:	b087      	sub	sp, #28
 801270a:	af00      	add	r7, sp, #0
 801270c:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 801270e:	2300      	movs	r3, #0
 8012710:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8012712:	2300      	movs	r3, #0
 8012714:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8012716:	2300      	movs	r3, #0
 8012718:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d017      	beq.n	8012750 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	3b01      	subs	r3, #1
 8012724:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8012726:	e005      	b.n	8012734 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8012728:	693b      	ldr	r3, [r7, #16]
 801272a:	085b      	lsrs	r3, r3, #1
 801272c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 801272e:	89fb      	ldrh	r3, [r7, #14]
 8012730:	3301      	adds	r3, #1
 8012732:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801273a:	2b00      	cmp	r3, #0
 801273c:	d1f4      	bne.n	8012728 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 801273e:	89fb      	ldrh	r3, [r7, #14]
 8012740:	021b      	lsls	r3, r3, #8
 8012742:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8012744:	693b      	ldr	r3, [r7, #16]
 8012746:	b29b      	uxth	r3, r3
 8012748:	b2db      	uxtb	r3, r3
 801274a:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 801274c:	4413      	add	r3, r2
 801274e:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8012750:	8afb      	ldrh	r3, [r7, #22]

}
 8012752:	4618      	mov	r0, r3
 8012754:	371c      	adds	r7, #28
 8012756:	46bd      	mov	sp, r7
 8012758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275c:	4770      	bx	lr

0801275e <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 801275e:	b480      	push	{r7}
 8012760:	b085      	sub	sp, #20
 8012762:	af00      	add	r7, sp, #0
 8012764:	4603      	mov	r3, r0
 8012766:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8012768:	2300      	movs	r3, #0
 801276a:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 801276c:	88fb      	ldrh	r3, [r7, #6]
 801276e:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8012770:	88fa      	ldrh	r2, [r7, #6]
 8012772:	0a12      	lsrs	r2, r2, #8
 8012774:	b292      	uxth	r2, r2
 8012776:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8012778:	3301      	adds	r3, #1
 801277a:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 801277c:	68fb      	ldr	r3, [r7, #12]
}
 801277e:	4618      	mov	r0, r3
 8012780:	3714      	adds	r7, #20
 8012782:	46bd      	mov	sp, r7
 8012784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012788:	4770      	bx	lr
	...

0801278c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b088      	sub	sp, #32
 8012790:	af00      	add	r7, sp, #0
 8012792:	60f8      	str	r0, [r7, #12]
 8012794:	60b9      	str	r1, [r7, #8]
 8012796:	4613      	mov	r3, r2
 8012798:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 801279a:	2300      	movs	r3, #0
 801279c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 801279e:	79fb      	ldrb	r3, [r7, #7]
 80127a0:	4619      	mov	r1, r3
 80127a2:	68f8      	ldr	r0, [r7, #12]
 80127a4:	f7ff ff91 	bl	80126ca <VL53L0X_calc_macro_period_ps>
 80127a8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80127aa:	69bb      	ldr	r3, [r7, #24]
 80127ac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80127b0:	4a0a      	ldr	r2, [pc, #40]	; (80127dc <VL53L0X_calc_timeout_mclks+0x50>)
 80127b2:	fba2 2303 	umull	r2, r3, r2, r3
 80127b6:	099b      	lsrs	r3, r3, #6
 80127b8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80127c0:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	085b      	lsrs	r3, r3, #1
 80127c8:	441a      	add	r2, r3
	timeout_period_mclks =
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80127d0:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 80127d2:	69fb      	ldr	r3, [r7, #28]
}
 80127d4:	4618      	mov	r0, r3
 80127d6:	3720      	adds	r7, #32
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd80      	pop	{r7, pc}
 80127dc:	10624dd3 	.word	0x10624dd3

080127e0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b086      	sub	sp, #24
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
 80127e8:	460b      	mov	r3, r1
 80127ea:	807b      	strh	r3, [r7, #2]
 80127ec:	4613      	mov	r3, r2
 80127ee:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80127f0:	2300      	movs	r3, #0
 80127f2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80127f4:	787b      	ldrb	r3, [r7, #1]
 80127f6:	4619      	mov	r1, r3
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f7ff ff66 	bl	80126ca <VL53L0X_calc_macro_period_ps>
 80127fe:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8012800:	693b      	ldr	r3, [r7, #16]
 8012802:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8012806:	4a0a      	ldr	r2, [pc, #40]	; (8012830 <VL53L0X_calc_timeout_us+0x50>)
 8012808:	fba2 2303 	umull	r2, r3, r2, r3
 801280c:	099b      	lsrs	r3, r3, #6
 801280e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8012810:	887b      	ldrh	r3, [r7, #2]
 8012812:	68fa      	ldr	r2, [r7, #12]
 8012814:	fb02 f303 	mul.w	r3, r2, r3
 8012818:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 801281c:	4a04      	ldr	r2, [pc, #16]	; (8012830 <VL53L0X_calc_timeout_us+0x50>)
 801281e:	fba2 2303 	umull	r2, r3, r2, r3
 8012822:	099b      	lsrs	r3, r3, #6
 8012824:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8012826:	697b      	ldr	r3, [r7, #20]
}
 8012828:	4618      	mov	r0, r3
 801282a:	3718      	adds	r7, #24
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}
 8012830:	10624dd3 	.word	0x10624dd3

08012834 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b08c      	sub	sp, #48	; 0x30
 8012838:	af00      	add	r7, sp, #0
 801283a:	60f8      	str	r0, [r7, #12]
 801283c:	460b      	mov	r3, r1
 801283e:	607a      	str	r2, [r7, #4]
 8012840:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012842:	2300      	movs	r3, #0
 8012844:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8012848:	2300      	movs	r3, #0
 801284a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 801284e:	2300      	movs	r3, #0
 8012850:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8012852:	2300      	movs	r3, #0
 8012854:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8012856:	2300      	movs	r3, #0
 8012858:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 801285a:	7afb      	ldrb	r3, [r7, #11]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d005      	beq.n	801286c <get_sequence_step_timeout+0x38>
 8012860:	7afb      	ldrb	r3, [r7, #11]
 8012862:	2b01      	cmp	r3, #1
 8012864:	d002      	beq.n	801286c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8012866:	7afb      	ldrb	r3, [r7, #11]
 8012868:	2b02      	cmp	r3, #2
 801286a:	d128      	bne.n	80128be <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 801286c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8012870:	461a      	mov	r2, r3
 8012872:	2100      	movs	r1, #0
 8012874:	68f8      	ldr	r0, [r7, #12]
 8012876:	f7fd fa8f 	bl	800fd98 <VL53L0X_GetVcselPulsePeriod>
 801287a:	4603      	mov	r3, r0
 801287c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8012880:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8012884:	2b00      	cmp	r3, #0
 8012886:	d109      	bne.n	801289c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8012888:	f107 0320 	add.w	r3, r7, #32
 801288c:	461a      	mov	r2, r3
 801288e:	2146      	movs	r1, #70	; 0x46
 8012890:	68f8      	ldr	r0, [r7, #12]
 8012892:	f001 fb03 	bl	8013e9c <VL53L0X_RdByte>
 8012896:	4603      	mov	r3, r0
 8012898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 801289c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80128a0:	b29b      	uxth	r3, r3
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7ff ff5b 	bl	801275e <VL53L0X_decode_timeout>
 80128a8:	4603      	mov	r3, r0
 80128aa:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80128ac:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80128b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128b2:	4619      	mov	r1, r3
 80128b4:	68f8      	ldr	r0, [r7, #12]
 80128b6:	f7ff ff93 	bl	80127e0 <VL53L0X_calc_timeout_us>
 80128ba:	62b8      	str	r0, [r7, #40]	; 0x28
 80128bc:	e092      	b.n	80129e4 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80128be:	7afb      	ldrb	r3, [r7, #11]
 80128c0:	2b03      	cmp	r3, #3
 80128c2:	d135      	bne.n	8012930 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80128c4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80128c8:	461a      	mov	r2, r3
 80128ca:	2100      	movs	r1, #0
 80128cc:	68f8      	ldr	r0, [r7, #12]
 80128ce:	f7fd fa63 	bl	800fd98 <VL53L0X_GetVcselPulsePeriod>
 80128d2:	4603      	mov	r3, r0
 80128d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80128d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80128dc:	2b00      	cmp	r3, #0
 80128de:	f040 8081 	bne.w	80129e4 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80128e2:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80128e6:	461a      	mov	r2, r3
 80128e8:	2100      	movs	r1, #0
 80128ea:	68f8      	ldr	r0, [r7, #12]
 80128ec:	f7fd fa54 	bl	800fd98 <VL53L0X_GetVcselPulsePeriod>
 80128f0:	4603      	mov	r3, r0
 80128f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80128f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d109      	bne.n	8012912 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80128fe:	f107 031e 	add.w	r3, r7, #30
 8012902:	461a      	mov	r2, r3
 8012904:	2151      	movs	r1, #81	; 0x51
 8012906:	68f8      	ldr	r0, [r7, #12]
 8012908:	f001 faf2 	bl	8013ef0 <VL53L0X_RdWord>
 801290c:	4603      	mov	r3, r0
 801290e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8012912:	8bfb      	ldrh	r3, [r7, #30]
 8012914:	4618      	mov	r0, r3
 8012916:	f7ff ff22 	bl	801275e <VL53L0X_decode_timeout>
 801291a:	4603      	mov	r3, r0
 801291c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 801291e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8012922:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012924:	4619      	mov	r1, r3
 8012926:	68f8      	ldr	r0, [r7, #12]
 8012928:	f7ff ff5a 	bl	80127e0 <VL53L0X_calc_timeout_us>
 801292c:	62b8      	str	r0, [r7, #40]	; 0x28
 801292e:	e059      	b.n	80129e4 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8012930:	7afb      	ldrb	r3, [r7, #11]
 8012932:	2b04      	cmp	r3, #4
 8012934:	d156      	bne.n	80129e4 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8012936:	f107 0314 	add.w	r3, r7, #20
 801293a:	4619      	mov	r1, r3
 801293c:	68f8      	ldr	r0, [r7, #12]
 801293e:	f7fd fb37 	bl	800ffb0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8012942:	2300      	movs	r3, #0
 8012944:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8012946:	7dfb      	ldrb	r3, [r7, #23]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d01d      	beq.n	8012988 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 801294c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8012950:	461a      	mov	r2, r3
 8012952:	2100      	movs	r1, #0
 8012954:	68f8      	ldr	r0, [r7, #12]
 8012956:	f7fd fa1f 	bl	800fd98 <VL53L0X_GetVcselPulsePeriod>
 801295a:	4603      	mov	r3, r0
 801295c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8012960:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8012964:	2b00      	cmp	r3, #0
 8012966:	d10f      	bne.n	8012988 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8012968:	f107 031e 	add.w	r3, r7, #30
 801296c:	461a      	mov	r2, r3
 801296e:	2151      	movs	r1, #81	; 0x51
 8012970:	68f8      	ldr	r0, [r7, #12]
 8012972:	f001 fabd 	bl	8013ef0 <VL53L0X_RdWord>
 8012976:	4603      	mov	r3, r0
 8012978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 801297c:	8bfb      	ldrh	r3, [r7, #30]
 801297e:	4618      	mov	r0, r3
 8012980:	f7ff feed 	bl	801275e <VL53L0X_decode_timeout>
 8012984:	4603      	mov	r3, r0
 8012986:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8012988:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801298c:	2b00      	cmp	r3, #0
 801298e:	d109      	bne.n	80129a4 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8012990:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8012994:	461a      	mov	r2, r3
 8012996:	2101      	movs	r1, #1
 8012998:	68f8      	ldr	r0, [r7, #12]
 801299a:	f7fd f9fd 	bl	800fd98 <VL53L0X_GetVcselPulsePeriod>
 801299e:	4603      	mov	r3, r0
 80129a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80129a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d10f      	bne.n	80129cc <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80129ac:	f107 031c 	add.w	r3, r7, #28
 80129b0:	461a      	mov	r2, r3
 80129b2:	2171      	movs	r1, #113	; 0x71
 80129b4:	68f8      	ldr	r0, [r7, #12]
 80129b6:	f001 fa9b 	bl	8013ef0 <VL53L0X_RdWord>
 80129ba:	4603      	mov	r3, r0
 80129bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80129c0:	8bbb      	ldrh	r3, [r7, #28]
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7ff fecb 	bl	801275e <VL53L0X_decode_timeout>
 80129c8:	4603      	mov	r3, r0
 80129ca:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80129cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80129ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80129d0:	1ad3      	subs	r3, r2, r3
 80129d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80129d4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80129d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129da:	4619      	mov	r1, r3
 80129dc:	68f8      	ldr	r0, [r7, #12]
 80129de:	f7ff feff 	bl	80127e0 <VL53L0X_calc_timeout_us>
 80129e2:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80129e8:	601a      	str	r2, [r3, #0]

	return Status;
 80129ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80129ee:	4618      	mov	r0, r3
 80129f0:	3730      	adds	r7, #48	; 0x30
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}

080129f6 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80129f6:	b580      	push	{r7, lr}
 80129f8:	b08a      	sub	sp, #40	; 0x28
 80129fa:	af00      	add	r7, sp, #0
 80129fc:	60f8      	str	r0, [r7, #12]
 80129fe:	460b      	mov	r3, r1
 8012a00:	607a      	str	r2, [r7, #4]
 8012a02:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012a04:	2300      	movs	r3, #0
 8012a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8012a0a:	7afb      	ldrb	r3, [r7, #11]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d005      	beq.n	8012a1c <set_sequence_step_timeout+0x26>
 8012a10:	7afb      	ldrb	r3, [r7, #11]
 8012a12:	2b01      	cmp	r3, #1
 8012a14:	d002      	beq.n	8012a1c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8012a16:	7afb      	ldrb	r3, [r7, #11]
 8012a18:	2b02      	cmp	r3, #2
 8012a1a:	d138      	bne.n	8012a8e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8012a1c:	f107 031b 	add.w	r3, r7, #27
 8012a20:	461a      	mov	r2, r3
 8012a22:	2100      	movs	r1, #0
 8012a24:	68f8      	ldr	r0, [r7, #12]
 8012a26:	f7fd f9b7 	bl	800fd98 <VL53L0X_GetVcselPulsePeriod>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8012a30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d11a      	bne.n	8012a6e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8012a38:	7efb      	ldrb	r3, [r7, #27]
 8012a3a:	461a      	mov	r2, r3
 8012a3c:	6879      	ldr	r1, [r7, #4]
 8012a3e:	68f8      	ldr	r0, [r7, #12]
 8012a40:	f7ff fea4 	bl	801278c <VL53L0X_calc_timeout_mclks>
 8012a44:	4603      	mov	r3, r0
 8012a46:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8012a48:	8bbb      	ldrh	r3, [r7, #28]
 8012a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012a4e:	d903      	bls.n	8012a58 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8012a50:	23ff      	movs	r3, #255	; 0xff
 8012a52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012a56:	e004      	b.n	8012a62 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8012a58:	8bbb      	ldrh	r3, [r7, #28]
 8012a5a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8012a5c:	3b01      	subs	r3, #1
 8012a5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8012a62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a66:	b29a      	uxth	r2, r3
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8012a6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	f040 80ab 	bne.w	8012bce <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8012a78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a7c:	461a      	mov	r2, r3
 8012a7e:	2146      	movs	r1, #70	; 0x46
 8012a80:	68f8      	ldr	r0, [r7, #12]
 8012a82:	f001 f989 	bl	8013d98 <VL53L0X_WrByte>
 8012a86:	4603      	mov	r3, r0
 8012a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8012a8c:	e09f      	b.n	8012bce <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8012a8e:	7afb      	ldrb	r3, [r7, #11]
 8012a90:	2b03      	cmp	r3, #3
 8012a92:	d135      	bne.n	8012b00 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8012a94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d11b      	bne.n	8012ad4 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8012a9c:	f107 031b 	add.w	r3, r7, #27
 8012aa0:	461a      	mov	r2, r3
 8012aa2:	2100      	movs	r1, #0
 8012aa4:	68f8      	ldr	r0, [r7, #12]
 8012aa6:	f7fd f977 	bl	800fd98 <VL53L0X_GetVcselPulsePeriod>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8012ab0:	7efb      	ldrb	r3, [r7, #27]
 8012ab2:	461a      	mov	r2, r3
 8012ab4:	6879      	ldr	r1, [r7, #4]
 8012ab6:	68f8      	ldr	r0, [r7, #12]
 8012ab8:	f7ff fe68 	bl	801278c <VL53L0X_calc_timeout_mclks>
 8012abc:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8012abe:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8012ac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f7ff fe1f 	bl	8012706 <VL53L0X_encode_timeout>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8012acc:	8b3a      	ldrh	r2, [r7, #24]
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8012ad4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d108      	bne.n	8012aee <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8012adc:	8b3b      	ldrh	r3, [r7, #24]
 8012ade:	461a      	mov	r2, r3
 8012ae0:	2151      	movs	r1, #81	; 0x51
 8012ae2:	68f8      	ldr	r0, [r7, #12]
 8012ae4:	f001 f97c 	bl	8013de0 <VL53L0X_WrWord>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8012aee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d16b      	bne.n	8012bce <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	687a      	ldr	r2, [r7, #4]
 8012afa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8012afe:	e066      	b.n	8012bce <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8012b00:	7afb      	ldrb	r3, [r7, #11]
 8012b02:	2b04      	cmp	r3, #4
 8012b04:	d160      	bne.n	8012bc8 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8012b06:	f107 0310 	add.w	r3, r7, #16
 8012b0a:	4619      	mov	r1, r3
 8012b0c:	68f8      	ldr	r0, [r7, #12]
 8012b0e:	f7fd fa4f 	bl	800ffb0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8012b12:	2300      	movs	r3, #0
 8012b14:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8012b16:	7cfb      	ldrb	r3, [r7, #19]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d01d      	beq.n	8012b58 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8012b1c:	f107 031b 	add.w	r3, r7, #27
 8012b20:	461a      	mov	r2, r3
 8012b22:	2100      	movs	r1, #0
 8012b24:	68f8      	ldr	r0, [r7, #12]
 8012b26:	f7fd f937 	bl	800fd98 <VL53L0X_GetVcselPulsePeriod>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8012b30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d10f      	bne.n	8012b58 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8012b38:	f107 0318 	add.w	r3, r7, #24
 8012b3c:	461a      	mov	r2, r3
 8012b3e:	2151      	movs	r1, #81	; 0x51
 8012b40:	68f8      	ldr	r0, [r7, #12]
 8012b42:	f001 f9d5 	bl	8013ef0 <VL53L0X_RdWord>
 8012b46:	4603      	mov	r3, r0
 8012b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8012b4c:	8b3b      	ldrh	r3, [r7, #24]
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f7ff fe05 	bl	801275e <VL53L0X_decode_timeout>
 8012b54:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8012b56:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8012b58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d109      	bne.n	8012b74 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8012b60:	f107 031b 	add.w	r3, r7, #27
 8012b64:	461a      	mov	r2, r3
 8012b66:	2101      	movs	r1, #1
 8012b68:	68f8      	ldr	r0, [r7, #12]
 8012b6a:	f7fd f915 	bl	800fd98 <VL53L0X_GetVcselPulsePeriod>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8012b74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d128      	bne.n	8012bce <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8012b7c:	7efb      	ldrb	r3, [r7, #27]
 8012b7e:	461a      	mov	r2, r3
 8012b80:	6879      	ldr	r1, [r7, #4]
 8012b82:	68f8      	ldr	r0, [r7, #12]
 8012b84:	f7ff fe02 	bl	801278c <VL53L0X_calc_timeout_mclks>
 8012b88:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8012b8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012b8c:	6a3a      	ldr	r2, [r7, #32]
 8012b8e:	4413      	add	r3, r2
 8012b90:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8012b92:	6a38      	ldr	r0, [r7, #32]
 8012b94:	f7ff fdb7 	bl	8012706 <VL53L0X_encode_timeout>
 8012b98:	4603      	mov	r3, r0
 8012b9a:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8012b9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d108      	bne.n	8012bb6 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8012ba4:	8bfb      	ldrh	r3, [r7, #30]
 8012ba6:	461a      	mov	r2, r3
 8012ba8:	2171      	movs	r1, #113	; 0x71
 8012baa:	68f8      	ldr	r0, [r7, #12]
 8012bac:	f001 f918 	bl	8013de0 <VL53L0X_WrWord>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8012bb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d107      	bne.n	8012bce <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	687a      	ldr	r2, [r7, #4]
 8012bc2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8012bc6:	e002      	b.n	8012bce <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8012bc8:	23fc      	movs	r3, #252	; 0xfc
 8012bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8012bce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3728      	adds	r7, #40	; 0x28
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}

08012bda <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8012bda:	b580      	push	{r7, lr}
 8012bdc:	b086      	sub	sp, #24
 8012bde:	af00      	add	r7, sp, #0
 8012be0:	60f8      	str	r0, [r7, #12]
 8012be2:	460b      	mov	r3, r1
 8012be4:	607a      	str	r2, [r7, #4]
 8012be6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012be8:	2300      	movs	r3, #0
 8012bea:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8012bec:	7afb      	ldrb	r3, [r7, #11]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d002      	beq.n	8012bf8 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8012bf2:	2b01      	cmp	r3, #1
 8012bf4:	d00a      	beq.n	8012c0c <VL53L0X_get_vcsel_pulse_period+0x32>
 8012bf6:	e013      	b.n	8012c20 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8012bf8:	f107 0316 	add.w	r3, r7, #22
 8012bfc:	461a      	mov	r2, r3
 8012bfe:	2150      	movs	r1, #80	; 0x50
 8012c00:	68f8      	ldr	r0, [r7, #12]
 8012c02:	f001 f94b 	bl	8013e9c <VL53L0X_RdByte>
 8012c06:	4603      	mov	r3, r0
 8012c08:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8012c0a:	e00b      	b.n	8012c24 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8012c0c:	f107 0316 	add.w	r3, r7, #22
 8012c10:	461a      	mov	r2, r3
 8012c12:	2170      	movs	r1, #112	; 0x70
 8012c14:	68f8      	ldr	r0, [r7, #12]
 8012c16:	f001 f941 	bl	8013e9c <VL53L0X_RdByte>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8012c1e:	e001      	b.n	8012c24 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8012c20:	23fc      	movs	r3, #252	; 0xfc
 8012c22:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8012c24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d107      	bne.n	8012c3c <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8012c2c:	7dbb      	ldrb	r3, [r7, #22]
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7fe fff4 	bl	8011c1c <VL53L0X_decode_vcsel_period>
 8012c34:	4603      	mov	r3, r0
 8012c36:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	701a      	strb	r2, [r3, #0]

	return Status;
 8012c3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3718      	adds	r7, #24
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}

08012c48 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b092      	sub	sp, #72	; 0x48
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
 8012c50:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012c52:	2300      	movs	r3, #0
 8012c54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8012c58:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8012c5c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8012c5e:	f240 7376 	movw	r3, #1910	; 0x776
 8012c62:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8012c64:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8012c68:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8012c6a:	f44f 7325 	mov.w	r3, #660	; 0x294
 8012c6e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8012c70:	f240 234e 	movw	r3, #590	; 0x24e
 8012c74:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8012c76:	f240 23b2 	movw	r3, #690	; 0x2b2
 8012c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8012c7c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8012c80:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8012c82:	f240 2326 	movw	r3, #550	; 0x226
 8012c86:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8012c88:	2300      	movs	r3, #0
 8012c8a:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8012c8c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8012c90:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8012c92:	2300      	movs	r3, #0
 8012c94:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8012c96:	683a      	ldr	r2, [r7, #0]
 8012c98:	6a3b      	ldr	r3, [r7, #32]
 8012c9a:	429a      	cmp	r2, r3
 8012c9c:	d205      	bcs.n	8012caa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8012c9e:	23fc      	movs	r3, #252	; 0xfc
 8012ca0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8012ca4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8012ca8:	e0aa      	b.n	8012e00 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8012caa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cae:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8012cb0:	683a      	ldr	r2, [r7, #0]
 8012cb2:	1ad3      	subs	r3, r2, r3
 8012cb4:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8012cb6:	f107 0314 	add.w	r3, r7, #20
 8012cba:	4619      	mov	r1, r3
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f7fd f977 	bl	800ffb0 <VL53L0X_GetSequenceStepEnables>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8012cc8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d15b      	bne.n	8012d88 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8012cd0:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d105      	bne.n	8012ce2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8012cd6:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d102      	bne.n	8012ce2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8012cdc:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d052      	beq.n	8012d88 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8012ce2:	f107 0310 	add.w	r3, r7, #16
 8012ce6:	461a      	mov	r2, r3
 8012ce8:	2102      	movs	r1, #2
 8012cea:	6878      	ldr	r0, [r7, #4]
 8012cec:	f7ff fda2 	bl	8012834 <get_sequence_step_timeout>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8012cf6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d002      	beq.n	8012d04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8012cfe:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8012d02:	e07d      	b.n	8012e00 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8012d04:	7d3b      	ldrb	r3, [r7, #20]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d00f      	beq.n	8012d2a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8012d0a:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8012d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d0e:	4413      	add	r3, r2
 8012d10:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8012d12:	69fa      	ldr	r2, [r7, #28]
 8012d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d16:	429a      	cmp	r2, r3
 8012d18:	d204      	bcs.n	8012d24 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8012d1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012d1c:	69fb      	ldr	r3, [r7, #28]
 8012d1e:	1ad3      	subs	r3, r2, r3
 8012d20:	643b      	str	r3, [r7, #64]	; 0x40
 8012d22:	e002      	b.n	8012d2a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8012d24:	23fc      	movs	r3, #252	; 0xfc
 8012d26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8012d2a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d002      	beq.n	8012d38 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8012d32:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8012d36:	e063      	b.n	8012e00 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8012d38:	7dbb      	ldrb	r3, [r7, #22]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d011      	beq.n	8012d62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8012d3e:	693a      	ldr	r2, [r7, #16]
 8012d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d42:	4413      	add	r3, r2
 8012d44:	005b      	lsls	r3, r3, #1
 8012d46:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8012d48:	69fa      	ldr	r2, [r7, #28]
 8012d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	d204      	bcs.n	8012d5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8012d50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012d52:	69fb      	ldr	r3, [r7, #28]
 8012d54:	1ad3      	subs	r3, r2, r3
 8012d56:	643b      	str	r3, [r7, #64]	; 0x40
 8012d58:	e016      	b.n	8012d88 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8012d5a:	23fc      	movs	r3, #252	; 0xfc
 8012d5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012d60:	e012      	b.n	8012d88 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8012d62:	7d7b      	ldrb	r3, [r7, #21]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d00f      	beq.n	8012d88 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d6c:	4413      	add	r3, r2
 8012d6e:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8012d70:	69fa      	ldr	r2, [r7, #28]
 8012d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d74:	429a      	cmp	r2, r3
 8012d76:	d204      	bcs.n	8012d82 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8012d78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012d7a:	69fb      	ldr	r3, [r7, #28]
 8012d7c:	1ad3      	subs	r3, r2, r3
 8012d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8012d80:	e002      	b.n	8012d88 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8012d82:	23fc      	movs	r3, #252	; 0xfc
 8012d84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8012d88:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d002      	beq.n	8012d96 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8012d90:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8012d94:	e034      	b.n	8012e00 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8012d96:	7dfb      	ldrb	r3, [r7, #23]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d019      	beq.n	8012dd0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8012d9c:	f107 030c 	add.w	r3, r7, #12
 8012da0:	461a      	mov	r2, r3
 8012da2:	2103      	movs	r1, #3
 8012da4:	6878      	ldr	r0, [r7, #4]
 8012da6:	f7ff fd45 	bl	8012834 <get_sequence_step_timeout>
 8012daa:	4603      	mov	r3, r0
 8012dac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012db4:	4413      	add	r3, r2
 8012db6:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8012db8:	69fa      	ldr	r2, [r7, #28]
 8012dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dbc:	429a      	cmp	r2, r3
 8012dbe:	d204      	bcs.n	8012dca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8012dc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012dc2:	69fb      	ldr	r3, [r7, #28]
 8012dc4:	1ad3      	subs	r3, r2, r3
 8012dc6:	643b      	str	r3, [r7, #64]	; 0x40
 8012dc8:	e002      	b.n	8012dd0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8012dca:	23fc      	movs	r3, #252	; 0xfc
 8012dcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8012dd0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d111      	bne.n	8012dfc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8012dd8:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d00e      	beq.n	8012dfc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8012dde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012de2:	1ad3      	subs	r3, r2, r3
 8012de4:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8012de6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012de8:	2104      	movs	r1, #4
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f7ff fe03 	bl	80129f6 <set_sequence_step_timeout>
 8012df0:	4603      	mov	r3, r0
 8012df2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	683a      	ldr	r2, [r7, #0]
 8012dfa:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8012dfc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8012e00:	4618      	mov	r0, r3
 8012e02:	3748      	adds	r7, #72	; 0x48
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}

08012e08 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b090      	sub	sp, #64	; 0x40
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
 8012e10:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012e12:	2300      	movs	r3, #0
 8012e14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8012e18:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8012e1c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8012e1e:	f240 7376 	movw	r3, #1910	; 0x776
 8012e22:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8012e24:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8012e28:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8012e2a:	f44f 7325 	mov.w	r3, #660	; 0x294
 8012e2e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8012e30:	f240 234e 	movw	r3, #590	; 0x24e
 8012e34:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8012e36:	f240 23b2 	movw	r3, #690	; 0x2b2
 8012e3a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8012e3c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8012e40:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8012e42:	f240 2326 	movw	r3, #550	; 0x226
 8012e46:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8012e48:	2300      	movs	r3, #0
 8012e4a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8012e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e50:	441a      	add	r2, r3
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8012e56:	f107 0318 	add.w	r3, r7, #24
 8012e5a:	4619      	mov	r1, r3
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f7fd f8a7 	bl	800ffb0 <VL53L0X_GetSequenceStepEnables>
 8012e62:	4603      	mov	r3, r0
 8012e64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8012e68:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d002      	beq.n	8012e76 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8012e70:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012e74:	e075      	b.n	8012f62 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8012e76:	7e3b      	ldrb	r3, [r7, #24]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d105      	bne.n	8012e88 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8012e7c:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d102      	bne.n	8012e88 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8012e82:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d030      	beq.n	8012eea <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8012e88:	f107 0310 	add.w	r3, r7, #16
 8012e8c:	461a      	mov	r2, r3
 8012e8e:	2102      	movs	r1, #2
 8012e90:	6878      	ldr	r0, [r7, #4]
 8012e92:	f7ff fccf 	bl	8012834 <get_sequence_step_timeout>
 8012e96:	4603      	mov	r3, r0
 8012e98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8012e9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d122      	bne.n	8012eea <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8012ea4:	7e3b      	ldrb	r3, [r7, #24]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d007      	beq.n	8012eba <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8012eae:	6939      	ldr	r1, [r7, #16]
 8012eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eb2:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8012eb4:	441a      	add	r2, r3
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8012eba:	7ebb      	ldrb	r3, [r7, #26]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d009      	beq.n	8012ed4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8012ec4:	6939      	ldr	r1, [r7, #16]
 8012ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec8:	440b      	add	r3, r1
 8012eca:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8012ecc:	441a      	add	r2, r3
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	601a      	str	r2, [r3, #0]
 8012ed2:	e00a      	b.n	8012eea <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8012ed4:	7e7b      	ldrb	r3, [r7, #25]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d007      	beq.n	8012eea <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8012eda:	683b      	ldr	r3, [r7, #0]
 8012edc:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8012ede:	6939      	ldr	r1, [r7, #16]
 8012ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee2:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8012ee4:	441a      	add	r2, r3
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8012eea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d114      	bne.n	8012f1c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8012ef2:	7efb      	ldrb	r3, [r7, #27]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d011      	beq.n	8012f1c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8012ef8:	f107 030c 	add.w	r3, r7, #12
 8012efc:	461a      	mov	r2, r3
 8012efe:	2103      	movs	r1, #3
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f7ff fc97 	bl	8012834 <get_sequence_step_timeout>
 8012f06:	4603      	mov	r3, r0
 8012f08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8012f10:	68f9      	ldr	r1, [r7, #12]
 8012f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f14:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8012f16:	441a      	add	r2, r3
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8012f1c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d114      	bne.n	8012f4e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8012f24:	7f3b      	ldrb	r3, [r7, #28]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d011      	beq.n	8012f4e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8012f2a:	f107 0314 	add.w	r3, r7, #20
 8012f2e:	461a      	mov	r2, r3
 8012f30:	2104      	movs	r1, #4
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f7ff fc7e 	bl	8012834 <get_sequence_step_timeout>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8012f42:	6979      	ldr	r1, [r7, #20]
 8012f44:	6a3b      	ldr	r3, [r7, #32]
 8012f46:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8012f48:	441a      	add	r2, r3
 8012f4a:	683b      	ldr	r3, [r7, #0]
 8012f4c:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8012f4e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d103      	bne.n	8012f5e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	681a      	ldr	r2, [r3, #0]
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8012f5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3740      	adds	r7, #64	; 0x40
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
	...

08012f6c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b088      	sub	sp, #32
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
 8012f74:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012f76:	2300      	movs	r3, #0
 8012f78:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8012f7e:	e0c6      	b.n	801310e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8012f80:	697b      	ldr	r3, [r7, #20]
 8012f82:	683a      	ldr	r2, [r7, #0]
 8012f84:	4413      	add	r3, r2
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	74fb      	strb	r3, [r7, #19]
		Index++;
 8012f8a:	697b      	ldr	r3, [r7, #20]
 8012f8c:	3301      	adds	r3, #1
 8012f8e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8012f90:	7cfb      	ldrb	r3, [r7, #19]
 8012f92:	2bff      	cmp	r3, #255	; 0xff
 8012f94:	f040 808d 	bne.w	80130b2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8012f98:	697b      	ldr	r3, [r7, #20]
 8012f9a:	683a      	ldr	r2, [r7, #0]
 8012f9c:	4413      	add	r3, r2
 8012f9e:	781b      	ldrb	r3, [r3, #0]
 8012fa0:	747b      	strb	r3, [r7, #17]
			Index++;
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	3301      	adds	r3, #1
 8012fa6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8012fa8:	7c7b      	ldrb	r3, [r7, #17]
 8012faa:	2b03      	cmp	r3, #3
 8012fac:	d87e      	bhi.n	80130ac <VL53L0X_load_tuning_settings+0x140>
 8012fae:	a201      	add	r2, pc, #4	; (adr r2, 8012fb4 <VL53L0X_load_tuning_settings+0x48>)
 8012fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fb4:	08012fc5 	.word	0x08012fc5
 8012fb8:	08012fff 	.word	0x08012fff
 8012fbc:	08013039 	.word	0x08013039
 8012fc0:	08013073 	.word	0x08013073
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	683a      	ldr	r2, [r7, #0]
 8012fc8:	4413      	add	r3, r2
 8012fca:	781b      	ldrb	r3, [r3, #0]
 8012fcc:	743b      	strb	r3, [r7, #16]
				Index++;
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	3301      	adds	r3, #1
 8012fd2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	683a      	ldr	r2, [r7, #0]
 8012fd8:	4413      	add	r3, r2
 8012fda:	781b      	ldrb	r3, [r3, #0]
 8012fdc:	73fb      	strb	r3, [r7, #15]
				Index++;
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	3301      	adds	r3, #1
 8012fe2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8012fe4:	7c3b      	ldrb	r3, [r7, #16]
 8012fe6:	b29b      	uxth	r3, r3
 8012fe8:	021b      	lsls	r3, r3, #8
 8012fea:	b29a      	uxth	r2, r3
 8012fec:	7bfb      	ldrb	r3, [r7, #15]
 8012fee:	b29b      	uxth	r3, r3
 8012ff0:	4413      	add	r3, r2
 8012ff2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	89ba      	ldrh	r2, [r7, #12]
 8012ff8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8012ffc:	e087      	b.n	801310e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8012ffe:	697b      	ldr	r3, [r7, #20]
 8013000:	683a      	ldr	r2, [r7, #0]
 8013002:	4413      	add	r3, r2
 8013004:	781b      	ldrb	r3, [r3, #0]
 8013006:	743b      	strb	r3, [r7, #16]
				Index++;
 8013008:	697b      	ldr	r3, [r7, #20]
 801300a:	3301      	adds	r3, #1
 801300c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 801300e:	697b      	ldr	r3, [r7, #20]
 8013010:	683a      	ldr	r2, [r7, #0]
 8013012:	4413      	add	r3, r2
 8013014:	781b      	ldrb	r3, [r3, #0]
 8013016:	73fb      	strb	r3, [r7, #15]
				Index++;
 8013018:	697b      	ldr	r3, [r7, #20]
 801301a:	3301      	adds	r3, #1
 801301c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 801301e:	7c3b      	ldrb	r3, [r7, #16]
 8013020:	b29b      	uxth	r3, r3
 8013022:	021b      	lsls	r3, r3, #8
 8013024:	b29a      	uxth	r2, r3
 8013026:	7bfb      	ldrb	r3, [r7, #15]
 8013028:	b29b      	uxth	r3, r3
 801302a:	4413      	add	r3, r2
 801302c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	89ba      	ldrh	r2, [r7, #12]
 8013032:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8013036:	e06a      	b.n	801310e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8013038:	697b      	ldr	r3, [r7, #20]
 801303a:	683a      	ldr	r2, [r7, #0]
 801303c:	4413      	add	r3, r2
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	743b      	strb	r3, [r7, #16]
				Index++;
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	3301      	adds	r3, #1
 8013046:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	683a      	ldr	r2, [r7, #0]
 801304c:	4413      	add	r3, r2
 801304e:	781b      	ldrb	r3, [r3, #0]
 8013050:	73fb      	strb	r3, [r7, #15]
				Index++;
 8013052:	697b      	ldr	r3, [r7, #20]
 8013054:	3301      	adds	r3, #1
 8013056:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8013058:	7c3b      	ldrb	r3, [r7, #16]
 801305a:	b29b      	uxth	r3, r3
 801305c:	021b      	lsls	r3, r3, #8
 801305e:	b29a      	uxth	r2, r3
 8013060:	7bfb      	ldrb	r3, [r7, #15]
 8013062:	b29b      	uxth	r3, r3
 8013064:	4413      	add	r3, r2
 8013066:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	89ba      	ldrh	r2, [r7, #12]
 801306c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8013070:	e04d      	b.n	801310e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8013072:	697b      	ldr	r3, [r7, #20]
 8013074:	683a      	ldr	r2, [r7, #0]
 8013076:	4413      	add	r3, r2
 8013078:	781b      	ldrb	r3, [r3, #0]
 801307a:	743b      	strb	r3, [r7, #16]
				Index++;
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	3301      	adds	r3, #1
 8013080:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8013082:	697b      	ldr	r3, [r7, #20]
 8013084:	683a      	ldr	r2, [r7, #0]
 8013086:	4413      	add	r3, r2
 8013088:	781b      	ldrb	r3, [r3, #0]
 801308a:	73fb      	strb	r3, [r7, #15]
				Index++;
 801308c:	697b      	ldr	r3, [r7, #20]
 801308e:	3301      	adds	r3, #1
 8013090:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8013092:	7c3b      	ldrb	r3, [r7, #16]
 8013094:	b29b      	uxth	r3, r3
 8013096:	021b      	lsls	r3, r3, #8
 8013098:	b29a      	uxth	r2, r3
 801309a:	7bfb      	ldrb	r3, [r7, #15]
 801309c:	b29b      	uxth	r3, r3
 801309e:	4413      	add	r3, r2
 80130a0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	89ba      	ldrh	r2, [r7, #12]
 80130a6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 80130aa:	e030      	b.n	801310e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80130ac:	23fc      	movs	r3, #252	; 0xfc
 80130ae:	77fb      	strb	r3, [r7, #31]
 80130b0:	e02d      	b.n	801310e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80130b2:	7cfb      	ldrb	r3, [r7, #19]
 80130b4:	2b04      	cmp	r3, #4
 80130b6:	d828      	bhi.n	801310a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80130b8:	697b      	ldr	r3, [r7, #20]
 80130ba:	683a      	ldr	r2, [r7, #0]
 80130bc:	4413      	add	r3, r2
 80130be:	781b      	ldrb	r3, [r3, #0]
 80130c0:	74bb      	strb	r3, [r7, #18]
			Index++;
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	3301      	adds	r3, #1
 80130c6:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80130c8:	2300      	movs	r3, #0
 80130ca:	61bb      	str	r3, [r7, #24]
 80130cc:	e00f      	b.n	80130ee <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	683a      	ldr	r2, [r7, #0]
 80130d2:	4413      	add	r3, r2
 80130d4:	7819      	ldrb	r1, [r3, #0]
 80130d6:	f107 0208 	add.w	r2, r7, #8
 80130da:	69bb      	ldr	r3, [r7, #24]
 80130dc:	4413      	add	r3, r2
 80130de:	460a      	mov	r2, r1
 80130e0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80130e2:	697b      	ldr	r3, [r7, #20]
 80130e4:	3301      	adds	r3, #1
 80130e6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80130e8:	69bb      	ldr	r3, [r7, #24]
 80130ea:	3301      	adds	r3, #1
 80130ec:	61bb      	str	r3, [r7, #24]
 80130ee:	7cfb      	ldrb	r3, [r7, #19]
 80130f0:	69ba      	ldr	r2, [r7, #24]
 80130f2:	429a      	cmp	r2, r3
 80130f4:	dbeb      	blt.n	80130ce <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80130f6:	7cfb      	ldrb	r3, [r7, #19]
 80130f8:	f107 0208 	add.w	r2, r7, #8
 80130fc:	7cb9      	ldrb	r1, [r7, #18]
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f000 fdee 	bl	8013ce0 <VL53L0X_WriteMulti>
 8013104:	4603      	mov	r3, r0
 8013106:	77fb      	strb	r3, [r7, #31]
 8013108:	e001      	b.n	801310e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 801310a:	23fc      	movs	r3, #252	; 0xfc
 801310c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 801310e:	697b      	ldr	r3, [r7, #20]
 8013110:	683a      	ldr	r2, [r7, #0]
 8013112:	4413      	add	r3, r2
 8013114:	781b      	ldrb	r3, [r3, #0]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d004      	beq.n	8013124 <VL53L0X_load_tuning_settings+0x1b8>
 801311a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801311e:	2b00      	cmp	r3, #0
 8013120:	f43f af2e 	beq.w	8012f80 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8013124:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013128:	4618      	mov	r0, r3
 801312a:	3720      	adds	r7, #32
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}

08013130 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b088      	sub	sp, #32
 8013134:	af00      	add	r7, sp, #0
 8013136:	60f8      	str	r0, [r7, #12]
 8013138:	60b9      	str	r1, [r7, #8]
 801313a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801313c:	2300      	movs	r3, #0
 801313e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2200      	movs	r2, #0
 8013144:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8013146:	f107 0313 	add.w	r3, r7, #19
 801314a:	4619      	mov	r1, r3
 801314c:	68f8      	ldr	r0, [r7, #12]
 801314e:	f7fc ffbb 	bl	80100c8 <VL53L0X_GetXTalkCompensationEnable>
 8013152:	4603      	mov	r3, r0
 8013154:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8013156:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d111      	bne.n	8013182 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 801315e:	7cfb      	ldrb	r3, [r7, #19]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d00e      	beq.n	8013182 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	6a1b      	ldr	r3, [r3, #32]
 8013168:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 801316a:	68bb      	ldr	r3, [r7, #8]
 801316c:	8a9b      	ldrh	r3, [r3, #20]
 801316e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8013170:	69bb      	ldr	r3, [r7, #24]
 8013172:	fb02 f303 	mul.w	r3, r2, r3
 8013176:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8013178:	697b      	ldr	r3, [r7, #20]
 801317a:	3380      	adds	r3, #128	; 0x80
 801317c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8013182:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013186:	4618      	mov	r0, r3
 8013188:	3720      	adds	r7, #32
 801318a:	46bd      	mov	sp, r7
 801318c:	bd80      	pop	{r7, pc}

0801318e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 801318e:	b580      	push	{r7, lr}
 8013190:	b086      	sub	sp, #24
 8013192:	af00      	add	r7, sp, #0
 8013194:	60f8      	str	r0, [r7, #12]
 8013196:	60b9      	str	r1, [r7, #8]
 8013198:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801319a:	2300      	movs	r3, #0
 801319c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 801319e:	68bb      	ldr	r3, [r7, #8]
 80131a0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80131a6:	f107 0310 	add.w	r3, r7, #16
 80131aa:	461a      	mov	r2, r3
 80131ac:	68b9      	ldr	r1, [r7, #8]
 80131ae:	68f8      	ldr	r0, [r7, #12]
 80131b0:	f7ff ffbe 	bl	8013130 <VL53L0X_get_total_xtalk_rate>
 80131b4:	4603      	mov	r3, r0
 80131b6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80131b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d105      	bne.n	80131cc <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	681a      	ldr	r2, [r3, #0]
 80131c4:	693b      	ldr	r3, [r7, #16]
 80131c6:	441a      	add	r2, r3
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	601a      	str	r2, [r3, #0]

	return Status;
 80131cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80131d0:	4618      	mov	r0, r3
 80131d2:	3718      	adds	r7, #24
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}

080131d8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b09a      	sub	sp, #104	; 0x68
 80131dc:	af00      	add	r7, sp, #0
 80131de:	60f8      	str	r0, [r7, #12]
 80131e0:	60b9      	str	r1, [r7, #8]
 80131e2:	607a      	str	r2, [r7, #4]
 80131e4:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 80131e6:	2312      	movs	r3, #18
 80131e8:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 80131ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80131ee:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 80131f0:	2342      	movs	r3, #66	; 0x42
 80131f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 80131f4:	2306      	movs	r3, #6
 80131f6:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 80131f8:	2307      	movs	r3, #7
 80131fa:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80131fc:	2300      	movs	r3, #0
 80131fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8013208:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8013210:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8013212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013216:	fb02 f303 	mul.w	r3, r2, r3
 801321a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 801321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801321e:	3380      	adds	r3, #128	; 0x80
 8013220:	0a1b      	lsrs	r3, r3, #8
 8013222:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8013224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013226:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013228:	fb02 f303 	mul.w	r3, r2, r3
 801322c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 801322e:	2300      	movs	r3, #0
 8013230:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d01a      	beq.n	801326e <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	029b      	lsls	r3, r3, #10
 801323c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8013242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013244:	4413      	add	r3, r2
 8013246:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8013248:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013250:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8013252:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013254:	4613      	mov	r3, r2
 8013256:	005b      	lsls	r3, r3, #1
 8013258:	4413      	add	r3, r2
 801325a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 801325c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801325e:	fb03 f303 	mul.w	r3, r3, r3
 8013262:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8013264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013266:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801326a:	0c1b      	lsrs	r3, r3, #16
 801326c:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 801326e:	683b      	ldr	r3, [r7, #0]
 8013270:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013272:	fb02 f303 	mul.w	r3, r2, r3
 8013276:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8013278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801327a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801327e:	0c1b      	lsrs	r3, r3, #16
 8013280:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8013282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013284:	fb03 f303 	mul.w	r3, r3, r3
 8013288:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 801328a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801328c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8013290:	0c1b      	lsrs	r3, r3, #16
 8013292:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8013294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013296:	085a      	lsrs	r2, r3, #1
 8013298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801329a:	441a      	add	r2, r3
 801329c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801329e:	fbb2 f3f3 	udiv	r3, r2, r3
 80132a2:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80132a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80132a8:	fb02 f303 	mul.w	r3, r2, r3
 80132ac:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80132ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80132b4:	d302      	bcc.n	80132bc <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 80132b6:	4b54      	ldr	r3, [pc, #336]	; (8013408 <VL53L0X_calc_dmax+0x230>)
 80132b8:	663b      	str	r3, [r7, #96]	; 0x60
 80132ba:	e015      	b.n	80132e8 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80132bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132be:	085a      	lsrs	r2, r3, #1
 80132c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80132c2:	441a      	add	r2, r3
 80132c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80132ca:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80132cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80132ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80132d0:	fb02 f303 	mul.w	r3, r2, r3
 80132d4:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80132d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80132d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80132dc:	0c1b      	lsrs	r3, r3, #16
 80132de:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80132e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80132e2:	fb03 f303 	mul.w	r3, r3, r3
 80132e6:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 80132e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80132ea:	039b      	lsls	r3, r3, #14
 80132ec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80132f0:	4a46      	ldr	r2, [pc, #280]	; (801340c <VL53L0X_calc_dmax+0x234>)
 80132f2:	fba2 2303 	umull	r2, r3, r2, r3
 80132f6:	099b      	lsrs	r3, r3, #6
 80132f8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 80132fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132fc:	fb03 f303 	mul.w	r3, r3, r3
 8013300:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8013302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013304:	fb03 f303 	mul.w	r3, r3, r3
 8013308:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 801330a:	6a3b      	ldr	r3, [r7, #32]
 801330c:	3308      	adds	r3, #8
 801330e:	091b      	lsrs	r3, r3, #4
 8013310:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8013312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013314:	6a3b      	ldr	r3, [r7, #32]
 8013316:	1ad3      	subs	r3, r2, r3
 8013318:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 801331a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801331c:	4613      	mov	r3, r2
 801331e:	005b      	lsls	r3, r3, #1
 8013320:	4413      	add	r3, r2
 8013322:	011b      	lsls	r3, r3, #4
 8013324:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8013326:	69fb      	ldr	r3, [r7, #28]
 8013328:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801332c:	0b9b      	lsrs	r3, r3, #14
 801332e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8013330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013334:	4413      	add	r3, r2
 8013336:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8013338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801333a:	085b      	lsrs	r3, r3, #1
 801333c:	69ba      	ldr	r2, [r7, #24]
 801333e:	4413      	add	r3, r2
 8013340:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8013342:	69ba      	ldr	r2, [r7, #24]
 8013344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013346:	fbb2 f3f3 	udiv	r3, r2, r3
 801334a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 801334c:	69bb      	ldr	r3, [r7, #24]
 801334e:	039b      	lsls	r3, r3, #14
 8013350:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8013352:	69fb      	ldr	r3, [r7, #28]
 8013354:	085b      	lsrs	r3, r3, #1
 8013356:	69ba      	ldr	r2, [r7, #24]
 8013358:	4413      	add	r3, r2
 801335a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 801335c:	69ba      	ldr	r2, [r7, #24]
 801335e:	69fb      	ldr	r3, [r7, #28]
 8013360:	fbb2 f3f3 	udiv	r3, r2, r3
 8013364:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8013366:	69bb      	ldr	r3, [r7, #24]
 8013368:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801336a:	fb02 f303 	mul.w	r3, r2, r3
 801336e:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8013370:	69bb      	ldr	r3, [r7, #24]
 8013372:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8013376:	4a25      	ldr	r2, [pc, #148]	; (801340c <VL53L0X_calc_dmax+0x234>)
 8013378:	fba2 2303 	umull	r2, r3, r2, r3
 801337c:	099b      	lsrs	r3, r3, #6
 801337e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8013380:	69bb      	ldr	r3, [r7, #24]
 8013382:	011b      	lsls	r3, r3, #4
 8013384:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8013386:	69bb      	ldr	r3, [r7, #24]
 8013388:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801338c:	4a1f      	ldr	r2, [pc, #124]	; (801340c <VL53L0X_calc_dmax+0x234>)
 801338e:	fba2 2303 	umull	r2, r3, r2, r3
 8013392:	099b      	lsrs	r3, r3, #6
 8013394:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8013396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013398:	3380      	adds	r3, #128	; 0x80
 801339a:	0a1b      	lsrs	r3, r3, #8
 801339c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 801339e:	697b      	ldr	r3, [r7, #20]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d008      	beq.n	80133b6 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	085a      	lsrs	r2, r3, #1
 80133a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133aa:	441a      	add	r2, r3
 80133ac:	697b      	ldr	r3, [r7, #20]
 80133ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80133b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80133b4:	e001      	b.n	80133ba <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 80133b6:	2300      	movs	r3, #0
 80133b8:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80133ba:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80133bc:	f7fe fc41 	bl	8011c42 <VL53L0X_isqrt>
 80133c0:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80133c2:	69bb      	ldr	r3, [r7, #24]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d008      	beq.n	80133da <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80133c8:	69bb      	ldr	r3, [r7, #24]
 80133ca:	085a      	lsrs	r2, r3, #1
 80133cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133ce:	441a      	add	r2, r3
 80133d0:	69bb      	ldr	r3, [r7, #24]
 80133d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80133d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80133d8:	e001      	b.n	80133de <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80133da:	2300      	movs	r3, #0
 80133dc:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80133de:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80133e0:	f7fe fc2f 	bl	8011c42 <VL53L0X_isqrt>
 80133e4:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 80133e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80133e8:	693a      	ldr	r2, [r7, #16]
 80133ea:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 80133ec:	693a      	ldr	r2, [r7, #16]
 80133ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80133f0:	429a      	cmp	r2, r3
 80133f2:	d902      	bls.n	80133fa <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 80133f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80133f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80133f8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80133fa:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3768      	adds	r7, #104	; 0x68
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
 8013406:	bf00      	nop
 8013408:	fff00000 	.word	0xfff00000
 801340c:	10624dd3 	.word	0x10624dd3

08013410 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8013410:	b580      	push	{r7, lr}
 8013412:	b0b4      	sub	sp, #208	; 0xd0
 8013414:	af04      	add	r7, sp, #16
 8013416:	60f8      	str	r0, [r7, #12]
 8013418:	60b9      	str	r1, [r7, #8]
 801341a:	607a      	str	r2, [r7, #4]
 801341c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 801341e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8013422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8013426:	f44f 7316 	mov.w	r3, #600	; 0x258
 801342a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 801342e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8013432:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8013436:	f241 235c 	movw	r3, #4700	; 0x125c
 801343a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 801343e:	4b9e      	ldr	r3, [pc, #632]	; (80136b8 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8013440:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8013444:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8013448:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 801344a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 801344e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013452:	fbb2 f3f3 	udiv	r3, r2, r3
 8013456:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8013458:	4b98      	ldr	r3, [pc, #608]	; (80136bc <VL53L0X_calc_sigma_estimate+0x2ac>)
 801345a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 801345c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013460:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8013462:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8013466:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8013468:	f240 6377 	movw	r3, #1655	; 0x677
 801346c:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801346e:	2300      	movs	r3, #0
 8013470:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	6a1b      	ldr	r3, [r3, #32]
 8013478:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 801347a:	68bb      	ldr	r3, [r7, #8]
 801347c:	691b      	ldr	r3, [r3, #16]
 801347e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013482:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8013486:	0c1b      	lsrs	r3, r3, #16
 8013488:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	68db      	ldr	r3, [r3, #12]
 801348e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8013490:	f107 0310 	add.w	r3, r7, #16
 8013494:	461a      	mov	r2, r3
 8013496:	68b9      	ldr	r1, [r7, #8]
 8013498:	68f8      	ldr	r0, [r7, #12]
 801349a:	f7ff fe78 	bl	801318e <VL53L0X_get_total_signal_rate>
 801349e:	4603      	mov	r3, r0
 80134a0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80134a4:	f107 0314 	add.w	r3, r7, #20
 80134a8:	461a      	mov	r2, r3
 80134aa:	68b9      	ldr	r1, [r7, #8]
 80134ac:	68f8      	ldr	r0, [r7, #12]
 80134ae:	f7ff fe3f 	bl	8013130 <VL53L0X_get_total_xtalk_rate>
 80134b2:	4603      	mov	r3, r0
 80134b4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80134b8:	693b      	ldr	r3, [r7, #16]
 80134ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80134be:	fb02 f303 	mul.w	r3, r2, r3
 80134c2:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80134c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134c6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80134ca:	0c1b      	lsrs	r3, r3, #16
 80134cc:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80134ce:	697b      	ldr	r3, [r7, #20]
 80134d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80134d4:	fb02 f303 	mul.w	r3, r2, r3
 80134d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80134dc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80134e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80134e2:	429a      	cmp	r2, r3
 80134e4:	d902      	bls.n	80134ec <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80134e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80134e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 80134ec:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d168      	bne.n	80135c6 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80134fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8013504:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8013508:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 801350c:	461a      	mov	r2, r3
 801350e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8013512:	68f8      	ldr	r0, [r7, #12]
 8013514:	f7ff f93a 	bl	801278c <VL53L0X_calc_timeout_mclks>
 8013518:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8013520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 801352a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 801352e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8013532:	461a      	mov	r2, r3
 8013534:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8013538:	68f8      	ldr	r0, [r7, #12]
 801353a:	f7ff f927 	bl	801278c <VL53L0X_calc_timeout_mclks>
 801353e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8013540:	2303      	movs	r3, #3
 8013542:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8013546:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 801354a:	2b08      	cmp	r3, #8
 801354c:	d102      	bne.n	8013554 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 801354e:	2302      	movs	r3, #2
 8013550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8013554:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013558:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 801355a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801355e:	fb02 f303 	mul.w	r3, r2, r3
 8013562:	02db      	lsls	r3, r3, #11
 8013564:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8013568:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801356c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8013570:	4a53      	ldr	r2, [pc, #332]	; (80136c0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8013572:	fba2 2303 	umull	r2, r3, r2, r3
 8013576:	099b      	lsrs	r3, r3, #6
 8013578:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 801357c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013580:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013582:	fb02 f303 	mul.w	r3, r2, r3
 8013586:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 801358a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801358e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8013592:	4a4b      	ldr	r2, [pc, #300]	; (80136c0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8013594:	fba2 2303 	umull	r2, r3, r2, r3
 8013598:	099b      	lsrs	r3, r3, #6
 801359a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 801359e:	693b      	ldr	r3, [r7, #16]
 80135a0:	3380      	adds	r3, #128	; 0x80
 80135a2:	0a1b      	lsrs	r3, r3, #8
 80135a4:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80135a6:	693a      	ldr	r2, [r7, #16]
 80135a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80135ac:	fb02 f303 	mul.w	r3, r2, r3
 80135b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80135b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80135b8:	3380      	adds	r3, #128	; 0x80
 80135ba:	0a1b      	lsrs	r3, r3, #8
 80135bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	021b      	lsls	r3, r3, #8
 80135c4:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80135c6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d002      	beq.n	80135d4 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 80135ce:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80135d2:	e15e      	b.n	8013892 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 80135d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d10c      	bne.n	80135f4 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80135e0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80135e8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 80135ec:	683b      	ldr	r3, [r7, #0]
 80135ee:	2200      	movs	r2, #0
 80135f0:	601a      	str	r2, [r3, #0]
 80135f2:	e14c      	b.n	801388e <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 80135f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d102      	bne.n	8013602 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 80135fc:	2301      	movs	r3, #1
 80135fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8013602:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013606:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8013608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801360a:	041a      	lsls	r2, r3, #16
 801360c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801360e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013612:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8013616:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801361a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801361c:	429a      	cmp	r2, r3
 801361e:	d902      	bls.n	8013626 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8013620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013622:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8013626:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801362a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801362e:	fb02 f303 	mul.w	r3, r2, r3
 8013632:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8013636:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801363a:	4613      	mov	r3, r2
 801363c:	005b      	lsls	r3, r3, #1
 801363e:	4413      	add	r3, r2
 8013640:	009b      	lsls	r3, r3, #2
 8013642:	4618      	mov	r0, r3
 8013644:	f7fe fafd 	bl	8011c42 <VL53L0X_isqrt>
 8013648:	4603      	mov	r3, r0
 801364a:	005b      	lsls	r3, r3, #1
 801364c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	891b      	ldrh	r3, [r3, #8]
 8013652:	461a      	mov	r2, r3
 8013654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013656:	fb02 f303 	mul.w	r3, r2, r3
 801365a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 801365c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801365e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8013660:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013664:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8013666:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8013668:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 801366c:	4a14      	ldr	r2, [pc, #80]	; (80136c0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 801366e:	fba2 2303 	umull	r2, r3, r2, r3
 8013672:	099b      	lsrs	r3, r3, #6
 8013674:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8013676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013678:	041b      	lsls	r3, r3, #16
 801367a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801367e:	4a10      	ldr	r2, [pc, #64]	; (80136c0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8013680:	fba2 2303 	umull	r2, r3, r2, r3
 8013684:	099b      	lsrs	r3, r3, #6
 8013686:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8013688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801368a:	021b      	lsls	r3, r3, #8
 801368c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 801368e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013692:	fbb2 f3f3 	udiv	r3, r2, r3
 8013696:	2b00      	cmp	r3, #0
 8013698:	bfb8      	it	lt
 801369a:	425b      	neglt	r3, r3
 801369c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 801369e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136a0:	021b      	lsls	r3, r3, #8
 80136a2:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 80136a4:	68bb      	ldr	r3, [r7, #8]
 80136a6:	7e1b      	ldrb	r3, [r3, #24]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d00b      	beq.n	80136c4 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 80136ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80136b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80136b4:	e033      	b.n	801371e <VL53L0X_calc_sigma_estimate+0x30e>
 80136b6:	bf00      	nop
 80136b8:	028f87ae 	.word	0x028f87ae
 80136bc:	0006999a 	.word	0x0006999a
 80136c0:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80136c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80136c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80136ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80136ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80136d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136d4:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 80136d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80136dc:	fb02 f303 	mul.w	r3, r2, r3
 80136e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 80136e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80136e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80136ea:	4413      	add	r3, r2
 80136ec:	0c1b      	lsrs	r3, r3, #16
 80136ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 80136f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80136f6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80136fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 80136fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013702:	085b      	lsrs	r3, r3, #1
 8013704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8013708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801370c:	fb03 f303 	mul.w	r3, r3, r3
 8013710:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8013714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013718:	0b9b      	lsrs	r3, r3, #14
 801371a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 801371e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013722:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013724:	fb02 f303 	mul.w	r3, r2, r3
 8013728:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 801372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8013730:	0c1b      	lsrs	r3, r3, #16
 8013732:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8013734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013736:	fb03 f303 	mul.w	r3, r3, r3
 801373a:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 801373c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013740:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8013742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013744:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8013748:	0c1b      	lsrs	r3, r3, #16
 801374a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 801374c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801374e:	fb03 f303 	mul.w	r3, r3, r3
 8013752:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8013754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013758:	4413      	add	r3, r2
 801375a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 801375c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801375e:	f7fe fa70 	bl	8011c42 <VL53L0X_isqrt>
 8013762:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8013764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013766:	041b      	lsls	r3, r3, #16
 8013768:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 801376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801376c:	3332      	adds	r3, #50	; 0x32
 801376e:	4a4b      	ldr	r2, [pc, #300]	; (801389c <VL53L0X_calc_sigma_estimate+0x48c>)
 8013770:	fba2 2303 	umull	r2, r3, r2, r3
 8013774:	095a      	lsrs	r2, r3, #5
 8013776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013778:	fbb2 f3f3 	udiv	r3, r2, r3
 801377c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8013780:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013784:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8013788:	fb02 f303 	mul.w	r3, r2, r3
 801378c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8013790:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013794:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8013798:	3308      	adds	r3, #8
 801379a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 801379e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80137a2:	4a3f      	ldr	r2, [pc, #252]	; (80138a0 <VL53L0X_calc_sigma_estimate+0x490>)
 80137a4:	fba2 2303 	umull	r2, r3, r2, r3
 80137a8:	0b5b      	lsrs	r3, r3, #13
 80137aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80137ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80137b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80137b4:	429a      	cmp	r2, r3
 80137b6:	d902      	bls.n	80137be <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80137b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80137ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80137be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80137c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80137c6:	4413      	add	r3, r2
 80137c8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80137cc:	4a35      	ldr	r2, [pc, #212]	; (80138a4 <VL53L0X_calc_sigma_estimate+0x494>)
 80137ce:	fba2 2303 	umull	r2, r3, r2, r3
 80137d2:	099b      	lsrs	r3, r3, #6
 80137d4:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80137d6:	6a3b      	ldr	r3, [r7, #32]
 80137d8:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80137da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80137de:	441a      	add	r2, r3
 80137e0:	6a3b      	ldr	r3, [r7, #32]
 80137e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80137e6:	4618      	mov	r0, r3
 80137e8:	f7fe fa2b 	bl	8011c42 <VL53L0X_isqrt>
 80137ec:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 80137ee:	69fb      	ldr	r3, [r7, #28]
 80137f0:	021b      	lsls	r3, r3, #8
 80137f2:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 80137f4:	69fb      	ldr	r3, [r7, #28]
 80137f6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80137fa:	4a2a      	ldr	r2, [pc, #168]	; (80138a4 <VL53L0X_calc_sigma_estimate+0x494>)
 80137fc:	fba2 2303 	umull	r2, r3, r2, r3
 8013800:	099b      	lsrs	r3, r3, #6
 8013802:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8013804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013808:	fb03 f303 	mul.w	r3, r3, r3
 801380c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 801380e:	69fb      	ldr	r3, [r7, #28]
 8013810:	fb03 f303 	mul.w	r3, r3, r3
 8013814:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8013816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801381a:	4413      	add	r3, r2
 801381c:	4618      	mov	r0, r3
 801381e:	f7fe fa10 	bl	8011c42 <VL53L0X_isqrt>
 8013822:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8013824:	69bb      	ldr	r3, [r7, #24]
 8013826:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801382a:	fb02 f303 	mul.w	r3, r2, r3
 801382e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8013832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013834:	2b00      	cmp	r3, #0
 8013836:	d009      	beq.n	801384c <VL53L0X_calc_sigma_estimate+0x43c>
 8013838:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801383c:	2b00      	cmp	r3, #0
 801383e:	d005      	beq.n	801384c <VL53L0X_calc_sigma_estimate+0x43c>
 8013840:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013844:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013848:	429a      	cmp	r2, r3
 801384a:	d903      	bls.n	8013854 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 801384c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013850:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801385a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	681a      	ldr	r2, [r3, #0]
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8013866:	6939      	ldr	r1, [r7, #16]
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	9303      	str	r3, [sp, #12]
 801386c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013870:	9302      	str	r3, [sp, #8]
 8013872:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013876:	9301      	str	r3, [sp, #4]
 8013878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801387a:	9300      	str	r3, [sp, #0]
 801387c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013880:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013882:	68f8      	ldr	r0, [r7, #12]
 8013884:	f7ff fca8 	bl	80131d8 <VL53L0X_calc_dmax>
 8013888:	4603      	mov	r3, r0
 801388a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 801388e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8013892:	4618      	mov	r0, r3
 8013894:	37c0      	adds	r7, #192	; 0xc0
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}
 801389a:	bf00      	nop
 801389c:	51eb851f 	.word	0x51eb851f
 80138a0:	d1b71759 	.word	0xd1b71759
 80138a4:	10624dd3 	.word	0x10624dd3

080138a8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b090      	sub	sp, #64	; 0x40
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	60f8      	str	r0, [r7, #12]
 80138b0:	607a      	str	r2, [r7, #4]
 80138b2:	461a      	mov	r2, r3
 80138b4:	460b      	mov	r3, r1
 80138b6:	72fb      	strb	r3, [r7, #11]
 80138b8:	4613      	mov	r3, r2
 80138ba:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80138bc:	2300      	movs	r3, #0
 80138be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80138c2:	2300      	movs	r3, #0
 80138c4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 80138c8:	2300      	movs	r3, #0
 80138ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80138ce:	2300      	movs	r3, #0
 80138d0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80138d4:	2300      	movs	r3, #0
 80138d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80138da:	2300      	movs	r3, #0
 80138dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80138e0:	2300      	movs	r3, #0
 80138e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80138e6:	2300      	movs	r3, #0
 80138e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 80138ec:	2300      	movs	r3, #0
 80138ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 80138f2:	2300      	movs	r3, #0
 80138f4:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 80138f6:	2300      	movs	r3, #0
 80138f8:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 80138fa:	7afb      	ldrb	r3, [r7, #11]
 80138fc:	10db      	asrs	r3, r3, #3
 80138fe:	b2db      	uxtb	r3, r3
 8013900:	f003 030f 	and.w	r3, r3, #15
 8013904:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8013908:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801390c:	2b00      	cmp	r3, #0
 801390e:	d017      	beq.n	8013940 <VL53L0X_get_pal_range_status+0x98>
 8013910:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013914:	2b05      	cmp	r3, #5
 8013916:	d013      	beq.n	8013940 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8013918:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801391c:	2b07      	cmp	r3, #7
 801391e:	d00f      	beq.n	8013940 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8013920:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013924:	2b0c      	cmp	r3, #12
 8013926:	d00b      	beq.n	8013940 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8013928:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801392c:	2b0d      	cmp	r3, #13
 801392e:	d007      	beq.n	8013940 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8013930:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013934:	2b0e      	cmp	r3, #14
 8013936:	d003      	beq.n	8013940 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8013938:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801393c:	2b0f      	cmp	r3, #15
 801393e:	d103      	bne.n	8013948 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8013940:	2301      	movs	r3, #1
 8013942:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8013946:	e002      	b.n	801394e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8013948:	2300      	movs	r3, #0
 801394a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 801394e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013952:	2b00      	cmp	r3, #0
 8013954:	d109      	bne.n	801396a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8013956:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801395a:	461a      	mov	r2, r3
 801395c:	2100      	movs	r1, #0
 801395e:	68f8      	ldr	r0, [r7, #12]
 8013960:	f7fc fc86 	bl	8010270 <VL53L0X_GetLimitCheckEnable>
 8013964:	4603      	mov	r3, r0
 8013966:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 801396a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801396e:	2b00      	cmp	r3, #0
 8013970:	d02e      	beq.n	80139d0 <VL53L0X_get_pal_range_status+0x128>
 8013972:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013976:	2b00      	cmp	r3, #0
 8013978:	d12a      	bne.n	80139d0 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 801397a:	f107 0310 	add.w	r3, r7, #16
 801397e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013982:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8013984:	68f8      	ldr	r0, [r7, #12]
 8013986:	f7ff fd43 	bl	8013410 <VL53L0X_calc_sigma_estimate>
 801398a:	4603      	mov	r3, r0
 801398c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8013990:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013994:	2b00      	cmp	r3, #0
 8013996:	d103      	bne.n	80139a0 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8013998:	693b      	ldr	r3, [r7, #16]
 801399a:	b29a      	uxth	r2, r3
 801399c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801399e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80139a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d113      	bne.n	80139d0 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80139a8:	f107 0320 	add.w	r3, r7, #32
 80139ac:	461a      	mov	r2, r3
 80139ae:	2100      	movs	r1, #0
 80139b0:	68f8      	ldr	r0, [r7, #12]
 80139b2:	f7fc fce3 	bl	801037c <VL53L0X_GetLimitCheckValue>
 80139b6:	4603      	mov	r3, r0
 80139b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80139bc:	6a3b      	ldr	r3, [r7, #32]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d006      	beq.n	80139d0 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 80139c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139c4:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80139c6:	429a      	cmp	r2, r3
 80139c8:	d902      	bls.n	80139d0 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80139ca:	2301      	movs	r3, #1
 80139cc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80139d0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d109      	bne.n	80139ec <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80139d8:	f107 0329 	add.w	r3, r7, #41	; 0x29
 80139dc:	461a      	mov	r2, r3
 80139de:	2102      	movs	r1, #2
 80139e0:	68f8      	ldr	r0, [r7, #12]
 80139e2:	f7fc fc45 	bl	8010270 <VL53L0X_GetLimitCheckEnable>
 80139e6:	4603      	mov	r3, r0
 80139e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80139ec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d044      	beq.n	8013a7e <VL53L0X_get_pal_range_status+0x1d6>
 80139f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d140      	bne.n	8013a7e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80139fc:	f107 031c 	add.w	r3, r7, #28
 8013a00:	461a      	mov	r2, r3
 8013a02:	2102      	movs	r1, #2
 8013a04:	68f8      	ldr	r0, [r7, #12]
 8013a06:	f7fc fcb9 	bl	801037c <VL53L0X_GetLimitCheckValue>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8013a10:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d107      	bne.n	8013a28 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8013a18:	2201      	movs	r2, #1
 8013a1a:	21ff      	movs	r1, #255	; 0xff
 8013a1c:	68f8      	ldr	r0, [r7, #12]
 8013a1e:	f000 f9bb 	bl	8013d98 <VL53L0X_WrByte>
 8013a22:	4603      	mov	r3, r0
 8013a24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8013a28:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d109      	bne.n	8013a44 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8013a30:	f107 0316 	add.w	r3, r7, #22
 8013a34:	461a      	mov	r2, r3
 8013a36:	21b6      	movs	r1, #182	; 0xb6
 8013a38:	68f8      	ldr	r0, [r7, #12]
 8013a3a:	f000 fa59 	bl	8013ef0 <VL53L0X_RdWord>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8013a44:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d107      	bne.n	8013a5c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	21ff      	movs	r1, #255	; 0xff
 8013a50:	68f8      	ldr	r0, [r7, #12]
 8013a52:	f000 f9a1 	bl	8013d98 <VL53L0X_WrByte>
 8013a56:	4603      	mov	r3, r0
 8013a58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8013a5c:	8afb      	ldrh	r3, [r7, #22]
 8013a5e:	025b      	lsls	r3, r3, #9
 8013a60:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a66:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8013a6a:	69fb      	ldr	r3, [r7, #28]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d006      	beq.n	8013a7e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8013a70:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8013a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d902      	bls.n	8013a7e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8013a78:	2301      	movs	r3, #1
 8013a7a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8013a7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d109      	bne.n	8013a9a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8013a86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013a8a:	461a      	mov	r2, r3
 8013a8c:	2103      	movs	r1, #3
 8013a8e:	68f8      	ldr	r0, [r7, #12]
 8013a90:	f7fc fbee 	bl	8010270 <VL53L0X_GetLimitCheckEnable>
 8013a94:	4603      	mov	r3, r0
 8013a96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8013a9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d023      	beq.n	8013aea <VL53L0X_get_pal_range_status+0x242>
 8013aa2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d11f      	bne.n	8013aea <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8013aaa:	893b      	ldrh	r3, [r7, #8]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d102      	bne.n	8013ab6 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8013ab4:	e005      	b.n	8013ac2 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	021a      	lsls	r2, r3, #8
 8013aba:	893b      	ldrh	r3, [r7, #8]
 8013abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ac0:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8013ac2:	f107 0318 	add.w	r3, r7, #24
 8013ac6:	461a      	mov	r2, r3
 8013ac8:	2103      	movs	r1, #3
 8013aca:	68f8      	ldr	r0, [r7, #12]
 8013acc:	f7fc fc56 	bl	801037c <VL53L0X_GetLimitCheckValue>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8013ad6:	69bb      	ldr	r3, [r7, #24]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d006      	beq.n	8013aea <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8013adc:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8013ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ae0:	429a      	cmp	r2, r3
 8013ae2:	d202      	bcs.n	8013aea <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8013aea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d14a      	bne.n	8013b88 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8013af2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8013af6:	2b01      	cmp	r3, #1
 8013af8:	d103      	bne.n	8013b02 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8013afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013afc:	22ff      	movs	r2, #255	; 0xff
 8013afe:	701a      	strb	r2, [r3, #0]
 8013b00:	e042      	b.n	8013b88 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8013b02:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013b06:	2b01      	cmp	r3, #1
 8013b08:	d007      	beq.n	8013b1a <VL53L0X_get_pal_range_status+0x272>
 8013b0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013b0e:	2b02      	cmp	r3, #2
 8013b10:	d003      	beq.n	8013b1a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8013b12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013b16:	2b03      	cmp	r3, #3
 8013b18:	d103      	bne.n	8013b22 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8013b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b1c:	2205      	movs	r2, #5
 8013b1e:	701a      	strb	r2, [r3, #0]
 8013b20:	e032      	b.n	8013b88 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8013b22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013b26:	2b06      	cmp	r3, #6
 8013b28:	d003      	beq.n	8013b32 <VL53L0X_get_pal_range_status+0x28a>
 8013b2a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013b2e:	2b09      	cmp	r3, #9
 8013b30:	d103      	bne.n	8013b3a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8013b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b34:	2204      	movs	r2, #4
 8013b36:	701a      	strb	r2, [r3, #0]
 8013b38:	e026      	b.n	8013b88 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8013b3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013b3e:	2b08      	cmp	r3, #8
 8013b40:	d007      	beq.n	8013b52 <VL53L0X_get_pal_range_status+0x2aa>
 8013b42:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013b46:	2b0a      	cmp	r3, #10
 8013b48:	d003      	beq.n	8013b52 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8013b4a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8013b4e:	2b01      	cmp	r3, #1
 8013b50:	d103      	bne.n	8013b5a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8013b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b54:	2203      	movs	r2, #3
 8013b56:	701a      	strb	r2, [r3, #0]
 8013b58:	e016      	b.n	8013b88 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8013b5a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013b5e:	2b04      	cmp	r3, #4
 8013b60:	d003      	beq.n	8013b6a <VL53L0X_get_pal_range_status+0x2c2>
 8013b62:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013b66:	2b01      	cmp	r3, #1
 8013b68:	d103      	bne.n	8013b72 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8013b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b6c:	2202      	movs	r2, #2
 8013b6e:	701a      	strb	r2, [r3, #0]
 8013b70:	e00a      	b.n	8013b88 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8013b72:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013b76:	2b01      	cmp	r3, #1
 8013b78:	d103      	bne.n	8013b82 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8013b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b7c:	2201      	movs	r2, #1
 8013b7e:	701a      	strb	r2, [r3, #0]
 8013b80:	e002      	b.n	8013b88 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8013b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b84:	2200      	movs	r2, #0
 8013b86:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8013b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b8a:	781b      	ldrb	r3, [r3, #0]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d102      	bne.n	8013b96 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8013b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b92:	2200      	movs	r2, #0
 8013b94:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8013b96:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8013b9a:	461a      	mov	r2, r3
 8013b9c:	2101      	movs	r1, #1
 8013b9e:	68f8      	ldr	r0, [r7, #12]
 8013ba0:	f7fc fb66 	bl	8010270 <VL53L0X_GetLimitCheckEnable>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8013baa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d14f      	bne.n	8013c52 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8013bb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d003      	beq.n	8013bc2 <VL53L0X_get_pal_range_status+0x31a>
 8013bba:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8013bbe:	2b01      	cmp	r3, #1
 8013bc0:	d103      	bne.n	8013bca <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8013bc2:	2301      	movs	r3, #1
 8013bc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013bc8:	e002      	b.n	8013bd0 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8013bca:	2300      	movs	r3, #0
 8013bcc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8013bd6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8013bda:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013bde:	2b04      	cmp	r3, #4
 8013be0:	d003      	beq.n	8013bea <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8013be2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d103      	bne.n	8013bf2 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8013bea:	2301      	movs	r3, #1
 8013bec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013bf0:	e002      	b.n	8013bf8 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8013bfe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8013c02:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d003      	beq.n	8013c12 <VL53L0X_get_pal_range_status+0x36a>
 8013c0a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8013c0e:	2b01      	cmp	r3, #1
 8013c10:	d103      	bne.n	8013c1a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8013c12:	2301      	movs	r3, #1
 8013c14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013c18:	e002      	b.n	8013c20 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8013c26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8013c2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d003      	beq.n	8013c3a <VL53L0X_get_pal_range_status+0x392>
 8013c32:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013c36:	2b01      	cmp	r3, #1
 8013c38:	d103      	bne.n	8013c42 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8013c3a:	2301      	movs	r3, #1
 8013c3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013c40:	e002      	b.n	8013c48 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8013c42:	2300      	movs	r3, #0
 8013c44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8013c4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8013c52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8013c56:	4618      	mov	r0, r3
 8013c58:	3740      	adds	r7, #64	; 0x40
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bd80      	pop	{r7, pc}

08013c5e <_I2CWrite>:
#define  VL53L0X_OsDelay(...) (void)0
#endif

uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8013c5e:	b580      	push	{r7, lr}
 8013c60:	b088      	sub	sp, #32
 8013c62:	af02      	add	r7, sp, #8
 8013c64:	60f8      	str	r0, [r7, #12]
 8013c66:	60b9      	str	r1, [r7, #8]
 8013c68:	607a      	str	r2, [r7, #4]
	int status;
	int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	330a      	adds	r3, #10
 8013c6e:	617b      	str	r3, [r7, #20]

	status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8013c7c:	b299      	uxth	r1, r3
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	b29a      	uxth	r2, r3
 8013c82:	697b      	ldr	r3, [r7, #20]
 8013c84:	9300      	str	r3, [sp, #0]
 8013c86:	4613      	mov	r3, r2
 8013c88:	68ba      	ldr	r2, [r7, #8]
 8013c8a:	f7f5 ff77 	bl	8009b7c <HAL_I2C_Master_Transmit>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	613b      	str	r3, [r7, #16]
	if (status) {
		//VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
		//XNUCLEO6180XA1_I2C1_Init(&hi2c1);
	}
	return status;
 8013c92:	693b      	ldr	r3, [r7, #16]
}
 8013c94:	4618      	mov	r0, r3
 8013c96:	3718      	adds	r7, #24
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bd80      	pop	{r7, pc}

08013c9c <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b088      	sub	sp, #32
 8013ca0:	af02      	add	r7, sp, #8
 8013ca2:	60f8      	str	r0, [r7, #12]
 8013ca4:	60b9      	str	r1, [r7, #8]
 8013ca6:	607a      	str	r2, [r7, #4]
	int status;
	int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	330a      	adds	r3, #10
 8013cac:	617b      	str	r3, [r7, #20]

	status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr | 1, pdata, count, i2c_time_out);
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8013cba:	f043 0301 	orr.w	r3, r3, #1
 8013cbe:	b2db      	uxtb	r3, r3
 8013cc0:	b299      	uxth	r1, r3
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	b29a      	uxth	r2, r3
 8013cc6:	697b      	ldr	r3, [r7, #20]
 8013cc8:	9300      	str	r3, [sp, #0]
 8013cca:	4613      	mov	r3, r2
 8013ccc:	68ba      	ldr	r2, [r7, #8]
 8013cce:	f7f6 f853 	bl	8009d78 <HAL_I2C_Master_Receive>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	613b      	str	r3, [r7, #16]
	if (status) {
		//VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
		//XNUCLEO6180XA1_I2C1_Init(&hi2c1);
	}
	return status;
 8013cd6:	693b      	ldr	r3, [r7, #16]
}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	3718      	adds	r7, #24
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}

08013ce0 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b086      	sub	sp, #24
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	60f8      	str	r0, [r7, #12]
 8013ce8:	607a      	str	r2, [r7, #4]
 8013cea:	603b      	str	r3, [r7, #0]
 8013cec:	460b      	mov	r3, r1
 8013cee:	72fb      	strb	r3, [r7, #11]
	int status_int;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	75fb      	strb	r3, [r7, #23]
	if (count > sizeof(_I2CBuffer) - 1) {
 8013cf4:	683b      	ldr	r3, [r7, #0]
 8013cf6:	2b3f      	cmp	r3, #63	; 0x3f
 8013cf8:	d902      	bls.n	8013d00 <VL53L0X_WriteMulti+0x20>
		return VL53L0X_ERROR_INVALID_PARAMS;
 8013cfa:	f06f 0303 	mvn.w	r3, #3
 8013cfe:	e016      	b.n	8013d2e <VL53L0X_WriteMulti+0x4e>
	}
	_I2CBuffer[0] = index;
 8013d00:	4a0d      	ldr	r2, [pc, #52]	; (8013d38 <VL53L0X_WriteMulti+0x58>)
 8013d02:	7afb      	ldrb	r3, [r7, #11]
 8013d04:	7013      	strb	r3, [r2, #0]
	memcpy(&_I2CBuffer[1], pdata, count);
 8013d06:	683a      	ldr	r2, [r7, #0]
 8013d08:	6879      	ldr	r1, [r7, #4]
 8013d0a:	480c      	ldr	r0, [pc, #48]	; (8013d3c <VL53L0X_WriteMulti+0x5c>)
 8013d0c:	f000 f9b8 	bl	8014080 <memcpy>
	VL53L0X_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8013d10:	683b      	ldr	r3, [r7, #0]
 8013d12:	3301      	adds	r3, #1
 8013d14:	461a      	mov	r2, r3
 8013d16:	4908      	ldr	r1, [pc, #32]	; (8013d38 <VL53L0X_WriteMulti+0x58>)
 8013d18:	68f8      	ldr	r0, [r7, #12]
 8013d1a:	f7ff ffa0 	bl	8013c5e <_I2CWrite>
 8013d1e:	6138      	str	r0, [r7, #16]
	if (status_int != 0) {
 8013d20:	693b      	ldr	r3, [r7, #16]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d001      	beq.n	8013d2a <VL53L0X_WriteMulti+0x4a>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8013d26:	23ec      	movs	r3, #236	; 0xec
 8013d28:	75fb      	strb	r3, [r7, #23]
	}
	VL53L0X_PutI2cBus();
	return Status;
 8013d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013d2e:	4618      	mov	r0, r3
 8013d30:	3718      	adds	r7, #24
 8013d32:	46bd      	mov	sp, r7
 8013d34:	bd80      	pop	{r7, pc}
 8013d36:	bf00      	nop
 8013d38:	20001a8c 	.word	0x20001a8c
 8013d3c:	20001a8d 	.word	0x20001a8d

08013d40 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b086      	sub	sp, #24
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	60f8      	str	r0, [r7, #12]
 8013d48:	607a      	str	r2, [r7, #4]
 8013d4a:	603b      	str	r3, [r7, #0]
 8013d4c:	460b      	mov	r3, r1
 8013d4e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8013d50:	2300      	movs	r3, #0
 8013d52:	75fb      	strb	r3, [r7, #23]
	int32_t status_int;
	VL53L0X_GetI2cBus();
	status_int = _I2CWrite(Dev, &index, 1);
 8013d54:	f107 030b 	add.w	r3, r7, #11
 8013d58:	2201      	movs	r2, #1
 8013d5a:	4619      	mov	r1, r3
 8013d5c:	68f8      	ldr	r0, [r7, #12]
 8013d5e:	f7ff ff7e 	bl	8013c5e <_I2CWrite>
 8013d62:	6138      	str	r0, [r7, #16]
	if (status_int != 0) {
 8013d64:	693b      	ldr	r3, [r7, #16]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d002      	beq.n	8013d70 <VL53L0X_ReadMulti+0x30>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8013d6a:	23ec      	movs	r3, #236	; 0xec
 8013d6c:	75fb      	strb	r3, [r7, #23]
		goto done;
 8013d6e:	e00c      	b.n	8013d8a <VL53L0X_ReadMulti+0x4a>
	}
	status_int = _I2CRead(Dev, pdata, count);
 8013d70:	683a      	ldr	r2, [r7, #0]
 8013d72:	6879      	ldr	r1, [r7, #4]
 8013d74:	68f8      	ldr	r0, [r7, #12]
 8013d76:	f7ff ff91 	bl	8013c9c <_I2CRead>
 8013d7a:	6138      	str	r0, [r7, #16]
	if (status_int != 0) {
 8013d7c:	693b      	ldr	r3, [r7, #16]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d002      	beq.n	8013d88 <VL53L0X_ReadMulti+0x48>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8013d82:	23ec      	movs	r3, #236	; 0xec
 8013d84:	75fb      	strb	r3, [r7, #23]
 8013d86:	e000      	b.n	8013d8a <VL53L0X_ReadMulti+0x4a>
	}
	done:
 8013d88:	bf00      	nop
	VL53L0X_PutI2cBus();
	return Status;
 8013d8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013d8e:	4618      	mov	r0, r3
 8013d90:	3718      	adds	r7, #24
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bd80      	pop	{r7, pc}
	...

08013d98 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b084      	sub	sp, #16
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	460b      	mov	r3, r1
 8013da2:	70fb      	strb	r3, [r7, #3]
 8013da4:	4613      	mov	r3, r2
 8013da6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8013da8:	2300      	movs	r3, #0
 8013daa:	73fb      	strb	r3, [r7, #15]
	int32_t status_int;

	_I2CBuffer[0] = index;
 8013dac:	4a0b      	ldr	r2, [pc, #44]	; (8013ddc <VL53L0X_WrByte+0x44>)
 8013dae:	78fb      	ldrb	r3, [r7, #3]
 8013db0:	7013      	strb	r3, [r2, #0]
	_I2CBuffer[1] = data;
 8013db2:	4a0a      	ldr	r2, [pc, #40]	; (8013ddc <VL53L0X_WrByte+0x44>)
 8013db4:	78bb      	ldrb	r3, [r7, #2]
 8013db6:	7053      	strb	r3, [r2, #1]

	VL53L0X_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8013db8:	2202      	movs	r2, #2
 8013dba:	4908      	ldr	r1, [pc, #32]	; (8013ddc <VL53L0X_WrByte+0x44>)
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f7ff ff4e 	bl	8013c5e <_I2CWrite>
 8013dc2:	60b8      	str	r0, [r7, #8]
	if (status_int != 0) {
 8013dc4:	68bb      	ldr	r3, [r7, #8]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d001      	beq.n	8013dce <VL53L0X_WrByte+0x36>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8013dca:	23ec      	movs	r3, #236	; 0xec
 8013dcc:	73fb      	strb	r3, [r7, #15]
	}
	VL53L0X_PutI2cBus();
	return Status;
 8013dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3710      	adds	r7, #16
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}
 8013dda:	bf00      	nop
 8013ddc:	20001a8c 	.word	0x20001a8c

08013de0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b084      	sub	sp, #16
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	460b      	mov	r3, r1
 8013dea:	70fb      	strb	r3, [r7, #3]
 8013dec:	4613      	mov	r3, r2
 8013dee:	803b      	strh	r3, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8013df0:	2300      	movs	r3, #0
 8013df2:	73fb      	strb	r3, [r7, #15]
	int32_t status_int;

	_I2CBuffer[0] = index;
 8013df4:	4a0e      	ldr	r2, [pc, #56]	; (8013e30 <VL53L0X_WrWord+0x50>)
 8013df6:	78fb      	ldrb	r3, [r7, #3]
 8013df8:	7013      	strb	r3, [r2, #0]
	_I2CBuffer[1] = data >> 8;
 8013dfa:	883b      	ldrh	r3, [r7, #0]
 8013dfc:	0a1b      	lsrs	r3, r3, #8
 8013dfe:	b29b      	uxth	r3, r3
 8013e00:	b2da      	uxtb	r2, r3
 8013e02:	4b0b      	ldr	r3, [pc, #44]	; (8013e30 <VL53L0X_WrWord+0x50>)
 8013e04:	705a      	strb	r2, [r3, #1]
	_I2CBuffer[2] = data & 0x00FF;
 8013e06:	883b      	ldrh	r3, [r7, #0]
 8013e08:	b2da      	uxtb	r2, r3
 8013e0a:	4b09      	ldr	r3, [pc, #36]	; (8013e30 <VL53L0X_WrWord+0x50>)
 8013e0c:	709a      	strb	r2, [r3, #2]

	VL53L0X_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8013e0e:	2203      	movs	r2, #3
 8013e10:	4907      	ldr	r1, [pc, #28]	; (8013e30 <VL53L0X_WrWord+0x50>)
 8013e12:	6878      	ldr	r0, [r7, #4]
 8013e14:	f7ff ff23 	bl	8013c5e <_I2CWrite>
 8013e18:	60b8      	str	r0, [r7, #8]
	if (status_int != 0) {
 8013e1a:	68bb      	ldr	r3, [r7, #8]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d001      	beq.n	8013e24 <VL53L0X_WrWord+0x44>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8013e20:	23ec      	movs	r3, #236	; 0xec
 8013e22:	73fb      	strb	r3, [r7, #15]
	}
	VL53L0X_PutI2cBus();
	return Status;
 8013e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013e28:	4618      	mov	r0, r3
 8013e2a:	3710      	adds	r7, #16
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}
 8013e30:	20001a8c 	.word	0x20001a8c

08013e34 <VL53L0X_UpdateByte>:
	}
	VL53L0X_PutI2cBus();
	return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b084      	sub	sp, #16
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
 8013e3c:	4608      	mov	r0, r1
 8013e3e:	4611      	mov	r1, r2
 8013e40:	461a      	mov	r2, r3
 8013e42:	4603      	mov	r3, r0
 8013e44:	70fb      	strb	r3, [r7, #3]
 8013e46:	460b      	mov	r3, r1
 8013e48:	70bb      	strb	r3, [r7, #2]
 8013e4a:	4613      	mov	r3, r2
 8013e4c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	Status = VL53L0X_RdByte(Dev, index, &data);
 8013e52:	f107 020e 	add.w	r2, r7, #14
 8013e56:	78fb      	ldrb	r3, [r7, #3]
 8013e58:	4619      	mov	r1, r3
 8013e5a:	6878      	ldr	r0, [r7, #4]
 8013e5c:	f000 f81e 	bl	8013e9c <VL53L0X_RdByte>
 8013e60:	4603      	mov	r3, r0
 8013e62:	73fb      	strb	r3, [r7, #15]
	if (Status) {
 8013e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d110      	bne.n	8013e8e <VL53L0X_UpdateByte+0x5a>
		goto done;
	}
	data = (data & AndData) | OrData;
 8013e6c:	7bba      	ldrb	r2, [r7, #14]
 8013e6e:	78bb      	ldrb	r3, [r7, #2]
 8013e70:	4013      	ands	r3, r2
 8013e72:	b2da      	uxtb	r2, r3
 8013e74:	787b      	ldrb	r3, [r7, #1]
 8013e76:	4313      	orrs	r3, r2
 8013e78:	b2db      	uxtb	r3, r3
 8013e7a:	73bb      	strb	r3, [r7, #14]
	Status = VL53L0X_WrByte(Dev, index, data);
 8013e7c:	7bba      	ldrb	r2, [r7, #14]
 8013e7e:	78fb      	ldrb	r3, [r7, #3]
 8013e80:	4619      	mov	r1, r3
 8013e82:	6878      	ldr	r0, [r7, #4]
 8013e84:	f7ff ff88 	bl	8013d98 <VL53L0X_WrByte>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	73fb      	strb	r3, [r7, #15]
 8013e8c:	e000      	b.n	8013e90 <VL53L0X_UpdateByte+0x5c>
		goto done;
 8013e8e:	bf00      	nop
	done: return Status;
 8013e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013e94:	4618      	mov	r0, r3
 8013e96:	3710      	adds	r7, #16
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}

08013e9c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b086      	sub	sp, #24
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	60f8      	str	r0, [r7, #12]
 8013ea4:	460b      	mov	r3, r1
 8013ea6:	607a      	str	r2, [r7, #4]
 8013ea8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8013eaa:	2300      	movs	r3, #0
 8013eac:	75fb      	strb	r3, [r7, #23]
	int32_t status_int;

	VL53L0X_GetI2cBus();
	status_int = _I2CWrite(Dev, &index, 1);
 8013eae:	f107 030b 	add.w	r3, r7, #11
 8013eb2:	2201      	movs	r2, #1
 8013eb4:	4619      	mov	r1, r3
 8013eb6:	68f8      	ldr	r0, [r7, #12]
 8013eb8:	f7ff fed1 	bl	8013c5e <_I2CWrite>
 8013ebc:	6138      	str	r0, [r7, #16]
	if (status_int) {
 8013ebe:	693b      	ldr	r3, [r7, #16]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d002      	beq.n	8013eca <VL53L0X_RdByte+0x2e>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8013ec4:	23ec      	movs	r3, #236	; 0xec
 8013ec6:	75fb      	strb	r3, [r7, #23]
		goto done;
 8013ec8:	e00c      	b.n	8013ee4 <VL53L0X_RdByte+0x48>
	}
	status_int = _I2CRead(Dev, data, 1);
 8013eca:	2201      	movs	r2, #1
 8013ecc:	6879      	ldr	r1, [r7, #4]
 8013ece:	68f8      	ldr	r0, [r7, #12]
 8013ed0:	f7ff fee4 	bl	8013c9c <_I2CRead>
 8013ed4:	6138      	str	r0, [r7, #16]
	if (status_int != 0) {
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d002      	beq.n	8013ee2 <VL53L0X_RdByte+0x46>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8013edc:	23ec      	movs	r3, #236	; 0xec
 8013ede:	75fb      	strb	r3, [r7, #23]
 8013ee0:	e000      	b.n	8013ee4 <VL53L0X_RdByte+0x48>
	}
	done:
 8013ee2:	bf00      	nop
	VL53L0X_PutI2cBus();
	return Status;
 8013ee4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013ee8:	4618      	mov	r0, r3
 8013eea:	3718      	adds	r7, #24
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}

08013ef0 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b086      	sub	sp, #24
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	60f8      	str	r0, [r7, #12]
 8013ef8:	460b      	mov	r3, r1
 8013efa:	607a      	str	r2, [r7, #4]
 8013efc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8013efe:	2300      	movs	r3, #0
 8013f00:	75fb      	strb	r3, [r7, #23]
	int32_t status_int;

	VL53L0X_GetI2cBus();
	status_int = _I2CWrite(Dev, &index, 1);
 8013f02:	f107 030b 	add.w	r3, r7, #11
 8013f06:	2201      	movs	r2, #1
 8013f08:	4619      	mov	r1, r3
 8013f0a:	68f8      	ldr	r0, [r7, #12]
 8013f0c:	f7ff fea7 	bl	8013c5e <_I2CWrite>
 8013f10:	6138      	str	r0, [r7, #16]

	if (status_int) {
 8013f12:	693b      	ldr	r3, [r7, #16]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d002      	beq.n	8013f1e <VL53L0X_RdWord+0x2e>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8013f18:	23ec      	movs	r3, #236	; 0xec
 8013f1a:	75fb      	strb	r3, [r7, #23]
		goto done;
 8013f1c:	e017      	b.n	8013f4e <VL53L0X_RdWord+0x5e>
	}
	status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8013f1e:	2202      	movs	r2, #2
 8013f20:	490e      	ldr	r1, [pc, #56]	; (8013f5c <VL53L0X_RdWord+0x6c>)
 8013f22:	68f8      	ldr	r0, [r7, #12]
 8013f24:	f7ff feba 	bl	8013c9c <_I2CRead>
 8013f28:	6138      	str	r0, [r7, #16]
	if (status_int != 0) {
 8013f2a:	693b      	ldr	r3, [r7, #16]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d002      	beq.n	8013f36 <VL53L0X_RdWord+0x46>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8013f30:	23ec      	movs	r3, #236	; 0xec
 8013f32:	75fb      	strb	r3, [r7, #23]
		goto done;
 8013f34:	e00b      	b.n	8013f4e <VL53L0X_RdWord+0x5e>
	}

	*data = ((uint16_t) _I2CBuffer[0] << 8) + (uint16_t) _I2CBuffer[1];
 8013f36:	4b09      	ldr	r3, [pc, #36]	; (8013f5c <VL53L0X_RdWord+0x6c>)
 8013f38:	781b      	ldrb	r3, [r3, #0]
 8013f3a:	b29b      	uxth	r3, r3
 8013f3c:	021b      	lsls	r3, r3, #8
 8013f3e:	b29a      	uxth	r2, r3
 8013f40:	4b06      	ldr	r3, [pc, #24]	; (8013f5c <VL53L0X_RdWord+0x6c>)
 8013f42:	785b      	ldrb	r3, [r3, #1]
 8013f44:	b29b      	uxth	r3, r3
 8013f46:	4413      	add	r3, r2
 8013f48:	b29a      	uxth	r2, r3
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	801a      	strh	r2, [r3, #0]
	done:
	VL53L0X_PutI2cBus();
	return Status;
 8013f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013f52:	4618      	mov	r0, r3
 8013f54:	3718      	adds	r7, #24
 8013f56:	46bd      	mov	sp, r7
 8013f58:	bd80      	pop	{r7, pc}
 8013f5a:	bf00      	nop
 8013f5c:	20001a8c 	.word	0x20001a8c

08013f60 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b086      	sub	sp, #24
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	60f8      	str	r0, [r7, #12]
 8013f68:	460b      	mov	r3, r1
 8013f6a:	607a      	str	r2, [r7, #4]
 8013f6c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8013f6e:	2300      	movs	r3, #0
 8013f70:	75fb      	strb	r3, [r7, #23]
	int32_t status_int;

	VL53L0X_GetI2cBus();
	status_int = _I2CWrite(Dev, &index, 1);
 8013f72:	f107 030b 	add.w	r3, r7, #11
 8013f76:	2201      	movs	r2, #1
 8013f78:	4619      	mov	r1, r3
 8013f7a:	68f8      	ldr	r0, [r7, #12]
 8013f7c:	f7ff fe6f 	bl	8013c5e <_I2CWrite>
 8013f80:	6138      	str	r0, [r7, #16]
	if (status_int != 0) {
 8013f82:	693b      	ldr	r3, [r7, #16]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d002      	beq.n	8013f8e <VL53L0X_RdDWord+0x2e>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8013f88:	23ec      	movs	r3, #236	; 0xec
 8013f8a:	75fb      	strb	r3, [r7, #23]
		goto done;
 8013f8c:	e01b      	b.n	8013fc6 <VL53L0X_RdDWord+0x66>
	}
	status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8013f8e:	2204      	movs	r2, #4
 8013f90:	4910      	ldr	r1, [pc, #64]	; (8013fd4 <VL53L0X_RdDWord+0x74>)
 8013f92:	68f8      	ldr	r0, [r7, #12]
 8013f94:	f7ff fe82 	bl	8013c9c <_I2CRead>
 8013f98:	6138      	str	r0, [r7, #16]
	if (status_int != 0) {
 8013f9a:	693b      	ldr	r3, [r7, #16]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d002      	beq.n	8013fa6 <VL53L0X_RdDWord+0x46>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8013fa0:	23ec      	movs	r3, #236	; 0xec
 8013fa2:	75fb      	strb	r3, [r7, #23]
		goto done;
 8013fa4:	e00f      	b.n	8013fc6 <VL53L0X_RdDWord+0x66>
	}

	*data = ((uint32_t) _I2CBuffer[0] << 24) + ((uint32_t) _I2CBuffer[1] << 16) + ((uint32_t) _I2CBuffer[2] << 8) + (uint32_t) _I2CBuffer[3];
 8013fa6:	4b0b      	ldr	r3, [pc, #44]	; (8013fd4 <VL53L0X_RdDWord+0x74>)
 8013fa8:	781b      	ldrb	r3, [r3, #0]
 8013faa:	061a      	lsls	r2, r3, #24
 8013fac:	4b09      	ldr	r3, [pc, #36]	; (8013fd4 <VL53L0X_RdDWord+0x74>)
 8013fae:	785b      	ldrb	r3, [r3, #1]
 8013fb0:	041b      	lsls	r3, r3, #16
 8013fb2:	441a      	add	r2, r3
 8013fb4:	4b07      	ldr	r3, [pc, #28]	; (8013fd4 <VL53L0X_RdDWord+0x74>)
 8013fb6:	789b      	ldrb	r3, [r3, #2]
 8013fb8:	021b      	lsls	r3, r3, #8
 8013fba:	4413      	add	r3, r2
 8013fbc:	4a05      	ldr	r2, [pc, #20]	; (8013fd4 <VL53L0X_RdDWord+0x74>)
 8013fbe:	78d2      	ldrb	r2, [r2, #3]
 8013fc0:	441a      	add	r2, r3
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	601a      	str	r2, [r3, #0]

	done:
	VL53L0X_PutI2cBus();
	return Status;
 8013fc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013fca:	4618      	mov	r0, r3
 8013fcc:	3718      	adds	r7, #24
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	bd80      	pop	{r7, pc}
 8013fd2:	bf00      	nop
 8013fd4:	20001a8c 	.word	0x20001a8c

08013fd8 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b084      	sub	sp, #16
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	73fb      	strb	r3, [r7, #15]

	// do nothing
	VL53L0X_OsDelay();
 8013fe4:	2002      	movs	r0, #2
 8013fe6:	f7f4 f983 	bl	80082f0 <HAL_Delay>
	return status;
 8013fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	3710      	adds	r7, #16
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}

08013ff6 <__cxa_pure_virtual>:
 8013ff6:	b508      	push	{r3, lr}
 8013ff8:	f000 f80c 	bl	8014014 <_ZSt9terminatev>

08013ffc <_ZN10__cxxabiv111__terminateEPFvvE>:
 8013ffc:	b508      	push	{r3, lr}
 8013ffe:	4780      	blx	r0
 8014000:	f000 f80d 	bl	801401e <abort>

08014004 <_ZSt13get_terminatev>:
 8014004:	4b02      	ldr	r3, [pc, #8]	; (8014010 <_ZSt13get_terminatev+0xc>)
 8014006:	6818      	ldr	r0, [r3, #0]
 8014008:	f3bf 8f5b 	dmb	ish
 801400c:	4770      	bx	lr
 801400e:	bf00      	nop
 8014010:	200002e4 	.word	0x200002e4

08014014 <_ZSt9terminatev>:
 8014014:	b508      	push	{r3, lr}
 8014016:	f7ff fff5 	bl	8014004 <_ZSt13get_terminatev>
 801401a:	f7ff ffef 	bl	8013ffc <_ZN10__cxxabiv111__terminateEPFvvE>

0801401e <abort>:
 801401e:	b508      	push	{r3, lr}
 8014020:	2006      	movs	r0, #6
 8014022:	f000 f873 	bl	801410c <raise>
 8014026:	2001      	movs	r0, #1
 8014028:	f7f3 f9a4 	bl	8007374 <_exit>

0801402c <__errno>:
 801402c:	4b01      	ldr	r3, [pc, #4]	; (8014034 <__errno+0x8>)
 801402e:	6818      	ldr	r0, [r3, #0]
 8014030:	4770      	bx	lr
 8014032:	bf00      	nop
 8014034:	200002e8 	.word	0x200002e8

08014038 <__libc_init_array>:
 8014038:	b570      	push	{r4, r5, r6, lr}
 801403a:	4d0d      	ldr	r5, [pc, #52]	; (8014070 <__libc_init_array+0x38>)
 801403c:	4c0d      	ldr	r4, [pc, #52]	; (8014074 <__libc_init_array+0x3c>)
 801403e:	1b64      	subs	r4, r4, r5
 8014040:	10a4      	asrs	r4, r4, #2
 8014042:	2600      	movs	r6, #0
 8014044:	42a6      	cmp	r6, r4
 8014046:	d109      	bne.n	801405c <__libc_init_array+0x24>
 8014048:	4d0b      	ldr	r5, [pc, #44]	; (8014078 <__libc_init_array+0x40>)
 801404a:	4c0c      	ldr	r4, [pc, #48]	; (801407c <__libc_init_array+0x44>)
 801404c:	f000 f9b8 	bl	80143c0 <_init>
 8014050:	1b64      	subs	r4, r4, r5
 8014052:	10a4      	asrs	r4, r4, #2
 8014054:	2600      	movs	r6, #0
 8014056:	42a6      	cmp	r6, r4
 8014058:	d105      	bne.n	8014066 <__libc_init_array+0x2e>
 801405a:	bd70      	pop	{r4, r5, r6, pc}
 801405c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014060:	4798      	blx	r3
 8014062:	3601      	adds	r6, #1
 8014064:	e7ee      	b.n	8014044 <__libc_init_array+0xc>
 8014066:	f855 3b04 	ldr.w	r3, [r5], #4
 801406a:	4798      	blx	r3
 801406c:	3601      	adds	r6, #1
 801406e:	e7f2      	b.n	8014056 <__libc_init_array+0x1e>
 8014070:	080147f4 	.word	0x080147f4
 8014074:	080147f4 	.word	0x080147f4
 8014078:	080147f4 	.word	0x080147f4
 801407c:	080147fc 	.word	0x080147fc

08014080 <memcpy>:
 8014080:	440a      	add	r2, r1
 8014082:	4291      	cmp	r1, r2
 8014084:	f100 33ff 	add.w	r3, r0, #4294967295
 8014088:	d100      	bne.n	801408c <memcpy+0xc>
 801408a:	4770      	bx	lr
 801408c:	b510      	push	{r4, lr}
 801408e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014096:	4291      	cmp	r1, r2
 8014098:	d1f9      	bne.n	801408e <memcpy+0xe>
 801409a:	bd10      	pop	{r4, pc}

0801409c <memset>:
 801409c:	4402      	add	r2, r0
 801409e:	4603      	mov	r3, r0
 80140a0:	4293      	cmp	r3, r2
 80140a2:	d100      	bne.n	80140a6 <memset+0xa>
 80140a4:	4770      	bx	lr
 80140a6:	f803 1b01 	strb.w	r1, [r3], #1
 80140aa:	e7f9      	b.n	80140a0 <memset+0x4>

080140ac <realloc>:
 80140ac:	4b02      	ldr	r3, [pc, #8]	; (80140b8 <realloc+0xc>)
 80140ae:	460a      	mov	r2, r1
 80140b0:	4601      	mov	r1, r0
 80140b2:	6818      	ldr	r0, [r3, #0]
 80140b4:	f000 b8e2 	b.w	801427c <_realloc_r>
 80140b8:	200002e8 	.word	0x200002e8

080140bc <_raise_r>:
 80140bc:	291f      	cmp	r1, #31
 80140be:	b538      	push	{r3, r4, r5, lr}
 80140c0:	4604      	mov	r4, r0
 80140c2:	460d      	mov	r5, r1
 80140c4:	d904      	bls.n	80140d0 <_raise_r+0x14>
 80140c6:	2316      	movs	r3, #22
 80140c8:	6003      	str	r3, [r0, #0]
 80140ca:	f04f 30ff 	mov.w	r0, #4294967295
 80140ce:	bd38      	pop	{r3, r4, r5, pc}
 80140d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80140d2:	b112      	cbz	r2, 80140da <_raise_r+0x1e>
 80140d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80140d8:	b94b      	cbnz	r3, 80140ee <_raise_r+0x32>
 80140da:	4620      	mov	r0, r4
 80140dc:	f000 f830 	bl	8014140 <_getpid_r>
 80140e0:	462a      	mov	r2, r5
 80140e2:	4601      	mov	r1, r0
 80140e4:	4620      	mov	r0, r4
 80140e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80140ea:	f000 b817 	b.w	801411c <_kill_r>
 80140ee:	2b01      	cmp	r3, #1
 80140f0:	d00a      	beq.n	8014108 <_raise_r+0x4c>
 80140f2:	1c59      	adds	r1, r3, #1
 80140f4:	d103      	bne.n	80140fe <_raise_r+0x42>
 80140f6:	2316      	movs	r3, #22
 80140f8:	6003      	str	r3, [r0, #0]
 80140fa:	2001      	movs	r0, #1
 80140fc:	e7e7      	b.n	80140ce <_raise_r+0x12>
 80140fe:	2400      	movs	r4, #0
 8014100:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014104:	4628      	mov	r0, r5
 8014106:	4798      	blx	r3
 8014108:	2000      	movs	r0, #0
 801410a:	e7e0      	b.n	80140ce <_raise_r+0x12>

0801410c <raise>:
 801410c:	4b02      	ldr	r3, [pc, #8]	; (8014118 <raise+0xc>)
 801410e:	4601      	mov	r1, r0
 8014110:	6818      	ldr	r0, [r3, #0]
 8014112:	f7ff bfd3 	b.w	80140bc <_raise_r>
 8014116:	bf00      	nop
 8014118:	200002e8 	.word	0x200002e8

0801411c <_kill_r>:
 801411c:	b538      	push	{r3, r4, r5, lr}
 801411e:	4d07      	ldr	r5, [pc, #28]	; (801413c <_kill_r+0x20>)
 8014120:	2300      	movs	r3, #0
 8014122:	4604      	mov	r4, r0
 8014124:	4608      	mov	r0, r1
 8014126:	4611      	mov	r1, r2
 8014128:	602b      	str	r3, [r5, #0]
 801412a:	f7f3 f913 	bl	8007354 <_kill>
 801412e:	1c43      	adds	r3, r0, #1
 8014130:	d102      	bne.n	8014138 <_kill_r+0x1c>
 8014132:	682b      	ldr	r3, [r5, #0]
 8014134:	b103      	cbz	r3, 8014138 <_kill_r+0x1c>
 8014136:	6023      	str	r3, [r4, #0]
 8014138:	bd38      	pop	{r3, r4, r5, pc}
 801413a:	bf00      	nop
 801413c:	20001ad4 	.word	0x20001ad4

08014140 <_getpid_r>:
 8014140:	f7f3 b900 	b.w	8007344 <_getpid>

08014144 <strcpy>:
 8014144:	4603      	mov	r3, r0
 8014146:	f811 2b01 	ldrb.w	r2, [r1], #1
 801414a:	f803 2b01 	strb.w	r2, [r3], #1
 801414e:	2a00      	cmp	r2, #0
 8014150:	d1f9      	bne.n	8014146 <strcpy+0x2>
 8014152:	4770      	bx	lr

08014154 <sbrk_aligned>:
 8014154:	b570      	push	{r4, r5, r6, lr}
 8014156:	4e0e      	ldr	r6, [pc, #56]	; (8014190 <sbrk_aligned+0x3c>)
 8014158:	460c      	mov	r4, r1
 801415a:	6831      	ldr	r1, [r6, #0]
 801415c:	4605      	mov	r5, r0
 801415e:	b911      	cbnz	r1, 8014166 <sbrk_aligned+0x12>
 8014160:	f000 f8bc 	bl	80142dc <_sbrk_r>
 8014164:	6030      	str	r0, [r6, #0]
 8014166:	4621      	mov	r1, r4
 8014168:	4628      	mov	r0, r5
 801416a:	f000 f8b7 	bl	80142dc <_sbrk_r>
 801416e:	1c43      	adds	r3, r0, #1
 8014170:	d00a      	beq.n	8014188 <sbrk_aligned+0x34>
 8014172:	1cc4      	adds	r4, r0, #3
 8014174:	f024 0403 	bic.w	r4, r4, #3
 8014178:	42a0      	cmp	r0, r4
 801417a:	d007      	beq.n	801418c <sbrk_aligned+0x38>
 801417c:	1a21      	subs	r1, r4, r0
 801417e:	4628      	mov	r0, r5
 8014180:	f000 f8ac 	bl	80142dc <_sbrk_r>
 8014184:	3001      	adds	r0, #1
 8014186:	d101      	bne.n	801418c <sbrk_aligned+0x38>
 8014188:	f04f 34ff 	mov.w	r4, #4294967295
 801418c:	4620      	mov	r0, r4
 801418e:	bd70      	pop	{r4, r5, r6, pc}
 8014190:	20001ad0 	.word	0x20001ad0

08014194 <_malloc_r>:
 8014194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014198:	1ccd      	adds	r5, r1, #3
 801419a:	f025 0503 	bic.w	r5, r5, #3
 801419e:	3508      	adds	r5, #8
 80141a0:	2d0c      	cmp	r5, #12
 80141a2:	bf38      	it	cc
 80141a4:	250c      	movcc	r5, #12
 80141a6:	2d00      	cmp	r5, #0
 80141a8:	4607      	mov	r7, r0
 80141aa:	db01      	blt.n	80141b0 <_malloc_r+0x1c>
 80141ac:	42a9      	cmp	r1, r5
 80141ae:	d905      	bls.n	80141bc <_malloc_r+0x28>
 80141b0:	230c      	movs	r3, #12
 80141b2:	603b      	str	r3, [r7, #0]
 80141b4:	2600      	movs	r6, #0
 80141b6:	4630      	mov	r0, r6
 80141b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141bc:	4e2e      	ldr	r6, [pc, #184]	; (8014278 <_malloc_r+0xe4>)
 80141be:	f000 f89d 	bl	80142fc <__malloc_lock>
 80141c2:	6833      	ldr	r3, [r6, #0]
 80141c4:	461c      	mov	r4, r3
 80141c6:	bb34      	cbnz	r4, 8014216 <_malloc_r+0x82>
 80141c8:	4629      	mov	r1, r5
 80141ca:	4638      	mov	r0, r7
 80141cc:	f7ff ffc2 	bl	8014154 <sbrk_aligned>
 80141d0:	1c43      	adds	r3, r0, #1
 80141d2:	4604      	mov	r4, r0
 80141d4:	d14d      	bne.n	8014272 <_malloc_r+0xde>
 80141d6:	6834      	ldr	r4, [r6, #0]
 80141d8:	4626      	mov	r6, r4
 80141da:	2e00      	cmp	r6, #0
 80141dc:	d140      	bne.n	8014260 <_malloc_r+0xcc>
 80141de:	6823      	ldr	r3, [r4, #0]
 80141e0:	4631      	mov	r1, r6
 80141e2:	4638      	mov	r0, r7
 80141e4:	eb04 0803 	add.w	r8, r4, r3
 80141e8:	f000 f878 	bl	80142dc <_sbrk_r>
 80141ec:	4580      	cmp	r8, r0
 80141ee:	d13a      	bne.n	8014266 <_malloc_r+0xd2>
 80141f0:	6821      	ldr	r1, [r4, #0]
 80141f2:	3503      	adds	r5, #3
 80141f4:	1a6d      	subs	r5, r5, r1
 80141f6:	f025 0503 	bic.w	r5, r5, #3
 80141fa:	3508      	adds	r5, #8
 80141fc:	2d0c      	cmp	r5, #12
 80141fe:	bf38      	it	cc
 8014200:	250c      	movcc	r5, #12
 8014202:	4629      	mov	r1, r5
 8014204:	4638      	mov	r0, r7
 8014206:	f7ff ffa5 	bl	8014154 <sbrk_aligned>
 801420a:	3001      	adds	r0, #1
 801420c:	d02b      	beq.n	8014266 <_malloc_r+0xd2>
 801420e:	6823      	ldr	r3, [r4, #0]
 8014210:	442b      	add	r3, r5
 8014212:	6023      	str	r3, [r4, #0]
 8014214:	e00e      	b.n	8014234 <_malloc_r+0xa0>
 8014216:	6822      	ldr	r2, [r4, #0]
 8014218:	1b52      	subs	r2, r2, r5
 801421a:	d41e      	bmi.n	801425a <_malloc_r+0xc6>
 801421c:	2a0b      	cmp	r2, #11
 801421e:	d916      	bls.n	801424e <_malloc_r+0xba>
 8014220:	1961      	adds	r1, r4, r5
 8014222:	42a3      	cmp	r3, r4
 8014224:	6025      	str	r5, [r4, #0]
 8014226:	bf18      	it	ne
 8014228:	6059      	strne	r1, [r3, #4]
 801422a:	6863      	ldr	r3, [r4, #4]
 801422c:	bf08      	it	eq
 801422e:	6031      	streq	r1, [r6, #0]
 8014230:	5162      	str	r2, [r4, r5]
 8014232:	604b      	str	r3, [r1, #4]
 8014234:	4638      	mov	r0, r7
 8014236:	f104 060b 	add.w	r6, r4, #11
 801423a:	f000 f865 	bl	8014308 <__malloc_unlock>
 801423e:	f026 0607 	bic.w	r6, r6, #7
 8014242:	1d23      	adds	r3, r4, #4
 8014244:	1af2      	subs	r2, r6, r3
 8014246:	d0b6      	beq.n	80141b6 <_malloc_r+0x22>
 8014248:	1b9b      	subs	r3, r3, r6
 801424a:	50a3      	str	r3, [r4, r2]
 801424c:	e7b3      	b.n	80141b6 <_malloc_r+0x22>
 801424e:	6862      	ldr	r2, [r4, #4]
 8014250:	42a3      	cmp	r3, r4
 8014252:	bf0c      	ite	eq
 8014254:	6032      	streq	r2, [r6, #0]
 8014256:	605a      	strne	r2, [r3, #4]
 8014258:	e7ec      	b.n	8014234 <_malloc_r+0xa0>
 801425a:	4623      	mov	r3, r4
 801425c:	6864      	ldr	r4, [r4, #4]
 801425e:	e7b2      	b.n	80141c6 <_malloc_r+0x32>
 8014260:	4634      	mov	r4, r6
 8014262:	6876      	ldr	r6, [r6, #4]
 8014264:	e7b9      	b.n	80141da <_malloc_r+0x46>
 8014266:	230c      	movs	r3, #12
 8014268:	603b      	str	r3, [r7, #0]
 801426a:	4638      	mov	r0, r7
 801426c:	f000 f84c 	bl	8014308 <__malloc_unlock>
 8014270:	e7a1      	b.n	80141b6 <_malloc_r+0x22>
 8014272:	6025      	str	r5, [r4, #0]
 8014274:	e7de      	b.n	8014234 <_malloc_r+0xa0>
 8014276:	bf00      	nop
 8014278:	20001acc 	.word	0x20001acc

0801427c <_realloc_r>:
 801427c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014280:	4680      	mov	r8, r0
 8014282:	4614      	mov	r4, r2
 8014284:	460e      	mov	r6, r1
 8014286:	b921      	cbnz	r1, 8014292 <_realloc_r+0x16>
 8014288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801428c:	4611      	mov	r1, r2
 801428e:	f7ff bf81 	b.w	8014194 <_malloc_r>
 8014292:	b92a      	cbnz	r2, 80142a0 <_realloc_r+0x24>
 8014294:	f000 f83e 	bl	8014314 <_free_r>
 8014298:	4625      	mov	r5, r4
 801429a:	4628      	mov	r0, r5
 801429c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142a0:	f000 f884 	bl	80143ac <_malloc_usable_size_r>
 80142a4:	4284      	cmp	r4, r0
 80142a6:	4607      	mov	r7, r0
 80142a8:	d802      	bhi.n	80142b0 <_realloc_r+0x34>
 80142aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80142ae:	d812      	bhi.n	80142d6 <_realloc_r+0x5a>
 80142b0:	4621      	mov	r1, r4
 80142b2:	4640      	mov	r0, r8
 80142b4:	f7ff ff6e 	bl	8014194 <_malloc_r>
 80142b8:	4605      	mov	r5, r0
 80142ba:	2800      	cmp	r0, #0
 80142bc:	d0ed      	beq.n	801429a <_realloc_r+0x1e>
 80142be:	42bc      	cmp	r4, r7
 80142c0:	4622      	mov	r2, r4
 80142c2:	4631      	mov	r1, r6
 80142c4:	bf28      	it	cs
 80142c6:	463a      	movcs	r2, r7
 80142c8:	f7ff feda 	bl	8014080 <memcpy>
 80142cc:	4631      	mov	r1, r6
 80142ce:	4640      	mov	r0, r8
 80142d0:	f000 f820 	bl	8014314 <_free_r>
 80142d4:	e7e1      	b.n	801429a <_realloc_r+0x1e>
 80142d6:	4635      	mov	r5, r6
 80142d8:	e7df      	b.n	801429a <_realloc_r+0x1e>
	...

080142dc <_sbrk_r>:
 80142dc:	b538      	push	{r3, r4, r5, lr}
 80142de:	4d06      	ldr	r5, [pc, #24]	; (80142f8 <_sbrk_r+0x1c>)
 80142e0:	2300      	movs	r3, #0
 80142e2:	4604      	mov	r4, r0
 80142e4:	4608      	mov	r0, r1
 80142e6:	602b      	str	r3, [r5, #0]
 80142e8:	f7f3 f84e 	bl	8007388 <_sbrk>
 80142ec:	1c43      	adds	r3, r0, #1
 80142ee:	d102      	bne.n	80142f6 <_sbrk_r+0x1a>
 80142f0:	682b      	ldr	r3, [r5, #0]
 80142f2:	b103      	cbz	r3, 80142f6 <_sbrk_r+0x1a>
 80142f4:	6023      	str	r3, [r4, #0]
 80142f6:	bd38      	pop	{r3, r4, r5, pc}
 80142f8:	20001ad4 	.word	0x20001ad4

080142fc <__malloc_lock>:
 80142fc:	4801      	ldr	r0, [pc, #4]	; (8014304 <__malloc_lock+0x8>)
 80142fe:	f000 b85d 	b.w	80143bc <__retarget_lock_acquire_recursive>
 8014302:	bf00      	nop
 8014304:	20001ad8 	.word	0x20001ad8

08014308 <__malloc_unlock>:
 8014308:	4801      	ldr	r0, [pc, #4]	; (8014310 <__malloc_unlock+0x8>)
 801430a:	f000 b858 	b.w	80143be <__retarget_lock_release_recursive>
 801430e:	bf00      	nop
 8014310:	20001ad8 	.word	0x20001ad8

08014314 <_free_r>:
 8014314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014316:	2900      	cmp	r1, #0
 8014318:	d044      	beq.n	80143a4 <_free_r+0x90>
 801431a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801431e:	9001      	str	r0, [sp, #4]
 8014320:	2b00      	cmp	r3, #0
 8014322:	f1a1 0404 	sub.w	r4, r1, #4
 8014326:	bfb8      	it	lt
 8014328:	18e4      	addlt	r4, r4, r3
 801432a:	f7ff ffe7 	bl	80142fc <__malloc_lock>
 801432e:	4a1e      	ldr	r2, [pc, #120]	; (80143a8 <_free_r+0x94>)
 8014330:	9801      	ldr	r0, [sp, #4]
 8014332:	6813      	ldr	r3, [r2, #0]
 8014334:	b933      	cbnz	r3, 8014344 <_free_r+0x30>
 8014336:	6063      	str	r3, [r4, #4]
 8014338:	6014      	str	r4, [r2, #0]
 801433a:	b003      	add	sp, #12
 801433c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014340:	f7ff bfe2 	b.w	8014308 <__malloc_unlock>
 8014344:	42a3      	cmp	r3, r4
 8014346:	d908      	bls.n	801435a <_free_r+0x46>
 8014348:	6825      	ldr	r5, [r4, #0]
 801434a:	1961      	adds	r1, r4, r5
 801434c:	428b      	cmp	r3, r1
 801434e:	bf01      	itttt	eq
 8014350:	6819      	ldreq	r1, [r3, #0]
 8014352:	685b      	ldreq	r3, [r3, #4]
 8014354:	1949      	addeq	r1, r1, r5
 8014356:	6021      	streq	r1, [r4, #0]
 8014358:	e7ed      	b.n	8014336 <_free_r+0x22>
 801435a:	461a      	mov	r2, r3
 801435c:	685b      	ldr	r3, [r3, #4]
 801435e:	b10b      	cbz	r3, 8014364 <_free_r+0x50>
 8014360:	42a3      	cmp	r3, r4
 8014362:	d9fa      	bls.n	801435a <_free_r+0x46>
 8014364:	6811      	ldr	r1, [r2, #0]
 8014366:	1855      	adds	r5, r2, r1
 8014368:	42a5      	cmp	r5, r4
 801436a:	d10b      	bne.n	8014384 <_free_r+0x70>
 801436c:	6824      	ldr	r4, [r4, #0]
 801436e:	4421      	add	r1, r4
 8014370:	1854      	adds	r4, r2, r1
 8014372:	42a3      	cmp	r3, r4
 8014374:	6011      	str	r1, [r2, #0]
 8014376:	d1e0      	bne.n	801433a <_free_r+0x26>
 8014378:	681c      	ldr	r4, [r3, #0]
 801437a:	685b      	ldr	r3, [r3, #4]
 801437c:	6053      	str	r3, [r2, #4]
 801437e:	4421      	add	r1, r4
 8014380:	6011      	str	r1, [r2, #0]
 8014382:	e7da      	b.n	801433a <_free_r+0x26>
 8014384:	d902      	bls.n	801438c <_free_r+0x78>
 8014386:	230c      	movs	r3, #12
 8014388:	6003      	str	r3, [r0, #0]
 801438a:	e7d6      	b.n	801433a <_free_r+0x26>
 801438c:	6825      	ldr	r5, [r4, #0]
 801438e:	1961      	adds	r1, r4, r5
 8014390:	428b      	cmp	r3, r1
 8014392:	bf04      	itt	eq
 8014394:	6819      	ldreq	r1, [r3, #0]
 8014396:	685b      	ldreq	r3, [r3, #4]
 8014398:	6063      	str	r3, [r4, #4]
 801439a:	bf04      	itt	eq
 801439c:	1949      	addeq	r1, r1, r5
 801439e:	6021      	streq	r1, [r4, #0]
 80143a0:	6054      	str	r4, [r2, #4]
 80143a2:	e7ca      	b.n	801433a <_free_r+0x26>
 80143a4:	b003      	add	sp, #12
 80143a6:	bd30      	pop	{r4, r5, pc}
 80143a8:	20001acc 	.word	0x20001acc

080143ac <_malloc_usable_size_r>:
 80143ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143b0:	1f18      	subs	r0, r3, #4
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	bfbc      	itt	lt
 80143b6:	580b      	ldrlt	r3, [r1, r0]
 80143b8:	18c0      	addlt	r0, r0, r3
 80143ba:	4770      	bx	lr

080143bc <__retarget_lock_acquire_recursive>:
 80143bc:	4770      	bx	lr

080143be <__retarget_lock_release_recursive>:
 80143be:	4770      	bx	lr

080143c0 <_init>:
 80143c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143c2:	bf00      	nop
 80143c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143c6:	bc08      	pop	{r3}
 80143c8:	469e      	mov	lr, r3
 80143ca:	4770      	bx	lr

080143cc <_fini>:
 80143cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ce:	bf00      	nop
 80143d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143d2:	bc08      	pop	{r3}
 80143d4:	469e      	mov	lr, r3
 80143d6:	4770      	bx	lr
