
0212.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a390  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  0800a558  0800a558  0001a558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8e8  0800a8e8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8e8  0800a8e8  0001a8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8f0  0800a8f0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a8f0  0800a8f0  0001a8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8f8  0800a8f8  0001a8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a8fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ee8  2000007c  0800a978  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f64  0800a978  00020f64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f28d  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d25  00000000  00000000  0003f339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00043060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001180  00000000  00000000  00044340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271ac  00000000  00000000  000454c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019322  00000000  00000000  0006c66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec3b5  00000000  00000000  0008598e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00171d43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005344  00000000  00000000  00171d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000007c 	.word	0x2000007c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800a540 	.word	0x0800a540

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000080 	.word	0x20000080
 8000204:	0800a540 	.word	0x0800a540

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b974 	b.w	8000d04 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468e      	mov	lr, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14d      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4694      	mov	ip, r2
 8000a46:	d969      	bls.n	8000b1c <__udivmoddi4+0xe8>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b152      	cbz	r2, 8000a64 <__udivmoddi4+0x30>
 8000a4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a52:	f1c2 0120 	rsb	r1, r2, #32
 8000a56:	fa20 f101 	lsr.w	r1, r0, r1
 8000a5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a62:	4094      	lsls	r4, r2
 8000a64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a68:	0c21      	lsrs	r1, r4, #16
 8000a6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a6e:	fa1f f78c 	uxth.w	r7, ip
 8000a72:	fb08 e316 	mls	r3, r8, r6, lr
 8000a76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a7a:	fb06 f107 	mul.w	r1, r6, r7
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8a:	f080 811f 	bcs.w	8000ccc <__udivmoddi4+0x298>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 811c 	bls.w	8000ccc <__udivmoddi4+0x298>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa0:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa8:	fb00 f707 	mul.w	r7, r0, r7
 8000aac:	42a7      	cmp	r7, r4
 8000aae:	d90a      	bls.n	8000ac6 <__udivmoddi4+0x92>
 8000ab0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab8:	f080 810a 	bcs.w	8000cd0 <__udivmoddi4+0x29c>
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	f240 8107 	bls.w	8000cd0 <__udivmoddi4+0x29c>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aca:	1be4      	subs	r4, r4, r7
 8000acc:	2600      	movs	r6, #0
 8000ace:	b11d      	cbz	r5, 8000ad8 <__udivmoddi4+0xa4>
 8000ad0:	40d4      	lsrs	r4, r2
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d909      	bls.n	8000af6 <__udivmoddi4+0xc2>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	f000 80ef 	beq.w	8000cc6 <__udivmoddi4+0x292>
 8000ae8:	2600      	movs	r6, #0
 8000aea:	e9c5 0100 	strd	r0, r1, [r5]
 8000aee:	4630      	mov	r0, r6
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	fab3 f683 	clz	r6, r3
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d14a      	bne.n	8000b94 <__udivmoddi4+0x160>
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xd4>
 8000b02:	4282      	cmp	r2, r0
 8000b04:	f200 80f9 	bhi.w	8000cfa <__udivmoddi4+0x2c6>
 8000b08:	1a84      	subs	r4, r0, r2
 8000b0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	469e      	mov	lr, r3
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d0e0      	beq.n	8000ad8 <__udivmoddi4+0xa4>
 8000b16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b1a:	e7dd      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000b1c:	b902      	cbnz	r2, 8000b20 <__udivmoddi4+0xec>
 8000b1e:	deff      	udf	#255	; 0xff
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	f040 8092 	bne.w	8000c4e <__udivmoddi4+0x21a>
 8000b2a:	eba1 010c 	sub.w	r1, r1, ip
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2601      	movs	r6, #1
 8000b38:	0c20      	lsrs	r0, r4, #16
 8000b3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b46:	fb0e f003 	mul.w	r0, lr, r3
 8000b4a:	4288      	cmp	r0, r1
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x12c>
 8000b4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x12a>
 8000b58:	4288      	cmp	r0, r1
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2c0>
 8000b5e:	4643      	mov	r3, r8
 8000b60:	1a09      	subs	r1, r1, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b68:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x156>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x154>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2ca>
 8000b88:	4608      	mov	r0, r1
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b92:	e79c      	b.n	8000ace <__udivmoddi4+0x9a>
 8000b94:	f1c6 0720 	rsb	r7, r6, #32
 8000b98:	40b3      	lsls	r3, r6
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ba6:	fa01 f306 	lsl.w	r3, r1, r6
 8000baa:	431c      	orrs	r4, r3
 8000bac:	40f9      	lsrs	r1, r7
 8000bae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bba:	0c20      	lsrs	r0, r4, #16
 8000bbc:	fa1f fe8c 	uxth.w	lr, ip
 8000bc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bcc:	4288      	cmp	r0, r1
 8000bce:	fa02 f206 	lsl.w	r2, r2, r6
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b8>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4461      	add	r1, ip
 8000bec:	1a09      	subs	r1, r1, r0
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c00:	458e      	cmp	lr, r1
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1e2>
 8000c04:	eb1c 0101 	adds.w	r1, ip, r1
 8000c08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c0e:	458e      	cmp	lr, r1
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4461      	add	r1, ip
 8000c16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c1e:	eba1 010e 	sub.w	r1, r1, lr
 8000c22:	42a1      	cmp	r1, r4
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46a6      	mov	lr, r4
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c2c:	b15d      	cbz	r5, 8000c46 <__udivmoddi4+0x212>
 8000c2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c32:	eb61 010e 	sbc.w	r1, r1, lr
 8000c36:	fa01 f707 	lsl.w	r7, r1, r7
 8000c3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c3e:	40f1      	lsrs	r1, r6
 8000c40:	431f      	orrs	r7, r3
 8000c42:	e9c5 7100 	strd	r7, r1, [r5]
 8000c46:	2600      	movs	r6, #0
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	f1c2 0320 	rsb	r3, r2, #32
 8000c52:	40d8      	lsrs	r0, r3
 8000c54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c58:	fa21 f303 	lsr.w	r3, r1, r3
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4301      	orrs	r1, r0
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c70:	0c0b      	lsrs	r3, r1, #16
 8000c72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c76:	fb00 f60e 	mul.w	r6, r0, lr
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x260>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b8>
 8000c8c:	429e      	cmp	r6, r3
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b8>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4463      	add	r3, ip
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	b289      	uxth	r1, r1
 8000c98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x28a>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cba:	3e02      	subs	r6, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	1ac9      	subs	r1, r1, r3
 8000cc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0x104>
 8000cc6:	462e      	mov	r6, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e705      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e3      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6f8      	b.n	8000ac6 <__udivmoddi4+0x92>
 8000cd4:	454b      	cmp	r3, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f8>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f8>
 8000ce4:	4646      	mov	r6, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x28a>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1e2>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b8>
 8000cf4:	3b02      	subs	r3, #2
 8000cf6:	4461      	add	r1, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x12c>
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	e709      	b.n	8000b12 <__udivmoddi4+0xde>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x156>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	0a5a      	lsrs	r2, r3, #9
 8000d18:	490f      	ldr	r1, [pc, #60]	; (8000d58 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000d1a:	fba1 1202 	umull	r1, r2, r1, r2
 8000d1e:	09d2      	lsrs	r2, r2, #7
 8000d20:	490e      	ldr	r1, [pc, #56]	; (8000d5c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000d22:	fb01 f202 	mul.w	r2, r1, r2
 8000d26:	1a9b      	subs	r3, r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	0a5b      	lsrs	r3, r3, #9
 8000d30:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000d32:	fba2 2303 	umull	r2, r3, r2, r3
 8000d36:	09db      	lsrs	r3, r3, #7
 8000d38:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	441a      	add	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	601a      	str	r2, [r3, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	00044b83 	.word	0x00044b83
 8000d5c:	3b9aca00 	.word	0x3b9aca00

08000d60 <UART_Send>:
#include "gpio.h"
#include <math.h>

extern UART_HandleTypeDef huart3;
int Checksum_Calc, count = 0;
void UART_Send(uint8_t u8_data) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
	uint8_t *u8_pointer = &u8_data;
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, u8_pointer, 1, 100);
 8000d6e:	2364      	movs	r3, #100	; 0x64
 8000d70:	2201      	movs	r2, #1
 8000d72:	68f9      	ldr	r1, [r7, #12]
 8000d74:	4806      	ldr	r0, [pc, #24]	; (8000d90 <UART_Send+0x30>)
 8000d76:	f007 ff77 	bl	8008c68 <HAL_UART_Transmit>

	Checksum_Calc += u8_data;
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <UART_Send+0x34>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <UART_Send+0x34>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000d8c 	.word	0x20000d8c
 8000d94:	20000098 	.word	0x20000098

08000d98 <UART_Send_SetMotorPosition>:

void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position,
		uint16_t Time) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
 8000da2:	460b      	mov	r3, r1
 8000da4:	80bb      	strh	r3, [r7, #4]
 8000da6:	4613      	mov	r3, r2
 8000da8:	807b      	strh	r3, [r7, #2]
	Checksum_Calc = 0;
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <UART_Send_SetMotorPosition+0x84>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
	UART_Send(0x80 + motorId);    //header mark & broadcast ID
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	3b80      	subs	r3, #128	; 0x80
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ffd1 	bl	8000d60 <UART_Send>
	UART_Send(0x83);              //header mark & command code
 8000dbe:	2083      	movs	r0, #131	; 0x83
 8000dc0:	f7ff ffce 	bl	8000d60 <UART_Send>
	UART_Send(0x05);              //total data length
 8000dc4:	2005      	movs	r0, #5
 8000dc6:	f7ff ffcb 	bl	8000d60 <UART_Send>
	UART_Send((Position / 256) & 0x7F);  //Servo Pos_H
 8000dca:	88bb      	ldrh	r3, [r7, #4]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ffc1 	bl	8000d60 <UART_Send>
	UART_Send(Position % 256);           //Servo Pos_L
 8000dde:	88bb      	ldrh	r3, [r7, #4]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ffbc 	bl	8000d60 <UART_Send>
	UART_Send((Time / 256) & 0x7F); //Servo Time_H
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	0a1b      	lsrs	r3, r3, #8
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ffb2 	bl	8000d60 <UART_Send>
	UART_Send(Time % 256);          //Servo Time_L
 8000dfc:	887b      	ldrh	r3, [r7, #2]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ffad 	bl	8000d60 <UART_Send>
	UART_Send(Checksum_Calc);     //data length (one servo with time and speed)
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <UART_Send_SetMotorPosition+0x84>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ffa7 	bl	8000d60 <UART_Send>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000098 	.word	0x20000098

08000e20 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e26:	463b      	mov	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e32:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e34:	4a2f      	ldr	r2, [pc, #188]	; (8000ef4 <MX_ADC1_Init+0xd4>)
 8000e36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e38:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e40:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e46:	4b2a      	ldr	r3, [pc, #168]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e4c:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e52:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5a:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e60:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e62:	4a25      	ldr	r2, [pc, #148]	; (8000ef8 <MX_ADC1_Init+0xd8>)
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e66:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000e6c:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e6e:	2203      	movs	r2, #3
 8000e70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e80:	481b      	ldr	r0, [pc, #108]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e82:	f004 ff05 	bl	8005c90 <HAL_ADC_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e8c:	f001 fa66 	bl	800235c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e90:	2305      	movs	r3, #5
 8000e92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000ea2:	f004 ff39 	bl	8005d18 <HAL_ADC_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000eac:	f001 fa56 	bl	800235c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000eb0:	2306      	movs	r3, #6
 8000eb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000ebe:	f004 ff2b 	bl	8005d18 <HAL_ADC_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ec8:	f001 fa48 	bl	800235c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ecc:	2307      	movs	r3, #7
 8000ece:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000eda:	f004 ff1d 	bl	8005d18 <HAL_ADC_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000ee4:	f001 fa3a 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2000009c 	.word	0x2000009c
 8000ef4:	40012000 	.word	0x40012000
 8000ef8:	0f000001 	.word	0x0f000001

08000efc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a2f      	ldr	r2, [pc, #188]	; (8000fd8 <HAL_ADC_MspInit+0xdc>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d157      	bne.n	8000fce <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a2d      	ldr	r2, [pc, #180]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a26      	ldr	r2, [pc, #152]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f56:	23e0      	movs	r3, #224	; 0xe0
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	481d      	ldr	r0, [pc, #116]	; (8000fe0 <HAL_ADC_MspInit+0xe4>)
 8000f6a:	f005 fea7 	bl	8006cbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f70:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <HAL_ADC_MspInit+0xec>)
 8000f72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f94:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fa4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fb2:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000fb4:	f005 fa22 	bl	80063fc <HAL_DMA_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000fbe:	f001 f9cd 	bl	800235c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000fc6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40012000 	.word	0x40012000
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	200000e4 	.word	0x200000e4
 8000fe8:	40026410 	.word	0x40026410

08000fec <suck_the_cake>:
extern char hole[4];
extern int arr;
extern short int mission_array[5];
extern int unsuck_delay, suck_delay, servo_delay;
extern int unsuck_delay_temp, suck_delay_temp, servo_delay_temp;
void suck_the_cake(int servonum, int order) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]

	while (1) {
		if (step1 == 0) {
 8000ff6:	4b35      	ldr	r3, [pc, #212]	; (80010cc <suck_the_cake+0xe0>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d000      	beq.n	8001000 <suck_the_cake+0x14>
 8000ffe:	e7fa      	b.n	8000ff6 <suck_the_cake+0xa>
			break;
 8001000:	bf00      	nop
		}

	}
	if (servonum == 1) {
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d110      	bne.n	800102a <suck_the_cake+0x3e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 20000 * 255); // open pump1
 8001008:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <suck_the_cake+0xe4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a31      	ldr	r2, [pc, #196]	; (80010d4 <suck_the_cake+0xe8>)
 800100e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);        // close valve1
 8001010:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <suck_the_cake+0xe4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2200      	movs	r2, #0
 8001016:	639a      	str	r2, [r3, #56]	; 0x38
		suck1 = 1;
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <suck_the_cake+0xec>)
 800101a:	2201      	movs	r2, #1
 800101c:	601a      	str	r2, [r3, #0]
		suck_temp++;
 800101e:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <suck_the_cake+0xf0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	4a2d      	ldr	r2, [pc, #180]	; (80010dc <suck_the_cake+0xf0>)
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	e026      	b.n	8001078 <suck_the_cake+0x8c>
	}
	else if (servonum == 4) {
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b04      	cmp	r3, #4
 800102e:	d110      	bne.n	8001052 <suck_the_cake+0x66>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 20000 * 255); // open pump4
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <suck_the_cake+0xf4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a27      	ldr	r2, [pc, #156]	; (80010d4 <suck_the_cake+0xe8>)
 8001036:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);         // close valve4
 8001038:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <suck_the_cake+0xf4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	639a      	str	r2, [r3, #56]	; 0x38
		suck4 = 1;
 8001040:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <suck_the_cake+0xf8>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]
		suck_temp++;
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <suck_the_cake+0xf0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	4a23      	ldr	r2, [pc, #140]	; (80010dc <suck_the_cake+0xf0>)
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	e012      	b.n	8001078 <suck_the_cake+0x8c>
	}
	else if (servonum == 3) {
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b03      	cmp	r3, #3
 8001056:	d10f      	bne.n	8001078 <suck_the_cake+0x8c>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 20000 * 255); // open pump3
 8001058:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <suck_the_cake+0xf4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <suck_the_cake+0xe8>)
 800105e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);         // close valve3
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <suck_the_cake+0xf4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2200      	movs	r2, #0
 8001066:	641a      	str	r2, [r3, #64]	; 0x40
		suck3 = 1;
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <suck_the_cake+0xfc>)
 800106a:	2201      	movs	r2, #1
 800106c:	601a      	str	r2, [r3, #0]
		suck_temp++;
 800106e:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <suck_the_cake+0xf0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	4a19      	ldr	r2, [pc, #100]	; (80010dc <suck_the_cake+0xf0>)
 8001076:	6013      	str	r3, [r2, #0]
	}
	if (order == 1)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d109      	bne.n	8001092 <suck_the_cake+0xa6>
		UART_Send_SetMotorPosition(servonum, 1780, 500); // suck the top cake
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	b29b      	uxth	r3, r3
 8001082:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001086:	f240 61f4 	movw	r1, #1780	; 0x6f4
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fe84 	bl	8000d98 <UART_Send_SetMotorPosition>
	else if (order == 2)
		UART_Send_SetMotorPosition(servonum, 1880, 500); // suck the middle cake
	else if (order == 3)
		UART_Send_SetMotorPosition(servonum, 2080, 500); // suck the bottom cake

}
 8001090:	e018      	b.n	80010c4 <suck_the_cake+0xd8>
	else if (order == 2)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d109      	bne.n	80010ac <suck_the_cake+0xc0>
		UART_Send_SetMotorPosition(servonum, 1880, 500); // suck the middle cake
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	b29b      	uxth	r3, r3
 800109c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010a0:	f44f 61eb 	mov.w	r1, #1880	; 0x758
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fe77 	bl	8000d98 <UART_Send_SetMotorPosition>
}
 80010aa:	e00b      	b.n	80010c4 <suck_the_cake+0xd8>
	else if (order == 3)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d108      	bne.n	80010c4 <suck_the_cake+0xd8>
		UART_Send_SetMotorPosition(servonum, 2080, 500); // suck the bottom cake
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010ba:	f44f 6102 	mov.w	r1, #2080	; 0x820
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fe6a 	bl	8000d98 <UART_Send_SetMotorPosition>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000aec 	.word	0x20000aec
 80010d0:	20000b9c 	.word	0x20000b9c
 80010d4:	004dd1e0 	.word	0x004dd1e0
 80010d8:	20000b04 	.word	0x20000b04
 80010dc:	20000b1c 	.word	0x20000b1c
 80010e0:	20000be4 	.word	0x20000be4
 80010e4:	20000b08 	.word	0x20000b08
 80010e8:	20000b0c 	.word	0x20000b0c

080010ec <press_sensor_feedback>:
void press_sensor_feedback() {          // wait for press_sensor feedback
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

	if (suck_temp != 0) {
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <press_sensor_feedback+0x60>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d014      	beq.n	8001122 <press_sensor_feedback+0x36>
		suck_delay_temp = -1;
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <press_sensor_feedback+0x64>)
 80010fa:	f04f 32ff 	mov.w	r2, #4294967295
 80010fe:	601a      	str	r2, [r3, #0]
		while (1) {
			if (suck_temp == 0) {
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <press_sensor_feedback+0x60>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1fb      	bne.n	8001100 <press_sensor_feedback+0x14>
				if (suck_delay_temp == -1)
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <press_sensor_feedback+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001110:	d102      	bne.n	8001118 <press_sensor_feedback+0x2c>
					suck_delay_temp = 1;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <press_sensor_feedback+0x64>)
 8001114:	2201      	movs	r2, #1
 8001116:	601a      	str	r2, [r3, #0]
				if (suck_delay_temp == 0)
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <press_sensor_feedback+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00d      	beq.n	800113c <press_sensor_feedback+0x50>
			if (suck_temp == 0) {
 8001120:	e7ee      	b.n	8001100 <press_sensor_feedback+0x14>
					break;
			}
		}
	}
	else if (unsuck_temp != 0) {
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <press_sensor_feedback+0x68>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00b      	beq.n	8001142 <press_sensor_feedback+0x56>
		while (1) {
			if (unsuck_temp == 0) {
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <press_sensor_feedback+0x68>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1fb      	bne.n	800112a <press_sensor_feedback+0x3e>
				if (unsuck_delay_temp == 0)
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <press_sensor_feedback+0x6c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <press_sensor_feedback+0x54>
			if (unsuck_temp == 0) {
 800113a:	e7f6      	b.n	800112a <press_sensor_feedback+0x3e>
					break;
 800113c:	bf00      	nop
 800113e:	e000      	b.n	8001142 <press_sensor_feedback+0x56>
					break;
 8001140:	bf00      	nop
			}
		}
	}
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	20000b1c 	.word	0x20000b1c
 8001150:	20000b80 	.word	0x20000b80
 8001154:	20000b20 	.word	0x20000b20
 8001158:	20000b7c 	.word	0x20000b7c

0800115c <unsuck_the_cake>:
void unsuck_the_cake(int servonum, int order) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]

	while (1) {
		if (step1 == 0)
 8001166:	4b35      	ldr	r3, [pc, #212]	; (800123c <unsuck_the_cake+0xe0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d000      	beq.n	8001170 <unsuck_the_cake+0x14>
 800116e:	e7fa      	b.n	8001166 <unsuck_the_cake+0xa>
			break;
 8001170:	bf00      	nop
	}

	if (order == 1)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d109      	bne.n	800118c <unsuck_the_cake+0x30>
		UART_Send_SetMotorPosition(servonum, 1780, 500); // put the cake to the top 1320
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	b29b      	uxth	r3, r3
 800117c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001180:	f240 61f4 	movw	r1, #1780	; 0x6f4
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fe07 	bl	8000d98 <UART_Send_SetMotorPosition>
 800118a:	e018      	b.n	80011be <unsuck_the_cake+0x62>
	else if (order == 2)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d109      	bne.n	80011a6 <unsuck_the_cake+0x4a>
		UART_Send_SetMotorPosition(servonum, 1780, 500); // put the cake to the middle 1225
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	b29b      	uxth	r3, r3
 8001196:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800119a:	f240 61f4 	movw	r1, #1780	; 0x6f4
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fdfa 	bl	8000d98 <UART_Send_SetMotorPosition>
 80011a4:	e00b      	b.n	80011be <unsuck_the_cake+0x62>
	else if (order == 3)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d108      	bne.n	80011be <unsuck_the_cake+0x62>
		UART_Send_SetMotorPosition(servonum, 1780, 500); // put the cake to the bottom 1100
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011b4:	f240 61f4 	movw	r1, #1780	; 0x6f4
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fded 	bl	8000d98 <UART_Send_SetMotorPosition>

	if (servonum == 1) {
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d110      	bne.n	80011e6 <unsuck_the_cake+0x8a>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 2000 * 255); // open valve1
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <unsuck_the_cake+0xe4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a1e      	ldr	r2, [pc, #120]	; (8001244 <unsuck_the_cake+0xe8>)
 80011ca:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);          // close pump1
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <unsuck_the_cake+0xe4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2200      	movs	r2, #0
 80011d2:	635a      	str	r2, [r3, #52]	; 0x34
		unsuck1 = 1;
 80011d4:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <unsuck_the_cake+0xec>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
		unsuck_temp++;
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <unsuck_the_cake+0xf0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	4a1a      	ldr	r2, [pc, #104]	; (800124c <unsuck_the_cake+0xf0>)
 80011e2:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 2000 * 255); // open valve3
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);          // close pump3
		unsuck3 = 1;
		unsuck_temp++;
	}
}
 80011e4:	e026      	b.n	8001234 <unsuck_the_cake+0xd8>
	else if (servonum == 4) {
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d110      	bne.n	800120e <unsuck_the_cake+0xb2>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2000 * 255); // open valve4
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <unsuck_the_cake+0xf4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <unsuck_the_cake+0xe8>)
 80011f2:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);          // close pump4
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <unsuck_the_cake+0xf4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2200      	movs	r2, #0
 80011fa:	635a      	str	r2, [r3, #52]	; 0x34
		unsuck4 = 1;
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <unsuck_the_cake+0xf8>)
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]
		unsuck_temp++;
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <unsuck_the_cake+0xf0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	4a10      	ldr	r2, [pc, #64]	; (800124c <unsuck_the_cake+0xf0>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	e012      	b.n	8001234 <unsuck_the_cake+0xd8>
	else if (servonum == 3) {
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b03      	cmp	r3, #3
 8001212:	d10f      	bne.n	8001234 <unsuck_the_cake+0xd8>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 2000 * 255); // open valve3
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <unsuck_the_cake+0xf4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <unsuck_the_cake+0xe8>)
 800121a:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);          // close pump3
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <unsuck_the_cake+0xf4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2200      	movs	r2, #0
 8001222:	63da      	str	r2, [r3, #60]	; 0x3c
		unsuck3 = 1;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <unsuck_the_cake+0xfc>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]
		unsuck_temp++;
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <unsuck_the_cake+0xf0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <unsuck_the_cake+0xf0>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000aec 	.word	0x20000aec
 8001240:	20000b9c 	.word	0x20000b9c
 8001244:	0007c830 	.word	0x0007c830
 8001248:	20000b10 	.word	0x20000b10
 800124c:	20000b20 	.word	0x20000b20
 8001250:	20000be4 	.word	0x20000be4
 8001254:	20000b14 	.word	0x20000b14
 8001258:	20000b18 	.word	0x20000b18
 800125c:	00000000 	.word	0x00000000

08001260 <rotate_the_ring>:
void rotate_the_ring(int num) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	if (num == 1) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d106      	bne.n	800127c <rotate_the_ring+0x1c>
		step1 = 0;
 800126e:	4b44      	ldr	r3, [pc, #272]	; (8001380 <rotate_the_ring+0x120>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
		anglegoal = 0;
 8001274:	4b43      	ldr	r3, [pc, #268]	; (8001384 <rotate_the_ring+0x124>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	e03d      	b.n	80012f8 <rotate_the_ring+0x98>
	}
	else if (num == 2) {
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d106      	bne.n	8001290 <rotate_the_ring+0x30>
		step1 = 0;
 8001282:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <rotate_the_ring+0x120>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
		anglegoal = 90;
 8001288:	4b3e      	ldr	r3, [pc, #248]	; (8001384 <rotate_the_ring+0x124>)
 800128a:	225a      	movs	r2, #90	; 0x5a
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	e033      	b.n	80012f8 <rotate_the_ring+0x98>
	}
	else if (num == 3) {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b03      	cmp	r3, #3
 8001294:	d106      	bne.n	80012a4 <rotate_the_ring+0x44>
		step1 = 0;
 8001296:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <rotate_the_ring+0x120>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
		anglegoal = 180;
 800129c:	4b39      	ldr	r3, [pc, #228]	; (8001384 <rotate_the_ring+0x124>)
 800129e:	22b4      	movs	r2, #180	; 0xb4
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e029      	b.n	80012f8 <rotate_the_ring+0x98>
	}
	else if (num == 4) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d107      	bne.n	80012ba <rotate_the_ring+0x5a>
		step1 = 0;
 80012aa:	4b35      	ldr	r3, [pc, #212]	; (8001380 <rotate_the_ring+0x120>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
		anglegoal = 270;
 80012b0:	4b34      	ldr	r3, [pc, #208]	; (8001384 <rotate_the_ring+0x124>)
 80012b2:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	e01e      	b.n	80012f8 <rotate_the_ring+0x98>
	}
	else if (num == 5) {
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b05      	cmp	r3, #5
 80012be:	d107      	bne.n	80012d0 <rotate_the_ring+0x70>
		step1 = 0;
 80012c0:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <rotate_the_ring+0x120>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
		anglegoal = -90;
 80012c6:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <rotate_the_ring+0x124>)
 80012c8:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	e013      	b.n	80012f8 <rotate_the_ring+0x98>
	}
	else if (num == 6) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d107      	bne.n	80012e6 <rotate_the_ring+0x86>
		step1 = 0;
 80012d6:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <rotate_the_ring+0x120>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
		anglegoal = -180;
 80012dc:	4b29      	ldr	r3, [pc, #164]	; (8001384 <rotate_the_ring+0x124>)
 80012de:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	e008      	b.n	80012f8 <rotate_the_ring+0x98>
	}
	else if (num == 7) {
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b07      	cmp	r3, #7
 80012ea:	d105      	bne.n	80012f8 <rotate_the_ring+0x98>
		step1 = 0;
 80012ec:	4b24      	ldr	r3, [pc, #144]	; (8001380 <rotate_the_ring+0x120>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
		anglegoal = -270;
 80012f2:	4b24      	ldr	r3, [pc, #144]	; (8001384 <rotate_the_ring+0x124>)
 80012f4:	4a24      	ldr	r2, [pc, #144]	; (8001388 <rotate_the_ring+0x128>)
 80012f6:	601a      	str	r2, [r3, #0]
	}
	step1 = (anglegoal - anglebefore) * 5 * 8 / 1.8; // calculate the step1
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <rotate_the_ring+0x124>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b23      	ldr	r3, [pc, #140]	; (800138c <rotate_the_ring+0x12c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	1ad2      	subs	r2, r2, r3
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f8d6 	bl	80004bc <__aeabi_i2d>
 8001310:	a319      	add	r3, pc, #100	; (adr r3, 8001378 <rotate_the_ring+0x118>)
 8001312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001316:	f7ff fa65 	bl	80007e4 <__aeabi_ddiv>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff fb47 	bl	80009b4 <__aeabi_d2iz>
 8001326:	4603      	mov	r3, r0
 8001328:	4a15      	ldr	r2, [pc, #84]	; (8001380 <rotate_the_ring+0x120>)
 800132a:	6013      	str	r3, [r2, #0]
	anglebefore = anglegoal;
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <rotate_the_ring+0x124>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a16      	ldr	r2, [pc, #88]	; (800138c <rotate_the_ring+0x12c>)
 8001332:	6013      	str	r3, [r2, #0]
	if (step1 >= 0)
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <rotate_the_ring+0x120>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db03      	blt.n	8001344 <rotate_the_ring+0xe4>
		dir_state1 = 1;
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <rotate_the_ring+0x130>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	e00b      	b.n	800135c <rotate_the_ring+0xfc>
	else if (step1 < 0) {
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <rotate_the_ring+0x120>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	da07      	bge.n	800135c <rotate_the_ring+0xfc>
		step1 = -step1;
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <rotate_the_ring+0x120>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	425b      	negs	r3, r3
 8001352:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <rotate_the_ring+0x120>)
 8001354:	6013      	str	r3, [r2, #0]
		dir_state1 = 0;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <rotate_the_ring+0x130>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
	}

	while (1) {
		if (step1 == 0) {
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <rotate_the_ring+0x120>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1fb      	bne.n	800135c <rotate_the_ring+0xfc>
			arr = 500;
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <rotate_the_ring+0x134>)
 8001366:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800136a:	601a      	str	r2, [r3, #0]
			break;
 800136c:	bf00      	nop
		}
	}
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	cccccccd 	.word	0xcccccccd
 800137c:	3ffccccc 	.word	0x3ffccccc
 8001380:	20000aec 	.word	0x20000aec
 8001384:	20000af4 	.word	0x20000af4
 8001388:	fffffef2 	.word	0xfffffef2
 800138c:	20000af8 	.word	0x20000af8
 8001390:	20000af0 	.word	0x20000af0
 8001394:	20000000 	.word	0x20000000

08001398 <put_the_cherry>:
void put_the_cherry(int num) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	rotate_the_ring(num);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff5d 	bl	8001260 <rotate_the_ring>
	UART_Send_SetMotorPosition(6, 2100, 300);
 80013a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013aa:	f640 0134 	movw	r1, #2100	; 0x834
 80013ae:	2006      	movs	r0, #6
 80013b0:	f7ff fcf2 	bl	8000d98 <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(6, 950, 300);
 80013b4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013b8:	f240 31b6 	movw	r1, #950	; 0x3b6
 80013bc:	2006      	movs	r0, #6
 80013be:	f7ff fceb 	bl	8000d98 <UART_Send_SetMotorPosition>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <judge_the_empty_and_order>:
void judge_the_empty_and_order() {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
//1=leftfront,2=rightfront,3=rightback,4=leftback
// let three servo turn to the correct side
	for (int i = 0; i < 4; i++) {
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	e00d      	b.n	80013f4 <judge_the_empty_and_order+0x28>
		if (hole[i] == 0) {
 80013d8:	4a84      	ldr	r2, [pc, #528]	; (80015ec <judge_the_empty_and_order+0x220>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d104      	bne.n	80013ee <judge_the_empty_and_order+0x22>
			num = i + 1;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3301      	adds	r3, #1
 80013e8:	4a81      	ldr	r2, [pc, #516]	; (80015f0 <judge_the_empty_and_order+0x224>)
 80013ea:	6013      	str	r3, [r2, #0]
			break;
 80013ec:	e005      	b.n	80013fa <judge_the_empty_and_order+0x2e>
	for (int i = 0; i < 4; i++) {
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3301      	adds	r3, #1
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	ddee      	ble.n	80013d8 <judge_the_empty_and_order+0xc>
		}
	}
	if (num == 1) {
 80013fa:	4b7d      	ldr	r3, [pc, #500]	; (80015f0 <judge_the_empty_and_order+0x224>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	f040 80b1 	bne.w	8001566 <judge_the_empty_and_order+0x19a>
		rotate_the_ring(2);       //90
 8001404:	2002      	movs	r0, #2
 8001406:	f7ff ff2b 	bl	8001260 <rotate_the_ring>
		anglebefore = 0;
 800140a:	4b7a      	ldr	r3, [pc, #488]	; (80015f4 <judge_the_empty_and_order+0x228>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
		if (hole[1] == 'b' && hole[2] == 'y' && hole[3] == 'p') {
 8001410:	4b76      	ldr	r3, [pc, #472]	; (80015ec <judge_the_empty_and_order+0x220>)
 8001412:	785b      	ldrb	r3, [r3, #1]
 8001414:	2b62      	cmp	r3, #98	; 0x62
 8001416:	d117      	bne.n	8001448 <judge_the_empty_and_order+0x7c>
 8001418:	4b74      	ldr	r3, [pc, #464]	; (80015ec <judge_the_empty_and_order+0x220>)
 800141a:	789b      	ldrb	r3, [r3, #2]
 800141c:	2b79      	cmp	r3, #121	; 0x79
 800141e:	d113      	bne.n	8001448 <judge_the_empty_and_order+0x7c>
 8001420:	4b72      	ldr	r3, [pc, #456]	; (80015ec <judge_the_empty_and_order+0x220>)
 8001422:	78db      	ldrb	r3, [r3, #3]
 8001424:	2b70      	cmp	r3, #112	; 0x70
 8001426:	d10f      	bne.n	8001448 <judge_the_empty_and_order+0x7c>
			cake_order = 1;
 8001428:	4b73      	ldr	r3, [pc, #460]	; (80015f8 <judge_the_empty_and_order+0x22c>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800142e:	4b73      	ldr	r3, [pc, #460]	; (80015fc <judge_the_empty_and_order+0x230>)
 8001430:	2201      	movs	r2, #1
 8001432:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8001434:	4b71      	ldr	r3, [pc, #452]	; (80015fc <judge_the_empty_and_order+0x230>)
 8001436:	2201      	movs	r2, #1
 8001438:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800143a:	4b70      	ldr	r3, [pc, #448]	; (80015fc <judge_the_empty_and_order+0x230>)
 800143c:	2201      	movs	r2, #1
 800143e:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 8001440:	4b6e      	ldr	r3, [pc, #440]	; (80015fc <judge_the_empty_and_order+0x230>)
 8001442:	2200      	movs	r2, #0
 8001444:	811a      	strh	r2, [r3, #8]
 8001446:	e2bd      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
		else if (hole[1] == 'p' && hole[2] == 'y' && hole[3] == 'b') {
 8001448:	4b68      	ldr	r3, [pc, #416]	; (80015ec <judge_the_empty_and_order+0x220>)
 800144a:	785b      	ldrb	r3, [r3, #1]
 800144c:	2b70      	cmp	r3, #112	; 0x70
 800144e:	d117      	bne.n	8001480 <judge_the_empty_and_order+0xb4>
 8001450:	4b66      	ldr	r3, [pc, #408]	; (80015ec <judge_the_empty_and_order+0x220>)
 8001452:	789b      	ldrb	r3, [r3, #2]
 8001454:	2b79      	cmp	r3, #121	; 0x79
 8001456:	d113      	bne.n	8001480 <judge_the_empty_and_order+0xb4>
 8001458:	4b64      	ldr	r3, [pc, #400]	; (80015ec <judge_the_empty_and_order+0x220>)
 800145a:	78db      	ldrb	r3, [r3, #3]
 800145c:	2b62      	cmp	r3, #98	; 0x62
 800145e:	d10f      	bne.n	8001480 <judge_the_empty_and_order+0xb4>
			cake_order = 2;
 8001460:	4b65      	ldr	r3, [pc, #404]	; (80015f8 <judge_the_empty_and_order+0x22c>)
 8001462:	2202      	movs	r2, #2
 8001464:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8001466:	4b65      	ldr	r3, [pc, #404]	; (80015fc <judge_the_empty_and_order+0x230>)
 8001468:	2201      	movs	r2, #1
 800146a:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 800146c:	4b63      	ldr	r3, [pc, #396]	; (80015fc <judge_the_empty_and_order+0x230>)
 800146e:	2200      	movs	r2, #0
 8001470:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001472:	4b62      	ldr	r3, [pc, #392]	; (80015fc <judge_the_empty_and_order+0x230>)
 8001474:	2201      	movs	r2, #1
 8001476:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8001478:	4b60      	ldr	r3, [pc, #384]	; (80015fc <judge_the_empty_and_order+0x230>)
 800147a:	2201      	movs	r2, #1
 800147c:	811a      	strh	r2, [r3, #8]
 800147e:	e2a1      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
		else if (hole[1] == 'y' && hole[2] == 'b' && hole[3] == 'p') {
 8001480:	4b5a      	ldr	r3, [pc, #360]	; (80015ec <judge_the_empty_and_order+0x220>)
 8001482:	785b      	ldrb	r3, [r3, #1]
 8001484:	2b79      	cmp	r3, #121	; 0x79
 8001486:	d117      	bne.n	80014b8 <judge_the_empty_and_order+0xec>
 8001488:	4b58      	ldr	r3, [pc, #352]	; (80015ec <judge_the_empty_and_order+0x220>)
 800148a:	789b      	ldrb	r3, [r3, #2]
 800148c:	2b62      	cmp	r3, #98	; 0x62
 800148e:	d113      	bne.n	80014b8 <judge_the_empty_and_order+0xec>
 8001490:	4b56      	ldr	r3, [pc, #344]	; (80015ec <judge_the_empty_and_order+0x220>)
 8001492:	78db      	ldrb	r3, [r3, #3]
 8001494:	2b70      	cmp	r3, #112	; 0x70
 8001496:	d10f      	bne.n	80014b8 <judge_the_empty_and_order+0xec>
			cake_order = 3;
 8001498:	4b57      	ldr	r3, [pc, #348]	; (80015f8 <judge_the_empty_and_order+0x22c>)
 800149a:	2203      	movs	r2, #3
 800149c:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800149e:	4b57      	ldr	r3, [pc, #348]	; (80015fc <judge_the_empty_and_order+0x230>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 80014a4:	4b55      	ldr	r3, [pc, #340]	; (80015fc <judge_the_empty_and_order+0x230>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80014aa:	4b54      	ldr	r3, [pc, #336]	; (80015fc <judge_the_empty_and_order+0x230>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80014b0:	4b52      	ldr	r3, [pc, #328]	; (80015fc <judge_the_empty_and_order+0x230>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	811a      	strh	r2, [r3, #8]
 80014b6:	e285      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
		else if (hole[1] == 'p' && hole[2] == 'b' && hole[3] == 'y') {
 80014b8:	4b4c      	ldr	r3, [pc, #304]	; (80015ec <judge_the_empty_and_order+0x220>)
 80014ba:	785b      	ldrb	r3, [r3, #1]
 80014bc:	2b70      	cmp	r3, #112	; 0x70
 80014be:	d117      	bne.n	80014f0 <judge_the_empty_and_order+0x124>
 80014c0:	4b4a      	ldr	r3, [pc, #296]	; (80015ec <judge_the_empty_and_order+0x220>)
 80014c2:	789b      	ldrb	r3, [r3, #2]
 80014c4:	2b62      	cmp	r3, #98	; 0x62
 80014c6:	d113      	bne.n	80014f0 <judge_the_empty_and_order+0x124>
 80014c8:	4b48      	ldr	r3, [pc, #288]	; (80015ec <judge_the_empty_and_order+0x220>)
 80014ca:	78db      	ldrb	r3, [r3, #3]
 80014cc:	2b79      	cmp	r3, #121	; 0x79
 80014ce:	d10f      	bne.n	80014f0 <judge_the_empty_and_order+0x124>
			cake_order = 4;
 80014d0:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <judge_the_empty_and_order+0x22c>)
 80014d2:	2204      	movs	r2, #4
 80014d4:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80014d6:	4b49      	ldr	r3, [pc, #292]	; (80015fc <judge_the_empty_and_order+0x230>)
 80014d8:	2201      	movs	r2, #1
 80014da:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80014dc:	4b47      	ldr	r3, [pc, #284]	; (80015fc <judge_the_empty_and_order+0x230>)
 80014de:	2201      	movs	r2, #1
 80014e0:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80014e2:	4b46      	ldr	r3, [pc, #280]	; (80015fc <judge_the_empty_and_order+0x230>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 80014e8:	4b44      	ldr	r3, [pc, #272]	; (80015fc <judge_the_empty_and_order+0x230>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	811a      	strh	r2, [r3, #8]
 80014ee:	e269      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
		else if (hole[1] == 'b' && hole[2] == 'p' && hole[3] == 'y') {
 80014f0:	4b3e      	ldr	r3, [pc, #248]	; (80015ec <judge_the_empty_and_order+0x220>)
 80014f2:	785b      	ldrb	r3, [r3, #1]
 80014f4:	2b62      	cmp	r3, #98	; 0x62
 80014f6:	d117      	bne.n	8001528 <judge_the_empty_and_order+0x15c>
 80014f8:	4b3c      	ldr	r3, [pc, #240]	; (80015ec <judge_the_empty_and_order+0x220>)
 80014fa:	789b      	ldrb	r3, [r3, #2]
 80014fc:	2b70      	cmp	r3, #112	; 0x70
 80014fe:	d113      	bne.n	8001528 <judge_the_empty_and_order+0x15c>
 8001500:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <judge_the_empty_and_order+0x220>)
 8001502:	78db      	ldrb	r3, [r3, #3]
 8001504:	2b79      	cmp	r3, #121	; 0x79
 8001506:	d10f      	bne.n	8001528 <judge_the_empty_and_order+0x15c>
			cake_order = 5;
 8001508:	4b3b      	ldr	r3, [pc, #236]	; (80015f8 <judge_the_empty_and_order+0x22c>)
 800150a:	2205      	movs	r2, #5
 800150c:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <judge_the_empty_and_order+0x230>)
 8001510:	2201      	movs	r2, #1
 8001512:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8001514:	4b39      	ldr	r3, [pc, #228]	; (80015fc <judge_the_empty_and_order+0x230>)
 8001516:	2201      	movs	r2, #1
 8001518:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800151a:	4b38      	ldr	r3, [pc, #224]	; (80015fc <judge_the_empty_and_order+0x230>)
 800151c:	2201      	movs	r2, #1
 800151e:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 8001520:	4b36      	ldr	r3, [pc, #216]	; (80015fc <judge_the_empty_and_order+0x230>)
 8001522:	2200      	movs	r2, #0
 8001524:	811a      	strh	r2, [r3, #8]
 8001526:	e24d      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
		else if (hole[1] == 'y' && hole[2] == 'p' && hole[3] == 'b') {
 8001528:	4b30      	ldr	r3, [pc, #192]	; (80015ec <judge_the_empty_and_order+0x220>)
 800152a:	785b      	ldrb	r3, [r3, #1]
 800152c:	2b79      	cmp	r3, #121	; 0x79
 800152e:	f040 8249 	bne.w	80019c4 <judge_the_empty_and_order+0x5f8>
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <judge_the_empty_and_order+0x220>)
 8001534:	789b      	ldrb	r3, [r3, #2]
 8001536:	2b70      	cmp	r3, #112	; 0x70
 8001538:	f040 8244 	bne.w	80019c4 <judge_the_empty_and_order+0x5f8>
 800153c:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <judge_the_empty_and_order+0x220>)
 800153e:	78db      	ldrb	r3, [r3, #3]
 8001540:	2b62      	cmp	r3, #98	; 0x62
 8001542:	f040 823f 	bne.w	80019c4 <judge_the_empty_and_order+0x5f8>
			cake_order = 6;
 8001546:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <judge_the_empty_and_order+0x22c>)
 8001548:	2206      	movs	r2, #6
 800154a:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800154c:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <judge_the_empty_and_order+0x230>)
 800154e:	2201      	movs	r2, #1
 8001550:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 8001552:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <judge_the_empty_and_order+0x230>)
 8001554:	2200      	movs	r2, #0
 8001556:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001558:	4b28      	ldr	r3, [pc, #160]	; (80015fc <judge_the_empty_and_order+0x230>)
 800155a:	2201      	movs	r2, #1
 800155c:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 800155e:	4b27      	ldr	r3, [pc, #156]	; (80015fc <judge_the_empty_and_order+0x230>)
 8001560:	2201      	movs	r2, #1
 8001562:	811a      	strh	r2, [r3, #8]
 8001564:	e22e      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
	}
	else if (num == 2) {
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <judge_the_empty_and_order+0x224>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b02      	cmp	r3, #2
 800156c:	f040 80bb 	bne.w	80016e6 <judge_the_empty_and_order+0x31a>
		rotate_the_ring(6);       //-180
 8001570:	2006      	movs	r0, #6
 8001572:	f7ff fe75 	bl	8001260 <rotate_the_ring>
		anglebefore = 0;
 8001576:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <judge_the_empty_and_order+0x228>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
		if (hole[2] == 'b' && hole[3] == 'y' && hole[0] == 'p') {
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <judge_the_empty_and_order+0x220>)
 800157e:	789b      	ldrb	r3, [r3, #2]
 8001580:	2b62      	cmp	r3, #98	; 0x62
 8001582:	d117      	bne.n	80015b4 <judge_the_empty_and_order+0x1e8>
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <judge_the_empty_and_order+0x220>)
 8001586:	78db      	ldrb	r3, [r3, #3]
 8001588:	2b79      	cmp	r3, #121	; 0x79
 800158a:	d113      	bne.n	80015b4 <judge_the_empty_and_order+0x1e8>
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <judge_the_empty_and_order+0x220>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b70      	cmp	r3, #112	; 0x70
 8001592:	d10f      	bne.n	80015b4 <judge_the_empty_and_order+0x1e8>
			cake_order = 1;
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <judge_the_empty_and_order+0x22c>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <judge_the_empty_and_order+0x230>)
 800159c:	2200      	movs	r2, #0
 800159e:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80015a0:	4b16      	ldr	r3, [pc, #88]	; (80015fc <judge_the_empty_and_order+0x230>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <judge_the_empty_and_order+0x230>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <judge_the_empty_and_order+0x230>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	811a      	strh	r2, [r3, #8]
 80015b2:	e207      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
		else if (hole[2] == 'p' && hole[3] == 'y' && hole[0] == 'b') {
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <judge_the_empty_and_order+0x220>)
 80015b6:	789b      	ldrb	r3, [r3, #2]
 80015b8:	2b70      	cmp	r3, #112	; 0x70
 80015ba:	d121      	bne.n	8001600 <judge_the_empty_and_order+0x234>
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <judge_the_empty_and_order+0x220>)
 80015be:	78db      	ldrb	r3, [r3, #3]
 80015c0:	2b79      	cmp	r3, #121	; 0x79
 80015c2:	d11d      	bne.n	8001600 <judge_the_empty_and_order+0x234>
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <judge_the_empty_and_order+0x220>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b62      	cmp	r3, #98	; 0x62
 80015ca:	d119      	bne.n	8001600 <judge_the_empty_and_order+0x234>
			cake_order = 2;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <judge_the_empty_and_order+0x22c>)
 80015ce:	2202      	movs	r2, #2
 80015d0:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <judge_the_empty_and_order+0x230>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <judge_the_empty_and_order+0x230>)
 80015da:	2201      	movs	r2, #1
 80015dc:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <judge_the_empty_and_order+0x230>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <judge_the_empty_and_order+0x230>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	811a      	strh	r2, [r3, #8]
 80015ea:	e1eb      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
 80015ec:	20000b54 	.word	0x20000b54
 80015f0:	20000144 	.word	0x20000144
 80015f4:	20000af8 	.word	0x20000af8
 80015f8:	20000004 	.word	0x20000004
 80015fc:	20000b8c 	.word	0x20000b8c
		}
		else if (hole[2] == 'y' && hole[3] == 'b' && hole[0] == 'p') {
 8001600:	4b84      	ldr	r3, [pc, #528]	; (8001814 <judge_the_empty_and_order+0x448>)
 8001602:	789b      	ldrb	r3, [r3, #2]
 8001604:	2b79      	cmp	r3, #121	; 0x79
 8001606:	d117      	bne.n	8001638 <judge_the_empty_and_order+0x26c>
 8001608:	4b82      	ldr	r3, [pc, #520]	; (8001814 <judge_the_empty_and_order+0x448>)
 800160a:	78db      	ldrb	r3, [r3, #3]
 800160c:	2b62      	cmp	r3, #98	; 0x62
 800160e:	d113      	bne.n	8001638 <judge_the_empty_and_order+0x26c>
 8001610:	4b80      	ldr	r3, [pc, #512]	; (8001814 <judge_the_empty_and_order+0x448>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b70      	cmp	r3, #112	; 0x70
 8001616:	d10f      	bne.n	8001638 <judge_the_empty_and_order+0x26c>
			cake_order = 3;
 8001618:	4b7f      	ldr	r3, [pc, #508]	; (8001818 <judge_the_empty_and_order+0x44c>)
 800161a:	2203      	movs	r2, #3
 800161c:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800161e:	4b7f      	ldr	r3, [pc, #508]	; (800181c <judge_the_empty_and_order+0x450>)
 8001620:	2201      	movs	r2, #1
 8001622:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8001624:	4b7d      	ldr	r3, [pc, #500]	; (800181c <judge_the_empty_and_order+0x450>)
 8001626:	2201      	movs	r2, #1
 8001628:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 800162a:	4b7c      	ldr	r3, [pc, #496]	; (800181c <judge_the_empty_and_order+0x450>)
 800162c:	2200      	movs	r2, #0
 800162e:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8001630:	4b7a      	ldr	r3, [pc, #488]	; (800181c <judge_the_empty_and_order+0x450>)
 8001632:	2201      	movs	r2, #1
 8001634:	811a      	strh	r2, [r3, #8]
 8001636:	e1c5      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
		else if (hole[2] == 'p' && hole[3] == 'b' && hole[0] == 'y') {
 8001638:	4b76      	ldr	r3, [pc, #472]	; (8001814 <judge_the_empty_and_order+0x448>)
 800163a:	789b      	ldrb	r3, [r3, #2]
 800163c:	2b70      	cmp	r3, #112	; 0x70
 800163e:	d117      	bne.n	8001670 <judge_the_empty_and_order+0x2a4>
 8001640:	4b74      	ldr	r3, [pc, #464]	; (8001814 <judge_the_empty_and_order+0x448>)
 8001642:	78db      	ldrb	r3, [r3, #3]
 8001644:	2b62      	cmp	r3, #98	; 0x62
 8001646:	d113      	bne.n	8001670 <judge_the_empty_and_order+0x2a4>
 8001648:	4b72      	ldr	r3, [pc, #456]	; (8001814 <judge_the_empty_and_order+0x448>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b79      	cmp	r3, #121	; 0x79
 800164e:	d10f      	bne.n	8001670 <judge_the_empty_and_order+0x2a4>
			cake_order = 4;
 8001650:	4b71      	ldr	r3, [pc, #452]	; (8001818 <judge_the_empty_and_order+0x44c>)
 8001652:	2204      	movs	r2, #4
 8001654:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 8001656:	4b71      	ldr	r3, [pc, #452]	; (800181c <judge_the_empty_and_order+0x450>)
 8001658:	2200      	movs	r2, #0
 800165a:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 800165c:	4b6f      	ldr	r3, [pc, #444]	; (800181c <judge_the_empty_and_order+0x450>)
 800165e:	2201      	movs	r2, #1
 8001660:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001662:	4b6e      	ldr	r3, [pc, #440]	; (800181c <judge_the_empty_and_order+0x450>)
 8001664:	2201      	movs	r2, #1
 8001666:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8001668:	4b6c      	ldr	r3, [pc, #432]	; (800181c <judge_the_empty_and_order+0x450>)
 800166a:	2201      	movs	r2, #1
 800166c:	811a      	strh	r2, [r3, #8]
 800166e:	e1a9      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
		else if (hole[2] == 'b' && hole[3] == 'p' && hole[0] == 'y') {
 8001670:	4b68      	ldr	r3, [pc, #416]	; (8001814 <judge_the_empty_and_order+0x448>)
 8001672:	789b      	ldrb	r3, [r3, #2]
 8001674:	2b62      	cmp	r3, #98	; 0x62
 8001676:	d117      	bne.n	80016a8 <judge_the_empty_and_order+0x2dc>
 8001678:	4b66      	ldr	r3, [pc, #408]	; (8001814 <judge_the_empty_and_order+0x448>)
 800167a:	78db      	ldrb	r3, [r3, #3]
 800167c:	2b70      	cmp	r3, #112	; 0x70
 800167e:	d113      	bne.n	80016a8 <judge_the_empty_and_order+0x2dc>
 8001680:	4b64      	ldr	r3, [pc, #400]	; (8001814 <judge_the_empty_and_order+0x448>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b79      	cmp	r3, #121	; 0x79
 8001686:	d10f      	bne.n	80016a8 <judge_the_empty_and_order+0x2dc>
			cake_order = 5;
 8001688:	4b63      	ldr	r3, [pc, #396]	; (8001818 <judge_the_empty_and_order+0x44c>)
 800168a:	2205      	movs	r2, #5
 800168c:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 800168e:	4b63      	ldr	r3, [pc, #396]	; (800181c <judge_the_empty_and_order+0x450>)
 8001690:	2200      	movs	r2, #0
 8001692:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8001694:	4b61      	ldr	r3, [pc, #388]	; (800181c <judge_the_empty_and_order+0x450>)
 8001696:	2201      	movs	r2, #1
 8001698:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800169a:	4b60      	ldr	r3, [pc, #384]	; (800181c <judge_the_empty_and_order+0x450>)
 800169c:	2201      	movs	r2, #1
 800169e:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80016a0:	4b5e      	ldr	r3, [pc, #376]	; (800181c <judge_the_empty_and_order+0x450>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	811a      	strh	r2, [r3, #8]
 80016a6:	e18d      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
		else if (hole[2] == 'y' && hole[3] == 'p' && hole[0] == 'b') {
 80016a8:	4b5a      	ldr	r3, [pc, #360]	; (8001814 <judge_the_empty_and_order+0x448>)
 80016aa:	789b      	ldrb	r3, [r3, #2]
 80016ac:	2b79      	cmp	r3, #121	; 0x79
 80016ae:	f040 8189 	bne.w	80019c4 <judge_the_empty_and_order+0x5f8>
 80016b2:	4b58      	ldr	r3, [pc, #352]	; (8001814 <judge_the_empty_and_order+0x448>)
 80016b4:	78db      	ldrb	r3, [r3, #3]
 80016b6:	2b70      	cmp	r3, #112	; 0x70
 80016b8:	f040 8184 	bne.w	80019c4 <judge_the_empty_and_order+0x5f8>
 80016bc:	4b55      	ldr	r3, [pc, #340]	; (8001814 <judge_the_empty_and_order+0x448>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b62      	cmp	r3, #98	; 0x62
 80016c2:	f040 817f 	bne.w	80019c4 <judge_the_empty_and_order+0x5f8>
			cake_order = 6;
 80016c6:	4b54      	ldr	r3, [pc, #336]	; (8001818 <judge_the_empty_and_order+0x44c>)
 80016c8:	2206      	movs	r2, #6
 80016ca:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80016cc:	4b53      	ldr	r3, [pc, #332]	; (800181c <judge_the_empty_and_order+0x450>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80016d2:	4b52      	ldr	r3, [pc, #328]	; (800181c <judge_the_empty_and_order+0x450>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 80016d8:	4b50      	ldr	r3, [pc, #320]	; (800181c <judge_the_empty_and_order+0x450>)
 80016da:	2200      	movs	r2, #0
 80016dc:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80016de:	4b4f      	ldr	r3, [pc, #316]	; (800181c <judge_the_empty_and_order+0x450>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	811a      	strh	r2, [r3, #8]
 80016e4:	e16e      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
	}
	else if (num == 3) {
 80016e6:	4b4e      	ldr	r3, [pc, #312]	; (8001820 <judge_the_empty_and_order+0x454>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	f040 80bb 	bne.w	8001866 <judge_the_empty_and_order+0x49a>
		rotate_the_ring(5);       //-90
 80016f0:	2005      	movs	r0, #5
 80016f2:	f7ff fdb5 	bl	8001260 <rotate_the_ring>
		anglebefore = 0;
 80016f6:	4b4b      	ldr	r3, [pc, #300]	; (8001824 <judge_the_empty_and_order+0x458>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
		if (hole[3] == 'b' && hole[0] == 'y' && hole[1] == 'p') {
 80016fc:	4b45      	ldr	r3, [pc, #276]	; (8001814 <judge_the_empty_and_order+0x448>)
 80016fe:	78db      	ldrb	r3, [r3, #3]
 8001700:	2b62      	cmp	r3, #98	; 0x62
 8001702:	d117      	bne.n	8001734 <judge_the_empty_and_order+0x368>
 8001704:	4b43      	ldr	r3, [pc, #268]	; (8001814 <judge_the_empty_and_order+0x448>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b79      	cmp	r3, #121	; 0x79
 800170a:	d113      	bne.n	8001734 <judge_the_empty_and_order+0x368>
 800170c:	4b41      	ldr	r3, [pc, #260]	; (8001814 <judge_the_empty_and_order+0x448>)
 800170e:	785b      	ldrb	r3, [r3, #1]
 8001710:	2b70      	cmp	r3, #112	; 0x70
 8001712:	d10f      	bne.n	8001734 <judge_the_empty_and_order+0x368>
			cake_order = 1;
 8001714:	4b40      	ldr	r3, [pc, #256]	; (8001818 <judge_the_empty_and_order+0x44c>)
 8001716:	2201      	movs	r2, #1
 8001718:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800171a:	4b40      	ldr	r3, [pc, #256]	; (800181c <judge_the_empty_and_order+0x450>)
 800171c:	2201      	movs	r2, #1
 800171e:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 8001720:	4b3e      	ldr	r3, [pc, #248]	; (800181c <judge_the_empty_and_order+0x450>)
 8001722:	2200      	movs	r2, #0
 8001724:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001726:	4b3d      	ldr	r3, [pc, #244]	; (800181c <judge_the_empty_and_order+0x450>)
 8001728:	2201      	movs	r2, #1
 800172a:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 800172c:	4b3b      	ldr	r3, [pc, #236]	; (800181c <judge_the_empty_and_order+0x450>)
 800172e:	2201      	movs	r2, #1
 8001730:	811a      	strh	r2, [r3, #8]
 8001732:	e147      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
		else if (hole[3] == 'p' && hole[0] == 'y' && hole[1] == 'b') {
 8001734:	4b37      	ldr	r3, [pc, #220]	; (8001814 <judge_the_empty_and_order+0x448>)
 8001736:	78db      	ldrb	r3, [r3, #3]
 8001738:	2b70      	cmp	r3, #112	; 0x70
 800173a:	d117      	bne.n	800176c <judge_the_empty_and_order+0x3a0>
 800173c:	4b35      	ldr	r3, [pc, #212]	; (8001814 <judge_the_empty_and_order+0x448>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b79      	cmp	r3, #121	; 0x79
 8001742:	d113      	bne.n	800176c <judge_the_empty_and_order+0x3a0>
 8001744:	4b33      	ldr	r3, [pc, #204]	; (8001814 <judge_the_empty_and_order+0x448>)
 8001746:	785b      	ldrb	r3, [r3, #1]
 8001748:	2b62      	cmp	r3, #98	; 0x62
 800174a:	d10f      	bne.n	800176c <judge_the_empty_and_order+0x3a0>
			cake_order = 2;
 800174c:	4b32      	ldr	r3, [pc, #200]	; (8001818 <judge_the_empty_and_order+0x44c>)
 800174e:	2202      	movs	r2, #2
 8001750:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8001752:	4b32      	ldr	r3, [pc, #200]	; (800181c <judge_the_empty_and_order+0x450>)
 8001754:	2201      	movs	r2, #1
 8001756:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8001758:	4b30      	ldr	r3, [pc, #192]	; (800181c <judge_the_empty_and_order+0x450>)
 800175a:	2201      	movs	r2, #1
 800175c:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800175e:	4b2f      	ldr	r3, [pc, #188]	; (800181c <judge_the_empty_and_order+0x450>)
 8001760:	2201      	movs	r2, #1
 8001762:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 8001764:	4b2d      	ldr	r3, [pc, #180]	; (800181c <judge_the_empty_and_order+0x450>)
 8001766:	2200      	movs	r2, #0
 8001768:	811a      	strh	r2, [r3, #8]
 800176a:	e12b      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
		else if (hole[3] == 'y' && hole[0] == 'b' && hole[1] == 'p') {
 800176c:	4b29      	ldr	r3, [pc, #164]	; (8001814 <judge_the_empty_and_order+0x448>)
 800176e:	78db      	ldrb	r3, [r3, #3]
 8001770:	2b79      	cmp	r3, #121	; 0x79
 8001772:	d117      	bne.n	80017a4 <judge_the_empty_and_order+0x3d8>
 8001774:	4b27      	ldr	r3, [pc, #156]	; (8001814 <judge_the_empty_and_order+0x448>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b62      	cmp	r3, #98	; 0x62
 800177a:	d113      	bne.n	80017a4 <judge_the_empty_and_order+0x3d8>
 800177c:	4b25      	ldr	r3, [pc, #148]	; (8001814 <judge_the_empty_and_order+0x448>)
 800177e:	785b      	ldrb	r3, [r3, #1]
 8001780:	2b70      	cmp	r3, #112	; 0x70
 8001782:	d10f      	bne.n	80017a4 <judge_the_empty_and_order+0x3d8>
			cake_order = 3;
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <judge_the_empty_and_order+0x44c>)
 8001786:	2203      	movs	r2, #3
 8001788:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <judge_the_empty_and_order+0x450>)
 800178c:	2201      	movs	r2, #1
 800178e:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8001790:	4b22      	ldr	r3, [pc, #136]	; (800181c <judge_the_empty_and_order+0x450>)
 8001792:	2201      	movs	r2, #1
 8001794:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <judge_the_empty_and_order+0x450>)
 8001798:	2201      	movs	r2, #1
 800179a:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <judge_the_empty_and_order+0x450>)
 800179e:	2200      	movs	r2, #0
 80017a0:	811a      	strh	r2, [r3, #8]
 80017a2:	e10f      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
		else if (hole[3] == 'p' && hole[0] == 'b' && hole[1] == 'y') {
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <judge_the_empty_and_order+0x448>)
 80017a6:	78db      	ldrb	r3, [r3, #3]
 80017a8:	2b70      	cmp	r3, #112	; 0x70
 80017aa:	d117      	bne.n	80017dc <judge_the_empty_and_order+0x410>
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <judge_the_empty_and_order+0x448>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b62      	cmp	r3, #98	; 0x62
 80017b2:	d113      	bne.n	80017dc <judge_the_empty_and_order+0x410>
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <judge_the_empty_and_order+0x448>)
 80017b6:	785b      	ldrb	r3, [r3, #1]
 80017b8:	2b79      	cmp	r3, #121	; 0x79
 80017ba:	d10f      	bne.n	80017dc <judge_the_empty_and_order+0x410>
			cake_order = 4;
 80017bc:	4b16      	ldr	r3, [pc, #88]	; (8001818 <judge_the_empty_and_order+0x44c>)
 80017be:	2204      	movs	r2, #4
 80017c0:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <judge_the_empty_and_order+0x450>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <judge_the_empty_and_order+0x450>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <judge_the_empty_and_order+0x450>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <judge_the_empty_and_order+0x450>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	811a      	strh	r2, [r3, #8]
 80017da:	e0f3      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
		else if (hole[3] == 'b' && hole[0] == 'p' && hole[1] == 'y') {
 80017dc:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <judge_the_empty_and_order+0x448>)
 80017de:	78db      	ldrb	r3, [r3, #3]
 80017e0:	2b62      	cmp	r3, #98	; 0x62
 80017e2:	d121      	bne.n	8001828 <judge_the_empty_and_order+0x45c>
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <judge_the_empty_and_order+0x448>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b70      	cmp	r3, #112	; 0x70
 80017ea:	d11d      	bne.n	8001828 <judge_the_empty_and_order+0x45c>
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <judge_the_empty_and_order+0x448>)
 80017ee:	785b      	ldrb	r3, [r3, #1]
 80017f0:	2b79      	cmp	r3, #121	; 0x79
 80017f2:	d119      	bne.n	8001828 <judge_the_empty_and_order+0x45c>
			cake_order = 5;
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <judge_the_empty_and_order+0x44c>)
 80017f6:	2205      	movs	r2, #5
 80017f8:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <judge_the_empty_and_order+0x450>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <judge_the_empty_and_order+0x450>)
 8001802:	2200      	movs	r2, #0
 8001804:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001806:	4b05      	ldr	r3, [pc, #20]	; (800181c <judge_the_empty_and_order+0x450>)
 8001808:	2201      	movs	r2, #1
 800180a:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <judge_the_empty_and_order+0x450>)
 800180e:	2201      	movs	r2, #1
 8001810:	811a      	strh	r2, [r3, #8]
 8001812:	e0d7      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
 8001814:	20000b54 	.word	0x20000b54
 8001818:	20000004 	.word	0x20000004
 800181c:	20000b8c 	.word	0x20000b8c
 8001820:	20000144 	.word	0x20000144
 8001824:	20000af8 	.word	0x20000af8
		}
		else if (hole[3] == 'y' && hole[0] == 'p' && hole[1] == 'b') {
 8001828:	4b6b      	ldr	r3, [pc, #428]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 800182a:	78db      	ldrb	r3, [r3, #3]
 800182c:	2b79      	cmp	r3, #121	; 0x79
 800182e:	f040 80c9 	bne.w	80019c4 <judge_the_empty_and_order+0x5f8>
 8001832:	4b69      	ldr	r3, [pc, #420]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b70      	cmp	r3, #112	; 0x70
 8001838:	f040 80c4 	bne.w	80019c4 <judge_the_empty_and_order+0x5f8>
 800183c:	4b66      	ldr	r3, [pc, #408]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 800183e:	785b      	ldrb	r3, [r3, #1]
 8001840:	2b62      	cmp	r3, #98	; 0x62
 8001842:	f040 80bf 	bne.w	80019c4 <judge_the_empty_and_order+0x5f8>
			cake_order = 6;
 8001846:	4b65      	ldr	r3, [pc, #404]	; (80019dc <judge_the_empty_and_order+0x610>)
 8001848:	2206      	movs	r2, #6
 800184a:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800184c:	4b64      	ldr	r3, [pc, #400]	; (80019e0 <judge_the_empty_and_order+0x614>)
 800184e:	2201      	movs	r2, #1
 8001850:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8001852:	4b63      	ldr	r3, [pc, #396]	; (80019e0 <judge_the_empty_and_order+0x614>)
 8001854:	2201      	movs	r2, #1
 8001856:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001858:	4b61      	ldr	r3, [pc, #388]	; (80019e0 <judge_the_empty_and_order+0x614>)
 800185a:	2201      	movs	r2, #1
 800185c:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 800185e:	4b60      	ldr	r3, [pc, #384]	; (80019e0 <judge_the_empty_and_order+0x614>)
 8001860:	2200      	movs	r2, #0
 8001862:	811a      	strh	r2, [r3, #8]
 8001864:	e0ae      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
	}
	else if (num == 4) {
 8001866:	4b5f      	ldr	r3, [pc, #380]	; (80019e4 <judge_the_empty_and_order+0x618>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b04      	cmp	r3, #4
 800186c:	f040 80aa 	bne.w	80019c4 <judge_the_empty_and_order+0x5f8>
		anglebefore = 0;
 8001870:	4b5d      	ldr	r3, [pc, #372]	; (80019e8 <judge_the_empty_and_order+0x61c>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
		if (hole[0] == 'b' && hole[1] == 'y' && hole[2] == 'p') {
 8001876:	4b58      	ldr	r3, [pc, #352]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b62      	cmp	r3, #98	; 0x62
 800187c:	d117      	bne.n	80018ae <judge_the_empty_and_order+0x4e2>
 800187e:	4b56      	ldr	r3, [pc, #344]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 8001880:	785b      	ldrb	r3, [r3, #1]
 8001882:	2b79      	cmp	r3, #121	; 0x79
 8001884:	d113      	bne.n	80018ae <judge_the_empty_and_order+0x4e2>
 8001886:	4b54      	ldr	r3, [pc, #336]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 8001888:	789b      	ldrb	r3, [r3, #2]
 800188a:	2b70      	cmp	r3, #112	; 0x70
 800188c:	d10f      	bne.n	80018ae <judge_the_empty_and_order+0x4e2>
			cake_order = 1;
 800188e:	4b53      	ldr	r3, [pc, #332]	; (80019dc <judge_the_empty_and_order+0x610>)
 8001890:	2201      	movs	r2, #1
 8001892:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8001894:	4b52      	ldr	r3, [pc, #328]	; (80019e0 <judge_the_empty_and_order+0x614>)
 8001896:	2201      	movs	r2, #1
 8001898:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 800189a:	4b51      	ldr	r3, [pc, #324]	; (80019e0 <judge_the_empty_and_order+0x614>)
 800189c:	2201      	movs	r2, #1
 800189e:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 80018a0:	4b4f      	ldr	r3, [pc, #316]	; (80019e0 <judge_the_empty_and_order+0x614>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80018a6:	4b4e      	ldr	r3, [pc, #312]	; (80019e0 <judge_the_empty_and_order+0x614>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	811a      	strh	r2, [r3, #8]
 80018ac:	e08a      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
		else if (hole[0] == 'p' && hole[1] == 'y' && hole[2] == 'b') {
 80018ae:	4b4a      	ldr	r3, [pc, #296]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b70      	cmp	r3, #112	; 0x70
 80018b4:	d117      	bne.n	80018e6 <judge_the_empty_and_order+0x51a>
 80018b6:	4b48      	ldr	r3, [pc, #288]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 80018b8:	785b      	ldrb	r3, [r3, #1]
 80018ba:	2b79      	cmp	r3, #121	; 0x79
 80018bc:	d113      	bne.n	80018e6 <judge_the_empty_and_order+0x51a>
 80018be:	4b46      	ldr	r3, [pc, #280]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 80018c0:	789b      	ldrb	r3, [r3, #2]
 80018c2:	2b62      	cmp	r3, #98	; 0x62
 80018c4:	d10f      	bne.n	80018e6 <judge_the_empty_and_order+0x51a>
			cake_order = 2;
 80018c6:	4b45      	ldr	r3, [pc, #276]	; (80019dc <judge_the_empty_and_order+0x610>)
 80018c8:	2202      	movs	r2, #2
 80018ca:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 80018cc:	4b44      	ldr	r3, [pc, #272]	; (80019e0 <judge_the_empty_and_order+0x614>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80018d2:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <judge_the_empty_and_order+0x614>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80018d8:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <judge_the_empty_and_order+0x614>)
 80018da:	2201      	movs	r2, #1
 80018dc:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80018de:	4b40      	ldr	r3, [pc, #256]	; (80019e0 <judge_the_empty_and_order+0x614>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	811a      	strh	r2, [r3, #8]
 80018e4:	e06e      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
		else if (hole[0] == 'y' && hole[1] == 'b' && hole[2] == 'p') {
 80018e6:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b79      	cmp	r3, #121	; 0x79
 80018ec:	d117      	bne.n	800191e <judge_the_empty_and_order+0x552>
 80018ee:	4b3a      	ldr	r3, [pc, #232]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 80018f0:	785b      	ldrb	r3, [r3, #1]
 80018f2:	2b62      	cmp	r3, #98	; 0x62
 80018f4:	d113      	bne.n	800191e <judge_the_empty_and_order+0x552>
 80018f6:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 80018f8:	789b      	ldrb	r3, [r3, #2]
 80018fa:	2b70      	cmp	r3, #112	; 0x70
 80018fc:	d10f      	bne.n	800191e <judge_the_empty_and_order+0x552>
			cake_order = 3;
 80018fe:	4b37      	ldr	r3, [pc, #220]	; (80019dc <judge_the_empty_and_order+0x610>)
 8001900:	2203      	movs	r2, #3
 8001902:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 8001904:	4b36      	ldr	r3, [pc, #216]	; (80019e0 <judge_the_empty_and_order+0x614>)
 8001906:	2200      	movs	r2, #0
 8001908:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 800190a:	4b35      	ldr	r3, [pc, #212]	; (80019e0 <judge_the_empty_and_order+0x614>)
 800190c:	2201      	movs	r2, #1
 800190e:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001910:	4b33      	ldr	r3, [pc, #204]	; (80019e0 <judge_the_empty_and_order+0x614>)
 8001912:	2201      	movs	r2, #1
 8001914:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8001916:	4b32      	ldr	r3, [pc, #200]	; (80019e0 <judge_the_empty_and_order+0x614>)
 8001918:	2201      	movs	r2, #1
 800191a:	811a      	strh	r2, [r3, #8]
 800191c:	e052      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
		else if (hole[0] == 'p' && hole[1] == 'b' && hole[2] == 'y') {
 800191e:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b70      	cmp	r3, #112	; 0x70
 8001924:	d117      	bne.n	8001956 <judge_the_empty_and_order+0x58a>
 8001926:	4b2c      	ldr	r3, [pc, #176]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 8001928:	785b      	ldrb	r3, [r3, #1]
 800192a:	2b62      	cmp	r3, #98	; 0x62
 800192c:	d113      	bne.n	8001956 <judge_the_empty_and_order+0x58a>
 800192e:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 8001930:	789b      	ldrb	r3, [r3, #2]
 8001932:	2b79      	cmp	r3, #121	; 0x79
 8001934:	d10f      	bne.n	8001956 <judge_the_empty_and_order+0x58a>
			cake_order = 4;
 8001936:	4b29      	ldr	r3, [pc, #164]	; (80019dc <judge_the_empty_and_order+0x610>)
 8001938:	2204      	movs	r2, #4
 800193a:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800193c:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <judge_the_empty_and_order+0x614>)
 800193e:	2201      	movs	r2, #1
 8001940:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8001942:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <judge_the_empty_and_order+0x614>)
 8001944:	2201      	movs	r2, #1
 8001946:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 8001948:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <judge_the_empty_and_order+0x614>)
 800194a:	2200      	movs	r2, #0
 800194c:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 800194e:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <judge_the_empty_and_order+0x614>)
 8001950:	2201      	movs	r2, #1
 8001952:	811a      	strh	r2, [r3, #8]
 8001954:	e036      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
		else if (hole[0] == 'b' && hole[1] == 'p' && hole[2] == 'y') {
 8001956:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b62      	cmp	r3, #98	; 0x62
 800195c:	d117      	bne.n	800198e <judge_the_empty_and_order+0x5c2>
 800195e:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 8001960:	785b      	ldrb	r3, [r3, #1]
 8001962:	2b70      	cmp	r3, #112	; 0x70
 8001964:	d113      	bne.n	800198e <judge_the_empty_and_order+0x5c2>
 8001966:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 8001968:	789b      	ldrb	r3, [r3, #2]
 800196a:	2b79      	cmp	r3, #121	; 0x79
 800196c:	d10f      	bne.n	800198e <judge_the_empty_and_order+0x5c2>
			cake_order = 5;
 800196e:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <judge_the_empty_and_order+0x610>)
 8001970:	2205      	movs	r2, #5
 8001972:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8001974:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <judge_the_empty_and_order+0x614>)
 8001976:	2201      	movs	r2, #1
 8001978:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <judge_the_empty_and_order+0x614>)
 800197c:	2200      	movs	r2, #0
 800197e:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <judge_the_empty_and_order+0x614>)
 8001982:	2201      	movs	r2, #1
 8001984:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <judge_the_empty_and_order+0x614>)
 8001988:	2201      	movs	r2, #1
 800198a:	811a      	strh	r2, [r3, #8]
 800198c:	e01a      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
		}
		else if (hole[0] == 'y' && hole[1] == 'p' && hole[2] == 'b') {
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b79      	cmp	r3, #121	; 0x79
 8001994:	d116      	bne.n	80019c4 <judge_the_empty_and_order+0x5f8>
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 8001998:	785b      	ldrb	r3, [r3, #1]
 800199a:	2b70      	cmp	r3, #112	; 0x70
 800199c:	d112      	bne.n	80019c4 <judge_the_empty_and_order+0x5f8>
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <judge_the_empty_and_order+0x60c>)
 80019a0:	789b      	ldrb	r3, [r3, #2]
 80019a2:	2b62      	cmp	r3, #98	; 0x62
 80019a4:	d10e      	bne.n	80019c4 <judge_the_empty_and_order+0x5f8>
			cake_order = 6;
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <judge_the_empty_and_order+0x610>)
 80019a8:	2206      	movs	r2, #6
 80019aa:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <judge_the_empty_and_order+0x614>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <judge_the_empty_and_order+0x614>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <judge_the_empty_and_order+0x614>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <judge_the_empty_and_order+0x614>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	811a      	strh	r2, [r3, #8]
		}
	}
	while (1) {
		if (step1 == 0)
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <judge_the_empty_and_order+0x620>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d000      	beq.n	80019ce <judge_the_empty_and_order+0x602>
 80019cc:	e7fa      	b.n	80019c4 <judge_the_empty_and_order+0x5f8>
			break;
 80019ce:	bf00      	nop
	}
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000b54 	.word	0x20000b54
 80019dc:	20000004 	.word	0x20000004
 80019e0:	20000b8c 	.word	0x20000b8c
 80019e4:	20000144 	.word	0x20000144
 80019e8:	20000af8 	.word	0x20000af8
 80019ec:	20000aec 	.word	0x20000aec

080019f0 <Tower_of_Hanoi>:
int tower_step = 0;
void Tower_of_Hanoi(int cake_order) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	if (cake_order == -1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fe:	f000 830a 	beq.w	8002016 <Tower_of_Hanoi+0x626>
		return;

	suck_the_cake(1, 1);
 8001a02:	2101      	movs	r1, #1
 8001a04:	2001      	movs	r0, #1
 8001a06:	f7ff faf1 	bl	8000fec <suck_the_cake>
	suck_the_cake(4, 1);
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	2004      	movs	r0, #4
 8001a0e:	f7ff faed 	bl	8000fec <suck_the_cake>
	suck_the_cake(3, 1);
 8001a12:	2101      	movs	r1, #1
 8001a14:	2003      	movs	r0, #3
 8001a16:	f7ff fae9 	bl	8000fec <suck_the_cake>
	press_sensor_feedback();
 8001a1a:	f7ff fb67 	bl	80010ec <press_sensor_feedback>
	if (cake_order == 1) {
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	f040 8097 	bne.w	8001b54 <Tower_of_Hanoi+0x164>
		rotate_the_ring(5);
 8001a26:	2005      	movs	r0, #5
 8001a28:	f7ff fc1a 	bl	8001260 <rotate_the_ring>
		tower_step = 1;
 8001a2c:	4bc2      	ldr	r3, [pc, #776]	; (8001d38 <Tower_of_Hanoi+0x348>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

		unsuck_the_cake(1, 3);
 8001a32:	2103      	movs	r1, #3
 8001a34:	2001      	movs	r0, #1
 8001a36:	f7ff fb91 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001a3a:	f7ff fb57 	bl	80010ec <press_sensor_feedback>
		tower_step = 2;
 8001a3e:	4bbe      	ldr	r3, [pc, #760]	; (8001d38 <Tower_of_Hanoi+0x348>)
 8001a40:	2202      	movs	r2, #2
 8001a42:	601a      	str	r2, [r3, #0]

		rotate_the_ring(6);
 8001a44:	2006      	movs	r0, #6
 8001a46:	f7ff fc0b 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	2004      	movs	r0, #4
 8001a4e:	f7ff fb85 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001a52:	f7ff fb4b 	bl	80010ec <press_sensor_feedback>
		tower_step = 3;
 8001a56:	4bb8      	ldr	r3, [pc, #736]	; (8001d38 <Tower_of_Hanoi+0x348>)
 8001a58:	2203      	movs	r2, #3
 8001a5a:	601a      	str	r2, [r3, #0]

		rotate_the_ring(7);
 8001a5c:	2007      	movs	r0, #7
 8001a5e:	f7ff fbff 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8001a62:	2101      	movs	r1, #1
 8001a64:	2003      	movs	r0, #3
 8001a66:	f7ff fb79 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001a6a:	f7ff fb3f 	bl	80010ec <press_sensor_feedback>
		tower_step = 4;
 8001a6e:	4bb2      	ldr	r3, [pc, #712]	; (8001d38 <Tower_of_Hanoi+0x348>)
 8001a70:	2204      	movs	r2, #4
 8001a72:	601a      	str	r2, [r3, #0]

		rotate_the_ring(1);
 8001a74:	2001      	movs	r0, #1
 8001a76:	f7ff fbf3 	bl	8001260 <rotate_the_ring>
		suck_the_cake(1, 2);
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	f7ff fab5 	bl	8000fec <suck_the_cake>
		suck_the_cake(4, 2);
 8001a82:	2102      	movs	r1, #2
 8001a84:	2004      	movs	r0, #4
 8001a86:	f7ff fab1 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 2);
 8001a8a:	2102      	movs	r1, #2
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f7ff faad 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001a92:	f7ff fb2b 	bl	80010ec <press_sensor_feedback>
		tower_step = 5;
 8001a96:	4ba8      	ldr	r3, [pc, #672]	; (8001d38 <Tower_of_Hanoi+0x348>)
 8001a98:	2205      	movs	r2, #5
 8001a9a:	601a      	str	r2, [r3, #0]

		rotate_the_ring(5);
 8001a9c:	2005      	movs	r0, #5
 8001a9e:	f7ff fbdf 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8001aa2:	2102      	movs	r1, #2
 8001aa4:	2004      	movs	r0, #4
 8001aa6:	f7ff fb59 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001aaa:	f7ff fb1f 	bl	80010ec <press_sensor_feedback>
		tower_step = 6;
 8001aae:	4ba2      	ldr	r3, [pc, #648]	; (8001d38 <Tower_of_Hanoi+0x348>)
 8001ab0:	2206      	movs	r2, #6
 8001ab2:	601a      	str	r2, [r3, #0]

		rotate_the_ring(6);
 8001ab4:	2006      	movs	r0, #6
 8001ab6:	f7ff fbd3 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8001aba:	2101      	movs	r1, #1
 8001abc:	2003      	movs	r0, #3
 8001abe:	f7ff fb4d 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001ac2:	f7ff fb13 	bl	80010ec <press_sensor_feedback>
		tower_step = 7;
 8001ac6:	4b9c      	ldr	r3, [pc, #624]	; (8001d38 <Tower_of_Hanoi+0x348>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]

		rotate_the_ring(1);
 8001acc:	2001      	movs	r0, #1
 8001ace:	f7ff fbc7 	bl	8001260 <rotate_the_ring>
		suck_the_cake(4, 3);
 8001ad2:	2103      	movs	r1, #3
 8001ad4:	2004      	movs	r0, #4
 8001ad6:	f7ff fa89 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 3);
 8001ada:	2103      	movs	r1, #3
 8001adc:	2003      	movs	r0, #3
 8001ade:	f7ff fa85 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001ae2:	f7ff fb03 	bl	80010ec <press_sensor_feedback>
		tower_step = 8;
 8001ae6:	4b94      	ldr	r3, [pc, #592]	; (8001d38 <Tower_of_Hanoi+0x348>)
 8001ae8:	2208      	movs	r2, #8
 8001aea:	601a      	str	r2, [r3, #0]

		rotate_the_ring(2);
 8001aec:	2002      	movs	r0, #2
 8001aee:	f7ff fbb7 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(1, 3);
 8001af2:	2103      	movs	r1, #3
 8001af4:	2001      	movs	r0, #1
 8001af6:	f7ff fb31 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001afa:	f7ff faf7 	bl	80010ec <press_sensor_feedback>
		tower_step = 9;
 8001afe:	4b8e      	ldr	r3, [pc, #568]	; (8001d38 <Tower_of_Hanoi+0x348>)
 8001b00:	2209      	movs	r2, #9
 8001b02:	601a      	str	r2, [r3, #0]

		rotate_the_ring(1);
 8001b04:	2001      	movs	r0, #1
 8001b06:	f7ff fbab 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	2004      	movs	r0, #4
 8001b0e:	f7ff fb25 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001b12:	f7ff faeb 	bl	80010ec <press_sensor_feedback>
		tower_step = 10;
 8001b16:	4b88      	ldr	r3, [pc, #544]	; (8001d38 <Tower_of_Hanoi+0x348>)
 8001b18:	220a      	movs	r2, #10
 8001b1a:	601a      	str	r2, [r3, #0]

		rotate_the_ring(5);
 8001b1c:	2005      	movs	r0, #5
 8001b1e:	f7ff fb9f 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8001b22:	2101      	movs	r1, #1
 8001b24:	2003      	movs	r0, #3
 8001b26:	f7ff fb19 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001b2a:	f7ff fadf 	bl	80010ec <press_sensor_feedback>
		tower_step = 11;
 8001b2e:	4b82      	ldr	r3, [pc, #520]	; (8001d38 <Tower_of_Hanoi+0x348>)
 8001b30:	220b      	movs	r2, #11
 8001b32:	601a      	str	r2, [r3, #0]
		put_the_cherry(1);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f7ff fc2f 	bl	8001398 <put_the_cherry>
		put_the_cherry(2);
 8001b3a:	2002      	movs	r0, #2
 8001b3c:	f7ff fc2c 	bl	8001398 <put_the_cherry>
		put_the_cherry(3);
 8001b40:	2003      	movs	r0, #3
 8001b42:	f7ff fc29 	bl	8001398 <put_the_cherry>
		mission_array[0] = 1;
 8001b46:	4b7d      	ldr	r3, [pc, #500]	; (8001d3c <Tower_of_Hanoi+0x34c>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	801a      	strh	r2, [r3, #0]
		rotate_the_ring(1);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f7ff fb87 	bl	8001260 <rotate_the_ring>
 8001b52:	e261      	b.n	8002018 <Tower_of_Hanoi+0x628>
	}

	else if (cake_order == 2) {
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d175      	bne.n	8001c46 <Tower_of_Hanoi+0x256>
		rotate_the_ring(2);
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	f7ff fb80 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(3, 3);
 8001b60:	2103      	movs	r1, #3
 8001b62:	2003      	movs	r0, #3
 8001b64:	f7ff fafa 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001b68:	f7ff fac0 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(3);
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f7ff fb77 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8001b72:	2102      	movs	r1, #2
 8001b74:	2004      	movs	r0, #4
 8001b76:	f7ff faf1 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001b7a:	f7ff fab7 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(4);
 8001b7e:	2004      	movs	r0, #4
 8001b80:	f7ff fb6e 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(1, 1);
 8001b84:	2101      	movs	r1, #1
 8001b86:	2001      	movs	r0, #1
 8001b88:	f7ff fae8 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001b8c:	f7ff faae 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f7ff fb65 	bl	8001260 <rotate_the_ring>
		suck_the_cake(1, 2);
 8001b96:	2102      	movs	r1, #2
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f7ff fa27 	bl	8000fec <suck_the_cake>
		suck_the_cake(4, 2);
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	2004      	movs	r0, #4
 8001ba2:	f7ff fa23 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 2);
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f7ff fa1f 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001bae:	f7ff fa9d 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(2);
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	f7ff fb54 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8001bb8:	2102      	movs	r1, #2
 8001bba:	2004      	movs	r0, #4
 8001bbc:	f7ff face 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001bc0:	f7ff fa94 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(3);
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f7ff fb4b 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(1, 1);
 8001bca:	2101      	movs	r1, #1
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f7ff fac5 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001bd2:	f7ff fa8b 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f7ff fb42 	bl	8001260 <rotate_the_ring>
		suck_the_cake(4, 3);
 8001bdc:	2103      	movs	r1, #3
 8001bde:	2004      	movs	r0, #4
 8001be0:	f7ff fa04 	bl	8000fec <suck_the_cake>
		suck_the_cake(1, 3);
 8001be4:	2103      	movs	r1, #3
 8001be6:	2001      	movs	r0, #1
 8001be8:	f7ff fa00 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001bec:	f7ff fa7e 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(5);
 8001bf0:	2005      	movs	r0, #5
 8001bf2:	f7ff fb35 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(3, 3);
 8001bf6:	2103      	movs	r1, #3
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f7ff faaf 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001bfe:	f7ff fa75 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001c02:	2001      	movs	r0, #1
 8001c04:	f7ff fb2c 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8001c08:	2102      	movs	r1, #2
 8001c0a:	2004      	movs	r0, #4
 8001c0c:	f7ff faa6 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001c10:	f7ff fa6c 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(2);
 8001c14:	2002      	movs	r0, #2
 8001c16:	f7ff fb23 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(1, 1);
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7ff fa9d 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001c22:	f7ff fa63 	bl	80010ec <press_sensor_feedback>
		put_the_cherry(1);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f7ff fbb6 	bl	8001398 <put_the_cherry>
		put_the_cherry(5);
 8001c2c:	2005      	movs	r0, #5
 8001c2e:	f7ff fbb3 	bl	8001398 <put_the_cherry>
		put_the_cherry(6);
 8001c32:	2006      	movs	r0, #6
 8001c34:	f7ff fbb0 	bl	8001398 <put_the_cherry>
		mission_array[0] = 1;
 8001c38:	4b40      	ldr	r3, [pc, #256]	; (8001d3c <Tower_of_Hanoi+0x34c>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	801a      	strh	r2, [r3, #0]
		rotate_the_ring(1);
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f7ff fb0e 	bl	8001260 <rotate_the_ring>
 8001c44:	e1e8      	b.n	8002018 <Tower_of_Hanoi+0x628>
	}

	else if (cake_order == 3) {
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d179      	bne.n	8001d40 <Tower_of_Hanoi+0x350>
		rotate_the_ring(3);
 8001c4c:	2003      	movs	r0, #3
 8001c4e:	f7ff fb07 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(4, 3);
 8001c52:	2103      	movs	r1, #3
 8001c54:	2004      	movs	r0, #4
 8001c56:	f7ff fa81 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001c5a:	f7ff fa47 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(4);
 8001c5e:	2004      	movs	r0, #4
 8001c60:	f7ff fafe 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(1, 2);
 8001c64:	2102      	movs	r1, #2
 8001c66:	2001      	movs	r0, #1
 8001c68:	f7ff fa78 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001c6c:	f7ff fa3e 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(2);
 8001c70:	2002      	movs	r0, #2
 8001c72:	f7ff faf5 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8001c76:	2101      	movs	r1, #1
 8001c78:	2003      	movs	r0, #3
 8001c7a:	f7ff fa6f 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001c7e:	f7ff fa35 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001c82:	2001      	movs	r0, #1
 8001c84:	f7ff faec 	bl	8001260 <rotate_the_ring>
		suck_the_cake(1, 2);
 8001c88:	2102      	movs	r1, #2
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f7ff f9ae 	bl	8000fec <suck_the_cake>
		suck_the_cake(4, 2);
 8001c90:	2102      	movs	r1, #2
 8001c92:	2004      	movs	r0, #4
 8001c94:	f7ff f9aa 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 2);
 8001c98:	2102      	movs	r1, #2
 8001c9a:	2003      	movs	r0, #3
 8001c9c:	f7ff f9a6 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001ca0:	f7ff fa24 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(2);
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f7ff fadb 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(1, 2);
 8001caa:	2102      	movs	r1, #2
 8001cac:	2001      	movs	r0, #1
 8001cae:	f7ff fa55 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001cb2:	f7ff fa1b 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(5);
 8001cb6:	2005      	movs	r0, #5
 8001cb8:	f7ff fad2 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	2003      	movs	r0, #3
 8001cc0:	f7ff fa4c 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001cc4:	f7ff fa12 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f7ff fac9 	bl	8001260 <rotate_the_ring>
		suck_the_cake(1, 3);
 8001cce:	2103      	movs	r1, #3
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f7ff f98b 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 3);
 8001cd6:	2103      	movs	r1, #3
 8001cd8:	2003      	movs	r0, #3
 8001cda:	f7ff f987 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001cde:	f7ff fa05 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(2);
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f7ff fabc 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(4, 3);
 8001ce8:	2103      	movs	r1, #3
 8001cea:	2004      	movs	r0, #4
 8001cec:	f7ff fa36 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001cf0:	f7ff f9fc 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(3);
 8001cf4:	2003      	movs	r0, #3
 8001cf6:	f7ff fab3 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(1, 2);
 8001cfa:	2102      	movs	r1, #2
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f7ff fa2d 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001d02:	f7ff f9f3 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f7ff faaa 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	2003      	movs	r0, #3
 8001d10:	f7ff fa24 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001d14:	f7ff f9ea 	bl	80010ec <press_sensor_feedback>
		put_the_cherry(1);
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f7ff fb3d 	bl	8001398 <put_the_cherry>
		put_the_cherry(5);
 8001d1e:	2005      	movs	r0, #5
 8001d20:	f7ff fb3a 	bl	8001398 <put_the_cherry>
		put_the_cherry(6);
 8001d24:	2006      	movs	r0, #6
 8001d26:	f7ff fb37 	bl	8001398 <put_the_cherry>
		mission_array[0] = 1;
 8001d2a:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <Tower_of_Hanoi+0x34c>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	801a      	strh	r2, [r3, #0]
		rotate_the_ring(1);
 8001d30:	2001      	movs	r0, #1
 8001d32:	f7ff fa95 	bl	8001260 <rotate_the_ring>
 8001d36:	e16f      	b.n	8002018 <Tower_of_Hanoi+0x628>
 8001d38:	20000148 	.word	0x20000148
 8001d3c:	20000b8c 	.word	0x20000b8c
	}

	else if (cake_order == 4) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d175      	bne.n	8001e32 <Tower_of_Hanoi+0x442>
		rotate_the_ring(6);
 8001d46:	2006      	movs	r0, #6
 8001d48:	f7ff fa8a 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(4, 3);
 8001d4c:	2103      	movs	r1, #3
 8001d4e:	2004      	movs	r0, #4
 8001d50:	f7ff fa04 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001d54:	f7ff f9ca 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(7);
 8001d58:	2007      	movs	r0, #7
 8001d5a:	f7ff fa81 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(3, 2);
 8001d5e:	2102      	movs	r1, #2
 8001d60:	2003      	movs	r0, #3
 8001d62:	f7ff f9fb 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001d66:	f7ff f9c1 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(5);
 8001d6a:	2005      	movs	r0, #5
 8001d6c:	f7ff fa78 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(1, 1);
 8001d70:	2101      	movs	r1, #1
 8001d72:	2001      	movs	r0, #1
 8001d74:	f7ff f9f2 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001d78:	f7ff f9b8 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff fa6f 	bl	8001260 <rotate_the_ring>
		suck_the_cake(1, 2);
 8001d82:	2102      	movs	r1, #2
 8001d84:	2001      	movs	r0, #1
 8001d86:	f7ff f931 	bl	8000fec <suck_the_cake>
		suck_the_cake(4, 2);
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	2004      	movs	r0, #4
 8001d8e:	f7ff f92d 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 2);
 8001d92:	2102      	movs	r1, #2
 8001d94:	2003      	movs	r0, #3
 8001d96:	f7ff f929 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001d9a:	f7ff f9a7 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(5);
 8001d9e:	2005      	movs	r0, #5
 8001da0:	f7ff fa5e 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(3, 2);
 8001da4:	2102      	movs	r1, #2
 8001da6:	2003      	movs	r0, #3
 8001da8:	f7ff f9d8 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001dac:	f7ff f99e 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(2);
 8001db0:	2002      	movs	r0, #2
 8001db2:	f7ff fa55 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(1, 1);
 8001db6:	2101      	movs	r1, #1
 8001db8:	2001      	movs	r0, #1
 8001dba:	f7ff f9cf 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001dbe:	f7ff f995 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f7ff fa4c 	bl	8001260 <rotate_the_ring>
		suck_the_cake(1, 3);
 8001dc8:	2103      	movs	r1, #3
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f7ff f90e 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 3);
 8001dd0:	2103      	movs	r1, #3
 8001dd2:	2003      	movs	r0, #3
 8001dd4:	f7ff f90a 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001dd8:	f7ff f988 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(5);
 8001ddc:	2005      	movs	r0, #5
 8001dde:	f7ff fa3f 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(4, 3);
 8001de2:	2103      	movs	r1, #3
 8001de4:	2004      	movs	r0, #4
 8001de6:	f7ff f9b9 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001dea:	f7ff f97f 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(6);
 8001dee:	2006      	movs	r0, #6
 8001df0:	f7ff fa36 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(3, 2);
 8001df4:	2102      	movs	r1, #2
 8001df6:	2003      	movs	r0, #3
 8001df8:	f7ff f9b0 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001dfc:	f7ff f976 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001e00:	2001      	movs	r0, #1
 8001e02:	f7ff fa2d 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(1, 1);
 8001e06:	2101      	movs	r1, #1
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f7ff f9a7 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001e0e:	f7ff f96d 	bl	80010ec <press_sensor_feedback>
		put_the_cherry(1);
 8001e12:	2001      	movs	r0, #1
 8001e14:	f7ff fac0 	bl	8001398 <put_the_cherry>
		put_the_cherry(2);
 8001e18:	2002      	movs	r0, #2
 8001e1a:	f7ff fabd 	bl	8001398 <put_the_cherry>
		put_the_cherry(3);
 8001e1e:	2003      	movs	r0, #3
 8001e20:	f7ff faba 	bl	8001398 <put_the_cherry>
		mission_array[0] = 1;
 8001e24:	4b7e      	ldr	r3, [pc, #504]	; (8002020 <Tower_of_Hanoi+0x630>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	801a      	strh	r2, [r3, #0]
		rotate_the_ring(1);
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f7ff fa18 	bl	8001260 <rotate_the_ring>
 8001e30:	e0f2      	b.n	8002018 <Tower_of_Hanoi+0x628>
	}

	else if (cake_order == 5) {
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d175      	bne.n	8001f24 <Tower_of_Hanoi+0x534>
		rotate_the_ring(5);
 8001e38:	2005      	movs	r0, #5
 8001e3a:	f7ff fa11 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(1, 3);
 8001e3e:	2103      	movs	r1, #3
 8001e40:	2001      	movs	r0, #1
 8001e42:	f7ff f98b 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001e46:	f7ff f951 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(7);
 8001e4a:	2007      	movs	r0, #7
 8001e4c:	f7ff fa08 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(3, 2);
 8001e50:	2102      	movs	r1, #2
 8001e52:	2003      	movs	r0, #3
 8001e54:	f7ff f982 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001e58:	f7ff f948 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(6);
 8001e5c:	2006      	movs	r0, #6
 8001e5e:	f7ff f9ff 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 8001e62:	2101      	movs	r1, #1
 8001e64:	2004      	movs	r0, #4
 8001e66:	f7ff f979 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001e6a:	f7ff f93f 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f7ff f9f6 	bl	8001260 <rotate_the_ring>
		suck_the_cake(1, 2);
 8001e74:	2102      	movs	r1, #2
 8001e76:	2001      	movs	r0, #1
 8001e78:	f7ff f8b8 	bl	8000fec <suck_the_cake>
		suck_the_cake(4, 2);
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	2004      	movs	r0, #4
 8001e80:	f7ff f8b4 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 2);
 8001e84:	2102      	movs	r1, #2
 8001e86:	2003      	movs	r0, #3
 8001e88:	f7ff f8b0 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001e8c:	f7ff f92e 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(6);
 8001e90:	2006      	movs	r0, #6
 8001e92:	f7ff f9e5 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(3, 2);
 8001e96:	2102      	movs	r1, #2
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f7ff f95f 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001e9e:	f7ff f925 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(5);
 8001ea2:	2005      	movs	r0, #5
 8001ea4:	f7ff f9dc 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	2004      	movs	r0, #4
 8001eac:	f7ff f956 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001eb0:	f7ff f91c 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f7ff f9d3 	bl	8001260 <rotate_the_ring>
		suck_the_cake(4, 3);
 8001eba:	2103      	movs	r1, #3
 8001ebc:	2004      	movs	r0, #4
 8001ebe:	f7ff f895 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 3);
 8001ec2:	2103      	movs	r1, #3
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	f7ff f891 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001eca:	f7ff f90f 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(2);
 8001ece:	2002      	movs	r0, #2
 8001ed0:	f7ff f9c6 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(1, 3);
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f7ff f940 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001edc:	f7ff f906 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(5);
 8001ee0:	2005      	movs	r0, #5
 8001ee2:	f7ff f9bd 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(3, 2);
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f7ff f937 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001eee:	f7ff f8fd 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f7ff f9b4 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 8001ef8:	2101      	movs	r1, #1
 8001efa:	2004      	movs	r0, #4
 8001efc:	f7ff f92e 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001f00:	f7ff f8f4 	bl	80010ec <press_sensor_feedback>
		put_the_cherry(1);
 8001f04:	2001      	movs	r0, #1
 8001f06:	f7ff fa47 	bl	8001398 <put_the_cherry>
		put_the_cherry(2);
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	f7ff fa44 	bl	8001398 <put_the_cherry>
		put_the_cherry(3);
 8001f10:	2003      	movs	r0, #3
 8001f12:	f7ff fa41 	bl	8001398 <put_the_cherry>
		mission_array[0] = 1;
 8001f16:	4b42      	ldr	r3, [pc, #264]	; (8002020 <Tower_of_Hanoi+0x630>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	801a      	strh	r2, [r3, #0]
		rotate_the_ring(1);
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f7ff f99f 	bl	8001260 <rotate_the_ring>
 8001f22:	e079      	b.n	8002018 <Tower_of_Hanoi+0x628>
	}

	else if (cake_order == 6) {
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b06      	cmp	r3, #6
 8001f28:	d176      	bne.n	8002018 <Tower_of_Hanoi+0x628>
		rotate_the_ring(2);
 8001f2a:	2002      	movs	r0, #2
 8001f2c:	f7ff f998 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(3, 3);
 8001f30:	2103      	movs	r1, #3
 8001f32:	2003      	movs	r0, #3
 8001f34:	f7ff f912 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001f38:	f7ff f8d8 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(4);
 8001f3c:	2004      	movs	r0, #4
 8001f3e:	f7ff f98f 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(1, 2);
 8001f42:	2102      	movs	r1, #2
 8001f44:	2001      	movs	r0, #1
 8001f46:	f7ff f909 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001f4a:	f7ff f8cf 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(3);
 8001f4e:	2003      	movs	r0, #3
 8001f50:	f7ff f986 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 8001f54:	2101      	movs	r1, #1
 8001f56:	2004      	movs	r0, #4
 8001f58:	f7ff f900 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001f5c:	f7ff f8c6 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001f60:	2001      	movs	r0, #1
 8001f62:	f7ff f97d 	bl	8001260 <rotate_the_ring>
		suck_the_cake(1, 2);
 8001f66:	2102      	movs	r1, #2
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f7ff f83f 	bl	8000fec <suck_the_cake>
		suck_the_cake(4, 2);
 8001f6e:	2102      	movs	r1, #2
 8001f70:	2004      	movs	r0, #4
 8001f72:	f7ff f83b 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 2);
 8001f76:	2102      	movs	r1, #2
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f7ff f837 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001f7e:	f7ff f8b5 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(3);
 8001f82:	2003      	movs	r0, #3
 8001f84:	f7ff f96c 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(1, 2);
 8001f88:	2102      	movs	r1, #2
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f7ff f8e6 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001f90:	f7ff f8ac 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(2);
 8001f94:	2002      	movs	r0, #2
 8001f96:	f7ff f963 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	2004      	movs	r0, #4
 8001f9e:	f7ff f8dd 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001fa2:	f7ff f8a3 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f7ff f95a 	bl	8001260 <rotate_the_ring>
		suck_the_cake(4, 3);
 8001fac:	2103      	movs	r1, #3
 8001fae:	2004      	movs	r0, #4
 8001fb0:	f7ff f81c 	bl	8000fec <suck_the_cake>
		suck_the_cake(1, 3);
 8001fb4:	2103      	movs	r1, #3
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f7ff f818 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001fbc:	f7ff f896 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(5);
 8001fc0:	2005      	movs	r0, #5
 8001fc2:	f7ff f94d 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(3, 3);
 8001fc6:	2103      	movs	r1, #3
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f7ff f8c7 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001fce:	f7ff f88d 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(2);
 8001fd2:	2002      	movs	r0, #2
 8001fd4:	f7ff f944 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(1, 2);
 8001fd8:	2102      	movs	r1, #2
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f7ff f8be 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001fe0:	f7ff f884 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f7ff f93b 	bl	8001260 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 8001fea:	2101      	movs	r1, #1
 8001fec:	2004      	movs	r0, #4
 8001fee:	f7ff f8b5 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001ff2:	f7ff f87b 	bl	80010ec <press_sensor_feedback>
		put_the_cherry(1);
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f7ff f9ce 	bl	8001398 <put_the_cherry>
		put_the_cherry(5);
 8001ffc:	2005      	movs	r0, #5
 8001ffe:	f7ff f9cb 	bl	8001398 <put_the_cherry>
		put_the_cherry(6);
 8002002:	2006      	movs	r0, #6
 8002004:	f7ff f9c8 	bl	8001398 <put_the_cherry>
		mission_array[0] = 1;
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <Tower_of_Hanoi+0x630>)
 800200a:	2201      	movs	r2, #1
 800200c:	801a      	strh	r2, [r3, #0]
		rotate_the_ring(1);
 800200e:	2001      	movs	r0, #1
 8002010:	f7ff f926 	bl	8001260 <rotate_the_ring>
 8002014:	e000      	b.n	8002018 <Tower_of_Hanoi+0x628>
		return;
 8002016:	bf00      	nop
	}
}
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000b8c 	.word	0x20000b8c

08002024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	4b23      	ldr	r3, [pc, #140]	; (80020bc <MX_DMA_Init+0x98>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a22      	ldr	r2, [pc, #136]	; (80020bc <MX_DMA_Init+0x98>)
 8002034:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <MX_DMA_Init+0x98>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <MX_DMA_Init+0x98>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <MX_DMA_Init+0x98>)
 8002050:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <MX_DMA_Init+0x98>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	2100      	movs	r1, #0
 8002066:	2010      	movs	r0, #16
 8002068:	f004 f983 	bl	8006372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800206c:	2010      	movs	r0, #16
 800206e:	f004 f99c 	bl	80063aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	2100      	movs	r1, #0
 8002076:	2011      	movs	r0, #17
 8002078:	f004 f97b 	bl	8006372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800207c:	2011      	movs	r0, #17
 800207e:	f004 f994 	bl	80063aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	2038      	movs	r0, #56	; 0x38
 8002088:	f004 f973 	bl	8006372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800208c:	2038      	movs	r0, #56	; 0x38
 800208e:	f004 f98c 	bl	80063aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	203a      	movs	r0, #58	; 0x3a
 8002098:	f004 f96b 	bl	8006372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800209c:	203a      	movs	r0, #58	; 0x3a
 800209e:	f004 f984 	bl	80063aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	2046      	movs	r0, #70	; 0x46
 80020a8:	f004 f963 	bl	8006372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80020ac:	2046      	movs	r0, #70	; 0x46
 80020ae:	f004 f97c 	bl	80063aa <HAL_NVIC_EnableIRQ>

}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800

080020c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c6:	f107 0314 	add.w	r3, r7, #20
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]
 80020d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	4b55      	ldr	r3, [pc, #340]	; (8002230 <MX_GPIO_Init+0x170>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a54      	ldr	r2, [pc, #336]	; (8002230 <MX_GPIO_Init+0x170>)
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b52      	ldr	r3, [pc, #328]	; (8002230 <MX_GPIO_Init+0x170>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b4e      	ldr	r3, [pc, #312]	; (8002230 <MX_GPIO_Init+0x170>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a4d      	ldr	r2, [pc, #308]	; (8002230 <MX_GPIO_Init+0x170>)
 80020fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b4b      	ldr	r3, [pc, #300]	; (8002230 <MX_GPIO_Init+0x170>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	4b47      	ldr	r3, [pc, #284]	; (8002230 <MX_GPIO_Init+0x170>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a46      	ldr	r2, [pc, #280]	; (8002230 <MX_GPIO_Init+0x170>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b44      	ldr	r3, [pc, #272]	; (8002230 <MX_GPIO_Init+0x170>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	4b40      	ldr	r3, [pc, #256]	; (8002230 <MX_GPIO_Init+0x170>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a3f      	ldr	r2, [pc, #252]	; (8002230 <MX_GPIO_Init+0x170>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b3d      	ldr	r3, [pc, #244]	; (8002230 <MX_GPIO_Init+0x170>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	4b39      	ldr	r3, [pc, #228]	; (8002230 <MX_GPIO_Init+0x170>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a38      	ldr	r2, [pc, #224]	; (8002230 <MX_GPIO_Init+0x170>)
 8002150:	f043 0308 	orr.w	r3, r3, #8
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b36      	ldr	r3, [pc, #216]	; (8002230 <MX_GPIO_Init+0x170>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002168:	4832      	ldr	r0, [pc, #200]	; (8002234 <MX_GPIO_Init+0x174>)
 800216a:	f005 f82f 	bl	80071cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	2104      	movs	r1, #4
 8002172:	4831      	ldr	r0, [pc, #196]	; (8002238 <MX_GPIO_Init+0x178>)
 8002174:	f005 f82a 	bl	80071cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002178:	2200      	movs	r2, #0
 800217a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800217e:	482f      	ldr	r0, [pc, #188]	; (800223c <MX_GPIO_Init+0x17c>)
 8002180:	f005 f824 	bl	80071cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800218a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800218e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	4619      	mov	r1, r3
 800219a:	4826      	ldr	r0, [pc, #152]	; (8002234 <MX_GPIO_Init+0x174>)
 800219c:	f004 fd8e 	bl	8006cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021a0:	2303      	movs	r3, #3
 80021a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	4619      	mov	r1, r3
 80021b2:	4820      	ldr	r0, [pc, #128]	; (8002234 <MX_GPIO_Init+0x174>)
 80021b4:	f004 fd82 	bl	8006cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021b8:	2301      	movs	r3, #1
 80021ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4619      	mov	r1, r3
 80021ca:	481c      	ldr	r0, [pc, #112]	; (800223c <MX_GPIO_Init+0x17c>)
 80021cc:	f004 fd76 	bl	8006cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d6:	2301      	movs	r3, #1
 80021d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2300      	movs	r3, #0
 80021e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	4619      	mov	r1, r3
 80021e8:	4812      	ldr	r0, [pc, #72]	; (8002234 <MX_GPIO_Init+0x174>)
 80021ea:	f004 fd67 	bl	8006cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021ee:	2304      	movs	r3, #4
 80021f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f2:	2301      	movs	r3, #1
 80021f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	4619      	mov	r1, r3
 8002204:	480c      	ldr	r0, [pc, #48]	; (8002238 <MX_GPIO_Init+0x178>)
 8002206:	f004 fd59 	bl	8006cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800220a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800220e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002210:	2301      	movs	r3, #1
 8002212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	4619      	mov	r1, r3
 8002222:	4806      	ldr	r0, [pc, #24]	; (800223c <MX_GPIO_Init+0x17c>)
 8002224:	f004 fd4a 	bl	8006cbc <HAL_GPIO_Init>

}
 8002228:	bf00      	nop
 800222a:	3728      	adds	r7, #40	; 0x28
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40023800 	.word	0x40023800
 8002234:	40020800 	.word	0x40020800
 8002238:	40020c00 	.word	0x40020c00
 800223c:	40020400 	.word	0x40020400

08002240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002244:	f003 fcb2 	bl	8005bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002248:	f000 f81c 	bl	8002284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800224c:	f7ff ff38 	bl	80020c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002250:	f7ff fee8 	bl	8002024 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002254:	f003 fa3a 	bl	80056cc <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002258:	f002 ffe0 	bl	800521c <MX_TIM3_Init>
  MX_ADC1_Init();
 800225c:	f7fe fde0 	bl	8000e20 <MX_ADC1_Init>
  MX_TIM6_Init();
 8002260:	f003 f856 	bl	8005310 <MX_TIM6_Init>
  MX_TIM2_Init();
 8002264:	f002 ff76 	bl	8005154 <MX_TIM2_Init>
  MX_TIM7_Init();
 8002268:	f003 f888 	bl	800537c <MX_TIM7_Init>
  MX_USART1_UART_Init();
 800226c:	f003 f9da 	bl	8005624 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002270:	f003 fa02 	bl	8005678 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8002274:	f003 f8b8 	bl	80053e8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
	// DMA_init is in front of ADC
	setup();
 8002278:	f001 fd0a 	bl	8003c90 <setup>
	mainrun();
 800227c:	f002 fb5e 	bl	800493c <mainrun>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002280:	e7fe      	b.n	8002280 <main+0x40>
	...

08002284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b094      	sub	sp, #80	; 0x50
 8002288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800228a:	f107 031c 	add.w	r3, r7, #28
 800228e:	2234      	movs	r2, #52	; 0x34
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f007 ffca 	bl	800a22c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002298:	f107 0308 	add.w	r3, r7, #8
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a8:	2300      	movs	r3, #0
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	4b29      	ldr	r3, [pc, #164]	; (8002354 <SystemClock_Config+0xd0>)
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	4a28      	ldr	r2, [pc, #160]	; (8002354 <SystemClock_Config+0xd0>)
 80022b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b6:	6413      	str	r3, [r2, #64]	; 0x40
 80022b8:	4b26      	ldr	r3, [pc, #152]	; (8002354 <SystemClock_Config+0xd0>)
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022c4:	2300      	movs	r3, #0
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	4b23      	ldr	r3, [pc, #140]	; (8002358 <SystemClock_Config+0xd4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a22      	ldr	r2, [pc, #136]	; (8002358 <SystemClock_Config+0xd4>)
 80022ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b20      	ldr	r3, [pc, #128]	; (8002358 <SystemClock_Config+0xd4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022e0:	2301      	movs	r3, #1
 80022e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80022e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80022e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ea:	2302      	movs	r3, #2
 80022ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80022f4:	2304      	movs	r3, #4
 80022f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80022f8:	23a8      	movs	r3, #168	; 0xa8
 80022fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022fc:	2302      	movs	r3, #2
 80022fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002300:	2302      	movs	r3, #2
 8002302:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002304:	2302      	movs	r3, #2
 8002306:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002308:	f107 031c 	add.w	r3, r7, #28
 800230c:	4618      	mov	r0, r3
 800230e:	f005 fac1 	bl	8007894 <HAL_RCC_OscConfig>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002318:	f000 f820 	bl	800235c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800231c:	230f      	movs	r3, #15
 800231e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8002320:	2303      	movs	r3, #3
 8002322:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002328:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800232c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800232e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002332:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002334:	f107 0308 	add.w	r3, r7, #8
 8002338:	2105      	movs	r1, #5
 800233a:	4618      	mov	r0, r3
 800233c:	f004 ff60 	bl	8007200 <HAL_RCC_ClockConfig>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002346:	f000 f809 	bl	800235c <Error_Handler>
  }
}
 800234a:	bf00      	nop
 800234c:	3750      	adds	r7, #80	; 0x50
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800
 8002358:	40007000 	.word	0x40007000

0800235c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002360:	b672      	cpsid	i
}
 8002362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002364:	e7fe      	b.n	8002364 <Error_Handler+0x8>

08002366 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <_ZN3ros3MsgC1Ev+0x1c>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	0800a8b8 	.word	0x0800a8b8

080023a8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
      data()
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ffe8 	bl	8002388 <_ZN3ros3MsgC1Ev>
 80023b8:	4a06      	ldr	r2, [pc, #24]	; (80023d4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3304      	adds	r3, #4
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ffcf 	bl	8002366 <_ZN3ros4TimeC1Ev>
    {
    }
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	0800a8a0 	.word	0x0800a8a0

080023d8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6859      	ldr	r1, [r3, #4]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	b2ca      	uxtb	r2, r1
 80023f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	0a19      	lsrs	r1, r3, #8
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	3301      	adds	r3, #1
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	4413      	add	r3, r2
 8002402:	b2ca      	uxtb	r2, r1
 8002404:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	0c19      	lsrs	r1, r3, #16
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3302      	adds	r3, #2
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	4413      	add	r3, r2
 8002414:	b2ca      	uxtb	r2, r1
 8002416:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	0e19      	lsrs	r1, r3, #24
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	3303      	adds	r3, #3
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	4413      	add	r3, r2
 8002426:	b2ca      	uxtb	r2, r1
 8002428:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	3304      	adds	r3, #4
 800242e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6899      	ldr	r1, [r3, #8]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	4413      	add	r3, r2
 800243a:	b2ca      	uxtb	r2, r1
 800243c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	0a19      	lsrs	r1, r3, #8
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	3301      	adds	r3, #1
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	4413      	add	r3, r2
 800244c:	b2ca      	uxtb	r2, r1
 800244e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	0c19      	lsrs	r1, r3, #16
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3302      	adds	r3, #2
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	4413      	add	r3, r2
 800245e:	b2ca      	uxtb	r2, r1
 8002460:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	0e19      	lsrs	r1, r3, #24
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3303      	adds	r3, #3
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	4413      	add	r3, r2
 8002470:	b2ca      	uxtb	r2, r1
 8002472:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	3304      	adds	r3, #4
 8002478:	60fb      	str	r3, [r7, #12]
      return offset;
 800247a:	68fb      	ldr	r3, [r7, #12]
    }
 800247c:	4618      	mov	r0, r3
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	4413      	add	r3, r2
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	3301      	adds	r3, #1
 80024ac:	6839      	ldr	r1, [r7, #0]
 80024ae:	440b      	add	r3, r1
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	3302      	adds	r3, #2
 80024c2:	6839      	ldr	r1, [r7, #0]
 80024c4:	440b      	add	r3, r1
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	041b      	lsls	r3, r3, #16
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3303      	adds	r3, #3
 80024d8:	6839      	ldr	r1, [r7, #0]
 80024da:	440b      	add	r3, r1
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	061b      	lsls	r3, r3, #24
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	3304      	adds	r3, #4
 80024ea:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	4413      	add	r3, r2
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	3301      	adds	r3, #1
 8002502:	6839      	ldr	r1, [r7, #0]
 8002504:	440b      	add	r3, r1
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	3302      	adds	r3, #2
 8002518:	6839      	ldr	r1, [r7, #0]
 800251a:	440b      	add	r3, r1
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	041b      	lsls	r3, r3, #16
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	3303      	adds	r3, #3
 800252e:	6839      	ldr	r1, [r7, #0]
 8002530:	440b      	add	r3, r1
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	061b      	lsls	r3, r3, #24
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	3304      	adds	r3, #4
 8002540:	60fb      	str	r3, [r7, #12]
     return offset;
 8002542:	68fb      	ldr	r3, [r7, #12]
    }
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	0800a558 	.word	0x0800a558

0800256c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	0800a568 	.word	0x0800a568

08002588 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fef8 	bl	8002388 <_ZN3ros3MsgC1Ev>
 8002598:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	809a      	strh	r2, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a09      	ldr	r2, [pc, #36]	; (80025cc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80025ae:	60da      	str	r2, [r3, #12]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a06      	ldr	r2, [pc, #24]	; (80025cc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80025b4:	611a      	str	r2, [r3, #16]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	615a      	str	r2, [r3, #20]
    {
    }
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	0800a888 	.word	0x0800a888
 80025cc:	0800a58c 	.word	0x0800a58c

080025d0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	8899      	ldrh	r1, [r3, #4]
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	b2ca      	uxtb	r2, r1
 80025ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	889b      	ldrh	r3, [r3, #4]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	b299      	uxth	r1, r3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	3301      	adds	r3, #1
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	b2ca      	uxtb	r2, r1
 80025fe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	3302      	adds	r3, #2
 8002604:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fd fdfc 	bl	8000208 <strlen>
 8002610:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	4413      	add	r3, r2
 8002618:	69b9      	ldr	r1, [r7, #24]
 800261a:	4618      	mov	r0, r3
 800261c:	f001 fb5e 	bl	8003cdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	3304      	adds	r3, #4
 8002624:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	18d0      	adds	r0, r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4619      	mov	r1, r3
 8002634:	f007 fdec 	bl	800a210 <memcpy>
      offset += length_topic_name;
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4413      	add	r3, r2
 800263e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd fddf 	bl	8000208 <strlen>
 800264a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	4413      	add	r3, r2
 8002652:	6979      	ldr	r1, [r7, #20]
 8002654:	4618      	mov	r0, r3
 8002656:	f001 fb41 	bl	8003cdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3304      	adds	r3, #4
 800265e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	18d0      	adds	r0, r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4619      	mov	r1, r3
 800266e:	f007 fdcf 	bl	800a210 <memcpy>
      offset += length_message_type;
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	4413      	add	r3, r2
 8002678:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	4618      	mov	r0, r3
 8002680:	f7fd fdc2 	bl	8000208 <strlen>
 8002684:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	4413      	add	r3, r2
 800268c:	6939      	ldr	r1, [r7, #16]
 800268e:	4618      	mov	r0, r3
 8002690:	f001 fb24 	bl	8003cdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	3304      	adds	r3, #4
 8002698:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	18d0      	adds	r0, r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4619      	mov	r1, r3
 80026a8:	f007 fdb2 	bl	800a210 <memcpy>
      offset += length_md5sum;
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4413      	add	r3, r2
 80026b2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80026ba:	68f9      	ldr	r1, [r7, #12]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	4413      	add	r3, r2
 80026c2:	b2ca      	uxtb	r2, r1
 80026c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	0a19      	lsrs	r1, r3, #8
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3301      	adds	r3, #1
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	4413      	add	r3, r2
 80026d2:	b2ca      	uxtb	r2, r1
 80026d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	0c19      	lsrs	r1, r3, #16
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3302      	adds	r3, #2
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	4413      	add	r3, r2
 80026e2:	b2ca      	uxtb	r2, r1
 80026e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	0e19      	lsrs	r1, r3, #24
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3303      	adds	r3, #3
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	4413      	add	r3, r2
 80026f2:	b2ca      	uxtb	r2, r1
 80026f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3304      	adds	r3, #4
 80026fa:	61fb      	str	r3, [r7, #28]
      return offset;
 80026fc:	69fb      	ldr	r3, [r7, #28]
    }
 80026fe:	4618      	mov	r0, r3
 8002700:	3720      	adds	r7, #32
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002706:	b580      	push	{r7, lr}
 8002708:	b08a      	sub	sp, #40	; 0x28
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	4413      	add	r3, r2
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	b29a      	uxth	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	889b      	ldrh	r3, [r3, #4]
 8002726:	b21a      	sxth	r2, r3
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	3301      	adds	r3, #1
 800272c:	6839      	ldr	r1, [r7, #0]
 800272e:	440b      	add	r3, r1
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	b21b      	sxth	r3, r3
 8002736:	4313      	orrs	r3, r2
 8002738:	b21b      	sxth	r3, r3
 800273a:	b29a      	uxth	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	3302      	adds	r3, #2
 8002744:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	441a      	add	r2, r3
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	4611      	mov	r1, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f001 fae0 	bl	8003d18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	3304      	adds	r3, #4
 800275c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	4413      	add	r3, r2
 8002768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276a:	429a      	cmp	r2, r3
 800276c:	d20c      	bcs.n	8002788 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	441a      	add	r2, r3
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	3b01      	subs	r3, #1
 8002778:	6839      	ldr	r1, [r7, #0]
 800277a:	440b      	add	r3, r1
 800277c:	7812      	ldrb	r2, [r2, #0]
 800277e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	3301      	adds	r3, #1
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
 8002786:	e7ec      	b.n	8002762 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	4413      	add	r3, r2
 800278e:	3b01      	subs	r3, #1
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	4413      	add	r3, r2
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	3b01      	subs	r3, #1
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	441a      	add	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	4413      	add	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	441a      	add	r2, r3
 80027b2:	f107 0310 	add.w	r3, r7, #16
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f001 faad 	bl	8003d18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	3304      	adds	r3, #4
 80027c2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	623b      	str	r3, [r7, #32]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	6a3a      	ldr	r2, [r7, #32]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d20c      	bcs.n	80027ee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	441a      	add	r2, r3
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	3b01      	subs	r3, #1
 80027de:	6839      	ldr	r1, [r7, #0]
 80027e0:	440b      	add	r3, r1
 80027e2:	7812      	ldrb	r2, [r2, #0]
 80027e4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	3301      	adds	r3, #1
 80027ea:	623b      	str	r3, [r7, #32]
 80027ec:	e7ec      	b.n	80027c8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4413      	add	r3, r2
 80027f4:	3b01      	subs	r3, #1
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	4413      	add	r3, r2
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	3b01      	subs	r3, #1
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	441a      	add	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4413      	add	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	441a      	add	r2, r3
 8002818:	f107 030c 	add.w	r3, r7, #12
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f001 fa7a 	bl	8003d18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	3304      	adds	r3, #4
 8002828:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4413      	add	r3, r2
 8002834:	69fa      	ldr	r2, [r7, #28]
 8002836:	429a      	cmp	r2, r3
 8002838:	d20c      	bcs.n	8002854 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	441a      	add	r2, r3
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	3b01      	subs	r3, #1
 8002844:	6839      	ldr	r1, [r7, #0]
 8002846:	440b      	add	r3, r1
 8002848:	7812      	ldrb	r2, [r2, #0]
 800284a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	3301      	adds	r3, #1
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	e7ec      	b.n	800282e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4413      	add	r3, r2
 800285a:	3b01      	subs	r3, #1
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	4413      	add	r3, r2
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	3b01      	subs	r3, #1
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	441a      	add	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4413      	add	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	6839      	ldr	r1, [r7, #0]
 8002882:	440a      	add	r2, r1
 8002884:	7812      	ldrb	r2, [r2, #0]
 8002886:	4313      	orrs	r3, r2
 8002888:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	3301      	adds	r3, #1
 8002890:	6839      	ldr	r1, [r7, #0]
 8002892:	440b      	add	r3, r1
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	4313      	orrs	r3, r2
 800289a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	3302      	adds	r3, #2
 80028a2:	6839      	ldr	r1, [r7, #0]
 80028a4:	440b      	add	r3, r1
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	3303      	adds	r3, #3
 80028b4:	6839      	ldr	r1, [r7, #0]
 80028b6:	440b      	add	r3, r1
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	061b      	lsls	r3, r3, #24
 80028bc:	4313      	orrs	r3, r2
 80028be:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	3304      	adds	r3, #4
 80028ca:	61bb      	str	r3, [r7, #24]
     return offset;
 80028cc:	69bb      	ldr	r3, [r7, #24]
    }
 80028ce:	4618      	mov	r0, r3
 80028d0:	3728      	adds	r7, #40	; 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	0800a590 	.word	0x0800a590

080028f4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	0800a5ac 	.word	0x0800a5ac

08002910 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fd34 	bl	8002388 <_ZN3ros3MsgC1Ev>
 8002920:	4a06      	ldr	r2, [pc, #24]	; (800293c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	711a      	strb	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a04      	ldr	r2, [pc, #16]	; (8002940 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002930:	609a      	str	r2, [r3, #8]
    {
    }
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	0800a870 	.word	0x0800a870
 8002940:	0800a58c 	.word	0x0800a58c

08002944 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	4413      	add	r3, r2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	7912      	ldrb	r2, [r2, #4]
 800295c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	3301      	adds	r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fc4d 	bl	8000208 <strlen>
 800296e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	4413      	add	r3, r2
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	4618      	mov	r0, r3
 800297a:	f001 f9af 	bl	8003cdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3304      	adds	r3, #4
 8002982:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	18d0      	adds	r0, r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	4619      	mov	r1, r3
 8002992:	f007 fc3d 	bl	800a210 <memcpy>
      offset += length_msg;
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	4413      	add	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
      return offset;
 800299e:	68fb      	ldr	r3, [r7, #12]
    }
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	781a      	ldrb	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	3301      	adds	r3, #1
 80029c6:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	441a      	add	r2, r3
 80029ce:	f107 030c 	add.w	r3, r7, #12
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f001 f99f 	bl	8003d18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	3304      	adds	r3, #4
 80029de:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4413      	add	r3, r2
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d20c      	bcs.n	8002a0a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	441a      	add	r2, r3
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	6839      	ldr	r1, [r7, #0]
 80029fc:	440b      	add	r3, r1
 80029fe:	7812      	ldrb	r2, [r2, #0]
 8002a00:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3301      	adds	r3, #1
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	e7ec      	b.n	80029e4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4413      	add	r3, r2
 8002a10:	3b01      	subs	r3, #1
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	441a      	add	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
     return offset;
 8002a2e:	693b      	ldr	r3, [r7, #16]
    }
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	0800a5d0 	.word	0x0800a5d0

08002a54 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	0800a5e4 	.word	0x0800a5e4

08002a70 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fc84 	bl	8002388 <_ZN3ros3MsgC1Ev>
 8002a80:	4a0c      	ldr	r2, [pc, #48]	; (8002ab4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	611a      	str	r2, [r3, #16]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	619a      	str	r2, [r3, #24]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	61da      	str	r2, [r3, #28]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4618      	mov	r0, r3
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	0800a858 	.word	0x0800a858

08002ab8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6859      	ldr	r1, [r3, #4]
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	4413      	add	r3, r2
 8002ad0:	b2ca      	uxtb	r2, r1
 8002ad2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	0a19      	lsrs	r1, r3, #8
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	3301      	adds	r3, #1
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	b2ca      	uxtb	r2, r1
 8002ae4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	0c19      	lsrs	r1, r3, #16
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	3302      	adds	r3, #2
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	b2ca      	uxtb	r2, r1
 8002af6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	0e19      	lsrs	r1, r3, #24
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	3303      	adds	r3, #3
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	4413      	add	r3, r2
 8002b06:	b2ca      	uxtb	r2, r1
 8002b08:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	6a3a      	ldr	r2, [r7, #32]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d22b      	bcs.n	8002b76 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002b2c:	6939      	ldr	r1, [r7, #16]
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	4413      	add	r3, r2
 8002b34:	b2ca      	uxtb	r2, r1
 8002b36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	0a19      	lsrs	r1, r3, #8
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	3301      	adds	r3, #1
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	4413      	add	r3, r2
 8002b44:	b2ca      	uxtb	r2, r1
 8002b46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	0c19      	lsrs	r1, r3, #16
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	3302      	adds	r3, #2
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	4413      	add	r3, r2
 8002b54:	b2ca      	uxtb	r2, r1
 8002b56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	0e19      	lsrs	r1, r3, #24
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	3303      	adds	r3, #3
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	b2ca      	uxtb	r2, r1
 8002b66:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	3301      	adds	r3, #1
 8002b72:	623b      	str	r3, [r7, #32]
 8002b74:	e7ce      	b.n	8002b14 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6919      	ldr	r1, [r3, #16]
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	4413      	add	r3, r2
 8002b80:	b2ca      	uxtb	r2, r1
 8002b82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	0a19      	lsrs	r1, r3, #8
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	4413      	add	r3, r2
 8002b92:	b2ca      	uxtb	r2, r1
 8002b94:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	0c19      	lsrs	r1, r3, #16
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	b2ca      	uxtb	r2, r1
 8002ba6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	0e19      	lsrs	r1, r3, #24
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	3303      	adds	r3, #3
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	b2ca      	uxtb	r2, r1
 8002bb8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d22b      	bcs.n	8002c26 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002bdc:	68f9      	ldr	r1, [r7, #12]
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	b2ca      	uxtb	r2, r1
 8002be6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	0a19      	lsrs	r1, r3, #8
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	3301      	adds	r3, #1
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	b2ca      	uxtb	r2, r1
 8002bf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	0c19      	lsrs	r1, r3, #16
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	3302      	adds	r3, #2
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	b2ca      	uxtb	r2, r1
 8002c06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	0e19      	lsrs	r1, r3, #24
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	3303      	adds	r3, #3
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	4413      	add	r3, r2
 8002c14:	b2ca      	uxtb	r2, r1
 8002c16:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3301      	adds	r3, #1
 8002c22:	61fb      	str	r3, [r7, #28]
 8002c24:	e7ce      	b.n	8002bc4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69d9      	ldr	r1, [r3, #28]
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	4413      	add	r3, r2
 8002c30:	b2ca      	uxtb	r2, r1
 8002c32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	0a19      	lsrs	r1, r3, #8
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	4413      	add	r3, r2
 8002c42:	b2ca      	uxtb	r2, r1
 8002c44:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	0c19      	lsrs	r1, r3, #16
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	3302      	adds	r3, #2
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	4413      	add	r3, r2
 8002c54:	b2ca      	uxtb	r2, r1
 8002c56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	0e19      	lsrs	r1, r3, #24
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	3303      	adds	r3, #3
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	4413      	add	r3, r2
 8002c66:	b2ca      	uxtb	r2, r1
 8002c68:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002c70:	2300      	movs	r3, #0
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d228      	bcs.n	8002cd0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd fabc 	bl	8000208 <strlen>
 8002c90:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	4413      	add	r3, r2
 8002c98:	6979      	ldr	r1, [r7, #20]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 f81e 	bl	8003cdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	18d0      	adds	r0, r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4619      	mov	r1, r3
 8002cbc:	f007 faa8 	bl	800a210 <memcpy>
      offset += length_stringsi;
 8002cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	e7d1      	b.n	8002c74 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3728      	adds	r7, #40	; 0x28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b08e      	sub	sp, #56	; 0x38
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	4413      	add	r3, r2
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	6a3a      	ldr	r2, [r7, #32]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d06:	3302      	adds	r3, #2
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	041b      	lsls	r3, r3, #16
 8002d10:	6a3a      	ldr	r2, [r7, #32]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d18:	3303      	adds	r3, #3
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	061b      	lsls	r3, r3, #24
 8002d22:	6a3a      	ldr	r2, [r7, #32]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	6a3a      	ldr	r2, [r7, #32]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d90a      	bls.n	8002d4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f007 fa7a 	bl	800a23c <realloc>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a3a      	ldr	r2, [r7, #32]
 8002d52:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002d54:	2300      	movs	r3, #0
 8002d56:	633b      	str	r3, [r7, #48]	; 0x30
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d236      	bcs.n	8002dd0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d6a:	6839      	ldr	r1, [r7, #0]
 8002d6c:	440a      	add	r2, r1
 8002d6e:	7812      	ldrb	r2, [r2, #0]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d78:	3301      	adds	r3, #1
 8002d7a:	6839      	ldr	r1, [r7, #0]
 8002d7c:	440b      	add	r3, r1
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	021b      	lsls	r3, r3, #8
 8002d82:	4313      	orrs	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	6839      	ldr	r1, [r7, #0]
 8002d8e:	440b      	add	r3, r1
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	041b      	lsls	r3, r3, #16
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9c:	3303      	adds	r3, #3
 8002d9e:	6839      	ldr	r1, [r7, #0]
 8002da0:	440b      	add	r3, r1
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	061b      	lsls	r3, r3, #24
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db2:	3304      	adds	r3, #4
 8002db4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	3208      	adds	r2, #8
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	3301      	adds	r3, #1
 8002dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8002dce:	e7c3      	b.n	8002d58 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ddc:	3301      	adds	r3, #1
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	4413      	add	r3, r2
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dee:	3302      	adds	r3, #2
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	041b      	lsls	r3, r3, #16
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e00:	3303      	adds	r3, #3
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	4413      	add	r3, r2
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	061b      	lsls	r3, r3, #24
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e12:	3304      	adds	r3, #4
 8002e14:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d90a      	bls.n	8002e36 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699a      	ldr	r2, [r3, #24]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	f007 fa06 	bl	800a23c <realloc>
 8002e30:	4602      	mov	r2, r0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d236      	bcs.n	8002eb8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e52:	6839      	ldr	r1, [r7, #0]
 8002e54:	440a      	add	r2, r1
 8002e56:	7812      	ldrb	r2, [r2, #0]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e60:	3301      	adds	r3, #1
 8002e62:	6839      	ldr	r1, [r7, #0]
 8002e64:	440b      	add	r3, r1
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	021b      	lsls	r3, r3, #8
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e72:	3302      	adds	r3, #2
 8002e74:	6839      	ldr	r1, [r7, #0]
 8002e76:	440b      	add	r3, r1
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	041b      	lsls	r3, r3, #16
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e84:	3303      	adds	r3, #3
 8002e86:	6839      	ldr	r1, [r7, #0]
 8002e88:	440b      	add	r3, r1
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	061b      	lsls	r3, r3, #24
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	3214      	adds	r2, #20
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eb6:	e7c3      	b.n	8002e40 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	4413      	add	r3, r2
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	041b      	lsls	r3, r3, #16
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee8:	3303      	adds	r3, #3
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	4413      	add	r3, r2
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	061b      	lsls	r3, r3, #24
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efa:	3304      	adds	r3, #4
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d90a      	bls.n	8002f1e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4619      	mov	r1, r3
 8002f12:	4610      	mov	r0, r2
 8002f14:	f007 f992 	bl	800a23c <realloc>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002f24:	2300      	movs	r3, #0
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d23f      	bcs.n	8002fb2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	441a      	add	r2, r3
 8002f38:	f107 030c 	add.w	r3, r7, #12
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 feea 	bl	8003d18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f46:	3304      	adds	r3, #4
 8002f48:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4413      	add	r3, r2
 8002f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d20c      	bcs.n	8002f74 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	441a      	add	r2, r3
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	3b01      	subs	r3, #1
 8002f64:	6839      	ldr	r1, [r7, #0]
 8002f66:	440b      	add	r3, r1
 8002f68:	7812      	ldrb	r2, [r2, #0]
 8002f6a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	3301      	adds	r3, #1
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
 8002f72:	e7ec      	b.n	8002f4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4413      	add	r3, r2
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f86:	3b01      	subs	r3, #1
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	441a      	add	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4413      	add	r3, r2
 8002f96:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	3220      	adds	r2, #32
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	3301      	adds	r3, #1
 8002fae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fb0:	e7ba      	b.n	8002f28 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3738      	adds	r7, #56	; 0x38
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	0800a77c 	.word	0x0800a77c

08002fd8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	0800a608 	.word	0x0800a608

08002ff4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	611a      	str	r2, [r3, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68d8      	ldr	r0, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6891      	ldr	r1, [r2, #8]
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	4798      	blx	r3
 8003040:	4603      	mov	r3, r0
  };
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
  }
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <_ZN13STM32Hardware10getRdmaIndEv>:
	UART_HandleTypeDef *huart;

	const static uint16_t rbuflen = 512;
	uint8_t rbuf[rbuflen];
	uint32_t rind;
	inline uint32_t getRdmaInd(void) {
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
		return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003078:	f3c3 0308 	ubfx	r3, r3, #0, #9
	}
 800307c:	4618      	mov	r0, r3
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <_ZN13STM32HardwareC1Ev>:
	const static uint16_t tbuflen = 512;
	uint8_t tbuf[tbuflen];
	uint32_t twind, tfind;

public:
	STM32Hardware() :
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
			huart(&huart2), rind(0), twind(0), tfind(0) {
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <_ZN13STM32HardwareC1Ev+0x34>)
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	}
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	20000d48 	.word	0x20000d48

080030c0 <_ZN13STM32Hardware4initEv>:

	STM32Hardware(UART_HandleTypeDef *huart_) :
			huart(huart_), rind(0), twind(0), tfind(0) {
	}

	void init() {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
		reset_rbuf();
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f804 	bl	80030d6 <_ZN13STM32Hardware10reset_rbufEv>
	}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <_ZN13STM32Hardware10reset_rbufEv>:

	void reset_rbuf(void) {
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
		HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3304      	adds	r3, #4
 80030e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ea:	4619      	mov	r1, r3
 80030ec:	f005 fecc 	bl	8008e88 <HAL_UART_Receive_DMA>
	}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <_ZN13STM32Hardware4readEv>:

	int read() {
 80030f8:	b590      	push	{r4, r7, lr}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
		int c = -1;
 8003100:	f04f 33ff 	mov.w	r3, #4294967295
 8003104:	60fb      	str	r3, [r7, #12]
		if (rind != getRdmaInd()) {
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff ffa8 	bl	8003062 <_ZN13STM32Hardware10getRdmaIndEv>
 8003112:	4603      	mov	r3, r0
 8003114:	429c      	cmp	r4, r3
 8003116:	bf14      	ite	ne
 8003118:	2301      	movne	r3, #1
 800311a:	2300      	moveq	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d012      	beq.n	8003148 <_ZN13STM32Hardware4readEv+0x50>
			c = rbuf[rind++];
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003128:	1c59      	adds	r1, r3, #1
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	791b      	ldrb	r3, [r3, #4]
 8003136:	60fb      	str	r3, [r7, #12]
			rind &= rbuflen - 1;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800313e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		}
		return c;
 8003148:	68fb      	ldr	r3, [r7, #12]
	}
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	bd90      	pop	{r4, r7, pc}
	...

08003154 <_ZN13STM32Hardware5flushEv>:

	void flush(void) {
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
		static bool mutex = false;

		if ((huart->gState == HAL_UART_STATE_READY) && !mutex) {
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b20      	cmp	r3, #32
 8003168:	d108      	bne.n	800317c <_ZN13STM32Hardware5flushEv+0x28>
 800316a:	4b28      	ldr	r3, [pc, #160]	; (800320c <_ZN13STM32Hardware5flushEv+0xb8>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	f083 0301 	eor.w	r3, r3, #1
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <_ZN13STM32Hardware5flushEv+0x28>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <_ZN13STM32Hardware5flushEv+0x2a>
 800317c:	2300      	movs	r3, #0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d03f      	beq.n	8003202 <_ZN13STM32Hardware5flushEv+0xae>
			mutex = true;
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <_ZN13STM32Hardware5flushEv+0xb8>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]

			if (twind != tfind) {
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003194:	429a      	cmp	r2, r3
 8003196:	d031      	beq.n	80031fc <_ZN13STM32Hardware5flushEv+0xa8>
				uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d20a      	bcs.n	80031be <_ZN13STM32Hardware5flushEv+0x6a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	e006      	b.n	80031cc <_ZN13STM32Hardware5flushEv+0x78>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	81fb      	strh	r3, [r7, #14]
				HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80031d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	4413      	add	r3, r2
 80031e0:	89fa      	ldrh	r2, [r7, #14]
 80031e2:	4619      	mov	r1, r3
 80031e4:	f005 fdd2 	bl	8008d8c <HAL_UART_Transmit_DMA>
				tfind = (tfind + len) & (tbuflen - 1);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80031ee:	89fb      	ldrh	r3, [r7, #14]
 80031f0:	4413      	add	r3, r2
 80031f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			}
			mutex = false;
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <_ZN13STM32Hardware5flushEv+0xb8>)
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
		}
	}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	2000014c 	.word	0x2000014c

08003210 <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t *data, int length) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
		int n = length;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	617b      	str	r3, [r7, #20]
		n = n <= tbuflen ? n : tbuflen;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003226:	bfa8      	it	ge
 8003228:	f44f 7300 	movge.w	r3, #512	; 0x200
 800322c:	617b      	str	r3, [r7, #20]

		int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003234:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	4293      	cmp	r3, r2
 800323c:	bf28      	it	cs
 800323e:	4613      	movcs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
		memcpy(&(tbuf[twind]), data, n_tail);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003248:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	4618      	mov	r0, r3
 8003256:	f006 ffdb 	bl	800a210 <memcpy>
		twind = (twind + n) & (tbuflen - 1);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	4413      	add	r3, r2
 8003264:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

		if (n != n_tail) {
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	429a      	cmp	r2, r3
 8003274:	d00b      	beq.n	800328e <_ZN13STM32Hardware5writeEPhi+0x7e>
			memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	18d1      	adds	r1, r2, r3
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	461a      	mov	r2, r3
 800328a:	f006 ffc1 	bl	800a210 <memcpy>
		}

		flush();
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7ff ff60 	bl	8003154 <_ZN13STM32Hardware5flushEv>
	}
 8003294:	bf00      	nop
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <_ZN13STM32Hardware4timeEv>:

	unsigned long time() {
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
		return HAL_GetTick();;
 80032a4:	f002 fce8 	bl	8005c78 <HAL_GetTick>
 80032a8:	4603      	mov	r3, r0
	}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff f862 	bl	8002388 <_ZN3ros3MsgC1Ev>
 80032c4:	4a08      	ldr	r2, [pc, #32]	; (80032e8 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a07      	ldr	r2, [pc, #28]	; (80032ec <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 80032ce:	605a      	str	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	609a      	str	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	60da      	str	r2, [r3, #12]
    {
    }
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	0800a814 	.word	0x0800a814
 80032ec:	0800a58c 	.word	0x0800a58c

080032f0 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fc ff80 	bl	8000208 <strlen>
 8003308:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	4413      	add	r3, r2
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fce2 	bl	8003cdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3304      	adds	r3, #4
 800331c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	18d0      	adds	r0, r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	4619      	mov	r1, r3
 800332c:	f006 ff70 	bl	800a210 <memcpy>
      offset += length_label;
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4413      	add	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6899      	ldr	r1, [r3, #8]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	4413      	add	r3, r2
 8003342:	b2ca      	uxtb	r2, r1
 8003344:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	0a19      	lsrs	r1, r3, #8
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3301      	adds	r3, #1
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	4413      	add	r3, r2
 8003354:	b2ca      	uxtb	r2, r1
 8003356:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	0c19      	lsrs	r1, r3, #16
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3302      	adds	r3, #2
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	4413      	add	r3, r2
 8003366:	b2ca      	uxtb	r2, r1
 8003368:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	0e19      	lsrs	r1, r3, #24
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3303      	adds	r3, #3
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	4413      	add	r3, r2
 8003378:	b2ca      	uxtb	r2, r1
 800337a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3304      	adds	r3, #4
 8003380:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68d9      	ldr	r1, [r3, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	4413      	add	r3, r2
 800338c:	b2ca      	uxtb	r2, r1
 800338e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	0a19      	lsrs	r1, r3, #8
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	3301      	adds	r3, #1
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	4413      	add	r3, r2
 800339e:	b2ca      	uxtb	r2, r1
 80033a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	0c19      	lsrs	r1, r3, #16
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3302      	adds	r3, #2
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	4413      	add	r3, r2
 80033b0:	b2ca      	uxtb	r2, r1
 80033b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	0e19      	lsrs	r1, r3, #24
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	3303      	adds	r3, #3
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	4413      	add	r3, r2
 80033c2:	b2ca      	uxtb	r2, r1
 80033c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3304      	adds	r3, #4
 80033ca:	60fb      	str	r3, [r7, #12]
      return offset;
 80033cc:	68fb      	ldr	r3, [r7, #12]
    }
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b086      	sub	sp, #24
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	441a      	add	r2, r3
 80033ea:	f107 030c 	add.w	r3, r7, #12
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fc91 	bl	8003d18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	3304      	adds	r3, #4
 80033fa:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4413      	add	r3, r2
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	429a      	cmp	r2, r3
 800340a:	d20c      	bcs.n	8003426 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	441a      	add	r2, r3
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	3b01      	subs	r3, #1
 8003416:	6839      	ldr	r1, [r7, #0]
 8003418:	440b      	add	r3, r1
 800341a:	7812      	ldrb	r2, [r2, #0]
 800341c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	3301      	adds	r3, #1
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	e7ec      	b.n	8003400 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	3b01      	subs	r3, #1
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	4413      	add	r3, r2
 8003432:	2200      	movs	r2, #0
 8003434:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	3b01      	subs	r3, #1
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	441a      	add	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4413      	add	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	4413      	add	r3, r2
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	3301      	adds	r3, #1
 8003460:	6839      	ldr	r1, [r7, #0]
 8003462:	440b      	add	r3, r1
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	3302      	adds	r3, #2
 8003476:	6839      	ldr	r1, [r7, #0]
 8003478:	440b      	add	r3, r1
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	041b      	lsls	r3, r3, #16
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	3303      	adds	r3, #3
 800348c:	6839      	ldr	r1, [r7, #0]
 800348e:	440b      	add	r3, r1
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	061b      	lsls	r3, r3, #24
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	3304      	adds	r3, #4
 800349e:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	4413      	add	r3, r2
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	3301      	adds	r3, #1
 80034b6:	6839      	ldr	r1, [r7, #0]
 80034b8:	440b      	add	r3, r1
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	3302      	adds	r3, #2
 80034cc:	6839      	ldr	r1, [r7, #0]
 80034ce:	440b      	add	r3, r1
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	041b      	lsls	r3, r3, #16
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	3303      	adds	r3, #3
 80034e2:	6839      	ldr	r1, [r7, #0]
 80034e4:	440b      	add	r3, r1
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	061b      	lsls	r3, r3, #24
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	3304      	adds	r3, #4
 80034f4:	613b      	str	r3, [r7, #16]
     return offset;
 80034f6:	693b      	ldr	r3, [r7, #16]
    }
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 800350a:	4618      	mov	r0, r3
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	0800a62c 	.word	0x0800a62c

0800351c <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	4b03      	ldr	r3, [pc, #12]	; (8003534 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	0800a64c 	.word	0x0800a64c

08003538 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe ff20 	bl	8002388 <_ZN3ros3MsgC1Ev>
 8003548:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	605a      	str	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3308      	adds	r3, #8
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff feab 	bl	80032b4 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	619a      	str	r2, [r3, #24]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	61da      	str	r2, [r3, #28]
    {
    }
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	0800a7fc 	.word	0x0800a7fc

08003578 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6859      	ldr	r1, [r3, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	4413      	add	r3, r2
 8003590:	b2ca      	uxtb	r2, r1
 8003592:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	0a19      	lsrs	r1, r3, #8
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3301      	adds	r3, #1
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	4413      	add	r3, r2
 80035a2:	b2ca      	uxtb	r2, r1
 80035a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	0c19      	lsrs	r1, r3, #16
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3302      	adds	r3, #2
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	4413      	add	r3, r2
 80035b4:	b2ca      	uxtb	r2, r1
 80035b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	0e19      	lsrs	r1, r3, #24
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	3303      	adds	r3, #3
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	4413      	add	r3, r2
 80035c6:	b2ca      	uxtb	r2, r1
 80035c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	3304      	adds	r3, #4
 80035ce:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80035d0:	2300      	movs	r3, #0
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d218      	bcs.n	8003610 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	18d0      	adds	r0, r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699a      	ldr	r2, [r3, #24]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	4413      	add	r3, r2
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	6839      	ldr	r1, [r7, #0]
 80035fa:	440a      	add	r2, r1
 80035fc:	4611      	mov	r1, r2
 80035fe:	4798      	blx	r3
 8003600:	4602      	mov	r2, r0
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4413      	add	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	3301      	adds	r3, #1
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	e7e1      	b.n	80035d4 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69d9      	ldr	r1, [r3, #28]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	4413      	add	r3, r2
 800361a:	b2ca      	uxtb	r2, r1
 800361c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	0a19      	lsrs	r1, r3, #8
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3301      	adds	r3, #1
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	4413      	add	r3, r2
 800362c:	b2ca      	uxtb	r2, r1
 800362e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	0c19      	lsrs	r1, r3, #16
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3302      	adds	r3, #2
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	4413      	add	r3, r2
 800363e:	b2ca      	uxtb	r2, r1
 8003640:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	0e19      	lsrs	r1, r3, #24
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3303      	adds	r3, #3
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	4413      	add	r3, r2
 8003650:	b2ca      	uxtb	r2, r1
 8003652:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3304      	adds	r3, #4
 8003658:	60fb      	str	r3, [r7, #12]
      return offset;
 800365a:	68fb      	ldr	r3, [r7, #12]
    }
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	4413      	add	r3, r2
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	3301      	adds	r3, #1
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	4413      	add	r3, r2
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	3302      	adds	r3, #2
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	4413      	add	r3, r2
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	3303      	adds	r3, #3
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	4413      	add	r3, r2
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	061b      	lsls	r3, r3, #24
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	3304      	adds	r3, #4
 80036b6:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d90a      	bls.n	80036d8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	4619      	mov	r1, r3
 80036cc:	4610      	mov	r0, r2
 80036ce:	f006 fdb5 	bl	800a23c <realloc>
 80036d2:	4602      	mov	r2, r0
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d21b      	bcs.n	8003724 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f103 0008 	add.w	r0, r3, #8
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	4413      	add	r3, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	f7ff fe6c 	bl	80033d6 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 80036fe:	4602      	mov	r2, r0
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	4413      	add	r3, r2
 8003704:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	18d0      	adds	r0, r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3308      	adds	r3, #8
 8003714:	2210      	movs	r2, #16
 8003716:	4619      	mov	r1, r3
 8003718:	f006 fd7a 	bl	800a210 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	3301      	adds	r3, #1
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	e7de      	b.n	80036e2 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	4413      	add	r3, r2
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69da      	ldr	r2, [r3, #28]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	3301      	adds	r3, #1
 800373a:	6839      	ldr	r1, [r7, #0]
 800373c:	440b      	add	r3, r1
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	3302      	adds	r3, #2
 8003750:	6839      	ldr	r1, [r7, #0]
 8003752:	440b      	add	r3, r1
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	041b      	lsls	r3, r3, #16
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69da      	ldr	r2, [r3, #28]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	3303      	adds	r3, #3
 8003766:	6839      	ldr	r1, [r7, #0]
 8003768:	440b      	add	r3, r1
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	061b      	lsls	r3, r3, #24
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	3304      	adds	r3, #4
 8003778:	617b      	str	r3, [r7, #20]
     return offset;
 800377a:	697b      	ldr	r3, [r7, #20]
    }
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	0800a670 	.word	0x0800a670

080037a0 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	0800a68c 	.word	0x0800a68c

080037bc <_ZN8std_msgs15Int16MultiArrayC1Ev>:
      uint32_t data_length;
      typedef int16_t _data_type;
      _data_type st_data;
      _data_type * data;

    Int16MultiArray():
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fe fdde 	bl	8002388 <_ZN3ros3MsgC1Ev>
 80037cc:	4a09      	ldr	r2, [pc, #36]	; (80037f4 <_ZN8std_msgs15Int16MultiArrayC1Ev+0x38>)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3304      	adds	r3, #4
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff feae 	bl	8003538 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	0800a7e4 	.word	0x0800a7e4

080037f8 <_ZNK8std_msgs15Int16MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	1d18      	adds	r0, r3, #4
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	4413      	add	r3, r2
 8003810:	4619      	mov	r1, r3
 8003812:	f7ff feb1 	bl	8003578 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8003816:	4602      	mov	r2, r0
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	4413      	add	r3, r2
 800381c:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	4413      	add	r3, r2
 8003828:	b2ca      	uxtb	r2, r1
 800382a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	0a19      	lsrs	r1, r3, #8
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	3301      	adds	r3, #1
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	4413      	add	r3, r2
 800383a:	b2ca      	uxtb	r2, r1
 800383c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	0c19      	lsrs	r1, r3, #16
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	3302      	adds	r3, #2
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	4413      	add	r3, r2
 800384c:	b2ca      	uxtb	r2, r1
 800384e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	0e19      	lsrs	r1, r3, #24
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	3303      	adds	r3, #3
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	4413      	add	r3, r2
 800385e:	b2ca      	uxtb	r2, r1
 8003860:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	3304      	adds	r3, #4
 8003866:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	429a      	cmp	r2, r3
 8003874:	d21d      	bcs.n	80038b2 <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0xba>
      union {
        int16_t real;
        uint16_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4413      	add	r3, r2
 8003880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003884:	81bb      	strh	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8003886:	89b9      	ldrh	r1, [r7, #12]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	4413      	add	r3, r2
 800388e:	b2ca      	uxtb	r2, r1
 8003890:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8003892:	89bb      	ldrh	r3, [r7, #12]
 8003894:	0a1b      	lsrs	r3, r3, #8
 8003896:	b299      	uxth	r1, r3
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	3301      	adds	r3, #1
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	4413      	add	r3, r2
 80038a0:	b2ca      	uxtb	r2, r1
 80038a2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	3302      	adds	r3, #2
 80038a8:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	3301      	adds	r3, #1
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	e7dc      	b.n	800386c <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0x74>
      }
      return offset;
 80038b2:	697b      	ldr	r3, [r7, #20]
    }
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <_ZN8std_msgs15Int16MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	1d18      	adds	r0, r3, #4
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	4413      	add	r3, r2
 80038d4:	4619      	mov	r1, r3
 80038d6:	f7ff fec5 	bl	8003664 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 80038da:	4602      	mov	r2, r0
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	4413      	add	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	4413      	add	r3, r2
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	3301      	adds	r3, #1
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	4413      	add	r3, r2
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	3302      	adds	r3, #2
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	4413      	add	r3, r2
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	041b      	lsls	r3, r3, #16
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	3303      	adds	r3, #3
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	4413      	add	r3, r2
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	061b      	lsls	r3, r3, #24
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	3304      	adds	r3, #4
 8003926:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	429a      	cmp	r2, r3
 8003930:	d90a      	bls.n	8003948 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x8c>
        this->data = (int16_t*)realloc(this->data, data_lengthT * sizeof(int16_t));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f006 fc7d 	bl	800a23c <realloc>
 8003942:	4602      	mov	r2, r0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	429a      	cmp	r2, r3
 800395a:	d22c      	bcs.n	80039b6 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0xfa>
      union {
        int16_t real;
        uint16_t base;
      } u_st_data;
      u_st_data.base = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003960:	893a      	ldrh	r2, [r7, #8]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	6839      	ldr	r1, [r7, #0]
 8003966:	440b      	add	r3, r1
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	b29b      	uxth	r3, r3
 800396c:	4313      	orrs	r3, r2
 800396e:	b29b      	uxth	r3, r3
 8003970:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003972:	893b      	ldrh	r3, [r7, #8]
 8003974:	b21a      	sxth	r2, r3
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	3301      	adds	r3, #1
 800397a:	6839      	ldr	r1, [r7, #0]
 800397c:	440b      	add	r3, r1
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	021b      	lsls	r3, r3, #8
 8003982:	b21b      	sxth	r3, r3
 8003984:	4313      	orrs	r3, r2
 8003986:	b21b      	sxth	r3, r3
 8003988:	b29b      	uxth	r3, r3
 800398a:	813b      	strh	r3, [r7, #8]
      this->st_data = u_st_data.real;
 800398c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	851a      	strh	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	3302      	adds	r3, #2
 8003998:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int16_t));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	3228      	adds	r2, #40	; 0x28
 80039a8:	8812      	ldrh	r2, [r2, #0]
 80039aa:	b292      	uxth	r2, r2
 80039ac:	801a      	strh	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	3301      	adds	r3, #1
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	e7cd      	b.n	8003952 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x96>
      }
     return offset;
 80039b6:	697b      	ldr	r3, [r7, #20]
    }
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <_ZN8std_msgs15Int16MultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/Int16MultiArray"; };
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <_ZN8std_msgs15Int16MultiArray7getTypeEv+0x18>)
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	0800a6b0 	.word	0x0800a6b0

080039dc <_ZN8std_msgs15Int16MultiArray6getMD5Ev>:
    const char * getMD5(){ return "d9338d7f523fcb692fae9d0a0e9f067c"; };
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <_ZN8std_msgs15Int16MultiArray6getMD5Ev+0x18>)
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	0800a6cc 	.word	0x0800a6cc

080039f8 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
      data("")
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe fcc0 	bl	8002388 <_ZN3ros3MsgC1Ev>
 8003a08:	4a05      	ldr	r2, [pc, #20]	; (8003a20 <_ZN8std_msgs6StringC1Ev+0x28>)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a04      	ldr	r2, [pc, #16]	; (8003a24 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8003a12:	605a      	str	r2, [r3, #4]
    {
    }
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	0800a7cc 	.word	0x0800a7cc
 8003a24:	0800a58c 	.word	0x0800a58c

08003a28 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fc fbe4 	bl	8000208 <strlen>
 8003a40:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	4413      	add	r3, r2
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 f946 	bl	8003cdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	3304      	adds	r3, #4
 8003a54:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	18d0      	adds	r0, r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	4619      	mov	r1, r3
 8003a64:	f006 fbd4 	bl	800a210 <memcpy>
      offset += length_data;
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]
      return offset;
 8003a70:	68fb      	ldr	r3, [r7, #12]
    }
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b086      	sub	sp, #24
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	441a      	add	r2, r3
 8003a8e:	f107 030c 	add.w	r3, r7, #12
 8003a92:	4611      	mov	r1, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 f93f 	bl	8003d18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d20c      	bcs.n	8003aca <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	441a      	add	r2, r3
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	6839      	ldr	r1, [r7, #0]
 8003abc:	440b      	add	r3, r1
 8003abe:	7812      	ldrb	r2, [r2, #0]
 8003ac0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	e7ec      	b.n	8003aa4 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4413      	add	r3, r2
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	441a      	add	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
     return offset;
 8003aee:	693b      	ldr	r3, [r7, #16]
    }
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	4b03      	ldr	r3, [pc, #12]	; (8003b10 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	0800a6f0 	.word	0x0800a6f0

08003b14 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	0800a700 	.word	0x0800a700

08003b30 <_Z13cake_callbackRKN8std_msgs6StringE>:
extern int b_bool, y_bool, p_bool, h_bool;
extern char hole[4];
extern short int mission_array[5];
extern int counttry;
extern int tower_step, temp_pub;
void cake_callback(const std_msgs::String &msg) {
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]

//	std::string str = msg.data; // string data
	if (msg.data[0] == 'b' || msg.data[0] == 'y' || msg.data[0] == 'p') {
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b62      	cmp	r3, #98	; 0x62
 8003b40:	d009      	beq.n	8003b56 <_Z13cake_callbackRKN8std_msgs6StringE+0x26>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b79      	cmp	r3, #121	; 0x79
 8003b4a:	d004      	beq.n	8003b56 <_Z13cake_callbackRKN8std_msgs6StringE+0x26>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b70      	cmp	r3, #112	; 0x70
 8003b54:	d134      	bne.n	8003bc0 <_Z13cake_callbackRKN8std_msgs6StringE+0x90>
		mission_array[0] = 0;
 8003b56:	4b26      	ldr	r3, [pc, #152]	; (8003bf0 <_Z13cake_callbackRKN8std_msgs6StringE+0xc0>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	801a      	strh	r2, [r3, #0]
		hole[(size_t) (msg.data[1] - '0')] = msg.data[0];
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6852      	ldr	r2, [r2, #4]
 8003b64:	3201      	adds	r2, #1
 8003b66:	7812      	ldrb	r2, [r2, #0]
 8003b68:	3a30      	subs	r2, #48	; 0x30
 8003b6a:	7819      	ldrb	r1, [r3, #0]
 8003b6c:	4b21      	ldr	r3, [pc, #132]	; (8003bf4 <_Z13cake_callbackRKN8std_msgs6StringE+0xc4>)
 8003b6e:	5499      	strb	r1, [r3, r2]
		temp_pub = 0;
 8003b70:	4b21      	ldr	r3, [pc, #132]	; (8003bf8 <_Z13cake_callbackRKN8std_msgs6StringE+0xc8>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]
//		mission_array[(size_t) (msg.data[1] - '0')] = 1;
		if (msg.data[0] == 'b' && b_bool == 0)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b62      	cmp	r3, #98	; 0x62
 8003b7e:	d106      	bne.n	8003b8e <_Z13cake_callbackRKN8std_msgs6StringE+0x5e>
 8003b80:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <_Z13cake_callbackRKN8std_msgs6StringE+0xcc>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d102      	bne.n	8003b8e <_Z13cake_callbackRKN8std_msgs6StringE+0x5e>
			b_bool = 1;
 8003b88:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <_Z13cake_callbackRKN8std_msgs6StringE+0xcc>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
		if (msg.data[0] == 'y' && y_bool == 0)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b79      	cmp	r3, #121	; 0x79
 8003b96:	d106      	bne.n	8003ba6 <_Z13cake_callbackRKN8std_msgs6StringE+0x76>
 8003b98:	4b19      	ldr	r3, [pc, #100]	; (8003c00 <_Z13cake_callbackRKN8std_msgs6StringE+0xd0>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <_Z13cake_callbackRKN8std_msgs6StringE+0x76>
			y_bool = 1;
 8003ba0:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <_Z13cake_callbackRKN8std_msgs6StringE+0xd0>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
		if (msg.data[0] == 'p' && p_bool == 0)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b70      	cmp	r3, #112	; 0x70
 8003bae:	d117      	bne.n	8003be0 <_Z13cake_callbackRKN8std_msgs6StringE+0xb0>
 8003bb0:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <_Z13cake_callbackRKN8std_msgs6StringE+0xd4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d113      	bne.n	8003be0 <_Z13cake_callbackRKN8std_msgs6StringE+0xb0>
			p_bool = 1;
 8003bb8:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <_Z13cake_callbackRKN8std_msgs6StringE+0xd4>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]
		if (msg.data[0] == 'p' && p_bool == 0)
 8003bbe:	e00f      	b.n	8003be0 <_Z13cake_callbackRKN8std_msgs6StringE+0xb0>
	}
	else if (msg.data[0] == 'h' && h_bool == 0) {
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b68      	cmp	r3, #104	; 0x68
 8003bc8:	d10b      	bne.n	8003be2 <_Z13cake_callbackRKN8std_msgs6StringE+0xb2>
 8003bca:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <_Z13cake_callbackRKN8std_msgs6StringE+0xd8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d107      	bne.n	8003be2 <_Z13cake_callbackRKN8std_msgs6StringE+0xb2>
		h_bool = 1;
 8003bd2:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <_Z13cake_callbackRKN8std_msgs6StringE+0xd8>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
		mission_array[0] = 0;
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <_Z13cake_callbackRKN8std_msgs6StringE+0xc0>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	801a      	strh	r2, [r3, #0]
	}
}
 8003bde:	e000      	b.n	8003be2 <_Z13cake_callbackRKN8std_msgs6StringE+0xb2>
		if (msg.data[0] == 'p' && p_bool == 0)
 8003be0:	bf00      	nop
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20000b8c 	.word	0x20000b8c
 8003bf4:	20000b54 	.word	0x20000b54
 8003bf8:	20000b88 	.word	0x20000b88
 8003bfc:	20000b60 	.word	0x20000b60
 8003c00:	20000b64 	.word	0x20000b64
 8003c04:	20000b68 	.word	0x20000b68
 8003c08:	20000b6c 	.word	0x20000b6c

08003c0c <HAL_UART_TxCpltCallback>:
ros::Subscriber<std_msgs::String> sub("mission0", cake_callback);

// (2) Create a publisher
ros::Publisher pub("donefullness0", &feedback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 8003c14:	4805      	ldr	r0, [pc, #20]	; (8003c2c <HAL_UART_TxCpltCallback+0x20>)
 8003c16:	f000 f969 	bl	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fa99 	bl	8003154 <_ZN13STM32Hardware5flushEv>
}
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000180 	.word	0x20000180

08003c30 <HAL_UART_ErrorCallback>:
//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
//	nh.getHardware()->reset_rbuf();
//}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a09      	ldr	r2, [pc, #36]	; (8003c60 <HAL_UART_ErrorCallback+0x30>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d10b      	bne.n	8003c58 <HAL_UART_ErrorCallback+0x28>
		HAL_UART_DeInit(&huart2);
 8003c40:	4807      	ldr	r0, [pc, #28]	; (8003c60 <HAL_UART_ErrorCallback+0x30>)
 8003c42:	f004 ffe2 	bl	8008c0a <HAL_UART_DeInit>
		MX_USART2_UART_Init();
 8003c46:	f001 fd17 	bl	8005678 <MX_USART2_UART_Init>
		nh.getHardware()->init();
 8003c4a:	4806      	ldr	r0, [pc, #24]	; (8003c64 <HAL_UART_ErrorCallback+0x34>)
 8003c4c:	f000 f94e 	bl	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003c50:	4603      	mov	r3, r0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fa34 	bl	80030c0 <_ZN13STM32Hardware4initEv>
	}
}
 8003c58:	bf00      	nop
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20000d48 	.word	0x20000d48
 8003c64:	20000180 	.word	0x20000180

08003c68 <pub_to_ros>:

void pub_to_ros() {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
	// (4) Publish your data
//	feedback.data = (std_msgs::Int16MultiArray::_data_type*) malloc(
//			5 * sizeof(std_msgs::Int16MultiArray::_data_type));
	feedback.data_length = 5;
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <pub_to_ros+0x1c>)
 8003c6e:	2205      	movs	r2, #5
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24
	feedback.data = mission_array;
 8003c72:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <pub_to_ros+0x1c>)
 8003c74:	4a04      	ldr	r2, [pc, #16]	; (8003c88 <pub_to_ros+0x20>)
 8003c76:	62da      	str	r2, [r3, #44]	; 0x2c
//	feedback.data[5] = tower_step;

	pub.publish(&feedback);
 8003c78:	4902      	ldr	r1, [pc, #8]	; (8003c84 <pub_to_ros+0x1c>)
 8003c7a:	4804      	ldr	r0, [pc, #16]	; (8003c8c <pub_to_ros+0x24>)
 8003c7c:	f7ff f9d1 	bl	8003022 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003c80:	bf00      	nop
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20000150 	.word	0x20000150
 8003c88:	20000b8c 	.word	0x20000b8c
 8003c8c:	20000ad8 	.word	0x20000ad8

08003c90 <setup>:

void setup(void) {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
	nh.initNode();
 8003c94:	4806      	ldr	r0, [pc, #24]	; (8003cb0 <setup+0x20>)
 8003c96:	f000 f935 	bl	8003f04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.subscribe(sub);
 8003c9a:	4906      	ldr	r1, [pc, #24]	; (8003cb4 <setup+0x24>)
 8003c9c:	4804      	ldr	r0, [pc, #16]	; (8003cb0 <setup+0x20>)
 8003c9e:	f000 f94e 	bl	8003f3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_>

	// (3) Init your publisher with roscore
	nh.advertise(pub);
 8003ca2:	4905      	ldr	r1, [pc, #20]	; (8003cb8 <setup+0x28>)
 8003ca4:	4802      	ldr	r0, [pc, #8]	; (8003cb0 <setup+0x20>)
 8003ca6:	f000 f975 	bl	8003f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8003caa:	bf00      	nop
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000180 	.word	0x20000180
 8003cb4:	20000abc 	.word	0x20000abc
 8003cb8:	20000ad8 	.word	0x20000ad8

08003cbc <loop>:
void loop(void) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8003cc0:	4804      	ldr	r0, [pc, #16]	; (8003cd4 <loop+0x18>)
 8003cc2:	f000 f997 	bl	8003ff4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	counttry++;
 8003cc6:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <loop+0x1c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	4a02      	ldr	r2, [pc, #8]	; (8003cd8 <loop+0x1c>)
 8003cce:	6013      	str	r3, [r2, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000180 	.word	0x20000180
 8003cd8:	20000b5c 	.word	0x20000b5c

08003cdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d80d      	bhi.n	8003d0c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	fa22 f103 	lsr.w	r1, r2, r3
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	b2ca      	uxtb	r2, r1
 8003d02:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	3301      	adds	r3, #1
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	e7ee      	b.n	8003cea <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d811      	bhi.n	8003d56 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6839      	ldr	r1, [r7, #0]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	440a      	add	r2, r1
 8003d3c:	7812      	ldrb	r2, [r2, #0]
 8003d3e:	4611      	mov	r1, r2
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	00d2      	lsls	r2, r2, #3
 8003d44:	fa01 f202 	lsl.w	r2, r1, r2
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3301      	adds	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	e7ea      	b.n	8003d2c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003d56:	bf00      	nop
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	4a04      	ldr	r2, [pc, #16]	; (8003d80 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	0800a844 	.word	0x0800a844

08003d84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff ffe8 	bl	8003d64 <_ZN3ros15NodeHandleBase_C1Ev>
 8003d94:	4a3a      	ldr	r2, [pc, #232]	; (8003e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff f972 	bl	8003088 <_ZN13STM32HardwareC1Ev>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe fe5c 	bl	8002a70 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2b18      	cmp	r3, #24
 8003dc0:	d80b      	bhi.n	8003dda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	2200      	movs	r2, #0
 8003dd0:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	e7f0      	b.n	8003dbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003dda:	2300      	movs	r3, #0
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b18      	cmp	r3, #24
 8003de2:	d80a      	bhi.n	8003dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003dec:	2100      	movs	r1, #0
 8003dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	3301      	adds	r3, #1
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	e7f1      	b.n	8003dde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e04:	d20a      	bcs.n	8003e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3301      	adds	r3, #1
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	e7f0      	b.n	8003dfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e26:	d20a      	bcs.n	8003e3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	e7f0      	b.n	8003e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	0800a7b8 	.word	0x0800a7b8

08003e84 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	4a04      	ldr	r2, [pc, #16]	; (8003ea0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4618      	mov	r0, r3
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	0800a82c 	.word	0x0800a82c

08003ea4 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ffe5 	bl	8003e84 <_ZN3ros11Subscriber_C1Ev>
 8003eba:	4a0b      	ldr	r2, [pc, #44]	; (8003ee8 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fd97 	bl	80039f8 <_ZN8std_msgs6StringC1Ev>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	615a      	str	r2, [r3, #20]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	609a      	str	r2, [r3, #8]
  };
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	0800a7a0 	.word	0x0800a7a0

08003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
  }
 8003ef8:	4618      	mov	r0, r3
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff f8d5 	bl	80030c0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003f3e:	b480      	push	{r7}
 8003f40:	b085      	sub	sp, #20
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b18      	cmp	r3, #24
 8003f50:	dc19      	bgt.n	8003f86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10d      	bne.n	8003f7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003f62:	6839      	ldr	r1, [r7, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	605a      	str	r2, [r3, #4]
        return true;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e004      	b.n	8003f88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3301      	adds	r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	e7e2      	b.n	8003f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003f86:	2300      	movs	r3, #0
  }
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b18      	cmp	r3, #24
 8003fa6:	dc1e      	bgt.n	8003fe6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d111      	bne.n	8003fde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	60da      	str	r2, [r3, #12]
        return true;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e004      	b.n	8003fe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	e7dd      	b.n	8003fa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8003fe6:	2300      	movs	r3, #0
  }
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff f94b 	bl	800329c <_ZN13STM32Hardware4timeEv>
 8004006:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004016:	4293      	cmp	r3, r2
 8004018:	d903      	bls.n	8004022 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004028:	2b00      	cmp	r3, #0
 800402a:	d009      	beq.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	429a      	cmp	r2, r3
 8004036:	d903      	bls.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8004046:	2b00      	cmp	r3, #0
 8004048:	d014      	beq.n	8004074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3304      	adds	r3, #4
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff f924 	bl	800329c <_ZN13STM32Hardware4timeEv>
 8004054:	4602      	mov	r2, r0
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad2      	subs	r2, r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8004060:	429a      	cmp	r2, r3
 8004062:	bf8c      	ite	hi
 8004064:	2301      	movhi	r3, #1
 8004066:	2300      	movls	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800406e:	f06f 0301 	mvn.w	r3, #1
 8004072:	e194      	b.n	800439e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3304      	adds	r3, #4
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff f83d 	bl	80030f8 <_ZN13STM32Hardware4readEv>
 800407e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	f2c0 8174 	blt.w	8004370 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	441a      	add	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800409e:	2b07      	cmp	r3, #7
 80040a0:	d11e      	bne.n	80040e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80040a8:	1c59      	adds	r1, r3, #1
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	b2d1      	uxtb	r1, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	4413      	add	r3, r2
 80040b8:	460a      	mov	r2, r1
 80040ba:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80040c4:	1e5a      	subs	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1b4      	bne.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2208      	movs	r2, #8
 80040da:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80040de:	e7af      	b.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d128      	bne.n	800413c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2bff      	cmp	r3, #255	; 0xff
 80040ee:	d10d      	bne.n	800410c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f103 0214 	add.w	r2, r3, #20
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800410a:	e799      	b.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3304      	adds	r3, #4
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff f8c3 	bl	800329c <_ZN13STM32Hardware4timeEv>
 8004116:	4602      	mov	r2, r0
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004120:	4293      	cmp	r3, r2
 8004122:	bf8c      	ite	hi
 8004124:	2301      	movhi	r3, #1
 8004126:	2300      	movls	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d088      	beq.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8004136:	f06f 0301 	mvn.w	r3, #1
 800413a:	e130      	b.n	800439e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004142:	2b01      	cmp	r3, #1
 8004144:	d118      	bne.n	8004178 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2bfe      	cmp	r3, #254	; 0xfe
 800414a:	d107      	bne.n	800415c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800415a:	e771      	b.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800416a:	2b00      	cmp	r3, #0
 800416c:	f47f af68 	bne.w	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f918 	bl	80043a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004176:	e763      	b.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800417e:	2b02      	cmp	r3, #2
 8004180:	d113      	bne.n	80041aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80041a8:	e74a      	b.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d110      	bne.n	80041d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	021b      	lsls	r3, r3, #8
 80041be:	441a      	add	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80041d4:	e734      	b.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d116      	bne.n	800420e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80041e6:	425a      	negs	r2, r3
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	bf58      	it	pl
 80041ee:	4253      	negpl	r3, r2
 80041f0:	2bff      	cmp	r3, #255	; 0xff
 80041f2:	d107      	bne.n	8004204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004202:	e71d      	b.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800420c:	e718      	b.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004214:	2b05      	cmp	r3, #5
 8004216:	d10f      	bne.n	8004238 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004236:	e703      	b.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800423e:	2b06      	cmp	r3, #6
 8004240:	d117      	bne.n	8004272 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	441a      	add	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2207      	movs	r2, #7
 8004258:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004262:	2b00      	cmp	r3, #0
 8004264:	f47f aeec 	bne.w	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2208      	movs	r2, #8
 800426c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004270:	e6e6      	b.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004278:	2b08      	cmp	r3, #8
 800427a:	f47f aee1 	bne.w	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800428c:	425a      	negs	r2, r3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	bf58      	it	pl
 8004294:	4253      	negpl	r3, r2
 8004296:	2bff      	cmp	r3, #255	; 0xff
 8004298:	f47f aed2 	bne.w	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d110      	bne.n	80042c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f87d 	bl	80043a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f898 	bl	80043e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80042c2:	f04f 33ff 	mov.w	r3, #4294967295
 80042c6:	e06a      	b.n	800439e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80042ce:	2b0a      	cmp	r3, #10
 80042d0:	d107      	bne.n	80042e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80042d8:	4619      	mov	r1, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f960 	bl	80045a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80042e0:	e6ae      	b.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80042e8:	2b06      	cmp	r3, #6
 80042ea:	d10e      	bne.n	800430a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80042f8:	4619      	mov	r1, r3
 80042fa:	4610      	mov	r0, r2
 80042fc:	f7fe fced 	bl	8002cda <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8004308:	e69a      	b.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004310:	2b0b      	cmp	r3, #11
 8004312:	d104      	bne.n	800431e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800431c:	e690      	b.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004324:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800432e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004332:	2b00      	cmp	r3, #0
 8004334:	f43f ae84 	beq.w	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800433e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004348:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004352:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f202 2222 	addw	r2, r2, #546	; 0x222
 800435c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800436a:	4611      	mov	r1, r2
 800436c:	4798      	blx	r3
    while (true)
 800436e:	e667      	b.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004370:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00f      	beq.n	800439c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800438a:	4293      	cmp	r3, r2
 800438c:	d906      	bls.n	800439c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f809 	bl	80043a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 800439c:	2300      	movs	r3, #0
  }
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b086      	sub	sp, #24
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80043ae:	f107 030c 	add.w	r3, r7, #12
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fd fff8 	bl	80023a8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f107 020c 	add.w	r2, r7, #12
 80043c2:	210a      	movs	r1, #10
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	4798      	blx	r3
    rt_time = hardware_.time();
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3304      	adds	r3, #4
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fe ff65 	bl	800329c <_ZN13STM32Hardware4timeEv>
 80043d2:	4602      	mov	r2, r0
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80043da:	bf00      	nop
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80043e2:	b590      	push	{r4, r7, lr}
 80043e4:	b08b      	sub	sp, #44	; 0x2c
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80043ea:	f107 030c 	add.w	r3, r7, #12
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fe f8ca 	bl	8002588 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80043f4:	2300      	movs	r3, #0
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	2b18      	cmp	r3, #24
 80043fc:	dc63      	bgt.n	80044c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d056      	beq.n	80044be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	b29b      	uxth	r3, r3
 8004422:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	6859      	ldr	r1, [r3, #4]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3308      	adds	r3, #8
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4608      	mov	r0, r1
 800445e:	4798      	blx	r3
 8004460:	4603      	mov	r3, r0
 8004462:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	6859      	ldr	r1, [r3, #4]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	330c      	adds	r3, #12
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4608      	mov	r0, r1
 800448c:	4798      	blx	r3
 800448e:	4603      	mov	r3, r0
 8004490:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004496:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681c      	ldr	r4, [r3, #0]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fe fdcc 	bl	800304a <_ZN3ros9Publisher15getEndpointTypeEv>
 80044b2:	4601      	mov	r1, r0
 80044b4:	f107 030c 	add.w	r3, r7, #12
 80044b8:	461a      	mov	r2, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	3301      	adds	r3, #1
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
 80044c4:	e798      	b.n	80043f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80044c6:	2300      	movs	r3, #0
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	2b18      	cmp	r3, #24
 80044ce:	dc5f      	bgt.n	8004590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80044d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d053      	beq.n	8004588 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80044e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80044fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004506:	f202 2222 	addw	r2, r2, #546	; 0x222
 800450a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004512:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3308      	adds	r3, #8
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4608      	mov	r0, r1
 8004522:	4798      	blx	r3
 8004524:	4603      	mov	r3, r0
 8004526:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800452c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004530:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004538:	f202 2222 	addw	r2, r2, #546	; 0x222
 800453c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	330c      	adds	r3, #12
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4608      	mov	r0, r1
 8004548:	4798      	blx	r3
 800454a:	4603      	mov	r3, r0
 800454c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800454e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004552:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681c      	ldr	r4, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800455e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004562:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800456e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3304      	adds	r3, #4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4608      	mov	r0, r1
 800457a:	4798      	blx	r3
 800457c:	4601      	mov	r1, r0
 800457e:	f107 030c 	add.w	r3, r7, #12
 8004582:	461a      	mov	r2, r3
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	3301      	adds	r3, #1
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
 800458e:	e79c      	b.n	80044ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8004598:	bf00      	nop
 800459a:	372c      	adds	r7, #44	; 0x2c
 800459c:	46bd      	mov	sp, r7
 800459e:	bd90      	pop	{r4, r7, pc}

080045a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80045aa:	f107 0308 	add.w	r3, r7, #8
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fd fefa 	bl	80023a8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe fe6f 	bl	800329c <_ZN13STM32Hardware4timeEv>
 80045be:	4602      	mov	r2, r0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80045ca:	f107 0308 	add.w	r3, r7, #8
 80045ce:	6839      	ldr	r1, [r7, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fd ff59 	bl	8002488 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	4915      	ldr	r1, [pc, #84]	; (8004630 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80045dc:	fba1 1303 	umull	r1, r3, r1, r3
 80045e0:	099b      	lsrs	r3, r3, #6
 80045e2:	4413      	add	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80045e6:	6939      	ldr	r1, [r7, #16]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4b11      	ldr	r3, [pc, #68]	; (8004630 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80045ec:	fba3 0302 	umull	r0, r3, r3, r2
 80045f0:	099b      	lsrs	r3, r3, #6
 80045f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045f6:	fb00 f303 	mul.w	r3, r0, r3
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	4a0d      	ldr	r2, [pc, #52]	; (8004634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	440b      	add	r3, r1
 8004604:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004606:	f107 0308 	add.w	r3, r7, #8
 800460a:	3304      	adds	r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f8a6 	bl	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3304      	adds	r3, #4
 8004618:	4618      	mov	r0, r3
 800461a:	f7fe fe3f 	bl	800329c <_ZN13STM32Hardware4timeEv>
 800461e:	4602      	mov	r2, r0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8004626:	bf00      	nop
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	10624dd3 	.word	0x10624dd3
 8004634:	000f4240 	.word	0x000f4240

08004638 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004638:	b580      	push	{r7, lr}
 800463a:	b088      	sub	sp, #32
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b63      	cmp	r3, #99	; 0x63
 8004648:	dd09      	ble.n	800465e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004650:	f083 0301 	eor.w	r3, r3, #1
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800465a:	2300      	movs	r3, #0
 800465c:	e079      	b.n	8004752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800466a:	3207      	adds	r2, #7
 800466c:	4611      	mov	r1, r2
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	4798      	blx	r3
 8004672:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	22ff      	movs	r2, #255	; 0xff
 8004678:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	22fe      	movs	r2, #254	; 0xfe
 8004680:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	b2da      	uxtb	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	b29b      	uxth	r3, r3
 8004692:	0a1b      	lsrs	r3, r3, #8
 8004694:	b29b      	uxth	r3, r3
 8004696:	b2da      	uxtb	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80046aa:	4413      	add	r3, r2
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	43db      	mvns	r3, r3
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	b21b      	sxth	r3, r3
 80046c6:	121b      	asrs	r3, r3, #8
 80046c8:	b21b      	sxth	r3, r3
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80046d6:	2305      	movs	r3, #5
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	3306      	adds	r3, #6
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	dc0d      	bgt.n	8004700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	4413      	add	r3, r2
 80046ea:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	4413      	add	r3, r2
 80046f6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	3301      	adds	r3, #1
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	e7ec      	b.n	80046da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	3307      	adds	r3, #7
 8004704:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	425a      	negs	r2, r3
 800470a:	b2db      	uxtb	r3, r3
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	bf58      	it	pl
 8004710:	4253      	negpl	r3, r2
 8004712:	b2da      	uxtb	r2, r3
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	1c59      	adds	r1, r3, #1
 8004718:	6179      	str	r1, [r7, #20]
 800471a:	43d2      	mvns	r2, r2
 800471c:	b2d1      	uxtb	r1, r2
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	4413      	add	r3, r2
 8004722:	460a      	mov	r2, r1
 8004724:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800472e:	dc0a      	bgt.n	8004746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1d18      	adds	r0, r3, #4
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4619      	mov	r1, r3
 800473e:	f7fe fd67 	bl	8003210 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	e005      	b.n	8004752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004746:	4905      	ldr	r1, [pc, #20]	; (800475c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 f849 	bl	80047e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800474e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004752:	4618      	mov	r0, r3
 8004754:	3720      	adds	r7, #32
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	0800a724 	.word	0x0800a724

08004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3304      	adds	r3, #4
 800476e:	4618      	mov	r0, r3
 8004770:	f7fe fd94 	bl	800329c <_ZN13STM32Hardware4timeEv>
 8004774:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4915      	ldr	r1, [pc, #84]	; (80047d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800477e:	fba1 1303 	umull	r1, r3, r1, r3
 8004782:	099b      	lsrs	r3, r3, #6
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	1e5a      	subs	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6859      	ldr	r1, [r3, #4]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8004796:	fba3 0302 	umull	r0, r3, r3, r2
 800479a:	099b      	lsrs	r3, r3, #6
 800479c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047a0:	fb00 f303 	mul.w	r3, r0, r3
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	4a0c      	ldr	r2, [pc, #48]	; (80047d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80047a8:	fb02 f303 	mul.w	r3, r2, r3
 80047ac:	1aca      	subs	r2, r1, r3
 80047ae:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80047b0:	4413      	add	r3, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80047c4:	4619      	mov	r1, r3
 80047c6:	4610      	mov	r0, r2
 80047c8:	f7fc fa9e 	bl	8000d08 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	10624dd3 	.word	0x10624dd3
 80047d8:	000f4240 	.word	0x000f4240
 80047dc:	3b9aca00 	.word	0x3b9aca00

080047e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	2103      	movs	r1, #3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f804 	bl	80047fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80047f4:	bf00      	nop
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	460b      	mov	r3, r1
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800480a:	f107 0314 	add.w	r3, r7, #20
 800480e:	4618      	mov	r0, r3
 8004810:	f7fe f87e 	bl	8002910 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004814:	7afb      	ldrb	r3, [r7, #11]
 8004816:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f107 0214 	add.w	r2, r7, #20
 8004826:	2107      	movs	r1, #7
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	4798      	blx	r3
  }
 800482c:	bf00      	nop
 800482e:	3720      	adds	r7, #32
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <_Z41__static_initialization_and_destruction_0ii>:
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d116      	bne.n	8004872 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800484a:	4293      	cmp	r3, r2
 800484c:	d111      	bne.n	8004872 <_Z41__static_initialization_and_destruction_0ii+0x3e>
std_msgs::Int16MultiArray feedback;
 800484e:	480b      	ldr	r0, [pc, #44]	; (800487c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004850:	f7fe ffb4 	bl	80037bc <_ZN8std_msgs15Int16MultiArrayC1Ev>
ros::NodeHandle nh;
 8004854:	480a      	ldr	r0, [pc, #40]	; (8004880 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004856:	f7ff fa95 	bl	8003d84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::String> sub("mission0", cake_callback);
 800485a:	2301      	movs	r3, #1
 800485c:	4a09      	ldr	r2, [pc, #36]	; (8004884 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800485e:	490a      	ldr	r1, [pc, #40]	; (8004888 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004860:	480a      	ldr	r0, [pc, #40]	; (800488c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004862:	f7ff fb1f 	bl	8003ea4 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub("donefullness0", &feedback);
 8004866:	2300      	movs	r3, #0
 8004868:	4a04      	ldr	r2, [pc, #16]	; (800487c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800486a:	4909      	ldr	r1, [pc, #36]	; (8004890 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800486c:	4809      	ldr	r0, [pc, #36]	; (8004894 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800486e:	f7fe fbc1 	bl	8002ff4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000150 	.word	0x20000150
 8004880:	20000180 	.word	0x20000180
 8004884:	08003b31 	.word	0x08003b31
 8004888:	0800a760 	.word	0x0800a760
 800488c:	20000abc 	.word	0x20000abc
 8004890:	0800a76c 	.word	0x0800a76c
 8004894:	20000ad8 	.word	0x20000ad8

08004898 <_ZN3ros10SubscriberIN8std_msgs6StringEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	330c      	adds	r3, #12
 80048a6:	6839      	ldr	r1, [r7, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff f8e6 	bl	8003a7a <_ZN8std_msgs6String11deserializeEPh>
    this->cb_(msg);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	320c      	adds	r2, #12
 80048b6:	4610      	mov	r0, r2
 80048b8:	4798      	blx	r3
  }
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <_ZN3ros10SubscriberIN8std_msgs6StringEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
  }
 80048ce:	4618      	mov	r0, r3
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <_ZN3ros10SubscriberIN8std_msgs6StringEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	330c      	adds	r3, #12
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff f906 	bl	8003af8 <_ZN8std_msgs6String7getTypeEv>
 80048ec:	4603      	mov	r3, r0
  }
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <_ZN3ros10SubscriberIN8std_msgs6StringEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b082      	sub	sp, #8
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	330c      	adds	r3, #12
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff f906 	bl	8003b14 <_ZN8std_msgs6String6getMD5Ev>
 8004908:	4603      	mov	r3, r0
  }
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
    return configured_;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <_GLOBAL__sub_I__Z13cake_callbackRKN8std_msgs6StringE>:
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
 8004930:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004934:	2001      	movs	r0, #1
 8004936:	f7ff ff7d 	bl	8004834 <_Z41__static_initialization_and_destruction_0ii>
 800493a:	bd80      	pop	{r7, pc}

0800493c <mainrun>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart3;
extern ADC_HandleTypeDef hadc1;
extern DMA_HandleTypeDef hdma_adc1;
void mainrun() {
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim6); //clock for step1
 8004940:	484e      	ldr	r0, [pc, #312]	; (8004a7c <mainrun+0x140>)
 8004942:	f003 fa95 	bl	8007e70 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7); //clock for feedback
 8004946:	484e      	ldr	r0, [pc, #312]	; (8004a80 <mainrun+0x144>)
 8004948:	f003 fa92 	bl	8007e70 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10); //clock for communicate
 800494c:	484d      	ldr	r0, [pc, #308]	; (8004a84 <mainrun+0x148>)
 800494e:	f003 fa8f 	bl	8007e70 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //for pump1 PA0
 8004952:	2100      	movs	r1, #0
 8004954:	484c      	ldr	r0, [pc, #304]	; (8004a88 <mainrun+0x14c>)
 8004956:	f003 fb4b 	bl	8007ff0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //for valve1 PA1
 800495a:	2104      	movs	r1, #4
 800495c:	484a      	ldr	r0, [pc, #296]	; (8004a88 <mainrun+0x14c>)
 800495e:	f003 fb47 	bl	8007ff0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for pump4 PC6
 8004962:	2100      	movs	r1, #0
 8004964:	4849      	ldr	r0, [pc, #292]	; (8004a8c <mainrun+0x150>)
 8004966:	f003 fb43 	bl	8007ff0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for valve4 PC7
 800496a:	2104      	movs	r1, #4
 800496c:	4847      	ldr	r0, [pc, #284]	; (8004a8c <mainrun+0x150>)
 800496e:	f003 fb3f 	bl	8007ff0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //for pump3 PC8
 8004972:	2108      	movs	r1, #8
 8004974:	4845      	ldr	r0, [pc, #276]	; (8004a8c <mainrun+0x150>)
 8004976:	f003 fb3b 	bl	8007ff0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); //for valve3 Pc9
 800497a:	210c      	movs	r1, #12
 800497c:	4843      	ldr	r0, [pc, #268]	; (8004a8c <mainrun+0x150>)
 800497e:	f003 fb37 	bl	8007ff0 <HAL_TIM_PWM_Start>
	//set the cake
	hole[0] = 0;
 8004982:	4b43      	ldr	r3, [pc, #268]	; (8004a90 <mainrun+0x154>)
 8004984:	2200      	movs	r2, #0
 8004986:	701a      	strb	r2, [r3, #0]
	hole[1] = 'b';
 8004988:	4b41      	ldr	r3, [pc, #260]	; (8004a90 <mainrun+0x154>)
 800498a:	2262      	movs	r2, #98	; 0x62
 800498c:	705a      	strb	r2, [r3, #1]
	hole[2] = 'y';
 800498e:	4b40      	ldr	r3, [pc, #256]	; (8004a90 <mainrun+0x154>)
 8004990:	2279      	movs	r2, #121	; 0x79
 8004992:	709a      	strb	r2, [r3, #2]
	hole[3] = 'p';
 8004994:	4b3e      	ldr	r3, [pc, #248]	; (8004a90 <mainrun+0x154>)
 8004996:	2270      	movs	r2, #112	; 0x70
 8004998:	70da      	strb	r2, [r3, #3]
	//initialization all the mosfet
	//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_cake, 3);
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800499a:	4b3b      	ldr	r3, [pc, #236]	; (8004a88 <mainrun+0x14c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2200      	movs	r2, #0
 80049a0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80049a2:	4b39      	ldr	r3, [pc, #228]	; (8004a88 <mainrun+0x14c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2200      	movs	r2, #0
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80049aa:	4b38      	ldr	r3, [pc, #224]	; (8004a8c <mainrun+0x150>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2200      	movs	r2, #0
 80049b0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80049b2:	4b36      	ldr	r3, [pc, #216]	; (8004a8c <mainrun+0x150>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2200      	movs	r2, #0
 80049b8:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80049ba:	4b34      	ldr	r3, [pc, #208]	; (8004a8c <mainrun+0x150>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2200      	movs	r2, #0
 80049c0:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 80049c2:	4b32      	ldr	r3, [pc, #200]	; (8004a8c <mainrun+0x150>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2200      	movs	r2, #0
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40
	//initialization all the servo
	UART_Send_SetMotorPosition(1, 1680, 300);
 80049ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049ce:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 80049d2:	2001      	movs	r0, #1
 80049d4:	f7fc f9e0 	bl	8000d98 <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(4, 1680, 300);
 80049d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049dc:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 80049e0:	2004      	movs	r0, #4
 80049e2:	f7fc f9d9 	bl	8000d98 <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(3, 1680, 300);
 80049e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049ea:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 80049ee:	2003      	movs	r0, #3
 80049f0:	f7fc f9d2 	bl	8000d98 <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(5, 1600, 300);
 80049f4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049f8:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80049fc:	2005      	movs	r0, #5
 80049fe:	f7fc f9cb 	bl	8000d98 <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(6, 950, 300);
 8004a02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a06:	f240 31b6 	movw	r1, #950	; 0x3b6
 8004a0a:	2006      	movs	r0, #6
 8004a0c:	f7fc f9c4 	bl	8000d98 <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 8004a10:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <mainrun+0x158>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
	//	}

	while (1) {
//		rotate_the_ring(rotate);
//		HAL_Delay(5000);
		if (servo_delay_temp == 0) {
 8004a16:	4b1f      	ldr	r3, [pc, #124]	; (8004a94 <mainrun+0x158>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1fb      	bne.n	8004a16 <mainrun+0xda>
			//			if (b_bool == 1 && y_bool == 1 && p_bool == 1 && h_bool == 1) {
			judge_the_empty_and_order();
 8004a1e:	f7fc fcd5 	bl	80013cc <judge_the_empty_and_order>
			//	rotate_the_ring(2);
			//	UART_Send_SetMotorPosition(5, 1800, 1500);
			Tower_of_Hanoi(cake_order);
 8004a22:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <mainrun+0x15c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fc ffe2 	bl	80019f0 <Tower_of_Hanoi>
			b_bool = y_bool = p_bool = h_bool = 0;
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <mainrun+0x160>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <mainrun+0x160>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1a      	ldr	r2, [pc, #104]	; (8004aa0 <mainrun+0x164>)
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	4b19      	ldr	r3, [pc, #100]	; (8004aa0 <mainrun+0x164>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a19      	ldr	r2, [pc, #100]	; (8004aa4 <mainrun+0x168>)
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	4b18      	ldr	r3, [pc, #96]	; (8004aa4 <mainrun+0x168>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a18      	ldr	r2, [pc, #96]	; (8004aa8 <mainrun+0x16c>)
 8004a48:	6013      	str	r3, [r2, #0]
			//			}

			// close all the mosfet
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8004a4a:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <mainrun+0x14c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8004a52:	4b0d      	ldr	r3, [pc, #52]	; (8004a88 <mainrun+0x14c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2200      	movs	r2, #0
 8004a58:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8004a5a:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <mainrun+0x150>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8004a62:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <mainrun+0x150>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2200      	movs	r2, #0
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8004a6a:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <mainrun+0x150>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8004a72:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <mainrun+0x150>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2200      	movs	r2, #0
 8004a78:	641a      	str	r2, [r3, #64]	; 0x40
		if (servo_delay_temp == 0) {
 8004a7a:	e7cc      	b.n	8004a16 <mainrun+0xda>
 8004a7c:	20000c2c 	.word	0x20000c2c
 8004a80:	20000c74 	.word	0x20000c74
 8004a84:	20000cbc 	.word	0x20000cbc
 8004a88:	20000b9c 	.word	0x20000b9c
 8004a8c:	20000be4 	.word	0x20000be4
 8004a90:	20000b54 	.word	0x20000b54
 8004a94:	20000b84 	.word	0x20000b84
 8004a98:	20000004 	.word	0x20000004
 8004a9c:	20000b6c 	.word	0x20000b6c
 8004aa0:	20000b68 	.word	0x20000b68
 8004aa4:	20000b64 	.word	0x20000b64
 8004aa8:	20000b60 	.word	0x20000b60

08004aac <HAL_TIM_PeriodElapsedCallback>:
		}
	}

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1a      	ldr	r2, [pc, #104]	; (8004b24 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	f040 808e 	bne.w	8004bdc <HAL_TIM_PeriodElapsedCallback+0x130>
		ms1++;
 8004ac0:	4b19      	ldr	r3, [pc, #100]	; (8004b28 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004ac8:	6013      	str	r3, [r2, #0]
		if (step1 != 0) {
 8004aca:	4b18      	ldr	r3, [pc, #96]	; (8004b2c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 8084 	beq.w	8004bdc <HAL_TIM_PeriodElapsedCallback+0x130>
			if (dir_state1 == 1)
 8004ad4:	4b16      	ldr	r3, [pc, #88]	; (8004b30 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d106      	bne.n	8004aea <HAL_TIM_PeriodElapsedCallback+0x3e>
				HAL_GPIO_WritePin(Step1_DIR_Port, Step1_DIR_Pin, GPIO_PIN_SET);
 8004adc:	2201      	movs	r2, #1
 8004ade:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ae2:	4814      	ldr	r0, [pc, #80]	; (8004b34 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004ae4:	f002 fb72 	bl	80071cc <HAL_GPIO_WritePin>
 8004ae8:	e009      	b.n	8004afe <HAL_TIM_PeriodElapsedCallback+0x52>
			else if (dir_state1 == 0)
 8004aea:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d105      	bne.n	8004afe <HAL_TIM_PeriodElapsedCallback+0x52>
				HAL_GPIO_WritePin(Step1_DIR_Port, Step1_DIR_Pin,
 8004af2:	2200      	movs	r2, #0
 8004af4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004af8:	480e      	ldr	r0, [pc, #56]	; (8004b34 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004afa:	f002 fb67 	bl	80071cc <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
			temp++;
 8004afe:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3301      	adds	r3, #1
 8004b04:	4a0c      	ldr	r2, [pc, #48]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004b06:	6013      	str	r3, [r2, #0]
			if (step_state1 == 1) {
 8004b08:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d119      	bne.n	8004b44 <HAL_TIM_PeriodElapsedCallback+0x98>
				HAL_GPIO_WritePin(Step1_STEP_Port, Step1_STEP_Pin,
 8004b10:	2200      	movs	r2, #0
 8004b12:	2104      	movs	r1, #4
 8004b14:	480a      	ldr	r0, [pc, #40]	; (8004b40 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004b16:	f002 fb59 	bl	80071cc <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				step_state1 = 0;
 8004b1a:	4b08      	ldr	r3, [pc, #32]	; (8004b3c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	e021      	b.n	8004b66 <HAL_TIM_PeriodElapsedCallback+0xba>
 8004b22:	bf00      	nop
 8004b24:	40001000 	.word	0x40001000
 8004b28:	20000b00 	.word	0x20000b00
 8004b2c:	20000aec 	.word	0x20000aec
 8004b30:	20000af0 	.word	0x20000af0
 8004b34:	40020800 	.word	0x40020800
 8004b38:	20000b58 	.word	0x20000b58
 8004b3c:	20000afc 	.word	0x20000afc
 8004b40:	40020c00 	.word	0x40020c00
			}
			else if (step_state1 == 0) {
 8004b44:	4b98      	ldr	r3, [pc, #608]	; (8004da8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10c      	bne.n	8004b66 <HAL_TIM_PeriodElapsedCallback+0xba>
				HAL_GPIO_WritePin(Step1_STEP_Port, Step1_STEP_Pin,
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	2104      	movs	r1, #4
 8004b50:	4896      	ldr	r0, [pc, #600]	; (8004dac <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004b52:	f002 fb3b 	bl	80071cc <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
				step_state1 = 1;
 8004b56:	4b94      	ldr	r3, [pc, #592]	; (8004da8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004b58:	2201      	movs	r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
				step1--;
 8004b5c:	4b94      	ldr	r3, [pc, #592]	; (8004db0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	4a93      	ldr	r2, [pc, #588]	; (8004db0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004b64:	6013      	str	r3, [r2, #0]

			}
			if (temp == 3) {
 8004b66:	4b93      	ldr	r3, [pc, #588]	; (8004db4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d136      	bne.n	8004bdc <HAL_TIM_PeriodElapsedCallback+0x130>
				if (step1 > 300) {
 8004b6e:	4b90      	ldr	r3, [pc, #576]	; (8004db0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004b76:	dd1a      	ble.n	8004bae <HAL_TIM_PeriodElapsedCallback+0x102>
					arr = arr - 2;
 8004b78:	4b8f      	ldr	r3, [pc, #572]	; (8004db8 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3b02      	subs	r3, #2
 8004b7e:	4a8e      	ldr	r2, [pc, #568]	; (8004db8 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004b80:	6013      	str	r3, [r2, #0]
					if (arr < 300)
 8004b82:	4b8d      	ldr	r3, [pc, #564]	; (8004db8 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004b8a:	da03      	bge.n	8004b94 <HAL_TIM_PeriodElapsedCallback+0xe8>
						arr = 300;
 8004b8c:	4b8a      	ldr	r3, [pc, #552]	; (8004db8 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004b8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b92:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_AUTORELOAD(&htim6, arr);
 8004b94:	4b88      	ldr	r3, [pc, #544]	; (8004db8 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4b88      	ldr	r3, [pc, #544]	; (8004dbc <HAL_TIM_PeriodElapsedCallback+0x310>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b9e:	4b86      	ldr	r3, [pc, #536]	; (8004db8 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	4b85      	ldr	r3, [pc, #532]	; (8004dbc <HAL_TIM_PeriodElapsedCallback+0x310>)
 8004ba6:	60da      	str	r2, [r3, #12]
					temp = 0;
 8004ba8:	4b82      	ldr	r3, [pc, #520]	; (8004db4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
				}

				if (step1 <= 300) {
 8004bae:	4b80      	ldr	r3, [pc, #512]	; (8004db0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004bb6:	dc11      	bgt.n	8004bdc <HAL_TIM_PeriodElapsedCallback+0x130>
					arr = arr + 2;
 8004bb8:	4b7f      	ldr	r3, [pc, #508]	; (8004db8 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3302      	adds	r3, #2
 8004bbe:	4a7e      	ldr	r2, [pc, #504]	; (8004db8 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004bc0:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_AUTORELOAD(&htim6, arr);
 8004bc2:	4b7d      	ldr	r3, [pc, #500]	; (8004db8 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4b7d      	ldr	r3, [pc, #500]	; (8004dbc <HAL_TIM_PeriodElapsedCallback+0x310>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	62da      	str	r2, [r3, #44]	; 0x2c
 8004bcc:	4b7a      	ldr	r3, [pc, #488]	; (8004db8 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4b7a      	ldr	r3, [pc, #488]	; (8004dbc <HAL_TIM_PeriodElapsedCallback+0x310>)
 8004bd4:	60da      	str	r2, [r3, #12]
					temp = 0;
 8004bd6:	4b77      	ldr	r3, [pc, #476]	; (8004db4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
				}
			}

		}
	}
	if (htim->Instance == TIM7) {
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a77      	ldr	r2, [pc, #476]	; (8004dc0 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	f040 80d5 	bne.w	8004d92 <HAL_TIM_PeriodElapsedCallback+0x2e6>

		if (suck1 == 1) {           //press_sensor1 feedback(suck)
 8004be8:	4b76      	ldr	r3, [pc, #472]	; (8004dc4 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d11e      	bne.n	8004c2e <HAL_TIM_PeriodElapsedCallback+0x182>
			i1++;
 8004bf0:	4b75      	ldr	r3, [pc, #468]	; (8004dc8 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	4a74      	ldr	r2, [pc, #464]	; (8004dc8 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004bf8:	6013      	str	r3, [r2, #0]
			//			if (ADC_cake[0] < 200) {        //PA5
			if (i1 == 500) {
 8004bfa:	4b73      	ldr	r3, [pc, #460]	; (8004dc8 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c02:	d114      	bne.n	8004c2e <HAL_TIM_PeriodElapsedCallback+0x182>
				suck_success1 = 1;
 8004c04:	4b71      	ldr	r3, [pc, #452]	; (8004dcc <HAL_TIM_PeriodElapsedCallback+0x320>)
 8004c06:	2201      	movs	r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
				suck1 = 0;
 8004c0a:	4b6e      	ldr	r3, [pc, #440]	; (8004dc4 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(1, 1680, 300);
 8004c10:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c14:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8004c18:	2001      	movs	r0, #1
 8004c1a:	f7fc f8bd 	bl	8000d98 <UART_Send_SetMotorPosition>
				i1 = 0;
 8004c1e:	4b6a      	ldr	r3, [pc, #424]	; (8004dc8 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
				suck_temp--;
 8004c24:	4b6a      	ldr	r3, [pc, #424]	; (8004dd0 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	4a69      	ldr	r2, [pc, #420]	; (8004dd0 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004c2c:	6013      	str	r3, [r2, #0]
				//			}
			}
		}
		if (suck4 == 1) {                     //press_sensor4 feedback(suck)
 8004c2e:	4b69      	ldr	r3, [pc, #420]	; (8004dd4 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d11e      	bne.n	8004c74 <HAL_TIM_PeriodElapsedCallback+0x1c8>
			i2++;
 8004c36:	4b68      	ldr	r3, [pc, #416]	; (8004dd8 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	4a66      	ldr	r2, [pc, #408]	; (8004dd8 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8004c3e:	6013      	str	r3, [r2, #0]
			//			if (ADC_cake[1] < 200) {     //PA6
			if (i2 == 500) {
 8004c40:	4b65      	ldr	r3, [pc, #404]	; (8004dd8 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c48:	d114      	bne.n	8004c74 <HAL_TIM_PeriodElapsedCallback+0x1c8>
				suck_success4 = 1;
 8004c4a:	4b64      	ldr	r3, [pc, #400]	; (8004ddc <HAL_TIM_PeriodElapsedCallback+0x330>)
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(4, 1680, 300);
 8004c50:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c54:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8004c58:	2004      	movs	r0, #4
 8004c5a:	f7fc f89d 	bl	8000d98 <UART_Send_SetMotorPosition>
				i2 = 0;
 8004c5e:	4b5e      	ldr	r3, [pc, #376]	; (8004dd8 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
				suck_temp--;
 8004c64:	4b5a      	ldr	r3, [pc, #360]	; (8004dd0 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	4a59      	ldr	r2, [pc, #356]	; (8004dd0 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004c6c:	6013      	str	r3, [r2, #0]
				suck4 = 0;
 8004c6e:	4b59      	ldr	r3, [pc, #356]	; (8004dd4 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
				//			}
			}
		}
		if (suck3 == 1) {                //press_sensor3 feedback(suck)
 8004c74:	4b5a      	ldr	r3, [pc, #360]	; (8004de0 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d121      	bne.n	8004cc0 <HAL_TIM_PeriodElapsedCallback+0x214>
			i3++;
 8004c7c:	4b59      	ldr	r3, [pc, #356]	; (8004de4 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3301      	adds	r3, #1
 8004c82:	4a58      	ldr	r2, [pc, #352]	; (8004de4 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8004c84:	6013      	str	r3, [r2, #0]
			//			if (ADC_cake[2] < 200) {      //PA7
			if (i3 == 500) {
 8004c86:	4b57      	ldr	r3, [pc, #348]	; (8004de4 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c8e:	d117      	bne.n	8004cc0 <HAL_TIM_PeriodElapsedCallback+0x214>
				suck_success3 = 1;
 8004c90:	4b55      	ldr	r3, [pc, #340]	; (8004de8 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	601a      	str	r2, [r3, #0]
				suck3 = 0;
 8004c96:	4b52      	ldr	r3, [pc, #328]	; (8004de0 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(3, 1680, 300);
 8004c9c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ca0:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8004ca4:	2003      	movs	r0, #3
 8004ca6:	f7fc f877 	bl	8000d98 <UART_Send_SetMotorPosition>
				i3 = 0;
 8004caa:	4b4e      	ldr	r3, [pc, #312]	; (8004de4 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]
				suck_temp--;
 8004cb0:	4b47      	ldr	r3, [pc, #284]	; (8004dd0 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	4a46      	ldr	r2, [pc, #280]	; (8004dd0 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004cb8:	6013      	str	r3, [r2, #0]
				suck3 = 0;
 8004cba:	4b49      	ldr	r3, [pc, #292]	; (8004de0 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
				//			}
			}
		}
		if (unsuck1 == 1) {          //press_sensor1 feedback(unsuck)
 8004cc0:	4b4a      	ldr	r3, [pc, #296]	; (8004dec <HAL_TIM_PeriodElapsedCallback+0x340>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d11e      	bne.n	8004d06 <HAL_TIM_PeriodElapsedCallback+0x25a>
			i4++;
 8004cc8:	4b49      	ldr	r3, [pc, #292]	; (8004df0 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	4a48      	ldr	r2, [pc, #288]	; (8004df0 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8004cd0:	6013      	str	r3, [r2, #0]

			//			if (ADC_cake[0] > 1900) {       //PA5
			if (i4 == 500) {
 8004cd2:	4b47      	ldr	r3, [pc, #284]	; (8004df0 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004cda:	d114      	bne.n	8004d06 <HAL_TIM_PeriodElapsedCallback+0x25a>
				unsuck_success1 = 1;
 8004cdc:	4b45      	ldr	r3, [pc, #276]	; (8004df4 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(1, 1680, 300);
 8004ce2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ce6:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8004cea:	2001      	movs	r0, #1
 8004cec:	f7fc f854 	bl	8000d98 <UART_Send_SetMotorPosition>
				i4 = 0;
 8004cf0:	4b3f      	ldr	r3, [pc, #252]	; (8004df0 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
				unsuck_temp--;
 8004cf6:	4b40      	ldr	r3, [pc, #256]	; (8004df8 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	4a3e      	ldr	r2, [pc, #248]	; (8004df8 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8004cfe:	6013      	str	r3, [r2, #0]
				unsuck1 = 0;
 8004d00:	4b3a      	ldr	r3, [pc, #232]	; (8004dec <HAL_TIM_PeriodElapsedCallback+0x340>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
				//			}
			}
		}
		if (unsuck4 == 1) {        // press_sensor4 feedback(unsuck)
 8004d06:	4b3d      	ldr	r3, [pc, #244]	; (8004dfc <HAL_TIM_PeriodElapsedCallback+0x350>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d11e      	bne.n	8004d4c <HAL_TIM_PeriodElapsedCallback+0x2a0>
			i5++;
 8004d0e:	4b3c      	ldr	r3, [pc, #240]	; (8004e00 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3301      	adds	r3, #1
 8004d14:	4a3a      	ldr	r2, [pc, #232]	; (8004e00 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8004d16:	6013      	str	r3, [r2, #0]
			//			if (ADC_cake[1] > 1900) {               //PA6
			if (i5 == 500) {
 8004d18:	4b39      	ldr	r3, [pc, #228]	; (8004e00 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d20:	d114      	bne.n	8004d4c <HAL_TIM_PeriodElapsedCallback+0x2a0>
				unsuck_success4 = 1;
 8004d22:	4b38      	ldr	r3, [pc, #224]	; (8004e04 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8004d24:	2201      	movs	r2, #1
 8004d26:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(4, 1680, 300);
 8004d28:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d2c:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8004d30:	2004      	movs	r0, #4
 8004d32:	f7fc f831 	bl	8000d98 <UART_Send_SetMotorPosition>
				i5 = 0;
 8004d36:	4b32      	ldr	r3, [pc, #200]	; (8004e00 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
				unsuck_temp--;
 8004d3c:	4b2e      	ldr	r3, [pc, #184]	; (8004df8 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	4a2d      	ldr	r2, [pc, #180]	; (8004df8 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8004d44:	6013      	str	r3, [r2, #0]
				unsuck4 = 0;
 8004d46:	4b2d      	ldr	r3, [pc, #180]	; (8004dfc <HAL_TIM_PeriodElapsedCallback+0x350>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
				//			}
			}
		}
		if (unsuck3 == 1) {      //press_sensor3 feedback(unsuck)
 8004d4c:	4b2e      	ldr	r3, [pc, #184]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d11e      	bne.n	8004d92 <HAL_TIM_PeriodElapsedCallback+0x2e6>
			i6++;
 8004d54:	4b2d      	ldr	r3, [pc, #180]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0x360>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	4a2c      	ldr	r2, [pc, #176]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0x360>)
 8004d5c:	6013      	str	r3, [r2, #0]
			//			if (ADC_cake[2] > 1900) {          //PA7
			if (i6 == 500) {
 8004d5e:	4b2b      	ldr	r3, [pc, #172]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0x360>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d66:	d114      	bne.n	8004d92 <HAL_TIM_PeriodElapsedCallback+0x2e6>
				unsuck_success3 = 1;
 8004d68:	4b29      	ldr	r3, [pc, #164]	; (8004e10 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(3, 1680, 300);
 8004d6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d72:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8004d76:	2003      	movs	r0, #3
 8004d78:	f7fc f80e 	bl	8000d98 <UART_Send_SetMotorPosition>
				i6 = 0;
 8004d7c:	4b23      	ldr	r3, [pc, #140]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0x360>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]
				unsuck_temp--;
 8004d82:	4b1d      	ldr	r3, [pc, #116]	; (8004df8 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	4a1b      	ldr	r2, [pc, #108]	; (8004df8 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8004d8a:	6013      	str	r3, [r2, #0]
				unsuck3 = 0;
 8004d8c:	4b1e      	ldr	r3, [pc, #120]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]
				//			}
			}
		}
	}
	if (htim->Instance == TIM10) {
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1f      	ldr	r2, [pc, #124]	; (8004e14 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	f040 808d 	bne.w	8004eb8 <HAL_TIM_PeriodElapsedCallback+0x40c>
		loop();
 8004d9e:	f7fe ff8d 	bl	8003cbc <loop>
		counttry++;
 8004da2:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	e039      	b.n	8004e1c <HAL_TIM_PeriodElapsedCallback+0x370>
 8004da8:	20000afc 	.word	0x20000afc
 8004dac:	40020c00 	.word	0x40020c00
 8004db0:	20000aec 	.word	0x20000aec
 8004db4:	20000b58 	.word	0x20000b58
 8004db8:	20000000 	.word	0x20000000
 8004dbc:	20000c2c 	.word	0x20000c2c
 8004dc0:	40001400 	.word	0x40001400
 8004dc4:	20000b04 	.word	0x20000b04
 8004dc8:	20000b3c 	.word	0x20000b3c
 8004dcc:	20000b24 	.word	0x20000b24
 8004dd0:	20000b1c 	.word	0x20000b1c
 8004dd4:	20000b08 	.word	0x20000b08
 8004dd8:	20000b40 	.word	0x20000b40
 8004ddc:	20000b28 	.word	0x20000b28
 8004de0:	20000b0c 	.word	0x20000b0c
 8004de4:	20000b44 	.word	0x20000b44
 8004de8:	20000b2c 	.word	0x20000b2c
 8004dec:	20000b10 	.word	0x20000b10
 8004df0:	20000b48 	.word	0x20000b48
 8004df4:	20000b30 	.word	0x20000b30
 8004df8:	20000b20 	.word	0x20000b20
 8004dfc:	20000b14 	.word	0x20000b14
 8004e00:	20000b4c 	.word	0x20000b4c
 8004e04:	20000b34 	.word	0x20000b34
 8004e08:	20000b18 	.word	0x20000b18
 8004e0c:	20000b50 	.word	0x20000b50
 8004e10:	20000b38 	.word	0x20000b38
 8004e14:	40014400 	.word	0x40014400
 8004e18:	20000b5c 	.word	0x20000b5c
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	4a28      	ldr	r2, [pc, #160]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8004e20:	6013      	str	r3, [r2, #0]
		if (suck_delay_temp == 1) {
 8004e22:	4b28      	ldr	r3, [pc, #160]	; (8004ec4 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d10f      	bne.n	8004e4a <HAL_TIM_PeriodElapsedCallback+0x39e>
			suck_delay++;
 8004e2a:	4b27      	ldr	r3, [pc, #156]	; (8004ec8 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	4a25      	ldr	r2, [pc, #148]	; (8004ec8 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8004e32:	6013      	str	r3, [r2, #0]
			if (suck_delay == 50) {
 8004e34:	4b24      	ldr	r3, [pc, #144]	; (8004ec8 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b32      	cmp	r3, #50	; 0x32
 8004e3a:	d12d      	bne.n	8004e98 <HAL_TIM_PeriodElapsedCallback+0x3ec>
				suck_delay = 0;
 8004e3c:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
				suck_delay_temp = 0;
 8004e42:	4b20      	ldr	r3, [pc, #128]	; (8004ec4 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	e026      	b.n	8004e98 <HAL_TIM_PeriodElapsedCallback+0x3ec>
			}
		}
		else if (unsuck_delay_temp == 1) {
 8004e4a:	4b20      	ldr	r3, [pc, #128]	; (8004ecc <HAL_TIM_PeriodElapsedCallback+0x420>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d10f      	bne.n	8004e72 <HAL_TIM_PeriodElapsedCallback+0x3c6>
			unsuck_delay++;
 8004e52:	4b1f      	ldr	r3, [pc, #124]	; (8004ed0 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3301      	adds	r3, #1
 8004e58:	4a1d      	ldr	r2, [pc, #116]	; (8004ed0 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8004e5a:	6013      	str	r3, [r2, #0]
			if (unsuck_delay == 50) {
 8004e5c:	4b1c      	ldr	r3, [pc, #112]	; (8004ed0 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b32      	cmp	r3, #50	; 0x32
 8004e62:	d119      	bne.n	8004e98 <HAL_TIM_PeriodElapsedCallback+0x3ec>
				unsuck_delay = 0;
 8004e64:	4b1a      	ldr	r3, [pc, #104]	; (8004ed0 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]
				unsuck_delay_temp = 0;
 8004e6a:	4b18      	ldr	r3, [pc, #96]	; (8004ecc <HAL_TIM_PeriodElapsedCallback+0x420>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	e012      	b.n	8004e98 <HAL_TIM_PeriodElapsedCallback+0x3ec>
			}
		}
		else if (servo_delay_temp == 1) {
 8004e72:	4b18      	ldr	r3, [pc, #96]	; (8004ed4 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d10e      	bne.n	8004e98 <HAL_TIM_PeriodElapsedCallback+0x3ec>
			servo_delay++;
 8004e7a:	4b17      	ldr	r3, [pc, #92]	; (8004ed8 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	4a15      	ldr	r2, [pc, #84]	; (8004ed8 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8004e82:	6013      	str	r3, [r2, #0]
			if (servo_delay == 50) {
 8004e84:	4b14      	ldr	r3, [pc, #80]	; (8004ed8 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b32      	cmp	r3, #50	; 0x32
 8004e8a:	d105      	bne.n	8004e98 <HAL_TIM_PeriodElapsedCallback+0x3ec>
				servo_delay = 0;
 8004e8c:	4b12      	ldr	r3, [pc, #72]	; (8004ed8 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
				servo_delay_temp = 0;
 8004e92:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
			}
		}
		if (mission_array[0] == 1 && temp_pub <= 3) {
 8004e98:	4b10      	ldr	r3, [pc, #64]	; (8004edc <HAL_TIM_PeriodElapsedCallback+0x430>)
 8004e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d10a      	bne.n	8004eb8 <HAL_TIM_PeriodElapsedCallback+0x40c>
 8004ea2:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	dc06      	bgt.n	8004eb8 <HAL_TIM_PeriodElapsedCallback+0x40c>
			pub_to_ros();
 8004eaa:	f7fe fedd 	bl	8003c68 <pub_to_ros>
			temp_pub++;
 8004eae:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	4a0a      	ldr	r2, [pc, #40]	; (8004ee0 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8004eb6:	6013      	str	r3, [r2, #0]
		}

	}
}
 8004eb8:	bf00      	nop
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20000b5c 	.word	0x20000b5c
 8004ec4:	20000b80 	.word	0x20000b80
 8004ec8:	20000b74 	.word	0x20000b74
 8004ecc:	20000b7c 	.word	0x20000b7c
 8004ed0:	20000b70 	.word	0x20000b70
 8004ed4:	20000b84 	.word	0x20000b84
 8004ed8:	20000b78 	.word	0x20000b78
 8004edc:	20000b8c 	.word	0x20000b8c
 8004ee0:	20000b88 	.word	0x20000b88

08004ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eea:	2300      	movs	r3, #0
 8004eec:	607b      	str	r3, [r7, #4]
 8004eee:	4b18      	ldr	r3, [pc, #96]	; (8004f50 <HAL_MspInit+0x6c>)
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef2:	4a17      	ldr	r2, [pc, #92]	; (8004f50 <HAL_MspInit+0x6c>)
 8004ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8004efa:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <HAL_MspInit+0x6c>)
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f02:	607b      	str	r3, [r7, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f06:	2300      	movs	r3, #0
 8004f08:	603b      	str	r3, [r7, #0]
 8004f0a:	4b11      	ldr	r3, [pc, #68]	; (8004f50 <HAL_MspInit+0x6c>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	4a10      	ldr	r2, [pc, #64]	; (8004f50 <HAL_MspInit+0x6c>)
 8004f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f14:	6413      	str	r3, [r2, #64]	; 0x40
 8004f16:	4b0e      	ldr	r3, [pc, #56]	; (8004f50 <HAL_MspInit+0x6c>)
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004f22:	2007      	movs	r0, #7
 8004f24:	f001 fa1a 	bl	800635c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	2005      	movs	r0, #5
 8004f2e:	f001 fa20 	bl	8006372 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004f32:	2005      	movs	r0, #5
 8004f34:	f001 fa39 	bl	80063aa <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	2005      	movs	r0, #5
 8004f3e:	f001 fa18 	bl	8006372 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004f42:	2005      	movs	r0, #5
 8004f44:	f001 fa31 	bl	80063aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f48:	bf00      	nop
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40023800 	.word	0x40023800

08004f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f58:	e7fe      	b.n	8004f58 <NMI_Handler+0x4>

08004f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f5e:	e7fe      	b.n	8004f5e <HardFault_Handler+0x4>

08004f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f64:	e7fe      	b.n	8004f64 <MemManage_Handler+0x4>

08004f66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f66:	b480      	push	{r7}
 8004f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f6a:	e7fe      	b.n	8004f6a <BusFault_Handler+0x4>

08004f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f70:	e7fe      	b.n	8004f70 <UsageFault_Handler+0x4>

08004f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f72:	b480      	push	{r7}
 8004f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f76:	bf00      	nop
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f84:	bf00      	nop
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f92:	bf00      	nop
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004fa0:	f000 fe56 	bl	8005c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004fa4:	bf00      	nop
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004fac:	bf00      	nop
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
	...

08004fb8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004fbc:	4802      	ldr	r0, [pc, #8]	; (8004fc8 <DMA1_Stream5_IRQHandler+0x10>)
 8004fbe:	f001 fc13 	bl	80067e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004fc2:	bf00      	nop
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000e90 	.word	0x20000e90

08004fcc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004fd0:	4802      	ldr	r0, [pc, #8]	; (8004fdc <DMA1_Stream6_IRQHandler+0x10>)
 8004fd2:	f001 fc09 	bl	80067e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004fd6:	bf00      	nop
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000ef0 	.word	0x20000ef0

08004fe0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004fe4:	4802      	ldr	r0, [pc, #8]	; (8004ff0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004fe6:	f003 f8cb 	bl	8008180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004fea:	bf00      	nop
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000cbc 	.word	0x20000cbc

08004ff4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004ff8:	4802      	ldr	r0, [pc, #8]	; (8005004 <USART1_IRQHandler+0x10>)
 8004ffa:	f003 ff75 	bl	8008ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004ffe:	bf00      	nop
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000d04 	.word	0x20000d04

08005008 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800500c:	4802      	ldr	r0, [pc, #8]	; (8005018 <USART2_IRQHandler+0x10>)
 800500e:	f003 ff6b 	bl	8008ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005012:	bf00      	nop
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000d48 	.word	0x20000d48

0800501c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005020:	4802      	ldr	r0, [pc, #8]	; (800502c <TIM6_DAC_IRQHandler+0x10>)
 8005022:	f003 f8ad 	bl	8008180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005026:	bf00      	nop
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000c2c 	.word	0x20000c2c

08005030 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005034:	4802      	ldr	r0, [pc, #8]	; (8005040 <TIM7_IRQHandler+0x10>)
 8005036:	f003 f8a3 	bl	8008180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800503a:	bf00      	nop
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000c74 	.word	0x20000c74

08005044 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005048:	4802      	ldr	r0, [pc, #8]	; (8005054 <DMA2_Stream0_IRQHandler+0x10>)
 800504a:	f001 fbcd 	bl	80067e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800504e:	bf00      	nop
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	200000e4 	.word	0x200000e4

08005058 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800505c:	4802      	ldr	r0, [pc, #8]	; (8005068 <DMA2_Stream2_IRQHandler+0x10>)
 800505e:	f001 fbc3 	bl	80067e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005062:	bf00      	nop
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20000dd0 	.word	0x20000dd0

0800506c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005070:	4802      	ldr	r0, [pc, #8]	; (800507c <DMA2_Stream7_IRQHandler+0x10>)
 8005072:	f001 fbb9 	bl	80067e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20000e30 	.word	0x20000e30

08005080 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
	return 1;
 8005084:	2301      	movs	r3, #1
}
 8005086:	4618      	mov	r0, r3
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <_kill>:

int _kill(int pid, int sig)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800509a:	f005 f88f 	bl	800a1bc <__errno>
 800509e:	4603      	mov	r3, r0
 80050a0:	2216      	movs	r2, #22
 80050a2:	601a      	str	r2, [r3, #0]
	return -1;
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <_exit>:

void _exit (int status)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80050b8:	f04f 31ff 	mov.w	r1, #4294967295
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff ffe7 	bl	8005090 <_kill>
	while (1) {}		/* Make sure we hang here */
 80050c2:	e7fe      	b.n	80050c2 <_exit+0x12>

080050c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050cc:	4a14      	ldr	r2, [pc, #80]	; (8005120 <_sbrk+0x5c>)
 80050ce:	4b15      	ldr	r3, [pc, #84]	; (8005124 <_sbrk+0x60>)
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050d8:	4b13      	ldr	r3, [pc, #76]	; (8005128 <_sbrk+0x64>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d102      	bne.n	80050e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050e0:	4b11      	ldr	r3, [pc, #68]	; (8005128 <_sbrk+0x64>)
 80050e2:	4a12      	ldr	r2, [pc, #72]	; (800512c <_sbrk+0x68>)
 80050e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050e6:	4b10      	ldr	r3, [pc, #64]	; (8005128 <_sbrk+0x64>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4413      	add	r3, r2
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d207      	bcs.n	8005104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050f4:	f005 f862 	bl	800a1bc <__errno>
 80050f8:	4603      	mov	r3, r0
 80050fa:	220c      	movs	r2, #12
 80050fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005102:	e009      	b.n	8005118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005104:	4b08      	ldr	r3, [pc, #32]	; (8005128 <_sbrk+0x64>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800510a:	4b07      	ldr	r3, [pc, #28]	; (8005128 <_sbrk+0x64>)
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4413      	add	r3, r2
 8005112:	4a05      	ldr	r2, [pc, #20]	; (8005128 <_sbrk+0x64>)
 8005114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005116:	68fb      	ldr	r3, [r7, #12]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20020000 	.word	0x20020000
 8005124:	00000400 	.word	0x00000400
 8005128:	20000b98 	.word	0x20000b98
 800512c:	20000f68 	.word	0x20000f68

08005130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005134:	4b06      	ldr	r3, [pc, #24]	; (8005150 <SystemInit+0x20>)
 8005136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513a:	4a05      	ldr	r2, [pc, #20]	; (8005150 <SystemInit+0x20>)
 800513c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005144:	bf00      	nop
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	e000ed00 	.word	0xe000ed00

08005154 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08a      	sub	sp, #40	; 0x28
 8005158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800515a:	f107 0320 	add.w	r3, r7, #32
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005164:	1d3b      	adds	r3, r7, #4
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	605a      	str	r2, [r3, #4]
 800516c:	609a      	str	r2, [r3, #8]
 800516e:	60da      	str	r2, [r3, #12]
 8005170:	611a      	str	r2, [r3, #16]
 8005172:	615a      	str	r2, [r3, #20]
 8005174:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005176:	4b28      	ldr	r3, [pc, #160]	; (8005218 <MX_TIM2_Init+0xc4>)
 8005178:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800517c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 179;
 800517e:	4b26      	ldr	r3, [pc, #152]	; (8005218 <MX_TIM2_Init+0xc4>)
 8005180:	22b3      	movs	r2, #179	; 0xb3
 8005182:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005184:	4b24      	ldr	r3, [pc, #144]	; (8005218 <MX_TIM2_Init+0xc4>)
 8005186:	2200      	movs	r2, #0
 8005188:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800518a:	4b23      	ldr	r3, [pc, #140]	; (8005218 <MX_TIM2_Init+0xc4>)
 800518c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005190:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005192:	4b21      	ldr	r3, [pc, #132]	; (8005218 <MX_TIM2_Init+0xc4>)
 8005194:	2200      	movs	r2, #0
 8005196:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005198:	4b1f      	ldr	r3, [pc, #124]	; (8005218 <MX_TIM2_Init+0xc4>)
 800519a:	2200      	movs	r2, #0
 800519c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800519e:	481e      	ldr	r0, [pc, #120]	; (8005218 <MX_TIM2_Init+0xc4>)
 80051a0:	f002 fed6 	bl	8007f50 <HAL_TIM_PWM_Init>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80051aa:	f7fd f8d7 	bl	800235c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051ae:	2300      	movs	r3, #0
 80051b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80051b6:	f107 0320 	add.w	r3, r7, #32
 80051ba:	4619      	mov	r1, r3
 80051bc:	4816      	ldr	r0, [pc, #88]	; (8005218 <MX_TIM2_Init+0xc4>)
 80051be:	f003 fc47 	bl	8008a50 <HAL_TIMEx_MasterConfigSynchronization>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80051c8:	f7fd f8c8 	bl	800235c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051cc:	2360      	movs	r3, #96	; 0x60
 80051ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051d4:	2300      	movs	r3, #0
 80051d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80051dc:	1d3b      	adds	r3, r7, #4
 80051de:	2200      	movs	r2, #0
 80051e0:	4619      	mov	r1, r3
 80051e2:	480d      	ldr	r0, [pc, #52]	; (8005218 <MX_TIM2_Init+0xc4>)
 80051e4:	f003 f8d4 	bl	8008390 <HAL_TIM_PWM_ConfigChannel>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80051ee:	f7fd f8b5 	bl	800235c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80051f2:	1d3b      	adds	r3, r7, #4
 80051f4:	2204      	movs	r2, #4
 80051f6:	4619      	mov	r1, r3
 80051f8:	4807      	ldr	r0, [pc, #28]	; (8005218 <MX_TIM2_Init+0xc4>)
 80051fa:	f003 f8c9 	bl	8008390 <HAL_TIM_PWM_ConfigChannel>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005204:	f7fd f8aa 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005208:	4803      	ldr	r0, [pc, #12]	; (8005218 <MX_TIM2_Init+0xc4>)
 800520a:	f000 f9ab 	bl	8005564 <HAL_TIM_MspPostInit>

}
 800520e:	bf00      	nop
 8005210:	3728      	adds	r7, #40	; 0x28
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20000b9c 	.word	0x20000b9c

0800521c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	; 0x28
 8005220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005222:	f107 0320 	add.w	r3, r7, #32
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800522c:	1d3b      	adds	r3, r7, #4
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	605a      	str	r2, [r3, #4]
 8005234:	609a      	str	r2, [r3, #8]
 8005236:	60da      	str	r2, [r3, #12]
 8005238:	611a      	str	r2, [r3, #16]
 800523a:	615a      	str	r2, [r3, #20]
 800523c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800523e:	4b32      	ldr	r3, [pc, #200]	; (8005308 <MX_TIM3_Init+0xec>)
 8005240:	4a32      	ldr	r2, [pc, #200]	; (800530c <MX_TIM3_Init+0xf0>)
 8005242:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 179;
 8005244:	4b30      	ldr	r3, [pc, #192]	; (8005308 <MX_TIM3_Init+0xec>)
 8005246:	22b3      	movs	r2, #179	; 0xb3
 8005248:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800524a:	4b2f      	ldr	r3, [pc, #188]	; (8005308 <MX_TIM3_Init+0xec>)
 800524c:	2200      	movs	r2, #0
 800524e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8005250:	4b2d      	ldr	r3, [pc, #180]	; (8005308 <MX_TIM3_Init+0xec>)
 8005252:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005256:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005258:	4b2b      	ldr	r3, [pc, #172]	; (8005308 <MX_TIM3_Init+0xec>)
 800525a:	2200      	movs	r2, #0
 800525c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800525e:	4b2a      	ldr	r3, [pc, #168]	; (8005308 <MX_TIM3_Init+0xec>)
 8005260:	2200      	movs	r2, #0
 8005262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005264:	4828      	ldr	r0, [pc, #160]	; (8005308 <MX_TIM3_Init+0xec>)
 8005266:	f002 fe73 	bl	8007f50 <HAL_TIM_PWM_Init>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005270:	f7fd f874 	bl	800235c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005274:	2300      	movs	r3, #0
 8005276:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005278:	2300      	movs	r3, #0
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800527c:	f107 0320 	add.w	r3, r7, #32
 8005280:	4619      	mov	r1, r3
 8005282:	4821      	ldr	r0, [pc, #132]	; (8005308 <MX_TIM3_Init+0xec>)
 8005284:	f003 fbe4 	bl	8008a50 <HAL_TIMEx_MasterConfigSynchronization>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800528e:	f7fd f865 	bl	800235c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005292:	2360      	movs	r3, #96	; 0x60
 8005294:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005296:	2300      	movs	r3, #0
 8005298:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80052a2:	1d3b      	adds	r3, r7, #4
 80052a4:	2200      	movs	r2, #0
 80052a6:	4619      	mov	r1, r3
 80052a8:	4817      	ldr	r0, [pc, #92]	; (8005308 <MX_TIM3_Init+0xec>)
 80052aa:	f003 f871 	bl	8008390 <HAL_TIM_PWM_ConfigChannel>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80052b4:	f7fd f852 	bl	800235c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80052b8:	1d3b      	adds	r3, r7, #4
 80052ba:	2204      	movs	r2, #4
 80052bc:	4619      	mov	r1, r3
 80052be:	4812      	ldr	r0, [pc, #72]	; (8005308 <MX_TIM3_Init+0xec>)
 80052c0:	f003 f866 	bl	8008390 <HAL_TIM_PWM_ConfigChannel>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80052ca:	f7fd f847 	bl	800235c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80052ce:	1d3b      	adds	r3, r7, #4
 80052d0:	2208      	movs	r2, #8
 80052d2:	4619      	mov	r1, r3
 80052d4:	480c      	ldr	r0, [pc, #48]	; (8005308 <MX_TIM3_Init+0xec>)
 80052d6:	f003 f85b 	bl	8008390 <HAL_TIM_PWM_ConfigChannel>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80052e0:	f7fd f83c 	bl	800235c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80052e4:	1d3b      	adds	r3, r7, #4
 80052e6:	220c      	movs	r2, #12
 80052e8:	4619      	mov	r1, r3
 80052ea:	4807      	ldr	r0, [pc, #28]	; (8005308 <MX_TIM3_Init+0xec>)
 80052ec:	f003 f850 	bl	8008390 <HAL_TIM_PWM_ConfigChannel>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80052f6:	f7fd f831 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80052fa:	4803      	ldr	r0, [pc, #12]	; (8005308 <MX_TIM3_Init+0xec>)
 80052fc:	f000 f932 	bl	8005564 <HAL_TIM_MspPostInit>

}
 8005300:	bf00      	nop
 8005302:	3728      	adds	r7, #40	; 0x28
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	20000be4 	.word	0x20000be4
 800530c:	40000400 	.word	0x40000400

08005310 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005316:	463b      	mov	r3, r7
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800531e:	4b15      	ldr	r3, [pc, #84]	; (8005374 <MX_TIM6_Init+0x64>)
 8005320:	4a15      	ldr	r2, [pc, #84]	; (8005378 <MX_TIM6_Init+0x68>)
 8005322:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 8005324:	4b13      	ldr	r3, [pc, #76]	; (8005374 <MX_TIM6_Init+0x64>)
 8005326:	2263      	movs	r2, #99	; 0x63
 8005328:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800532a:	4b12      	ldr	r3, [pc, #72]	; (8005374 <MX_TIM6_Init+0x64>)
 800532c:	2200      	movs	r2, #0
 800532e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500;
 8005330:	4b10      	ldr	r3, [pc, #64]	; (8005374 <MX_TIM6_Init+0x64>)
 8005332:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005336:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005338:	4b0e      	ldr	r3, [pc, #56]	; (8005374 <MX_TIM6_Init+0x64>)
 800533a:	2200      	movs	r2, #0
 800533c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800533e:	480d      	ldr	r0, [pc, #52]	; (8005374 <MX_TIM6_Init+0x64>)
 8005340:	f002 fd46 	bl	8007dd0 <HAL_TIM_Base_Init>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800534a:	f7fd f807 	bl	800235c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800534e:	2300      	movs	r3, #0
 8005350:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005352:	2300      	movs	r3, #0
 8005354:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005356:	463b      	mov	r3, r7
 8005358:	4619      	mov	r1, r3
 800535a:	4806      	ldr	r0, [pc, #24]	; (8005374 <MX_TIM6_Init+0x64>)
 800535c:	f003 fb78 	bl	8008a50 <HAL_TIMEx_MasterConfigSynchronization>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005366:	f7fc fff9 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800536a:	bf00      	nop
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000c2c 	.word	0x20000c2c
 8005378:	40001000 	.word	0x40001000

0800537c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005382:	463b      	mov	r3, r7
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800538a:	4b15      	ldr	r3, [pc, #84]	; (80053e0 <MX_TIM7_Init+0x64>)
 800538c:	4a15      	ldr	r2, [pc, #84]	; (80053e4 <MX_TIM7_Init+0x68>)
 800538e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 167;
 8005390:	4b13      	ldr	r3, [pc, #76]	; (80053e0 <MX_TIM7_Init+0x64>)
 8005392:	22a7      	movs	r2, #167	; 0xa7
 8005394:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005396:	4b12      	ldr	r3, [pc, #72]	; (80053e0 <MX_TIM7_Init+0x64>)
 8005398:	2200      	movs	r2, #0
 800539a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 800539c:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <MX_TIM7_Init+0x64>)
 800539e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80053a2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053a4:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <MX_TIM7_Init+0x64>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80053aa:	480d      	ldr	r0, [pc, #52]	; (80053e0 <MX_TIM7_Init+0x64>)
 80053ac:	f002 fd10 	bl	8007dd0 <HAL_TIM_Base_Init>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80053b6:	f7fc ffd1 	bl	800235c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053ba:	2300      	movs	r3, #0
 80053bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053be:	2300      	movs	r3, #0
 80053c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80053c2:	463b      	mov	r3, r7
 80053c4:	4619      	mov	r1, r3
 80053c6:	4806      	ldr	r0, [pc, #24]	; (80053e0 <MX_TIM7_Init+0x64>)
 80053c8:	f003 fb42 	bl	8008a50 <HAL_TIMEx_MasterConfigSynchronization>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80053d2:	f7fc ffc3 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80053d6:	bf00      	nop
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000c74 	.word	0x20000c74
 80053e4:	40001400 	.word	0x40001400

080053e8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80053ec:	4b0e      	ldr	r3, [pc, #56]	; (8005428 <MX_TIM10_Init+0x40>)
 80053ee:	4a0f      	ldr	r2, [pc, #60]	; (800542c <MX_TIM10_Init+0x44>)
 80053f0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 167;
 80053f2:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <MX_TIM10_Init+0x40>)
 80053f4:	22a7      	movs	r2, #167	; 0xa7
 80053f6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053f8:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <MX_TIM10_Init+0x40>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <MX_TIM10_Init+0x40>)
 8005400:	f242 720f 	movw	r2, #9999	; 0x270f
 8005404:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005406:	4b08      	ldr	r3, [pc, #32]	; (8005428 <MX_TIM10_Init+0x40>)
 8005408:	2200      	movs	r2, #0
 800540a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800540c:	4b06      	ldr	r3, [pc, #24]	; (8005428 <MX_TIM10_Init+0x40>)
 800540e:	2200      	movs	r2, #0
 8005410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005412:	4805      	ldr	r0, [pc, #20]	; (8005428 <MX_TIM10_Init+0x40>)
 8005414:	f002 fcdc 	bl	8007dd0 <HAL_TIM_Base_Init>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800541e:	f7fc ff9d 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005422:	bf00      	nop
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20000cbc 	.word	0x20000cbc
 800542c:	40014400 	.word	0x40014400

08005430 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005440:	d10e      	bne.n	8005460 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005442:	2300      	movs	r3, #0
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	4b13      	ldr	r3, [pc, #76]	; (8005494 <HAL_TIM_PWM_MspInit+0x64>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	4a12      	ldr	r2, [pc, #72]	; (8005494 <HAL_TIM_PWM_MspInit+0x64>)
 800544c:	f043 0301 	orr.w	r3, r3, #1
 8005450:	6413      	str	r3, [r2, #64]	; 0x40
 8005452:	4b10      	ldr	r3, [pc, #64]	; (8005494 <HAL_TIM_PWM_MspInit+0x64>)
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800545e:	e012      	b.n	8005486 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a0c      	ldr	r2, [pc, #48]	; (8005498 <HAL_TIM_PWM_MspInit+0x68>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d10d      	bne.n	8005486 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800546a:	2300      	movs	r3, #0
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	4b09      	ldr	r3, [pc, #36]	; (8005494 <HAL_TIM_PWM_MspInit+0x64>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	4a08      	ldr	r2, [pc, #32]	; (8005494 <HAL_TIM_PWM_MspInit+0x64>)
 8005474:	f043 0302 	orr.w	r3, r3, #2
 8005478:	6413      	str	r3, [r2, #64]	; 0x40
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <HAL_TIM_PWM_MspInit+0x64>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	60bb      	str	r3, [r7, #8]
 8005484:	68bb      	ldr	r3, [r7, #8]
}
 8005486:	bf00      	nop
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40023800 	.word	0x40023800
 8005498:	40000400 	.word	0x40000400

0800549c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a2a      	ldr	r2, [pc, #168]	; (8005554 <HAL_TIM_Base_MspInit+0xb8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d116      	bne.n	80054dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80054ae:	2300      	movs	r3, #0
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	4b29      	ldr	r3, [pc, #164]	; (8005558 <HAL_TIM_Base_MspInit+0xbc>)
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	4a28      	ldr	r2, [pc, #160]	; (8005558 <HAL_TIM_Base_MspInit+0xbc>)
 80054b8:	f043 0310 	orr.w	r3, r3, #16
 80054bc:	6413      	str	r3, [r2, #64]	; 0x40
 80054be:	4b26      	ldr	r3, [pc, #152]	; (8005558 <HAL_TIM_Base_MspInit+0xbc>)
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	f003 0310 	and.w	r3, r3, #16
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80054ca:	2200      	movs	r2, #0
 80054cc:	2100      	movs	r1, #0
 80054ce:	2036      	movs	r0, #54	; 0x36
 80054d0:	f000 ff4f 	bl	8006372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80054d4:	2036      	movs	r0, #54	; 0x36
 80054d6:	f000 ff68 	bl	80063aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80054da:	e036      	b.n	800554a <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM7)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1e      	ldr	r2, [pc, #120]	; (800555c <HAL_TIM_Base_MspInit+0xc0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d116      	bne.n	8005514 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80054e6:	2300      	movs	r3, #0
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <HAL_TIM_Base_MspInit+0xbc>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	4a1a      	ldr	r2, [pc, #104]	; (8005558 <HAL_TIM_Base_MspInit+0xbc>)
 80054f0:	f043 0320 	orr.w	r3, r3, #32
 80054f4:	6413      	str	r3, [r2, #64]	; 0x40
 80054f6:	4b18      	ldr	r3, [pc, #96]	; (8005558 <HAL_TIM_Base_MspInit+0xbc>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f003 0320 	and.w	r3, r3, #32
 80054fe:	613b      	str	r3, [r7, #16]
 8005500:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005502:	2200      	movs	r2, #0
 8005504:	2100      	movs	r1, #0
 8005506:	2037      	movs	r0, #55	; 0x37
 8005508:	f000 ff33 	bl	8006372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800550c:	2037      	movs	r0, #55	; 0x37
 800550e:	f000 ff4c 	bl	80063aa <HAL_NVIC_EnableIRQ>
}
 8005512:	e01a      	b.n	800554a <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a11      	ldr	r2, [pc, #68]	; (8005560 <HAL_TIM_Base_MspInit+0xc4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d115      	bne.n	800554a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	4b0d      	ldr	r3, [pc, #52]	; (8005558 <HAL_TIM_Base_MspInit+0xbc>)
 8005524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005526:	4a0c      	ldr	r2, [pc, #48]	; (8005558 <HAL_TIM_Base_MspInit+0xbc>)
 8005528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800552c:	6453      	str	r3, [r2, #68]	; 0x44
 800552e:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <HAL_TIM_Base_MspInit+0xbc>)
 8005530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800553a:	2200      	movs	r2, #0
 800553c:	2100      	movs	r1, #0
 800553e:	2019      	movs	r0, #25
 8005540:	f000 ff17 	bl	8006372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005544:	2019      	movs	r0, #25
 8005546:	f000 ff30 	bl	80063aa <HAL_NVIC_EnableIRQ>
}
 800554a:	bf00      	nop
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	40001000 	.word	0x40001000
 8005558:	40023800 	.word	0x40023800
 800555c:	40001400 	.word	0x40001400
 8005560:	40014400 	.word	0x40014400

08005564 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	; 0x28
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800556c:	f107 0314 	add.w	r3, r7, #20
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	605a      	str	r2, [r3, #4]
 8005576:	609a      	str	r2, [r3, #8]
 8005578:	60da      	str	r2, [r3, #12]
 800557a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005584:	d11e      	bne.n	80055c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005586:	2300      	movs	r3, #0
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	4b22      	ldr	r3, [pc, #136]	; (8005614 <HAL_TIM_MspPostInit+0xb0>)
 800558c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558e:	4a21      	ldr	r2, [pc, #132]	; (8005614 <HAL_TIM_MspPostInit+0xb0>)
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	6313      	str	r3, [r2, #48]	; 0x30
 8005596:	4b1f      	ldr	r3, [pc, #124]	; (8005614 <HAL_TIM_MspPostInit+0xb0>)
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	613b      	str	r3, [r7, #16]
 80055a0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80055a2:	2303      	movs	r3, #3
 80055a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a6:	2302      	movs	r3, #2
 80055a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ae:	2300      	movs	r3, #0
 80055b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80055b2:	2301      	movs	r3, #1
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055b6:	f107 0314 	add.w	r3, r7, #20
 80055ba:	4619      	mov	r1, r3
 80055bc:	4816      	ldr	r0, [pc, #88]	; (8005618 <HAL_TIM_MspPostInit+0xb4>)
 80055be:	f001 fb7d 	bl	8006cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80055c2:	e023      	b.n	800560c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a14      	ldr	r2, [pc, #80]	; (800561c <HAL_TIM_MspPostInit+0xb8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d11e      	bne.n	800560c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	4b10      	ldr	r3, [pc, #64]	; (8005614 <HAL_TIM_MspPostInit+0xb0>)
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	4a0f      	ldr	r2, [pc, #60]	; (8005614 <HAL_TIM_MspPostInit+0xb0>)
 80055d8:	f043 0304 	orr.w	r3, r3, #4
 80055dc:	6313      	str	r3, [r2, #48]	; 0x30
 80055de:	4b0d      	ldr	r3, [pc, #52]	; (8005614 <HAL_TIM_MspPostInit+0xb0>)
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80055ea:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80055ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f0:	2302      	movs	r3, #2
 80055f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055f8:	2300      	movs	r3, #0
 80055fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80055fc:	2302      	movs	r3, #2
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005600:	f107 0314 	add.w	r3, r7, #20
 8005604:	4619      	mov	r1, r3
 8005606:	4806      	ldr	r0, [pc, #24]	; (8005620 <HAL_TIM_MspPostInit+0xbc>)
 8005608:	f001 fb58 	bl	8006cbc <HAL_GPIO_Init>
}
 800560c:	bf00      	nop
 800560e:	3728      	adds	r7, #40	; 0x28
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40023800 	.word	0x40023800
 8005618:	40020000 	.word	0x40020000
 800561c:	40000400 	.word	0x40000400
 8005620:	40020800 	.word	0x40020800

08005624 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005628:	4b11      	ldr	r3, [pc, #68]	; (8005670 <MX_USART1_UART_Init+0x4c>)
 800562a:	4a12      	ldr	r2, [pc, #72]	; (8005674 <MX_USART1_UART_Init+0x50>)
 800562c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800562e:	4b10      	ldr	r3, [pc, #64]	; (8005670 <MX_USART1_UART_Init+0x4c>)
 8005630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005636:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <MX_USART1_UART_Init+0x4c>)
 8005638:	2200      	movs	r2, #0
 800563a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800563c:	4b0c      	ldr	r3, [pc, #48]	; (8005670 <MX_USART1_UART_Init+0x4c>)
 800563e:	2200      	movs	r2, #0
 8005640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005642:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <MX_USART1_UART_Init+0x4c>)
 8005644:	2200      	movs	r2, #0
 8005646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005648:	4b09      	ldr	r3, [pc, #36]	; (8005670 <MX_USART1_UART_Init+0x4c>)
 800564a:	220c      	movs	r2, #12
 800564c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800564e:	4b08      	ldr	r3, [pc, #32]	; (8005670 <MX_USART1_UART_Init+0x4c>)
 8005650:	2200      	movs	r2, #0
 8005652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005654:	4b06      	ldr	r3, [pc, #24]	; (8005670 <MX_USART1_UART_Init+0x4c>)
 8005656:	2200      	movs	r2, #0
 8005658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800565a:	4805      	ldr	r0, [pc, #20]	; (8005670 <MX_USART1_UART_Init+0x4c>)
 800565c:	f003 fa88 	bl	8008b70 <HAL_UART_Init>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005666:	f7fc fe79 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800566a:	bf00      	nop
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20000d04 	.word	0x20000d04
 8005674:	40011000 	.word	0x40011000

08005678 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800567c:	4b11      	ldr	r3, [pc, #68]	; (80056c4 <MX_USART2_UART_Init+0x4c>)
 800567e:	4a12      	ldr	r2, [pc, #72]	; (80056c8 <MX_USART2_UART_Init+0x50>)
 8005680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005682:	4b10      	ldr	r3, [pc, #64]	; (80056c4 <MX_USART2_UART_Init+0x4c>)
 8005684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800568a:	4b0e      	ldr	r3, [pc, #56]	; (80056c4 <MX_USART2_UART_Init+0x4c>)
 800568c:	2200      	movs	r2, #0
 800568e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005690:	4b0c      	ldr	r3, [pc, #48]	; (80056c4 <MX_USART2_UART_Init+0x4c>)
 8005692:	2200      	movs	r2, #0
 8005694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005696:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <MX_USART2_UART_Init+0x4c>)
 8005698:	2200      	movs	r2, #0
 800569a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800569c:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <MX_USART2_UART_Init+0x4c>)
 800569e:	220c      	movs	r2, #12
 80056a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056a2:	4b08      	ldr	r3, [pc, #32]	; (80056c4 <MX_USART2_UART_Init+0x4c>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <MX_USART2_UART_Init+0x4c>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80056ae:	4805      	ldr	r0, [pc, #20]	; (80056c4 <MX_USART2_UART_Init+0x4c>)
 80056b0:	f003 fa5e 	bl	8008b70 <HAL_UART_Init>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80056ba:	f7fc fe4f 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80056be:	bf00      	nop
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000d48 	.word	0x20000d48
 80056c8:	40004400 	.word	0x40004400

080056cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80056d0:	4b10      	ldr	r3, [pc, #64]	; (8005714 <MX_USART3_UART_Init+0x48>)
 80056d2:	4a11      	ldr	r2, [pc, #68]	; (8005718 <MX_USART3_UART_Init+0x4c>)
 80056d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 80056d6:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <MX_USART3_UART_Init+0x48>)
 80056d8:	4a10      	ldr	r2, [pc, #64]	; (800571c <MX_USART3_UART_Init+0x50>)
 80056da:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80056dc:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <MX_USART3_UART_Init+0x48>)
 80056de:	2200      	movs	r2, #0
 80056e0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80056e2:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <MX_USART3_UART_Init+0x48>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80056e8:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <MX_USART3_UART_Init+0x48>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80056ee:	4b09      	ldr	r3, [pc, #36]	; (8005714 <MX_USART3_UART_Init+0x48>)
 80056f0:	220c      	movs	r2, #12
 80056f2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056f4:	4b07      	ldr	r3, [pc, #28]	; (8005714 <MX_USART3_UART_Init+0x48>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80056fa:	4b06      	ldr	r3, [pc, #24]	; (8005714 <MX_USART3_UART_Init+0x48>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005700:	4804      	ldr	r0, [pc, #16]	; (8005714 <MX_USART3_UART_Init+0x48>)
 8005702:	f003 fa35 	bl	8008b70 <HAL_UART_Init>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 800570c:	f7fc fe26 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005710:	bf00      	nop
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20000d8c 	.word	0x20000d8c
 8005718:	40004800 	.word	0x40004800
 800571c:	0007a120 	.word	0x0007a120

08005720 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08e      	sub	sp, #56	; 0x38
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	605a      	str	r2, [r3, #4]
 8005732:	609a      	str	r2, [r3, #8]
 8005734:	60da      	str	r2, [r3, #12]
 8005736:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a99      	ldr	r2, [pc, #612]	; (80059a4 <HAL_UART_MspInit+0x284>)
 800573e:	4293      	cmp	r3, r2
 8005740:	f040 8096 	bne.w	8005870 <HAL_UART_MspInit+0x150>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005744:	2300      	movs	r3, #0
 8005746:	623b      	str	r3, [r7, #32]
 8005748:	4b97      	ldr	r3, [pc, #604]	; (80059a8 <HAL_UART_MspInit+0x288>)
 800574a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574c:	4a96      	ldr	r2, [pc, #600]	; (80059a8 <HAL_UART_MspInit+0x288>)
 800574e:	f043 0310 	orr.w	r3, r3, #16
 8005752:	6453      	str	r3, [r2, #68]	; 0x44
 8005754:	4b94      	ldr	r3, [pc, #592]	; (80059a8 <HAL_UART_MspInit+0x288>)
 8005756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005758:	f003 0310 	and.w	r3, r3, #16
 800575c:	623b      	str	r3, [r7, #32]
 800575e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005760:	2300      	movs	r3, #0
 8005762:	61fb      	str	r3, [r7, #28]
 8005764:	4b90      	ldr	r3, [pc, #576]	; (80059a8 <HAL_UART_MspInit+0x288>)
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	4a8f      	ldr	r2, [pc, #572]	; (80059a8 <HAL_UART_MspInit+0x288>)
 800576a:	f043 0301 	orr.w	r3, r3, #1
 800576e:	6313      	str	r3, [r2, #48]	; 0x30
 8005770:	4b8d      	ldr	r3, [pc, #564]	; (80059a8 <HAL_UART_MspInit+0x288>)
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	61fb      	str	r3, [r7, #28]
 800577a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800577c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005782:	2302      	movs	r3, #2
 8005784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005786:	2300      	movs	r3, #0
 8005788:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800578a:	2303      	movs	r3, #3
 800578c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800578e:	2307      	movs	r3, #7
 8005790:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005796:	4619      	mov	r1, r3
 8005798:	4884      	ldr	r0, [pc, #528]	; (80059ac <HAL_UART_MspInit+0x28c>)
 800579a:	f001 fa8f 	bl	8006cbc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800579e:	4b84      	ldr	r3, [pc, #528]	; (80059b0 <HAL_UART_MspInit+0x290>)
 80057a0:	4a84      	ldr	r2, [pc, #528]	; (80059b4 <HAL_UART_MspInit+0x294>)
 80057a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80057a4:	4b82      	ldr	r3, [pc, #520]	; (80059b0 <HAL_UART_MspInit+0x290>)
 80057a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057aa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057ac:	4b80      	ldr	r3, [pc, #512]	; (80059b0 <HAL_UART_MspInit+0x290>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057b2:	4b7f      	ldr	r3, [pc, #508]	; (80059b0 <HAL_UART_MspInit+0x290>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80057b8:	4b7d      	ldr	r3, [pc, #500]	; (80059b0 <HAL_UART_MspInit+0x290>)
 80057ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057be:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057c0:	4b7b      	ldr	r3, [pc, #492]	; (80059b0 <HAL_UART_MspInit+0x290>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057c6:	4b7a      	ldr	r3, [pc, #488]	; (80059b0 <HAL_UART_MspInit+0x290>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80057cc:	4b78      	ldr	r3, [pc, #480]	; (80059b0 <HAL_UART_MspInit+0x290>)
 80057ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057d2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80057d4:	4b76      	ldr	r3, [pc, #472]	; (80059b0 <HAL_UART_MspInit+0x290>)
 80057d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057da:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057dc:	4b74      	ldr	r3, [pc, #464]	; (80059b0 <HAL_UART_MspInit+0x290>)
 80057de:	2200      	movs	r2, #0
 80057e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80057e2:	4873      	ldr	r0, [pc, #460]	; (80059b0 <HAL_UART_MspInit+0x290>)
 80057e4:	f000 fe0a 	bl	80063fc <HAL_DMA_Init>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80057ee:	f7fc fdb5 	bl	800235c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a6e      	ldr	r2, [pc, #440]	; (80059b0 <HAL_UART_MspInit+0x290>)
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38
 80057f8:	4a6d      	ldr	r2, [pc, #436]	; (80059b0 <HAL_UART_MspInit+0x290>)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80057fe:	4b6e      	ldr	r3, [pc, #440]	; (80059b8 <HAL_UART_MspInit+0x298>)
 8005800:	4a6e      	ldr	r2, [pc, #440]	; (80059bc <HAL_UART_MspInit+0x29c>)
 8005802:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005804:	4b6c      	ldr	r3, [pc, #432]	; (80059b8 <HAL_UART_MspInit+0x298>)
 8005806:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800580a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800580c:	4b6a      	ldr	r3, [pc, #424]	; (80059b8 <HAL_UART_MspInit+0x298>)
 800580e:	2240      	movs	r2, #64	; 0x40
 8005810:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005812:	4b69      	ldr	r3, [pc, #420]	; (80059b8 <HAL_UART_MspInit+0x298>)
 8005814:	2200      	movs	r2, #0
 8005816:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005818:	4b67      	ldr	r3, [pc, #412]	; (80059b8 <HAL_UART_MspInit+0x298>)
 800581a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800581e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005820:	4b65      	ldr	r3, [pc, #404]	; (80059b8 <HAL_UART_MspInit+0x298>)
 8005822:	2200      	movs	r2, #0
 8005824:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005826:	4b64      	ldr	r3, [pc, #400]	; (80059b8 <HAL_UART_MspInit+0x298>)
 8005828:	2200      	movs	r2, #0
 800582a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 800582c:	4b62      	ldr	r3, [pc, #392]	; (80059b8 <HAL_UART_MspInit+0x298>)
 800582e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005832:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005834:	4b60      	ldr	r3, [pc, #384]	; (80059b8 <HAL_UART_MspInit+0x298>)
 8005836:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800583a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800583c:	4b5e      	ldr	r3, [pc, #376]	; (80059b8 <HAL_UART_MspInit+0x298>)
 800583e:	2200      	movs	r2, #0
 8005840:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005842:	485d      	ldr	r0, [pc, #372]	; (80059b8 <HAL_UART_MspInit+0x298>)
 8005844:	f000 fdda 	bl	80063fc <HAL_DMA_Init>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 800584e:	f7fc fd85 	bl	800235c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a58      	ldr	r2, [pc, #352]	; (80059b8 <HAL_UART_MspInit+0x298>)
 8005856:	635a      	str	r2, [r3, #52]	; 0x34
 8005858:	4a57      	ldr	r2, [pc, #348]	; (80059b8 <HAL_UART_MspInit+0x298>)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800585e:	2200      	movs	r2, #0
 8005860:	2100      	movs	r1, #0
 8005862:	2025      	movs	r0, #37	; 0x25
 8005864:	f000 fd85 	bl	8006372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005868:	2025      	movs	r0, #37	; 0x25
 800586a:	f000 fd9e 	bl	80063aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800586e:	e101      	b.n	8005a74 <HAL_UART_MspInit+0x354>
  else if(uartHandle->Instance==USART2)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a52      	ldr	r2, [pc, #328]	; (80059c0 <HAL_UART_MspInit+0x2a0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	f040 80ac 	bne.w	80059d4 <HAL_UART_MspInit+0x2b4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800587c:	2300      	movs	r3, #0
 800587e:	61bb      	str	r3, [r7, #24]
 8005880:	4b49      	ldr	r3, [pc, #292]	; (80059a8 <HAL_UART_MspInit+0x288>)
 8005882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005884:	4a48      	ldr	r2, [pc, #288]	; (80059a8 <HAL_UART_MspInit+0x288>)
 8005886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800588a:	6413      	str	r3, [r2, #64]	; 0x40
 800588c:	4b46      	ldr	r3, [pc, #280]	; (80059a8 <HAL_UART_MspInit+0x288>)
 800588e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005898:	2300      	movs	r3, #0
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	4b42      	ldr	r3, [pc, #264]	; (80059a8 <HAL_UART_MspInit+0x288>)
 800589e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a0:	4a41      	ldr	r2, [pc, #260]	; (80059a8 <HAL_UART_MspInit+0x288>)
 80058a2:	f043 0301 	orr.w	r3, r3, #1
 80058a6:	6313      	str	r3, [r2, #48]	; 0x30
 80058a8:	4b3f      	ldr	r3, [pc, #252]	; (80059a8 <HAL_UART_MspInit+0x288>)
 80058aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80058b4:	230c      	movs	r3, #12
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058b8:	2302      	movs	r3, #2
 80058ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058bc:	2300      	movs	r3, #0
 80058be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058c0:	2303      	movs	r3, #3
 80058c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80058c4:	2307      	movs	r3, #7
 80058c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058cc:	4619      	mov	r1, r3
 80058ce:	4837      	ldr	r0, [pc, #220]	; (80059ac <HAL_UART_MspInit+0x28c>)
 80058d0:	f001 f9f4 	bl	8006cbc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80058d4:	4b3b      	ldr	r3, [pc, #236]	; (80059c4 <HAL_UART_MspInit+0x2a4>)
 80058d6:	4a3c      	ldr	r2, [pc, #240]	; (80059c8 <HAL_UART_MspInit+0x2a8>)
 80058d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80058da:	4b3a      	ldr	r3, [pc, #232]	; (80059c4 <HAL_UART_MspInit+0x2a4>)
 80058dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80058e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058e2:	4b38      	ldr	r3, [pc, #224]	; (80059c4 <HAL_UART_MspInit+0x2a4>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058e8:	4b36      	ldr	r3, [pc, #216]	; (80059c4 <HAL_UART_MspInit+0x2a4>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80058ee:	4b35      	ldr	r3, [pc, #212]	; (80059c4 <HAL_UART_MspInit+0x2a4>)
 80058f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058f6:	4b33      	ldr	r3, [pc, #204]	; (80059c4 <HAL_UART_MspInit+0x2a4>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058fc:	4b31      	ldr	r3, [pc, #196]	; (80059c4 <HAL_UART_MspInit+0x2a4>)
 80058fe:	2200      	movs	r2, #0
 8005900:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005902:	4b30      	ldr	r3, [pc, #192]	; (80059c4 <HAL_UART_MspInit+0x2a4>)
 8005904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005908:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800590a:	4b2e      	ldr	r3, [pc, #184]	; (80059c4 <HAL_UART_MspInit+0x2a4>)
 800590c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005910:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005912:	4b2c      	ldr	r3, [pc, #176]	; (80059c4 <HAL_UART_MspInit+0x2a4>)
 8005914:	2200      	movs	r2, #0
 8005916:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005918:	482a      	ldr	r0, [pc, #168]	; (80059c4 <HAL_UART_MspInit+0x2a4>)
 800591a:	f000 fd6f 	bl	80063fc <HAL_DMA_Init>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8005924:	f7fc fd1a 	bl	800235c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a26      	ldr	r2, [pc, #152]	; (80059c4 <HAL_UART_MspInit+0x2a4>)
 800592c:	639a      	str	r2, [r3, #56]	; 0x38
 800592e:	4a25      	ldr	r2, [pc, #148]	; (80059c4 <HAL_UART_MspInit+0x2a4>)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005934:	4b25      	ldr	r3, [pc, #148]	; (80059cc <HAL_UART_MspInit+0x2ac>)
 8005936:	4a26      	ldr	r2, [pc, #152]	; (80059d0 <HAL_UART_MspInit+0x2b0>)
 8005938:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800593a:	4b24      	ldr	r3, [pc, #144]	; (80059cc <HAL_UART_MspInit+0x2ac>)
 800593c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005940:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005942:	4b22      	ldr	r3, [pc, #136]	; (80059cc <HAL_UART_MspInit+0x2ac>)
 8005944:	2240      	movs	r2, #64	; 0x40
 8005946:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005948:	4b20      	ldr	r3, [pc, #128]	; (80059cc <HAL_UART_MspInit+0x2ac>)
 800594a:	2200      	movs	r2, #0
 800594c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800594e:	4b1f      	ldr	r3, [pc, #124]	; (80059cc <HAL_UART_MspInit+0x2ac>)
 8005950:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005954:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005956:	4b1d      	ldr	r3, [pc, #116]	; (80059cc <HAL_UART_MspInit+0x2ac>)
 8005958:	2200      	movs	r2, #0
 800595a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800595c:	4b1b      	ldr	r3, [pc, #108]	; (80059cc <HAL_UART_MspInit+0x2ac>)
 800595e:	2200      	movs	r2, #0
 8005960:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005962:	4b1a      	ldr	r3, [pc, #104]	; (80059cc <HAL_UART_MspInit+0x2ac>)
 8005964:	2200      	movs	r2, #0
 8005966:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005968:	4b18      	ldr	r3, [pc, #96]	; (80059cc <HAL_UART_MspInit+0x2ac>)
 800596a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800596e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005970:	4b16      	ldr	r3, [pc, #88]	; (80059cc <HAL_UART_MspInit+0x2ac>)
 8005972:	2200      	movs	r2, #0
 8005974:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005976:	4815      	ldr	r0, [pc, #84]	; (80059cc <HAL_UART_MspInit+0x2ac>)
 8005978:	f000 fd40 	bl	80063fc <HAL_DMA_Init>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_UART_MspInit+0x266>
      Error_Handler();
 8005982:	f7fc fceb 	bl	800235c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a10      	ldr	r2, [pc, #64]	; (80059cc <HAL_UART_MspInit+0x2ac>)
 800598a:	635a      	str	r2, [r3, #52]	; 0x34
 800598c:	4a0f      	ldr	r2, [pc, #60]	; (80059cc <HAL_UART_MspInit+0x2ac>)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005992:	2200      	movs	r2, #0
 8005994:	2100      	movs	r1, #0
 8005996:	2026      	movs	r0, #38	; 0x26
 8005998:	f000 fceb 	bl	8006372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800599c:	2026      	movs	r0, #38	; 0x26
 800599e:	f000 fd04 	bl	80063aa <HAL_NVIC_EnableIRQ>
}
 80059a2:	e067      	b.n	8005a74 <HAL_UART_MspInit+0x354>
 80059a4:	40011000 	.word	0x40011000
 80059a8:	40023800 	.word	0x40023800
 80059ac:	40020000 	.word	0x40020000
 80059b0:	20000dd0 	.word	0x20000dd0
 80059b4:	40026440 	.word	0x40026440
 80059b8:	20000e30 	.word	0x20000e30
 80059bc:	400264b8 	.word	0x400264b8
 80059c0:	40004400 	.word	0x40004400
 80059c4:	20000e90 	.word	0x20000e90
 80059c8:	40026088 	.word	0x40026088
 80059cc:	20000ef0 	.word	0x20000ef0
 80059d0:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a28      	ldr	r2, [pc, #160]	; (8005a7c <HAL_UART_MspInit+0x35c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d14a      	bne.n	8005a74 <HAL_UART_MspInit+0x354>
    __HAL_RCC_USART3_CLK_ENABLE();
 80059de:	2300      	movs	r3, #0
 80059e0:	613b      	str	r3, [r7, #16]
 80059e2:	4b27      	ldr	r3, [pc, #156]	; (8005a80 <HAL_UART_MspInit+0x360>)
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	4a26      	ldr	r2, [pc, #152]	; (8005a80 <HAL_UART_MspInit+0x360>)
 80059e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059ec:	6413      	str	r3, [r2, #64]	; 0x40
 80059ee:	4b24      	ldr	r3, [pc, #144]	; (8005a80 <HAL_UART_MspInit+0x360>)
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	4b20      	ldr	r3, [pc, #128]	; (8005a80 <HAL_UART_MspInit+0x360>)
 8005a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a02:	4a1f      	ldr	r2, [pc, #124]	; (8005a80 <HAL_UART_MspInit+0x360>)
 8005a04:	f043 0304 	orr.w	r3, r3, #4
 8005a08:	6313      	str	r3, [r2, #48]	; 0x30
 8005a0a:	4b1d      	ldr	r3, [pc, #116]	; (8005a80 <HAL_UART_MspInit+0x360>)
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a16:	2300      	movs	r3, #0
 8005a18:	60bb      	str	r3, [r7, #8]
 8005a1a:	4b19      	ldr	r3, [pc, #100]	; (8005a80 <HAL_UART_MspInit+0x360>)
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	4a18      	ldr	r2, [pc, #96]	; (8005a80 <HAL_UART_MspInit+0x360>)
 8005a20:	f043 0302 	orr.w	r3, r3, #2
 8005a24:	6313      	str	r3, [r2, #48]	; 0x30
 8005a26:	4b16      	ldr	r3, [pc, #88]	; (8005a80 <HAL_UART_MspInit+0x360>)
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	60bb      	str	r3, [r7, #8]
 8005a30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005a32:	2320      	movs	r3, #32
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a36:	2302      	movs	r3, #2
 8005a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a42:	2307      	movs	r3, #7
 8005a44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	480d      	ldr	r0, [pc, #52]	; (8005a84 <HAL_UART_MspInit+0x364>)
 8005a4e:	f001 f935 	bl	8006cbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a58:	2302      	movs	r3, #2
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a60:	2303      	movs	r3, #3
 8005a62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a64:	2307      	movs	r3, #7
 8005a66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4806      	ldr	r0, [pc, #24]	; (8005a88 <HAL_UART_MspInit+0x368>)
 8005a70:	f001 f924 	bl	8006cbc <HAL_GPIO_Init>
}
 8005a74:	bf00      	nop
 8005a76:	3738      	adds	r7, #56	; 0x38
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	40004800 	.word	0x40004800
 8005a80:	40023800 	.word	0x40023800
 8005a84:	40020800 	.word	0x40020800
 8005a88:	40020400 	.word	0x40020400

08005a8c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a28      	ldr	r2, [pc, #160]	; (8005b3c <HAL_UART_MspDeInit+0xb0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d118      	bne.n	8005ad0 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005a9e:	4b28      	ldr	r3, [pc, #160]	; (8005b40 <HAL_UART_MspDeInit+0xb4>)
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa2:	4a27      	ldr	r2, [pc, #156]	; (8005b40 <HAL_UART_MspDeInit+0xb4>)
 8005aa4:	f023 0310 	bic.w	r3, r3, #16
 8005aa8:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005aaa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005aae:	4825      	ldr	r0, [pc, #148]	; (8005b44 <HAL_UART_MspDeInit+0xb8>)
 8005ab0:	f001 fa98 	bl	8006fe4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fd4d 	bl	8006558 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fd48 	bl	8006558 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005ac8:	2025      	movs	r0, #37	; 0x25
 8005aca:	f000 fc7c 	bl	80063c6 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8005ace:	e030      	b.n	8005b32 <HAL_UART_MspDeInit+0xa6>
  else if(uartHandle->Instance==USART2)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1c      	ldr	r2, [pc, #112]	; (8005b48 <HAL_UART_MspDeInit+0xbc>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d117      	bne.n	8005b0a <HAL_UART_MspDeInit+0x7e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8005ada:	4b19      	ldr	r3, [pc, #100]	; (8005b40 <HAL_UART_MspDeInit+0xb4>)
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	4a18      	ldr	r2, [pc, #96]	; (8005b40 <HAL_UART_MspDeInit+0xb4>)
 8005ae0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ae4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8005ae6:	210c      	movs	r1, #12
 8005ae8:	4816      	ldr	r0, [pc, #88]	; (8005b44 <HAL_UART_MspDeInit+0xb8>)
 8005aea:	f001 fa7b 	bl	8006fe4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fd30 	bl	8006558 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 fd2b 	bl	8006558 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8005b02:	2026      	movs	r0, #38	; 0x26
 8005b04:	f000 fc5f 	bl	80063c6 <HAL_NVIC_DisableIRQ>
}
 8005b08:	e013      	b.n	8005b32 <HAL_UART_MspDeInit+0xa6>
  else if(uartHandle->Instance==USART3)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a0f      	ldr	r2, [pc, #60]	; (8005b4c <HAL_UART_MspDeInit+0xc0>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d10e      	bne.n	8005b32 <HAL_UART_MspDeInit+0xa6>
    __HAL_RCC_USART3_CLK_DISABLE();
 8005b14:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <HAL_UART_MspDeInit+0xb4>)
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	4a09      	ldr	r2, [pc, #36]	; (8005b40 <HAL_UART_MspDeInit+0xb4>)
 8005b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b1e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_5);
 8005b20:	2120      	movs	r1, #32
 8005b22:	480b      	ldr	r0, [pc, #44]	; (8005b50 <HAL_UART_MspDeInit+0xc4>)
 8005b24:	f001 fa5e 	bl	8006fe4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8005b28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b2c:	4809      	ldr	r0, [pc, #36]	; (8005b54 <HAL_UART_MspDeInit+0xc8>)
 8005b2e:	f001 fa59 	bl	8006fe4 <HAL_GPIO_DeInit>
}
 8005b32:	bf00      	nop
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40011000 	.word	0x40011000
 8005b40:	40023800 	.word	0x40023800
 8005b44:	40020000 	.word	0x40020000
 8005b48:	40004400 	.word	0x40004400
 8005b4c:	40004800 	.word	0x40004800
 8005b50:	40020800 	.word	0x40020800
 8005b54:	40020400 	.word	0x40020400

08005b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b5c:	480d      	ldr	r0, [pc, #52]	; (8005b94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005b5e:	490e      	ldr	r1, [pc, #56]	; (8005b98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005b60:	4a0e      	ldr	r2, [pc, #56]	; (8005b9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b64:	e002      	b.n	8005b6c <LoopCopyDataInit>

08005b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b6a:	3304      	adds	r3, #4

08005b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b70:	d3f9      	bcc.n	8005b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b72:	4a0b      	ldr	r2, [pc, #44]	; (8005ba0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005b74:	4c0b      	ldr	r4, [pc, #44]	; (8005ba4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b78:	e001      	b.n	8005b7e <LoopFillZerobss>

08005b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b7c:	3204      	adds	r2, #4

08005b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b80:	d3fb      	bcc.n	8005b7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005b82:	f7ff fad5 	bl	8005130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b86:	f004 fb1f 	bl	800a1c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b8a:	f7fc fb59 	bl	8002240 <main>
  bx  lr    
 8005b8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005b90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b98:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8005b9c:	0800a8fc 	.word	0x0800a8fc
  ldr r2, =_sbss
 8005ba0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8005ba4:	20000f64 	.word	0x20000f64

08005ba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ba8:	e7fe      	b.n	8005ba8 <ADC_IRQHandler>
	...

08005bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005bb0:	4b0e      	ldr	r3, [pc, #56]	; (8005bec <HAL_Init+0x40>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a0d      	ldr	r2, [pc, #52]	; (8005bec <HAL_Init+0x40>)
 8005bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005bbc:	4b0b      	ldr	r3, [pc, #44]	; (8005bec <HAL_Init+0x40>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a0a      	ldr	r2, [pc, #40]	; (8005bec <HAL_Init+0x40>)
 8005bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005bc8:	4b08      	ldr	r3, [pc, #32]	; (8005bec <HAL_Init+0x40>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a07      	ldr	r2, [pc, #28]	; (8005bec <HAL_Init+0x40>)
 8005bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bd4:	2003      	movs	r0, #3
 8005bd6:	f000 fbc1 	bl	800635c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005bda:	2000      	movs	r0, #0
 8005bdc:	f000 f808 	bl	8005bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005be0:	f7ff f980 	bl	8004ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	40023c00 	.word	0x40023c00

08005bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005bf8:	4b12      	ldr	r3, [pc, #72]	; (8005c44 <HAL_InitTick+0x54>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	4b12      	ldr	r3, [pc, #72]	; (8005c48 <HAL_InitTick+0x58>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	4619      	mov	r1, r3
 8005c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fbe7 	bl	80063e2 <HAL_SYSTICK_Config>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e00e      	b.n	8005c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b0f      	cmp	r3, #15
 8005c22:	d80a      	bhi.n	8005c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c24:	2200      	movs	r2, #0
 8005c26:	6879      	ldr	r1, [r7, #4]
 8005c28:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2c:	f000 fba1 	bl	8006372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c30:	4a06      	ldr	r2, [pc, #24]	; (8005c4c <HAL_InitTick+0x5c>)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	e000      	b.n	8005c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	20000008 	.word	0x20000008
 8005c48:	20000010 	.word	0x20000010
 8005c4c:	2000000c 	.word	0x2000000c

08005c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c54:	4b06      	ldr	r3, [pc, #24]	; (8005c70 <HAL_IncTick+0x20>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <HAL_IncTick+0x24>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4413      	add	r3, r2
 8005c60:	4a04      	ldr	r2, [pc, #16]	; (8005c74 <HAL_IncTick+0x24>)
 8005c62:	6013      	str	r3, [r2, #0]
}
 8005c64:	bf00      	nop
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	20000010 	.word	0x20000010
 8005c74:	20000f50 	.word	0x20000f50

08005c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8005c7c:	4b03      	ldr	r3, [pc, #12]	; (8005c8c <HAL_GetTick+0x14>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	20000f50 	.word	0x20000f50

08005c90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e033      	b.n	8005d0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d109      	bne.n	8005cc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7fb f924 	bl	8000efc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	f003 0310 	and.w	r3, r3, #16
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d118      	bne.n	8005d00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005cd6:	f023 0302 	bic.w	r3, r3, #2
 8005cda:	f043 0202 	orr.w	r2, r3, #2
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f94a 	bl	8005f7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	f023 0303 	bic.w	r3, r3, #3
 8005cf6:	f043 0201 	orr.w	r2, r3, #1
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	641a      	str	r2, [r3, #64]	; 0x40
 8005cfe:	e001      	b.n	8005d04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_ADC_ConfigChannel+0x1c>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e113      	b.n	8005f5c <HAL_ADC_ConfigChannel+0x244>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b09      	cmp	r3, #9
 8005d42:	d925      	bls.n	8005d90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68d9      	ldr	r1, [r3, #12]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	4613      	mov	r3, r2
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	4413      	add	r3, r2
 8005d58:	3b1e      	subs	r3, #30
 8005d5a:	2207      	movs	r2, #7
 8005d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d60:	43da      	mvns	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	400a      	ands	r2, r1
 8005d68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68d9      	ldr	r1, [r3, #12]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	4403      	add	r3, r0
 8005d82:	3b1e      	subs	r3, #30
 8005d84:	409a      	lsls	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	60da      	str	r2, [r3, #12]
 8005d8e:	e022      	b.n	8005dd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6919      	ldr	r1, [r3, #16]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4613      	mov	r3, r2
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	4413      	add	r3, r2
 8005da4:	2207      	movs	r2, #7
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43da      	mvns	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	400a      	ands	r2, r1
 8005db2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6919      	ldr	r1, [r3, #16]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	4403      	add	r3, r0
 8005dcc:	409a      	lsls	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b06      	cmp	r3, #6
 8005ddc:	d824      	bhi.n	8005e28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	4613      	mov	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	3b05      	subs	r3, #5
 8005df0:	221f      	movs	r2, #31
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	43da      	mvns	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	400a      	ands	r2, r1
 8005dfe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	3b05      	subs	r3, #5
 8005e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	635a      	str	r2, [r3, #52]	; 0x34
 8005e26:	e04c      	b.n	8005ec2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2b0c      	cmp	r3, #12
 8005e2e:	d824      	bhi.n	8005e7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	3b23      	subs	r3, #35	; 0x23
 8005e42:	221f      	movs	r2, #31
 8005e44:	fa02 f303 	lsl.w	r3, r2, r3
 8005e48:	43da      	mvns	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	400a      	ands	r2, r1
 8005e50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	4618      	mov	r0, r3
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	4613      	mov	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	3b23      	subs	r3, #35	; 0x23
 8005e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	631a      	str	r2, [r3, #48]	; 0x30
 8005e78:	e023      	b.n	8005ec2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	4613      	mov	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	3b41      	subs	r3, #65	; 0x41
 8005e8c:	221f      	movs	r2, #31
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	43da      	mvns	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	400a      	ands	r2, r1
 8005e9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	3b41      	subs	r3, #65	; 0x41
 8005eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ec2:	4b29      	ldr	r3, [pc, #164]	; (8005f68 <HAL_ADC_ConfigChannel+0x250>)
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a28      	ldr	r2, [pc, #160]	; (8005f6c <HAL_ADC_ConfigChannel+0x254>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d10f      	bne.n	8005ef0 <HAL_ADC_ConfigChannel+0x1d8>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b12      	cmp	r3, #18
 8005ed6:	d10b      	bne.n	8005ef0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1d      	ldr	r2, [pc, #116]	; (8005f6c <HAL_ADC_ConfigChannel+0x254>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d12b      	bne.n	8005f52 <HAL_ADC_ConfigChannel+0x23a>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1c      	ldr	r2, [pc, #112]	; (8005f70 <HAL_ADC_ConfigChannel+0x258>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <HAL_ADC_ConfigChannel+0x1f4>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b11      	cmp	r3, #17
 8005f0a:	d122      	bne.n	8005f52 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a11      	ldr	r2, [pc, #68]	; (8005f70 <HAL_ADC_ConfigChannel+0x258>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d111      	bne.n	8005f52 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005f2e:	4b11      	ldr	r3, [pc, #68]	; (8005f74 <HAL_ADC_ConfigChannel+0x25c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a11      	ldr	r2, [pc, #68]	; (8005f78 <HAL_ADC_ConfigChannel+0x260>)
 8005f34:	fba2 2303 	umull	r2, r3, r2, r3
 8005f38:	0c9a      	lsrs	r2, r3, #18
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005f44:	e002      	b.n	8005f4c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f9      	bne.n	8005f46 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	40012300 	.word	0x40012300
 8005f6c:	40012000 	.word	0x40012000
 8005f70:	10000012 	.word	0x10000012
 8005f74:	20000008 	.word	0x20000008
 8005f78:	431bde83 	.word	0x431bde83

08005f7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f84:	4b79      	ldr	r3, [pc, #484]	; (800616c <ADC_Init+0x1f0>)
 8005f86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6859      	ldr	r1, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	021a      	lsls	r2, r3, #8
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005fd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6859      	ldr	r1, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ff6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6899      	ldr	r1, [r3, #8]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	4a58      	ldr	r2, [pc, #352]	; (8006170 <ADC_Init+0x1f4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d022      	beq.n	800605a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006022:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6899      	ldr	r1, [r3, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006044:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6899      	ldr	r1, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	609a      	str	r2, [r3, #8]
 8006058:	e00f      	b.n	800607a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006068:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006078:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0202 	bic.w	r2, r2, #2
 8006088:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6899      	ldr	r1, [r3, #8]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	7e1b      	ldrb	r3, [r3, #24]
 8006094:	005a      	lsls	r2, r3, #1
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01b      	beq.n	80060e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80060c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6859      	ldr	r1, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	3b01      	subs	r3, #1
 80060d4:	035a      	lsls	r2, r3, #13
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	605a      	str	r2, [r3, #4]
 80060de:	e007      	b.n	80060f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80060fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	3b01      	subs	r3, #1
 800610c:	051a      	lsls	r2, r3, #20
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006124:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6899      	ldr	r1, [r3, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006132:	025a      	lsls	r2, r3, #9
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800614a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6899      	ldr	r1, [r3, #8]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	029a      	lsls	r2, r3, #10
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	609a      	str	r2, [r3, #8]
}
 8006160:	bf00      	nop
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	40012300 	.word	0x40012300
 8006170:	0f000001 	.word	0x0f000001

08006174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f003 0307 	and.w	r3, r3, #7
 8006182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006184:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <__NVIC_SetPriorityGrouping+0x44>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006190:	4013      	ands	r3, r2
 8006192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800619c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061a6:	4a04      	ldr	r2, [pc, #16]	; (80061b8 <__NVIC_SetPriorityGrouping+0x44>)
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	60d3      	str	r3, [r2, #12]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	e000ed00 	.word	0xe000ed00

080061bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061c0:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <__NVIC_GetPriorityGrouping+0x18>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	0a1b      	lsrs	r3, r3, #8
 80061c6:	f003 0307 	and.w	r3, r3, #7
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	e000ed00 	.word	0xe000ed00

080061d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	4603      	mov	r3, r0
 80061e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	db0b      	blt.n	8006202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	f003 021f 	and.w	r2, r3, #31
 80061f0:	4907      	ldr	r1, [pc, #28]	; (8006210 <__NVIC_EnableIRQ+0x38>)
 80061f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061f6:	095b      	lsrs	r3, r3, #5
 80061f8:	2001      	movs	r0, #1
 80061fa:	fa00 f202 	lsl.w	r2, r0, r2
 80061fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	e000e100 	.word	0xe000e100

08006214 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	4603      	mov	r3, r0
 800621c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800621e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006222:	2b00      	cmp	r3, #0
 8006224:	db12      	blt.n	800624c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006226:	79fb      	ldrb	r3, [r7, #7]
 8006228:	f003 021f 	and.w	r2, r3, #31
 800622c:	490a      	ldr	r1, [pc, #40]	; (8006258 <__NVIC_DisableIRQ+0x44>)
 800622e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	2001      	movs	r0, #1
 8006236:	fa00 f202 	lsl.w	r2, r0, r2
 800623a:	3320      	adds	r3, #32
 800623c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006240:	f3bf 8f4f 	dsb	sy
}
 8006244:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006246:	f3bf 8f6f 	isb	sy
}
 800624a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	e000e100 	.word	0xe000e100

0800625c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	4603      	mov	r3, r0
 8006264:	6039      	str	r1, [r7, #0]
 8006266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800626c:	2b00      	cmp	r3, #0
 800626e:	db0a      	blt.n	8006286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	b2da      	uxtb	r2, r3
 8006274:	490c      	ldr	r1, [pc, #48]	; (80062a8 <__NVIC_SetPriority+0x4c>)
 8006276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800627a:	0112      	lsls	r2, r2, #4
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	440b      	add	r3, r1
 8006280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006284:	e00a      	b.n	800629c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	b2da      	uxtb	r2, r3
 800628a:	4908      	ldr	r1, [pc, #32]	; (80062ac <__NVIC_SetPriority+0x50>)
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	3b04      	subs	r3, #4
 8006294:	0112      	lsls	r2, r2, #4
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	440b      	add	r3, r1
 800629a:	761a      	strb	r2, [r3, #24]
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	e000e100 	.word	0xe000e100
 80062ac:	e000ed00 	.word	0xe000ed00

080062b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b089      	sub	sp, #36	; 0x24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f1c3 0307 	rsb	r3, r3, #7
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	bf28      	it	cs
 80062ce:	2304      	movcs	r3, #4
 80062d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	3304      	adds	r3, #4
 80062d6:	2b06      	cmp	r3, #6
 80062d8:	d902      	bls.n	80062e0 <NVIC_EncodePriority+0x30>
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	3b03      	subs	r3, #3
 80062de:	e000      	b.n	80062e2 <NVIC_EncodePriority+0x32>
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062e4:	f04f 32ff 	mov.w	r2, #4294967295
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	43da      	mvns	r2, r3
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	401a      	ands	r2, r3
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062f8:	f04f 31ff 	mov.w	r1, #4294967295
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006302:	43d9      	mvns	r1, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006308:	4313      	orrs	r3, r2
         );
}
 800630a:	4618      	mov	r0, r3
 800630c:	3724      	adds	r7, #36	; 0x24
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
	...

08006318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3b01      	subs	r3, #1
 8006324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006328:	d301      	bcc.n	800632e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800632a:	2301      	movs	r3, #1
 800632c:	e00f      	b.n	800634e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800632e:	4a0a      	ldr	r2, [pc, #40]	; (8006358 <SysTick_Config+0x40>)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3b01      	subs	r3, #1
 8006334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006336:	210f      	movs	r1, #15
 8006338:	f04f 30ff 	mov.w	r0, #4294967295
 800633c:	f7ff ff8e 	bl	800625c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006340:	4b05      	ldr	r3, [pc, #20]	; (8006358 <SysTick_Config+0x40>)
 8006342:	2200      	movs	r2, #0
 8006344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006346:	4b04      	ldr	r3, [pc, #16]	; (8006358 <SysTick_Config+0x40>)
 8006348:	2207      	movs	r2, #7
 800634a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	e000e010 	.word	0xe000e010

0800635c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff ff05 	bl	8006174 <__NVIC_SetPriorityGrouping>
}
 800636a:	bf00      	nop
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006372:	b580      	push	{r7, lr}
 8006374:	b086      	sub	sp, #24
 8006376:	af00      	add	r7, sp, #0
 8006378:	4603      	mov	r3, r0
 800637a:	60b9      	str	r1, [r7, #8]
 800637c:	607a      	str	r2, [r7, #4]
 800637e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006380:	2300      	movs	r3, #0
 8006382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006384:	f7ff ff1a 	bl	80061bc <__NVIC_GetPriorityGrouping>
 8006388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	6978      	ldr	r0, [r7, #20]
 8006390:	f7ff ff8e 	bl	80062b0 <NVIC_EncodePriority>
 8006394:	4602      	mov	r2, r0
 8006396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800639a:	4611      	mov	r1, r2
 800639c:	4618      	mov	r0, r3
 800639e:	f7ff ff5d 	bl	800625c <__NVIC_SetPriority>
}
 80063a2:	bf00      	nop
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b082      	sub	sp, #8
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	4603      	mov	r3, r0
 80063b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff ff0d 	bl	80061d8 <__NVIC_EnableIRQ>
}
 80063be:	bf00      	nop
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	4603      	mov	r3, r0
 80063ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80063d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff ff1d 	bl	8006214 <__NVIC_DisableIRQ>
}
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7ff ff94 	bl	8006318 <SysTick_Config>
 80063f0:	4603      	mov	r3, r0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006408:	f7ff fc36 	bl	8005c78 <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e099      	b.n	800654c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0201 	bic.w	r2, r2, #1
 8006436:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006438:	e00f      	b.n	800645a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800643a:	f7ff fc1d 	bl	8005c78 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b05      	cmp	r3, #5
 8006446:	d908      	bls.n	800645a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2203      	movs	r2, #3
 8006452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e078      	b.n	800654c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e8      	bne.n	800643a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	4b38      	ldr	r3, [pc, #224]	; (8006554 <HAL_DMA_Init+0x158>)
 8006474:	4013      	ands	r3, r2
 8006476:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006486:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800649e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d107      	bne.n	80064c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	4313      	orrs	r3, r2
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f023 0307 	bic.w	r3, r3, #7
 80064da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d117      	bne.n	800651e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00e      	beq.n	800651e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fb5f 	bl	8006bc4 <DMA_CheckFifoParam>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d008      	beq.n	800651e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2240      	movs	r2, #64	; 0x40
 8006510:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800651a:	2301      	movs	r3, #1
 800651c:	e016      	b.n	800654c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fb16 	bl	8006b58 <DMA_CalcBaseAndBitshift>
 800652c:	4603      	mov	r3, r0
 800652e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006534:	223f      	movs	r2, #63	; 0x3f
 8006536:	409a      	lsls	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	f010803f 	.word	0xf010803f

08006558 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e050      	b.n	800660c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d101      	bne.n	800657a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006576:	2302      	movs	r3, #2
 8006578:	e048      	b.n	800660c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0201 	bic.w	r2, r2, #1
 8006588:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2200      	movs	r2, #0
 8006598:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2200      	movs	r2, #0
 80065a0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2200      	movs	r2, #0
 80065a8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2200      	movs	r2, #0
 80065b0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2221      	movs	r2, #33	; 0x21
 80065b8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 facc 	bl	8006b58 <DMA_CalcBaseAndBitshift>
 80065c0:	4603      	mov	r3, r0
 80065c2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ec:	223f      	movs	r2, #63	; 0x3f
 80065ee:	409a      	lsls	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <HAL_DMA_Start_IT+0x26>
 8006636:	2302      	movs	r3, #2
 8006638:	e040      	b.n	80066bc <HAL_DMA_Start_IT+0xa8>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b01      	cmp	r3, #1
 800664c:	d12f      	bne.n	80066ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2202      	movs	r2, #2
 8006652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	68b9      	ldr	r1, [r7, #8]
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 fa4a 	bl	8006afc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800666c:	223f      	movs	r2, #63	; 0x3f
 800666e:	409a      	lsls	r2, r3
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0216 	orr.w	r2, r2, #22
 8006682:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006688:	2b00      	cmp	r3, #0
 800668a:	d007      	beq.n	800669c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0208 	orr.w	r2, r2, #8
 800669a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]
 80066ac:	e005      	b.n	80066ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80066b6:	2302      	movs	r3, #2
 80066b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80066ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80066d2:	f7ff fad1 	bl	8005c78 <HAL_GetTick>
 80066d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d008      	beq.n	80066f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2280      	movs	r2, #128	; 0x80
 80066e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e052      	b.n	800679c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0216 	bic.w	r2, r2, #22
 8006704:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695a      	ldr	r2, [r3, #20]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006714:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	2b00      	cmp	r3, #0
 800671c:	d103      	bne.n	8006726 <HAL_DMA_Abort+0x62>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006722:	2b00      	cmp	r3, #0
 8006724:	d007      	beq.n	8006736 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0208 	bic.w	r2, r2, #8
 8006734:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0201 	bic.w	r2, r2, #1
 8006744:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006746:	e013      	b.n	8006770 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006748:	f7ff fa96 	bl	8005c78 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b05      	cmp	r3, #5
 8006754:	d90c      	bls.n	8006770 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2220      	movs	r2, #32
 800675a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2203      	movs	r2, #3
 8006760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e015      	b.n	800679c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1e4      	bne.n	8006748 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006782:	223f      	movs	r2, #63	; 0x3f
 8006784:	409a      	lsls	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d004      	beq.n	80067c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2280      	movs	r2, #128	; 0x80
 80067bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e00c      	b.n	80067dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2205      	movs	r2, #5
 80067c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0201 	bic.w	r2, r2, #1
 80067d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80067f4:	4b8e      	ldr	r3, [pc, #568]	; (8006a30 <HAL_DMA_IRQHandler+0x248>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a8e      	ldr	r2, [pc, #568]	; (8006a34 <HAL_DMA_IRQHandler+0x24c>)
 80067fa:	fba2 2303 	umull	r2, r3, r2, r3
 80067fe:	0a9b      	lsrs	r3, r3, #10
 8006800:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006806:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006812:	2208      	movs	r2, #8
 8006814:	409a      	lsls	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4013      	ands	r3, r2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d01a      	beq.n	8006854 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d013      	beq.n	8006854 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0204 	bic.w	r2, r2, #4
 800683a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006840:	2208      	movs	r2, #8
 8006842:	409a      	lsls	r2, r3
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684c:	f043 0201 	orr.w	r2, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006858:	2201      	movs	r2, #1
 800685a:	409a      	lsls	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4013      	ands	r3, r2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d012      	beq.n	800688a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00b      	beq.n	800688a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006876:	2201      	movs	r2, #1
 8006878:	409a      	lsls	r2, r3
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006882:	f043 0202 	orr.w	r2, r3, #2
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800688e:	2204      	movs	r2, #4
 8006890:	409a      	lsls	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4013      	ands	r3, r2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d012      	beq.n	80068c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00b      	beq.n	80068c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ac:	2204      	movs	r2, #4
 80068ae:	409a      	lsls	r2, r3
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b8:	f043 0204 	orr.w	r2, r3, #4
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c4:	2210      	movs	r2, #16
 80068c6:	409a      	lsls	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4013      	ands	r3, r2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d043      	beq.n	8006958 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0308 	and.w	r3, r3, #8
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d03c      	beq.n	8006958 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e2:	2210      	movs	r2, #16
 80068e4:	409a      	lsls	r2, r3
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d018      	beq.n	800692a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d108      	bne.n	8006918 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d024      	beq.n	8006958 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	4798      	blx	r3
 8006916:	e01f      	b.n	8006958 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01b      	beq.n	8006958 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	4798      	blx	r3
 8006928:	e016      	b.n	8006958 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d107      	bne.n	8006948 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0208 	bic.w	r2, r2, #8
 8006946:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695c:	2220      	movs	r2, #32
 800695e:	409a      	lsls	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4013      	ands	r3, r2
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 808f 	beq.w	8006a88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0310 	and.w	r3, r3, #16
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 8087 	beq.w	8006a88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800697e:	2220      	movs	r2, #32
 8006980:	409a      	lsls	r2, r3
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b05      	cmp	r3, #5
 8006990:	d136      	bne.n	8006a00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0216 	bic.w	r2, r2, #22
 80069a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	695a      	ldr	r2, [r3, #20]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d103      	bne.n	80069c2 <HAL_DMA_IRQHandler+0x1da>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d007      	beq.n	80069d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0208 	bic.w	r2, r2, #8
 80069d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d6:	223f      	movs	r2, #63	; 0x3f
 80069d8:	409a      	lsls	r2, r3
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d07e      	beq.n	8006af4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	4798      	blx	r3
        }
        return;
 80069fe:	e079      	b.n	8006af4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d01d      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10d      	bne.n	8006a38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d031      	beq.n	8006a88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	4798      	blx	r3
 8006a2c:	e02c      	b.n	8006a88 <HAL_DMA_IRQHandler+0x2a0>
 8006a2e:	bf00      	nop
 8006a30:	20000008 	.word	0x20000008
 8006a34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d023      	beq.n	8006a88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	4798      	blx	r3
 8006a48:	e01e      	b.n	8006a88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10f      	bne.n	8006a78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0210 	bic.w	r2, r2, #16
 8006a66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d032      	beq.n	8006af6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d022      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2205      	movs	r2, #5
 8006aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0201 	bic.w	r2, r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	60bb      	str	r3, [r7, #8]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d307      	bcc.n	8006ad0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1f2      	bne.n	8006ab4 <HAL_DMA_IRQHandler+0x2cc>
 8006ace:	e000      	b.n	8006ad2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006ad0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	4798      	blx	r3
 8006af2:	e000      	b.n	8006af6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006af4:	bf00      	nop
    }
  }
}
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	2b40      	cmp	r3, #64	; 0x40
 8006b28:	d108      	bne.n	8006b3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006b3a:	e007      	b.n	8006b4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	60da      	str	r2, [r3, #12]
}
 8006b4c:	bf00      	nop
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	3b10      	subs	r3, #16
 8006b68:	4a14      	ldr	r2, [pc, #80]	; (8006bbc <DMA_CalcBaseAndBitshift+0x64>)
 8006b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6e:	091b      	lsrs	r3, r3, #4
 8006b70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006b72:	4a13      	ldr	r2, [pc, #76]	; (8006bc0 <DMA_CalcBaseAndBitshift+0x68>)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4413      	add	r3, r2
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d909      	bls.n	8006b9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006b8e:	f023 0303 	bic.w	r3, r3, #3
 8006b92:	1d1a      	adds	r2, r3, #4
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	659a      	str	r2, [r3, #88]	; 0x58
 8006b98:	e007      	b.n	8006baa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ba2:	f023 0303 	bic.w	r3, r3, #3
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	aaaaaaab 	.word	0xaaaaaaab
 8006bc0:	0800a8e0 	.word	0x0800a8e0

08006bc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d11f      	bne.n	8006c1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d856      	bhi.n	8006c92 <DMA_CheckFifoParam+0xce>
 8006be4:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <DMA_CheckFifoParam+0x28>)
 8006be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bea:	bf00      	nop
 8006bec:	08006bfd 	.word	0x08006bfd
 8006bf0:	08006c0f 	.word	0x08006c0f
 8006bf4:	08006bfd 	.word	0x08006bfd
 8006bf8:	08006c93 	.word	0x08006c93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d046      	beq.n	8006c96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c0c:	e043      	b.n	8006c96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c16:	d140      	bne.n	8006c9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c1c:	e03d      	b.n	8006c9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c26:	d121      	bne.n	8006c6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d837      	bhi.n	8006c9e <DMA_CheckFifoParam+0xda>
 8006c2e:	a201      	add	r2, pc, #4	; (adr r2, 8006c34 <DMA_CheckFifoParam+0x70>)
 8006c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c34:	08006c45 	.word	0x08006c45
 8006c38:	08006c4b 	.word	0x08006c4b
 8006c3c:	08006c45 	.word	0x08006c45
 8006c40:	08006c5d 	.word	0x08006c5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	73fb      	strb	r3, [r7, #15]
      break;
 8006c48:	e030      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d025      	beq.n	8006ca2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c5a:	e022      	b.n	8006ca2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c64:	d11f      	bne.n	8006ca6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006c6a:	e01c      	b.n	8006ca6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d903      	bls.n	8006c7a <DMA_CheckFifoParam+0xb6>
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d003      	beq.n	8006c80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006c78:	e018      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c7e:	e015      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00e      	beq.n	8006caa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c90:	e00b      	b.n	8006caa <DMA_CheckFifoParam+0xe6>
      break;
 8006c92:	bf00      	nop
 8006c94:	e00a      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
      break;
 8006c96:	bf00      	nop
 8006c98:	e008      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
      break;
 8006c9a:	bf00      	nop
 8006c9c:	e006      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
      break;
 8006c9e:	bf00      	nop
 8006ca0:	e004      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
      break;
 8006ca2:	bf00      	nop
 8006ca4:	e002      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
      break;   
 8006ca6:	bf00      	nop
 8006ca8:	e000      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
      break;
 8006caa:	bf00      	nop
    }
  } 
  
  return status; 
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop

08006cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b089      	sub	sp, #36	; 0x24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
 8006cd6:	e165      	b.n	8006fa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006cd8:	2201      	movs	r2, #1
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	4013      	ands	r3, r2
 8006cea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	f040 8154 	bne.w	8006f9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f003 0303 	and.w	r3, r3, #3
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d005      	beq.n	8006d0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d130      	bne.n	8006d70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	2203      	movs	r2, #3
 8006d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1e:	43db      	mvns	r3, r3
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	4013      	ands	r3, r2
 8006d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d44:	2201      	movs	r2, #1
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4c:	43db      	mvns	r3, r3
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	4013      	ands	r3, r2
 8006d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	091b      	lsrs	r3, r3, #4
 8006d5a:	f003 0201 	and.w	r2, r3, #1
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	fa02 f303 	lsl.w	r3, r2, r3
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f003 0303 	and.w	r3, r3, #3
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d017      	beq.n	8006dac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	2203      	movs	r2, #3
 8006d88:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	4013      	ands	r3, r2
 8006d92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	005b      	lsls	r3, r3, #1
 8006d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f003 0303 	and.w	r3, r3, #3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d123      	bne.n	8006e00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	08da      	lsrs	r2, r3, #3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3208      	adds	r2, #8
 8006dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	220f      	movs	r2, #15
 8006dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	691a      	ldr	r2, [r3, #16]
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	f003 0307 	and.w	r3, r3, #7
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	08da      	lsrs	r2, r3, #3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3208      	adds	r2, #8
 8006dfa:	69b9      	ldr	r1, [r7, #24]
 8006dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	2203      	movs	r2, #3
 8006e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e10:	43db      	mvns	r3, r3
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	4013      	ands	r3, r2
 8006e16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f003 0203 	and.w	r2, r3, #3
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	fa02 f303 	lsl.w	r3, r2, r3
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 80ae 	beq.w	8006f9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e42:	2300      	movs	r3, #0
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	4b5d      	ldr	r3, [pc, #372]	; (8006fbc <HAL_GPIO_Init+0x300>)
 8006e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4a:	4a5c      	ldr	r2, [pc, #368]	; (8006fbc <HAL_GPIO_Init+0x300>)
 8006e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e50:	6453      	str	r3, [r2, #68]	; 0x44
 8006e52:	4b5a      	ldr	r3, [pc, #360]	; (8006fbc <HAL_GPIO_Init+0x300>)
 8006e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e5e:	4a58      	ldr	r2, [pc, #352]	; (8006fc0 <HAL_GPIO_Init+0x304>)
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	089b      	lsrs	r3, r3, #2
 8006e64:	3302      	adds	r3, #2
 8006e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	f003 0303 	and.w	r3, r3, #3
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	220f      	movs	r2, #15
 8006e76:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7a:	43db      	mvns	r3, r3
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	4013      	ands	r3, r2
 8006e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a4f      	ldr	r2, [pc, #316]	; (8006fc4 <HAL_GPIO_Init+0x308>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d025      	beq.n	8006ed6 <HAL_GPIO_Init+0x21a>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a4e      	ldr	r2, [pc, #312]	; (8006fc8 <HAL_GPIO_Init+0x30c>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d01f      	beq.n	8006ed2 <HAL_GPIO_Init+0x216>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a4d      	ldr	r2, [pc, #308]	; (8006fcc <HAL_GPIO_Init+0x310>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d019      	beq.n	8006ece <HAL_GPIO_Init+0x212>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a4c      	ldr	r2, [pc, #304]	; (8006fd0 <HAL_GPIO_Init+0x314>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d013      	beq.n	8006eca <HAL_GPIO_Init+0x20e>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a4b      	ldr	r2, [pc, #300]	; (8006fd4 <HAL_GPIO_Init+0x318>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00d      	beq.n	8006ec6 <HAL_GPIO_Init+0x20a>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a4a      	ldr	r2, [pc, #296]	; (8006fd8 <HAL_GPIO_Init+0x31c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d007      	beq.n	8006ec2 <HAL_GPIO_Init+0x206>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a49      	ldr	r2, [pc, #292]	; (8006fdc <HAL_GPIO_Init+0x320>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d101      	bne.n	8006ebe <HAL_GPIO_Init+0x202>
 8006eba:	2306      	movs	r3, #6
 8006ebc:	e00c      	b.n	8006ed8 <HAL_GPIO_Init+0x21c>
 8006ebe:	2307      	movs	r3, #7
 8006ec0:	e00a      	b.n	8006ed8 <HAL_GPIO_Init+0x21c>
 8006ec2:	2305      	movs	r3, #5
 8006ec4:	e008      	b.n	8006ed8 <HAL_GPIO_Init+0x21c>
 8006ec6:	2304      	movs	r3, #4
 8006ec8:	e006      	b.n	8006ed8 <HAL_GPIO_Init+0x21c>
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e004      	b.n	8006ed8 <HAL_GPIO_Init+0x21c>
 8006ece:	2302      	movs	r3, #2
 8006ed0:	e002      	b.n	8006ed8 <HAL_GPIO_Init+0x21c>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e000      	b.n	8006ed8 <HAL_GPIO_Init+0x21c>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	69fa      	ldr	r2, [r7, #28]
 8006eda:	f002 0203 	and.w	r2, r2, #3
 8006ede:	0092      	lsls	r2, r2, #2
 8006ee0:	4093      	lsls	r3, r2
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ee8:	4935      	ldr	r1, [pc, #212]	; (8006fc0 <HAL_GPIO_Init+0x304>)
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	089b      	lsrs	r3, r3, #2
 8006eee:	3302      	adds	r3, #2
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006ef6:	4b3a      	ldr	r3, [pc, #232]	; (8006fe0 <HAL_GPIO_Init+0x324>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	43db      	mvns	r3, r3
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	4013      	ands	r3, r2
 8006f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006f1a:	4a31      	ldr	r2, [pc, #196]	; (8006fe0 <HAL_GPIO_Init+0x324>)
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006f20:	4b2f      	ldr	r3, [pc, #188]	; (8006fe0 <HAL_GPIO_Init+0x324>)
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	43db      	mvns	r3, r3
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d003      	beq.n	8006f44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f44:	4a26      	ldr	r2, [pc, #152]	; (8006fe0 <HAL_GPIO_Init+0x324>)
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006f4a:	4b25      	ldr	r3, [pc, #148]	; (8006fe0 <HAL_GPIO_Init+0x324>)
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	43db      	mvns	r3, r3
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	4013      	ands	r3, r2
 8006f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f6e:	4a1c      	ldr	r2, [pc, #112]	; (8006fe0 <HAL_GPIO_Init+0x324>)
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006f74:	4b1a      	ldr	r3, [pc, #104]	; (8006fe0 <HAL_GPIO_Init+0x324>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	4013      	ands	r3, r2
 8006f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f98:	4a11      	ldr	r2, [pc, #68]	; (8006fe0 <HAL_GPIO_Init+0x324>)
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	61fb      	str	r3, [r7, #28]
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	2b0f      	cmp	r3, #15
 8006fa8:	f67f ae96 	bls.w	8006cd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006fac:	bf00      	nop
 8006fae:	bf00      	nop
 8006fb0:	3724      	adds	r7, #36	; 0x24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	40023800 	.word	0x40023800
 8006fc0:	40013800 	.word	0x40013800
 8006fc4:	40020000 	.word	0x40020000
 8006fc8:	40020400 	.word	0x40020400
 8006fcc:	40020800 	.word	0x40020800
 8006fd0:	40020c00 	.word	0x40020c00
 8006fd4:	40021000 	.word	0x40021000
 8006fd8:	40021400 	.word	0x40021400
 8006fdc:	40021800 	.word	0x40021800
 8006fe0:	40013c00 	.word	0x40013c00

08006fe4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	e0c7      	b.n	8007190 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007000:	2201      	movs	r2, #1
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	fa02 f303 	lsl.w	r3, r2, r3
 8007008:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	4013      	ands	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	429a      	cmp	r2, r3
 8007018:	f040 80b7 	bne.w	800718a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800701c:	4a62      	ldr	r2, [pc, #392]	; (80071a8 <HAL_GPIO_DeInit+0x1c4>)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	089b      	lsrs	r3, r3, #2
 8007022:	3302      	adds	r3, #2
 8007024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007028:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f003 0303 	and.w	r3, r3, #3
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	220f      	movs	r2, #15
 8007034:	fa02 f303 	lsl.w	r3, r2, r3
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	4013      	ands	r3, r2
 800703c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a5a      	ldr	r2, [pc, #360]	; (80071ac <HAL_GPIO_DeInit+0x1c8>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d025      	beq.n	8007092 <HAL_GPIO_DeInit+0xae>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a59      	ldr	r2, [pc, #356]	; (80071b0 <HAL_GPIO_DeInit+0x1cc>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d01f      	beq.n	800708e <HAL_GPIO_DeInit+0xaa>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a58      	ldr	r2, [pc, #352]	; (80071b4 <HAL_GPIO_DeInit+0x1d0>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d019      	beq.n	800708a <HAL_GPIO_DeInit+0xa6>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a57      	ldr	r2, [pc, #348]	; (80071b8 <HAL_GPIO_DeInit+0x1d4>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d013      	beq.n	8007086 <HAL_GPIO_DeInit+0xa2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a56      	ldr	r2, [pc, #344]	; (80071bc <HAL_GPIO_DeInit+0x1d8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d00d      	beq.n	8007082 <HAL_GPIO_DeInit+0x9e>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a55      	ldr	r2, [pc, #340]	; (80071c0 <HAL_GPIO_DeInit+0x1dc>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d007      	beq.n	800707e <HAL_GPIO_DeInit+0x9a>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a54      	ldr	r2, [pc, #336]	; (80071c4 <HAL_GPIO_DeInit+0x1e0>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d101      	bne.n	800707a <HAL_GPIO_DeInit+0x96>
 8007076:	2306      	movs	r3, #6
 8007078:	e00c      	b.n	8007094 <HAL_GPIO_DeInit+0xb0>
 800707a:	2307      	movs	r3, #7
 800707c:	e00a      	b.n	8007094 <HAL_GPIO_DeInit+0xb0>
 800707e:	2305      	movs	r3, #5
 8007080:	e008      	b.n	8007094 <HAL_GPIO_DeInit+0xb0>
 8007082:	2304      	movs	r3, #4
 8007084:	e006      	b.n	8007094 <HAL_GPIO_DeInit+0xb0>
 8007086:	2303      	movs	r3, #3
 8007088:	e004      	b.n	8007094 <HAL_GPIO_DeInit+0xb0>
 800708a:	2302      	movs	r3, #2
 800708c:	e002      	b.n	8007094 <HAL_GPIO_DeInit+0xb0>
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <HAL_GPIO_DeInit+0xb0>
 8007092:	2300      	movs	r3, #0
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	f002 0203 	and.w	r2, r2, #3
 800709a:	0092      	lsls	r2, r2, #2
 800709c:	4093      	lsls	r3, r2
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d132      	bne.n	800710a <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80070a4:	4b48      	ldr	r3, [pc, #288]	; (80071c8 <HAL_GPIO_DeInit+0x1e4>)
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	43db      	mvns	r3, r3
 80070ac:	4946      	ldr	r1, [pc, #280]	; (80071c8 <HAL_GPIO_DeInit+0x1e4>)
 80070ae:	4013      	ands	r3, r2
 80070b0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80070b2:	4b45      	ldr	r3, [pc, #276]	; (80071c8 <HAL_GPIO_DeInit+0x1e4>)
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	43db      	mvns	r3, r3
 80070ba:	4943      	ldr	r1, [pc, #268]	; (80071c8 <HAL_GPIO_DeInit+0x1e4>)
 80070bc:	4013      	ands	r3, r2
 80070be:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80070c0:	4b41      	ldr	r3, [pc, #260]	; (80071c8 <HAL_GPIO_DeInit+0x1e4>)
 80070c2:	68da      	ldr	r2, [r3, #12]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	43db      	mvns	r3, r3
 80070c8:	493f      	ldr	r1, [pc, #252]	; (80071c8 <HAL_GPIO_DeInit+0x1e4>)
 80070ca:	4013      	ands	r3, r2
 80070cc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80070ce:	4b3e      	ldr	r3, [pc, #248]	; (80071c8 <HAL_GPIO_DeInit+0x1e4>)
 80070d0:	689a      	ldr	r2, [r3, #8]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	43db      	mvns	r3, r3
 80070d6:	493c      	ldr	r1, [pc, #240]	; (80071c8 <HAL_GPIO_DeInit+0x1e4>)
 80070d8:	4013      	ands	r3, r2
 80070da:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	220f      	movs	r2, #15
 80070e6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ea:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80070ec:	4a2e      	ldr	r2, [pc, #184]	; (80071a8 <HAL_GPIO_DeInit+0x1c4>)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	089b      	lsrs	r3, r3, #2
 80070f2:	3302      	adds	r3, #2
 80070f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	43da      	mvns	r2, r3
 80070fc:	482a      	ldr	r0, [pc, #168]	; (80071a8 <HAL_GPIO_DeInit+0x1c4>)
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	089b      	lsrs	r3, r3, #2
 8007102:	400a      	ands	r2, r1
 8007104:	3302      	adds	r3, #2
 8007106:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	2103      	movs	r1, #3
 8007114:	fa01 f303 	lsl.w	r3, r1, r3
 8007118:	43db      	mvns	r3, r3
 800711a:	401a      	ands	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	08da      	lsrs	r2, r3, #3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3208      	adds	r2, #8
 8007128:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f003 0307 	and.w	r3, r3, #7
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	220f      	movs	r2, #15
 8007136:	fa02 f303 	lsl.w	r3, r2, r3
 800713a:	43db      	mvns	r3, r3
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	08d2      	lsrs	r2, r2, #3
 8007140:	4019      	ands	r1, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	3208      	adds	r2, #8
 8007146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	2103      	movs	r1, #3
 8007154:	fa01 f303 	lsl.w	r3, r1, r3
 8007158:	43db      	mvns	r3, r3
 800715a:	401a      	ands	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	2101      	movs	r1, #1
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	fa01 f303 	lsl.w	r3, r1, r3
 800716c:	43db      	mvns	r3, r3
 800716e:	401a      	ands	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	2103      	movs	r1, #3
 800717e:	fa01 f303 	lsl.w	r3, r1, r3
 8007182:	43db      	mvns	r3, r3
 8007184:	401a      	ands	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	3301      	adds	r3, #1
 800718e:	617b      	str	r3, [r7, #20]
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	2b0f      	cmp	r3, #15
 8007194:	f67f af34 	bls.w	8007000 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007198:	bf00      	nop
 800719a:	bf00      	nop
 800719c:	371c      	adds	r7, #28
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	40013800 	.word	0x40013800
 80071ac:	40020000 	.word	0x40020000
 80071b0:	40020400 	.word	0x40020400
 80071b4:	40020800 	.word	0x40020800
 80071b8:	40020c00 	.word	0x40020c00
 80071bc:	40021000 	.word	0x40021000
 80071c0:	40021400 	.word	0x40021400
 80071c4:	40021800 	.word	0x40021800
 80071c8:	40013c00 	.word	0x40013c00

080071cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	807b      	strh	r3, [r7, #2]
 80071d8:	4613      	mov	r3, r2
 80071da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071dc:	787b      	ldrb	r3, [r7, #1]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071e2:	887a      	ldrh	r2, [r7, #2]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80071e8:	e003      	b.n	80071f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80071ea:	887b      	ldrh	r3, [r7, #2]
 80071ec:	041a      	lsls	r2, r3, #16
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	619a      	str	r2, [r3, #24]
}
 80071f2:	bf00      	nop
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
	...

08007200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e0cc      	b.n	80073ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007214:	4b68      	ldr	r3, [pc, #416]	; (80073b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 030f 	and.w	r3, r3, #15
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	429a      	cmp	r2, r3
 8007220:	d90c      	bls.n	800723c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007222:	4b65      	ldr	r3, [pc, #404]	; (80073b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	b2d2      	uxtb	r2, r2
 8007228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800722a:	4b63      	ldr	r3, [pc, #396]	; (80073b8 <HAL_RCC_ClockConfig+0x1b8>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 030f 	and.w	r3, r3, #15
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d001      	beq.n	800723c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e0b8      	b.n	80073ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d020      	beq.n	800728a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b00      	cmp	r3, #0
 8007252:	d005      	beq.n	8007260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007254:	4b59      	ldr	r3, [pc, #356]	; (80073bc <HAL_RCC_ClockConfig+0x1bc>)
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	4a58      	ldr	r2, [pc, #352]	; (80073bc <HAL_RCC_ClockConfig+0x1bc>)
 800725a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800725e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0308 	and.w	r3, r3, #8
 8007268:	2b00      	cmp	r3, #0
 800726a:	d005      	beq.n	8007278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800726c:	4b53      	ldr	r3, [pc, #332]	; (80073bc <HAL_RCC_ClockConfig+0x1bc>)
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	4a52      	ldr	r2, [pc, #328]	; (80073bc <HAL_RCC_ClockConfig+0x1bc>)
 8007272:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007278:	4b50      	ldr	r3, [pc, #320]	; (80073bc <HAL_RCC_ClockConfig+0x1bc>)
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	494d      	ldr	r1, [pc, #308]	; (80073bc <HAL_RCC_ClockConfig+0x1bc>)
 8007286:	4313      	orrs	r3, r2
 8007288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d044      	beq.n	8007320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d107      	bne.n	80072ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800729e:	4b47      	ldr	r3, [pc, #284]	; (80073bc <HAL_RCC_ClockConfig+0x1bc>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d119      	bne.n	80072de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e07f      	b.n	80073ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d003      	beq.n	80072be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d107      	bne.n	80072ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072be:	4b3f      	ldr	r3, [pc, #252]	; (80073bc <HAL_RCC_ClockConfig+0x1bc>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d109      	bne.n	80072de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e06f      	b.n	80073ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072ce:	4b3b      	ldr	r3, [pc, #236]	; (80073bc <HAL_RCC_ClockConfig+0x1bc>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e067      	b.n	80073ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072de:	4b37      	ldr	r3, [pc, #220]	; (80073bc <HAL_RCC_ClockConfig+0x1bc>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f023 0203 	bic.w	r2, r3, #3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	4934      	ldr	r1, [pc, #208]	; (80073bc <HAL_RCC_ClockConfig+0x1bc>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072f0:	f7fe fcc2 	bl	8005c78 <HAL_GetTick>
 80072f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072f6:	e00a      	b.n	800730e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072f8:	f7fe fcbe 	bl	8005c78 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	f241 3288 	movw	r2, #5000	; 0x1388
 8007306:	4293      	cmp	r3, r2
 8007308:	d901      	bls.n	800730e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e04f      	b.n	80073ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800730e:	4b2b      	ldr	r3, [pc, #172]	; (80073bc <HAL_RCC_ClockConfig+0x1bc>)
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f003 020c 	and.w	r2, r3, #12
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	429a      	cmp	r2, r3
 800731e:	d1eb      	bne.n	80072f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007320:	4b25      	ldr	r3, [pc, #148]	; (80073b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 030f 	and.w	r3, r3, #15
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	429a      	cmp	r2, r3
 800732c:	d20c      	bcs.n	8007348 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800732e:	4b22      	ldr	r3, [pc, #136]	; (80073b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007336:	4b20      	ldr	r3, [pc, #128]	; (80073b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 030f 	and.w	r3, r3, #15
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d001      	beq.n	8007348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e032      	b.n	80073ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b00      	cmp	r3, #0
 8007352:	d008      	beq.n	8007366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007354:	4b19      	ldr	r3, [pc, #100]	; (80073bc <HAL_RCC_ClockConfig+0x1bc>)
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	4916      	ldr	r1, [pc, #88]	; (80073bc <HAL_RCC_ClockConfig+0x1bc>)
 8007362:	4313      	orrs	r3, r2
 8007364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0308 	and.w	r3, r3, #8
 800736e:	2b00      	cmp	r3, #0
 8007370:	d009      	beq.n	8007386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007372:	4b12      	ldr	r3, [pc, #72]	; (80073bc <HAL_RCC_ClockConfig+0x1bc>)
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	490e      	ldr	r1, [pc, #56]	; (80073bc <HAL_RCC_ClockConfig+0x1bc>)
 8007382:	4313      	orrs	r3, r2
 8007384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007386:	f000 f855 	bl	8007434 <HAL_RCC_GetSysClockFreq>
 800738a:	4602      	mov	r2, r0
 800738c:	4b0b      	ldr	r3, [pc, #44]	; (80073bc <HAL_RCC_ClockConfig+0x1bc>)
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	091b      	lsrs	r3, r3, #4
 8007392:	f003 030f 	and.w	r3, r3, #15
 8007396:	490a      	ldr	r1, [pc, #40]	; (80073c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007398:	5ccb      	ldrb	r3, [r1, r3]
 800739a:	fa22 f303 	lsr.w	r3, r2, r3
 800739e:	4a09      	ldr	r2, [pc, #36]	; (80073c4 <HAL_RCC_ClockConfig+0x1c4>)
 80073a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80073a2:	4b09      	ldr	r3, [pc, #36]	; (80073c8 <HAL_RCC_ClockConfig+0x1c8>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fe fc22 	bl	8005bf0 <HAL_InitTick>

  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	40023c00 	.word	0x40023c00
 80073bc:	40023800 	.word	0x40023800
 80073c0:	0800a8c8 	.word	0x0800a8c8
 80073c4:	20000008 	.word	0x20000008
 80073c8:	2000000c 	.word	0x2000000c

080073cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073d0:	4b03      	ldr	r3, [pc, #12]	; (80073e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80073d2:	681b      	ldr	r3, [r3, #0]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	20000008 	.word	0x20000008

080073e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073e8:	f7ff fff0 	bl	80073cc <HAL_RCC_GetHCLKFreq>
 80073ec:	4602      	mov	r2, r0
 80073ee:	4b05      	ldr	r3, [pc, #20]	; (8007404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	0a9b      	lsrs	r3, r3, #10
 80073f4:	f003 0307 	and.w	r3, r3, #7
 80073f8:	4903      	ldr	r1, [pc, #12]	; (8007408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073fa:	5ccb      	ldrb	r3, [r1, r3]
 80073fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007400:	4618      	mov	r0, r3
 8007402:	bd80      	pop	{r7, pc}
 8007404:	40023800 	.word	0x40023800
 8007408:	0800a8d8 	.word	0x0800a8d8

0800740c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007410:	f7ff ffdc 	bl	80073cc <HAL_RCC_GetHCLKFreq>
 8007414:	4602      	mov	r2, r0
 8007416:	4b05      	ldr	r3, [pc, #20]	; (800742c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	0b5b      	lsrs	r3, r3, #13
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	4903      	ldr	r1, [pc, #12]	; (8007430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007422:	5ccb      	ldrb	r3, [r1, r3]
 8007424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007428:	4618      	mov	r0, r3
 800742a:	bd80      	pop	{r7, pc}
 800742c:	40023800 	.word	0x40023800
 8007430:	0800a8d8 	.word	0x0800a8d8

08007434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007438:	b0ae      	sub	sp, #184	; 0xb8
 800743a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800743c:	2300      	movs	r3, #0
 800743e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800745a:	4bcb      	ldr	r3, [pc, #812]	; (8007788 <HAL_RCC_GetSysClockFreq+0x354>)
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f003 030c 	and.w	r3, r3, #12
 8007462:	2b0c      	cmp	r3, #12
 8007464:	f200 8206 	bhi.w	8007874 <HAL_RCC_GetSysClockFreq+0x440>
 8007468:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <HAL_RCC_GetSysClockFreq+0x3c>)
 800746a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746e:	bf00      	nop
 8007470:	080074a5 	.word	0x080074a5
 8007474:	08007875 	.word	0x08007875
 8007478:	08007875 	.word	0x08007875
 800747c:	08007875 	.word	0x08007875
 8007480:	080074ad 	.word	0x080074ad
 8007484:	08007875 	.word	0x08007875
 8007488:	08007875 	.word	0x08007875
 800748c:	08007875 	.word	0x08007875
 8007490:	080074b5 	.word	0x080074b5
 8007494:	08007875 	.word	0x08007875
 8007498:	08007875 	.word	0x08007875
 800749c:	08007875 	.word	0x08007875
 80074a0:	080076a5 	.word	0x080076a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80074a4:	4bb9      	ldr	r3, [pc, #740]	; (800778c <HAL_RCC_GetSysClockFreq+0x358>)
 80074a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80074aa:	e1e7      	b.n	800787c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80074ac:	4bb8      	ldr	r3, [pc, #736]	; (8007790 <HAL_RCC_GetSysClockFreq+0x35c>)
 80074ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80074b2:	e1e3      	b.n	800787c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074b4:	4bb4      	ldr	r3, [pc, #720]	; (8007788 <HAL_RCC_GetSysClockFreq+0x354>)
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074c0:	4bb1      	ldr	r3, [pc, #708]	; (8007788 <HAL_RCC_GetSysClockFreq+0x354>)
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d071      	beq.n	80075b0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074cc:	4bae      	ldr	r3, [pc, #696]	; (8007788 <HAL_RCC_GetSysClockFreq+0x354>)
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	099b      	lsrs	r3, r3, #6
 80074d2:	2200      	movs	r2, #0
 80074d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074d8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80074dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074e8:	2300      	movs	r3, #0
 80074ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80074ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80074f2:	4622      	mov	r2, r4
 80074f4:	462b      	mov	r3, r5
 80074f6:	f04f 0000 	mov.w	r0, #0
 80074fa:	f04f 0100 	mov.w	r1, #0
 80074fe:	0159      	lsls	r1, r3, #5
 8007500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007504:	0150      	lsls	r0, r2, #5
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	4621      	mov	r1, r4
 800750c:	1a51      	subs	r1, r2, r1
 800750e:	6439      	str	r1, [r7, #64]	; 0x40
 8007510:	4629      	mov	r1, r5
 8007512:	eb63 0301 	sbc.w	r3, r3, r1
 8007516:	647b      	str	r3, [r7, #68]	; 0x44
 8007518:	f04f 0200 	mov.w	r2, #0
 800751c:	f04f 0300 	mov.w	r3, #0
 8007520:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007524:	4649      	mov	r1, r9
 8007526:	018b      	lsls	r3, r1, #6
 8007528:	4641      	mov	r1, r8
 800752a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800752e:	4641      	mov	r1, r8
 8007530:	018a      	lsls	r2, r1, #6
 8007532:	4641      	mov	r1, r8
 8007534:	1a51      	subs	r1, r2, r1
 8007536:	63b9      	str	r1, [r7, #56]	; 0x38
 8007538:	4649      	mov	r1, r9
 800753a:	eb63 0301 	sbc.w	r3, r3, r1
 800753e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007540:	f04f 0200 	mov.w	r2, #0
 8007544:	f04f 0300 	mov.w	r3, #0
 8007548:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800754c:	4649      	mov	r1, r9
 800754e:	00cb      	lsls	r3, r1, #3
 8007550:	4641      	mov	r1, r8
 8007552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007556:	4641      	mov	r1, r8
 8007558:	00ca      	lsls	r2, r1, #3
 800755a:	4610      	mov	r0, r2
 800755c:	4619      	mov	r1, r3
 800755e:	4603      	mov	r3, r0
 8007560:	4622      	mov	r2, r4
 8007562:	189b      	adds	r3, r3, r2
 8007564:	633b      	str	r3, [r7, #48]	; 0x30
 8007566:	462b      	mov	r3, r5
 8007568:	460a      	mov	r2, r1
 800756a:	eb42 0303 	adc.w	r3, r2, r3
 800756e:	637b      	str	r3, [r7, #52]	; 0x34
 8007570:	f04f 0200 	mov.w	r2, #0
 8007574:	f04f 0300 	mov.w	r3, #0
 8007578:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800757c:	4629      	mov	r1, r5
 800757e:	024b      	lsls	r3, r1, #9
 8007580:	4621      	mov	r1, r4
 8007582:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007586:	4621      	mov	r1, r4
 8007588:	024a      	lsls	r2, r1, #9
 800758a:	4610      	mov	r0, r2
 800758c:	4619      	mov	r1, r3
 800758e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007592:	2200      	movs	r2, #0
 8007594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007598:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800759c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80075a0:	f7f9 fa30 	bl	8000a04 <__aeabi_uldivmod>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4613      	mov	r3, r2
 80075aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075ae:	e067      	b.n	8007680 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075b0:	4b75      	ldr	r3, [pc, #468]	; (8007788 <HAL_RCC_GetSysClockFreq+0x354>)
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	099b      	lsrs	r3, r3, #6
 80075b6:	2200      	movs	r2, #0
 80075b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075bc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80075c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80075ca:	2300      	movs	r3, #0
 80075cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80075d2:	4622      	mov	r2, r4
 80075d4:	462b      	mov	r3, r5
 80075d6:	f04f 0000 	mov.w	r0, #0
 80075da:	f04f 0100 	mov.w	r1, #0
 80075de:	0159      	lsls	r1, r3, #5
 80075e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075e4:	0150      	lsls	r0, r2, #5
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	4621      	mov	r1, r4
 80075ec:	1a51      	subs	r1, r2, r1
 80075ee:	62b9      	str	r1, [r7, #40]	; 0x28
 80075f0:	4629      	mov	r1, r5
 80075f2:	eb63 0301 	sbc.w	r3, r3, r1
 80075f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075f8:	f04f 0200 	mov.w	r2, #0
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007604:	4649      	mov	r1, r9
 8007606:	018b      	lsls	r3, r1, #6
 8007608:	4641      	mov	r1, r8
 800760a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800760e:	4641      	mov	r1, r8
 8007610:	018a      	lsls	r2, r1, #6
 8007612:	4641      	mov	r1, r8
 8007614:	ebb2 0a01 	subs.w	sl, r2, r1
 8007618:	4649      	mov	r1, r9
 800761a:	eb63 0b01 	sbc.w	fp, r3, r1
 800761e:	f04f 0200 	mov.w	r2, #0
 8007622:	f04f 0300 	mov.w	r3, #0
 8007626:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800762a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800762e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007632:	4692      	mov	sl, r2
 8007634:	469b      	mov	fp, r3
 8007636:	4623      	mov	r3, r4
 8007638:	eb1a 0303 	adds.w	r3, sl, r3
 800763c:	623b      	str	r3, [r7, #32]
 800763e:	462b      	mov	r3, r5
 8007640:	eb4b 0303 	adc.w	r3, fp, r3
 8007644:	627b      	str	r3, [r7, #36]	; 0x24
 8007646:	f04f 0200 	mov.w	r2, #0
 800764a:	f04f 0300 	mov.w	r3, #0
 800764e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007652:	4629      	mov	r1, r5
 8007654:	028b      	lsls	r3, r1, #10
 8007656:	4621      	mov	r1, r4
 8007658:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800765c:	4621      	mov	r1, r4
 800765e:	028a      	lsls	r2, r1, #10
 8007660:	4610      	mov	r0, r2
 8007662:	4619      	mov	r1, r3
 8007664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007668:	2200      	movs	r2, #0
 800766a:	673b      	str	r3, [r7, #112]	; 0x70
 800766c:	677a      	str	r2, [r7, #116]	; 0x74
 800766e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007672:	f7f9 f9c7 	bl	8000a04 <__aeabi_uldivmod>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	4613      	mov	r3, r2
 800767c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007680:	4b41      	ldr	r3, [pc, #260]	; (8007788 <HAL_RCC_GetSysClockFreq+0x354>)
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	0c1b      	lsrs	r3, r3, #16
 8007686:	f003 0303 	and.w	r3, r3, #3
 800768a:	3301      	adds	r3, #1
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007692:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800769a:	fbb2 f3f3 	udiv	r3, r2, r3
 800769e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80076a2:	e0eb      	b.n	800787c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076a4:	4b38      	ldr	r3, [pc, #224]	; (8007788 <HAL_RCC_GetSysClockFreq+0x354>)
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076b0:	4b35      	ldr	r3, [pc, #212]	; (8007788 <HAL_RCC_GetSysClockFreq+0x354>)
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d06b      	beq.n	8007794 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076bc:	4b32      	ldr	r3, [pc, #200]	; (8007788 <HAL_RCC_GetSysClockFreq+0x354>)
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	099b      	lsrs	r3, r3, #6
 80076c2:	2200      	movs	r2, #0
 80076c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80076c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80076c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ce:	663b      	str	r3, [r7, #96]	; 0x60
 80076d0:	2300      	movs	r3, #0
 80076d2:	667b      	str	r3, [r7, #100]	; 0x64
 80076d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80076d8:	4622      	mov	r2, r4
 80076da:	462b      	mov	r3, r5
 80076dc:	f04f 0000 	mov.w	r0, #0
 80076e0:	f04f 0100 	mov.w	r1, #0
 80076e4:	0159      	lsls	r1, r3, #5
 80076e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076ea:	0150      	lsls	r0, r2, #5
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	4621      	mov	r1, r4
 80076f2:	1a51      	subs	r1, r2, r1
 80076f4:	61b9      	str	r1, [r7, #24]
 80076f6:	4629      	mov	r1, r5
 80076f8:	eb63 0301 	sbc.w	r3, r3, r1
 80076fc:	61fb      	str	r3, [r7, #28]
 80076fe:	f04f 0200 	mov.w	r2, #0
 8007702:	f04f 0300 	mov.w	r3, #0
 8007706:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800770a:	4659      	mov	r1, fp
 800770c:	018b      	lsls	r3, r1, #6
 800770e:	4651      	mov	r1, sl
 8007710:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007714:	4651      	mov	r1, sl
 8007716:	018a      	lsls	r2, r1, #6
 8007718:	4651      	mov	r1, sl
 800771a:	ebb2 0801 	subs.w	r8, r2, r1
 800771e:	4659      	mov	r1, fp
 8007720:	eb63 0901 	sbc.w	r9, r3, r1
 8007724:	f04f 0200 	mov.w	r2, #0
 8007728:	f04f 0300 	mov.w	r3, #0
 800772c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007730:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007734:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007738:	4690      	mov	r8, r2
 800773a:	4699      	mov	r9, r3
 800773c:	4623      	mov	r3, r4
 800773e:	eb18 0303 	adds.w	r3, r8, r3
 8007742:	613b      	str	r3, [r7, #16]
 8007744:	462b      	mov	r3, r5
 8007746:	eb49 0303 	adc.w	r3, r9, r3
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	f04f 0200 	mov.w	r2, #0
 8007750:	f04f 0300 	mov.w	r3, #0
 8007754:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007758:	4629      	mov	r1, r5
 800775a:	024b      	lsls	r3, r1, #9
 800775c:	4621      	mov	r1, r4
 800775e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007762:	4621      	mov	r1, r4
 8007764:	024a      	lsls	r2, r1, #9
 8007766:	4610      	mov	r0, r2
 8007768:	4619      	mov	r1, r3
 800776a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800776e:	2200      	movs	r2, #0
 8007770:	65bb      	str	r3, [r7, #88]	; 0x58
 8007772:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007774:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007778:	f7f9 f944 	bl	8000a04 <__aeabi_uldivmod>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	4613      	mov	r3, r2
 8007782:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007786:	e065      	b.n	8007854 <HAL_RCC_GetSysClockFreq+0x420>
 8007788:	40023800 	.word	0x40023800
 800778c:	00f42400 	.word	0x00f42400
 8007790:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007794:	4b3d      	ldr	r3, [pc, #244]	; (800788c <HAL_RCC_GetSysClockFreq+0x458>)
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	099b      	lsrs	r3, r3, #6
 800779a:	2200      	movs	r2, #0
 800779c:	4618      	mov	r0, r3
 800779e:	4611      	mov	r1, r2
 80077a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80077a4:	653b      	str	r3, [r7, #80]	; 0x50
 80077a6:	2300      	movs	r3, #0
 80077a8:	657b      	str	r3, [r7, #84]	; 0x54
 80077aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80077ae:	4642      	mov	r2, r8
 80077b0:	464b      	mov	r3, r9
 80077b2:	f04f 0000 	mov.w	r0, #0
 80077b6:	f04f 0100 	mov.w	r1, #0
 80077ba:	0159      	lsls	r1, r3, #5
 80077bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077c0:	0150      	lsls	r0, r2, #5
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	4641      	mov	r1, r8
 80077c8:	1a51      	subs	r1, r2, r1
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	4649      	mov	r1, r9
 80077ce:	eb63 0301 	sbc.w	r3, r3, r1
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	f04f 0200 	mov.w	r2, #0
 80077d8:	f04f 0300 	mov.w	r3, #0
 80077dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80077e0:	4659      	mov	r1, fp
 80077e2:	018b      	lsls	r3, r1, #6
 80077e4:	4651      	mov	r1, sl
 80077e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80077ea:	4651      	mov	r1, sl
 80077ec:	018a      	lsls	r2, r1, #6
 80077ee:	4651      	mov	r1, sl
 80077f0:	1a54      	subs	r4, r2, r1
 80077f2:	4659      	mov	r1, fp
 80077f4:	eb63 0501 	sbc.w	r5, r3, r1
 80077f8:	f04f 0200 	mov.w	r2, #0
 80077fc:	f04f 0300 	mov.w	r3, #0
 8007800:	00eb      	lsls	r3, r5, #3
 8007802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007806:	00e2      	lsls	r2, r4, #3
 8007808:	4614      	mov	r4, r2
 800780a:	461d      	mov	r5, r3
 800780c:	4643      	mov	r3, r8
 800780e:	18e3      	adds	r3, r4, r3
 8007810:	603b      	str	r3, [r7, #0]
 8007812:	464b      	mov	r3, r9
 8007814:	eb45 0303 	adc.w	r3, r5, r3
 8007818:	607b      	str	r3, [r7, #4]
 800781a:	f04f 0200 	mov.w	r2, #0
 800781e:	f04f 0300 	mov.w	r3, #0
 8007822:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007826:	4629      	mov	r1, r5
 8007828:	028b      	lsls	r3, r1, #10
 800782a:	4621      	mov	r1, r4
 800782c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007830:	4621      	mov	r1, r4
 8007832:	028a      	lsls	r2, r1, #10
 8007834:	4610      	mov	r0, r2
 8007836:	4619      	mov	r1, r3
 8007838:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800783c:	2200      	movs	r2, #0
 800783e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007840:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007842:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007846:	f7f9 f8dd 	bl	8000a04 <__aeabi_uldivmod>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	4613      	mov	r3, r2
 8007850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007854:	4b0d      	ldr	r3, [pc, #52]	; (800788c <HAL_RCC_GetSysClockFreq+0x458>)
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	0f1b      	lsrs	r3, r3, #28
 800785a:	f003 0307 	and.w	r3, r3, #7
 800785e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007862:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007866:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800786a:	fbb2 f3f3 	udiv	r3, r2, r3
 800786e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007872:	e003      	b.n	800787c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007874:	4b06      	ldr	r3, [pc, #24]	; (8007890 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007876:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800787a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800787c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007880:	4618      	mov	r0, r3
 8007882:	37b8      	adds	r7, #184	; 0xb8
 8007884:	46bd      	mov	sp, r7
 8007886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800788a:	bf00      	nop
 800788c:	40023800 	.word	0x40023800
 8007890:	00f42400 	.word	0x00f42400

08007894 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e28d      	b.n	8007dc2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f000 8083 	beq.w	80079ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80078b4:	4b94      	ldr	r3, [pc, #592]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f003 030c 	and.w	r3, r3, #12
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d019      	beq.n	80078f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80078c0:	4b91      	ldr	r3, [pc, #580]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80078c8:	2b08      	cmp	r3, #8
 80078ca:	d106      	bne.n	80078da <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80078cc:	4b8e      	ldr	r3, [pc, #568]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078d8:	d00c      	beq.n	80078f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078da:	4b8b      	ldr	r3, [pc, #556]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80078e2:	2b0c      	cmp	r3, #12
 80078e4:	d112      	bne.n	800790c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078e6:	4b88      	ldr	r3, [pc, #544]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078f2:	d10b      	bne.n	800790c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078f4:	4b84      	ldr	r3, [pc, #528]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d05b      	beq.n	80079b8 <HAL_RCC_OscConfig+0x124>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d157      	bne.n	80079b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e25a      	b.n	8007dc2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007914:	d106      	bne.n	8007924 <HAL_RCC_OscConfig+0x90>
 8007916:	4b7c      	ldr	r3, [pc, #496]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a7b      	ldr	r2, [pc, #492]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 800791c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007920:	6013      	str	r3, [r2, #0]
 8007922:	e01d      	b.n	8007960 <HAL_RCC_OscConfig+0xcc>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800792c:	d10c      	bne.n	8007948 <HAL_RCC_OscConfig+0xb4>
 800792e:	4b76      	ldr	r3, [pc, #472]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a75      	ldr	r2, [pc, #468]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 8007934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007938:	6013      	str	r3, [r2, #0]
 800793a:	4b73      	ldr	r3, [pc, #460]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a72      	ldr	r2, [pc, #456]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 8007940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007944:	6013      	str	r3, [r2, #0]
 8007946:	e00b      	b.n	8007960 <HAL_RCC_OscConfig+0xcc>
 8007948:	4b6f      	ldr	r3, [pc, #444]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a6e      	ldr	r2, [pc, #440]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 800794e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	4b6c      	ldr	r3, [pc, #432]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a6b      	ldr	r2, [pc, #428]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 800795a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800795e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d013      	beq.n	8007990 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007968:	f7fe f986 	bl	8005c78 <HAL_GetTick>
 800796c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800796e:	e008      	b.n	8007982 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007970:	f7fe f982 	bl	8005c78 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	2b64      	cmp	r3, #100	; 0x64
 800797c:	d901      	bls.n	8007982 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e21f      	b.n	8007dc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007982:	4b61      	ldr	r3, [pc, #388]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d0f0      	beq.n	8007970 <HAL_RCC_OscConfig+0xdc>
 800798e:	e014      	b.n	80079ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007990:	f7fe f972 	bl	8005c78 <HAL_GetTick>
 8007994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007996:	e008      	b.n	80079aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007998:	f7fe f96e 	bl	8005c78 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	2b64      	cmp	r3, #100	; 0x64
 80079a4:	d901      	bls.n	80079aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e20b      	b.n	8007dc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079aa:	4b57      	ldr	r3, [pc, #348]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1f0      	bne.n	8007998 <HAL_RCC_OscConfig+0x104>
 80079b6:	e000      	b.n	80079ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d06f      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80079c6:	4b50      	ldr	r3, [pc, #320]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f003 030c 	and.w	r3, r3, #12
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d017      	beq.n	8007a02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80079d2:	4b4d      	ldr	r3, [pc, #308]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80079da:	2b08      	cmp	r3, #8
 80079dc:	d105      	bne.n	80079ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80079de:	4b4a      	ldr	r3, [pc, #296]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00b      	beq.n	8007a02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079ea:	4b47      	ldr	r3, [pc, #284]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80079f2:	2b0c      	cmp	r3, #12
 80079f4:	d11c      	bne.n	8007a30 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079f6:	4b44      	ldr	r3, [pc, #272]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d116      	bne.n	8007a30 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a02:	4b41      	ldr	r3, [pc, #260]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0302 	and.w	r3, r3, #2
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d005      	beq.n	8007a1a <HAL_RCC_OscConfig+0x186>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d001      	beq.n	8007a1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e1d3      	b.n	8007dc2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a1a:	4b3b      	ldr	r3, [pc, #236]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	4937      	ldr	r1, [pc, #220]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a2e:	e03a      	b.n	8007aa6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d020      	beq.n	8007a7a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a38:	4b34      	ldr	r3, [pc, #208]	; (8007b0c <HAL_RCC_OscConfig+0x278>)
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a3e:	f7fe f91b 	bl	8005c78 <HAL_GetTick>
 8007a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a44:	e008      	b.n	8007a58 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a46:	f7fe f917 	bl	8005c78 <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d901      	bls.n	8007a58 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e1b4      	b.n	8007dc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a58:	4b2b      	ldr	r3, [pc, #172]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0302 	and.w	r3, r3, #2
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d0f0      	beq.n	8007a46 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a64:	4b28      	ldr	r3, [pc, #160]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	00db      	lsls	r3, r3, #3
 8007a72:	4925      	ldr	r1, [pc, #148]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	600b      	str	r3, [r1, #0]
 8007a78:	e015      	b.n	8007aa6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a7a:	4b24      	ldr	r3, [pc, #144]	; (8007b0c <HAL_RCC_OscConfig+0x278>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a80:	f7fe f8fa 	bl	8005c78 <HAL_GetTick>
 8007a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a86:	e008      	b.n	8007a9a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a88:	f7fe f8f6 	bl	8005c78 <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d901      	bls.n	8007a9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e193      	b.n	8007dc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a9a:	4b1b      	ldr	r3, [pc, #108]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1f0      	bne.n	8007a88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0308 	and.w	r3, r3, #8
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d036      	beq.n	8007b20 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d016      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007aba:	4b15      	ldr	r3, [pc, #84]	; (8007b10 <HAL_RCC_OscConfig+0x27c>)
 8007abc:	2201      	movs	r2, #1
 8007abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ac0:	f7fe f8da 	bl	8005c78 <HAL_GetTick>
 8007ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ac6:	e008      	b.n	8007ada <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ac8:	f7fe f8d6 	bl	8005c78 <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d901      	bls.n	8007ada <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e173      	b.n	8007dc2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ada:	4b0b      	ldr	r3, [pc, #44]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 8007adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0f0      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x234>
 8007ae6:	e01b      	b.n	8007b20 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ae8:	4b09      	ldr	r3, [pc, #36]	; (8007b10 <HAL_RCC_OscConfig+0x27c>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aee:	f7fe f8c3 	bl	8005c78 <HAL_GetTick>
 8007af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007af4:	e00e      	b.n	8007b14 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007af6:	f7fe f8bf 	bl	8005c78 <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d907      	bls.n	8007b14 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e15c      	b.n	8007dc2 <HAL_RCC_OscConfig+0x52e>
 8007b08:	40023800 	.word	0x40023800
 8007b0c:	42470000 	.word	0x42470000
 8007b10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b14:	4b8a      	ldr	r3, [pc, #552]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1ea      	bne.n	8007af6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 8097 	beq.w	8007c5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b32:	4b83      	ldr	r3, [pc, #524]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10f      	bne.n	8007b5e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60bb      	str	r3, [r7, #8]
 8007b42:	4b7f      	ldr	r3, [pc, #508]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	4a7e      	ldr	r2, [pc, #504]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8007b4e:	4b7c      	ldr	r3, [pc, #496]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b56:	60bb      	str	r3, [r7, #8]
 8007b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b5e:	4b79      	ldr	r3, [pc, #484]	; (8007d44 <HAL_RCC_OscConfig+0x4b0>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d118      	bne.n	8007b9c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b6a:	4b76      	ldr	r3, [pc, #472]	; (8007d44 <HAL_RCC_OscConfig+0x4b0>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a75      	ldr	r2, [pc, #468]	; (8007d44 <HAL_RCC_OscConfig+0x4b0>)
 8007b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b76:	f7fe f87f 	bl	8005c78 <HAL_GetTick>
 8007b7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b7c:	e008      	b.n	8007b90 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b7e:	f7fe f87b 	bl	8005c78 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d901      	bls.n	8007b90 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e118      	b.n	8007dc2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b90:	4b6c      	ldr	r3, [pc, #432]	; (8007d44 <HAL_RCC_OscConfig+0x4b0>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d0f0      	beq.n	8007b7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d106      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x31e>
 8007ba4:	4b66      	ldr	r3, [pc, #408]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba8:	4a65      	ldr	r2, [pc, #404]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007baa:	f043 0301 	orr.w	r3, r3, #1
 8007bae:	6713      	str	r3, [r2, #112]	; 0x70
 8007bb0:	e01c      	b.n	8007bec <HAL_RCC_OscConfig+0x358>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	2b05      	cmp	r3, #5
 8007bb8:	d10c      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x340>
 8007bba:	4b61      	ldr	r3, [pc, #388]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bbe:	4a60      	ldr	r2, [pc, #384]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007bc0:	f043 0304 	orr.w	r3, r3, #4
 8007bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8007bc6:	4b5e      	ldr	r3, [pc, #376]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bca:	4a5d      	ldr	r2, [pc, #372]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007bcc:	f043 0301 	orr.w	r3, r3, #1
 8007bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8007bd2:	e00b      	b.n	8007bec <HAL_RCC_OscConfig+0x358>
 8007bd4:	4b5a      	ldr	r3, [pc, #360]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd8:	4a59      	ldr	r2, [pc, #356]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007bda:	f023 0301 	bic.w	r3, r3, #1
 8007bde:	6713      	str	r3, [r2, #112]	; 0x70
 8007be0:	4b57      	ldr	r3, [pc, #348]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be4:	4a56      	ldr	r2, [pc, #344]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007be6:	f023 0304 	bic.w	r3, r3, #4
 8007bea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d015      	beq.n	8007c20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bf4:	f7fe f840 	bl	8005c78 <HAL_GetTick>
 8007bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bfa:	e00a      	b.n	8007c12 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bfc:	f7fe f83c 	bl	8005c78 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d901      	bls.n	8007c12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e0d7      	b.n	8007dc2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c12:	4b4b      	ldr	r3, [pc, #300]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d0ee      	beq.n	8007bfc <HAL_RCC_OscConfig+0x368>
 8007c1e:	e014      	b.n	8007c4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c20:	f7fe f82a 	bl	8005c78 <HAL_GetTick>
 8007c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c26:	e00a      	b.n	8007c3e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c28:	f7fe f826 	bl	8005c78 <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d901      	bls.n	8007c3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e0c1      	b.n	8007dc2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c3e:	4b40      	ldr	r3, [pc, #256]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1ee      	bne.n	8007c28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d105      	bne.n	8007c5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c50:	4b3b      	ldr	r3, [pc, #236]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c54:	4a3a      	ldr	r2, [pc, #232]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f000 80ad 	beq.w	8007dc0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c66:	4b36      	ldr	r3, [pc, #216]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f003 030c 	and.w	r3, r3, #12
 8007c6e:	2b08      	cmp	r3, #8
 8007c70:	d060      	beq.n	8007d34 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d145      	bne.n	8007d06 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c7a:	4b33      	ldr	r3, [pc, #204]	; (8007d48 <HAL_RCC_OscConfig+0x4b4>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c80:	f7fd fffa 	bl	8005c78 <HAL_GetTick>
 8007c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c86:	e008      	b.n	8007c9a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c88:	f7fd fff6 	bl	8005c78 <HAL_GetTick>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d901      	bls.n	8007c9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e093      	b.n	8007dc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c9a:	4b29      	ldr	r3, [pc, #164]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1f0      	bne.n	8007c88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	69da      	ldr	r2, [r3, #28]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	019b      	lsls	r3, r3, #6
 8007cb6:	431a      	orrs	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cbc:	085b      	lsrs	r3, r3, #1
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	041b      	lsls	r3, r3, #16
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc8:	061b      	lsls	r3, r3, #24
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd0:	071b      	lsls	r3, r3, #28
 8007cd2:	491b      	ldr	r1, [pc, #108]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007cd8:	4b1b      	ldr	r3, [pc, #108]	; (8007d48 <HAL_RCC_OscConfig+0x4b4>)
 8007cda:	2201      	movs	r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cde:	f7fd ffcb 	bl	8005c78 <HAL_GetTick>
 8007ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ce4:	e008      	b.n	8007cf8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ce6:	f7fd ffc7 	bl	8005c78 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d901      	bls.n	8007cf8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e064      	b.n	8007dc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cf8:	4b11      	ldr	r3, [pc, #68]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d0f0      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x452>
 8007d04:	e05c      	b.n	8007dc0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d06:	4b10      	ldr	r3, [pc, #64]	; (8007d48 <HAL_RCC_OscConfig+0x4b4>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d0c:	f7fd ffb4 	bl	8005c78 <HAL_GetTick>
 8007d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d12:	e008      	b.n	8007d26 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d14:	f7fd ffb0 	bl	8005c78 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	d901      	bls.n	8007d26 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e04d      	b.n	8007dc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d26:	4b06      	ldr	r3, [pc, #24]	; (8007d40 <HAL_RCC_OscConfig+0x4ac>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1f0      	bne.n	8007d14 <HAL_RCC_OscConfig+0x480>
 8007d32:	e045      	b.n	8007dc0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d107      	bne.n	8007d4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e040      	b.n	8007dc2 <HAL_RCC_OscConfig+0x52e>
 8007d40:	40023800 	.word	0x40023800
 8007d44:	40007000 	.word	0x40007000
 8007d48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007d4c:	4b1f      	ldr	r3, [pc, #124]	; (8007dcc <HAL_RCC_OscConfig+0x538>)
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d030      	beq.n	8007dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d129      	bne.n	8007dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d122      	bne.n	8007dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d119      	bne.n	8007dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d92:	085b      	lsrs	r3, r3, #1
 8007d94:	3b01      	subs	r3, #1
 8007d96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d10f      	bne.n	8007dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d107      	bne.n	8007dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d001      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e000      	b.n	8007dc2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3718      	adds	r7, #24
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	40023800 	.word	0x40023800

08007dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d101      	bne.n	8007de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e041      	b.n	8007e66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d106      	bne.n	8007dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7fd fb50 	bl	800549c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	f000 fba8 	bl	8008564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d001      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e04e      	b.n	8007f26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68da      	ldr	r2, [r3, #12]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0201 	orr.w	r2, r2, #1
 8007e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a23      	ldr	r2, [pc, #140]	; (8007f34 <HAL_TIM_Base_Start_IT+0xc4>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d022      	beq.n	8007ef0 <HAL_TIM_Base_Start_IT+0x80>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eb2:	d01d      	beq.n	8007ef0 <HAL_TIM_Base_Start_IT+0x80>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a1f      	ldr	r2, [pc, #124]	; (8007f38 <HAL_TIM_Base_Start_IT+0xc8>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d018      	beq.n	8007ef0 <HAL_TIM_Base_Start_IT+0x80>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a1e      	ldr	r2, [pc, #120]	; (8007f3c <HAL_TIM_Base_Start_IT+0xcc>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d013      	beq.n	8007ef0 <HAL_TIM_Base_Start_IT+0x80>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a1c      	ldr	r2, [pc, #112]	; (8007f40 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d00e      	beq.n	8007ef0 <HAL_TIM_Base_Start_IT+0x80>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a1b      	ldr	r2, [pc, #108]	; (8007f44 <HAL_TIM_Base_Start_IT+0xd4>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d009      	beq.n	8007ef0 <HAL_TIM_Base_Start_IT+0x80>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a19      	ldr	r2, [pc, #100]	; (8007f48 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d004      	beq.n	8007ef0 <HAL_TIM_Base_Start_IT+0x80>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a18      	ldr	r2, [pc, #96]	; (8007f4c <HAL_TIM_Base_Start_IT+0xdc>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d111      	bne.n	8007f14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f003 0307 	and.w	r3, r3, #7
 8007efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2b06      	cmp	r3, #6
 8007f00:	d010      	beq.n	8007f24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f042 0201 	orr.w	r2, r2, #1
 8007f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f12:	e007      	b.n	8007f24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f042 0201 	orr.w	r2, r2, #1
 8007f22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	40010000 	.word	0x40010000
 8007f38:	40000400 	.word	0x40000400
 8007f3c:	40000800 	.word	0x40000800
 8007f40:	40000c00 	.word	0x40000c00
 8007f44:	40010400 	.word	0x40010400
 8007f48:	40014000 	.word	0x40014000
 8007f4c:	40001800 	.word	0x40001800

08007f50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e041      	b.n	8007fe6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d106      	bne.n	8007f7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7fd fa5a 	bl	8005430 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4610      	mov	r0, r2
 8007f90:	f000 fae8 	bl	8008564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
	...

08007ff0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d109      	bne.n	8008014 <HAL_TIM_PWM_Start+0x24>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b01      	cmp	r3, #1
 800800a:	bf14      	ite	ne
 800800c:	2301      	movne	r3, #1
 800800e:	2300      	moveq	r3, #0
 8008010:	b2db      	uxtb	r3, r3
 8008012:	e022      	b.n	800805a <HAL_TIM_PWM_Start+0x6a>
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2b04      	cmp	r3, #4
 8008018:	d109      	bne.n	800802e <HAL_TIM_PWM_Start+0x3e>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b01      	cmp	r3, #1
 8008024:	bf14      	ite	ne
 8008026:	2301      	movne	r3, #1
 8008028:	2300      	moveq	r3, #0
 800802a:	b2db      	uxtb	r3, r3
 800802c:	e015      	b.n	800805a <HAL_TIM_PWM_Start+0x6a>
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b08      	cmp	r3, #8
 8008032:	d109      	bne.n	8008048 <HAL_TIM_PWM_Start+0x58>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b01      	cmp	r3, #1
 800803e:	bf14      	ite	ne
 8008040:	2301      	movne	r3, #1
 8008042:	2300      	moveq	r3, #0
 8008044:	b2db      	uxtb	r3, r3
 8008046:	e008      	b.n	800805a <HAL_TIM_PWM_Start+0x6a>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b01      	cmp	r3, #1
 8008052:	bf14      	ite	ne
 8008054:	2301      	movne	r3, #1
 8008056:	2300      	moveq	r3, #0
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e07c      	b.n	800815c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d104      	bne.n	8008072 <HAL_TIM_PWM_Start+0x82>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008070:	e013      	b.n	800809a <HAL_TIM_PWM_Start+0xaa>
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b04      	cmp	r3, #4
 8008076:	d104      	bne.n	8008082 <HAL_TIM_PWM_Start+0x92>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2202      	movs	r2, #2
 800807c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008080:	e00b      	b.n	800809a <HAL_TIM_PWM_Start+0xaa>
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b08      	cmp	r3, #8
 8008086:	d104      	bne.n	8008092 <HAL_TIM_PWM_Start+0xa2>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2202      	movs	r2, #2
 800808c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008090:	e003      	b.n	800809a <HAL_TIM_PWM_Start+0xaa>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2202      	movs	r2, #2
 8008096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2201      	movs	r2, #1
 80080a0:	6839      	ldr	r1, [r7, #0]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 fcae 	bl	8008a04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a2d      	ldr	r2, [pc, #180]	; (8008164 <HAL_TIM_PWM_Start+0x174>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d004      	beq.n	80080bc <HAL_TIM_PWM_Start+0xcc>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a2c      	ldr	r2, [pc, #176]	; (8008168 <HAL_TIM_PWM_Start+0x178>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d101      	bne.n	80080c0 <HAL_TIM_PWM_Start+0xd0>
 80080bc:	2301      	movs	r3, #1
 80080be:	e000      	b.n	80080c2 <HAL_TIM_PWM_Start+0xd2>
 80080c0:	2300      	movs	r3, #0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a22      	ldr	r2, [pc, #136]	; (8008164 <HAL_TIM_PWM_Start+0x174>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d022      	beq.n	8008126 <HAL_TIM_PWM_Start+0x136>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e8:	d01d      	beq.n	8008126 <HAL_TIM_PWM_Start+0x136>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1f      	ldr	r2, [pc, #124]	; (800816c <HAL_TIM_PWM_Start+0x17c>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d018      	beq.n	8008126 <HAL_TIM_PWM_Start+0x136>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a1d      	ldr	r2, [pc, #116]	; (8008170 <HAL_TIM_PWM_Start+0x180>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d013      	beq.n	8008126 <HAL_TIM_PWM_Start+0x136>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a1c      	ldr	r2, [pc, #112]	; (8008174 <HAL_TIM_PWM_Start+0x184>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d00e      	beq.n	8008126 <HAL_TIM_PWM_Start+0x136>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a16      	ldr	r2, [pc, #88]	; (8008168 <HAL_TIM_PWM_Start+0x178>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d009      	beq.n	8008126 <HAL_TIM_PWM_Start+0x136>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a18      	ldr	r2, [pc, #96]	; (8008178 <HAL_TIM_PWM_Start+0x188>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d004      	beq.n	8008126 <HAL_TIM_PWM_Start+0x136>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a16      	ldr	r2, [pc, #88]	; (800817c <HAL_TIM_PWM_Start+0x18c>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d111      	bne.n	800814a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f003 0307 	and.w	r3, r3, #7
 8008130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2b06      	cmp	r3, #6
 8008136:	d010      	beq.n	800815a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f042 0201 	orr.w	r2, r2, #1
 8008146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008148:	e007      	b.n	800815a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f042 0201 	orr.w	r2, r2, #1
 8008158:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	40010000 	.word	0x40010000
 8008168:	40010400 	.word	0x40010400
 800816c:	40000400 	.word	0x40000400
 8008170:	40000800 	.word	0x40000800
 8008174:	40000c00 	.word	0x40000c00
 8008178:	40014000 	.word	0x40014000
 800817c:	40001800 	.word	0x40001800

08008180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b02      	cmp	r3, #2
 8008194:	d122      	bne.n	80081dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f003 0302 	and.w	r3, r3, #2
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d11b      	bne.n	80081dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f06f 0202 	mvn.w	r2, #2
 80081ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	f003 0303 	and.w	r3, r3, #3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f9b0 	bl	8008528 <HAL_TIM_IC_CaptureCallback>
 80081c8:	e005      	b.n	80081d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f9a2 	bl	8008514 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f9b3 	bl	800853c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	f003 0304 	and.w	r3, r3, #4
 80081e6:	2b04      	cmp	r3, #4
 80081e8:	d122      	bne.n	8008230 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f003 0304 	and.w	r3, r3, #4
 80081f4:	2b04      	cmp	r3, #4
 80081f6:	d11b      	bne.n	8008230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f06f 0204 	mvn.w	r2, #4
 8008200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2202      	movs	r2, #2
 8008206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f986 	bl	8008528 <HAL_TIM_IC_CaptureCallback>
 800821c:	e005      	b.n	800822a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f978 	bl	8008514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f989 	bl	800853c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	f003 0308 	and.w	r3, r3, #8
 800823a:	2b08      	cmp	r3, #8
 800823c:	d122      	bne.n	8008284 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	f003 0308 	and.w	r3, r3, #8
 8008248:	2b08      	cmp	r3, #8
 800824a:	d11b      	bne.n	8008284 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f06f 0208 	mvn.w	r2, #8
 8008254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2204      	movs	r2, #4
 800825a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	69db      	ldr	r3, [r3, #28]
 8008262:	f003 0303 	and.w	r3, r3, #3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f95c 	bl	8008528 <HAL_TIM_IC_CaptureCallback>
 8008270:	e005      	b.n	800827e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f94e 	bl	8008514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f95f 	bl	800853c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	f003 0310 	and.w	r3, r3, #16
 800828e:	2b10      	cmp	r3, #16
 8008290:	d122      	bne.n	80082d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	f003 0310 	and.w	r3, r3, #16
 800829c:	2b10      	cmp	r3, #16
 800829e:	d11b      	bne.n	80082d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f06f 0210 	mvn.w	r2, #16
 80082a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2208      	movs	r2, #8
 80082ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d003      	beq.n	80082c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f932 	bl	8008528 <HAL_TIM_IC_CaptureCallback>
 80082c4:	e005      	b.n	80082d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f924 	bl	8008514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f935 	bl	800853c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d10e      	bne.n	8008304 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	f003 0301 	and.w	r3, r3, #1
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d107      	bne.n	8008304 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f06f 0201 	mvn.w	r2, #1
 80082fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7fc fbd4 	bl	8004aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800830e:	2b80      	cmp	r3, #128	; 0x80
 8008310:	d10e      	bne.n	8008330 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800831c:	2b80      	cmp	r3, #128	; 0x80
 800831e:	d107      	bne.n	8008330 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fc16 	bl	8008b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833a:	2b40      	cmp	r3, #64	; 0x40
 800833c:	d10e      	bne.n	800835c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008348:	2b40      	cmp	r3, #64	; 0x40
 800834a:	d107      	bne.n	800835c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f8fa 	bl	8008550 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	f003 0320 	and.w	r3, r3, #32
 8008366:	2b20      	cmp	r3, #32
 8008368:	d10e      	bne.n	8008388 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f003 0320 	and.w	r3, r3, #32
 8008374:	2b20      	cmp	r3, #32
 8008376:	d107      	bne.n	8008388 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f06f 0220 	mvn.w	r2, #32
 8008380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fbe0 	bl	8008b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d101      	bne.n	80083ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083aa:	2302      	movs	r3, #2
 80083ac:	e0ae      	b.n	800850c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b0c      	cmp	r3, #12
 80083ba:	f200 809f 	bhi.w	80084fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80083be:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c4:	080083f9 	.word	0x080083f9
 80083c8:	080084fd 	.word	0x080084fd
 80083cc:	080084fd 	.word	0x080084fd
 80083d0:	080084fd 	.word	0x080084fd
 80083d4:	08008439 	.word	0x08008439
 80083d8:	080084fd 	.word	0x080084fd
 80083dc:	080084fd 	.word	0x080084fd
 80083e0:	080084fd 	.word	0x080084fd
 80083e4:	0800847b 	.word	0x0800847b
 80083e8:	080084fd 	.word	0x080084fd
 80083ec:	080084fd 	.word	0x080084fd
 80083f0:	080084fd 	.word	0x080084fd
 80083f4:	080084bb 	.word	0x080084bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68b9      	ldr	r1, [r7, #8]
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 f950 	bl	80086a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	699a      	ldr	r2, [r3, #24]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f042 0208 	orr.w	r2, r2, #8
 8008412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	699a      	ldr	r2, [r3, #24]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f022 0204 	bic.w	r2, r2, #4
 8008422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6999      	ldr	r1, [r3, #24]
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	691a      	ldr	r2, [r3, #16]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	619a      	str	r2, [r3, #24]
      break;
 8008436:	e064      	b.n	8008502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68b9      	ldr	r1, [r7, #8]
 800843e:	4618      	mov	r0, r3
 8008440:	f000 f9a0 	bl	8008784 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	699a      	ldr	r2, [r3, #24]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	699a      	ldr	r2, [r3, #24]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6999      	ldr	r1, [r3, #24]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	021a      	lsls	r2, r3, #8
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	430a      	orrs	r2, r1
 8008476:	619a      	str	r2, [r3, #24]
      break;
 8008478:	e043      	b.n	8008502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68b9      	ldr	r1, [r7, #8]
 8008480:	4618      	mov	r0, r3
 8008482:	f000 f9f5 	bl	8008870 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	69da      	ldr	r2, [r3, #28]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f042 0208 	orr.w	r2, r2, #8
 8008494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	69da      	ldr	r2, [r3, #28]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 0204 	bic.w	r2, r2, #4
 80084a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	69d9      	ldr	r1, [r3, #28]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	691a      	ldr	r2, [r3, #16]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	430a      	orrs	r2, r1
 80084b6:	61da      	str	r2, [r3, #28]
      break;
 80084b8:	e023      	b.n	8008502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68b9      	ldr	r1, [r7, #8]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 fa49 	bl	8008958 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	69da      	ldr	r2, [r3, #28]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	69da      	ldr	r2, [r3, #28]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	69d9      	ldr	r1, [r3, #28]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	021a      	lsls	r2, r3, #8
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	430a      	orrs	r2, r1
 80084f8:	61da      	str	r2, [r3, #28]
      break;
 80084fa:	e002      	b.n	8008502 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008500:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800850a:	7dfb      	ldrb	r3, [r7, #23]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3718      	adds	r7, #24
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a40      	ldr	r2, [pc, #256]	; (8008678 <TIM_Base_SetConfig+0x114>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d013      	beq.n	80085a4 <TIM_Base_SetConfig+0x40>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008582:	d00f      	beq.n	80085a4 <TIM_Base_SetConfig+0x40>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a3d      	ldr	r2, [pc, #244]	; (800867c <TIM_Base_SetConfig+0x118>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d00b      	beq.n	80085a4 <TIM_Base_SetConfig+0x40>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a3c      	ldr	r2, [pc, #240]	; (8008680 <TIM_Base_SetConfig+0x11c>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d007      	beq.n	80085a4 <TIM_Base_SetConfig+0x40>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a3b      	ldr	r2, [pc, #236]	; (8008684 <TIM_Base_SetConfig+0x120>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d003      	beq.n	80085a4 <TIM_Base_SetConfig+0x40>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a3a      	ldr	r2, [pc, #232]	; (8008688 <TIM_Base_SetConfig+0x124>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d108      	bne.n	80085b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a2f      	ldr	r2, [pc, #188]	; (8008678 <TIM_Base_SetConfig+0x114>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d02b      	beq.n	8008616 <TIM_Base_SetConfig+0xb2>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c4:	d027      	beq.n	8008616 <TIM_Base_SetConfig+0xb2>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a2c      	ldr	r2, [pc, #176]	; (800867c <TIM_Base_SetConfig+0x118>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d023      	beq.n	8008616 <TIM_Base_SetConfig+0xb2>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a2b      	ldr	r2, [pc, #172]	; (8008680 <TIM_Base_SetConfig+0x11c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d01f      	beq.n	8008616 <TIM_Base_SetConfig+0xb2>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a2a      	ldr	r2, [pc, #168]	; (8008684 <TIM_Base_SetConfig+0x120>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d01b      	beq.n	8008616 <TIM_Base_SetConfig+0xb2>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a29      	ldr	r2, [pc, #164]	; (8008688 <TIM_Base_SetConfig+0x124>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d017      	beq.n	8008616 <TIM_Base_SetConfig+0xb2>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a28      	ldr	r2, [pc, #160]	; (800868c <TIM_Base_SetConfig+0x128>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d013      	beq.n	8008616 <TIM_Base_SetConfig+0xb2>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a27      	ldr	r2, [pc, #156]	; (8008690 <TIM_Base_SetConfig+0x12c>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d00f      	beq.n	8008616 <TIM_Base_SetConfig+0xb2>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a26      	ldr	r2, [pc, #152]	; (8008694 <TIM_Base_SetConfig+0x130>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d00b      	beq.n	8008616 <TIM_Base_SetConfig+0xb2>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a25      	ldr	r2, [pc, #148]	; (8008698 <TIM_Base_SetConfig+0x134>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d007      	beq.n	8008616 <TIM_Base_SetConfig+0xb2>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a24      	ldr	r2, [pc, #144]	; (800869c <TIM_Base_SetConfig+0x138>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d003      	beq.n	8008616 <TIM_Base_SetConfig+0xb2>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a23      	ldr	r2, [pc, #140]	; (80086a0 <TIM_Base_SetConfig+0x13c>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d108      	bne.n	8008628 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800861c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	4313      	orrs	r3, r2
 8008626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	4313      	orrs	r3, r2
 8008634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	689a      	ldr	r2, [r3, #8]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a0a      	ldr	r2, [pc, #40]	; (8008678 <TIM_Base_SetConfig+0x114>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d003      	beq.n	800865c <TIM_Base_SetConfig+0xf8>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a0c      	ldr	r2, [pc, #48]	; (8008688 <TIM_Base_SetConfig+0x124>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d103      	bne.n	8008664 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	691a      	ldr	r2, [r3, #16]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	615a      	str	r2, [r3, #20]
}
 800866a:	bf00      	nop
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	40010000 	.word	0x40010000
 800867c:	40000400 	.word	0x40000400
 8008680:	40000800 	.word	0x40000800
 8008684:	40000c00 	.word	0x40000c00
 8008688:	40010400 	.word	0x40010400
 800868c:	40014000 	.word	0x40014000
 8008690:	40014400 	.word	0x40014400
 8008694:	40014800 	.word	0x40014800
 8008698:	40001800 	.word	0x40001800
 800869c:	40001c00 	.word	0x40001c00
 80086a0:	40002000 	.word	0x40002000

080086a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	f023 0201 	bic.w	r2, r3, #1
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f023 0303 	bic.w	r3, r3, #3
 80086da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f023 0302 	bic.w	r3, r3, #2
 80086ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a20      	ldr	r2, [pc, #128]	; (800877c <TIM_OC1_SetConfig+0xd8>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d003      	beq.n	8008708 <TIM_OC1_SetConfig+0x64>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a1f      	ldr	r2, [pc, #124]	; (8008780 <TIM_OC1_SetConfig+0xdc>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d10c      	bne.n	8008722 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	f023 0308 	bic.w	r3, r3, #8
 800870e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	697a      	ldr	r2, [r7, #20]
 8008716:	4313      	orrs	r3, r2
 8008718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f023 0304 	bic.w	r3, r3, #4
 8008720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a15      	ldr	r2, [pc, #84]	; (800877c <TIM_OC1_SetConfig+0xd8>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d003      	beq.n	8008732 <TIM_OC1_SetConfig+0x8e>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a14      	ldr	r2, [pc, #80]	; (8008780 <TIM_OC1_SetConfig+0xdc>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d111      	bne.n	8008756 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	4313      	orrs	r3, r2
 800874a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	4313      	orrs	r3, r2
 8008754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	621a      	str	r2, [r3, #32]
}
 8008770:	bf00      	nop
 8008772:	371c      	adds	r7, #28
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	40010000 	.word	0x40010000
 8008780:	40010400 	.word	0x40010400

08008784 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008784:	b480      	push	{r7}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	f023 0210 	bic.w	r2, r3, #16
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	021b      	lsls	r3, r3, #8
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f023 0320 	bic.w	r3, r3, #32
 80087ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	011b      	lsls	r3, r3, #4
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	4313      	orrs	r3, r2
 80087da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a22      	ldr	r2, [pc, #136]	; (8008868 <TIM_OC2_SetConfig+0xe4>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d003      	beq.n	80087ec <TIM_OC2_SetConfig+0x68>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a21      	ldr	r2, [pc, #132]	; (800886c <TIM_OC2_SetConfig+0xe8>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d10d      	bne.n	8008808 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	011b      	lsls	r3, r3, #4
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008806:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a17      	ldr	r2, [pc, #92]	; (8008868 <TIM_OC2_SetConfig+0xe4>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d003      	beq.n	8008818 <TIM_OC2_SetConfig+0x94>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a16      	ldr	r2, [pc, #88]	; (800886c <TIM_OC2_SetConfig+0xe8>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d113      	bne.n	8008840 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800881e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008826:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	4313      	orrs	r3, r2
 8008832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	4313      	orrs	r3, r2
 800883e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	621a      	str	r2, [r3, #32]
}
 800885a:	bf00      	nop
 800885c:	371c      	adds	r7, #28
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	40010000 	.word	0x40010000
 800886c:	40010400 	.word	0x40010400

08008870 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008870:	b480      	push	{r7}
 8008872:	b087      	sub	sp, #28
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800889e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f023 0303 	bic.w	r3, r3, #3
 80088a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	021b      	lsls	r3, r3, #8
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a21      	ldr	r2, [pc, #132]	; (8008950 <TIM_OC3_SetConfig+0xe0>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d003      	beq.n	80088d6 <TIM_OC3_SetConfig+0x66>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a20      	ldr	r2, [pc, #128]	; (8008954 <TIM_OC3_SetConfig+0xe4>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d10d      	bne.n	80088f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	021b      	lsls	r3, r3, #8
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a16      	ldr	r2, [pc, #88]	; (8008950 <TIM_OC3_SetConfig+0xe0>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d003      	beq.n	8008902 <TIM_OC3_SetConfig+0x92>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a15      	ldr	r2, [pc, #84]	; (8008954 <TIM_OC3_SetConfig+0xe4>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d113      	bne.n	800892a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	011b      	lsls	r3, r3, #4
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	4313      	orrs	r3, r2
 800891c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	011b      	lsls	r3, r3, #4
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	4313      	orrs	r3, r2
 8008928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	685a      	ldr	r2, [r3, #4]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	621a      	str	r2, [r3, #32]
}
 8008944:	bf00      	nop
 8008946:	371c      	adds	r7, #28
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	40010000 	.word	0x40010000
 8008954:	40010400 	.word	0x40010400

08008958 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008958:	b480      	push	{r7}
 800895a:	b087      	sub	sp, #28
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a1b      	ldr	r3, [r3, #32]
 8008972:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	69db      	ldr	r3, [r3, #28]
 800897e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800898e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	021b      	lsls	r3, r3, #8
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	4313      	orrs	r3, r2
 800899a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	031b      	lsls	r3, r3, #12
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a12      	ldr	r2, [pc, #72]	; (80089fc <TIM_OC4_SetConfig+0xa4>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d003      	beq.n	80089c0 <TIM_OC4_SetConfig+0x68>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a11      	ldr	r2, [pc, #68]	; (8008a00 <TIM_OC4_SetConfig+0xa8>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d109      	bne.n	80089d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	019b      	lsls	r3, r3, #6
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	685a      	ldr	r2, [r3, #4]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	693a      	ldr	r2, [r7, #16]
 80089ec:	621a      	str	r2, [r3, #32]
}
 80089ee:	bf00      	nop
 80089f0:	371c      	adds	r7, #28
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	40010000 	.word	0x40010000
 8008a00:	40010400 	.word	0x40010400

08008a04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b087      	sub	sp, #28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f003 031f 	and.w	r3, r3, #31
 8008a16:	2201      	movs	r2, #1
 8008a18:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6a1a      	ldr	r2, [r3, #32]
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	43db      	mvns	r3, r3
 8008a26:	401a      	ands	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6a1a      	ldr	r2, [r3, #32]
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	f003 031f 	and.w	r3, r3, #31
 8008a36:	6879      	ldr	r1, [r7, #4]
 8008a38:	fa01 f303 	lsl.w	r3, r1, r3
 8008a3c:	431a      	orrs	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	621a      	str	r2, [r3, #32]
}
 8008a42:	bf00      	nop
 8008a44:	371c      	adds	r7, #28
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
	...

08008a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d101      	bne.n	8008a68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a64:	2302      	movs	r3, #2
 8008a66:	e05a      	b.n	8008b1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a21      	ldr	r2, [pc, #132]	; (8008b2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d022      	beq.n	8008af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ab4:	d01d      	beq.n	8008af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a1d      	ldr	r2, [pc, #116]	; (8008b30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d018      	beq.n	8008af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a1b      	ldr	r2, [pc, #108]	; (8008b34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d013      	beq.n	8008af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a1a      	ldr	r2, [pc, #104]	; (8008b38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d00e      	beq.n	8008af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a18      	ldr	r2, [pc, #96]	; (8008b3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d009      	beq.n	8008af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a17      	ldr	r2, [pc, #92]	; (8008b40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d004      	beq.n	8008af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a15      	ldr	r2, [pc, #84]	; (8008b44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d10c      	bne.n	8008b0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008af8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3714      	adds	r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	40010000 	.word	0x40010000
 8008b30:	40000400 	.word	0x40000400
 8008b34:	40000800 	.word	0x40000800
 8008b38:	40000c00 	.word	0x40000c00
 8008b3c:	40010400 	.word	0x40010400
 8008b40:	40014000 	.word	0x40014000
 8008b44:	40001800 	.word	0x40001800

08008b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e03f      	b.n	8008c02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d106      	bne.n	8008b9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7fc fdc2 	bl	8005720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2224      	movs	r2, #36	; 0x24
 8008ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68da      	ldr	r2, [r3, #12]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f001 f871 	bl	8009c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	691a      	ldr	r2, [r3, #16]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	695a      	ldr	r2, [r3, #20]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68da      	ldr	r2, [r3, #12]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008be8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2220      	movs	r2, #32
 8008bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2220      	movs	r2, #32
 8008bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3708      	adds	r7, #8
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b082      	sub	sp, #8
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e021      	b.n	8008c60 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2224      	movs	r2, #36	; 0x24
 8008c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68da      	ldr	r2, [r3, #12]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c32:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7fc ff29 	bl	8005a8c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	; 0x28
 8008c6c:	af02      	add	r7, sp, #8
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	603b      	str	r3, [r7, #0]
 8008c74:	4613      	mov	r3, r2
 8008c76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b20      	cmp	r3, #32
 8008c86:	d17c      	bne.n	8008d82 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d002      	beq.n	8008c94 <HAL_UART_Transmit+0x2c>
 8008c8e:	88fb      	ldrh	r3, [r7, #6]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	e075      	b.n	8008d84 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d101      	bne.n	8008ca6 <HAL_UART_Transmit+0x3e>
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	e06e      	b.n	8008d84 <HAL_UART_Transmit+0x11c>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2221      	movs	r2, #33	; 0x21
 8008cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cbc:	f7fc ffdc 	bl	8005c78 <HAL_GetTick>
 8008cc0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	88fa      	ldrh	r2, [r7, #6]
 8008cc6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	88fa      	ldrh	r2, [r7, #6]
 8008ccc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cd6:	d108      	bne.n	8008cea <HAL_UART_Transmit+0x82>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d104      	bne.n	8008cea <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	61bb      	str	r3, [r7, #24]
 8008ce8:	e003      	b.n	8008cf2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008cfa:	e02a      	b.n	8008d52 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	2200      	movs	r2, #0
 8008d04:	2180      	movs	r1, #128	; 0x80
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f000 fcf9 	bl	80096fe <UART_WaitOnFlagUntilTimeout>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e036      	b.n	8008d84 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10b      	bne.n	8008d34 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	881b      	ldrh	r3, [r3, #0]
 8008d20:	461a      	mov	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d2a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	3302      	adds	r3, #2
 8008d30:	61bb      	str	r3, [r7, #24]
 8008d32:	e007      	b.n	8008d44 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	781a      	ldrb	r2, [r3, #0]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	3301      	adds	r3, #1
 8008d42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1cf      	bne.n	8008cfc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	2200      	movs	r2, #0
 8008d64:	2140      	movs	r1, #64	; 0x40
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 fcc9 	bl	80096fe <UART_WaitOnFlagUntilTimeout>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e006      	b.n	8008d84 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2220      	movs	r2, #32
 8008d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e000      	b.n	8008d84 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008d82:	2302      	movs	r3, #2
  }
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3720      	adds	r7, #32
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b08c      	sub	sp, #48	; 0x30
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	4613      	mov	r3, r2
 8008d98:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b20      	cmp	r3, #32
 8008da4:	d165      	bne.n	8008e72 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <HAL_UART_Transmit_DMA+0x26>
 8008dac:	88fb      	ldrh	r3, [r7, #6]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d101      	bne.n	8008db6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e05e      	b.n	8008e74 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d101      	bne.n	8008dc4 <HAL_UART_Transmit_DMA+0x38>
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	e057      	b.n	8008e74 <HAL_UART_Transmit_DMA+0xe8>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	88fa      	ldrh	r2, [r7, #6]
 8008dd6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	88fa      	ldrh	r2, [r7, #6]
 8008ddc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2221      	movs	r2, #33	; 0x21
 8008de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df0:	4a22      	ldr	r2, [pc, #136]	; (8008e7c <HAL_UART_Transmit_DMA+0xf0>)
 8008df2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df8:	4a21      	ldr	r2, [pc, #132]	; (8008e80 <HAL_UART_Transmit_DMA+0xf4>)
 8008dfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e00:	4a20      	ldr	r2, [pc, #128]	; (8008e84 <HAL_UART_Transmit_DMA+0xf8>)
 8008e02:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e08:	2200      	movs	r2, #0
 8008e0a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008e0c:	f107 0308 	add.w	r3, r7, #8
 8008e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e18:	6819      	ldr	r1, [r3, #0]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3304      	adds	r3, #4
 8008e20:	461a      	mov	r2, r3
 8008e22:	88fb      	ldrh	r3, [r7, #6]
 8008e24:	f7fd fbf6 	bl	8006614 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e30:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3314      	adds	r3, #20
 8008e40:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	e853 3f00 	ldrex	r3, [r3]
 8008e48:	617b      	str	r3, [r7, #20]
   return(result);
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	3314      	adds	r3, #20
 8008e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e5a:	627a      	str	r2, [r7, #36]	; 0x24
 8008e5c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5e:	6a39      	ldr	r1, [r7, #32]
 8008e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e62:	e841 2300 	strex	r3, r2, [r1]
 8008e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1e5      	bne.n	8008e3a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	e000      	b.n	8008e74 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008e72:	2302      	movs	r3, #2
  }
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3730      	adds	r7, #48	; 0x30
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	08009459 	.word	0x08009459
 8008e80:	080094f3 	.word	0x080094f3
 8008e84:	0800966b 	.word	0x0800966b

08008e88 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	4613      	mov	r3, r2
 8008e94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b20      	cmp	r3, #32
 8008ea0:	d11d      	bne.n	8008ede <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <HAL_UART_Receive_DMA+0x26>
 8008ea8:	88fb      	ldrh	r3, [r7, #6]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e016      	b.n	8008ee0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d101      	bne.n	8008ec0 <HAL_UART_Receive_DMA+0x38>
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	e00f      	b.n	8008ee0 <HAL_UART_Receive_DMA+0x58>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008ece:	88fb      	ldrh	r3, [r7, #6]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f000 fc81 	bl	80097dc <UART_Start_Receive_DMA>
 8008eda:	4603      	mov	r3, r0
 8008edc:	e000      	b.n	8008ee0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008ede:	2302      	movs	r3, #2
  }
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b0ba      	sub	sp, #232	; 0xe8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f1e:	f003 030f 	and.w	r3, r3, #15
 8008f22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10f      	bne.n	8008f4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f32:	f003 0320 	and.w	r3, r3, #32
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d009      	beq.n	8008f4e <HAL_UART_IRQHandler+0x66>
 8008f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f3e:	f003 0320 	and.w	r3, r3, #32
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fded 	bl	8009b26 <UART_Receive_IT>
      return;
 8008f4c:	e256      	b.n	80093fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f000 80de 	beq.w	8009114 <HAL_UART_IRQHandler+0x22c>
 8008f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d106      	bne.n	8008f72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 80d1 	beq.w	8009114 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00b      	beq.n	8008f96 <HAL_UART_IRQHandler+0xae>
 8008f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d005      	beq.n	8008f96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	f043 0201 	orr.w	r2, r3, #1
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f9a:	f003 0304 	and.w	r3, r3, #4
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00b      	beq.n	8008fba <HAL_UART_IRQHandler+0xd2>
 8008fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d005      	beq.n	8008fba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb2:	f043 0202 	orr.w	r2, r3, #2
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fbe:	f003 0302 	and.w	r3, r3, #2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00b      	beq.n	8008fde <HAL_UART_IRQHandler+0xf6>
 8008fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd6:	f043 0204 	orr.w	r2, r3, #4
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe2:	f003 0308 	and.w	r3, r3, #8
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d011      	beq.n	800900e <HAL_UART_IRQHandler+0x126>
 8008fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fee:	f003 0320 	and.w	r3, r3, #32
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d105      	bne.n	8009002 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d005      	beq.n	800900e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009006:	f043 0208 	orr.w	r2, r3, #8
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 81ed 	beq.w	80093f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800901c:	f003 0320 	and.w	r3, r3, #32
 8009020:	2b00      	cmp	r3, #0
 8009022:	d008      	beq.n	8009036 <HAL_UART_IRQHandler+0x14e>
 8009024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009028:	f003 0320 	and.w	r3, r3, #32
 800902c:	2b00      	cmp	r3, #0
 800902e:	d002      	beq.n	8009036 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fd78 	bl	8009b26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009040:	2b40      	cmp	r3, #64	; 0x40
 8009042:	bf0c      	ite	eq
 8009044:	2301      	moveq	r3, #1
 8009046:	2300      	movne	r3, #0
 8009048:	b2db      	uxtb	r3, r3
 800904a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009052:	f003 0308 	and.w	r3, r3, #8
 8009056:	2b00      	cmp	r3, #0
 8009058:	d103      	bne.n	8009062 <HAL_UART_IRQHandler+0x17a>
 800905a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800905e:	2b00      	cmp	r3, #0
 8009060:	d04f      	beq.n	8009102 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fc80 	bl	8009968 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009072:	2b40      	cmp	r3, #64	; 0x40
 8009074:	d141      	bne.n	80090fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3314      	adds	r3, #20
 800907c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009084:	e853 3f00 	ldrex	r3, [r3]
 8009088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800908c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3314      	adds	r3, #20
 800909e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80090a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80090a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80090ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090b2:	e841 2300 	strex	r3, r2, [r1]
 80090b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80090ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1d9      	bne.n	8009076 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d013      	beq.n	80090f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ce:	4a7d      	ldr	r2, [pc, #500]	; (80092c4 <HAL_UART_IRQHandler+0x3dc>)
 80090d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fd fb64 	bl	80067a4 <HAL_DMA_Abort_IT>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d016      	beq.n	8009110 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80090ec:	4610      	mov	r0, r2
 80090ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f0:	e00e      	b.n	8009110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7fa fd9c 	bl	8003c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f8:	e00a      	b.n	8009110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7fa fd98 	bl	8003c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009100:	e006      	b.n	8009110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7fa fd94 	bl	8003c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800910e:	e170      	b.n	80093f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009110:	bf00      	nop
    return;
 8009112:	e16e      	b.n	80093f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009118:	2b01      	cmp	r3, #1
 800911a:	f040 814a 	bne.w	80093b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800911e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009122:	f003 0310 	and.w	r3, r3, #16
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 8143 	beq.w	80093b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800912c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009130:	f003 0310 	and.w	r3, r3, #16
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 813c 	beq.w	80093b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800913a:	2300      	movs	r3, #0
 800913c:	60bb      	str	r3, [r7, #8]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	60bb      	str	r3, [r7, #8]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	60bb      	str	r3, [r7, #8]
 800914e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915a:	2b40      	cmp	r3, #64	; 0x40
 800915c:	f040 80b4 	bne.w	80092c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800916c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 8140 	beq.w	80093f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800917a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800917e:	429a      	cmp	r2, r3
 8009180:	f080 8139 	bcs.w	80093f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800918a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009196:	f000 8088 	beq.w	80092aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	330c      	adds	r3, #12
 80091a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091a8:	e853 3f00 	ldrex	r3, [r3]
 80091ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	330c      	adds	r3, #12
 80091c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80091c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80091ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80091d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80091d6:	e841 2300 	strex	r3, r2, [r1]
 80091da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80091de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1d9      	bne.n	800919a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3314      	adds	r3, #20
 80091ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091f0:	e853 3f00 	ldrex	r3, [r3]
 80091f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80091f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091f8:	f023 0301 	bic.w	r3, r3, #1
 80091fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3314      	adds	r3, #20
 8009206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800920a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800920e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009210:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009212:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800921c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e1      	bne.n	80091e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3314      	adds	r3, #20
 8009228:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3314      	adds	r3, #20
 8009242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009246:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009248:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800924c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800924e:	e841 2300 	strex	r3, r2, [r1]
 8009252:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1e3      	bne.n	8009222 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2220      	movs	r2, #32
 800925e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	330c      	adds	r3, #12
 800926e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009272:	e853 3f00 	ldrex	r3, [r3]
 8009276:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800927a:	f023 0310 	bic.w	r3, r3, #16
 800927e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	330c      	adds	r3, #12
 8009288:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800928c:	65ba      	str	r2, [r7, #88]	; 0x58
 800928e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009290:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009292:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009294:	e841 2300 	strex	r3, r2, [r1]
 8009298:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800929a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1e3      	bne.n	8009268 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fd fa0d 	bl	80066c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f8c0 	bl	8009440 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092c0:	e099      	b.n	80093f6 <HAL_UART_IRQHandler+0x50e>
 80092c2:	bf00      	nop
 80092c4:	08009a2f 	.word	0x08009a2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092dc:	b29b      	uxth	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 808b 	beq.w	80093fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80092e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 8086 	beq.w	80093fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	330c      	adds	r3, #12
 80092f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f8:	e853 3f00 	ldrex	r3, [r3]
 80092fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009300:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009304:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	330c      	adds	r3, #12
 800930e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009312:	647a      	str	r2, [r7, #68]	; 0x44
 8009314:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009316:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009318:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800931a:	e841 2300 	strex	r3, r2, [r1]
 800931e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1e3      	bne.n	80092ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3314      	adds	r3, #20
 800932c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	623b      	str	r3, [r7, #32]
   return(result);
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	f023 0301 	bic.w	r3, r3, #1
 800933c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3314      	adds	r3, #20
 8009346:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800934a:	633a      	str	r2, [r7, #48]	; 0x30
 800934c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e3      	bne.n	8009326 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2220      	movs	r2, #32
 8009362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	330c      	adds	r3, #12
 8009372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	e853 3f00 	ldrex	r3, [r3]
 800937a:	60fb      	str	r3, [r7, #12]
   return(result);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f023 0310 	bic.w	r3, r3, #16
 8009382:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	330c      	adds	r3, #12
 800938c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009390:	61fa      	str	r2, [r7, #28]
 8009392:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009394:	69b9      	ldr	r1, [r7, #24]
 8009396:	69fa      	ldr	r2, [r7, #28]
 8009398:	e841 2300 	strex	r3, r2, [r1]
 800939c:	617b      	str	r3, [r7, #20]
   return(result);
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e3      	bne.n	800936c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093a8:	4619      	mov	r1, r3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f848 	bl	8009440 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093b0:	e023      	b.n	80093fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d009      	beq.n	80093d2 <HAL_UART_IRQHandler+0x4ea>
 80093be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 fb43 	bl	8009a56 <UART_Transmit_IT>
    return;
 80093d0:	e014      	b.n	80093fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00e      	beq.n	80093fc <HAL_UART_IRQHandler+0x514>
 80093de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d008      	beq.n	80093fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fb83 	bl	8009af6 <UART_EndTransmit_IT>
    return;
 80093f0:	e004      	b.n	80093fc <HAL_UART_IRQHandler+0x514>
    return;
 80093f2:	bf00      	nop
 80093f4:	e002      	b.n	80093fc <HAL_UART_IRQHandler+0x514>
      return;
 80093f6:	bf00      	nop
 80093f8:	e000      	b.n	80093fc <HAL_UART_IRQHandler+0x514>
      return;
 80093fa:	bf00      	nop
  }
}
 80093fc:	37e8      	adds	r7, #232	; 0xe8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop

08009404 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	460b      	mov	r3, r1
 800944a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b090      	sub	sp, #64	; 0x40
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009464:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009470:	2b00      	cmp	r3, #0
 8009472:	d137      	bne.n	80094e4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009476:	2200      	movs	r2, #0
 8009478:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800947a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3314      	adds	r3, #20
 8009480:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009484:	e853 3f00 	ldrex	r3, [r3]
 8009488:	623b      	str	r3, [r7, #32]
   return(result);
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009490:	63bb      	str	r3, [r7, #56]	; 0x38
 8009492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3314      	adds	r3, #20
 8009498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800949a:	633a      	str	r2, [r7, #48]	; 0x30
 800949c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094a2:	e841 2300 	strex	r3, r2, [r1]
 80094a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1e5      	bne.n	800947a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	330c      	adds	r3, #12
 80094b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094c4:	637b      	str	r3, [r7, #52]	; 0x34
 80094c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	330c      	adds	r3, #12
 80094cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094ce:	61fa      	str	r2, [r7, #28]
 80094d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d2:	69b9      	ldr	r1, [r7, #24]
 80094d4:	69fa      	ldr	r2, [r7, #28]
 80094d6:	e841 2300 	strex	r3, r2, [r1]
 80094da:	617b      	str	r3, [r7, #20]
   return(result);
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1e5      	bne.n	80094ae <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094e2:	e002      	b.n	80094ea <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80094e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80094e6:	f7fa fb91 	bl	8003c0c <HAL_UART_TxCpltCallback>
}
 80094ea:	bf00      	nop
 80094ec:	3740      	adds	r7, #64	; 0x40
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b084      	sub	sp, #16
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f7ff ff7f 	bl	8009404 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009506:	bf00      	nop
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b09c      	sub	sp, #112	; 0x70
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009526:	2b00      	cmp	r3, #0
 8009528:	d172      	bne.n	8009610 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800952a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800952c:	2200      	movs	r2, #0
 800952e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	330c      	adds	r3, #12
 8009536:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800953a:	e853 3f00 	ldrex	r3, [r3]
 800953e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009542:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009546:	66bb      	str	r3, [r7, #104]	; 0x68
 8009548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	330c      	adds	r3, #12
 800954e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009550:	65ba      	str	r2, [r7, #88]	; 0x58
 8009552:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009554:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009556:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009558:	e841 2300 	strex	r3, r2, [r1]
 800955c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800955e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1e5      	bne.n	8009530 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3314      	adds	r3, #20
 800956a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	e853 3f00 	ldrex	r3, [r3]
 8009572:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009576:	f023 0301 	bic.w	r3, r3, #1
 800957a:	667b      	str	r3, [r7, #100]	; 0x64
 800957c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	3314      	adds	r3, #20
 8009582:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009584:	647a      	str	r2, [r7, #68]	; 0x44
 8009586:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009588:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800958a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800958c:	e841 2300 	strex	r3, r2, [r1]
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1e5      	bne.n	8009564 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3314      	adds	r3, #20
 800959e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	e853 3f00 	ldrex	r3, [r3]
 80095a6:	623b      	str	r3, [r7, #32]
   return(result);
 80095a8:	6a3b      	ldr	r3, [r7, #32]
 80095aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ae:	663b      	str	r3, [r7, #96]	; 0x60
 80095b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3314      	adds	r3, #20
 80095b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80095b8:	633a      	str	r2, [r7, #48]	; 0x30
 80095ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095c0:	e841 2300 	strex	r3, r2, [r1]
 80095c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1e5      	bne.n	8009598 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80095cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ce:	2220      	movs	r2, #32
 80095d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d119      	bne.n	8009610 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	330c      	adds	r3, #12
 80095e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	e853 3f00 	ldrex	r3, [r3]
 80095ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f023 0310 	bic.w	r3, r3, #16
 80095f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	330c      	adds	r3, #12
 80095fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80095fc:	61fa      	str	r2, [r7, #28]
 80095fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009600:	69b9      	ldr	r1, [r7, #24]
 8009602:	69fa      	ldr	r2, [r7, #28]
 8009604:	e841 2300 	strex	r3, r2, [r1]
 8009608:	617b      	str	r3, [r7, #20]
   return(result);
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e5      	bne.n	80095dc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009614:	2b01      	cmp	r3, #1
 8009616:	d106      	bne.n	8009626 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800961a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800961c:	4619      	mov	r1, r3
 800961e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009620:	f7ff ff0e 	bl	8009440 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009624:	e002      	b.n	800962c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009626:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009628:	f7ff fef6 	bl	8009418 <HAL_UART_RxCpltCallback>
}
 800962c:	bf00      	nop
 800962e:	3770      	adds	r7, #112	; 0x70
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009640:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009646:	2b01      	cmp	r3, #1
 8009648:	d108      	bne.n	800965c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800964e:	085b      	lsrs	r3, r3, #1
 8009650:	b29b      	uxth	r3, r3
 8009652:	4619      	mov	r1, r3
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f7ff fef3 	bl	8009440 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800965a:	e002      	b.n	8009662 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f7ff fee5 	bl	800942c <HAL_UART_RxHalfCpltCallback>
}
 8009662:	bf00      	nop
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b084      	sub	sp, #16
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009672:	2300      	movs	r3, #0
 8009674:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009686:	2b80      	cmp	r3, #128	; 0x80
 8009688:	bf0c      	ite	eq
 800968a:	2301      	moveq	r3, #1
 800968c:	2300      	movne	r3, #0
 800968e:	b2db      	uxtb	r3, r3
 8009690:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b21      	cmp	r3, #33	; 0x21
 800969c:	d108      	bne.n	80096b0 <UART_DMAError+0x46>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d005      	beq.n	80096b0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	2200      	movs	r2, #0
 80096a8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80096aa:	68b8      	ldr	r0, [r7, #8]
 80096ac:	f000 f934 	bl	8009918 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	695b      	ldr	r3, [r3, #20]
 80096b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ba:	2b40      	cmp	r3, #64	; 0x40
 80096bc:	bf0c      	ite	eq
 80096be:	2301      	moveq	r3, #1
 80096c0:	2300      	movne	r3, #0
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b22      	cmp	r3, #34	; 0x22
 80096d0:	d108      	bne.n	80096e4 <UART_DMAError+0x7a>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d005      	beq.n	80096e4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2200      	movs	r2, #0
 80096dc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80096de:	68b8      	ldr	r0, [r7, #8]
 80096e0:	f000 f942 	bl	8009968 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e8:	f043 0210 	orr.w	r2, r3, #16
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096f0:	68b8      	ldr	r0, [r7, #8]
 80096f2:	f7fa fa9d 	bl	8003c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096f6:	bf00      	nop
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b090      	sub	sp, #64	; 0x40
 8009702:	af00      	add	r7, sp, #0
 8009704:	60f8      	str	r0, [r7, #12]
 8009706:	60b9      	str	r1, [r7, #8]
 8009708:	603b      	str	r3, [r7, #0]
 800970a:	4613      	mov	r3, r2
 800970c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800970e:	e050      	b.n	80097b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009716:	d04c      	beq.n	80097b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800971a:	2b00      	cmp	r3, #0
 800971c:	d007      	beq.n	800972e <UART_WaitOnFlagUntilTimeout+0x30>
 800971e:	f7fc faab 	bl	8005c78 <HAL_GetTick>
 8009722:	4602      	mov	r2, r0
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	1ad3      	subs	r3, r2, r3
 8009728:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800972a:	429a      	cmp	r2, r3
 800972c:	d241      	bcs.n	80097b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	330c      	adds	r3, #12
 8009734:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009738:	e853 3f00 	ldrex	r3, [r3]
 800973c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009740:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	330c      	adds	r3, #12
 800974c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800974e:	637a      	str	r2, [r7, #52]	; 0x34
 8009750:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009752:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009756:	e841 2300 	strex	r3, r2, [r1]
 800975a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800975c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1e5      	bne.n	800972e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3314      	adds	r3, #20
 8009768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	613b      	str	r3, [r7, #16]
   return(result);
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	f023 0301 	bic.w	r3, r3, #1
 8009778:	63bb      	str	r3, [r7, #56]	; 0x38
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3314      	adds	r3, #20
 8009780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009782:	623a      	str	r2, [r7, #32]
 8009784:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009786:	69f9      	ldr	r1, [r7, #28]
 8009788:	6a3a      	ldr	r2, [r7, #32]
 800978a:	e841 2300 	strex	r3, r2, [r1]
 800978e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1e5      	bne.n	8009762 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2220      	movs	r2, #32
 800979a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2220      	movs	r2, #32
 80097a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e00f      	b.n	80097d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	4013      	ands	r3, r2
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	429a      	cmp	r2, r3
 80097c0:	bf0c      	ite	eq
 80097c2:	2301      	moveq	r3, #1
 80097c4:	2300      	movne	r3, #0
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	461a      	mov	r2, r3
 80097ca:	79fb      	ldrb	r3, [r7, #7]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d09f      	beq.n	8009710 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3740      	adds	r7, #64	; 0x40
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
	...

080097dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b098      	sub	sp, #96	; 0x60
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	4613      	mov	r3, r2
 80097e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	88fa      	ldrh	r2, [r7, #6]
 80097f4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2222      	movs	r2, #34	; 0x22
 8009800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009808:	4a40      	ldr	r2, [pc, #256]	; (800990c <UART_Start_Receive_DMA+0x130>)
 800980a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009810:	4a3f      	ldr	r2, [pc, #252]	; (8009910 <UART_Start_Receive_DMA+0x134>)
 8009812:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009818:	4a3e      	ldr	r2, [pc, #248]	; (8009914 <UART_Start_Receive_DMA+0x138>)
 800981a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009820:	2200      	movs	r2, #0
 8009822:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009824:	f107 0308 	add.w	r3, r7, #8
 8009828:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3304      	adds	r3, #4
 8009834:	4619      	mov	r1, r3
 8009836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	88fb      	ldrh	r3, [r7, #6]
 800983c:	f7fc feea 	bl	8006614 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009840:	2300      	movs	r3, #0
 8009842:	613b      	str	r3, [r7, #16]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	613b      	str	r3, [r7, #16]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	613b      	str	r3, [r7, #16]
 8009854:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d019      	beq.n	800989a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	330c      	adds	r3, #12
 800986c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009870:	e853 3f00 	ldrex	r3, [r3]
 8009874:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800987c:	65bb      	str	r3, [r7, #88]	; 0x58
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	330c      	adds	r3, #12
 8009884:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009886:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009888:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800988c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800988e:	e841 2300 	strex	r3, r2, [r1]
 8009892:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1e5      	bne.n	8009866 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3314      	adds	r3, #20
 80098a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a4:	e853 3f00 	ldrex	r3, [r3]
 80098a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ac:	f043 0301 	orr.w	r3, r3, #1
 80098b0:	657b      	str	r3, [r7, #84]	; 0x54
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	3314      	adds	r3, #20
 80098b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098ba:	63ba      	str	r2, [r7, #56]	; 0x38
 80098bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80098c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098c2:	e841 2300 	strex	r3, r2, [r1]
 80098c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1e5      	bne.n	800989a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3314      	adds	r3, #20
 80098d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	e853 3f00 	ldrex	r3, [r3]
 80098dc:	617b      	str	r3, [r7, #20]
   return(result);
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e4:	653b      	str	r3, [r7, #80]	; 0x50
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	3314      	adds	r3, #20
 80098ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098ee:	627a      	str	r2, [r7, #36]	; 0x24
 80098f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f2:	6a39      	ldr	r1, [r7, #32]
 80098f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098f6:	e841 2300 	strex	r3, r2, [r1]
 80098fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1e5      	bne.n	80098ce <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3760      	adds	r7, #96	; 0x60
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	0800950f 	.word	0x0800950f
 8009910:	08009635 	.word	0x08009635
 8009914:	0800966b 	.word	0x0800966b

08009918 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009918:	b480      	push	{r7}
 800991a:	b089      	sub	sp, #36	; 0x24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	330c      	adds	r3, #12
 8009926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	e853 3f00 	ldrex	r3, [r3]
 800992e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009936:	61fb      	str	r3, [r7, #28]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	330c      	adds	r3, #12
 800993e:	69fa      	ldr	r2, [r7, #28]
 8009940:	61ba      	str	r2, [r7, #24]
 8009942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009944:	6979      	ldr	r1, [r7, #20]
 8009946:	69ba      	ldr	r2, [r7, #24]
 8009948:	e841 2300 	strex	r3, r2, [r1]
 800994c:	613b      	str	r3, [r7, #16]
   return(result);
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1e5      	bne.n	8009920 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2220      	movs	r2, #32
 8009958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800995c:	bf00      	nop
 800995e:	3724      	adds	r7, #36	; 0x24
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009968:	b480      	push	{r7}
 800996a:	b095      	sub	sp, #84	; 0x54
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	330c      	adds	r3, #12
 8009976:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800997a:	e853 3f00 	ldrex	r3, [r3]
 800997e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009982:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	330c      	adds	r3, #12
 800998e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009990:	643a      	str	r2, [r7, #64]	; 0x40
 8009992:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009994:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009998:	e841 2300 	strex	r3, r2, [r1]
 800999c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800999e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1e5      	bne.n	8009970 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	3314      	adds	r3, #20
 80099aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ac:	6a3b      	ldr	r3, [r7, #32]
 80099ae:	e853 3f00 	ldrex	r3, [r3]
 80099b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	f023 0301 	bic.w	r3, r3, #1
 80099ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3314      	adds	r3, #20
 80099c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099cc:	e841 2300 	strex	r3, r2, [r1]
 80099d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d1e5      	bne.n	80099a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d119      	bne.n	8009a14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	330c      	adds	r3, #12
 80099e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	e853 3f00 	ldrex	r3, [r3]
 80099ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	f023 0310 	bic.w	r3, r3, #16
 80099f6:	647b      	str	r3, [r7, #68]	; 0x44
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	330c      	adds	r3, #12
 80099fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a00:	61ba      	str	r2, [r7, #24]
 8009a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a04:	6979      	ldr	r1, [r7, #20]
 8009a06:	69ba      	ldr	r2, [r7, #24]
 8009a08:	e841 2300 	strex	r3, r2, [r1]
 8009a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1e5      	bne.n	80099e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2220      	movs	r2, #32
 8009a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009a22:	bf00      	nop
 8009a24:	3754      	adds	r7, #84	; 0x54
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b084      	sub	sp, #16
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f7fa f8f1 	bl	8003c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a4e:	bf00      	nop
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b085      	sub	sp, #20
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b21      	cmp	r3, #33	; 0x21
 8009a68:	d13e      	bne.n	8009ae8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a72:	d114      	bne.n	8009a9e <UART_Transmit_IT+0x48>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d110      	bne.n	8009a9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a1b      	ldr	r3, [r3, #32]
 8009a80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	881b      	ldrh	r3, [r3, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	1c9a      	adds	r2, r3, #2
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	621a      	str	r2, [r3, #32]
 8009a9c:	e008      	b.n	8009ab0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	1c59      	adds	r1, r3, #1
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	6211      	str	r1, [r2, #32]
 8009aa8:	781a      	ldrb	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	4619      	mov	r1, r3
 8009abe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10f      	bne.n	8009ae4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68da      	ldr	r2, [r3, #12]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ad2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68da      	ldr	r2, [r3, #12]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ae2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	e000      	b.n	8009aea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009ae8:	2302      	movs	r3, #2
  }
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3714      	adds	r7, #20
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr

08009af6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b082      	sub	sp, #8
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68da      	ldr	r2, [r3, #12]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2220      	movs	r2, #32
 8009b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7fa f878 	bl	8003c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b08c      	sub	sp, #48	; 0x30
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	2b22      	cmp	r3, #34	; 0x22
 8009b38:	f040 80ab 	bne.w	8009c92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b44:	d117      	bne.n	8009b76 <UART_Receive_IT+0x50>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d113      	bne.n	8009b76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6e:	1c9a      	adds	r2, r3, #2
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	629a      	str	r2, [r3, #40]	; 0x28
 8009b74:	e026      	b.n	8009bc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b88:	d007      	beq.n	8009b9a <UART_Receive_IT+0x74>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10a      	bne.n	8009ba8 <UART_Receive_IT+0x82>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d106      	bne.n	8009ba8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	b2da      	uxtb	r2, r3
 8009ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba4:	701a      	strb	r2, [r3, #0]
 8009ba6:	e008      	b.n	8009bba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bbe:	1c5a      	adds	r2, r3, #1
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d15a      	bne.n	8009c8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68da      	ldr	r2, [r3, #12]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f022 0220 	bic.w	r2, r2, #32
 8009be6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68da      	ldr	r2, [r3, #12]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	695a      	ldr	r2, [r3, #20]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f022 0201 	bic.w	r2, r2, #1
 8009c06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2220      	movs	r2, #32
 8009c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d135      	bne.n	8009c84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	330c      	adds	r3, #12
 8009c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	e853 3f00 	ldrex	r3, [r3]
 8009c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	f023 0310 	bic.w	r3, r3, #16
 8009c34:	627b      	str	r3, [r7, #36]	; 0x24
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	330c      	adds	r3, #12
 8009c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c3e:	623a      	str	r2, [r7, #32]
 8009c40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c42:	69f9      	ldr	r1, [r7, #28]
 8009c44:	6a3a      	ldr	r2, [r7, #32]
 8009c46:	e841 2300 	strex	r3, r2, [r1]
 8009c4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1e5      	bne.n	8009c1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 0310 	and.w	r3, r3, #16
 8009c5c:	2b10      	cmp	r3, #16
 8009c5e:	d10a      	bne.n	8009c76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c60:	2300      	movs	r3, #0
 8009c62:	60fb      	str	r3, [r7, #12]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	60fb      	str	r3, [r7, #12]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	60fb      	str	r3, [r7, #12]
 8009c74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7ff fbdf 	bl	8009440 <HAL_UARTEx_RxEventCallback>
 8009c82:	e002      	b.n	8009c8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff fbc7 	bl	8009418 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	e002      	b.n	8009c94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	e000      	b.n	8009c94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009c92:	2302      	movs	r3, #2
  }
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3730      	adds	r7, #48	; 0x30
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ca0:	b0c0      	sub	sp, #256	; 0x100
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cb8:	68d9      	ldr	r1, [r3, #12]
 8009cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	ea40 0301 	orr.w	r3, r0, r1
 8009cc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cca:	689a      	ldr	r2, [r3, #8]
 8009ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	431a      	orrs	r2, r3
 8009cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	431a      	orrs	r2, r3
 8009cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ce0:	69db      	ldr	r3, [r3, #28]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009cf4:	f021 010c 	bic.w	r1, r1, #12
 8009cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009d02:	430b      	orrs	r3, r1
 8009d04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d16:	6999      	ldr	r1, [r3, #24]
 8009d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	ea40 0301 	orr.w	r3, r0, r1
 8009d22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	4b8f      	ldr	r3, [pc, #572]	; (8009f68 <UART_SetConfig+0x2cc>)
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d005      	beq.n	8009d3c <UART_SetConfig+0xa0>
 8009d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	4b8d      	ldr	r3, [pc, #564]	; (8009f6c <UART_SetConfig+0x2d0>)
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d104      	bne.n	8009d46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d3c:	f7fd fb66 	bl	800740c <HAL_RCC_GetPCLK2Freq>
 8009d40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009d44:	e003      	b.n	8009d4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d46:	f7fd fb4d 	bl	80073e4 <HAL_RCC_GetPCLK1Freq>
 8009d4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d52:	69db      	ldr	r3, [r3, #28]
 8009d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d58:	f040 810c 	bne.w	8009f74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d60:	2200      	movs	r2, #0
 8009d62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009d6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009d6e:	4622      	mov	r2, r4
 8009d70:	462b      	mov	r3, r5
 8009d72:	1891      	adds	r1, r2, r2
 8009d74:	65b9      	str	r1, [r7, #88]	; 0x58
 8009d76:	415b      	adcs	r3, r3
 8009d78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009d7e:	4621      	mov	r1, r4
 8009d80:	eb12 0801 	adds.w	r8, r2, r1
 8009d84:	4629      	mov	r1, r5
 8009d86:	eb43 0901 	adc.w	r9, r3, r1
 8009d8a:	f04f 0200 	mov.w	r2, #0
 8009d8e:	f04f 0300 	mov.w	r3, #0
 8009d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d9e:	4690      	mov	r8, r2
 8009da0:	4699      	mov	r9, r3
 8009da2:	4623      	mov	r3, r4
 8009da4:	eb18 0303 	adds.w	r3, r8, r3
 8009da8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009dac:	462b      	mov	r3, r5
 8009dae:	eb49 0303 	adc.w	r3, r9, r3
 8009db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009dc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009dc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009dca:	460b      	mov	r3, r1
 8009dcc:	18db      	adds	r3, r3, r3
 8009dce:	653b      	str	r3, [r7, #80]	; 0x50
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	eb42 0303 	adc.w	r3, r2, r3
 8009dd6:	657b      	str	r3, [r7, #84]	; 0x54
 8009dd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009ddc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009de0:	f7f6 fe10 	bl	8000a04 <__aeabi_uldivmod>
 8009de4:	4602      	mov	r2, r0
 8009de6:	460b      	mov	r3, r1
 8009de8:	4b61      	ldr	r3, [pc, #388]	; (8009f70 <UART_SetConfig+0x2d4>)
 8009dea:	fba3 2302 	umull	r2, r3, r3, r2
 8009dee:	095b      	lsrs	r3, r3, #5
 8009df0:	011c      	lsls	r4, r3, #4
 8009df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009df6:	2200      	movs	r2, #0
 8009df8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009dfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009e00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009e04:	4642      	mov	r2, r8
 8009e06:	464b      	mov	r3, r9
 8009e08:	1891      	adds	r1, r2, r2
 8009e0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8009e0c:	415b      	adcs	r3, r3
 8009e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009e14:	4641      	mov	r1, r8
 8009e16:	eb12 0a01 	adds.w	sl, r2, r1
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	eb43 0b01 	adc.w	fp, r3, r1
 8009e20:	f04f 0200 	mov.w	r2, #0
 8009e24:	f04f 0300 	mov.w	r3, #0
 8009e28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009e2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009e30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e34:	4692      	mov	sl, r2
 8009e36:	469b      	mov	fp, r3
 8009e38:	4643      	mov	r3, r8
 8009e3a:	eb1a 0303 	adds.w	r3, sl, r3
 8009e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e42:	464b      	mov	r3, r9
 8009e44:	eb4b 0303 	adc.w	r3, fp, r3
 8009e48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009e5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009e60:	460b      	mov	r3, r1
 8009e62:	18db      	adds	r3, r3, r3
 8009e64:	643b      	str	r3, [r7, #64]	; 0x40
 8009e66:	4613      	mov	r3, r2
 8009e68:	eb42 0303 	adc.w	r3, r2, r3
 8009e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8009e6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009e72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009e76:	f7f6 fdc5 	bl	8000a04 <__aeabi_uldivmod>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	4611      	mov	r1, r2
 8009e80:	4b3b      	ldr	r3, [pc, #236]	; (8009f70 <UART_SetConfig+0x2d4>)
 8009e82:	fba3 2301 	umull	r2, r3, r3, r1
 8009e86:	095b      	lsrs	r3, r3, #5
 8009e88:	2264      	movs	r2, #100	; 0x64
 8009e8a:	fb02 f303 	mul.w	r3, r2, r3
 8009e8e:	1acb      	subs	r3, r1, r3
 8009e90:	00db      	lsls	r3, r3, #3
 8009e92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009e96:	4b36      	ldr	r3, [pc, #216]	; (8009f70 <UART_SetConfig+0x2d4>)
 8009e98:	fba3 2302 	umull	r2, r3, r3, r2
 8009e9c:	095b      	lsrs	r3, r3, #5
 8009e9e:	005b      	lsls	r3, r3, #1
 8009ea0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ea4:	441c      	add	r4, r3
 8009ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009eb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009eb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009eb8:	4642      	mov	r2, r8
 8009eba:	464b      	mov	r3, r9
 8009ebc:	1891      	adds	r1, r2, r2
 8009ebe:	63b9      	str	r1, [r7, #56]	; 0x38
 8009ec0:	415b      	adcs	r3, r3
 8009ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ec4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009ec8:	4641      	mov	r1, r8
 8009eca:	1851      	adds	r1, r2, r1
 8009ecc:	6339      	str	r1, [r7, #48]	; 0x30
 8009ece:	4649      	mov	r1, r9
 8009ed0:	414b      	adcs	r3, r1
 8009ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8009ed4:	f04f 0200 	mov.w	r2, #0
 8009ed8:	f04f 0300 	mov.w	r3, #0
 8009edc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009ee0:	4659      	mov	r1, fp
 8009ee2:	00cb      	lsls	r3, r1, #3
 8009ee4:	4651      	mov	r1, sl
 8009ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009eea:	4651      	mov	r1, sl
 8009eec:	00ca      	lsls	r2, r1, #3
 8009eee:	4610      	mov	r0, r2
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	4642      	mov	r2, r8
 8009ef6:	189b      	adds	r3, r3, r2
 8009ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009efc:	464b      	mov	r3, r9
 8009efe:	460a      	mov	r2, r1
 8009f00:	eb42 0303 	adc.w	r3, r2, r3
 8009f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009f14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009f18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	18db      	adds	r3, r3, r3
 8009f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f22:	4613      	mov	r3, r2
 8009f24:	eb42 0303 	adc.w	r3, r2, r3
 8009f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009f32:	f7f6 fd67 	bl	8000a04 <__aeabi_uldivmod>
 8009f36:	4602      	mov	r2, r0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	4b0d      	ldr	r3, [pc, #52]	; (8009f70 <UART_SetConfig+0x2d4>)
 8009f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8009f40:	095b      	lsrs	r3, r3, #5
 8009f42:	2164      	movs	r1, #100	; 0x64
 8009f44:	fb01 f303 	mul.w	r3, r1, r3
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	00db      	lsls	r3, r3, #3
 8009f4c:	3332      	adds	r3, #50	; 0x32
 8009f4e:	4a08      	ldr	r2, [pc, #32]	; (8009f70 <UART_SetConfig+0x2d4>)
 8009f50:	fba2 2303 	umull	r2, r3, r2, r3
 8009f54:	095b      	lsrs	r3, r3, #5
 8009f56:	f003 0207 	and.w	r2, r3, #7
 8009f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4422      	add	r2, r4
 8009f62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009f64:	e105      	b.n	800a172 <UART_SetConfig+0x4d6>
 8009f66:	bf00      	nop
 8009f68:	40011000 	.word	0x40011000
 8009f6c:	40011400 	.word	0x40011400
 8009f70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009f7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009f82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009f86:	4642      	mov	r2, r8
 8009f88:	464b      	mov	r3, r9
 8009f8a:	1891      	adds	r1, r2, r2
 8009f8c:	6239      	str	r1, [r7, #32]
 8009f8e:	415b      	adcs	r3, r3
 8009f90:	627b      	str	r3, [r7, #36]	; 0x24
 8009f92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f96:	4641      	mov	r1, r8
 8009f98:	1854      	adds	r4, r2, r1
 8009f9a:	4649      	mov	r1, r9
 8009f9c:	eb43 0501 	adc.w	r5, r3, r1
 8009fa0:	f04f 0200 	mov.w	r2, #0
 8009fa4:	f04f 0300 	mov.w	r3, #0
 8009fa8:	00eb      	lsls	r3, r5, #3
 8009faa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009fae:	00e2      	lsls	r2, r4, #3
 8009fb0:	4614      	mov	r4, r2
 8009fb2:	461d      	mov	r5, r3
 8009fb4:	4643      	mov	r3, r8
 8009fb6:	18e3      	adds	r3, r4, r3
 8009fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009fbc:	464b      	mov	r3, r9
 8009fbe:	eb45 0303 	adc.w	r3, r5, r3
 8009fc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009fd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009fd6:	f04f 0200 	mov.w	r2, #0
 8009fda:	f04f 0300 	mov.w	r3, #0
 8009fde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009fe2:	4629      	mov	r1, r5
 8009fe4:	008b      	lsls	r3, r1, #2
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fec:	4621      	mov	r1, r4
 8009fee:	008a      	lsls	r2, r1, #2
 8009ff0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009ff4:	f7f6 fd06 	bl	8000a04 <__aeabi_uldivmod>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	4b60      	ldr	r3, [pc, #384]	; (800a180 <UART_SetConfig+0x4e4>)
 8009ffe:	fba3 2302 	umull	r2, r3, r3, r2
 800a002:	095b      	lsrs	r3, r3, #5
 800a004:	011c      	lsls	r4, r3, #4
 800a006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a00a:	2200      	movs	r2, #0
 800a00c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a010:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a014:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a018:	4642      	mov	r2, r8
 800a01a:	464b      	mov	r3, r9
 800a01c:	1891      	adds	r1, r2, r2
 800a01e:	61b9      	str	r1, [r7, #24]
 800a020:	415b      	adcs	r3, r3
 800a022:	61fb      	str	r3, [r7, #28]
 800a024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a028:	4641      	mov	r1, r8
 800a02a:	1851      	adds	r1, r2, r1
 800a02c:	6139      	str	r1, [r7, #16]
 800a02e:	4649      	mov	r1, r9
 800a030:	414b      	adcs	r3, r1
 800a032:	617b      	str	r3, [r7, #20]
 800a034:	f04f 0200 	mov.w	r2, #0
 800a038:	f04f 0300 	mov.w	r3, #0
 800a03c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a040:	4659      	mov	r1, fp
 800a042:	00cb      	lsls	r3, r1, #3
 800a044:	4651      	mov	r1, sl
 800a046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a04a:	4651      	mov	r1, sl
 800a04c:	00ca      	lsls	r2, r1, #3
 800a04e:	4610      	mov	r0, r2
 800a050:	4619      	mov	r1, r3
 800a052:	4603      	mov	r3, r0
 800a054:	4642      	mov	r2, r8
 800a056:	189b      	adds	r3, r3, r2
 800a058:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a05c:	464b      	mov	r3, r9
 800a05e:	460a      	mov	r2, r1
 800a060:	eb42 0303 	adc.w	r3, r2, r3
 800a064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	67bb      	str	r3, [r7, #120]	; 0x78
 800a072:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a074:	f04f 0200 	mov.w	r2, #0
 800a078:	f04f 0300 	mov.w	r3, #0
 800a07c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a080:	4649      	mov	r1, r9
 800a082:	008b      	lsls	r3, r1, #2
 800a084:	4641      	mov	r1, r8
 800a086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a08a:	4641      	mov	r1, r8
 800a08c:	008a      	lsls	r2, r1, #2
 800a08e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a092:	f7f6 fcb7 	bl	8000a04 <__aeabi_uldivmod>
 800a096:	4602      	mov	r2, r0
 800a098:	460b      	mov	r3, r1
 800a09a:	4b39      	ldr	r3, [pc, #228]	; (800a180 <UART_SetConfig+0x4e4>)
 800a09c:	fba3 1302 	umull	r1, r3, r3, r2
 800a0a0:	095b      	lsrs	r3, r3, #5
 800a0a2:	2164      	movs	r1, #100	; 0x64
 800a0a4:	fb01 f303 	mul.w	r3, r1, r3
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	011b      	lsls	r3, r3, #4
 800a0ac:	3332      	adds	r3, #50	; 0x32
 800a0ae:	4a34      	ldr	r2, [pc, #208]	; (800a180 <UART_SetConfig+0x4e4>)
 800a0b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b4:	095b      	lsrs	r3, r3, #5
 800a0b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0ba:	441c      	add	r4, r3
 800a0bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	673b      	str	r3, [r7, #112]	; 0x70
 800a0c4:	677a      	str	r2, [r7, #116]	; 0x74
 800a0c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a0ca:	4642      	mov	r2, r8
 800a0cc:	464b      	mov	r3, r9
 800a0ce:	1891      	adds	r1, r2, r2
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	415b      	adcs	r3, r3
 800a0d4:	60fb      	str	r3, [r7, #12]
 800a0d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a0da:	4641      	mov	r1, r8
 800a0dc:	1851      	adds	r1, r2, r1
 800a0de:	6039      	str	r1, [r7, #0]
 800a0e0:	4649      	mov	r1, r9
 800a0e2:	414b      	adcs	r3, r1
 800a0e4:	607b      	str	r3, [r7, #4]
 800a0e6:	f04f 0200 	mov.w	r2, #0
 800a0ea:	f04f 0300 	mov.w	r3, #0
 800a0ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a0f2:	4659      	mov	r1, fp
 800a0f4:	00cb      	lsls	r3, r1, #3
 800a0f6:	4651      	mov	r1, sl
 800a0f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0fc:	4651      	mov	r1, sl
 800a0fe:	00ca      	lsls	r2, r1, #3
 800a100:	4610      	mov	r0, r2
 800a102:	4619      	mov	r1, r3
 800a104:	4603      	mov	r3, r0
 800a106:	4642      	mov	r2, r8
 800a108:	189b      	adds	r3, r3, r2
 800a10a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a10c:	464b      	mov	r3, r9
 800a10e:	460a      	mov	r2, r1
 800a110:	eb42 0303 	adc.w	r3, r2, r3
 800a114:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	663b      	str	r3, [r7, #96]	; 0x60
 800a120:	667a      	str	r2, [r7, #100]	; 0x64
 800a122:	f04f 0200 	mov.w	r2, #0
 800a126:	f04f 0300 	mov.w	r3, #0
 800a12a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a12e:	4649      	mov	r1, r9
 800a130:	008b      	lsls	r3, r1, #2
 800a132:	4641      	mov	r1, r8
 800a134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a138:	4641      	mov	r1, r8
 800a13a:	008a      	lsls	r2, r1, #2
 800a13c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a140:	f7f6 fc60 	bl	8000a04 <__aeabi_uldivmod>
 800a144:	4602      	mov	r2, r0
 800a146:	460b      	mov	r3, r1
 800a148:	4b0d      	ldr	r3, [pc, #52]	; (800a180 <UART_SetConfig+0x4e4>)
 800a14a:	fba3 1302 	umull	r1, r3, r3, r2
 800a14e:	095b      	lsrs	r3, r3, #5
 800a150:	2164      	movs	r1, #100	; 0x64
 800a152:	fb01 f303 	mul.w	r3, r1, r3
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	011b      	lsls	r3, r3, #4
 800a15a:	3332      	adds	r3, #50	; 0x32
 800a15c:	4a08      	ldr	r2, [pc, #32]	; (800a180 <UART_SetConfig+0x4e4>)
 800a15e:	fba2 2303 	umull	r2, r3, r2, r3
 800a162:	095b      	lsrs	r3, r3, #5
 800a164:	f003 020f 	and.w	r2, r3, #15
 800a168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4422      	add	r2, r4
 800a170:	609a      	str	r2, [r3, #8]
}
 800a172:	bf00      	nop
 800a174:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a178:	46bd      	mov	sp, r7
 800a17a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a17e:	bf00      	nop
 800a180:	51eb851f 	.word	0x51eb851f

0800a184 <__cxa_pure_virtual>:
 800a184:	b508      	push	{r3, lr}
 800a186:	f000 f80d 	bl	800a1a4 <_ZSt9terminatev>

0800a18a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a18a:	b508      	push	{r3, lr}
 800a18c:	4780      	blx	r0
 800a18e:	f000 f80e 	bl	800a1ae <abort>
	...

0800a194 <_ZSt13get_terminatev>:
 800a194:	4b02      	ldr	r3, [pc, #8]	; (800a1a0 <_ZSt13get_terminatev+0xc>)
 800a196:	6818      	ldr	r0, [r3, #0]
 800a198:	f3bf 8f5b 	dmb	ish
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	20000014 	.word	0x20000014

0800a1a4 <_ZSt9terminatev>:
 800a1a4:	b508      	push	{r3, lr}
 800a1a6:	f7ff fff5 	bl	800a194 <_ZSt13get_terminatev>
 800a1aa:	f7ff ffee 	bl	800a18a <_ZN10__cxxabiv111__terminateEPFvvE>

0800a1ae <abort>:
 800a1ae:	b508      	push	{r3, lr}
 800a1b0:	2006      	movs	r0, #6
 800a1b2:	f000 f873 	bl	800a29c <raise>
 800a1b6:	2001      	movs	r0, #1
 800a1b8:	f7fa ff7a 	bl	80050b0 <_exit>

0800a1bc <__errno>:
 800a1bc:	4b01      	ldr	r3, [pc, #4]	; (800a1c4 <__errno+0x8>)
 800a1be:	6818      	ldr	r0, [r3, #0]
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	20000018 	.word	0x20000018

0800a1c8 <__libc_init_array>:
 800a1c8:	b570      	push	{r4, r5, r6, lr}
 800a1ca:	4d0d      	ldr	r5, [pc, #52]	; (800a200 <__libc_init_array+0x38>)
 800a1cc:	4c0d      	ldr	r4, [pc, #52]	; (800a204 <__libc_init_array+0x3c>)
 800a1ce:	1b64      	subs	r4, r4, r5
 800a1d0:	10a4      	asrs	r4, r4, #2
 800a1d2:	2600      	movs	r6, #0
 800a1d4:	42a6      	cmp	r6, r4
 800a1d6:	d109      	bne.n	800a1ec <__libc_init_array+0x24>
 800a1d8:	4d0b      	ldr	r5, [pc, #44]	; (800a208 <__libc_init_array+0x40>)
 800a1da:	4c0c      	ldr	r4, [pc, #48]	; (800a20c <__libc_init_array+0x44>)
 800a1dc:	f000 f9b0 	bl	800a540 <_init>
 800a1e0:	1b64      	subs	r4, r4, r5
 800a1e2:	10a4      	asrs	r4, r4, #2
 800a1e4:	2600      	movs	r6, #0
 800a1e6:	42a6      	cmp	r6, r4
 800a1e8:	d105      	bne.n	800a1f6 <__libc_init_array+0x2e>
 800a1ea:	bd70      	pop	{r4, r5, r6, pc}
 800a1ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1f0:	4798      	blx	r3
 800a1f2:	3601      	adds	r6, #1
 800a1f4:	e7ee      	b.n	800a1d4 <__libc_init_array+0xc>
 800a1f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1fa:	4798      	blx	r3
 800a1fc:	3601      	adds	r6, #1
 800a1fe:	e7f2      	b.n	800a1e6 <__libc_init_array+0x1e>
 800a200:	0800a8f0 	.word	0x0800a8f0
 800a204:	0800a8f0 	.word	0x0800a8f0
 800a208:	0800a8f0 	.word	0x0800a8f0
 800a20c:	0800a8f8 	.word	0x0800a8f8

0800a210 <memcpy>:
 800a210:	440a      	add	r2, r1
 800a212:	4291      	cmp	r1, r2
 800a214:	f100 33ff 	add.w	r3, r0, #4294967295
 800a218:	d100      	bne.n	800a21c <memcpy+0xc>
 800a21a:	4770      	bx	lr
 800a21c:	b510      	push	{r4, lr}
 800a21e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a222:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a226:	4291      	cmp	r1, r2
 800a228:	d1f9      	bne.n	800a21e <memcpy+0xe>
 800a22a:	bd10      	pop	{r4, pc}

0800a22c <memset>:
 800a22c:	4402      	add	r2, r0
 800a22e:	4603      	mov	r3, r0
 800a230:	4293      	cmp	r3, r2
 800a232:	d100      	bne.n	800a236 <memset+0xa>
 800a234:	4770      	bx	lr
 800a236:	f803 1b01 	strb.w	r1, [r3], #1
 800a23a:	e7f9      	b.n	800a230 <memset+0x4>

0800a23c <realloc>:
 800a23c:	4b02      	ldr	r3, [pc, #8]	; (800a248 <realloc+0xc>)
 800a23e:	460a      	mov	r2, r1
 800a240:	4601      	mov	r1, r0
 800a242:	6818      	ldr	r0, [r3, #0]
 800a244:	f000 b8da 	b.w	800a3fc <_realloc_r>
 800a248:	20000018 	.word	0x20000018

0800a24c <_raise_r>:
 800a24c:	291f      	cmp	r1, #31
 800a24e:	b538      	push	{r3, r4, r5, lr}
 800a250:	4604      	mov	r4, r0
 800a252:	460d      	mov	r5, r1
 800a254:	d904      	bls.n	800a260 <_raise_r+0x14>
 800a256:	2316      	movs	r3, #22
 800a258:	6003      	str	r3, [r0, #0]
 800a25a:	f04f 30ff 	mov.w	r0, #4294967295
 800a25e:	bd38      	pop	{r3, r4, r5, pc}
 800a260:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a262:	b112      	cbz	r2, 800a26a <_raise_r+0x1e>
 800a264:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a268:	b94b      	cbnz	r3, 800a27e <_raise_r+0x32>
 800a26a:	4620      	mov	r0, r4
 800a26c:	f000 f830 	bl	800a2d0 <_getpid_r>
 800a270:	462a      	mov	r2, r5
 800a272:	4601      	mov	r1, r0
 800a274:	4620      	mov	r0, r4
 800a276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a27a:	f000 b817 	b.w	800a2ac <_kill_r>
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d00a      	beq.n	800a298 <_raise_r+0x4c>
 800a282:	1c59      	adds	r1, r3, #1
 800a284:	d103      	bne.n	800a28e <_raise_r+0x42>
 800a286:	2316      	movs	r3, #22
 800a288:	6003      	str	r3, [r0, #0]
 800a28a:	2001      	movs	r0, #1
 800a28c:	e7e7      	b.n	800a25e <_raise_r+0x12>
 800a28e:	2400      	movs	r4, #0
 800a290:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a294:	4628      	mov	r0, r5
 800a296:	4798      	blx	r3
 800a298:	2000      	movs	r0, #0
 800a29a:	e7e0      	b.n	800a25e <_raise_r+0x12>

0800a29c <raise>:
 800a29c:	4b02      	ldr	r3, [pc, #8]	; (800a2a8 <raise+0xc>)
 800a29e:	4601      	mov	r1, r0
 800a2a0:	6818      	ldr	r0, [r3, #0]
 800a2a2:	f7ff bfd3 	b.w	800a24c <_raise_r>
 800a2a6:	bf00      	nop
 800a2a8:	20000018 	.word	0x20000018

0800a2ac <_kill_r>:
 800a2ac:	b538      	push	{r3, r4, r5, lr}
 800a2ae:	4d07      	ldr	r5, [pc, #28]	; (800a2cc <_kill_r+0x20>)
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	4608      	mov	r0, r1
 800a2b6:	4611      	mov	r1, r2
 800a2b8:	602b      	str	r3, [r5, #0]
 800a2ba:	f7fa fee9 	bl	8005090 <_kill>
 800a2be:	1c43      	adds	r3, r0, #1
 800a2c0:	d102      	bne.n	800a2c8 <_kill_r+0x1c>
 800a2c2:	682b      	ldr	r3, [r5, #0]
 800a2c4:	b103      	cbz	r3, 800a2c8 <_kill_r+0x1c>
 800a2c6:	6023      	str	r3, [r4, #0]
 800a2c8:	bd38      	pop	{r3, r4, r5, pc}
 800a2ca:	bf00      	nop
 800a2cc:	20000f5c 	.word	0x20000f5c

0800a2d0 <_getpid_r>:
 800a2d0:	f7fa bed6 	b.w	8005080 <_getpid>

0800a2d4 <sbrk_aligned>:
 800a2d4:	b570      	push	{r4, r5, r6, lr}
 800a2d6:	4e0e      	ldr	r6, [pc, #56]	; (800a310 <sbrk_aligned+0x3c>)
 800a2d8:	460c      	mov	r4, r1
 800a2da:	6831      	ldr	r1, [r6, #0]
 800a2dc:	4605      	mov	r5, r0
 800a2de:	b911      	cbnz	r1, 800a2e6 <sbrk_aligned+0x12>
 800a2e0:	f000 f8bc 	bl	800a45c <_sbrk_r>
 800a2e4:	6030      	str	r0, [r6, #0]
 800a2e6:	4621      	mov	r1, r4
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	f000 f8b7 	bl	800a45c <_sbrk_r>
 800a2ee:	1c43      	adds	r3, r0, #1
 800a2f0:	d00a      	beq.n	800a308 <sbrk_aligned+0x34>
 800a2f2:	1cc4      	adds	r4, r0, #3
 800a2f4:	f024 0403 	bic.w	r4, r4, #3
 800a2f8:	42a0      	cmp	r0, r4
 800a2fa:	d007      	beq.n	800a30c <sbrk_aligned+0x38>
 800a2fc:	1a21      	subs	r1, r4, r0
 800a2fe:	4628      	mov	r0, r5
 800a300:	f000 f8ac 	bl	800a45c <_sbrk_r>
 800a304:	3001      	adds	r0, #1
 800a306:	d101      	bne.n	800a30c <sbrk_aligned+0x38>
 800a308:	f04f 34ff 	mov.w	r4, #4294967295
 800a30c:	4620      	mov	r0, r4
 800a30e:	bd70      	pop	{r4, r5, r6, pc}
 800a310:	20000f58 	.word	0x20000f58

0800a314 <_malloc_r>:
 800a314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a318:	1ccd      	adds	r5, r1, #3
 800a31a:	f025 0503 	bic.w	r5, r5, #3
 800a31e:	3508      	adds	r5, #8
 800a320:	2d0c      	cmp	r5, #12
 800a322:	bf38      	it	cc
 800a324:	250c      	movcc	r5, #12
 800a326:	2d00      	cmp	r5, #0
 800a328:	4607      	mov	r7, r0
 800a32a:	db01      	blt.n	800a330 <_malloc_r+0x1c>
 800a32c:	42a9      	cmp	r1, r5
 800a32e:	d905      	bls.n	800a33c <_malloc_r+0x28>
 800a330:	230c      	movs	r3, #12
 800a332:	603b      	str	r3, [r7, #0]
 800a334:	2600      	movs	r6, #0
 800a336:	4630      	mov	r0, r6
 800a338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a33c:	4e2e      	ldr	r6, [pc, #184]	; (800a3f8 <_malloc_r+0xe4>)
 800a33e:	f000 f89d 	bl	800a47c <__malloc_lock>
 800a342:	6833      	ldr	r3, [r6, #0]
 800a344:	461c      	mov	r4, r3
 800a346:	bb34      	cbnz	r4, 800a396 <_malloc_r+0x82>
 800a348:	4629      	mov	r1, r5
 800a34a:	4638      	mov	r0, r7
 800a34c:	f7ff ffc2 	bl	800a2d4 <sbrk_aligned>
 800a350:	1c43      	adds	r3, r0, #1
 800a352:	4604      	mov	r4, r0
 800a354:	d14d      	bne.n	800a3f2 <_malloc_r+0xde>
 800a356:	6834      	ldr	r4, [r6, #0]
 800a358:	4626      	mov	r6, r4
 800a35a:	2e00      	cmp	r6, #0
 800a35c:	d140      	bne.n	800a3e0 <_malloc_r+0xcc>
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	4631      	mov	r1, r6
 800a362:	4638      	mov	r0, r7
 800a364:	eb04 0803 	add.w	r8, r4, r3
 800a368:	f000 f878 	bl	800a45c <_sbrk_r>
 800a36c:	4580      	cmp	r8, r0
 800a36e:	d13a      	bne.n	800a3e6 <_malloc_r+0xd2>
 800a370:	6821      	ldr	r1, [r4, #0]
 800a372:	3503      	adds	r5, #3
 800a374:	1a6d      	subs	r5, r5, r1
 800a376:	f025 0503 	bic.w	r5, r5, #3
 800a37a:	3508      	adds	r5, #8
 800a37c:	2d0c      	cmp	r5, #12
 800a37e:	bf38      	it	cc
 800a380:	250c      	movcc	r5, #12
 800a382:	4629      	mov	r1, r5
 800a384:	4638      	mov	r0, r7
 800a386:	f7ff ffa5 	bl	800a2d4 <sbrk_aligned>
 800a38a:	3001      	adds	r0, #1
 800a38c:	d02b      	beq.n	800a3e6 <_malloc_r+0xd2>
 800a38e:	6823      	ldr	r3, [r4, #0]
 800a390:	442b      	add	r3, r5
 800a392:	6023      	str	r3, [r4, #0]
 800a394:	e00e      	b.n	800a3b4 <_malloc_r+0xa0>
 800a396:	6822      	ldr	r2, [r4, #0]
 800a398:	1b52      	subs	r2, r2, r5
 800a39a:	d41e      	bmi.n	800a3da <_malloc_r+0xc6>
 800a39c:	2a0b      	cmp	r2, #11
 800a39e:	d916      	bls.n	800a3ce <_malloc_r+0xba>
 800a3a0:	1961      	adds	r1, r4, r5
 800a3a2:	42a3      	cmp	r3, r4
 800a3a4:	6025      	str	r5, [r4, #0]
 800a3a6:	bf18      	it	ne
 800a3a8:	6059      	strne	r1, [r3, #4]
 800a3aa:	6863      	ldr	r3, [r4, #4]
 800a3ac:	bf08      	it	eq
 800a3ae:	6031      	streq	r1, [r6, #0]
 800a3b0:	5162      	str	r2, [r4, r5]
 800a3b2:	604b      	str	r3, [r1, #4]
 800a3b4:	4638      	mov	r0, r7
 800a3b6:	f104 060b 	add.w	r6, r4, #11
 800a3ba:	f000 f865 	bl	800a488 <__malloc_unlock>
 800a3be:	f026 0607 	bic.w	r6, r6, #7
 800a3c2:	1d23      	adds	r3, r4, #4
 800a3c4:	1af2      	subs	r2, r6, r3
 800a3c6:	d0b6      	beq.n	800a336 <_malloc_r+0x22>
 800a3c8:	1b9b      	subs	r3, r3, r6
 800a3ca:	50a3      	str	r3, [r4, r2]
 800a3cc:	e7b3      	b.n	800a336 <_malloc_r+0x22>
 800a3ce:	6862      	ldr	r2, [r4, #4]
 800a3d0:	42a3      	cmp	r3, r4
 800a3d2:	bf0c      	ite	eq
 800a3d4:	6032      	streq	r2, [r6, #0]
 800a3d6:	605a      	strne	r2, [r3, #4]
 800a3d8:	e7ec      	b.n	800a3b4 <_malloc_r+0xa0>
 800a3da:	4623      	mov	r3, r4
 800a3dc:	6864      	ldr	r4, [r4, #4]
 800a3de:	e7b2      	b.n	800a346 <_malloc_r+0x32>
 800a3e0:	4634      	mov	r4, r6
 800a3e2:	6876      	ldr	r6, [r6, #4]
 800a3e4:	e7b9      	b.n	800a35a <_malloc_r+0x46>
 800a3e6:	230c      	movs	r3, #12
 800a3e8:	603b      	str	r3, [r7, #0]
 800a3ea:	4638      	mov	r0, r7
 800a3ec:	f000 f84c 	bl	800a488 <__malloc_unlock>
 800a3f0:	e7a1      	b.n	800a336 <_malloc_r+0x22>
 800a3f2:	6025      	str	r5, [r4, #0]
 800a3f4:	e7de      	b.n	800a3b4 <_malloc_r+0xa0>
 800a3f6:	bf00      	nop
 800a3f8:	20000f54 	.word	0x20000f54

0800a3fc <_realloc_r>:
 800a3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a400:	4680      	mov	r8, r0
 800a402:	4614      	mov	r4, r2
 800a404:	460e      	mov	r6, r1
 800a406:	b921      	cbnz	r1, 800a412 <_realloc_r+0x16>
 800a408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a40c:	4611      	mov	r1, r2
 800a40e:	f7ff bf81 	b.w	800a314 <_malloc_r>
 800a412:	b92a      	cbnz	r2, 800a420 <_realloc_r+0x24>
 800a414:	f000 f83e 	bl	800a494 <_free_r>
 800a418:	4625      	mov	r5, r4
 800a41a:	4628      	mov	r0, r5
 800a41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a420:	f000 f884 	bl	800a52c <_malloc_usable_size_r>
 800a424:	4284      	cmp	r4, r0
 800a426:	4607      	mov	r7, r0
 800a428:	d802      	bhi.n	800a430 <_realloc_r+0x34>
 800a42a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a42e:	d812      	bhi.n	800a456 <_realloc_r+0x5a>
 800a430:	4621      	mov	r1, r4
 800a432:	4640      	mov	r0, r8
 800a434:	f7ff ff6e 	bl	800a314 <_malloc_r>
 800a438:	4605      	mov	r5, r0
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d0ed      	beq.n	800a41a <_realloc_r+0x1e>
 800a43e:	42bc      	cmp	r4, r7
 800a440:	4622      	mov	r2, r4
 800a442:	4631      	mov	r1, r6
 800a444:	bf28      	it	cs
 800a446:	463a      	movcs	r2, r7
 800a448:	f7ff fee2 	bl	800a210 <memcpy>
 800a44c:	4631      	mov	r1, r6
 800a44e:	4640      	mov	r0, r8
 800a450:	f000 f820 	bl	800a494 <_free_r>
 800a454:	e7e1      	b.n	800a41a <_realloc_r+0x1e>
 800a456:	4635      	mov	r5, r6
 800a458:	e7df      	b.n	800a41a <_realloc_r+0x1e>
	...

0800a45c <_sbrk_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d06      	ldr	r5, [pc, #24]	; (800a478 <_sbrk_r+0x1c>)
 800a460:	2300      	movs	r3, #0
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	602b      	str	r3, [r5, #0]
 800a468:	f7fa fe2c 	bl	80050c4 <_sbrk>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_sbrk_r+0x1a>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	b103      	cbz	r3, 800a476 <_sbrk_r+0x1a>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	20000f5c 	.word	0x20000f5c

0800a47c <__malloc_lock>:
 800a47c:	4801      	ldr	r0, [pc, #4]	; (800a484 <__malloc_lock+0x8>)
 800a47e:	f000 b85d 	b.w	800a53c <__retarget_lock_acquire_recursive>
 800a482:	bf00      	nop
 800a484:	20000f60 	.word	0x20000f60

0800a488 <__malloc_unlock>:
 800a488:	4801      	ldr	r0, [pc, #4]	; (800a490 <__malloc_unlock+0x8>)
 800a48a:	f000 b858 	b.w	800a53e <__retarget_lock_release_recursive>
 800a48e:	bf00      	nop
 800a490:	20000f60 	.word	0x20000f60

0800a494 <_free_r>:
 800a494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a496:	2900      	cmp	r1, #0
 800a498:	d044      	beq.n	800a524 <_free_r+0x90>
 800a49a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a49e:	9001      	str	r0, [sp, #4]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f1a1 0404 	sub.w	r4, r1, #4
 800a4a6:	bfb8      	it	lt
 800a4a8:	18e4      	addlt	r4, r4, r3
 800a4aa:	f7ff ffe7 	bl	800a47c <__malloc_lock>
 800a4ae:	4a1e      	ldr	r2, [pc, #120]	; (800a528 <_free_r+0x94>)
 800a4b0:	9801      	ldr	r0, [sp, #4]
 800a4b2:	6813      	ldr	r3, [r2, #0]
 800a4b4:	b933      	cbnz	r3, 800a4c4 <_free_r+0x30>
 800a4b6:	6063      	str	r3, [r4, #4]
 800a4b8:	6014      	str	r4, [r2, #0]
 800a4ba:	b003      	add	sp, #12
 800a4bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4c0:	f7ff bfe2 	b.w	800a488 <__malloc_unlock>
 800a4c4:	42a3      	cmp	r3, r4
 800a4c6:	d908      	bls.n	800a4da <_free_r+0x46>
 800a4c8:	6825      	ldr	r5, [r4, #0]
 800a4ca:	1961      	adds	r1, r4, r5
 800a4cc:	428b      	cmp	r3, r1
 800a4ce:	bf01      	itttt	eq
 800a4d0:	6819      	ldreq	r1, [r3, #0]
 800a4d2:	685b      	ldreq	r3, [r3, #4]
 800a4d4:	1949      	addeq	r1, r1, r5
 800a4d6:	6021      	streq	r1, [r4, #0]
 800a4d8:	e7ed      	b.n	800a4b6 <_free_r+0x22>
 800a4da:	461a      	mov	r2, r3
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	b10b      	cbz	r3, 800a4e4 <_free_r+0x50>
 800a4e0:	42a3      	cmp	r3, r4
 800a4e2:	d9fa      	bls.n	800a4da <_free_r+0x46>
 800a4e4:	6811      	ldr	r1, [r2, #0]
 800a4e6:	1855      	adds	r5, r2, r1
 800a4e8:	42a5      	cmp	r5, r4
 800a4ea:	d10b      	bne.n	800a504 <_free_r+0x70>
 800a4ec:	6824      	ldr	r4, [r4, #0]
 800a4ee:	4421      	add	r1, r4
 800a4f0:	1854      	adds	r4, r2, r1
 800a4f2:	42a3      	cmp	r3, r4
 800a4f4:	6011      	str	r1, [r2, #0]
 800a4f6:	d1e0      	bne.n	800a4ba <_free_r+0x26>
 800a4f8:	681c      	ldr	r4, [r3, #0]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	6053      	str	r3, [r2, #4]
 800a4fe:	4421      	add	r1, r4
 800a500:	6011      	str	r1, [r2, #0]
 800a502:	e7da      	b.n	800a4ba <_free_r+0x26>
 800a504:	d902      	bls.n	800a50c <_free_r+0x78>
 800a506:	230c      	movs	r3, #12
 800a508:	6003      	str	r3, [r0, #0]
 800a50a:	e7d6      	b.n	800a4ba <_free_r+0x26>
 800a50c:	6825      	ldr	r5, [r4, #0]
 800a50e:	1961      	adds	r1, r4, r5
 800a510:	428b      	cmp	r3, r1
 800a512:	bf04      	itt	eq
 800a514:	6819      	ldreq	r1, [r3, #0]
 800a516:	685b      	ldreq	r3, [r3, #4]
 800a518:	6063      	str	r3, [r4, #4]
 800a51a:	bf04      	itt	eq
 800a51c:	1949      	addeq	r1, r1, r5
 800a51e:	6021      	streq	r1, [r4, #0]
 800a520:	6054      	str	r4, [r2, #4]
 800a522:	e7ca      	b.n	800a4ba <_free_r+0x26>
 800a524:	b003      	add	sp, #12
 800a526:	bd30      	pop	{r4, r5, pc}
 800a528:	20000f54 	.word	0x20000f54

0800a52c <_malloc_usable_size_r>:
 800a52c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a530:	1f18      	subs	r0, r3, #4
 800a532:	2b00      	cmp	r3, #0
 800a534:	bfbc      	itt	lt
 800a536:	580b      	ldrlt	r3, [r1, r0]
 800a538:	18c0      	addlt	r0, r0, r3
 800a53a:	4770      	bx	lr

0800a53c <__retarget_lock_acquire_recursive>:
 800a53c:	4770      	bx	lr

0800a53e <__retarget_lock_release_recursive>:
 800a53e:	4770      	bx	lr

0800a540 <_init>:
 800a540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a542:	bf00      	nop
 800a544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a546:	bc08      	pop	{r3}
 800a548:	469e      	mov	lr, r3
 800a54a:	4770      	bx	lr

0800a54c <_fini>:
 800a54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a54e:	bf00      	nop
 800a550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a552:	bc08      	pop	{r3}
 800a554:	469e      	mov	lr, r3
 800a556:	4770      	bx	lr
