
0212.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af10  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800b0d8  0800b0d8  0001b0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b474  0800b474  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800b474  0800b474  0001b474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b47c  0800b47c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b47c  0800b47c  0001b47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b484  0800b484  0001b484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800b488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ff0  20000084  0800b50c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001074  0800b50c  00021074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022900  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000421c  00000000  00000000  000429b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e0  00000000  00000000  00046bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  000481b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027825  00000000  00000000  00049628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df12  00000000  00000000  00070e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eec06  00000000  00000000  0008ed5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017d965  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060d4  00000000  00000000  0017d9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000084 	.word	0x20000084
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b0c0 	.word	0x0800b0c0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000088 	.word	0x20000088
 8000204:	0800b0c0 	.word	0x0800b0c0

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b974 	b.w	8000d04 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468e      	mov	lr, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14d      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4694      	mov	ip, r2
 8000a46:	d969      	bls.n	8000b1c <__udivmoddi4+0xe8>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b152      	cbz	r2, 8000a64 <__udivmoddi4+0x30>
 8000a4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a52:	f1c2 0120 	rsb	r1, r2, #32
 8000a56:	fa20 f101 	lsr.w	r1, r0, r1
 8000a5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a62:	4094      	lsls	r4, r2
 8000a64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a68:	0c21      	lsrs	r1, r4, #16
 8000a6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a6e:	fa1f f78c 	uxth.w	r7, ip
 8000a72:	fb08 e316 	mls	r3, r8, r6, lr
 8000a76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a7a:	fb06 f107 	mul.w	r1, r6, r7
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8a:	f080 811f 	bcs.w	8000ccc <__udivmoddi4+0x298>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 811c 	bls.w	8000ccc <__udivmoddi4+0x298>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa0:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa8:	fb00 f707 	mul.w	r7, r0, r7
 8000aac:	42a7      	cmp	r7, r4
 8000aae:	d90a      	bls.n	8000ac6 <__udivmoddi4+0x92>
 8000ab0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab8:	f080 810a 	bcs.w	8000cd0 <__udivmoddi4+0x29c>
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	f240 8107 	bls.w	8000cd0 <__udivmoddi4+0x29c>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aca:	1be4      	subs	r4, r4, r7
 8000acc:	2600      	movs	r6, #0
 8000ace:	b11d      	cbz	r5, 8000ad8 <__udivmoddi4+0xa4>
 8000ad0:	40d4      	lsrs	r4, r2
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d909      	bls.n	8000af6 <__udivmoddi4+0xc2>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	f000 80ef 	beq.w	8000cc6 <__udivmoddi4+0x292>
 8000ae8:	2600      	movs	r6, #0
 8000aea:	e9c5 0100 	strd	r0, r1, [r5]
 8000aee:	4630      	mov	r0, r6
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	fab3 f683 	clz	r6, r3
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d14a      	bne.n	8000b94 <__udivmoddi4+0x160>
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xd4>
 8000b02:	4282      	cmp	r2, r0
 8000b04:	f200 80f9 	bhi.w	8000cfa <__udivmoddi4+0x2c6>
 8000b08:	1a84      	subs	r4, r0, r2
 8000b0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	469e      	mov	lr, r3
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d0e0      	beq.n	8000ad8 <__udivmoddi4+0xa4>
 8000b16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b1a:	e7dd      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000b1c:	b902      	cbnz	r2, 8000b20 <__udivmoddi4+0xec>
 8000b1e:	deff      	udf	#255	; 0xff
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	f040 8092 	bne.w	8000c4e <__udivmoddi4+0x21a>
 8000b2a:	eba1 010c 	sub.w	r1, r1, ip
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2601      	movs	r6, #1
 8000b38:	0c20      	lsrs	r0, r4, #16
 8000b3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b46:	fb0e f003 	mul.w	r0, lr, r3
 8000b4a:	4288      	cmp	r0, r1
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x12c>
 8000b4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x12a>
 8000b58:	4288      	cmp	r0, r1
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2c0>
 8000b5e:	4643      	mov	r3, r8
 8000b60:	1a09      	subs	r1, r1, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b68:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x156>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x154>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2ca>
 8000b88:	4608      	mov	r0, r1
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b92:	e79c      	b.n	8000ace <__udivmoddi4+0x9a>
 8000b94:	f1c6 0720 	rsb	r7, r6, #32
 8000b98:	40b3      	lsls	r3, r6
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ba6:	fa01 f306 	lsl.w	r3, r1, r6
 8000baa:	431c      	orrs	r4, r3
 8000bac:	40f9      	lsrs	r1, r7
 8000bae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bba:	0c20      	lsrs	r0, r4, #16
 8000bbc:	fa1f fe8c 	uxth.w	lr, ip
 8000bc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bcc:	4288      	cmp	r0, r1
 8000bce:	fa02 f206 	lsl.w	r2, r2, r6
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b8>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4461      	add	r1, ip
 8000bec:	1a09      	subs	r1, r1, r0
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c00:	458e      	cmp	lr, r1
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1e2>
 8000c04:	eb1c 0101 	adds.w	r1, ip, r1
 8000c08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c0e:	458e      	cmp	lr, r1
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4461      	add	r1, ip
 8000c16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c1e:	eba1 010e 	sub.w	r1, r1, lr
 8000c22:	42a1      	cmp	r1, r4
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46a6      	mov	lr, r4
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c2c:	b15d      	cbz	r5, 8000c46 <__udivmoddi4+0x212>
 8000c2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c32:	eb61 010e 	sbc.w	r1, r1, lr
 8000c36:	fa01 f707 	lsl.w	r7, r1, r7
 8000c3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c3e:	40f1      	lsrs	r1, r6
 8000c40:	431f      	orrs	r7, r3
 8000c42:	e9c5 7100 	strd	r7, r1, [r5]
 8000c46:	2600      	movs	r6, #0
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	f1c2 0320 	rsb	r3, r2, #32
 8000c52:	40d8      	lsrs	r0, r3
 8000c54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c58:	fa21 f303 	lsr.w	r3, r1, r3
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4301      	orrs	r1, r0
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c70:	0c0b      	lsrs	r3, r1, #16
 8000c72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c76:	fb00 f60e 	mul.w	r6, r0, lr
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x260>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b8>
 8000c8c:	429e      	cmp	r6, r3
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b8>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4463      	add	r3, ip
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	b289      	uxth	r1, r1
 8000c98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x28a>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cba:	3e02      	subs	r6, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	1ac9      	subs	r1, r1, r3
 8000cc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0x104>
 8000cc6:	462e      	mov	r6, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e705      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e3      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6f8      	b.n	8000ac6 <__udivmoddi4+0x92>
 8000cd4:	454b      	cmp	r3, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f8>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f8>
 8000ce4:	4646      	mov	r6, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x28a>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1e2>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b8>
 8000cf4:	3b02      	subs	r3, #2
 8000cf6:	4461      	add	r1, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x12c>
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	e709      	b.n	8000b12 <__udivmoddi4+0xde>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x156>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	0a5a      	lsrs	r2, r3, #9
 8000d18:	490f      	ldr	r1, [pc, #60]	; (8000d58 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000d1a:	fba1 1202 	umull	r1, r2, r1, r2
 8000d1e:	09d2      	lsrs	r2, r2, #7
 8000d20:	490e      	ldr	r1, [pc, #56]	; (8000d5c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000d22:	fb01 f202 	mul.w	r2, r1, r2
 8000d26:	1a9b      	subs	r3, r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	0a5b      	lsrs	r3, r3, #9
 8000d30:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000d32:	fba2 2303 	umull	r2, r3, r2, r3
 8000d36:	09db      	lsrs	r3, r3, #7
 8000d38:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	441a      	add	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	601a      	str	r2, [r3, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	00044b83 	.word	0x00044b83
 8000d5c:	3b9aca00 	.word	0x3b9aca00

08000d60 <UART_Send>:
#include "gpio.h"
#include <math.h>

extern UART_HandleTypeDef huart3;
int Checksum_Calc, count = 0;
void UART_Send(uint8_t u8_data) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
	uint8_t *u8_pointer = &u8_data;
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, u8_pointer, 1, 100);
 8000d6e:	2364      	movs	r3, #100	; 0x64
 8000d70:	2201      	movs	r2, #1
 8000d72:	68f9      	ldr	r1, [r7, #12]
 8000d74:	4806      	ldr	r0, [pc, #24]	; (8000d90 <UART_Send+0x30>)
 8000d76:	f008 fd37 	bl	80097e8 <HAL_UART_Transmit>

	Checksum_Calc += u8_data;
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <UART_Send+0x34>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <UART_Send+0x34>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000e9c 	.word	0x20000e9c
 8000d94:	200000a0 	.word	0x200000a0

08000d98 <UART_Send_SetMotorPosition>:

void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position,
		uint16_t Time) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
 8000da2:	460b      	mov	r3, r1
 8000da4:	80bb      	strh	r3, [r7, #4]
 8000da6:	4613      	mov	r3, r2
 8000da8:	807b      	strh	r3, [r7, #2]
	Checksum_Calc = 0;
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <UART_Send_SetMotorPosition+0x84>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
	UART_Send(0x80 + motorId);    //header mark & broadcast ID
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	3b80      	subs	r3, #128	; 0x80
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ffd1 	bl	8000d60 <UART_Send>
	UART_Send(0x83);              //header mark & command code
 8000dbe:	2083      	movs	r0, #131	; 0x83
 8000dc0:	f7ff ffce 	bl	8000d60 <UART_Send>
	UART_Send(0x05);              //total data length
 8000dc4:	2005      	movs	r0, #5
 8000dc6:	f7ff ffcb 	bl	8000d60 <UART_Send>
	UART_Send((Position / 256) & 0x7F);  //Servo Pos_H
 8000dca:	88bb      	ldrh	r3, [r7, #4]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ffc1 	bl	8000d60 <UART_Send>
	UART_Send(Position % 256);           //Servo Pos_L
 8000dde:	88bb      	ldrh	r3, [r7, #4]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ffbc 	bl	8000d60 <UART_Send>
	UART_Send((Time / 256) & 0x7F); //Servo Time_H
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	0a1b      	lsrs	r3, r3, #8
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ffb2 	bl	8000d60 <UART_Send>
	UART_Send(Time % 256);          //Servo Time_L
 8000dfc:	887b      	ldrh	r3, [r7, #2]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ffad 	bl	8000d60 <UART_Send>
	UART_Send(Checksum_Calc);     //data length (one servo with time and speed)
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <UART_Send_SetMotorPosition+0x84>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ffa7 	bl	8000d60 <UART_Send>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200000a0 	.word	0x200000a0

08000e20 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e26:	463b      	mov	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e32:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e34:	4a2f      	ldr	r2, [pc, #188]	; (8000ef4 <MX_ADC1_Init+0xd4>)
 8000e36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e38:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e40:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e46:	4b2a      	ldr	r3, [pc, #168]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e4c:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e52:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5a:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e60:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e62:	4a25      	ldr	r2, [pc, #148]	; (8000ef8 <MX_ADC1_Init+0xd8>)
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e66:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000e6c:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e6e:	2203      	movs	r2, #3
 8000e70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e80:	481b      	ldr	r0, [pc, #108]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000e82:	f005 fb69 	bl	8006558 <HAL_ADC_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e8c:	f001 fc2a 	bl	80026e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e90:	2305      	movs	r3, #5
 8000e92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000ea2:	f005 fb9d 	bl	80065e0 <HAL_ADC_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000eac:	f001 fc1a 	bl	80026e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000eb0:	2306      	movs	r3, #6
 8000eb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000ebe:	f005 fb8f 	bl	80065e0 <HAL_ADC_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ec8:	f001 fc0c 	bl	80026e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ecc:	2307      	movs	r3, #7
 8000ece:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_ADC1_Init+0xd0>)
 8000eda:	f005 fb81 	bl	80065e0 <HAL_ADC_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000ee4:	f001 fbfe 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200000a4 	.word	0x200000a4
 8000ef4:	40012000 	.word	0x40012000
 8000ef8:	0f000001 	.word	0x0f000001

08000efc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a2f      	ldr	r2, [pc, #188]	; (8000fd8 <HAL_ADC_MspInit+0xdc>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d157      	bne.n	8000fce <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a2d      	ldr	r2, [pc, #180]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a26      	ldr	r2, [pc, #152]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f56:	23e0      	movs	r3, #224	; 0xe0
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	481d      	ldr	r0, [pc, #116]	; (8000fe0 <HAL_ADC_MspInit+0xe4>)
 8000f6a:	f006 fb0b 	bl	8007584 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f70:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <HAL_ADC_MspInit+0xec>)
 8000f72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f94:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fa4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fb2:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000fb4:	f005 fe86 	bl	8006cc4 <HAL_DMA_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000fbe:	f001 fb91 	bl	80026e4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000fc6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40012000 	.word	0x40012000
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	200000ec 	.word	0x200000ec
 8000fe8:	40026410 	.word	0x40026410

08000fec <suck_the_cake>:
		cherry_delay_temp;
extern int rotate_state[3], rotate_dir, rotate_temp, temp_pub;
int s = 0;
int step_debug;
int rotate_offset = 0;
void suck_the_cake(int servonum, int order) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]

	while (1) {
		if (step == 0) {
 8000ff6:	4b35      	ldr	r3, [pc, #212]	; (80010cc <suck_the_cake+0xe0>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d000      	beq.n	8001000 <suck_the_cake+0x14>
 8000ffe:	e7fa      	b.n	8000ff6 <suck_the_cake+0xa>
			break;
 8001000:	bf00      	nop
		}

	}
	if (servonum == 1) {
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d110      	bne.n	800102a <suck_the_cake+0x3e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 20000 * 255); // open pump1
 8001008:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <suck_the_cake+0xe4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a31      	ldr	r2, [pc, #196]	; (80010d4 <suck_the_cake+0xe8>)
 800100e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);        // close valve1
 8001010:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <suck_the_cake+0xe4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2200      	movs	r2, #0
 8001016:	639a      	str	r2, [r3, #56]	; 0x38
		suck1 = 1;
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <suck_the_cake+0xec>)
 800101a:	2201      	movs	r2, #1
 800101c:	601a      	str	r2, [r3, #0]
		suck_temp++;
 800101e:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <suck_the_cake+0xf0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	4a2d      	ldr	r2, [pc, #180]	; (80010dc <suck_the_cake+0xf0>)
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	e026      	b.n	8001078 <suck_the_cake+0x8c>
	}
	else if (servonum == 4) {
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b04      	cmp	r3, #4
 800102e:	d110      	bne.n	8001052 <suck_the_cake+0x66>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 20000 * 255); // open pump4
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <suck_the_cake+0xf4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a27      	ldr	r2, [pc, #156]	; (80010d4 <suck_the_cake+0xe8>)
 8001036:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);         // close valve4
 8001038:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <suck_the_cake+0xf4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	639a      	str	r2, [r3, #56]	; 0x38
		suck4 = 1;
 8001040:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <suck_the_cake+0xf8>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]
		suck_temp++;
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <suck_the_cake+0xf0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	4a23      	ldr	r2, [pc, #140]	; (80010dc <suck_the_cake+0xf0>)
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	e012      	b.n	8001078 <suck_the_cake+0x8c>
	}
	else if (servonum == 3) {
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b03      	cmp	r3, #3
 8001056:	d10f      	bne.n	8001078 <suck_the_cake+0x8c>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 20000 * 255); // open pump3
 8001058:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <suck_the_cake+0xf4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <suck_the_cake+0xe8>)
 800105e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);         // close valve3
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <suck_the_cake+0xf4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2200      	movs	r2, #0
 8001066:	641a      	str	r2, [r3, #64]	; 0x40
		suck3 = 1;
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <suck_the_cake+0xfc>)
 800106a:	2201      	movs	r2, #1
 800106c:	601a      	str	r2, [r3, #0]
		suck_temp++;
 800106e:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <suck_the_cake+0xf0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	4a19      	ldr	r2, [pc, #100]	; (80010dc <suck_the_cake+0xf0>)
 8001076:	6013      	str	r3, [r2, #0]
	}
	if (order == 1)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d109      	bne.n	8001092 <suck_the_cake+0xa6>
		UART_Send_SetMotorPosition(servonum, 1500, 300); // suck the top cake
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	b29b      	uxth	r3, r3
 8001082:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001086:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fe84 	bl	8000d98 <UART_Send_SetMotorPosition>
	else if (order == 2)
		UART_Send_SetMotorPosition(servonum, 1620, 300); // suck the middle cake
	else if (order == 3)
		UART_Send_SetMotorPosition(servonum, 1750, 300); // suck the bottom cake

}
 8001090:	e018      	b.n	80010c4 <suck_the_cake+0xd8>
	else if (order == 2)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d109      	bne.n	80010ac <suck_the_cake+0xc0>
		UART_Send_SetMotorPosition(servonum, 1620, 300); // suck the middle cake
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	b29b      	uxth	r3, r3
 800109c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010a0:	f240 6154 	movw	r1, #1620	; 0x654
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fe77 	bl	8000d98 <UART_Send_SetMotorPosition>
}
 80010aa:	e00b      	b.n	80010c4 <suck_the_cake+0xd8>
	else if (order == 3)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d108      	bne.n	80010c4 <suck_the_cake+0xd8>
		UART_Send_SetMotorPosition(servonum, 1750, 300); // suck the bottom cake
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010ba:	f240 61d6 	movw	r1, #1750	; 0x6d6
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fe6a 	bl	8000d98 <UART_Send_SetMotorPosition>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000bfc 	.word	0x20000bfc
 80010d0:	20000c64 	.word	0x20000c64
 80010d4:	004dd1e0 	.word	0x004dd1e0
 80010d8:	20000bac 	.word	0x20000bac
 80010dc:	20000bc4 	.word	0x20000bc4
 80010e0:	20000cac 	.word	0x20000cac
 80010e4:	20000bb0 	.word	0x20000bb0
 80010e8:	20000bb4 	.word	0x20000bb4

080010ec <press_sensor_feedback>:
void press_sensor_feedback() {          // wait for press_sensor feedback
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

	if (suck_temp != 0) {
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <press_sensor_feedback+0x60>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d014      	beq.n	8001122 <press_sensor_feedback+0x36>
		suck_delay_temp = -1;
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <press_sensor_feedback+0x64>)
 80010fa:	f04f 32ff 	mov.w	r2, #4294967295
 80010fe:	601a      	str	r2, [r3, #0]
		while (1) {
			if (suck_temp == 0) {
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <press_sensor_feedback+0x60>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1fb      	bne.n	8001100 <press_sensor_feedback+0x14>
				if (suck_delay_temp == -1)
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <press_sensor_feedback+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001110:	d102      	bne.n	8001118 <press_sensor_feedback+0x2c>
					suck_delay_temp = 1;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <press_sensor_feedback+0x64>)
 8001114:	2201      	movs	r2, #1
 8001116:	601a      	str	r2, [r3, #0]
				if (suck_delay_temp == 0)
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <press_sensor_feedback+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00d      	beq.n	800113c <press_sensor_feedback+0x50>
			if (suck_temp == 0) {
 8001120:	e7ee      	b.n	8001100 <press_sensor_feedback+0x14>
					break;
			}
		}
	}
	else if (unsuck_temp != 0) {
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <press_sensor_feedback+0x68>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00b      	beq.n	8001142 <press_sensor_feedback+0x56>
		while (1) {
			if (unsuck_temp == 0) {
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <press_sensor_feedback+0x68>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1fb      	bne.n	800112a <press_sensor_feedback+0x3e>
				if (unsuck_delay_temp == 0)
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <press_sensor_feedback+0x6c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <press_sensor_feedback+0x54>
			if (unsuck_temp == 0) {
 800113a:	e7f6      	b.n	800112a <press_sensor_feedback+0x3e>
					break;
 800113c:	bf00      	nop
 800113e:	e000      	b.n	8001142 <press_sensor_feedback+0x56>
					break;
 8001140:	bf00      	nop
			}
		}
	}
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	20000bc4 	.word	0x20000bc4
 8001150:	20000c34 	.word	0x20000c34
 8001154:	20000bc8 	.word	0x20000bc8
 8001158:	20000c30 	.word	0x20000c30

0800115c <unsuck_the_cake>:
void unsuck_the_cake(int servonum, int order) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]

	while (1) {
		if (step == 0)
 8001166:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <unsuck_the_cake+0xf4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d000      	beq.n	8001170 <unsuck_the_cake+0x14>
 800116e:	e7fa      	b.n	8001166 <unsuck_the_cake+0xa>
			break;
 8001170:	bf00      	nop
	}

	if (order == 1)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d109      	bne.n	800118c <unsuck_the_cake+0x30>
		UART_Send_SetMotorPosition(servonum, 1480, 300); // put the cake to the top 1320
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	b29b      	uxth	r3, r3
 800117c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001180:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fe07 	bl	8000d98 <UART_Send_SetMotorPosition>
 800118a:	e018      	b.n	80011be <unsuck_the_cake+0x62>
	else if (order == 2)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d109      	bne.n	80011a6 <unsuck_the_cake+0x4a>
		UART_Send_SetMotorPosition(servonum, 1480, 300); // put the cake to the middle 1225
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	b29b      	uxth	r3, r3
 8001196:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800119a:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fdfa 	bl	8000d98 <UART_Send_SetMotorPosition>
 80011a4:	e00b      	b.n	80011be <unsuck_the_cake+0x62>
	else if (order == 3)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d108      	bne.n	80011be <unsuck_the_cake+0x62>
		UART_Send_SetMotorPosition(servonum, 1480, 300); // put the cake to the bottom 1100
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011b4:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fded 	bl	8000d98 <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 80011be:	4b25      	ldr	r3, [pc, #148]	; (8001254 <unsuck_the_cake+0xf8>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0)
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <unsuck_the_cake+0xf8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d000      	beq.n	80011ce <unsuck_the_cake+0x72>
 80011cc:	e7fa      	b.n	80011c4 <unsuck_the_cake+0x68>
			break;
 80011ce:	bf00      	nop
	}
	if (servonum == 1) {
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d110      	bne.n	80011f8 <unsuck_the_cake+0x9c>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 2000 * 255); // open valve1
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <unsuck_the_cake+0xfc>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a20      	ldr	r2, [pc, #128]	; (800125c <unsuck_the_cake+0x100>)
 80011dc:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);          // close pump1
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <unsuck_the_cake+0xfc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2200      	movs	r2, #0
 80011e4:	635a      	str	r2, [r3, #52]	; 0x34
		unsuck1 = 1;
 80011e6:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <unsuck_the_cake+0x104>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	601a      	str	r2, [r3, #0]
		unsuck_temp++;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <unsuck_the_cake+0x108>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	4a1c      	ldr	r2, [pc, #112]	; (8001264 <unsuck_the_cake+0x108>)
 80011f4:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 2000 * 255); // open valve3
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);          // close pump3
		unsuck3 = 1;
		unsuck_temp++;
	}
}
 80011f6:	e026      	b.n	8001246 <unsuck_the_cake+0xea>
	else if (servonum == 4) {
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d110      	bne.n	8001220 <unsuck_the_cake+0xc4>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2000 * 255); // open valve4
 80011fe:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <unsuck_the_cake+0x10c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a16      	ldr	r2, [pc, #88]	; (800125c <unsuck_the_cake+0x100>)
 8001204:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);          // close pump4
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <unsuck_the_cake+0x10c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2200      	movs	r2, #0
 800120c:	635a      	str	r2, [r3, #52]	; 0x34
		unsuck4 = 1;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <unsuck_the_cake+0x110>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]
		unsuck_temp++;
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <unsuck_the_cake+0x108>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <unsuck_the_cake+0x108>)
 800121c:	6013      	str	r3, [r2, #0]
}
 800121e:	e012      	b.n	8001246 <unsuck_the_cake+0xea>
	else if (servonum == 3) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b03      	cmp	r3, #3
 8001224:	d10f      	bne.n	8001246 <unsuck_the_cake+0xea>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 2000 * 255); // open valve3
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <unsuck_the_cake+0x10c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a0c      	ldr	r2, [pc, #48]	; (800125c <unsuck_the_cake+0x100>)
 800122c:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);          // close pump3
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <unsuck_the_cake+0x10c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2200      	movs	r2, #0
 8001234:	63da      	str	r2, [r3, #60]	; 0x3c
		unsuck3 = 1;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <unsuck_the_cake+0x114>)
 8001238:	2201      	movs	r2, #1
 800123a:	601a      	str	r2, [r3, #0]
		unsuck_temp++;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <unsuck_the_cake+0x108>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <unsuck_the_cake+0x108>)
 8001244:	6013      	str	r3, [r2, #0]
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000bfc 	.word	0x20000bfc
 8001254:	20000c38 	.word	0x20000c38
 8001258:	20000c64 	.word	0x20000c64
 800125c:	0007c830 	.word	0x0007c830
 8001260:	20000bb8 	.word	0x20000bb8
 8001264:	20000bc8 	.word	0x20000bc8
 8001268:	20000cac 	.word	0x20000cac
 800126c:	20000bbc 	.word	0x20000bbc
 8001270:	20000bc0 	.word	0x20000bc0
 8001274:	00000000 	.word	0x00000000

08001278 <rotate_the_ring>:
void rotate_the_ring(int numb) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	if (num == 1 && cake_order != -1) {
 8001280:	4b8f      	ldr	r3, [pc, #572]	; (80014c0 <rotate_the_ring+0x248>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d11a      	bne.n	80012be <rotate_the_ring+0x46>
 8001288:	4b8e      	ldr	r3, [pc, #568]	; (80014c4 <rotate_the_ring+0x24c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d015      	beq.n	80012be <rotate_the_ring+0x46>
		rotate_offset = ((numb + 2 - 1) % 4);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3301      	adds	r3, #1
 8001296:	425a      	negs	r2, r3
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	f002 0203 	and.w	r2, r2, #3
 80012a0:	bf58      	it	pl
 80012a2:	4253      	negpl	r3, r2
 80012a4:	4a88      	ldr	r2, [pc, #544]	; (80014c8 <rotate_the_ring+0x250>)
 80012a6:	6013      	str	r3, [r2, #0]
		if (rotate_offset == 0)
 80012a8:	4b87      	ldr	r3, [pc, #540]	; (80014c8 <rotate_the_ring+0x250>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <rotate_the_ring+0x3e>
			rotate_offset = 4;
 80012b0:	4b85      	ldr	r3, [pc, #532]	; (80014c8 <rotate_the_ring+0x250>)
 80012b2:	2204      	movs	r2, #4
 80012b4:	601a      	str	r2, [r3, #0]
		numb = rotate_offset;
 80012b6:	4b84      	ldr	r3, [pc, #528]	; (80014c8 <rotate_the_ring+0x250>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	e03c      	b.n	8001338 <rotate_the_ring+0xc0>
	}
	else if (num == 2 && cake_order != -1) {
 80012be:	4b80      	ldr	r3, [pc, #512]	; (80014c0 <rotate_the_ring+0x248>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d11a      	bne.n	80012fc <rotate_the_ring+0x84>
 80012c6:	4b7f      	ldr	r3, [pc, #508]	; (80014c4 <rotate_the_ring+0x24c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ce:	d015      	beq.n	80012fc <rotate_the_ring+0x84>
		rotate_offset = (numb + 3 - 1) % 4;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3302      	adds	r3, #2
 80012d4:	425a      	negs	r2, r3
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	f002 0203 	and.w	r2, r2, #3
 80012de:	bf58      	it	pl
 80012e0:	4253      	negpl	r3, r2
 80012e2:	4a79      	ldr	r2, [pc, #484]	; (80014c8 <rotate_the_ring+0x250>)
 80012e4:	6013      	str	r3, [r2, #0]
		if (rotate_offset == 0)
 80012e6:	4b78      	ldr	r3, [pc, #480]	; (80014c8 <rotate_the_ring+0x250>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <rotate_the_ring+0x7c>
			rotate_offset = 4;
 80012ee:	4b76      	ldr	r3, [pc, #472]	; (80014c8 <rotate_the_ring+0x250>)
 80012f0:	2204      	movs	r2, #4
 80012f2:	601a      	str	r2, [r3, #0]

		numb = rotate_offset;
 80012f4:	4b74      	ldr	r3, [pc, #464]	; (80014c8 <rotate_the_ring+0x250>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	e01d      	b.n	8001338 <rotate_the_ring+0xc0>
	}
	else if (num == 3 && cake_order != -1) {
 80012fc:	4b70      	ldr	r3, [pc, #448]	; (80014c0 <rotate_the_ring+0x248>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b03      	cmp	r3, #3
 8001302:	d119      	bne.n	8001338 <rotate_the_ring+0xc0>
 8001304:	4b6f      	ldr	r3, [pc, #444]	; (80014c4 <rotate_the_ring+0x24c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800130c:	d014      	beq.n	8001338 <rotate_the_ring+0xc0>
		rotate_offset = (numb + 4 - 1) % 4;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3303      	adds	r3, #3
 8001312:	425a      	negs	r2, r3
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	f002 0203 	and.w	r2, r2, #3
 800131c:	bf58      	it	pl
 800131e:	4253      	negpl	r3, r2
 8001320:	4a69      	ldr	r2, [pc, #420]	; (80014c8 <rotate_the_ring+0x250>)
 8001322:	6013      	str	r3, [r2, #0]
		if (rotate_offset == 0)
 8001324:	4b68      	ldr	r3, [pc, #416]	; (80014c8 <rotate_the_ring+0x250>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <rotate_the_ring+0xba>
			rotate_offset = 4;
 800132c:	4b66      	ldr	r3, [pc, #408]	; (80014c8 <rotate_the_ring+0x250>)
 800132e:	2204      	movs	r2, #4
 8001330:	601a      	str	r2, [r3, #0]

		numb = rotate_offset;
 8001332:	4b65      	ldr	r3, [pc, #404]	; (80014c8 <rotate_the_ring+0x250>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	607b      	str	r3, [r7, #4]
	}
	rotate_state[0] = 0;
 8001338:	4b64      	ldr	r3, [pc, #400]	; (80014cc <rotate_the_ring+0x254>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
	rotate_state[1] = 0;
 800133e:	4b63      	ldr	r3, [pc, #396]	; (80014cc <rotate_the_ring+0x254>)
 8001340:	2200      	movs	r2, #0
 8001342:	605a      	str	r2, [r3, #4]
	rotate_state[2] = 0;
 8001344:	4b61      	ldr	r3, [pc, #388]	; (80014cc <rotate_the_ring+0x254>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
	if (numb == 1) {
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d106      	bne.n	800135e <rotate_the_ring+0xe6>
		step1 = 0;
 8001350:	4b5f      	ldr	r3, [pc, #380]	; (80014d0 <rotate_the_ring+0x258>)
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
		anglegoal = 0;
 8001356:	4b5f      	ldr	r3, [pc, #380]	; (80014d4 <rotate_the_ring+0x25c>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e01d      	b.n	800139a <rotate_the_ring+0x122>

	}
	else if (numb == 2) {
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d106      	bne.n	8001372 <rotate_the_ring+0xfa>
		step1 = 0;
 8001364:	4b5a      	ldr	r3, [pc, #360]	; (80014d0 <rotate_the_ring+0x258>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
		anglegoal = 90;
 800136a:	4b5a      	ldr	r3, [pc, #360]	; (80014d4 <rotate_the_ring+0x25c>)
 800136c:	225a      	movs	r2, #90	; 0x5a
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	e013      	b.n	800139a <rotate_the_ring+0x122>
	}
	else if (numb == 3) {
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b03      	cmp	r3, #3
 8001376:	d106      	bne.n	8001386 <rotate_the_ring+0x10e>
		step1 = 0;
 8001378:	4b55      	ldr	r3, [pc, #340]	; (80014d0 <rotate_the_ring+0x258>)
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
		anglegoal = 180;
 800137e:	4b55      	ldr	r3, [pc, #340]	; (80014d4 <rotate_the_ring+0x25c>)
 8001380:	22b4      	movs	r2, #180	; 0xb4
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e009      	b.n	800139a <rotate_the_ring+0x122>
	}
	else if (numb == 4) {
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b04      	cmp	r3, #4
 800138a:	d106      	bne.n	800139a <rotate_the_ring+0x122>
		step1 = 0;
 800138c:	4b50      	ldr	r3, [pc, #320]	; (80014d0 <rotate_the_ring+0x258>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
		anglegoal = 270;
 8001392:	4b50      	ldr	r3, [pc, #320]	; (80014d4 <rotate_the_ring+0x25c>)
 8001394:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001398:	601a      	str	r2, [r3, #0]
//	}
//	else if (numb == 7) {
//		step1 = 0;
//		anglegoal = -270;
//	}
	step1 = (anglegoal - anglebefore) * 5 * 8 / 1.8; // calculate the step1
 800139a:	4b4e      	ldr	r3, [pc, #312]	; (80014d4 <rotate_the_ring+0x25c>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4b4e      	ldr	r3, [pc, #312]	; (80014d8 <rotate_the_ring+0x260>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	1ad2      	subs	r2, r2, r3
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f885 	bl	80004bc <__aeabi_i2d>
 80013b2:	a341      	add	r3, pc, #260	; (adr r3, 80014b8 <rotate_the_ring+0x240>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7ff fa14 	bl	80007e4 <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff faf6 	bl	80009b4 <__aeabi_d2iz>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a41      	ldr	r2, [pc, #260]	; (80014d0 <rotate_the_ring+0x258>)
 80013cc:	6013      	str	r3, [r2, #0]
	if (step1 > 4000) {
 80013ce:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <rotate_the_ring+0x258>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80013d6:	dd06      	ble.n	80013e6 <rotate_the_ring+0x16e>
		step1 = step1 - 8000;
 80013d8:	4b3d      	ldr	r3, [pc, #244]	; (80014d0 <rotate_the_ring+0x258>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f5a3 53fa 	sub.w	r3, r3, #8000	; 0x1f40
 80013e0:	4a3b      	ldr	r2, [pc, #236]	; (80014d0 <rotate_the_ring+0x258>)
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	e00a      	b.n	80013fc <rotate_the_ring+0x184>
	}
	else if (step1 < -4000) {
 80013e6:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <rotate_the_ring+0x258>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 80013ee:	da05      	bge.n	80013fc <rotate_the_ring+0x184>
		step1 = 8000 + step1;
 80013f0:	4b37      	ldr	r3, [pc, #220]	; (80014d0 <rotate_the_ring+0x258>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 80013f8:	4a35      	ldr	r2, [pc, #212]	; (80014d0 <rotate_the_ring+0x258>)
 80013fa:	6013      	str	r3, [r2, #0]
	}

	rotate_temp = 0;
 80013fc:	4b37      	ldr	r3, [pc, #220]	; (80014dc <rotate_the_ring+0x264>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
	anglebefore = anglegoal;
 8001402:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <rotate_the_ring+0x25c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a34      	ldr	r2, [pc, #208]	; (80014d8 <rotate_the_ring+0x260>)
 8001408:	6013      	str	r3, [r2, #0]
	if (step1 >= 0) {
 800140a:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <rotate_the_ring+0x258>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db03      	blt.n	800141a <rotate_the_ring+0x1a2>
		dir_state1 = 1;
 8001412:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <rotate_the_ring+0x268>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e00b      	b.n	8001432 <rotate_the_ring+0x1ba>

	}

	else if (step1 < 0) {
 800141a:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <rotate_the_ring+0x258>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	da07      	bge.n	8001432 <rotate_the_ring+0x1ba>
		step1 = -step1;
 8001422:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <rotate_the_ring+0x258>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	425b      	negs	r3, r3
 8001428:	4a29      	ldr	r2, [pc, #164]	; (80014d0 <rotate_the_ring+0x258>)
 800142a:	6013      	str	r3, [r2, #0]

		dir_state1 = 0;
 800142c:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <rotate_the_ring+0x268>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
	}
	step1 = step1 + 500;
 8001432:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <rotate_the_ring+0x258>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800143a:	4a25      	ldr	r2, [pc, #148]	; (80014d0 <rotate_the_ring+0x258>)
 800143c:	6013      	str	r3, [r2, #0]
	step = step1;
 800143e:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <rotate_the_ring+0x258>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a28      	ldr	r2, [pc, #160]	; (80014e4 <rotate_the_ring+0x26c>)
 8001444:	6013      	str	r3, [r2, #0]
	step_debug = step;
 8001446:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <rotate_the_ring+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a27      	ldr	r2, [pc, #156]	; (80014e8 <rotate_the_ring+0x270>)
 800144c:	6013      	str	r3, [r2, #0]
	while (1) {
		if (numb == rotate_dir) {
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <rotate_the_ring+0x274>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	429a      	cmp	r2, r3
 8001456:	d10d      	bne.n	8001474 <rotate_the_ring+0x1fc>

			step = 2.86 * 5 * 8 / 1.8;
 8001458:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <rotate_the_ring+0x26c>)
 800145a:	223f      	movs	r2, #63	; 0x3f
 800145c:	601a      	str	r2, [r3, #0]
			step_debug = step;
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <rotate_the_ring+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a21      	ldr	r2, [pc, #132]	; (80014e8 <rotate_the_ring+0x270>)
 8001464:	6013      	str	r3, [r2, #0]
			s++;
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <rotate_the_ring+0x278>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	4a20      	ldr	r2, [pc, #128]	; (80014f0 <rotate_the_ring+0x278>)
 800146e:	6013      	str	r3, [r2, #0]
			numb = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
		}
		if (step == 0 && numb == 0) {
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <rotate_the_ring+0x26c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d107      	bne.n	800148c <rotate_the_ring+0x214>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d104      	bne.n	800148c <rotate_the_ring+0x214>
			arr = 1000;
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <rotate_the_ring+0x27c>)
 8001484:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001488:	601a      	str	r2, [r3, #0]

			break;
 800148a:	e00f      	b.n	80014ac <rotate_the_ring+0x234>
		}
		else if (step == 0 && numb != 0) {
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <rotate_the_ring+0x26c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1dc      	bne.n	800144e <rotate_the_ring+0x1d6>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0d9      	beq.n	800144e <rotate_the_ring+0x1d6>

			step = 90 * 5 * 8 / 1.8;
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <rotate_the_ring+0x26c>)
 800149c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80014a0:	601a      	str	r2, [r3, #0]
			step_debug = step;
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <rotate_the_ring+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <rotate_the_ring+0x270>)
 80014a8:	6013      	str	r3, [r2, #0]
		if (numb == rotate_dir) {
 80014aa:	e7d0      	b.n	800144e <rotate_the_ring+0x1d6>
		}
	}
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	f3af 8000 	nop.w
 80014b8:	cccccccd 	.word	0xcccccccd
 80014bc:	3ffccccc 	.word	0x3ffccccc
 80014c0:	20000c0c 	.word	0x20000c0c
 80014c4:	20000004 	.word	0x20000004
 80014c8:	20000154 	.word	0x20000154
 80014cc:	20000c50 	.word	0x20000c50
 80014d0:	20000b94 	.word	0x20000b94
 80014d4:	20000b9c 	.word	0x20000b9c
 80014d8:	20000ba0 	.word	0x20000ba0
 80014dc:	20000c58 	.word	0x20000c58
 80014e0:	20000b98 	.word	0x20000b98
 80014e4:	20000bfc 	.word	0x20000bfc
 80014e8:	20000150 	.word	0x20000150
 80014ec:	2000000c 	.word	0x2000000c
 80014f0:	2000014c 	.word	0x2000014c
 80014f4:	20000000 	.word	0x20000000

080014f8 <put_the_cherry>:
void put_the_cherry(int numb) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

	rotate_the_ring(numb);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff feb9 	bl	8001278 <rotate_the_ring>
	while (1) {
		if (step == 0) {
 8001506:	4b29      	ldr	r3, [pc, #164]	; (80015ac <put_the_cherry+0xb4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d000      	beq.n	8001510 <put_the_cherry+0x18>
 800150e:	e7fa      	b.n	8001506 <put_the_cherry+0xe>
			break;
 8001510:	bf00      	nop
		}
	}
	UART_Send_SetMotorPosition(5, 1330, 300);
 8001512:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001516:	f240 5132 	movw	r1, #1330	; 0x532
 800151a:	2005      	movs	r0, #5
 800151c:	f7ff fc3c 	bl	8000d98 <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <put_the_cherry+0xb8>)
 8001522:	2201      	movs	r2, #1
 8001524:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0)
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <put_the_cherry+0xb8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d000      	beq.n	8001530 <put_the_cherry+0x38>
 800152e:	e7fa      	b.n	8001526 <put_the_cherry+0x2e>
			break;
 8001530:	bf00      	nop
	}
	UART_Send_SetMotorPosition(6, 2100, 500);
 8001532:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001536:	f640 0134 	movw	r1, #2100	; 0x834
 800153a:	2006      	movs	r0, #6
 800153c:	f7ff fc2c 	bl	8000d98 <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <put_the_cherry+0xb8>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0)
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <put_the_cherry+0xb8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d000      	beq.n	8001550 <put_the_cherry+0x58>
 800154e:	e7fa      	b.n	8001546 <put_the_cherry+0x4e>
			break;
 8001550:	bf00      	nop
	}
	cherry_delay_temp = 1;
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <put_the_cherry+0xbc>)
 8001554:	2201      	movs	r2, #1
 8001556:	601a      	str	r2, [r3, #0]
	while (1) {
		if (cherry_delay_temp == 0)
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <put_the_cherry+0xbc>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d000      	beq.n	8001562 <put_the_cherry+0x6a>
 8001560:	e7fa      	b.n	8001558 <put_the_cherry+0x60>
			break;
 8001562:	bf00      	nop
	}
	UART_Send_SetMotorPosition(5, 1200, 300);
 8001564:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001568:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800156c:	2005      	movs	r0, #5
 800156e:	f7ff fc13 	bl	8000d98 <UART_Send_SetMotorPosition>

	servo_delay_temp = 1;
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <put_the_cherry+0xb8>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0)
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <put_the_cherry+0xb8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d000      	beq.n	8001582 <put_the_cherry+0x8a>
 8001580:	e7fa      	b.n	8001578 <put_the_cherry+0x80>
			break;
 8001582:	bf00      	nop
	}
	UART_Send_SetMotorPosition(6, 850, 500);
 8001584:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001588:	f240 3152 	movw	r1, #850	; 0x352
 800158c:	2006      	movs	r0, #6
 800158e:	f7ff fc03 	bl	8000d98 <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <put_the_cherry+0xb8>)
 8001594:	2201      	movs	r2, #1
 8001596:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0)
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <put_the_cherry+0xb8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d000      	beq.n	80015a2 <put_the_cherry+0xaa>
 80015a0:	e7fa      	b.n	8001598 <put_the_cherry+0xa0>
			break;
 80015a2:	bf00      	nop
	}

}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000bfc 	.word	0x20000bfc
 80015b0:	20000c38 	.word	0x20000c38
 80015b4:	20000c40 	.word	0x20000c40

080015b8 <judge_the_empty_and_order>:
void judge_the_empty_and_order() {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
//1=leftfront,2=rightfront,3=rightback,4=leftback
// let three servo turn to the correct side
	for (int i = 0; i < 4; i++) {
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	e00d      	b.n	80015e0 <judge_the_empty_and_order+0x28>
		if (hole[i] == 0) {
 80015c4:	4a83      	ldr	r2, [pc, #524]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d104      	bne.n	80015da <judge_the_empty_and_order+0x22>
			num = i + 1;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3301      	adds	r3, #1
 80015d4:	4a80      	ldr	r2, [pc, #512]	; (80017d8 <judge_the_empty_and_order+0x220>)
 80015d6:	6013      	str	r3, [r2, #0]
			break;
 80015d8:	e005      	b.n	80015e6 <judge_the_empty_and_order+0x2e>
	for (int i = 0; i < 4; i++) {
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3301      	adds	r3, #1
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	ddee      	ble.n	80015c4 <judge_the_empty_and_order+0xc>
		}
	}
	if (num == 1) {
 80015e6:	4b7c      	ldr	r3, [pc, #496]	; (80017d8 <judge_the_empty_and_order+0x220>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	f040 80ae 	bne.w	800174c <judge_the_empty_and_order+0x194>
		rotate_the_ring(2);       //90
 80015f0:	2002      	movs	r0, #2
 80015f2:	f7ff fe41 	bl	8001278 <rotate_the_ring>

		if (hole[1] == 'b' && hole[2] == 'y' && hole[3] == 'p') {
 80015f6:	4b77      	ldr	r3, [pc, #476]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 80015f8:	785b      	ldrb	r3, [r3, #1]
 80015fa:	2b62      	cmp	r3, #98	; 0x62
 80015fc:	d117      	bne.n	800162e <judge_the_empty_and_order+0x76>
 80015fe:	4b75      	ldr	r3, [pc, #468]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 8001600:	789b      	ldrb	r3, [r3, #2]
 8001602:	2b79      	cmp	r3, #121	; 0x79
 8001604:	d113      	bne.n	800162e <judge_the_empty_and_order+0x76>
 8001606:	4b73      	ldr	r3, [pc, #460]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 8001608:	78db      	ldrb	r3, [r3, #3]
 800160a:	2b70      	cmp	r3, #112	; 0x70
 800160c:	d10f      	bne.n	800162e <judge_the_empty_and_order+0x76>
			cake_order = 1;
 800160e:	4b73      	ldr	r3, [pc, #460]	; (80017dc <judge_the_empty_and_order+0x224>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8001614:	4b72      	ldr	r3, [pc, #456]	; (80017e0 <judge_the_empty_and_order+0x228>)
 8001616:	2201      	movs	r2, #1
 8001618:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 800161a:	4b71      	ldr	r3, [pc, #452]	; (80017e0 <judge_the_empty_and_order+0x228>)
 800161c:	2201      	movs	r2, #1
 800161e:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001620:	4b6f      	ldr	r3, [pc, #444]	; (80017e0 <judge_the_empty_and_order+0x228>)
 8001622:	2201      	movs	r2, #1
 8001624:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 8001626:	4b6e      	ldr	r3, [pc, #440]	; (80017e0 <judge_the_empty_and_order+0x228>)
 8001628:	2200      	movs	r2, #0
 800162a:	811a      	strh	r2, [r3, #8]
 800162c:	e2be      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
		else if (hole[1] == 'p' && hole[2] == 'y' && hole[3] == 'b') {
 800162e:	4b69      	ldr	r3, [pc, #420]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 8001630:	785b      	ldrb	r3, [r3, #1]
 8001632:	2b70      	cmp	r3, #112	; 0x70
 8001634:	d117      	bne.n	8001666 <judge_the_empty_and_order+0xae>
 8001636:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 8001638:	789b      	ldrb	r3, [r3, #2]
 800163a:	2b79      	cmp	r3, #121	; 0x79
 800163c:	d113      	bne.n	8001666 <judge_the_empty_and_order+0xae>
 800163e:	4b65      	ldr	r3, [pc, #404]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 8001640:	78db      	ldrb	r3, [r3, #3]
 8001642:	2b62      	cmp	r3, #98	; 0x62
 8001644:	d10f      	bne.n	8001666 <judge_the_empty_and_order+0xae>
			cake_order = 2;
 8001646:	4b65      	ldr	r3, [pc, #404]	; (80017dc <judge_the_empty_and_order+0x224>)
 8001648:	2202      	movs	r2, #2
 800164a:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800164c:	4b64      	ldr	r3, [pc, #400]	; (80017e0 <judge_the_empty_and_order+0x228>)
 800164e:	2201      	movs	r2, #1
 8001650:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 8001652:	4b63      	ldr	r3, [pc, #396]	; (80017e0 <judge_the_empty_and_order+0x228>)
 8001654:	2200      	movs	r2, #0
 8001656:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001658:	4b61      	ldr	r3, [pc, #388]	; (80017e0 <judge_the_empty_and_order+0x228>)
 800165a:	2201      	movs	r2, #1
 800165c:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 800165e:	4b60      	ldr	r3, [pc, #384]	; (80017e0 <judge_the_empty_and_order+0x228>)
 8001660:	2201      	movs	r2, #1
 8001662:	811a      	strh	r2, [r3, #8]
 8001664:	e2a2      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
		else if (hole[1] == 'y' && hole[2] == 'b' && hole[3] == 'p') {
 8001666:	4b5b      	ldr	r3, [pc, #364]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 8001668:	785b      	ldrb	r3, [r3, #1]
 800166a:	2b79      	cmp	r3, #121	; 0x79
 800166c:	d117      	bne.n	800169e <judge_the_empty_and_order+0xe6>
 800166e:	4b59      	ldr	r3, [pc, #356]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 8001670:	789b      	ldrb	r3, [r3, #2]
 8001672:	2b62      	cmp	r3, #98	; 0x62
 8001674:	d113      	bne.n	800169e <judge_the_empty_and_order+0xe6>
 8001676:	4b57      	ldr	r3, [pc, #348]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 8001678:	78db      	ldrb	r3, [r3, #3]
 800167a:	2b70      	cmp	r3, #112	; 0x70
 800167c:	d10f      	bne.n	800169e <judge_the_empty_and_order+0xe6>
			cake_order = 3;
 800167e:	4b57      	ldr	r3, [pc, #348]	; (80017dc <judge_the_empty_and_order+0x224>)
 8001680:	2203      	movs	r2, #3
 8001682:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8001684:	4b56      	ldr	r3, [pc, #344]	; (80017e0 <judge_the_empty_and_order+0x228>)
 8001686:	2201      	movs	r2, #1
 8001688:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 800168a:	4b55      	ldr	r3, [pc, #340]	; (80017e0 <judge_the_empty_and_order+0x228>)
 800168c:	2200      	movs	r2, #0
 800168e:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001690:	4b53      	ldr	r3, [pc, #332]	; (80017e0 <judge_the_empty_and_order+0x228>)
 8001692:	2201      	movs	r2, #1
 8001694:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8001696:	4b52      	ldr	r3, [pc, #328]	; (80017e0 <judge_the_empty_and_order+0x228>)
 8001698:	2201      	movs	r2, #1
 800169a:	811a      	strh	r2, [r3, #8]
 800169c:	e286      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
		else if (hole[1] == 'p' && hole[2] == 'b' && hole[3] == 'y') {
 800169e:	4b4d      	ldr	r3, [pc, #308]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 80016a0:	785b      	ldrb	r3, [r3, #1]
 80016a2:	2b70      	cmp	r3, #112	; 0x70
 80016a4:	d117      	bne.n	80016d6 <judge_the_empty_and_order+0x11e>
 80016a6:	4b4b      	ldr	r3, [pc, #300]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 80016a8:	789b      	ldrb	r3, [r3, #2]
 80016aa:	2b62      	cmp	r3, #98	; 0x62
 80016ac:	d113      	bne.n	80016d6 <judge_the_empty_and_order+0x11e>
 80016ae:	4b49      	ldr	r3, [pc, #292]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 80016b0:	78db      	ldrb	r3, [r3, #3]
 80016b2:	2b79      	cmp	r3, #121	; 0x79
 80016b4:	d10f      	bne.n	80016d6 <judge_the_empty_and_order+0x11e>
			cake_order = 4;
 80016b6:	4b49      	ldr	r3, [pc, #292]	; (80017dc <judge_the_empty_and_order+0x224>)
 80016b8:	2204      	movs	r2, #4
 80016ba:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80016bc:	4b48      	ldr	r3, [pc, #288]	; (80017e0 <judge_the_empty_and_order+0x228>)
 80016be:	2201      	movs	r2, #1
 80016c0:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80016c2:	4b47      	ldr	r3, [pc, #284]	; (80017e0 <judge_the_empty_and_order+0x228>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80016c8:	4b45      	ldr	r3, [pc, #276]	; (80017e0 <judge_the_empty_and_order+0x228>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 80016ce:	4b44      	ldr	r3, [pc, #272]	; (80017e0 <judge_the_empty_and_order+0x228>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	811a      	strh	r2, [r3, #8]
 80016d4:	e26a      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
		else if (hole[1] == 'b' && hole[2] == 'p' && hole[3] == 'y') {
 80016d6:	4b3f      	ldr	r3, [pc, #252]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 80016d8:	785b      	ldrb	r3, [r3, #1]
 80016da:	2b62      	cmp	r3, #98	; 0x62
 80016dc:	d117      	bne.n	800170e <judge_the_empty_and_order+0x156>
 80016de:	4b3d      	ldr	r3, [pc, #244]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 80016e0:	789b      	ldrb	r3, [r3, #2]
 80016e2:	2b70      	cmp	r3, #112	; 0x70
 80016e4:	d113      	bne.n	800170e <judge_the_empty_and_order+0x156>
 80016e6:	4b3b      	ldr	r3, [pc, #236]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 80016e8:	78db      	ldrb	r3, [r3, #3]
 80016ea:	2b79      	cmp	r3, #121	; 0x79
 80016ec:	d10f      	bne.n	800170e <judge_the_empty_and_order+0x156>
			cake_order = 5;
 80016ee:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <judge_the_empty_and_order+0x224>)
 80016f0:	2205      	movs	r2, #5
 80016f2:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80016f4:	4b3a      	ldr	r3, [pc, #232]	; (80017e0 <judge_the_empty_and_order+0x228>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80016fa:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <judge_the_empty_and_order+0x228>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001700:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <judge_the_empty_and_order+0x228>)
 8001702:	2201      	movs	r2, #1
 8001704:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 8001706:	4b36      	ldr	r3, [pc, #216]	; (80017e0 <judge_the_empty_and_order+0x228>)
 8001708:	2200      	movs	r2, #0
 800170a:	811a      	strh	r2, [r3, #8]
 800170c:	e24e      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
		else if (hole[1] == 'y' && hole[2] == 'p' && hole[3] == 'b') {
 800170e:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 8001710:	785b      	ldrb	r3, [r3, #1]
 8001712:	2b79      	cmp	r3, #121	; 0x79
 8001714:	f040 824a 	bne.w	8001bac <judge_the_empty_and_order+0x5f4>
 8001718:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 800171a:	789b      	ldrb	r3, [r3, #2]
 800171c:	2b70      	cmp	r3, #112	; 0x70
 800171e:	f040 8245 	bne.w	8001bac <judge_the_empty_and_order+0x5f4>
 8001722:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 8001724:	78db      	ldrb	r3, [r3, #3]
 8001726:	2b62      	cmp	r3, #98	; 0x62
 8001728:	f040 8240 	bne.w	8001bac <judge_the_empty_and_order+0x5f4>
			cake_order = 6;
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <judge_the_empty_and_order+0x224>)
 800172e:	2206      	movs	r2, #6
 8001730:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8001732:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <judge_the_empty_and_order+0x228>)
 8001734:	2201      	movs	r2, #1
 8001736:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 8001738:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <judge_the_empty_and_order+0x228>)
 800173a:	2200      	movs	r2, #0
 800173c:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <judge_the_empty_and_order+0x228>)
 8001740:	2201      	movs	r2, #1
 8001742:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8001744:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <judge_the_empty_and_order+0x228>)
 8001746:	2201      	movs	r2, #1
 8001748:	811a      	strh	r2, [r3, #8]
 800174a:	e22f      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
	}
	else if (num == 2) {
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <judge_the_empty_and_order+0x220>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b02      	cmp	r3, #2
 8001752:	f040 80bc 	bne.w	80018ce <judge_the_empty_and_order+0x316>
		rotate = 3;
 8001756:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <judge_the_empty_and_order+0x22c>)
 8001758:	2203      	movs	r2, #3
 800175a:	601a      	str	r2, [r3, #0]
		rotate_the_ring(3);       //-180
 800175c:	2003      	movs	r0, #3
 800175e:	f7ff fd8b 	bl	8001278 <rotate_the_ring>

		if (hole[2] == 'b' && hole[3] == 'y' && hole[0] == 'p') {
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 8001764:	789b      	ldrb	r3, [r3, #2]
 8001766:	2b62      	cmp	r3, #98	; 0x62
 8001768:	d117      	bne.n	800179a <judge_the_empty_and_order+0x1e2>
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 800176c:	78db      	ldrb	r3, [r3, #3]
 800176e:	2b79      	cmp	r3, #121	; 0x79
 8001770:	d113      	bne.n	800179a <judge_the_empty_and_order+0x1e2>
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b70      	cmp	r3, #112	; 0x70
 8001778:	d10f      	bne.n	800179a <judge_the_empty_and_order+0x1e2>
			cake_order = 1;
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <judge_the_empty_and_order+0x224>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <judge_the_empty_and_order+0x228>)
 8001782:	2200      	movs	r2, #0
 8001784:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <judge_the_empty_and_order+0x228>)
 8001788:	2201      	movs	r2, #1
 800178a:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <judge_the_empty_and_order+0x228>)
 800178e:	2201      	movs	r2, #1
 8001790:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <judge_the_empty_and_order+0x228>)
 8001794:	2201      	movs	r2, #1
 8001796:	811a      	strh	r2, [r3, #8]
 8001798:	e208      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
		else if (hole[2] == 'p' && hole[3] == 'y' && hole[0] == 'b') {
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 800179c:	789b      	ldrb	r3, [r3, #2]
 800179e:	2b70      	cmp	r3, #112	; 0x70
 80017a0:	d122      	bne.n	80017e8 <judge_the_empty_and_order+0x230>
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 80017a4:	78db      	ldrb	r3, [r3, #3]
 80017a6:	2b79      	cmp	r3, #121	; 0x79
 80017a8:	d11e      	bne.n	80017e8 <judge_the_empty_and_order+0x230>
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <judge_the_empty_and_order+0x21c>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b62      	cmp	r3, #98	; 0x62
 80017b0:	d11a      	bne.n	80017e8 <judge_the_empty_and_order+0x230>
			cake_order = 2;
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <judge_the_empty_and_order+0x224>)
 80017b4:	2202      	movs	r2, #2
 80017b6:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <judge_the_empty_and_order+0x228>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <judge_the_empty_and_order+0x228>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <judge_the_empty_and_order+0x228>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <judge_the_empty_and_order+0x228>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	811a      	strh	r2, [r3, #8]
 80017d0:	e1ec      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
 80017d2:	bf00      	nop
 80017d4:	20000c00 	.word	0x20000c00
 80017d8:	20000c0c 	.word	0x20000c0c
 80017dc:	20000004 	.word	0x20000004
 80017e0:	20000c44 	.word	0x20000c44
 80017e4:	20000008 	.word	0x20000008
		}
		else if (hole[2] == 'y' && hole[3] == 'b' && hole[0] == 'p') {
 80017e8:	4b84      	ldr	r3, [pc, #528]	; (80019fc <judge_the_empty_and_order+0x444>)
 80017ea:	789b      	ldrb	r3, [r3, #2]
 80017ec:	2b79      	cmp	r3, #121	; 0x79
 80017ee:	d117      	bne.n	8001820 <judge_the_empty_and_order+0x268>
 80017f0:	4b82      	ldr	r3, [pc, #520]	; (80019fc <judge_the_empty_and_order+0x444>)
 80017f2:	78db      	ldrb	r3, [r3, #3]
 80017f4:	2b62      	cmp	r3, #98	; 0x62
 80017f6:	d113      	bne.n	8001820 <judge_the_empty_and_order+0x268>
 80017f8:	4b80      	ldr	r3, [pc, #512]	; (80019fc <judge_the_empty_and_order+0x444>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b70      	cmp	r3, #112	; 0x70
 80017fe:	d10f      	bne.n	8001820 <judge_the_empty_and_order+0x268>
			cake_order = 3;
 8001800:	4b7f      	ldr	r3, [pc, #508]	; (8001a00 <judge_the_empty_and_order+0x448>)
 8001802:	2203      	movs	r2, #3
 8001804:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8001806:	4b7f      	ldr	r3, [pc, #508]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 8001808:	2201      	movs	r2, #1
 800180a:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 800180c:	4b7d      	ldr	r3, [pc, #500]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 800180e:	2201      	movs	r2, #1
 8001810:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 8001812:	4b7c      	ldr	r3, [pc, #496]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 8001814:	2200      	movs	r2, #0
 8001816:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8001818:	4b7a      	ldr	r3, [pc, #488]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 800181a:	2201      	movs	r2, #1
 800181c:	811a      	strh	r2, [r3, #8]
 800181e:	e1c5      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
		else if (hole[2] == 'p' && hole[3] == 'b' && hole[0] == 'y') {
 8001820:	4b76      	ldr	r3, [pc, #472]	; (80019fc <judge_the_empty_and_order+0x444>)
 8001822:	789b      	ldrb	r3, [r3, #2]
 8001824:	2b70      	cmp	r3, #112	; 0x70
 8001826:	d117      	bne.n	8001858 <judge_the_empty_and_order+0x2a0>
 8001828:	4b74      	ldr	r3, [pc, #464]	; (80019fc <judge_the_empty_and_order+0x444>)
 800182a:	78db      	ldrb	r3, [r3, #3]
 800182c:	2b62      	cmp	r3, #98	; 0x62
 800182e:	d113      	bne.n	8001858 <judge_the_empty_and_order+0x2a0>
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <judge_the_empty_and_order+0x444>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b79      	cmp	r3, #121	; 0x79
 8001836:	d10f      	bne.n	8001858 <judge_the_empty_and_order+0x2a0>
			cake_order = 4;
 8001838:	4b71      	ldr	r3, [pc, #452]	; (8001a00 <judge_the_empty_and_order+0x448>)
 800183a:	2204      	movs	r2, #4
 800183c:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 800183e:	4b71      	ldr	r3, [pc, #452]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 8001840:	2200      	movs	r2, #0
 8001842:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8001844:	4b6f      	ldr	r3, [pc, #444]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 8001846:	2201      	movs	r2, #1
 8001848:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800184a:	4b6e      	ldr	r3, [pc, #440]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 800184c:	2201      	movs	r2, #1
 800184e:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8001850:	4b6c      	ldr	r3, [pc, #432]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 8001852:	2201      	movs	r2, #1
 8001854:	811a      	strh	r2, [r3, #8]
 8001856:	e1a9      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
		else if (hole[2] == 'b' && hole[3] == 'p' && hole[0] == 'y') {
 8001858:	4b68      	ldr	r3, [pc, #416]	; (80019fc <judge_the_empty_and_order+0x444>)
 800185a:	789b      	ldrb	r3, [r3, #2]
 800185c:	2b62      	cmp	r3, #98	; 0x62
 800185e:	d117      	bne.n	8001890 <judge_the_empty_and_order+0x2d8>
 8001860:	4b66      	ldr	r3, [pc, #408]	; (80019fc <judge_the_empty_and_order+0x444>)
 8001862:	78db      	ldrb	r3, [r3, #3]
 8001864:	2b70      	cmp	r3, #112	; 0x70
 8001866:	d113      	bne.n	8001890 <judge_the_empty_and_order+0x2d8>
 8001868:	4b64      	ldr	r3, [pc, #400]	; (80019fc <judge_the_empty_and_order+0x444>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b79      	cmp	r3, #121	; 0x79
 800186e:	d10f      	bne.n	8001890 <judge_the_empty_and_order+0x2d8>
			cake_order = 5;
 8001870:	4b63      	ldr	r3, [pc, #396]	; (8001a00 <judge_the_empty_and_order+0x448>)
 8001872:	2205      	movs	r2, #5
 8001874:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 8001876:	4b63      	ldr	r3, [pc, #396]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 8001878:	2200      	movs	r2, #0
 800187a:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 800187c:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 800187e:	2201      	movs	r2, #1
 8001880:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001882:	4b60      	ldr	r3, [pc, #384]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 8001884:	2201      	movs	r2, #1
 8001886:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8001888:	4b5e      	ldr	r3, [pc, #376]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 800188a:	2201      	movs	r2, #1
 800188c:	811a      	strh	r2, [r3, #8]
 800188e:	e18d      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
		else if (hole[2] == 'y' && hole[3] == 'p' && hole[0] == 'b') {
 8001890:	4b5a      	ldr	r3, [pc, #360]	; (80019fc <judge_the_empty_and_order+0x444>)
 8001892:	789b      	ldrb	r3, [r3, #2]
 8001894:	2b79      	cmp	r3, #121	; 0x79
 8001896:	f040 8189 	bne.w	8001bac <judge_the_empty_and_order+0x5f4>
 800189a:	4b58      	ldr	r3, [pc, #352]	; (80019fc <judge_the_empty_and_order+0x444>)
 800189c:	78db      	ldrb	r3, [r3, #3]
 800189e:	2b70      	cmp	r3, #112	; 0x70
 80018a0:	f040 8184 	bne.w	8001bac <judge_the_empty_and_order+0x5f4>
 80018a4:	4b55      	ldr	r3, [pc, #340]	; (80019fc <judge_the_empty_and_order+0x444>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b62      	cmp	r3, #98	; 0x62
 80018aa:	f040 817f 	bne.w	8001bac <judge_the_empty_and_order+0x5f4>
			cake_order = 6;
 80018ae:	4b54      	ldr	r3, [pc, #336]	; (8001a00 <judge_the_empty_and_order+0x448>)
 80018b0:	2206      	movs	r2, #6
 80018b2:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80018b4:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 80018ba:	4b52      	ldr	r3, [pc, #328]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 80018bc:	2201      	movs	r2, #1
 80018be:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 80018c0:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80018c6:	4b4f      	ldr	r3, [pc, #316]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	811a      	strh	r2, [r3, #8]
 80018cc:	e16e      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
	}
	else if (num == 3) {
 80018ce:	4b4e      	ldr	r3, [pc, #312]	; (8001a08 <judge_the_empty_and_order+0x450>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	f040 80bb 	bne.w	8001a4e <judge_the_empty_and_order+0x496>
		rotate_the_ring(4);       //-90
 80018d8:	2004      	movs	r0, #4
 80018da:	f7ff fccd 	bl	8001278 <rotate_the_ring>
		anglebefore = 0;
 80018de:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <judge_the_empty_and_order+0x454>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
		if (hole[3] == 'b' && hole[0] == 'y' && hole[1] == 'p') {
 80018e4:	4b45      	ldr	r3, [pc, #276]	; (80019fc <judge_the_empty_and_order+0x444>)
 80018e6:	78db      	ldrb	r3, [r3, #3]
 80018e8:	2b62      	cmp	r3, #98	; 0x62
 80018ea:	d117      	bne.n	800191c <judge_the_empty_and_order+0x364>
 80018ec:	4b43      	ldr	r3, [pc, #268]	; (80019fc <judge_the_empty_and_order+0x444>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b79      	cmp	r3, #121	; 0x79
 80018f2:	d113      	bne.n	800191c <judge_the_empty_and_order+0x364>
 80018f4:	4b41      	ldr	r3, [pc, #260]	; (80019fc <judge_the_empty_and_order+0x444>)
 80018f6:	785b      	ldrb	r3, [r3, #1]
 80018f8:	2b70      	cmp	r3, #112	; 0x70
 80018fa:	d10f      	bne.n	800191c <judge_the_empty_and_order+0x364>
			cake_order = 1;
 80018fc:	4b40      	ldr	r3, [pc, #256]	; (8001a00 <judge_the_empty_and_order+0x448>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8001902:	4b40      	ldr	r3, [pc, #256]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 8001904:	2201      	movs	r2, #1
 8001906:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 8001908:	4b3e      	ldr	r3, [pc, #248]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 800190a:	2200      	movs	r2, #0
 800190c:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800190e:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 8001910:	2201      	movs	r2, #1
 8001912:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8001914:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 8001916:	2201      	movs	r2, #1
 8001918:	811a      	strh	r2, [r3, #8]
 800191a:	e147      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
		else if (hole[3] == 'p' && hole[0] == 'y' && hole[1] == 'b') {
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <judge_the_empty_and_order+0x444>)
 800191e:	78db      	ldrb	r3, [r3, #3]
 8001920:	2b70      	cmp	r3, #112	; 0x70
 8001922:	d117      	bne.n	8001954 <judge_the_empty_and_order+0x39c>
 8001924:	4b35      	ldr	r3, [pc, #212]	; (80019fc <judge_the_empty_and_order+0x444>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b79      	cmp	r3, #121	; 0x79
 800192a:	d113      	bne.n	8001954 <judge_the_empty_and_order+0x39c>
 800192c:	4b33      	ldr	r3, [pc, #204]	; (80019fc <judge_the_empty_and_order+0x444>)
 800192e:	785b      	ldrb	r3, [r3, #1]
 8001930:	2b62      	cmp	r3, #98	; 0x62
 8001932:	d10f      	bne.n	8001954 <judge_the_empty_and_order+0x39c>
			cake_order = 2;
 8001934:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <judge_the_empty_and_order+0x448>)
 8001936:	2202      	movs	r2, #2
 8001938:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 800193a:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 800193c:	2201      	movs	r2, #1
 800193e:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8001940:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 8001942:	2201      	movs	r2, #1
 8001944:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001946:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 8001948:	2201      	movs	r2, #1
 800194a:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 800194c:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 800194e:	2200      	movs	r2, #0
 8001950:	811a      	strh	r2, [r3, #8]
 8001952:	e12b      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
		else if (hole[3] == 'y' && hole[0] == 'b' && hole[1] == 'p') {
 8001954:	4b29      	ldr	r3, [pc, #164]	; (80019fc <judge_the_empty_and_order+0x444>)
 8001956:	78db      	ldrb	r3, [r3, #3]
 8001958:	2b79      	cmp	r3, #121	; 0x79
 800195a:	d117      	bne.n	800198c <judge_the_empty_and_order+0x3d4>
 800195c:	4b27      	ldr	r3, [pc, #156]	; (80019fc <judge_the_empty_and_order+0x444>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b62      	cmp	r3, #98	; 0x62
 8001962:	d113      	bne.n	800198c <judge_the_empty_and_order+0x3d4>
 8001964:	4b25      	ldr	r3, [pc, #148]	; (80019fc <judge_the_empty_and_order+0x444>)
 8001966:	785b      	ldrb	r3, [r3, #1]
 8001968:	2b70      	cmp	r3, #112	; 0x70
 800196a:	d10f      	bne.n	800198c <judge_the_empty_and_order+0x3d4>
			cake_order = 3;
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <judge_the_empty_and_order+0x448>)
 800196e:	2203      	movs	r2, #3
 8001970:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 8001974:	2201      	movs	r2, #1
 8001976:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8001978:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 800197a:	2201      	movs	r2, #1
 800197c:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 800197e:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 8001980:	2201      	movs	r2, #1
 8001982:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 8001986:	2200      	movs	r2, #0
 8001988:	811a      	strh	r2, [r3, #8]
 800198a:	e10f      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
		else if (hole[3] == 'p' && hole[0] == 'b' && hole[1] == 'y') {
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <judge_the_empty_and_order+0x444>)
 800198e:	78db      	ldrb	r3, [r3, #3]
 8001990:	2b70      	cmp	r3, #112	; 0x70
 8001992:	d117      	bne.n	80019c4 <judge_the_empty_and_order+0x40c>
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <judge_the_empty_and_order+0x444>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b62      	cmp	r3, #98	; 0x62
 800199a:	d113      	bne.n	80019c4 <judge_the_empty_and_order+0x40c>
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <judge_the_empty_and_order+0x444>)
 800199e:	785b      	ldrb	r3, [r3, #1]
 80019a0:	2b79      	cmp	r3, #121	; 0x79
 80019a2:	d10f      	bne.n	80019c4 <judge_the_empty_and_order+0x40c>
			cake_order = 4;
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <judge_the_empty_and_order+0x448>)
 80019a6:	2204      	movs	r2, #4
 80019a8:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 80019be:	2201      	movs	r2, #1
 80019c0:	811a      	strh	r2, [r3, #8]
 80019c2:	e0f3      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
		else if (hole[3] == 'b' && hole[0] == 'p' && hole[1] == 'y') {
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <judge_the_empty_and_order+0x444>)
 80019c6:	78db      	ldrb	r3, [r3, #3]
 80019c8:	2b62      	cmp	r3, #98	; 0x62
 80019ca:	d121      	bne.n	8001a10 <judge_the_empty_and_order+0x458>
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <judge_the_empty_and_order+0x444>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b70      	cmp	r3, #112	; 0x70
 80019d2:	d11d      	bne.n	8001a10 <judge_the_empty_and_order+0x458>
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <judge_the_empty_and_order+0x444>)
 80019d6:	785b      	ldrb	r3, [r3, #1]
 80019d8:	2b79      	cmp	r3, #121	; 0x79
 80019da:	d119      	bne.n	8001a10 <judge_the_empty_and_order+0x458>
			cake_order = 5;
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <judge_the_empty_and_order+0x448>)
 80019de:	2205      	movs	r2, #5
 80019e0:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <judge_the_empty_and_order+0x44c>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	811a      	strh	r2, [r3, #8]
 80019fa:	e0d7      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
 80019fc:	20000c00 	.word	0x20000c00
 8001a00:	20000004 	.word	0x20000004
 8001a04:	20000c44 	.word	0x20000c44
 8001a08:	20000c0c 	.word	0x20000c0c
 8001a0c:	20000ba0 	.word	0x20000ba0
		}
		else if (hole[3] == 'y' && hole[0] == 'p' && hole[1] == 'b') {
 8001a10:	4b6b      	ldr	r3, [pc, #428]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001a12:	78db      	ldrb	r3, [r3, #3]
 8001a14:	2b79      	cmp	r3, #121	; 0x79
 8001a16:	f040 80c9 	bne.w	8001bac <judge_the_empty_and_order+0x5f4>
 8001a1a:	4b69      	ldr	r3, [pc, #420]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b70      	cmp	r3, #112	; 0x70
 8001a20:	f040 80c4 	bne.w	8001bac <judge_the_empty_and_order+0x5f4>
 8001a24:	4b66      	ldr	r3, [pc, #408]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001a26:	785b      	ldrb	r3, [r3, #1]
 8001a28:	2b62      	cmp	r3, #98	; 0x62
 8001a2a:	f040 80bf 	bne.w	8001bac <judge_the_empty_and_order+0x5f4>
			cake_order = 6;
 8001a2e:	4b65      	ldr	r3, [pc, #404]	; (8001bc4 <judge_the_empty_and_order+0x60c>)
 8001a30:	2206      	movs	r2, #6
 8001a32:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8001a34:	4b64      	ldr	r3, [pc, #400]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8001a3a:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001a40:	4b61      	ldr	r3, [pc, #388]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 0;
 8001a46:	4b60      	ldr	r3, [pc, #384]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	811a      	strh	r2, [r3, #8]
 8001a4c:	e0ae      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
	}
	else if (num == 4) {
 8001a4e:	4b5f      	ldr	r3, [pc, #380]	; (8001bcc <judge_the_empty_and_order+0x614>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	f040 80aa 	bne.w	8001bac <judge_the_empty_and_order+0x5f4>
		anglebefore = 0;
 8001a58:	4b5d      	ldr	r3, [pc, #372]	; (8001bd0 <judge_the_empty_and_order+0x618>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
		if (hole[0] == 'b' && hole[1] == 'y' && hole[2] == 'p') {
 8001a5e:	4b58      	ldr	r3, [pc, #352]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b62      	cmp	r3, #98	; 0x62
 8001a64:	d117      	bne.n	8001a96 <judge_the_empty_and_order+0x4de>
 8001a66:	4b56      	ldr	r3, [pc, #344]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001a68:	785b      	ldrb	r3, [r3, #1]
 8001a6a:	2b79      	cmp	r3, #121	; 0x79
 8001a6c:	d113      	bne.n	8001a96 <judge_the_empty_and_order+0x4de>
 8001a6e:	4b54      	ldr	r3, [pc, #336]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001a70:	789b      	ldrb	r3, [r3, #2]
 8001a72:	2b70      	cmp	r3, #112	; 0x70
 8001a74:	d10f      	bne.n	8001a96 <judge_the_empty_and_order+0x4de>
			cake_order = 1;
 8001a76:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <judge_the_empty_and_order+0x60c>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8001a7c:	4b52      	ldr	r3, [pc, #328]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8001a82:	4b51      	ldr	r3, [pc, #324]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 8001a88:	4b4f      	ldr	r3, [pc, #316]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8001a8e:	4b4e      	ldr	r3, [pc, #312]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	811a      	strh	r2, [r3, #8]
 8001a94:	e08a      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
		else if (hole[0] == 'p' && hole[1] == 'y' && hole[2] == 'b') {
 8001a96:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b70      	cmp	r3, #112	; 0x70
 8001a9c:	d117      	bne.n	8001ace <judge_the_empty_and_order+0x516>
 8001a9e:	4b48      	ldr	r3, [pc, #288]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001aa0:	785b      	ldrb	r3, [r3, #1]
 8001aa2:	2b79      	cmp	r3, #121	; 0x79
 8001aa4:	d113      	bne.n	8001ace <judge_the_empty_and_order+0x516>
 8001aa6:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001aa8:	789b      	ldrb	r3, [r3, #2]
 8001aaa:	2b62      	cmp	r3, #98	; 0x62
 8001aac:	d10f      	bne.n	8001ace <judge_the_empty_and_order+0x516>
			cake_order = 2;
 8001aae:	4b45      	ldr	r3, [pc, #276]	; (8001bc4 <judge_the_empty_and_order+0x60c>)
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 8001ab4:	4b44      	ldr	r3, [pc, #272]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8001aba:	4b43      	ldr	r3, [pc, #268]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001ac0:	4b41      	ldr	r3, [pc, #260]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8001ac6:	4b40      	ldr	r3, [pc, #256]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	811a      	strh	r2, [r3, #8]
 8001acc:	e06e      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
		else if (hole[0] == 'y' && hole[1] == 'b' && hole[2] == 'p') {
 8001ace:	4b3c      	ldr	r3, [pc, #240]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b79      	cmp	r3, #121	; 0x79
 8001ad4:	d117      	bne.n	8001b06 <judge_the_empty_and_order+0x54e>
 8001ad6:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001ad8:	785b      	ldrb	r3, [r3, #1]
 8001ada:	2b62      	cmp	r3, #98	; 0x62
 8001adc:	d113      	bne.n	8001b06 <judge_the_empty_and_order+0x54e>
 8001ade:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001ae0:	789b      	ldrb	r3, [r3, #2]
 8001ae2:	2b70      	cmp	r3, #112	; 0x70
 8001ae4:	d10f      	bne.n	8001b06 <judge_the_empty_and_order+0x54e>
			cake_order = 3;
 8001ae6:	4b37      	ldr	r3, [pc, #220]	; (8001bc4 <judge_the_empty_and_order+0x60c>)
 8001ae8:	2203      	movs	r2, #3
 8001aea:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 8001aec:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8001af2:	4b35      	ldr	r3, [pc, #212]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001af8:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8001afe:	4b32      	ldr	r3, [pc, #200]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	811a      	strh	r2, [r3, #8]
 8001b04:	e052      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
		else if (hole[0] == 'p' && hole[1] == 'b' && hole[2] == 'y') {
 8001b06:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b70      	cmp	r3, #112	; 0x70
 8001b0c:	d117      	bne.n	8001b3e <judge_the_empty_and_order+0x586>
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001b10:	785b      	ldrb	r3, [r3, #1]
 8001b12:	2b62      	cmp	r3, #98	; 0x62
 8001b14:	d113      	bne.n	8001b3e <judge_the_empty_and_order+0x586>
 8001b16:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001b18:	789b      	ldrb	r3, [r3, #2]
 8001b1a:	2b79      	cmp	r3, #121	; 0x79
 8001b1c:	d10f      	bne.n	8001b3e <judge_the_empty_and_order+0x586>
			cake_order = 4;
 8001b1e:	4b29      	ldr	r3, [pc, #164]	; (8001bc4 <judge_the_empty_and_order+0x60c>)
 8001b20:	2204      	movs	r2, #4
 8001b22:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8001b24:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8001b2a:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 0;
 8001b30:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8001b36:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	811a      	strh	r2, [r3, #8]
 8001b3c:	e036      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
		else if (hole[0] == 'b' && hole[1] == 'p' && hole[2] == 'y') {
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b62      	cmp	r3, #98	; 0x62
 8001b44:	d117      	bne.n	8001b76 <judge_the_empty_and_order+0x5be>
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001b48:	785b      	ldrb	r3, [r3, #1]
 8001b4a:	2b70      	cmp	r3, #112	; 0x70
 8001b4c:	d113      	bne.n	8001b76 <judge_the_empty_and_order+0x5be>
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001b50:	789b      	ldrb	r3, [r3, #2]
 8001b52:	2b79      	cmp	r3, #121	; 0x79
 8001b54:	d10f      	bne.n	8001b76 <judge_the_empty_and_order+0x5be>
			cake_order = 5;
 8001b56:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <judge_the_empty_and_order+0x60c>)
 8001b58:	2205      	movs	r2, #5
 8001b5a:	601a      	str	r2, [r3, #0]
			mission_array[1] = 1;
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 0;
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	811a      	strh	r2, [r3, #8]
 8001b74:	e01a      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
		}
		else if (hole[0] == 'y' && hole[1] == 'p' && hole[2] == 'b') {
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b79      	cmp	r3, #121	; 0x79
 8001b7c:	d116      	bne.n	8001bac <judge_the_empty_and_order+0x5f4>
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001b80:	785b      	ldrb	r3, [r3, #1]
 8001b82:	2b70      	cmp	r3, #112	; 0x70
 8001b84:	d112      	bne.n	8001bac <judge_the_empty_and_order+0x5f4>
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <judge_the_empty_and_order+0x608>)
 8001b88:	789b      	ldrb	r3, [r3, #2]
 8001b8a:	2b62      	cmp	r3, #98	; 0x62
 8001b8c:	d10e      	bne.n	8001bac <judge_the_empty_and_order+0x5f4>
			cake_order = 6;
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <judge_the_empty_and_order+0x60c>)
 8001b90:	2206      	movs	r2, #6
 8001b92:	601a      	str	r2, [r3, #0]
			mission_array[1] = 0;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	805a      	strh	r2, [r3, #2]
			mission_array[2] = 1;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	809a      	strh	r2, [r3, #4]
			mission_array[3] = 1;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	80da      	strh	r2, [r3, #6]
			mission_array[4] = 1;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <judge_the_empty_and_order+0x610>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	811a      	strh	r2, [r3, #8]
		}
	}
	while (1) {
		if (step == 0)
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <judge_the_empty_and_order+0x61c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d000      	beq.n	8001bb6 <judge_the_empty_and_order+0x5fe>
 8001bb4:	e7fa      	b.n	8001bac <judge_the_empty_and_order+0x5f4>
			break;
 8001bb6:	bf00      	nop
	}
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000c00 	.word	0x20000c00
 8001bc4:	20000004 	.word	0x20000004
 8001bc8:	20000c44 	.word	0x20000c44
 8001bcc:	20000c0c 	.word	0x20000c0c
 8001bd0:	20000ba0 	.word	0x20000ba0
 8001bd4:	20000bfc 	.word	0x20000bfc

08001bd8 <Tower_of_Hanoi>:
int tower_step = 0;
void Tower_of_Hanoi(int cake_order) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	if (cake_order == -1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be6:	f000 833e 	beq.w	8002266 <Tower_of_Hanoi+0x68e>
		return;

	suck_the_cake(1, 1);
 8001bea:	2101      	movs	r1, #1
 8001bec:	2001      	movs	r0, #1
 8001bee:	f7ff f9fd 	bl	8000fec <suck_the_cake>
	suck_the_cake(4, 1);
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	2004      	movs	r0, #4
 8001bf6:	f7ff f9f9 	bl	8000fec <suck_the_cake>
	suck_the_cake(3, 1);
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	f7ff f9f5 	bl	8000fec <suck_the_cake>
	press_sensor_feedback();
 8001c02:	f7ff fa73 	bl	80010ec <press_sensor_feedback>
	if (cake_order == 1) {
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	f040 809a 	bne.w	8001d42 <Tower_of_Hanoi+0x16a>
		rotate_the_ring(4);
 8001c0e:	2004      	movs	r0, #4
 8001c10:	f7ff fb32 	bl	8001278 <rotate_the_ring>
		tower_step = 1;
 8001c14:	4bc7      	ldr	r3, [pc, #796]	; (8001f34 <Tower_of_Hanoi+0x35c>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

		unsuck_the_cake(1, 3);
 8001c1a:	2103      	movs	r1, #3
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7ff fa9d 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001c22:	f7ff fa63 	bl	80010ec <press_sensor_feedback>
		tower_step = 2;
 8001c26:	4bc3      	ldr	r3, [pc, #780]	; (8001f34 <Tower_of_Hanoi+0x35c>)
 8001c28:	2202      	movs	r2, #2
 8001c2a:	601a      	str	r2, [r3, #0]

		rotate_the_ring(3);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f7ff fb23 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8001c32:	2102      	movs	r1, #2
 8001c34:	2004      	movs	r0, #4
 8001c36:	f7ff fa91 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001c3a:	f7ff fa57 	bl	80010ec <press_sensor_feedback>
		tower_step = 3;
 8001c3e:	4bbd      	ldr	r3, [pc, #756]	; (8001f34 <Tower_of_Hanoi+0x35c>)
 8001c40:	2203      	movs	r2, #3
 8001c42:	601a      	str	r2, [r3, #0]

		rotate_the_ring(2);
 8001c44:	2002      	movs	r0, #2
 8001c46:	f7ff fb17 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	2003      	movs	r0, #3
 8001c4e:	f7ff fa85 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001c52:	f7ff fa4b 	bl	80010ec <press_sensor_feedback>
		tower_step = 4;
 8001c56:	4bb7      	ldr	r3, [pc, #732]	; (8001f34 <Tower_of_Hanoi+0x35c>)
 8001c58:	2204      	movs	r2, #4
 8001c5a:	601a      	str	r2, [r3, #0]

		rotate_the_ring(1);
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f7ff fb0b 	bl	8001278 <rotate_the_ring>
		suck_the_cake(1, 2);
 8001c62:	2102      	movs	r1, #2
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7ff f9c1 	bl	8000fec <suck_the_cake>
		suck_the_cake(4, 2);
 8001c6a:	2102      	movs	r1, #2
 8001c6c:	2004      	movs	r0, #4
 8001c6e:	f7ff f9bd 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 2);
 8001c72:	2102      	movs	r1, #2
 8001c74:	2003      	movs	r0, #3
 8001c76:	f7ff f9b9 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001c7a:	f7ff fa37 	bl	80010ec <press_sensor_feedback>
		tower_step = 5;
 8001c7e:	4bad      	ldr	r3, [pc, #692]	; (8001f34 <Tower_of_Hanoi+0x35c>)
 8001c80:	2205      	movs	r2, #5
 8001c82:	601a      	str	r2, [r3, #0]

		rotate_the_ring(4);
 8001c84:	2004      	movs	r0, #4
 8001c86:	f7ff faf7 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	2004      	movs	r0, #4
 8001c8e:	f7ff fa65 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001c92:	f7ff fa2b 	bl	80010ec <press_sensor_feedback>
		tower_step = 6;
 8001c96:	4ba7      	ldr	r3, [pc, #668]	; (8001f34 <Tower_of_Hanoi+0x35c>)
 8001c98:	2206      	movs	r2, #6
 8001c9a:	601a      	str	r2, [r3, #0]

		rotate_the_ring(3);
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f7ff faeb 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	2003      	movs	r0, #3
 8001ca6:	f7ff fa59 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001caa:	f7ff fa1f 	bl	80010ec <press_sensor_feedback>
		tower_step = 7;
 8001cae:	4ba1      	ldr	r3, [pc, #644]	; (8001f34 <Tower_of_Hanoi+0x35c>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]

		rotate_the_ring(1);
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f7ff fadf 	bl	8001278 <rotate_the_ring>
		suck_the_cake(4, 3);
 8001cba:	2103      	movs	r1, #3
 8001cbc:	2004      	movs	r0, #4
 8001cbe:	f7ff f995 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 3);
 8001cc2:	2103      	movs	r1, #3
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	f7ff f991 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001cca:	f7ff fa0f 	bl	80010ec <press_sensor_feedback>
		tower_step = 8;
 8001cce:	4b99      	ldr	r3, [pc, #612]	; (8001f34 <Tower_of_Hanoi+0x35c>)
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	601a      	str	r2, [r3, #0]

		rotate_the_ring(2);
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	f7ff facf 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(1, 3);
 8001cda:	2103      	movs	r1, #3
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff fa3d 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001ce2:	f7ff fa03 	bl	80010ec <press_sensor_feedback>
		tower_step = 9;
 8001ce6:	4b93      	ldr	r3, [pc, #588]	; (8001f34 <Tower_of_Hanoi+0x35c>)
 8001ce8:	2209      	movs	r2, #9
 8001cea:	601a      	str	r2, [r3, #0]

		rotate_the_ring(1);
 8001cec:	2001      	movs	r0, #1
 8001cee:	f7ff fac3 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8001cf2:	2102      	movs	r1, #2
 8001cf4:	2004      	movs	r0, #4
 8001cf6:	f7ff fa31 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001cfa:	f7ff f9f7 	bl	80010ec <press_sensor_feedback>
		tower_step = 10;
 8001cfe:	4b8d      	ldr	r3, [pc, #564]	; (8001f34 <Tower_of_Hanoi+0x35c>)
 8001d00:	220a      	movs	r2, #10
 8001d02:	601a      	str	r2, [r3, #0]

		rotate_the_ring(4);
 8001d04:	2004      	movs	r0, #4
 8001d06:	f7ff fab7 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	2003      	movs	r0, #3
 8001d0e:	f7ff fa25 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001d12:	f7ff f9eb 	bl	80010ec <press_sensor_feedback>
		tower_step = 11;
 8001d16:	4b87      	ldr	r3, [pc, #540]	; (8001f34 <Tower_of_Hanoi+0x35c>)
 8001d18:	220b      	movs	r2, #11
 8001d1a:	601a      	str	r2, [r3, #0]
		put_the_cherry(1);
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	f7ff fbeb 	bl	80014f8 <put_the_cherry>
		put_the_cherry(2);
 8001d22:	2002      	movs	r0, #2
 8001d24:	f7ff fbe8 	bl	80014f8 <put_the_cherry>
		put_the_cherry(3);
 8001d28:	2003      	movs	r0, #3
 8001d2a:	f7ff fbe5 	bl	80014f8 <put_the_cherry>

		rotate_the_ring(1);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f7ff faa2 	bl	8001278 <rotate_the_ring>
		mission_array[0] = 2;
 8001d34:	4b80      	ldr	r3, [pc, #512]	; (8001f38 <Tower_of_Hanoi+0x360>)
 8001d36:	2202      	movs	r2, #2
 8001d38:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 8001d3a:	4b80      	ldr	r3, [pc, #512]	; (8001f3c <Tower_of_Hanoi+0x364>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e292      	b.n	8002268 <Tower_of_Hanoi+0x690>
	}

	else if (cake_order == 2) {
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d178      	bne.n	8001e3a <Tower_of_Hanoi+0x262>
		rotate_the_ring(2);
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f7ff fa95 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(3, 3);
 8001d4e:	2103      	movs	r1, #3
 8001d50:	2003      	movs	r0, #3
 8001d52:	f7ff fa03 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001d56:	f7ff f9c9 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(3);
 8001d5a:	2003      	movs	r0, #3
 8001d5c:	f7ff fa8c 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8001d60:	2102      	movs	r1, #2
 8001d62:	2004      	movs	r0, #4
 8001d64:	f7ff f9fa 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001d68:	f7ff f9c0 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(4);
 8001d6c:	2004      	movs	r0, #4
 8001d6e:	f7ff fa83 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(1, 1);
 8001d72:	2101      	movs	r1, #1
 8001d74:	2001      	movs	r0, #1
 8001d76:	f7ff f9f1 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001d7a:	f7ff f9b7 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f7ff fa7a 	bl	8001278 <rotate_the_ring>
		suck_the_cake(1, 2);
 8001d84:	2102      	movs	r1, #2
 8001d86:	2001      	movs	r0, #1
 8001d88:	f7ff f930 	bl	8000fec <suck_the_cake>
		suck_the_cake(4, 2);
 8001d8c:	2102      	movs	r1, #2
 8001d8e:	2004      	movs	r0, #4
 8001d90:	f7ff f92c 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 2);
 8001d94:	2102      	movs	r1, #2
 8001d96:	2003      	movs	r0, #3
 8001d98:	f7ff f928 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001d9c:	f7ff f9a6 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(2);
 8001da0:	2002      	movs	r0, #2
 8001da2:	f7ff fa69 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8001da6:	2102      	movs	r1, #2
 8001da8:	2004      	movs	r0, #4
 8001daa:	f7ff f9d7 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001dae:	f7ff f99d 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(3);
 8001db2:	2003      	movs	r0, #3
 8001db4:	f7ff fa60 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(1, 1);
 8001db8:	2101      	movs	r1, #1
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f7ff f9ce 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001dc0:	f7ff f994 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f7ff fa57 	bl	8001278 <rotate_the_ring>
		suck_the_cake(4, 3);
 8001dca:	2103      	movs	r1, #3
 8001dcc:	2004      	movs	r0, #4
 8001dce:	f7ff f90d 	bl	8000fec <suck_the_cake>
		suck_the_cake(1, 3);
 8001dd2:	2103      	movs	r1, #3
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f7ff f909 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001dda:	f7ff f987 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(4);
 8001dde:	2004      	movs	r0, #4
 8001de0:	f7ff fa4a 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(3, 3);
 8001de4:	2103      	movs	r1, #3
 8001de6:	2003      	movs	r0, #3
 8001de8:	f7ff f9b8 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001dec:	f7ff f97e 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001df0:	2001      	movs	r0, #1
 8001df2:	f7ff fa41 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(4, 2);
 8001df6:	2102      	movs	r1, #2
 8001df8:	2004      	movs	r0, #4
 8001dfa:	f7ff f9af 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001dfe:	f7ff f975 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(2);
 8001e02:	2002      	movs	r0, #2
 8001e04:	f7ff fa38 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(1, 1);
 8001e08:	2101      	movs	r1, #1
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f7ff f9a6 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001e10:	f7ff f96c 	bl	80010ec <press_sensor_feedback>
		put_the_cherry(1);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f7ff fb6f 	bl	80014f8 <put_the_cherry>
		put_the_cherry(4);
 8001e1a:	2004      	movs	r0, #4
 8001e1c:	f7ff fb6c 	bl	80014f8 <put_the_cherry>
		put_the_cherry(3);
 8001e20:	2003      	movs	r0, #3
 8001e22:	f7ff fb69 	bl	80014f8 <put_the_cherry>

		rotate_the_ring(1);
 8001e26:	2001      	movs	r0, #1
 8001e28:	f7ff fa26 	bl	8001278 <rotate_the_ring>
		mission_array[0] = 2;
 8001e2c:	4b42      	ldr	r3, [pc, #264]	; (8001f38 <Tower_of_Hanoi+0x360>)
 8001e2e:	2202      	movs	r2, #2
 8001e30:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 8001e32:	4b42      	ldr	r3, [pc, #264]	; (8001f3c <Tower_of_Hanoi+0x364>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	e216      	b.n	8002268 <Tower_of_Hanoi+0x690>
	}

	else if (cake_order == 3) {
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d17f      	bne.n	8001f40 <Tower_of_Hanoi+0x368>
		rotate_the_ring(3);
 8001e40:	2003      	movs	r0, #3
 8001e42:	f7ff fa19 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(4, 3);
 8001e46:	2103      	movs	r1, #3
 8001e48:	2004      	movs	r0, #4
 8001e4a:	f7ff f987 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001e4e:	f7ff f94d 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(4);
 8001e52:	2004      	movs	r0, #4
 8001e54:	f7ff fa10 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(1, 2);
 8001e58:	2102      	movs	r1, #2
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7ff f97e 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001e60:	f7ff f944 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(2);
 8001e64:	2002      	movs	r0, #2
 8001e66:	f7ff fa07 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	2003      	movs	r0, #3
 8001e6e:	f7ff f975 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001e72:	f7ff f93b 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001e76:	2001      	movs	r0, #1
 8001e78:	f7ff f9fe 	bl	8001278 <rotate_the_ring>
		suck_the_cake(1, 2);
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f7ff f8b4 	bl	8000fec <suck_the_cake>
		suck_the_cake(4, 2);
 8001e84:	2102      	movs	r1, #2
 8001e86:	2004      	movs	r0, #4
 8001e88:	f7ff f8b0 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 2);
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	2003      	movs	r0, #3
 8001e90:	f7ff f8ac 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001e94:	f7ff f92a 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(2);
 8001e98:	2002      	movs	r0, #2
 8001e9a:	f7ff f9ed 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(1, 2);
 8001e9e:	2102      	movs	r1, #2
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7ff f95b 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001ea6:	f7ff f921 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(4);
 8001eaa:	2004      	movs	r0, #4
 8001eac:	f7ff f9e4 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	f7ff f952 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001eb8:	f7ff f918 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f7ff f9db 	bl	8001278 <rotate_the_ring>
		suck_the_cake(1, 3);
 8001ec2:	2103      	movs	r1, #3
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7ff f891 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 3);
 8001eca:	2103      	movs	r1, #3
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f7ff f88d 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001ed2:	f7ff f90b 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(2);
 8001ed6:	2002      	movs	r0, #2
 8001ed8:	f7ff f9ce 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(4, 3);
 8001edc:	2103      	movs	r1, #3
 8001ede:	2004      	movs	r0, #4
 8001ee0:	f7ff f93c 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001ee4:	f7ff f902 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(3);
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f7ff f9c5 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(1, 2);
 8001eee:	2102      	movs	r1, #2
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	f7ff f933 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001ef6:	f7ff f8f9 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8001efa:	2001      	movs	r0, #1
 8001efc:	f7ff f9bc 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(3, 1);
 8001f00:	2101      	movs	r1, #1
 8001f02:	2003      	movs	r0, #3
 8001f04:	f7ff f92a 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001f08:	f7ff f8f0 	bl	80010ec <press_sensor_feedback>
		put_the_cherry(1);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f7ff faf3 	bl	80014f8 <put_the_cherry>
		put_the_cherry(4);
 8001f12:	2004      	movs	r0, #4
 8001f14:	f7ff faf0 	bl	80014f8 <put_the_cherry>
		put_the_cherry(3);
 8001f18:	2003      	movs	r0, #3
 8001f1a:	f7ff faed 	bl	80014f8 <put_the_cherry>

		rotate_the_ring(1);
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f7ff f9aa 	bl	8001278 <rotate_the_ring>
		mission_array[0] = 2;
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <Tower_of_Hanoi+0x360>)
 8001f26:	2202      	movs	r2, #2
 8001f28:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 8001f2a:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <Tower_of_Hanoi+0x364>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	e19a      	b.n	8002268 <Tower_of_Hanoi+0x690>
 8001f32:	bf00      	nop
 8001f34:	20000158 	.word	0x20000158
 8001f38:	20000c44 	.word	0x20000c44
 8001f3c:	20000c3c 	.word	0x20000c3c
	}

	else if (cake_order == 4) {
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	f040 8097 	bne.w	8002076 <Tower_of_Hanoi+0x49e>
		rotate = 3;
 8001f48:	4bc9      	ldr	r3, [pc, #804]	; (8002270 <Tower_of_Hanoi+0x698>)
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	601a      	str	r2, [r3, #0]
		rotate_the_ring(3);
 8001f4e:	2003      	movs	r0, #3
 8001f50:	f7ff f992 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(4, 3);
 8001f54:	2103      	movs	r1, #3
 8001f56:	2004      	movs	r0, #4
 8001f58:	f7ff f900 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001f5c:	f7ff f8c6 	bl	80010ec <press_sensor_feedback>
		rotate = 2;
 8001f60:	4bc3      	ldr	r3, [pc, #780]	; (8002270 <Tower_of_Hanoi+0x698>)
 8001f62:	2202      	movs	r2, #2
 8001f64:	601a      	str	r2, [r3, #0]
		rotate_the_ring(2);
 8001f66:	2002      	movs	r0, #2
 8001f68:	f7ff f986 	bl	8001278 <rotate_the_ring>

		unsuck_the_cake(3, 2);
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	2003      	movs	r0, #3
 8001f70:	f7ff f8f4 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001f74:	f7ff f8ba 	bl	80010ec <press_sensor_feedback>
		rotate = 4;
 8001f78:	4bbd      	ldr	r3, [pc, #756]	; (8002270 <Tower_of_Hanoi+0x698>)
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	601a      	str	r2, [r3, #0]
		rotate_the_ring(4);
 8001f7e:	2004      	movs	r0, #4
 8001f80:	f7ff f97a 	bl	8001278 <rotate_the_ring>

		unsuck_the_cake(1, 1);
 8001f84:	2101      	movs	r1, #1
 8001f86:	2001      	movs	r0, #1
 8001f88:	f7ff f8e8 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001f8c:	f7ff f8ae 	bl	80010ec <press_sensor_feedback>
		rotate = 1;
 8001f90:	4bb7      	ldr	r3, [pc, #732]	; (8002270 <Tower_of_Hanoi+0x698>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
		rotate_the_ring(1);
 8001f96:	2001      	movs	r0, #1
 8001f98:	f7ff f96e 	bl	8001278 <rotate_the_ring>

		suck_the_cake(1, 2);
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f7ff f824 	bl	8000fec <suck_the_cake>
		suck_the_cake(4, 2);
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	2004      	movs	r0, #4
 8001fa8:	f7ff f820 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 2);
 8001fac:	2102      	movs	r1, #2
 8001fae:	2003      	movs	r0, #3
 8001fb0:	f7ff f81c 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8001fb4:	f7ff f89a 	bl	80010ec <press_sensor_feedback>
		rotate = 4;
 8001fb8:	4bad      	ldr	r3, [pc, #692]	; (8002270 <Tower_of_Hanoi+0x698>)
 8001fba:	2204      	movs	r2, #4
 8001fbc:	601a      	str	r2, [r3, #0]
		rotate_the_ring(4);
 8001fbe:	2004      	movs	r0, #4
 8001fc0:	f7ff f95a 	bl	8001278 <rotate_the_ring>

		unsuck_the_cake(3, 2);
 8001fc4:	2102      	movs	r1, #2
 8001fc6:	2003      	movs	r0, #3
 8001fc8:	f7ff f8c8 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001fcc:	f7ff f88e 	bl	80010ec <press_sensor_feedback>
		rotate = 2;
 8001fd0:	4ba7      	ldr	r3, [pc, #668]	; (8002270 <Tower_of_Hanoi+0x698>)
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	601a      	str	r2, [r3, #0]
		rotate_the_ring(2);
 8001fd6:	2002      	movs	r0, #2
 8001fd8:	f7ff f94e 	bl	8001278 <rotate_the_ring>

		unsuck_the_cake(1, 1);
 8001fdc:	2101      	movs	r1, #1
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f7ff f8bc 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8001fe4:	f7ff f882 	bl	80010ec <press_sensor_feedback>
		rotate = 1;
 8001fe8:	4ba1      	ldr	r3, [pc, #644]	; (8002270 <Tower_of_Hanoi+0x698>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
		rotate_the_ring(1);
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f7ff f942 	bl	8001278 <rotate_the_ring>

		suck_the_cake(1, 3);
 8001ff4:	2103      	movs	r1, #3
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f7fe fff8 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 3);
 8001ffc:	2103      	movs	r1, #3
 8001ffe:	2003      	movs	r0, #3
 8002000:	f7fe fff4 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8002004:	f7ff f872 	bl	80010ec <press_sensor_feedback>
		rotate = 4;
 8002008:	4b99      	ldr	r3, [pc, #612]	; (8002270 <Tower_of_Hanoi+0x698>)
 800200a:	2204      	movs	r2, #4
 800200c:	601a      	str	r2, [r3, #0]
		rotate_the_ring(4);
 800200e:	2004      	movs	r0, #4
 8002010:	f7ff f932 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(4, 3);
 8002014:	2103      	movs	r1, #3
 8002016:	2004      	movs	r0, #4
 8002018:	f7ff f8a0 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 800201c:	f7ff f866 	bl	80010ec <press_sensor_feedback>
		rotate = 3;
 8002020:	4b93      	ldr	r3, [pc, #588]	; (8002270 <Tower_of_Hanoi+0x698>)
 8002022:	2203      	movs	r2, #3
 8002024:	601a      	str	r2, [r3, #0]
		rotate_the_ring(3);
 8002026:	2003      	movs	r0, #3
 8002028:	f7ff f926 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(3, 2);
 800202c:	2102      	movs	r1, #2
 800202e:	2003      	movs	r0, #3
 8002030:	f7ff f894 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8002034:	f7ff f85a 	bl	80010ec <press_sensor_feedback>
		rotate = 1;
 8002038:	4b8d      	ldr	r3, [pc, #564]	; (8002270 <Tower_of_Hanoi+0x698>)
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]
		rotate_the_ring(1);
 800203e:	2001      	movs	r0, #1
 8002040:	f7ff f91a 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(1, 1);
 8002044:	2101      	movs	r1, #1
 8002046:	2001      	movs	r0, #1
 8002048:	f7ff f888 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 800204c:	f7ff f84e 	bl	80010ec <press_sensor_feedback>
		put_the_cherry(1);
 8002050:	2001      	movs	r0, #1
 8002052:	f7ff fa51 	bl	80014f8 <put_the_cherry>
		put_the_cherry(2);
 8002056:	2002      	movs	r0, #2
 8002058:	f7ff fa4e 	bl	80014f8 <put_the_cherry>
		put_the_cherry(3);
 800205c:	2003      	movs	r0, #3
 800205e:	f7ff fa4b 	bl	80014f8 <put_the_cherry>

		rotate_the_ring(1);
 8002062:	2001      	movs	r0, #1
 8002064:	f7ff f908 	bl	8001278 <rotate_the_ring>
		mission_array[0] = 2;
 8002068:	4b82      	ldr	r3, [pc, #520]	; (8002274 <Tower_of_Hanoi+0x69c>)
 800206a:	2202      	movs	r2, #2
 800206c:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 800206e:	4b82      	ldr	r3, [pc, #520]	; (8002278 <Tower_of_Hanoi+0x6a0>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	e0f8      	b.n	8002268 <Tower_of_Hanoi+0x690>
	}

	else if (cake_order == 5) {
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b05      	cmp	r3, #5
 800207a:	d178      	bne.n	800216e <Tower_of_Hanoi+0x596>
		rotate_the_ring(4);
 800207c:	2004      	movs	r0, #4
 800207e:	f7ff f8fb 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(1, 3);
 8002082:	2103      	movs	r1, #3
 8002084:	2001      	movs	r0, #1
 8002086:	f7ff f869 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 800208a:	f7ff f82f 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(2);
 800208e:	2002      	movs	r0, #2
 8002090:	f7ff f8f2 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(3, 2);
 8002094:	2102      	movs	r1, #2
 8002096:	2003      	movs	r0, #3
 8002098:	f7ff f860 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 800209c:	f7ff f826 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(3);
 80020a0:	2003      	movs	r0, #3
 80020a2:	f7ff f8e9 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 80020a6:	2101      	movs	r1, #1
 80020a8:	2004      	movs	r0, #4
 80020aa:	f7ff f857 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 80020ae:	f7ff f81d 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 80020b2:	2001      	movs	r0, #1
 80020b4:	f7ff f8e0 	bl	8001278 <rotate_the_ring>
		suck_the_cake(1, 2);
 80020b8:	2102      	movs	r1, #2
 80020ba:	2001      	movs	r0, #1
 80020bc:	f7fe ff96 	bl	8000fec <suck_the_cake>
		suck_the_cake(4, 2);
 80020c0:	2102      	movs	r1, #2
 80020c2:	2004      	movs	r0, #4
 80020c4:	f7fe ff92 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 2);
 80020c8:	2102      	movs	r1, #2
 80020ca:	2003      	movs	r0, #3
 80020cc:	f7fe ff8e 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 80020d0:	f7ff f80c 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(3);
 80020d4:	2003      	movs	r0, #3
 80020d6:	f7ff f8cf 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(3, 2);
 80020da:	2102      	movs	r1, #2
 80020dc:	2003      	movs	r0, #3
 80020de:	f7ff f83d 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 80020e2:	f7ff f803 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(4);
 80020e6:	2004      	movs	r0, #4
 80020e8:	f7ff f8c6 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 80020ec:	2101      	movs	r1, #1
 80020ee:	2004      	movs	r0, #4
 80020f0:	f7ff f834 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 80020f4:	f7fe fffa 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7ff f8bd 	bl	8001278 <rotate_the_ring>
		suck_the_cake(4, 3);
 80020fe:	2103      	movs	r1, #3
 8002100:	2004      	movs	r0, #4
 8002102:	f7fe ff73 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 3);
 8002106:	2103      	movs	r1, #3
 8002108:	2003      	movs	r0, #3
 800210a:	f7fe ff6f 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 800210e:	f7fe ffed 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(2);
 8002112:	2002      	movs	r0, #2
 8002114:	f7ff f8b0 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(1, 3);
 8002118:	2103      	movs	r1, #3
 800211a:	2001      	movs	r0, #1
 800211c:	f7ff f81e 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8002120:	f7fe ffe4 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(4);
 8002124:	2004      	movs	r0, #4
 8002126:	f7ff f8a7 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(3, 2);
 800212a:	2102      	movs	r1, #2
 800212c:	2003      	movs	r0, #3
 800212e:	f7ff f815 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8002132:	f7fe ffdb 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 8002136:	2001      	movs	r0, #1
 8002138:	f7ff f89e 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 800213c:	2101      	movs	r1, #1
 800213e:	2004      	movs	r0, #4
 8002140:	f7ff f80c 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8002144:	f7fe ffd2 	bl	80010ec <press_sensor_feedback>
		put_the_cherry(1);
 8002148:	2001      	movs	r0, #1
 800214a:	f7ff f9d5 	bl	80014f8 <put_the_cherry>
		put_the_cherry(2);
 800214e:	2002      	movs	r0, #2
 8002150:	f7ff f9d2 	bl	80014f8 <put_the_cherry>
		put_the_cherry(3);
 8002154:	2003      	movs	r0, #3
 8002156:	f7ff f9cf 	bl	80014f8 <put_the_cherry>

		rotate_the_ring(1);
 800215a:	2001      	movs	r0, #1
 800215c:	f7ff f88c 	bl	8001278 <rotate_the_ring>
		mission_array[0] = 2;
 8002160:	4b44      	ldr	r3, [pc, #272]	; (8002274 <Tower_of_Hanoi+0x69c>)
 8002162:	2202      	movs	r2, #2
 8002164:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 8002166:	4b44      	ldr	r3, [pc, #272]	; (8002278 <Tower_of_Hanoi+0x6a0>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	e07c      	b.n	8002268 <Tower_of_Hanoi+0x690>
	}

	else if (cake_order == 6) {
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b06      	cmp	r3, #6
 8002172:	d179      	bne.n	8002268 <Tower_of_Hanoi+0x690>
		rotate_the_ring(2);
 8002174:	2002      	movs	r0, #2
 8002176:	f7ff f87f 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(3, 3);
 800217a:	2103      	movs	r1, #3
 800217c:	2003      	movs	r0, #3
 800217e:	f7fe ffed 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8002182:	f7fe ffb3 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(4);
 8002186:	2004      	movs	r0, #4
 8002188:	f7ff f876 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(1, 2);
 800218c:	2102      	movs	r1, #2
 800218e:	2001      	movs	r0, #1
 8002190:	f7fe ffe4 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8002194:	f7fe ffaa 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(3);
 8002198:	2003      	movs	r0, #3
 800219a:	f7ff f86d 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 800219e:	2101      	movs	r1, #1
 80021a0:	2004      	movs	r0, #4
 80021a2:	f7fe ffdb 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 80021a6:	f7fe ffa1 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7ff f864 	bl	8001278 <rotate_the_ring>
		suck_the_cake(1, 2);
 80021b0:	2102      	movs	r1, #2
 80021b2:	2001      	movs	r0, #1
 80021b4:	f7fe ff1a 	bl	8000fec <suck_the_cake>
		suck_the_cake(4, 2);
 80021b8:	2102      	movs	r1, #2
 80021ba:	2004      	movs	r0, #4
 80021bc:	f7fe ff16 	bl	8000fec <suck_the_cake>
		suck_the_cake(3, 2);
 80021c0:	2102      	movs	r1, #2
 80021c2:	2003      	movs	r0, #3
 80021c4:	f7fe ff12 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 80021c8:	f7fe ff90 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(3);
 80021cc:	2003      	movs	r0, #3
 80021ce:	f7ff f853 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(1, 2);
 80021d2:	2102      	movs	r1, #2
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7fe ffc1 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 80021da:	f7fe ff87 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(2);
 80021de:	2002      	movs	r0, #2
 80021e0:	f7ff f84a 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 80021e4:	2101      	movs	r1, #1
 80021e6:	2004      	movs	r0, #4
 80021e8:	f7fe ffb8 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 80021ec:	f7fe ff7e 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 80021f0:	2001      	movs	r0, #1
 80021f2:	f7ff f841 	bl	8001278 <rotate_the_ring>
		suck_the_cake(4, 3);
 80021f6:	2103      	movs	r1, #3
 80021f8:	2004      	movs	r0, #4
 80021fa:	f7fe fef7 	bl	8000fec <suck_the_cake>
		suck_the_cake(1, 3);
 80021fe:	2103      	movs	r1, #3
 8002200:	2001      	movs	r0, #1
 8002202:	f7fe fef3 	bl	8000fec <suck_the_cake>
		press_sensor_feedback();
 8002206:	f7fe ff71 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(4);
 800220a:	2004      	movs	r0, #4
 800220c:	f7ff f834 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(3, 3);
 8002210:	2103      	movs	r1, #3
 8002212:	2003      	movs	r0, #3
 8002214:	f7fe ffa2 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 8002218:	f7fe ff68 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(2);
 800221c:	2002      	movs	r0, #2
 800221e:	f7ff f82b 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(1, 2);
 8002222:	2102      	movs	r1, #2
 8002224:	2001      	movs	r0, #1
 8002226:	f7fe ff99 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 800222a:	f7fe ff5f 	bl	80010ec <press_sensor_feedback>
		rotate_the_ring(1);
 800222e:	2001      	movs	r0, #1
 8002230:	f7ff f822 	bl	8001278 <rotate_the_ring>
		unsuck_the_cake(4, 1);
 8002234:	2101      	movs	r1, #1
 8002236:	2004      	movs	r0, #4
 8002238:	f7fe ff90 	bl	800115c <unsuck_the_cake>
		press_sensor_feedback();
 800223c:	f7fe ff56 	bl	80010ec <press_sensor_feedback>
		put_the_cherry(1);
 8002240:	2001      	movs	r0, #1
 8002242:	f7ff f959 	bl	80014f8 <put_the_cherry>
		put_the_cherry(4);
 8002246:	2004      	movs	r0, #4
 8002248:	f7ff f956 	bl	80014f8 <put_the_cherry>
		put_the_cherry(3);
 800224c:	2003      	movs	r0, #3
 800224e:	f7ff f953 	bl	80014f8 <put_the_cherry>

		rotate_the_ring(1);
 8002252:	2001      	movs	r0, #1
 8002254:	f7ff f810 	bl	8001278 <rotate_the_ring>
		mission_array[0] = 2;
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <Tower_of_Hanoi+0x69c>)
 800225a:	2202      	movs	r2, #2
 800225c:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <Tower_of_Hanoi+0x6a0>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e000      	b.n	8002268 <Tower_of_Hanoi+0x690>
		return;
 8002266:	bf00      	nop
	}
}
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000008 	.word	0x20000008
 8002274:	20000c44 	.word	0x20000c44
 8002278:	20000c3c 	.word	0x20000c3c

0800227c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
 8002286:	4b23      	ldr	r3, [pc, #140]	; (8002314 <MX_DMA_Init+0x98>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a22      	ldr	r2, [pc, #136]	; (8002314 <MX_DMA_Init+0x98>)
 800228c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <MX_DMA_Init+0x98>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <MX_DMA_Init+0x98>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <MX_DMA_Init+0x98>)
 80022a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b19      	ldr	r3, [pc, #100]	; (8002314 <MX_DMA_Init+0x98>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2010      	movs	r0, #16
 80022c0:	f004 fcbb 	bl	8006c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80022c4:	2010      	movs	r0, #16
 80022c6:	f004 fcd4 	bl	8006c72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	2011      	movs	r0, #17
 80022d0:	f004 fcb3 	bl	8006c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80022d4:	2011      	movs	r0, #17
 80022d6:	f004 fccc 	bl	8006c72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	2038      	movs	r0, #56	; 0x38
 80022e0:	f004 fcab 	bl	8006c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80022e4:	2038      	movs	r0, #56	; 0x38
 80022e6:	f004 fcc4 	bl	8006c72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	203a      	movs	r0, #58	; 0x3a
 80022f0:	f004 fca3 	bl	8006c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80022f4:	203a      	movs	r0, #58	; 0x3a
 80022f6:	f004 fcbc 	bl	8006c72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	2100      	movs	r1, #0
 80022fe:	2046      	movs	r0, #70	; 0x46
 8002300:	f004 fc9b 	bl	8006c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002304:	2046      	movs	r0, #70	; 0x46
 8002306:	f004 fcb4 	bl	8006c72 <HAL_NVIC_EnableIRQ>

}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800

08002318 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231e:	f107 0314 	add.w	r3, r7, #20
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]
 800232c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	4b64      	ldr	r3, [pc, #400]	; (80024c4 <MX_GPIO_Init+0x1ac>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a63      	ldr	r2, [pc, #396]	; (80024c4 <MX_GPIO_Init+0x1ac>)
 8002338:	f043 0304 	orr.w	r3, r3, #4
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b61      	ldr	r3, [pc, #388]	; (80024c4 <MX_GPIO_Init+0x1ac>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	4b5d      	ldr	r3, [pc, #372]	; (80024c4 <MX_GPIO_Init+0x1ac>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	4a5c      	ldr	r2, [pc, #368]	; (80024c4 <MX_GPIO_Init+0x1ac>)
 8002354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002358:	6313      	str	r3, [r2, #48]	; 0x30
 800235a:	4b5a      	ldr	r3, [pc, #360]	; (80024c4 <MX_GPIO_Init+0x1ac>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	4b56      	ldr	r3, [pc, #344]	; (80024c4 <MX_GPIO_Init+0x1ac>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4a55      	ldr	r2, [pc, #340]	; (80024c4 <MX_GPIO_Init+0x1ac>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <MX_GPIO_Init+0x1ac>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	4b4f      	ldr	r3, [pc, #316]	; (80024c4 <MX_GPIO_Init+0x1ac>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a4e      	ldr	r2, [pc, #312]	; (80024c4 <MX_GPIO_Init+0x1ac>)
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <MX_GPIO_Init+0x1ac>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	4b48      	ldr	r3, [pc, #288]	; (80024c4 <MX_GPIO_Init+0x1ac>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a47      	ldr	r2, [pc, #284]	; (80024c4 <MX_GPIO_Init+0x1ac>)
 80023a8:	f043 0308 	orr.w	r3, r3, #8
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b45      	ldr	r3, [pc, #276]	; (80024c4 <MX_GPIO_Init+0x1ac>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5|GPIO_PIN_8
 80023ba:	2200      	movs	r2, #0
 80023bc:	f243 3120 	movw	r1, #13088	; 0x3320
 80023c0:	4841      	ldr	r0, [pc, #260]	; (80024c8 <MX_GPIO_Init+0x1b0>)
 80023c2:	f005 fb67 	bl	8007a94 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80023c6:	2200      	movs	r2, #0
 80023c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023cc:	483f      	ldr	r0, [pc, #252]	; (80024cc <MX_GPIO_Init+0x1b4>)
 80023ce:	f005 fb61 	bl	8007a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2104      	movs	r1, #4
 80023d6:	483e      	ldr	r0, [pc, #248]	; (80024d0 <MX_GPIO_Init+0x1b8>)
 80023d8:	f005 fb5c 	bl	8007a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80023e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	4619      	mov	r1, r3
 80023f2:	4836      	ldr	r0, [pc, #216]	; (80024cc <MX_GPIO_Init+0x1b4>)
 80023f4:	f005 f8c6 	bl	8007584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023f8:	2303      	movs	r3, #3
 80023fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	4619      	mov	r1, r3
 800240a:	4830      	ldr	r0, [pc, #192]	; (80024cc <MX_GPIO_Init+0x1b4>)
 800240c:	f005 f8ba 	bl	8007584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_11;
 8002410:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8002414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002416:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800241a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	4619      	mov	r1, r3
 8002426:	4829      	ldr	r0, [pc, #164]	; (80024cc <MX_GPIO_Init+0x1b4>)
 8002428:	f005 f8ac 	bl	8007584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800242c:	2301      	movs	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	4619      	mov	r1, r3
 800243e:	4822      	ldr	r0, [pc, #136]	; (80024c8 <MX_GPIO_Init+0x1b0>)
 8002440:	f005 f8a0 	bl	8007584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5|GPIO_PIN_8
 8002444:	f243 3320 	movw	r3, #13088	; 0x3320
 8002448:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244a:	2301      	movs	r3, #1
 800244c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	481a      	ldr	r0, [pc, #104]	; (80024c8 <MX_GPIO_Init+0x1b0>)
 800245e:	f005 f891 	bl	8007584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002468:	2301      	movs	r3, #1
 800246a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	2300      	movs	r3, #0
 8002472:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	4619      	mov	r1, r3
 800247a:	4814      	ldr	r0, [pc, #80]	; (80024cc <MX_GPIO_Init+0x1b4>)
 800247c:	f005 f882 	bl	8007584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002480:	2304      	movs	r3, #4
 8002482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002484:	2301      	movs	r3, #1
 8002486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	4619      	mov	r1, r3
 8002496:	480e      	ldr	r0, [pc, #56]	; (80024d0 <MX_GPIO_Init+0x1b8>)
 8002498:	f005 f874 	bl	8007584 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800249c:	2200      	movs	r2, #0
 800249e:	2100      	movs	r1, #0
 80024a0:	200a      	movs	r0, #10
 80024a2:	f004 fbca 	bl	8006c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80024a6:	200a      	movs	r0, #10
 80024a8:	f004 fbe3 	bl	8006c72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2100      	movs	r1, #0
 80024b0:	2028      	movs	r0, #40	; 0x28
 80024b2:	f004 fbc2 	bl	8006c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024b6:	2028      	movs	r0, #40	; 0x28
 80024b8:	f004 fbdb 	bl	8006c72 <HAL_NVIC_EnableIRQ>

}
 80024bc:	bf00      	nop
 80024be:	3728      	adds	r7, #40	; 0x28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40020400 	.word	0x40020400
 80024cc:	40020800 	.word	0x40020800
 80024d0:	40020c00 	.word	0x40020c00

080024d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <MX_I2C1_Init+0x50>)
 80024da:	4a13      	ldr	r2, [pc, #76]	; (8002528 <MX_I2C1_Init+0x54>)
 80024dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <MX_I2C1_Init+0x50>)
 80024e0:	4a12      	ldr	r2, [pc, #72]	; (800252c <MX_I2C1_Init+0x58>)
 80024e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024e4:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <MX_I2C1_Init+0x50>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <MX_I2C1_Init+0x50>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <MX_I2C1_Init+0x50>)
 80024f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <MX_I2C1_Init+0x50>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <MX_I2C1_Init+0x50>)
 8002500:	2200      	movs	r2, #0
 8002502:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002504:	4b07      	ldr	r3, [pc, #28]	; (8002524 <MX_I2C1_Init+0x50>)
 8002506:	2200      	movs	r2, #0
 8002508:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <MX_I2C1_Init+0x50>)
 800250c:	2200      	movs	r2, #0
 800250e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002510:	4804      	ldr	r0, [pc, #16]	; (8002524 <MX_I2C1_Init+0x50>)
 8002512:	f005 faf1 	bl	8007af8 <HAL_I2C_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800251c:	f000 f8e2 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}
 8002524:	2000015c 	.word	0x2000015c
 8002528:	40005400 	.word	0x40005400
 800252c:	000186a0 	.word	0x000186a0

08002530 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <HAL_I2C_MspInit+0x84>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d12b      	bne.n	80025aa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <HAL_I2C_MspInit+0x88>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <HAL_I2C_MspInit+0x88>)
 800255c:	f043 0302 	orr.w	r3, r3, #2
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <HAL_I2C_MspInit+0x88>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800256e:	23c0      	movs	r3, #192	; 0xc0
 8002570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002572:	2312      	movs	r3, #18
 8002574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257a:	2303      	movs	r3, #3
 800257c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800257e:	2304      	movs	r3, #4
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4619      	mov	r1, r3
 8002588:	480c      	ldr	r0, [pc, #48]	; (80025bc <HAL_I2C_MspInit+0x8c>)
 800258a:	f004 fffb 	bl	8007584 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_I2C_MspInit+0x88>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <HAL_I2C_MspInit+0x88>)
 8002598:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800259c:	6413      	str	r3, [r2, #64]	; 0x40
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_I2C_MspInit+0x88>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	; 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40005400 	.word	0x40005400
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020400 	.word	0x40020400

080025c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025c4:	f003 ff32 	bl	800642c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025c8:	f000 f820 	bl	800260c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025cc:	f7ff fea4 	bl	8002318 <MX_GPIO_Init>
  MX_DMA_Init();
 80025d0:	f7ff fe54 	bl	800227c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80025d4:	f003 fcba 	bl	8005f4c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80025d8:	f003 fa28 	bl	8005a2c <MX_TIM3_Init>
  MX_ADC1_Init();
 80025dc:	f7fe fc20 	bl	8000e20 <MX_ADC1_Init>
  MX_TIM6_Init();
 80025e0:	f003 fa9e 	bl	8005b20 <MX_TIM6_Init>
  MX_TIM2_Init();
 80025e4:	f003 f9be 	bl	8005964 <MX_TIM2_Init>
  MX_TIM7_Init();
 80025e8:	f003 fad0 	bl	8005b8c <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80025ec:	f003 fc5a 	bl	8005ea4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025f0:	f003 fc82 	bl	8005ef8 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 80025f4:	f003 fb00 	bl	8005bf8 <MX_TIM10_Init>
  MX_TIM11_Init();
 80025f8:	f003 fb22 	bl	8005c40 <MX_TIM11_Init>
  MX_I2C1_Init();
 80025fc:	f7ff ff6a 	bl	80024d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	// DMA_init is in front of ADC
	setup();
 8002600:	f001 fd20 	bl	8004044 <setup>
	mainrun();
 8002604:	f002 fb88 	bl	8004d18 <mainrun>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002608:	e7fe      	b.n	8002608 <main+0x48>
	...

0800260c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b094      	sub	sp, #80	; 0x50
 8002610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002612:	f107 031c 	add.w	r3, r7, #28
 8002616:	2234      	movs	r2, #52	; 0x34
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f008 fbc6 	bl	800adac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002620:	f107 0308 	add.w	r3, r7, #8
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002630:	2300      	movs	r3, #0
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	4b29      	ldr	r3, [pc, #164]	; (80026dc <SystemClock_Config+0xd0>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	4a28      	ldr	r2, [pc, #160]	; (80026dc <SystemClock_Config+0xd0>)
 800263a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263e:	6413      	str	r3, [r2, #64]	; 0x40
 8002640:	4b26      	ldr	r3, [pc, #152]	; (80026dc <SystemClock_Config+0xd0>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800264c:	2300      	movs	r3, #0
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <SystemClock_Config+0xd4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a22      	ldr	r2, [pc, #136]	; (80026e0 <SystemClock_Config+0xd4>)
 8002656:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <SystemClock_Config+0xd4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002668:	2301      	movs	r3, #1
 800266a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800266c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002670:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002672:	2302      	movs	r3, #2
 8002674:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002676:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800267a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800267c:	2304      	movs	r3, #4
 800267e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002680:	23a8      	movs	r3, #168	; 0xa8
 8002682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002684:	2302      	movs	r3, #2
 8002686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002688:	2302      	movs	r3, #2
 800268a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800268c:	2302      	movs	r3, #2
 800268e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002690:	f107 031c 	add.w	r3, r7, #28
 8002694:	4618      	mov	r0, r3
 8002696:	f005 febd 	bl	8008414 <HAL_RCC_OscConfig>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80026a0:	f000 f820 	bl	80026e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026a4:	230f      	movs	r3, #15
 80026a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80026a8:	2303      	movs	r3, #3
 80026aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80026bc:	f107 0308 	add.w	r3, r7, #8
 80026c0:	2105      	movs	r1, #5
 80026c2:	4618      	mov	r0, r3
 80026c4:	f005 fb5c 	bl	8007d80 <HAL_RCC_ClockConfig>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80026ce:	f000 f809 	bl	80026e4 <Error_Handler>
  }
}
 80026d2:	bf00      	nop
 80026d4:	3750      	adds	r7, #80	; 0x50
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40007000 	.word	0x40007000

080026e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026e8:	b672      	cpsid	i
}
 80026ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80026ec:	e7fe      	b.n	80026ec <Error_Handler+0x8>

080026ee <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	4a04      	ldr	r2, [pc, #16]	; (800272c <_ZN3ros3MsgC1Ev+0x1c>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	0800b444 	.word	0x0800b444

08002730 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
      data()
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ffe8 	bl	8002710 <_ZN3ros3MsgC1Ev>
 8002740:	4a06      	ldr	r2, [pc, #24]	; (800275c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3304      	adds	r3, #4
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff ffcf 	bl	80026ee <_ZN3ros4TimeC1Ev>
    {
    }
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	0800b42c 	.word	0x0800b42c

08002760 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	4413      	add	r3, r2
 8002778:	b2ca      	uxtb	r2, r1
 800277a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	0a19      	lsrs	r1, r3, #8
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3301      	adds	r3, #1
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	4413      	add	r3, r2
 800278a:	b2ca      	uxtb	r2, r1
 800278c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	0c19      	lsrs	r1, r3, #16
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3302      	adds	r3, #2
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	4413      	add	r3, r2
 800279c:	b2ca      	uxtb	r2, r1
 800279e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	0e19      	lsrs	r1, r3, #24
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3303      	adds	r3, #3
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	4413      	add	r3, r2
 80027ae:	b2ca      	uxtb	r2, r1
 80027b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	3304      	adds	r3, #4
 80027b6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6899      	ldr	r1, [r3, #8]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	4413      	add	r3, r2
 80027c2:	b2ca      	uxtb	r2, r1
 80027c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	0a19      	lsrs	r1, r3, #8
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3301      	adds	r3, #1
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	b2ca      	uxtb	r2, r1
 80027d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	0c19      	lsrs	r1, r3, #16
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	3302      	adds	r3, #2
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	4413      	add	r3, r2
 80027e6:	b2ca      	uxtb	r2, r1
 80027e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	0e19      	lsrs	r1, r3, #24
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3303      	adds	r3, #3
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	b2ca      	uxtb	r2, r1
 80027fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	3304      	adds	r3, #4
 8002800:	60fb      	str	r3, [r7, #12]
      return offset;
 8002802:	68fb      	ldr	r3, [r7, #12]
    }
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	4413      	add	r3, r2
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	3301      	adds	r3, #1
 8002834:	6839      	ldr	r1, [r7, #0]
 8002836:	440b      	add	r3, r1
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	3302      	adds	r3, #2
 800284a:	6839      	ldr	r1, [r7, #0]
 800284c:	440b      	add	r3, r1
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	041b      	lsls	r3, r3, #16
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	3303      	adds	r3, #3
 8002860:	6839      	ldr	r1, [r7, #0]
 8002862:	440b      	add	r3, r1
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	061b      	lsls	r3, r3, #24
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3304      	adds	r3, #4
 8002872:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	4413      	add	r3, r2
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3301      	adds	r3, #1
 800288a:	6839      	ldr	r1, [r7, #0]
 800288c:	440b      	add	r3, r1
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3302      	adds	r3, #2
 80028a0:	6839      	ldr	r1, [r7, #0]
 80028a2:	440b      	add	r3, r1
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	3303      	adds	r3, #3
 80028b6:	6839      	ldr	r1, [r7, #0]
 80028b8:	440b      	add	r3, r1
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	3304      	adds	r3, #4
 80028c8:	60fb      	str	r3, [r7, #12]
     return offset;
 80028ca:	68fb      	ldr	r3, [r7, #12]
    }
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	0800b0d8 	.word	0x0800b0d8

080028f4 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	0800b0e8 	.word	0x0800b0e8

08002910 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fef8 	bl	8002710 <_ZN3ros3MsgC1Ev>
 8002920:	4a0b      	ldr	r2, [pc, #44]	; (8002950 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	809a      	strh	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a09      	ldr	r2, [pc, #36]	; (8002954 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a07      	ldr	r2, [pc, #28]	; (8002954 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002936:	60da      	str	r2, [r3, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a06      	ldr	r2, [pc, #24]	; (8002954 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800293c:	611a      	str	r2, [r3, #16]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	615a      	str	r2, [r3, #20]
    {
    }
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	0800b414 	.word	0x0800b414
 8002954:	0800b10c 	.word	0x0800b10c

08002958 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	8899      	ldrh	r1, [r3, #4]
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	4413      	add	r3, r2
 8002970:	b2ca      	uxtb	r2, r1
 8002972:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	889b      	ldrh	r3, [r3, #4]
 8002978:	0a1b      	lsrs	r3, r3, #8
 800297a:	b299      	uxth	r1, r3
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	3301      	adds	r3, #1
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	4413      	add	r3, r2
 8002984:	b2ca      	uxtb	r2, r1
 8002986:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	3302      	adds	r3, #2
 800298c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fc38 	bl	8000208 <strlen>
 8002998:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	69b9      	ldr	r1, [r7, #24]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f001 fb7a 	bl	800409c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	3304      	adds	r3, #4
 80029ac:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	18d0      	adds	r0, r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4619      	mov	r1, r3
 80029bc:	f008 f9e8 	bl	800ad90 <memcpy>
      offset += length_topic_name;
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	4413      	add	r3, r2
 80029c6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fc1b 	bl	8000208 <strlen>
 80029d2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	4413      	add	r3, r2
 80029da:	6979      	ldr	r1, [r7, #20]
 80029dc:	4618      	mov	r0, r3
 80029de:	f001 fb5d 	bl	800409c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3304      	adds	r3, #4
 80029e6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	18d0      	adds	r0, r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4619      	mov	r1, r3
 80029f6:	f008 f9cb 	bl	800ad90 <memcpy>
      offset += length_message_type;
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	4413      	add	r3, r2
 8002a00:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd fbfe 	bl	8000208 <strlen>
 8002a0c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	6939      	ldr	r1, [r7, #16]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f001 fb40 	bl	800409c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	18d0      	adds	r0, r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f008 f9ae 	bl	800ad90 <memcpy>
      offset += length_md5sum;
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4413      	add	r3, r2
 8002a3a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002a42:	68f9      	ldr	r1, [r7, #12]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	4413      	add	r3, r2
 8002a4a:	b2ca      	uxtb	r2, r1
 8002a4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	0a19      	lsrs	r1, r3, #8
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3301      	adds	r3, #1
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	4413      	add	r3, r2
 8002a5a:	b2ca      	uxtb	r2, r1
 8002a5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	0c19      	lsrs	r1, r3, #16
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3302      	adds	r3, #2
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	4413      	add	r3, r2
 8002a6a:	b2ca      	uxtb	r2, r1
 8002a6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	0e19      	lsrs	r1, r3, #24
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3303      	adds	r3, #3
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	4413      	add	r3, r2
 8002a7a:	b2ca      	uxtb	r2, r1
 8002a7c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3304      	adds	r3, #4
 8002a82:	61fb      	str	r3, [r7, #28]
      return offset;
 8002a84:	69fb      	ldr	r3, [r7, #28]
    }
 8002a86:	4618      	mov	r0, r3
 8002a88:	3720      	adds	r7, #32
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b08a      	sub	sp, #40	; 0x28
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	889b      	ldrh	r3, [r3, #4]
 8002aae:	b21a      	sxth	r2, r3
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	6839      	ldr	r1, [r7, #0]
 8002ab6:	440b      	add	r3, r1
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	b21b      	sxth	r3, r3
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	b21b      	sxth	r3, r3
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	3302      	adds	r3, #2
 8002acc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	441a      	add	r2, r3
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	4611      	mov	r1, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f001 fafc 	bl	80040d8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	4413      	add	r3, r2
 8002af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d20c      	bcs.n	8002b10 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	441a      	add	r2, r3
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	3b01      	subs	r3, #1
 8002b00:	6839      	ldr	r1, [r7, #0]
 8002b02:	440b      	add	r3, r1
 8002b04:	7812      	ldrb	r2, [r2, #0]
 8002b06:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0e:	e7ec      	b.n	8002aea <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	4413      	add	r3, r2
 8002b16:	3b01      	subs	r3, #1
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	441a      	add	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	4413      	add	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	441a      	add	r2, r3
 8002b3a:	f107 0310 	add.w	r3, r7, #16
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f001 fac9 	bl	80040d8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	623b      	str	r3, [r7, #32]
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4413      	add	r3, r2
 8002b56:	6a3a      	ldr	r2, [r7, #32]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d20c      	bcs.n	8002b76 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	441a      	add	r2, r3
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	3b01      	subs	r3, #1
 8002b66:	6839      	ldr	r1, [r7, #0]
 8002b68:	440b      	add	r3, r1
 8002b6a:	7812      	ldrb	r2, [r2, #0]
 8002b6c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	3301      	adds	r3, #1
 8002b72:	623b      	str	r3, [r7, #32]
 8002b74:	e7ec      	b.n	8002b50 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	4413      	add	r3, r2
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	441a      	add	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4413      	add	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	441a      	add	r2, r3
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 fa96 	bl	80040d8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4413      	add	r3, r2
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d20c      	bcs.n	8002bdc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	441a      	add	r2, r3
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	6839      	ldr	r1, [r7, #0]
 8002bce:	440b      	add	r3, r1
 8002bd0:	7812      	ldrb	r2, [r2, #0]
 8002bd2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e7ec      	b.n	8002bb6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4413      	add	r3, r2
 8002be2:	3b01      	subs	r3, #1
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	441a      	add	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	6839      	ldr	r1, [r7, #0]
 8002c0a:	440a      	add	r2, r1
 8002c0c:	7812      	ldrb	r2, [r2, #0]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	3301      	adds	r3, #1
 8002c18:	6839      	ldr	r1, [r7, #0]
 8002c1a:	440b      	add	r3, r1
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	021b      	lsls	r3, r3, #8
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	3302      	adds	r3, #2
 8002c2a:	6839      	ldr	r1, [r7, #0]
 8002c2c:	440b      	add	r3, r1
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	041b      	lsls	r3, r3, #16
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	3303      	adds	r3, #3
 8002c3c:	6839      	ldr	r1, [r7, #0]
 8002c3e:	440b      	add	r3, r1
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	061b      	lsls	r3, r3, #24
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	3304      	adds	r3, #4
 8002c52:	61bb      	str	r3, [r7, #24]
     return offset;
 8002c54:	69bb      	ldr	r3, [r7, #24]
    }
 8002c56:	4618      	mov	r0, r3
 8002c58:	3728      	adds	r7, #40	; 0x28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	0800b110 	.word	0x0800b110

08002c7c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	0800b12c 	.word	0x0800b12c

08002c98 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fd34 	bl	8002710 <_ZN3ros3MsgC1Ev>
 8002ca8:	4a06      	ldr	r2, [pc, #24]	; (8002cc4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	711a      	strb	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a04      	ldr	r2, [pc, #16]	; (8002cc8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002cb8:	609a      	str	r2, [r3, #8]
    {
    }
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	0800b3fc 	.word	0x0800b3fc
 8002cc8:	0800b10c 	.word	0x0800b10c

08002ccc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	7912      	ldrb	r2, [r2, #4]
 8002ce4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd fa89 	bl	8000208 <strlen>
 8002cf6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f001 f9cb 	bl	800409c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	18d0      	adds	r0, r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f008 f839 	bl	800ad90 <memcpy>
      offset += length_msg;
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4413      	add	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
      return offset;
 8002d26:	68fb      	ldr	r3, [r7, #12]
    }
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	4413      	add	r3, r2
 8002d44:	781a      	ldrb	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	441a      	add	r2, r3
 8002d56:	f107 030c 	add.w	r3, r7, #12
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f001 f9bb 	bl	80040d8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	3304      	adds	r3, #4
 8002d66:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4413      	add	r3, r2
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d20c      	bcs.n	8002d92 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	441a      	add	r2, r3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	6839      	ldr	r1, [r7, #0]
 8002d84:	440b      	add	r3, r1
 8002d86:	7812      	ldrb	r2, [r2, #0]
 8002d88:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	e7ec      	b.n	8002d6c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	441a      	add	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4413      	add	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
     return offset;
 8002db6:	693b      	ldr	r3, [r7, #16]
    }
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	0800b150 	.word	0x0800b150

08002ddc <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	4b03      	ldr	r3, [pc, #12]	; (8002df4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	0800b164 	.word	0x0800b164

08002df8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff fc84 	bl	8002710 <_ZN3ros3MsgC1Ev>
 8002e08:	4a0c      	ldr	r2, [pc, #48]	; (8002e3c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	619a      	str	r2, [r3, #24]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	61da      	str	r2, [r3, #28]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	0800b3e4 	.word	0x0800b3e4

08002e40 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6859      	ldr	r1, [r3, #4]
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	4413      	add	r3, r2
 8002e58:	b2ca      	uxtb	r2, r1
 8002e5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	0a19      	lsrs	r1, r3, #8
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	3301      	adds	r3, #1
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	4413      	add	r3, r2
 8002e6a:	b2ca      	uxtb	r2, r1
 8002e6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	0c19      	lsrs	r1, r3, #16
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	3302      	adds	r3, #2
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	b2ca      	uxtb	r2, r1
 8002e7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	0e19      	lsrs	r1, r3, #24
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	3303      	adds	r3, #3
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	b2ca      	uxtb	r2, r1
 8002e90:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	3304      	adds	r3, #4
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002e98:	2300      	movs	r3, #0
 8002e9a:	623b      	str	r3, [r7, #32]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	6a3a      	ldr	r2, [r7, #32]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d22b      	bcs.n	8002efe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002eb4:	6939      	ldr	r1, [r7, #16]
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	b2ca      	uxtb	r2, r1
 8002ebe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	0a19      	lsrs	r1, r3, #8
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	4413      	add	r3, r2
 8002ecc:	b2ca      	uxtb	r2, r1
 8002ece:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	0c19      	lsrs	r1, r3, #16
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	b2ca      	uxtb	r2, r1
 8002ede:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	0e19      	lsrs	r1, r3, #24
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	3303      	adds	r3, #3
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	4413      	add	r3, r2
 8002eec:	b2ca      	uxtb	r2, r1
 8002eee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	623b      	str	r3, [r7, #32]
 8002efc:	e7ce      	b.n	8002e9c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6919      	ldr	r1, [r3, #16]
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	b2ca      	uxtb	r2, r1
 8002f0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	0a19      	lsrs	r1, r3, #8
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	3301      	adds	r3, #1
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	4413      	add	r3, r2
 8002f1a:	b2ca      	uxtb	r2, r1
 8002f1c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	0c19      	lsrs	r1, r3, #16
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	3302      	adds	r3, #2
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	b2ca      	uxtb	r2, r1
 8002f2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	0e19      	lsrs	r1, r3, #24
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	3303      	adds	r3, #3
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	b2ca      	uxtb	r2, r1
 8002f40:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	3304      	adds	r3, #4
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d22b      	bcs.n	8002fae <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002f64:	68f9      	ldr	r1, [r7, #12]
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	b2ca      	uxtb	r2, r1
 8002f6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	0a19      	lsrs	r1, r3, #8
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	3301      	adds	r3, #1
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	b2ca      	uxtb	r2, r1
 8002f7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	0c19      	lsrs	r1, r3, #16
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	3302      	adds	r3, #2
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	b2ca      	uxtb	r2, r1
 8002f8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	0e19      	lsrs	r1, r3, #24
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	3303      	adds	r3, #3
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	b2ca      	uxtb	r2, r1
 8002f9e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	61fb      	str	r3, [r7, #28]
 8002fac:	e7ce      	b.n	8002f4c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69d9      	ldr	r1, [r3, #28]
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	b2ca      	uxtb	r2, r1
 8002fba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	0a19      	lsrs	r1, r3, #8
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	4413      	add	r3, r2
 8002fca:	b2ca      	uxtb	r2, r1
 8002fcc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	0c19      	lsrs	r1, r3, #16
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	4413      	add	r3, r2
 8002fdc:	b2ca      	uxtb	r2, r1
 8002fde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	0e19      	lsrs	r1, r3, #24
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	3303      	adds	r3, #3
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	4413      	add	r3, r2
 8002fee:	b2ca      	uxtb	r2, r1
 8002ff0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	429a      	cmp	r2, r3
 8003004:	d228      	bcs.n	8003058 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd f8f8 	bl	8000208 <strlen>
 8003018:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	4413      	add	r3, r2
 8003020:	6979      	ldr	r1, [r7, #20]
 8003022:	4618      	mov	r0, r3
 8003024:	f001 f83a 	bl	800409c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	3304      	adds	r3, #4
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	18d0      	adds	r0, r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4619      	mov	r1, r3
 8003044:	f007 fea4 	bl	800ad90 <memcpy>
      offset += length_stringsi;
 8003048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	4413      	add	r3, r2
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	3301      	adds	r3, #1
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	e7d1      	b.n	8002ffc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800305a:	4618      	mov	r0, r3
 800305c:	3728      	adds	r7, #40	; 0x28
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003062:	b580      	push	{r7, lr}
 8003064:	b08e      	sub	sp, #56	; 0x38
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	4413      	add	r3, r2
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800307a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307c:	3301      	adds	r3, #1
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	4413      	add	r3, r2
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	021b      	lsls	r3, r3, #8
 8003086:	6a3a      	ldr	r2, [r7, #32]
 8003088:	4313      	orrs	r3, r2
 800308a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800308c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308e:	3302      	adds	r3, #2
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	4413      	add	r3, r2
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	041b      	lsls	r3, r3, #16
 8003098:	6a3a      	ldr	r2, [r7, #32]
 800309a:	4313      	orrs	r3, r2
 800309c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800309e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a0:	3303      	adds	r3, #3
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	4413      	add	r3, r2
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	061b      	lsls	r3, r3, #24
 80030aa:	6a3a      	ldr	r2, [r7, #32]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80030b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b2:	3304      	adds	r3, #4
 80030b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	6a3a      	ldr	r2, [r7, #32]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d90a      	bls.n	80030d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4619      	mov	r1, r3
 80030ca:	4610      	mov	r0, r2
 80030cc:	f007 fe76 	bl	800adbc <realloc>
 80030d0:	4602      	mov	r2, r0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a3a      	ldr	r2, [r7, #32]
 80030da:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80030dc:	2300      	movs	r3, #0
 80030de:	633b      	str	r3, [r7, #48]	; 0x30
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d236      	bcs.n	8003158 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030f2:	6839      	ldr	r1, [r7, #0]
 80030f4:	440a      	add	r2, r1
 80030f6:	7812      	ldrb	r2, [r2, #0]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003100:	3301      	adds	r3, #1
 8003102:	6839      	ldr	r1, [r7, #0]
 8003104:	440b      	add	r3, r1
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003112:	3302      	adds	r3, #2
 8003114:	6839      	ldr	r1, [r7, #0]
 8003116:	440b      	add	r3, r1
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	041b      	lsls	r3, r3, #16
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003124:	3303      	adds	r3, #3
 8003126:	6839      	ldr	r1, [r7, #0]
 8003128:	440b      	add	r3, r1
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	061b      	lsls	r3, r3, #24
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313a:	3304      	adds	r3, #4
 800313c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	3208      	adds	r2, #8
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	3301      	adds	r3, #1
 8003154:	633b      	str	r3, [r7, #48]	; 0x30
 8003156:	e7c3      	b.n	80030e0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	4413      	add	r3, r2
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003164:	3301      	adds	r3, #1
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	4413      	add	r3, r2
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	4313      	orrs	r3, r2
 8003172:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003176:	3302      	adds	r3, #2
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	4413      	add	r3, r2
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	041b      	lsls	r3, r3, #16
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	4313      	orrs	r3, r2
 8003184:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003188:	3303      	adds	r3, #3
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	4413      	add	r3, r2
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	061b      	lsls	r3, r3, #24
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	4313      	orrs	r3, r2
 8003196:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319a:	3304      	adds	r3, #4
 800319c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d90a      	bls.n	80031be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699a      	ldr	r2, [r3, #24]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4619      	mov	r1, r3
 80031b2:	4610      	mov	r0, r2
 80031b4:	f007 fe02 	bl	800adbc <realloc>
 80031b8:	4602      	mov	r2, r0
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69fa      	ldr	r2, [r7, #28]
 80031c2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80031c4:	2300      	movs	r3, #0
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d236      	bcs.n	8003240 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031da:	6839      	ldr	r1, [r7, #0]
 80031dc:	440a      	add	r2, r1
 80031de:	7812      	ldrb	r2, [r2, #0]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e8:	3301      	adds	r3, #1
 80031ea:	6839      	ldr	r1, [r7, #0]
 80031ec:	440b      	add	r3, r1
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fa:	3302      	adds	r3, #2
 80031fc:	6839      	ldr	r1, [r7, #0]
 80031fe:	440b      	add	r3, r1
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	041b      	lsls	r3, r3, #16
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320c:	3303      	adds	r3, #3
 800320e:	6839      	ldr	r1, [r7, #0]
 8003210:	440b      	add	r3, r1
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	061b      	lsls	r3, r3, #24
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003222:	3304      	adds	r3, #4
 8003224:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	3214      	adds	r2, #20
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	3301      	adds	r3, #1
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800323e:	e7c3      	b.n	80031c8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	4413      	add	r3, r2
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800324a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324c:	3301      	adds	r3, #1
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	4413      	add	r3, r2
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800325c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325e:	3302      	adds	r3, #2
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	4413      	add	r3, r2
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	041b      	lsls	r3, r3, #16
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800326e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003270:	3303      	adds	r3, #3
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	4413      	add	r3, r2
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	061b      	lsls	r3, r3, #24
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4313      	orrs	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003282:	3304      	adds	r3, #4
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	429a      	cmp	r2, r3
 800328e:	d90a      	bls.n	80032a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4619      	mov	r1, r3
 800329a:	4610      	mov	r0, r2
 800329c:	f007 fd8e 	bl	800adbc <realloc>
 80032a0:	4602      	mov	r2, r0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80032ac:	2300      	movs	r3, #0
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d23f      	bcs.n	800333a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80032ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	441a      	add	r2, r3
 80032c0:	f107 030c 	add.w	r3, r7, #12
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 ff06 	bl	80040d8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80032cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ce:	3304      	adds	r3, #4
 80032d0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80032d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
 80032d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032de:	429a      	cmp	r2, r3
 80032e0:	d20c      	bcs.n	80032fc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	441a      	add	r2, r3
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	3b01      	subs	r3, #1
 80032ec:	6839      	ldr	r1, [r7, #0]
 80032ee:	440b      	add	r3, r1
 80032f0:	7812      	ldrb	r2, [r2, #0]
 80032f2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	3301      	adds	r3, #1
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
 80032fa:	e7ec      	b.n	80032d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80032fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4413      	add	r3, r2
 8003302:	3b01      	subs	r3, #1
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	4413      	add	r3, r2
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800330c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330e:	3b01      	subs	r3, #1
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	441a      	add	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4413      	add	r3, r2
 800331e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	3220      	adds	r2, #32
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8003332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003334:	3301      	adds	r3, #1
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28
 8003338:	e7ba      	b.n	80032b0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800333a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800333c:	4618      	mov	r0, r3
 800333e:	3738      	adds	r7, #56	; 0x38
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	4b03      	ldr	r3, [pc, #12]	; (800335c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	0800b308 	.word	0x0800b308

08003360 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	4b03      	ldr	r3, [pc, #12]	; (8003378 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800336a:	4618      	mov	r0, r3
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	0800b188 	.word	0x0800b188

0800337c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	611a      	str	r2, [r3, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68d8      	ldr	r0, [r3, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6891      	ldr	r1, [r2, #8]
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	4798      	blx	r3
 80033c8:	4603      	mov	r3, r0
  };
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
  }
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <_ZN13STM32Hardware10getRdmaIndEv>:
	UART_HandleTypeDef *huart;

	const static uint16_t rbuflen = 512;
	uint8_t rbuf[rbuflen];
	uint32_t rind;
	inline uint32_t getRdmaInd(void) {
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
		return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003400:	f3c3 0308 	ubfx	r3, r3, #0, #9
	}
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <_ZN13STM32HardwareC1Ev>:
	const static uint16_t tbuflen = 512;
	uint8_t tbuf[tbuflen];
	uint32_t twind, tfind;

public:
	STM32Hardware() :
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
			huart(&huart2), rind(0), twind(0), tfind(0) {
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <_ZN13STM32HardwareC1Ev+0x34>)
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	}
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	20000e58 	.word	0x20000e58

08003448 <_ZN13STM32Hardware4initEv>:

	STM32Hardware(UART_HandleTypeDef *huart_) :
			huart(huart_), rind(0), twind(0), tfind(0) {
	}

	void init() {
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
		reset_rbuf();
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f804 	bl	800345e <_ZN13STM32Hardware10reset_rbufEv>
	}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <_ZN13STM32Hardware10reset_rbufEv>:

	void reset_rbuf(void) {
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
		HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003472:	4619      	mov	r1, r3
 8003474:	f006 fac8 	bl	8009a08 <HAL_UART_Receive_DMA>
	}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <_ZN13STM32Hardware4readEv>:

	int read() {
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
		int c = -1;
 8003488:	f04f 33ff 	mov.w	r3, #4294967295
 800348c:	60fb      	str	r3, [r7, #12]
		if (rind != getRdmaInd()) {
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ffa8 	bl	80033ea <_ZN13STM32Hardware10getRdmaIndEv>
 800349a:	4603      	mov	r3, r0
 800349c:	429c      	cmp	r4, r3
 800349e:	bf14      	ite	ne
 80034a0:	2301      	movne	r3, #1
 80034a2:	2300      	moveq	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d012      	beq.n	80034d0 <_ZN13STM32Hardware4readEv+0x50>
			c = rbuf[rind++];
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80034b0:	1c59      	adds	r1, r3, #1
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4413      	add	r3, r2
 80034bc:	791b      	ldrb	r3, [r3, #4]
 80034be:	60fb      	str	r3, [r7, #12]
			rind &= rbuflen - 1;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80034c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		}
		return c;
 80034d0:	68fb      	ldr	r3, [r7, #12]
	}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd90      	pop	{r4, r7, pc}
	...

080034dc <_ZN13STM32Hardware5flushEv>:

	void flush(void) {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
		static bool mutex = false;

		if ((huart->gState == HAL_UART_STATE_READY) && !mutex) {
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d108      	bne.n	8003504 <_ZN13STM32Hardware5flushEv+0x28>
 80034f2:	4b28      	ldr	r3, [pc, #160]	; (8003594 <_ZN13STM32Hardware5flushEv+0xb8>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	f083 0301 	eor.w	r3, r3, #1
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <_ZN13STM32Hardware5flushEv+0x28>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <_ZN13STM32Hardware5flushEv+0x2a>
 8003504:	2300      	movs	r3, #0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d03f      	beq.n	800358a <_ZN13STM32Hardware5flushEv+0xae>
			mutex = true;
 800350a:	4b22      	ldr	r3, [pc, #136]	; (8003594 <_ZN13STM32Hardware5flushEv+0xb8>)
 800350c:	2201      	movs	r2, #1
 800350e:	701a      	strb	r2, [r3, #0]

			if (twind != tfind) {
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800351c:	429a      	cmp	r2, r3
 800351e:	d031      	beq.n	8003584 <_ZN13STM32Hardware5flushEv+0xa8>
				uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800352c:	429a      	cmp	r2, r3
 800352e:	d20a      	bcs.n	8003546 <_ZN13STM32Hardware5flushEv+0x6a>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003536:	b29a      	uxth	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800353e:	b29b      	uxth	r3, r3
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	b29b      	uxth	r3, r3
 8003544:	e006      	b.n	8003554 <_ZN13STM32Hardware5flushEv+0x78>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800354c:	b29b      	uxth	r3, r3
 800354e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003552:	b29b      	uxth	r3, r3
 8003554:	81fb      	strh	r3, [r7, #14]
				HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003560:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4413      	add	r3, r2
 8003568:	89fa      	ldrh	r2, [r7, #14]
 800356a:	4619      	mov	r1, r3
 800356c:	f006 f9ce 	bl	800990c <HAL_UART_Transmit_DMA>
				tfind = (tfind + len) & (tbuflen - 1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003576:	89fb      	ldrh	r3, [r7, #14]
 8003578:	4413      	add	r3, r2
 800357a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			}
			mutex = false;
 8003584:	4b03      	ldr	r3, [pc, #12]	; (8003594 <_ZN13STM32Hardware5flushEv+0xb8>)
 8003586:	2200      	movs	r2, #0
 8003588:	701a      	strb	r2, [r3, #0]
		}
	}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200001b0 	.word	0x200001b0

08003598 <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t *data, int length) {
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
		int n = length;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	617b      	str	r3, [r7, #20]
		n = n <= tbuflen ? n : tbuflen;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ae:	bfa8      	it	ge
 80035b0:	f44f 7300 	movge.w	r3, #512	; 0x200
 80035b4:	617b      	str	r3, [r7, #20]

		int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80035bc:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	4293      	cmp	r3, r2
 80035c4:	bf28      	it	cs
 80035c6:	4613      	movcs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
		memcpy(&(tbuf[twind]), data, n_tail);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80035d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	4618      	mov	r0, r3
 80035de:	f007 fbd7 	bl	800ad90 <memcpy>
		twind = (twind + n) & (tbuflen - 1);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	4413      	add	r3, r2
 80035ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

		if (n != n_tail) {
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d00b      	beq.n	8003616 <_ZN13STM32Hardware5writeEPhi+0x7e>
			memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	18d1      	adds	r1, r2, r3
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	461a      	mov	r2, r3
 8003612:	f007 fbbd 	bl	800ad90 <memcpy>
		}

		flush();
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f7ff ff60 	bl	80034dc <_ZN13STM32Hardware5flushEv>
	}
 800361c:	bf00      	nop
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <_ZN13STM32Hardware4timeEv>:

	unsigned long time() {
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
		return HAL_GetTick();;
 800362c:	f002 ff64 	bl	80064f8 <HAL_GetTick>
 8003630:	4603      	mov	r3, r0
	}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff f862 	bl	8002710 <_ZN3ros3MsgC1Ev>
 800364c:	4a08      	ldr	r2, [pc, #32]	; (8003670 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a07      	ldr	r2, [pc, #28]	; (8003674 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8003656:	605a      	str	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	609a      	str	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	60da      	str	r2, [r3, #12]
    {
    }
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	0800b3a0 	.word	0x0800b3a0
 8003674:	0800b10c 	.word	0x0800b10c

08003678 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4618      	mov	r0, r3
 800368c:	f7fc fdbc 	bl	8000208 <strlen>
 8003690:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	4413      	add	r3, r2
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fcfe 	bl	800409c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3304      	adds	r3, #4
 80036a4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	18d0      	adds	r0, r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	4619      	mov	r1, r3
 80036b4:	f007 fb6c 	bl	800ad90 <memcpy>
      offset += length_label;
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	4413      	add	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6899      	ldr	r1, [r3, #8]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	4413      	add	r3, r2
 80036ca:	b2ca      	uxtb	r2, r1
 80036cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	0a19      	lsrs	r1, r3, #8
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3301      	adds	r3, #1
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	4413      	add	r3, r2
 80036dc:	b2ca      	uxtb	r2, r1
 80036de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	0c19      	lsrs	r1, r3, #16
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3302      	adds	r3, #2
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	4413      	add	r3, r2
 80036ee:	b2ca      	uxtb	r2, r1
 80036f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	0e19      	lsrs	r1, r3, #24
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3303      	adds	r3, #3
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	4413      	add	r3, r2
 8003700:	b2ca      	uxtb	r2, r1
 8003702:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3304      	adds	r3, #4
 8003708:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68d9      	ldr	r1, [r3, #12]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	4413      	add	r3, r2
 8003714:	b2ca      	uxtb	r2, r1
 8003716:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	0a19      	lsrs	r1, r3, #8
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3301      	adds	r3, #1
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	4413      	add	r3, r2
 8003726:	b2ca      	uxtb	r2, r1
 8003728:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	0c19      	lsrs	r1, r3, #16
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3302      	adds	r3, #2
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	4413      	add	r3, r2
 8003738:	b2ca      	uxtb	r2, r1
 800373a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	0e19      	lsrs	r1, r3, #24
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	3303      	adds	r3, #3
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	4413      	add	r3, r2
 800374a:	b2ca      	uxtb	r2, r1
 800374c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3304      	adds	r3, #4
 8003752:	60fb      	str	r3, [r7, #12]
      return offset;
 8003754:	68fb      	ldr	r3, [r7, #12]
    }
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800375e:	b580      	push	{r7, lr}
 8003760:	b086      	sub	sp, #24
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	441a      	add	r2, r3
 8003772:	f107 030c 	add.w	r3, r7, #12
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fcad 	bl	80040d8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	3304      	adds	r3, #4
 8003782:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4413      	add	r3, r2
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	429a      	cmp	r2, r3
 8003792:	d20c      	bcs.n	80037ae <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	441a      	add	r2, r3
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	3b01      	subs	r3, #1
 800379e:	6839      	ldr	r1, [r7, #0]
 80037a0:	440b      	add	r3, r1
 80037a2:	7812      	ldrb	r2, [r2, #0]
 80037a4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	3301      	adds	r3, #1
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	e7ec      	b.n	8003788 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	3b01      	subs	r3, #1
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	4413      	add	r3, r2
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	441a      	add	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	605a      	str	r2, [r3, #4]
      offset += length_label;
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4413      	add	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	4413      	add	r3, r2
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	3301      	adds	r3, #1
 80037e8:	6839      	ldr	r1, [r7, #0]
 80037ea:	440b      	add	r3, r1
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	3302      	adds	r3, #2
 80037fe:	6839      	ldr	r1, [r7, #0]
 8003800:	440b      	add	r3, r1
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	3303      	adds	r3, #3
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	440b      	add	r3, r1
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	061b      	lsls	r3, r3, #24
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	3304      	adds	r3, #4
 8003826:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	4413      	add	r3, r2
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	3301      	adds	r3, #1
 800383e:	6839      	ldr	r1, [r7, #0]
 8003840:	440b      	add	r3, r1
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	021b      	lsls	r3, r3, #8
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	3302      	adds	r3, #2
 8003854:	6839      	ldr	r1, [r7, #0]
 8003856:	440b      	add	r3, r1
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	041b      	lsls	r3, r3, #16
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	3303      	adds	r3, #3
 800386a:	6839      	ldr	r1, [r7, #0]
 800386c:	440b      	add	r3, r1
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	061b      	lsls	r3, r3, #24
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	3304      	adds	r3, #4
 800387c:	613b      	str	r3, [r7, #16]
     return offset;
 800387e:	693b      	ldr	r3, [r7, #16]
    }
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	0800b1ac 	.word	0x0800b1ac

080038a4 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	4b03      	ldr	r3, [pc, #12]	; (80038bc <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	0800b1cc 	.word	0x0800b1cc

080038c0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe ff20 	bl	8002710 <_ZN3ros3MsgC1Ev>
 80038d0:	4a0a      	ldr	r2, [pc, #40]	; (80038fc <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	605a      	str	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3308      	adds	r3, #8
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff feab 	bl	800363c <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	619a      	str	r2, [r3, #24]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	61da      	str	r2, [r3, #28]
    {
    }
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	0800b388 	.word	0x0800b388

08003900 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6859      	ldr	r1, [r3, #4]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	4413      	add	r3, r2
 8003918:	b2ca      	uxtb	r2, r1
 800391a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	0a19      	lsrs	r1, r3, #8
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3301      	adds	r3, #1
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	4413      	add	r3, r2
 800392a:	b2ca      	uxtb	r2, r1
 800392c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	0c19      	lsrs	r1, r3, #16
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3302      	adds	r3, #2
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	4413      	add	r3, r2
 800393c:	b2ca      	uxtb	r2, r1
 800393e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	0e19      	lsrs	r1, r3, #24
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3303      	adds	r3, #3
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	4413      	add	r3, r2
 800394e:	b2ca      	uxtb	r2, r1
 8003950:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3304      	adds	r3, #4
 8003956:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003958:	2300      	movs	r3, #0
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	429a      	cmp	r2, r3
 8003964:	d218      	bcs.n	8003998 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	18d0      	adds	r0, r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699a      	ldr	r2, [r3, #24]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	4413      	add	r3, r2
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	6839      	ldr	r1, [r7, #0]
 8003982:	440a      	add	r2, r1
 8003984:	4611      	mov	r1, r2
 8003986:	4798      	blx	r3
 8003988:	4602      	mov	r2, r0
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4413      	add	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	3301      	adds	r3, #1
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	e7e1      	b.n	800395c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69d9      	ldr	r1, [r3, #28]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	4413      	add	r3, r2
 80039a2:	b2ca      	uxtb	r2, r1
 80039a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	0a19      	lsrs	r1, r3, #8
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	3301      	adds	r3, #1
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	4413      	add	r3, r2
 80039b4:	b2ca      	uxtb	r2, r1
 80039b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	0c19      	lsrs	r1, r3, #16
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3302      	adds	r3, #2
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	4413      	add	r3, r2
 80039c6:	b2ca      	uxtb	r2, r1
 80039c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	0e19      	lsrs	r1, r3, #24
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3303      	adds	r3, #3
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	4413      	add	r3, r2
 80039d8:	b2ca      	uxtb	r2, r1
 80039da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3304      	adds	r3, #4
 80039e0:	60fb      	str	r3, [r7, #12]
      return offset;
 80039e2:	68fb      	ldr	r3, [r7, #12]
    }
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	4413      	add	r3, r2
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	3301      	adds	r3, #1
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	3302      	adds	r3, #2
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	041b      	lsls	r3, r3, #16
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	3303      	adds	r3, #3
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	4413      	add	r3, r2
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	061b      	lsls	r3, r3, #24
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d90a      	bls.n	8003a60 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	4619      	mov	r1, r3
 8003a54:	4610      	mov	r0, r2
 8003a56:	f007 f9b1 	bl	800adbc <realloc>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d21b      	bcs.n	8003aac <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f103 0008 	add.w	r0, r3, #8
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	4413      	add	r3, r2
 8003a80:	4619      	mov	r1, r3
 8003a82:	f7ff fe6c 	bl	800375e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8003a86:	4602      	mov	r2, r0
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	18d0      	adds	r0, r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	2210      	movs	r2, #16
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f007 f976 	bl	800ad90 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	e7de      	b.n	8003a6a <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	6839      	ldr	r1, [r7, #0]
 8003ac4:	440b      	add	r3, r1
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	021b      	lsls	r3, r3, #8
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	3302      	adds	r3, #2
 8003ad8:	6839      	ldr	r1, [r7, #0]
 8003ada:	440b      	add	r3, r1
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	041b      	lsls	r3, r3, #16
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69da      	ldr	r2, [r3, #28]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	3303      	adds	r3, #3
 8003aee:	6839      	ldr	r1, [r7, #0]
 8003af0:	440b      	add	r3, r1
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	061b      	lsls	r3, r3, #24
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	3304      	adds	r3, #4
 8003b00:	617b      	str	r3, [r7, #20]
     return offset;
 8003b02:	697b      	ldr	r3, [r7, #20]
    }
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	4b03      	ldr	r3, [pc, #12]	; (8003b24 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	0800b1f0 	.word	0x0800b1f0

08003b28 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	0800b20c 	.word	0x0800b20c

08003b44 <_ZN8std_msgs15Int16MultiArrayC1Ev>:
      uint32_t data_length;
      typedef int16_t _data_type;
      _data_type st_data;
      _data_type * data;

    Int16MultiArray():
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fe fdde 	bl	8002710 <_ZN3ros3MsgC1Ev>
 8003b54:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <_ZN8std_msgs15Int16MultiArrayC1Ev+0x38>)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff feae 	bl	80038c0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	0800b370 	.word	0x0800b370

08003b80 <_ZNK8std_msgs15Int16MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	1d18      	adds	r0, r3, #4
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	4413      	add	r3, r2
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f7ff feb1 	bl	8003900 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	4413      	add	r3, r2
 8003bb0:	b2ca      	uxtb	r2, r1
 8003bb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	0a19      	lsrs	r1, r3, #8
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	b2ca      	uxtb	r2, r1
 8003bc4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	0c19      	lsrs	r1, r3, #16
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	3302      	adds	r3, #2
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	b2ca      	uxtb	r2, r1
 8003bd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	0e19      	lsrs	r1, r3, #24
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	3303      	adds	r3, #3
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	4413      	add	r3, r2
 8003be6:	b2ca      	uxtb	r2, r1
 8003be8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	3304      	adds	r3, #4
 8003bee:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d21d      	bcs.n	8003c3a <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0xba>
      union {
        int16_t real;
        uint16_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	4413      	add	r3, r2
 8003c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c0c:	81bb      	strh	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8003c0e:	89b9      	ldrh	r1, [r7, #12]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	4413      	add	r3, r2
 8003c16:	b2ca      	uxtb	r2, r1
 8003c18:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8003c1a:	89bb      	ldrh	r3, [r7, #12]
 8003c1c:	0a1b      	lsrs	r3, r3, #8
 8003c1e:	b299      	uxth	r1, r3
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	3301      	adds	r3, #1
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	4413      	add	r3, r2
 8003c28:	b2ca      	uxtb	r2, r1
 8003c2a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	3302      	adds	r3, #2
 8003c30:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	3301      	adds	r3, #1
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	e7dc      	b.n	8003bf4 <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0x74>
      }
      return offset;
 8003c3a:	697b      	ldr	r3, [r7, #20]
    }
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <_ZN8std_msgs15Int16MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	1d18      	adds	r0, r3, #4
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f7ff fec5 	bl	80039ec <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8003c62:	4602      	mov	r2, r0
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	4413      	add	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	4413      	add	r3, r2
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	3301      	adds	r3, #1
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	3302      	adds	r3, #2
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	041b      	lsls	r3, r3, #16
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	3303      	adds	r3, #3
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	061b      	lsls	r3, r3, #24
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	3304      	adds	r3, #4
 8003cae:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d90a      	bls.n	8003cd0 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x8c>
        this->data = (int16_t*)realloc(this->data, data_lengthT * sizeof(int16_t));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f007 f879 	bl	800adbc <realloc>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d22c      	bcs.n	8003d3e <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0xfa>
      union {
        int16_t real;
        uint16_t base;
      } u_st_data;
      u_st_data.base = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003ce8:	893a      	ldrh	r2, [r7, #8]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	6839      	ldr	r1, [r7, #0]
 8003cee:	440b      	add	r3, r1
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003cfa:	893b      	ldrh	r3, [r7, #8]
 8003cfc:	b21a      	sxth	r2, r3
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	3301      	adds	r3, #1
 8003d02:	6839      	ldr	r1, [r7, #0]
 8003d04:	440b      	add	r3, r1
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	b21b      	sxth	r3, r3
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	b21b      	sxth	r3, r3
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	813b      	strh	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8003d14:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	851a      	strh	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	3302      	adds	r3, #2
 8003d20:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int16_t));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	4413      	add	r3, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	3228      	adds	r2, #40	; 0x28
 8003d30:	8812      	ldrh	r2, [r2, #0]
 8003d32:	b292      	uxth	r2, r2
 8003d34:	801a      	strh	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	e7cd      	b.n	8003cda <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x96>
      }
     return offset;
 8003d3e:	697b      	ldr	r3, [r7, #20]
    }
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <_ZN8std_msgs15Int16MultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/Int16MultiArray"; };
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <_ZN8std_msgs15Int16MultiArray7getTypeEv+0x18>)
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	0800b230 	.word	0x0800b230

08003d64 <_ZN8std_msgs15Int16MultiArray6getMD5Ev>:
    const char * getMD5(){ return "d9338d7f523fcb692fae9d0a0e9f067c"; };
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	4b03      	ldr	r3, [pc, #12]	; (8003d7c <_ZN8std_msgs15Int16MultiArray6getMD5Ev+0x18>)
 8003d6e:	4618      	mov	r0, r3
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	0800b24c 	.word	0x0800b24c

08003d80 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
      data("")
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fe fcc0 	bl	8002710 <_ZN3ros3MsgC1Ev>
 8003d90:	4a05      	ldr	r2, [pc, #20]	; (8003da8 <_ZN8std_msgs6StringC1Ev+0x28>)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a04      	ldr	r2, [pc, #16]	; (8003dac <_ZN8std_msgs6StringC1Ev+0x2c>)
 8003d9a:	605a      	str	r2, [r3, #4]
    {
    }
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	0800b358 	.word	0x0800b358
 8003dac:	0800b10c 	.word	0x0800b10c

08003db0 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fc fa20 	bl	8000208 <strlen>
 8003dc8:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	4413      	add	r3, r2
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 f962 	bl	800409c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	18d0      	adds	r0, r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	4619      	mov	r1, r3
 8003dec:	f006 ffd0 	bl	800ad90 <memcpy>
      offset += length_data;
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	4413      	add	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
      return offset;
 8003df8:	68fb      	ldr	r3, [r7, #12]
    }
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b086      	sub	sp, #24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	441a      	add	r2, r3
 8003e16:	f107 030c 	add.w	r3, r7, #12
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 f95b 	bl	80040d8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	3304      	adds	r3, #4
 8003e26:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4413      	add	r3, r2
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d20c      	bcs.n	8003e52 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	441a      	add	r2, r3
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	6839      	ldr	r1, [r7, #0]
 8003e44:	440b      	add	r3, r1
 8003e46:	7812      	ldrb	r2, [r2, #0]
 8003e48:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	e7ec      	b.n	8003e2c <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	441a      	add	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
     return offset;
 8003e76:	693b      	ldr	r3, [r7, #16]
    }
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	4b03      	ldr	r3, [pc, #12]	; (8003e98 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	0800b270 	.word	0x0800b270

08003e9c <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	0800b280 	.word	0x0800b280

08003eb8 <_Z13cake_callbackRKN8std_msgs6StringE>:
extern char hole[4];
extern short int mission_array[5], rotate_state[3];

extern int counttry;
extern int tower_step, temp_pub;
void cake_callback(const std_msgs::String &msg) {
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]

//	std::string str = msg.data; // string data
	if (msg.data[0] == 'b' || msg.data[0] == 'y' || msg.data[0] == 'p') {
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b62      	cmp	r3, #98	; 0x62
 8003ec8:	d009      	beq.n	8003ede <_Z13cake_callbackRKN8std_msgs6StringE+0x26>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b79      	cmp	r3, #121	; 0x79
 8003ed2:	d004      	beq.n	8003ede <_Z13cake_callbackRKN8std_msgs6StringE+0x26>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b70      	cmp	r3, #112	; 0x70
 8003edc:	d134      	bne.n	8003f48 <_Z13cake_callbackRKN8std_msgs6StringE+0x90>
		mission_array[0] = 0;
 8003ede:	4b27      	ldr	r3, [pc, #156]	; (8003f7c <_Z13cake_callbackRKN8std_msgs6StringE+0xc4>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	801a      	strh	r2, [r3, #0]
		hole[(size_t) (msg.data[1] - '0')] = msg.data[0];
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6852      	ldr	r2, [r2, #4]
 8003eec:	3201      	adds	r2, #1
 8003eee:	7812      	ldrb	r2, [r2, #0]
 8003ef0:	3a30      	subs	r2, #48	; 0x30
 8003ef2:	7819      	ldrb	r1, [r3, #0]
 8003ef4:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <_Z13cake_callbackRKN8std_msgs6StringE+0xc8>)
 8003ef6:	5499      	strb	r1, [r3, r2]
		temp_pub = 0;
 8003ef8:	4b22      	ldr	r3, [pc, #136]	; (8003f84 <_Z13cake_callbackRKN8std_msgs6StringE+0xcc>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
//		mission_array[(size_t) (msg.data[1] - '0')] = 1;
		if (msg.data[0] == 'b' && b_bool == 0)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b62      	cmp	r3, #98	; 0x62
 8003f06:	d106      	bne.n	8003f16 <_Z13cake_callbackRKN8std_msgs6StringE+0x5e>
 8003f08:	4b1f      	ldr	r3, [pc, #124]	; (8003f88 <_Z13cake_callbackRKN8std_msgs6StringE+0xd0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d102      	bne.n	8003f16 <_Z13cake_callbackRKN8std_msgs6StringE+0x5e>
			b_bool = 1;
 8003f10:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <_Z13cake_callbackRKN8std_msgs6StringE+0xd0>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
		if (msg.data[0] == 'y' && y_bool == 0)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b79      	cmp	r3, #121	; 0x79
 8003f1e:	d106      	bne.n	8003f2e <_Z13cake_callbackRKN8std_msgs6StringE+0x76>
 8003f20:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <_Z13cake_callbackRKN8std_msgs6StringE+0xd4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <_Z13cake_callbackRKN8std_msgs6StringE+0x76>
			y_bool = 1;
 8003f28:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <_Z13cake_callbackRKN8std_msgs6StringE+0xd4>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
		if (msg.data[0] == 'p' && p_bool == 0)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b70      	cmp	r3, #112	; 0x70
 8003f36:	d11a      	bne.n	8003f6e <_Z13cake_callbackRKN8std_msgs6StringE+0xb6>
 8003f38:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <_Z13cake_callbackRKN8std_msgs6StringE+0xd8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d116      	bne.n	8003f6e <_Z13cake_callbackRKN8std_msgs6StringE+0xb6>
			p_bool = 1;
 8003f40:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <_Z13cake_callbackRKN8std_msgs6StringE+0xd8>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
		if (msg.data[0] == 'p' && p_bool == 0)
 8003f46:	e012      	b.n	8003f6e <_Z13cake_callbackRKN8std_msgs6StringE+0xb6>
	}
	else if (msg.data[0] == 'h' && h_bool == 0) {
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b68      	cmp	r3, #104	; 0x68
 8003f50:	d10e      	bne.n	8003f70 <_Z13cake_callbackRKN8std_msgs6StringE+0xb8>
 8003f52:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <_Z13cake_callbackRKN8std_msgs6StringE+0xdc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <_Z13cake_callbackRKN8std_msgs6StringE+0xb8>
		h_bool = 1;
 8003f5a:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <_Z13cake_callbackRKN8std_msgs6StringE+0xdc>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
		mission_array[0] = 0;
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <_Z13cake_callbackRKN8std_msgs6StringE+0xc4>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	801a      	strh	r2, [r3, #0]
		temp_pub = 0;
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <_Z13cake_callbackRKN8std_msgs6StringE+0xcc>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
	}
}
 8003f6c:	e000      	b.n	8003f70 <_Z13cake_callbackRKN8std_msgs6StringE+0xb8>
		if (msg.data[0] == 'p' && p_bool == 0)
 8003f6e:	bf00      	nop
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	20000c44 	.word	0x20000c44
 8003f80:	20000c00 	.word	0x20000c00
 8003f84:	20000c3c 	.word	0x20000c3c
 8003f88:	20000c10 	.word	0x20000c10
 8003f8c:	20000c14 	.word	0x20000c14
 8003f90:	20000c18 	.word	0x20000c18
 8003f94:	20000c1c 	.word	0x20000c1c

08003f98 <HAL_UART_TxCpltCallback>:
ros::Subscriber<std_msgs::String> sub("mission0", cake_callback);

// (2) Create a publisher
ros::Publisher pub("donefullness0", &feedback);
ros::Publisher pub1("lightgate0", &gate);
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 8003fa0:	4805      	ldr	r0, [pc, #20]	; (8003fb8 <HAL_UART_TxCpltCallback+0x20>)
 8003fa2:	f000 f983 	bl	80042ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff fa97 	bl	80034dc <_ZN13STM32Hardware5flushEv>
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000214 	.word	0x20000214

08003fbc <HAL_UART_ErrorCallback>:
//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
//	nh.getHardware()->reset_rbuf();
//}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a09      	ldr	r2, [pc, #36]	; (8003fec <HAL_UART_ErrorCallback+0x30>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d10b      	bne.n	8003fe4 <HAL_UART_ErrorCallback+0x28>
		HAL_UART_DeInit(&huart2);
 8003fcc:	4807      	ldr	r0, [pc, #28]	; (8003fec <HAL_UART_ErrorCallback+0x30>)
 8003fce:	f005 fbdc 	bl	800978a <HAL_UART_DeInit>
		MX_USART2_UART_Init();
 8003fd2:	f001 ff91 	bl	8005ef8 <MX_USART2_UART_Init>
		nh.getHardware()->init();
 8003fd6:	4806      	ldr	r0, [pc, #24]	; (8003ff0 <HAL_UART_ErrorCallback+0x34>)
 8003fd8:	f000 f968 	bl	80042ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff fa32 	bl	8003448 <_ZN13STM32Hardware4initEv>
	}
}
 8003fe4:	bf00      	nop
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20000e58 	.word	0x20000e58
 8003ff0:	20000214 	.word	0x20000214

08003ff4 <pub_to_ros>:

void pub_to_ros() {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
	// (4) Publish your data
//	feedback.data = (std_msgs::Int16MultiArray::_data_type*) malloc(
//			5 * sizeof(std_msgs::Int16MultiArray::_data_type));
	feedback.data_length = 5;
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <pub_to_ros+0x1c>)
 8003ffa:	2205      	movs	r2, #5
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24
	feedback.data = mission_array;
 8003ffe:	4b04      	ldr	r3, [pc, #16]	; (8004010 <pub_to_ros+0x1c>)
 8004000:	4a04      	ldr	r2, [pc, #16]	; (8004014 <pub_to_ros+0x20>)
 8004002:	62da      	str	r2, [r3, #44]	; 0x2c
//	feedback.data[5] = tower_step;

	pub.publish(&feedback);
 8004004:	4902      	ldr	r1, [pc, #8]	; (8004010 <pub_to_ros+0x1c>)
 8004006:	4804      	ldr	r0, [pc, #16]	; (8004018 <pub_to_ros+0x24>)
 8004008:	f7ff f9cf 	bl	80033aa <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 800400c:	bf00      	nop
 800400e:	bd80      	pop	{r7, pc}
 8004010:	200001b4 	.word	0x200001b4
 8004014:	20000c44 	.word	0x20000c44
 8004018:	20000b6c 	.word	0x20000b6c

0800401c <pub_the_gate>:
void pub_the_gate() {
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
	gate.data_length = 3;
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <pub_the_gate+0x1c>)
 8004022:	2203      	movs	r2, #3
 8004024:	625a      	str	r2, [r3, #36]	; 0x24
	gate.data = rotate_state;
 8004026:	4b04      	ldr	r3, [pc, #16]	; (8004038 <pub_the_gate+0x1c>)
 8004028:	4a04      	ldr	r2, [pc, #16]	; (800403c <pub_the_gate+0x20>)
 800402a:	62da      	str	r2, [r3, #44]	; 0x2c
	pub1.publish(&gate);
 800402c:	4902      	ldr	r1, [pc, #8]	; (8004038 <pub_the_gate+0x1c>)
 800402e:	4804      	ldr	r0, [pc, #16]	; (8004040 <pub_the_gate+0x24>)
 8004030:	f7ff f9bb 	bl	80033aa <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8004034:	bf00      	nop
 8004036:	bd80      	pop	{r7, pc}
 8004038:	200001e4 	.word	0x200001e4
 800403c:	20000c50 	.word	0x20000c50
 8004040:	20000b80 	.word	0x20000b80

08004044 <setup>:
void setup(void) {
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
	nh.initNode();
 8004048:	4808      	ldr	r0, [pc, #32]	; (800406c <setup+0x28>)
 800404a:	f000 f93b 	bl	80042c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.subscribe(sub);
 800404e:	4908      	ldr	r1, [pc, #32]	; (8004070 <setup+0x2c>)
 8004050:	4806      	ldr	r0, [pc, #24]	; (800406c <setup+0x28>)
 8004052:	f000 f954 	bl	80042fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_>

	// (3) Init your publisher with roscore
	nh.advertise(pub);
 8004056:	4907      	ldr	r1, [pc, #28]	; (8004074 <setup+0x30>)
 8004058:	4804      	ldr	r0, [pc, #16]	; (800406c <setup+0x28>)
 800405a:	f000 f97b 	bl	8004354 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(pub1);
 800405e:	4906      	ldr	r1, [pc, #24]	; (8004078 <setup+0x34>)
 8004060:	4802      	ldr	r0, [pc, #8]	; (800406c <setup+0x28>)
 8004062:	f000 f977 	bl	8004354 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8004066:	bf00      	nop
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000214 	.word	0x20000214
 8004070:	20000b50 	.word	0x20000b50
 8004074:	20000b6c 	.word	0x20000b6c
 8004078:	20000b80 	.word	0x20000b80

0800407c <loop>:
void loop(void) {
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8004080:	4804      	ldr	r0, [pc, #16]	; (8004094 <loop+0x18>)
 8004082:	f000 f997 	bl	80043b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	counttry++;
 8004086:	4b04      	ldr	r3, [pc, #16]	; (8004098 <loop+0x1c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3301      	adds	r3, #1
 800408c:	4a02      	ldr	r2, [pc, #8]	; (8004098 <loop+0x1c>)
 800408e:	6013      	str	r3, [r2, #0]
}
 8004090:	bf00      	nop
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20000214 	.word	0x20000214
 8004098:	20000c08 	.word	0x20000c08

0800409c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d80d      	bhi.n	80040cc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	fa22 f103 	lsr.w	r1, r2, r3
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	b2ca      	uxtb	r2, r1
 80040c2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3301      	adds	r3, #1
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	e7ee      	b.n	80040aa <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80040cc:	bf00      	nop
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d811      	bhi.n	8004116 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6839      	ldr	r1, [r7, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	440a      	add	r2, r1
 80040fc:	7812      	ldrb	r2, [r2, #0]
 80040fe:	4611      	mov	r1, r2
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	00d2      	lsls	r2, r2, #3
 8004104:	fa01 f202 	lsl.w	r2, r1, r2
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3301      	adds	r3, #1
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	e7ea      	b.n	80040ec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	4a04      	ldr	r2, [pc, #16]	; (8004140 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	0800b3d0 	.word	0x0800b3d0

08004144 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff ffe8 	bl	8004124 <_ZN3ros15NodeHandleBase_C1Ev>
 8004154:	4a3a      	ldr	r2, [pc, #232]	; (8004240 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff f956 	bl	8003410 <_ZN13STM32HardwareC1Ev>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8004172:	4618      	mov	r0, r3
 8004174:	f7fe fe40 	bl	8002df8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2b18      	cmp	r3, #24
 8004180:	d80b      	bhi.n	800419a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	2200      	movs	r2, #0
 8004190:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	3301      	adds	r3, #1
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	e7f0      	b.n	800417c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800419a:	2300      	movs	r3, #0
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	2b18      	cmp	r3, #24
 80041a2:	d80a      	bhi.n	80041ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80041ac:	2100      	movs	r1, #0
 80041ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	3301      	adds	r3, #1
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	e7f1      	b.n	800419e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c4:	d20a      	bcs.n	80041dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3301      	adds	r3, #1
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	e7f0      	b.n	80041be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80041dc:	2300      	movs	r3, #0
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e6:	d20a      	bcs.n	80041fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4413      	add	r3, r2
 80041ee:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	3301      	adds	r3, #1
 80041fa:	60bb      	str	r3, [r7, #8]
 80041fc:	e7f0      	b.n	80041e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	0800b344 	.word	0x0800b344

08004244 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	4a04      	ldr	r2, [pc, #16]	; (8004260 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	0800b3b8 	.word	0x0800b3b8

08004264 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff ffe5 	bl	8004244 <_ZN3ros11Subscriber_C1Ev>
 800427a:	4a0b      	ldr	r2, [pc, #44]	; (80042a8 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei+0x44>)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	330c      	adds	r3, #12
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff fd7b 	bl	8003d80 <_ZN8std_msgs6StringC1Ev>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	615a      	str	r2, [r3, #20]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	609a      	str	r2, [r3, #8]
  };
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	0800b32c 	.word	0x0800b32c

080042ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3304      	adds	r3, #4
  }
 80042b8:	4618      	mov	r0, r3
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff f8b9 	bl	8003448 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80042fe:	b480      	push	{r7}
 8004300:	b085      	sub	sp, #20
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b18      	cmp	r3, #24
 8004310:	dc19      	bgt.n	8004346 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	f202 2222 	addw	r2, r2, #546	; 0x222
 800431a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10d      	bne.n	800433e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004322:	6839      	ldr	r1, [r7, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	f202 2222 	addw	r2, r2, #546	; 0x222
 800432c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	605a      	str	r2, [r3, #4]
        return true;
 800433a:	2301      	movs	r3, #1
 800433c:	e004      	b.n	8004348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3301      	adds	r3, #1
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e7e2      	b.n	800430c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6StringEvEEEEbRT_+0xe>
      }
    }
    return false;
 8004346:	2300      	movs	r3, #0
  }
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b18      	cmp	r3, #24
 8004366:	dc1e      	bgt.n	80043a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d111      	bne.n	800439e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	60da      	str	r2, [r3, #12]
        return true;
 800439a:	2301      	movs	r3, #1
 800439c:	e004      	b.n	80043a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3301      	adds	r3, #1
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	e7dd      	b.n	8004362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80043a6:	2300      	movs	r3, #0
  }
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3304      	adds	r3, #4
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff f92f 	bl	8003624 <_ZN13STM32Hardware4timeEv>
 80043c6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d903      	bls.n	80043e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d009      	beq.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d903      	bls.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8004406:	2b00      	cmp	r3, #0
 8004408:	d014      	beq.n	8004434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3304      	adds	r3, #4
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff f908 	bl	8003624 <_ZN13STM32Hardware4timeEv>
 8004414:	4602      	mov	r2, r0
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	1ad2      	subs	r2, r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8004420:	429a      	cmp	r2, r3
 8004422:	bf8c      	ite	hi
 8004424:	2301      	movhi	r3, #1
 8004426:	2300      	movls	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800442e:	f06f 0301 	mvn.w	r3, #1
 8004432:	e194      	b.n	800475e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3304      	adds	r3, #4
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff f821 	bl	8003480 <_ZN13STM32Hardware4readEv>
 800443e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f2c0 8174 	blt.w	8004730 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	441a      	add	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800445e:	2b07      	cmp	r3, #7
 8004460:	d11e      	bne.n	80044a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8004468:	1c59      	adds	r1, r3, #1
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	b2d1      	uxtb	r1, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	4413      	add	r3, r2
 8004478:	460a      	mov	r2, r1
 800447a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004484:	1e5a      	subs	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1b4      	bne.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2208      	movs	r2, #8
 800449a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800449e:	e7af      	b.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d128      	bne.n	80044fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2bff      	cmp	r3, #255	; 0xff
 80044ae:	d10d      	bne.n	80044cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f103 0214 	add.w	r2, r3, #20
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80044ca:	e799      	b.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3304      	adds	r3, #4
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff f8a7 	bl	8003624 <_ZN13STM32Hardware4timeEv>
 80044d6:	4602      	mov	r2, r0
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e0:	4293      	cmp	r3, r2
 80044e2:	bf8c      	ite	hi
 80044e4:	2301      	movhi	r3, #1
 80044e6:	2300      	movls	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d088      	beq.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80044f6:	f06f 0301 	mvn.w	r3, #1
 80044fa:	e130      	b.n	800475e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004502:	2b01      	cmp	r3, #1
 8004504:	d118      	bne.n	8004538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2bfe      	cmp	r3, #254	; 0xfe
 800450a:	d107      	bne.n	800451c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800451a:	e771      	b.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800452a:	2b00      	cmp	r3, #0
 800452c:	f47f af68 	bne.w	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f918 	bl	8004766 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004536:	e763      	b.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800453e:	2b02      	cmp	r3, #2
 8004540:	d113      	bne.n	800456a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004568:	e74a      	b.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004570:	2b03      	cmp	r3, #3
 8004572:	d110      	bne.n	8004596 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	441a      	add	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004594:	e734      	b.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800459c:	2b04      	cmp	r3, #4
 800459e:	d116      	bne.n	80045ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80045a6:	425a      	negs	r2, r3
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	bf58      	it	pl
 80045ae:	4253      	negpl	r3, r2
 80045b0:	2bff      	cmp	r3, #255	; 0xff
 80045b2:	d107      	bne.n	80045c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80045c2:	e71d      	b.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80045cc:	e718      	b.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80045d4:	2b05      	cmp	r3, #5
 80045d6:	d10f      	bne.n	80045f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80045f6:	e703      	b.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80045fe:	2b06      	cmp	r3, #6
 8004600:	d117      	bne.n	8004632 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	021b      	lsls	r3, r3, #8
 800460c:	441a      	add	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2207      	movs	r2, #7
 8004618:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004622:	2b00      	cmp	r3, #0
 8004624:	f47f aeec 	bne.w	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2208      	movs	r2, #8
 800462c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004630:	e6e6      	b.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004638:	2b08      	cmp	r3, #8
 800463a:	f47f aee1 	bne.w	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800464c:	425a      	negs	r2, r3
 800464e:	b2db      	uxtb	r3, r3
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	bf58      	it	pl
 8004654:	4253      	negpl	r3, r2
 8004656:	2bff      	cmp	r3, #255	; 0xff
 8004658:	f47f aed2 	bne.w	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004662:	2b00      	cmp	r3, #0
 8004664:	d110      	bne.n	8004688 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f87d 	bl	8004766 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f898 	bl	80047a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295
 8004686:	e06a      	b.n	800475e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800468e:	2b0a      	cmp	r3, #10
 8004690:	d107      	bne.n	80046a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004698:	4619      	mov	r1, r3
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f960 	bl	8004960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80046a0:	e6ae      	b.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80046a8:	2b06      	cmp	r3, #6
 80046aa:	d10e      	bne.n	80046ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80046b8:	4619      	mov	r1, r3
 80046ba:	4610      	mov	r0, r2
 80046bc:	f7fe fcd1 	bl	8003062 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80046c8:	e69a      	b.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80046d0:	2b0b      	cmp	r3, #11
 80046d2:	d104      	bne.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80046dc:	e690      	b.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80046e4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f202 2222 	addw	r2, r2, #546	; 0x222
 80046ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f43f ae84 	beq.w	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80046fe:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004708:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004712:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f202 2222 	addw	r2, r2, #546	; 0x222
 800471c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800472a:	4611      	mov	r1, r2
 800472c:	4798      	blx	r3
    while (true)
 800472e:	e667      	b.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004730:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00f      	beq.n	800475c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800474a:	4293      	cmp	r3, r2
 800474c:	d906      	bls.n	800475c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f809 	bl	8004766 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 800475c:	2300      	movs	r3, #0
  }
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004766:	b580      	push	{r7, lr}
 8004768:	b086      	sub	sp, #24
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800476e:	f107 030c 	add.w	r3, r7, #12
 8004772:	4618      	mov	r0, r3
 8004774:	f7fd ffdc 	bl	8002730 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f107 020c 	add.w	r2, r7, #12
 8004782:	210a      	movs	r1, #10
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
    rt_time = hardware_.time();
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3304      	adds	r3, #4
 800478c:	4618      	mov	r0, r3
 800478e:	f7fe ff49 	bl	8003624 <_ZN13STM32Hardware4timeEv>
 8004792:	4602      	mov	r2, r0
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800479a:	bf00      	nop
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80047a2:	b590      	push	{r4, r7, lr}
 80047a4:	b08b      	sub	sp, #44	; 0x2c
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80047aa:	f107 030c 	add.w	r3, r7, #12
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe f8ae 	bl	8002910 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80047b4:	2300      	movs	r3, #0
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	2b18      	cmp	r3, #24
 80047bc:	dc63      	bgt.n	8004886 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d056      	beq.n	800487e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	6859      	ldr	r1, [r3, #4]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3308      	adds	r3, #8
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4608      	mov	r0, r1
 800481e:	4798      	blx	r3
 8004820:	4603      	mov	r3, r0
 8004822:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	6859      	ldr	r1, [r3, #4]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4608      	mov	r0, r1
 800484c:	4798      	blx	r3
 800484e:	4603      	mov	r3, r0
 8004850:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004856:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681c      	ldr	r4, [r3, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	4618      	mov	r0, r3
 800486e:	f7fe fdb0 	bl	80033d2 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004872:	4601      	mov	r1, r0
 8004874:	f107 030c 	add.w	r3, r7, #12
 8004878:	461a      	mov	r2, r3
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	3301      	adds	r3, #1
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
 8004884:	e798      	b.n	80047b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004886:	2300      	movs	r3, #0
 8004888:	627b      	str	r3, [r7, #36]	; 0x24
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	2b18      	cmp	r3, #24
 800488e:	dc5f      	bgt.n	8004950 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004894:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d053      	beq.n	8004948 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80048a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80048ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80048ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80048d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3308      	adds	r3, #8
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4608      	mov	r0, r1
 80048e2:	4798      	blx	r3
 80048e4:	4603      	mov	r3, r0
 80048e6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ec:	f202 2222 	addw	r2, r2, #546	; 0x222
 80048f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80048fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	330c      	adds	r3, #12
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4608      	mov	r0, r1
 8004908:	4798      	blx	r3
 800490a:	4603      	mov	r3, r0
 800490c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800490e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004912:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681c      	ldr	r4, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004922:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800492e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3304      	adds	r3, #4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4608      	mov	r0, r1
 800493a:	4798      	blx	r3
 800493c:	4601      	mov	r1, r0
 800493e:	f107 030c 	add.w	r3, r7, #12
 8004942:	461a      	mov	r2, r3
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	3301      	adds	r3, #1
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
 800494e:	e79c      	b.n	800488a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8004958:	bf00      	nop
 800495a:	372c      	adds	r7, #44	; 0x2c
 800495c:	46bd      	mov	sp, r7
 800495e:	bd90      	pop	{r4, r7, pc}

08004960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800496a:	f107 0308 	add.w	r3, r7, #8
 800496e:	4618      	mov	r0, r3
 8004970:	f7fd fede 	bl	8002730 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3304      	adds	r3, #4
 8004978:	4618      	mov	r0, r3
 800497a:	f7fe fe53 	bl	8003624 <_ZN13STM32Hardware4timeEv>
 800497e:	4602      	mov	r2, r0
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800498a:	f107 0308 	add.w	r3, r7, #8
 800498e:	6839      	ldr	r1, [r7, #0]
 8004990:	4618      	mov	r0, r3
 8004992:	f7fd ff3d 	bl	8002810 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	4915      	ldr	r1, [pc, #84]	; (80049f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800499c:	fba1 1303 	umull	r1, r3, r1, r3
 80049a0:	099b      	lsrs	r3, r3, #6
 80049a2:	4413      	add	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80049a6:	6939      	ldr	r1, [r7, #16]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80049ac:	fba3 0302 	umull	r0, r3, r3, r2
 80049b0:	099b      	lsrs	r3, r3, #6
 80049b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049b6:	fb00 f303 	mul.w	r3, r0, r3
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	4a0d      	ldr	r2, [pc, #52]	; (80049f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	440b      	add	r3, r1
 80049c4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80049c6:	f107 0308 	add.w	r3, r7, #8
 80049ca:	3304      	adds	r3, #4
 80049cc:	4619      	mov	r1, r3
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f8a6 	bl	8004b20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3304      	adds	r3, #4
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fe fe23 	bl	8003624 <_ZN13STM32Hardware4timeEv>
 80049de:	4602      	mov	r2, r0
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80049e6:	bf00      	nop
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	10624dd3 	.word	0x10624dd3
 80049f4:	000f4240 	.word	0x000f4240

080049f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b63      	cmp	r3, #99	; 0x63
 8004a08:	dd09      	ble.n	8004a1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004a10:	f083 0301 	eor.w	r3, r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e079      	b.n	8004b12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8004a2a:	3207      	adds	r2, #7
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	4798      	blx	r3
 8004a32:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	22ff      	movs	r2, #255	; 0xff
 8004a38:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	22fe      	movs	r2, #254	; 0xfe
 8004a40:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8004a6a:	4413      	add	r3, r2
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	b21b      	sxth	r3, r3
 8004a86:	121b      	asrs	r3, r3, #8
 8004a88:	b21b      	sxth	r3, r3
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004a96:	2305      	movs	r3, #5
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	3306      	adds	r3, #6
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	dc0d      	bgt.n	8004ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	3301      	adds	r3, #1
 8004abc:	61bb      	str	r3, [r7, #24]
 8004abe:	e7ec      	b.n	8004a9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	3307      	adds	r3, #7
 8004ac4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	425a      	negs	r2, r3
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	bf58      	it	pl
 8004ad0:	4253      	negpl	r3, r2
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	1c59      	adds	r1, r3, #1
 8004ad8:	6179      	str	r1, [r7, #20]
 8004ada:	43d2      	mvns	r2, r2
 8004adc:	b2d1      	uxtb	r1, r2
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	460a      	mov	r2, r1
 8004ae4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aee:	dc0a      	bgt.n	8004b06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	1d18      	adds	r0, r3, #4
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	4619      	mov	r1, r3
 8004afe:	f7fe fd4b 	bl	8003598 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	e005      	b.n	8004b12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004b06:	4905      	ldr	r1, [pc, #20]	; (8004b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f849 	bl	8004ba0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004b0e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004b12:	4618      	mov	r0, r3
 8004b14:	3720      	adds	r7, #32
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	0800b2a4 	.word	0x0800b2a4

08004b20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe fd78 	bl	8003624 <_ZN13STM32Hardware4timeEv>
 8004b34:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4915      	ldr	r1, [pc, #84]	; (8004b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8004b3e:	fba1 1303 	umull	r1, r3, r1, r3
 8004b42:	099b      	lsrs	r3, r3, #6
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	1e5a      	subs	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	6859      	ldr	r1, [r3, #4]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8004b56:	fba3 0302 	umull	r0, r3, r3, r2
 8004b5a:	099b      	lsrs	r3, r3, #6
 8004b5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b60:	fb00 f303 	mul.w	r3, r0, r3
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	4a0c      	ldr	r2, [pc, #48]	; (8004b98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8004b68:	fb02 f303 	mul.w	r3, r2, r3
 8004b6c:	1aca      	subs	r2, r1, r3
 8004b6e:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004b70:	4413      	add	r3, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004b84:	4619      	mov	r1, r3
 8004b86:	4610      	mov	r0, r2
 8004b88:	f7fc f8be 	bl	8000d08 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004b8c:	bf00      	nop
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	10624dd3 	.word	0x10624dd3
 8004b98:	000f4240 	.word	0x000f4240
 8004b9c:	3b9aca00 	.word	0x3b9aca00

08004ba0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	2103      	movs	r1, #3
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f804 	bl	8004bbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004bca:	f107 0314 	add.w	r3, r7, #20
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe f862 	bl	8002c98 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004bd4:	7afb      	ldrb	r3, [r7, #11]
 8004bd6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f107 0214 	add.w	r2, r7, #20
 8004be6:	2107      	movs	r1, #7
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	4798      	blx	r3
  }
 8004bec:	bf00      	nop
 8004bee:	3720      	adds	r7, #32
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <_Z41__static_initialization_and_destruction_0ii>:
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d11f      	bne.n	8004c44 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d11a      	bne.n	8004c44 <_Z41__static_initialization_and_destruction_0ii+0x50>
std_msgs::Int16MultiArray feedback;
 8004c0e:	480f      	ldr	r0, [pc, #60]	; (8004c4c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004c10:	f7fe ff98 	bl	8003b44 <_ZN8std_msgs15Int16MultiArrayC1Ev>
std_msgs::Int16MultiArray gate;
 8004c14:	480e      	ldr	r0, [pc, #56]	; (8004c50 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004c16:	f7fe ff95 	bl	8003b44 <_ZN8std_msgs15Int16MultiArrayC1Ev>
ros::NodeHandle nh;
 8004c1a:	480e      	ldr	r0, [pc, #56]	; (8004c54 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004c1c:	f7ff fa92 	bl	8004144 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::String> sub("mission0", cake_callback);
 8004c20:	2301      	movs	r3, #1
 8004c22:	4a0d      	ldr	r2, [pc, #52]	; (8004c58 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004c24:	490d      	ldr	r1, [pc, #52]	; (8004c5c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004c26:	480e      	ldr	r0, [pc, #56]	; (8004c60 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004c28:	f7ff fb1c 	bl	8004264 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub("donefullness0", &feedback);
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	4a07      	ldr	r2, [pc, #28]	; (8004c4c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004c30:	490c      	ldr	r1, [pc, #48]	; (8004c64 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004c32:	480d      	ldr	r0, [pc, #52]	; (8004c68 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004c34:	f7fe fba2 	bl	800337c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub1("lightgate0", &gate);
 8004c38:	2300      	movs	r3, #0
 8004c3a:	4a05      	ldr	r2, [pc, #20]	; (8004c50 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004c3c:	490b      	ldr	r1, [pc, #44]	; (8004c6c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004c3e:	480c      	ldr	r0, [pc, #48]	; (8004c70 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004c40:	f7fe fb9c 	bl	800337c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004c44:	bf00      	nop
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	200001b4 	.word	0x200001b4
 8004c50:	200001e4 	.word	0x200001e4
 8004c54:	20000214 	.word	0x20000214
 8004c58:	08003eb9 	.word	0x08003eb9
 8004c5c:	0800b2e0 	.word	0x0800b2e0
 8004c60:	20000b50 	.word	0x20000b50
 8004c64:	0800b2ec 	.word	0x0800b2ec
 8004c68:	20000b6c 	.word	0x20000b6c
 8004c6c:	0800b2fc 	.word	0x0800b2fc
 8004c70:	20000b80 	.word	0x20000b80

08004c74 <_ZN3ros10SubscriberIN8std_msgs6StringEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	330c      	adds	r3, #12
 8004c82:	6839      	ldr	r1, [r7, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff f8bc 	bl	8003e02 <_ZN8std_msgs6String11deserializeEPh>
    this->cb_(msg);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	320c      	adds	r2, #12
 8004c92:	4610      	mov	r0, r2
 8004c94:	4798      	blx	r3
  }
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <_ZN3ros10SubscriberIN8std_msgs6StringEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
  }
 8004caa:	4618      	mov	r0, r3
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <_ZN3ros10SubscriberIN8std_msgs6StringEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	330c      	adds	r3, #12
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff f8dc 	bl	8003e80 <_ZN8std_msgs6String7getTypeEv>
 8004cc8:	4603      	mov	r3, r0
  }
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <_ZN3ros10SubscriberIN8std_msgs6StringEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff f8dc 	bl	8003e9c <_ZN8std_msgs6String6getMD5Ev>
 8004ce4:	4603      	mov	r3, r0
  }
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
    return configured_;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <_GLOBAL__sub_I__Z13cake_callbackRKN8std_msgs6StringE>:
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004d10:	2001      	movs	r0, #1
 8004d12:	f7ff ff6f 	bl	8004bf4 <_Z41__static_initialization_and_destruction_0ii>
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <mainrun>:
extern ADC_HandleTypeDef hadc1;
extern DMA_HandleTypeDef hdma_adc1;
//void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
//
//}
void mainrun() {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim6); //clock for step1
 8004d1c:	48ab      	ldr	r0, [pc, #684]	; (8004fcc <mainrun+0x2b4>)
 8004d1e:	f003 fe67 	bl	80089f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7); //clock for feedback
 8004d22:	48ab      	ldr	r0, [pc, #684]	; (8004fd0 <mainrun+0x2b8>)
 8004d24:	f003 fe64 	bl	80089f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10); //clock for communicate
 8004d28:	48aa      	ldr	r0, [pc, #680]	; (8004fd4 <mainrun+0x2bc>)
 8004d2a:	f003 fe61 	bl	80089f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //for pump1 PA0
 8004d2e:	2100      	movs	r1, #0
 8004d30:	48a9      	ldr	r0, [pc, #676]	; (8004fd8 <mainrun+0x2c0>)
 8004d32:	f003 ff1d 	bl	8008b70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //for valve1 PA1
 8004d36:	2104      	movs	r1, #4
 8004d38:	48a7      	ldr	r0, [pc, #668]	; (8004fd8 <mainrun+0x2c0>)
 8004d3a:	f003 ff19 	bl	8008b70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for pump4 PC6
 8004d3e:	2100      	movs	r1, #0
 8004d40:	48a6      	ldr	r0, [pc, #664]	; (8004fdc <mainrun+0x2c4>)
 8004d42:	f003 ff15 	bl	8008b70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for valve4 PC7
 8004d46:	2104      	movs	r1, #4
 8004d48:	48a4      	ldr	r0, [pc, #656]	; (8004fdc <mainrun+0x2c4>)
 8004d4a:	f003 ff11 	bl	8008b70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //for pump3 PC8
 8004d4e:	2108      	movs	r1, #8
 8004d50:	48a2      	ldr	r0, [pc, #648]	; (8004fdc <mainrun+0x2c4>)
 8004d52:	f003 ff0d 	bl	8008b70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); //for valve3 Pc9
 8004d56:	210c      	movs	r1, #12
 8004d58:	48a0      	ldr	r0, [pc, #640]	; (8004fdc <mainrun+0x2c4>)
 8004d5a:	f003 ff09 	bl	8008b70 <HAL_TIM_PWM_Start>
//	hole[1] = 'y';
//	hole[2] = 'p';
//	hole[3] = 'b';
	//initialization all the mosfet
	//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_cake, 3);
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8004d5e:	4b9e      	ldr	r3, [pc, #632]	; (8004fd8 <mainrun+0x2c0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2200      	movs	r2, #0
 8004d64:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8004d66:	4b9c      	ldr	r3, [pc, #624]	; (8004fd8 <mainrun+0x2c0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8004d6e:	4b9b      	ldr	r3, [pc, #620]	; (8004fdc <mainrun+0x2c4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2200      	movs	r2, #0
 8004d74:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8004d76:	4b99      	ldr	r3, [pc, #612]	; (8004fdc <mainrun+0x2c4>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8004d7e:	4b97      	ldr	r3, [pc, #604]	; (8004fdc <mainrun+0x2c4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2200      	movs	r2, #0
 8004d84:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8004d86:	4b95      	ldr	r3, [pc, #596]	; (8004fdc <mainrun+0x2c4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
//	VL53_Init();
	//initialization all the servo
	UART_Send_SetMotorPosition(1, 1200, 300);
 8004d8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d92:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8004d96:	2001      	movs	r0, #1
 8004d98:	f7fb fffe 	bl	8000d98 <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(4, 1200, 300);
 8004d9c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004da0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8004da4:	2004      	movs	r0, #4
 8004da6:	f7fb fff7 	bl	8000d98 <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(3, 1200, 300);
 8004daa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004dae:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8004db2:	2003      	movs	r0, #3
 8004db4:	f7fb fff0 	bl	8000d98 <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(5, 1200, 300);
 8004db8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004dbc:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8004dc0:	2005      	movs	r0, #5
 8004dc2:	f7fb ffe9 	bl	8000d98 <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(6, 950, 300);
 8004dc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004dca:	f240 31b6 	movw	r1, #950	; 0x3b6
 8004dce:	2006      	movs	r0, #6
 8004dd0:	f7fb ffe2 	bl	8000d98 <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 8004dd4:	4b82      	ldr	r3, [pc, #520]	; (8004fe0 <mainrun+0x2c8>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0) {
 8004dda:	4b81      	ldr	r3, [pc, #516]	; (8004fe0 <mainrun+0x2c8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d000      	beq.n	8004de4 <mainrun+0xcc>
 8004de2:	e7fa      	b.n	8004dda <mainrun+0xc2>
			break;
 8004de4:	bf00      	nop
		}

	}
	UART_Send_SetMotorPosition(1, 1250, 300);
 8004de6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004dea:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8004dee:	2001      	movs	r0, #1
 8004df0:	f7fb ffd2 	bl	8000d98 <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(4, 1250, 300);
 8004df4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004df8:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8004dfc:	2004      	movs	r0, #4
 8004dfe:	f7fb ffcb 	bl	8000d98 <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(3, 1250, 300);
 8004e02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e06:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8004e0a:	2003      	movs	r0, #3
 8004e0c:	f7fb ffc4 	bl	8000d98 <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(5, 1250, 300);
 8004e10:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e14:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8004e18:	2005      	movs	r0, #5
 8004e1a:	f7fb ffbd 	bl	8000d98 <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(6, 2100, 300);
 8004e1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e22:	f640 0134 	movw	r1, #2100	; 0x834
 8004e26:	2006      	movs	r0, #6
 8004e28:	f7fb ffb6 	bl	8000d98 <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 8004e2c:	4b6c      	ldr	r3, [pc, #432]	; (8004fe0 <mainrun+0x2c8>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0) {
 8004e32:	4b6b      	ldr	r3, [pc, #428]	; (8004fe0 <mainrun+0x2c8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d000      	beq.n	8004e3c <mainrun+0x124>
 8004e3a:	e7fa      	b.n	8004e32 <mainrun+0x11a>
			break;
 8004e3c:	bf00      	nop
		}

	}
	UART_Send_SetMotorPosition(1, 1200, 300);
 8004e3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e42:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8004e46:	2001      	movs	r0, #1
 8004e48:	f7fb ffa6 	bl	8000d98 <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(4, 1200, 300);
 8004e4c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e50:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8004e54:	2004      	movs	r0, #4
 8004e56:	f7fb ff9f 	bl	8000d98 <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(3, 1200, 300);
 8004e5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e5e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8004e62:	2003      	movs	r0, #3
 8004e64:	f7fb ff98 	bl	8000d98 <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(5, 1200, 300);
 8004e68:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e6c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8004e70:	2005      	movs	r0, #5
 8004e72:	f7fb ff91 	bl	8000d98 <UART_Send_SetMotorPosition>
	UART_Send_SetMotorPosition(6, 950, 300);
 8004e76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e7a:	f240 31b6 	movw	r1, #950	; 0x3b6
 8004e7e:	2006      	movs	r0, #6
 8004e80:	f7fb ff8a 	bl	8000d98 <UART_Send_SetMotorPosition>
	servo_delay_temp = 1;
 8004e84:	4b56      	ldr	r3, [pc, #344]	; (8004fe0 <mainrun+0x2c8>)
 8004e86:	2201      	movs	r2, #1
 8004e88:	601a      	str	r2, [r3, #0]
	while (1) {
		if (servo_delay_temp == 0) {
 8004e8a:	4b55      	ldr	r3, [pc, #340]	; (8004fe0 <mainrun+0x2c8>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1fb      	bne.n	8004e8a <mainrun+0x172>
//			k = 1;
//		}
//		rotate_the_ring(rotate);
//		states = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
//		HAL_Delay(5000);
		if (servo_delay_temp == 0) {
 8004e92:	4b53      	ldr	r3, [pc, #332]	; (8004fe0 <mainrun+0x2c8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d16e      	bne.n	8004f78 <mainrun+0x260>
			if (b_bool == 1 && y_bool == 1 && p_bool == 1 && h_bool == 1) {
 8004e9a:	4b52      	ldr	r3, [pc, #328]	; (8004fe4 <mainrun+0x2cc>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d152      	bne.n	8004f48 <mainrun+0x230>
 8004ea2:	4b51      	ldr	r3, [pc, #324]	; (8004fe8 <mainrun+0x2d0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d14e      	bne.n	8004f48 <mainrun+0x230>
 8004eaa:	4b50      	ldr	r3, [pc, #320]	; (8004fec <mainrun+0x2d4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d14a      	bne.n	8004f48 <mainrun+0x230>
 8004eb2:	4b4f      	ldr	r3, [pc, #316]	; (8004ff0 <mainrun+0x2d8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d146      	bne.n	8004f48 <mainrun+0x230>

				judge_the_empty_and_order();
 8004eba:	f7fc fb7d 	bl	80015b8 <judge_the_empty_and_order>
//				VL53_Update();
//			mission_array[0] = 2;
//			temp_pub = 0;
				//	rotate_the_ring(2);
				//	UART_Send_SetMotorPosition(5, 1800, 1500);
				Tower_of_Hanoi(cake_order);
 8004ebe:	4b4d      	ldr	r3, [pc, #308]	; (8004ff4 <mainrun+0x2dc>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fc fe88 	bl	8001bd8 <Tower_of_Hanoi>
				mission_array[0] = 2;
 8004ec8:	4b4b      	ldr	r3, [pc, #300]	; (8004ff8 <mainrun+0x2e0>)
 8004eca:	2202      	movs	r2, #2
 8004ecc:	801a      	strh	r2, [r3, #0]
				temp_pub = 0;
 8004ece:	4b4b      	ldr	r3, [pc, #300]	; (8004ffc <mainrun+0x2e4>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]
				if (num == 1) {
 8004ed4:	4b4a      	ldr	r3, [pc, #296]	; (8005000 <mainrun+0x2e8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d103      	bne.n	8004ee4 <mainrun+0x1cc>
					rotate_the_ring(4);
 8004edc:	2004      	movs	r0, #4
 8004ede:	f7fc f9cb 	bl	8001278 <rotate_the_ring>
 8004ee2:	e00e      	b.n	8004f02 <mainrun+0x1ea>
				}
				else if (num == 2) {
 8004ee4:	4b46      	ldr	r3, [pc, #280]	; (8005000 <mainrun+0x2e8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d103      	bne.n	8004ef4 <mainrun+0x1dc>
					rotate_the_ring(3);
 8004eec:	2003      	movs	r0, #3
 8004eee:	f7fc f9c3 	bl	8001278 <rotate_the_ring>
 8004ef2:	e006      	b.n	8004f02 <mainrun+0x1ea>
				}
				else if (num == 3) {
 8004ef4:	4b42      	ldr	r3, [pc, #264]	; (8005000 <mainrun+0x2e8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d102      	bne.n	8004f02 <mainrun+0x1ea>
					rotate_the_ring(2);
 8004efc:	2002      	movs	r0, #2
 8004efe:	f7fc f9bb 	bl	8001278 <rotate_the_ring>
				}
				HAL_Delay(5000);
 8004f02:	f241 3088 	movw	r0, #5000	; 0x1388
 8004f06:	f001 fb03 	bl	8006510 <HAL_Delay>
				anglebefore = 0;
 8004f0a:	4b3e      	ldr	r3, [pc, #248]	; (8005004 <mainrun+0x2ec>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
				rotate_dir = 1;
 8004f10:	4b3d      	ldr	r3, [pc, #244]	; (8005008 <mainrun+0x2f0>)
 8004f12:	2201      	movs	r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
				cake_order = -1;
 8004f16:	4b37      	ldr	r3, [pc, #220]	; (8004ff4 <mainrun+0x2dc>)
 8004f18:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1c:	601a      	str	r2, [r3, #0]
				rotate_state[0] = 0;
 8004f1e:	4b3b      	ldr	r3, [pc, #236]	; (800500c <mainrun+0x2f4>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	801a      	strh	r2, [r3, #0]
				rotate_state[1] = 0;
 8004f24:	4b39      	ldr	r3, [pc, #228]	; (800500c <mainrun+0x2f4>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	805a      	strh	r2, [r3, #2]
				rotate_state[2] = 0;
 8004f2a:	4b38      	ldr	r3, [pc, #224]	; (800500c <mainrun+0x2f4>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	809a      	strh	r2, [r3, #4]
				b_bool = 0;
 8004f30:	4b2c      	ldr	r3, [pc, #176]	; (8004fe4 <mainrun+0x2cc>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
				y_bool = 0;
 8004f36:	4b2c      	ldr	r3, [pc, #176]	; (8004fe8 <mainrun+0x2d0>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]
				p_bool = 0;
 8004f3c:	4b2b      	ldr	r3, [pc, #172]	; (8004fec <mainrun+0x2d4>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
				h_bool = 0;
 8004f42:	4b2b      	ldr	r3, [pc, #172]	; (8004ff0 <mainrun+0x2d8>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

			}

			// close all the mosfet
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8004f48:	4b23      	ldr	r3, [pc, #140]	; (8004fd8 <mainrun+0x2c0>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8004f50:	4b21      	ldr	r3, [pc, #132]	; (8004fd8 <mainrun+0x2c0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2200      	movs	r2, #0
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8004f58:	4b20      	ldr	r3, [pc, #128]	; (8004fdc <mainrun+0x2c4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8004f60:	4b1e      	ldr	r3, [pc, #120]	; (8004fdc <mainrun+0x2c4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2200      	movs	r2, #0
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8004f68:	4b1c      	ldr	r3, [pc, #112]	; (8004fdc <mainrun+0x2c4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8004f70:	4b1a      	ldr	r3, [pc, #104]	; (8004fdc <mainrun+0x2c4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2200      	movs	r2, #0
 8004f76:	641a      	str	r2, [r3, #64]	; 0x40

		}
		if (mission_array[0] == 0) {
 8004f78:	4b1f      	ldr	r3, [pc, #124]	; (8004ff8 <mainrun+0x2e0>)
 8004f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d187      	bne.n	8004e92 <mainrun+0x17a>
			UART_Send_SetMotorPosition(1, 1200, 300);
 8004f82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f86:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	f7fb ff04 	bl	8000d98 <UART_Send_SetMotorPosition>
			UART_Send_SetMotorPosition(4, 1200, 300);
 8004f90:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f94:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8004f98:	2004      	movs	r0, #4
 8004f9a:	f7fb fefd 	bl	8000d98 <UART_Send_SetMotorPosition>
			UART_Send_SetMotorPosition(3, 1200, 300);
 8004f9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004fa2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8004fa6:	2003      	movs	r0, #3
 8004fa8:	f7fb fef6 	bl	8000d98 <UART_Send_SetMotorPosition>
			UART_Send_SetMotorPosition(5, 1200, 300);
 8004fac:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004fb0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8004fb4:	2005      	movs	r0, #5
 8004fb6:	f7fb feef 	bl	8000d98 <UART_Send_SetMotorPosition>
			UART_Send_SetMotorPosition(6, 950, 300);
 8004fba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004fbe:	f240 31b6 	movw	r1, #950	; 0x3b6
 8004fc2:	2006      	movs	r0, #6
 8004fc4:	f7fb fee8 	bl	8000d98 <UART_Send_SetMotorPosition>
		if (servo_delay_temp == 0) {
 8004fc8:	e763      	b.n	8004e92 <mainrun+0x17a>
 8004fca:	bf00      	nop
 8004fcc:	20000cf4 	.word	0x20000cf4
 8004fd0:	20000d3c 	.word	0x20000d3c
 8004fd4:	20000d84 	.word	0x20000d84
 8004fd8:	20000c64 	.word	0x20000c64
 8004fdc:	20000cac 	.word	0x20000cac
 8004fe0:	20000c38 	.word	0x20000c38
 8004fe4:	20000c10 	.word	0x20000c10
 8004fe8:	20000c14 	.word	0x20000c14
 8004fec:	20000c18 	.word	0x20000c18
 8004ff0:	20000c1c 	.word	0x20000c1c
 8004ff4:	20000004 	.word	0x20000004
 8004ff8:	20000c44 	.word	0x20000c44
 8004ffc:	20000c3c 	.word	0x20000c3c
 8005000:	20000c0c 	.word	0x20000c0c
 8005004:	20000ba0 	.word	0x20000ba0
 8005008:	2000000c 	.word	0x2000000c
 800500c:	20000c50 	.word	0x20000c50

08005010 <HAL_GPIO_EXTI_Callback>:
		}
	}

}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_4) {            //1
 800501a:	88fb      	ldrh	r3, [r7, #6]
 800501c:	2b10      	cmp	r3, #16
 800501e:	d102      	bne.n	8005026 <HAL_GPIO_EXTI_Callback+0x16>
		rotate_state[0] = 1;
 8005020:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <HAL_GPIO_EXTI_Callback+0x40>)
 8005022:	2201      	movs	r2, #1
 8005024:	801a      	strh	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_10) {            //2
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800502c:	d102      	bne.n	8005034 <HAL_GPIO_EXTI_Callback+0x24>
		rotate_state[1] = 1;
 800502e:	4b08      	ldr	r3, [pc, #32]	; (8005050 <HAL_GPIO_EXTI_Callback+0x40>)
 8005030:	2201      	movs	r2, #1
 8005032:	805a      	strh	r2, [r3, #2]
	}

	if (GPIO_Pin == GPIO_PIN_11) {            //3
 8005034:	88fb      	ldrh	r3, [r7, #6]
 8005036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800503a:	d102      	bne.n	8005042 <HAL_GPIO_EXTI_Callback+0x32>
		rotate_state[2] = 1;
 800503c:	4b04      	ldr	r3, [pc, #16]	; (8005050 <HAL_GPIO_EXTI_Callback+0x40>)
 800503e:	2201      	movs	r2, #1
 8005040:	809a      	strh	r2, [r3, #4]
	}

}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	20000c50 	.word	0x20000c50

08005054 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a8f      	ldr	r2, [pc, #572]	; (80052a0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	f040 8197 	bne.w	8005396 <HAL_TIM_PeriodElapsedCallback+0x342>
		ms1++;
 8005068:	4b8e      	ldr	r3, [pc, #568]	; (80052a4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3301      	adds	r3, #1
 800506e:	4a8d      	ldr	r2, [pc, #564]	; (80052a4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8005070:	6013      	str	r3, [r2, #0]
		if (step != 0) {
 8005072:	4b8d      	ldr	r3, [pc, #564]	; (80052a8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 818d 	beq.w	8005396 <HAL_TIM_PeriodElapsedCallback+0x342>
			if (dir_state1 == 1)
 800507c:	4b8b      	ldr	r3, [pc, #556]	; (80052ac <HAL_TIM_PeriodElapsedCallback+0x258>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d106      	bne.n	8005092 <HAL_TIM_PeriodElapsedCallback+0x3e>
				HAL_GPIO_WritePin(Step1_DIR_Port, Step1_DIR_Pin, GPIO_PIN_SET);
 8005084:	2201      	movs	r2, #1
 8005086:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800508a:	4889      	ldr	r0, [pc, #548]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800508c:	f002 fd02 	bl	8007a94 <HAL_GPIO_WritePin>
 8005090:	e009      	b.n	80050a6 <HAL_TIM_PeriodElapsedCallback+0x52>
			else if (dir_state1 == 0)
 8005092:	4b86      	ldr	r3, [pc, #536]	; (80052ac <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d105      	bne.n	80050a6 <HAL_TIM_PeriodElapsedCallback+0x52>
				HAL_GPIO_WritePin(Step1_DIR_Port, Step1_DIR_Pin,
 800509a:	2200      	movs	r2, #0
 800509c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050a0:	4883      	ldr	r0, [pc, #524]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80050a2:	f002 fcf7 	bl	8007a94 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
			temp++;
 80050a6:	4b83      	ldr	r3, [pc, #524]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3301      	adds	r3, #1
 80050ac:	4a81      	ldr	r2, [pc, #516]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80050ae:	6013      	str	r3, [r2, #0]
			if (step_state1 == 1) {
 80050b0:	4b81      	ldr	r3, [pc, #516]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d108      	bne.n	80050ca <HAL_TIM_PeriodElapsedCallback+0x76>
				HAL_GPIO_WritePin(Step1_STEP_Port, Step1_STEP_Pin,
 80050b8:	2200      	movs	r2, #0
 80050ba:	2104      	movs	r1, #4
 80050bc:	487f      	ldr	r0, [pc, #508]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0x268>)
 80050be:	f002 fce9 	bl	8007a94 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);

				step_state1 = 0;
 80050c2:	4b7d      	ldr	r3, [pc, #500]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	e015      	b.n	80050f6 <HAL_TIM_PeriodElapsedCallback+0xa2>
			}
			else if (step_state1 == 0) {
 80050ca:	4b7b      	ldr	r3, [pc, #492]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d111      	bne.n	80050f6 <HAL_TIM_PeriodElapsedCallback+0xa2>
				HAL_GPIO_WritePin(Step1_STEP_Port, Step1_STEP_Pin,
 80050d2:	2201      	movs	r2, #1
 80050d4:	2104      	movs	r1, #4
 80050d6:	4879      	ldr	r0, [pc, #484]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0x268>)
 80050d8:	f002 fcdc 	bl	8007a94 <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
				step_state1 = 1;
 80050dc:	4b76      	ldr	r3, [pc, #472]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80050de:	2201      	movs	r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
				step--;
 80050e2:	4b71      	ldr	r3, [pc, #452]	; (80052a8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	4a6f      	ldr	r2, [pc, #444]	; (80052a8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80050ea:	6013      	str	r3, [r2, #0]
				rotate_temp++;
 80050ec:	4b74      	ldr	r3, [pc, #464]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3301      	adds	r3, #1
 80050f2:	4a73      	ldr	r2, [pc, #460]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80050f4:	6013      	str	r3, [r2, #0]
			}
			if (temp == 2) {
 80050f6:	4b6f      	ldr	r3, [pc, #444]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d134      	bne.n	8005168 <HAL_TIM_PeriodElapsedCallback+0x114>
				if (step > 300) {
 80050fe:	4b6a      	ldr	r3, [pc, #424]	; (80052a8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005106:	dd18      	ble.n	800513a <HAL_TIM_PeriodElapsedCallback+0xe6>
					arr = arr - 4;
 8005108:	4b6e      	ldr	r3, [pc, #440]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3b04      	subs	r3, #4
 800510e:	4a6d      	ldr	r2, [pc, #436]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8005110:	6013      	str	r3, [r2, #0]
					if (arr < 200)
 8005112:	4b6c      	ldr	r3, [pc, #432]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2bc7      	cmp	r3, #199	; 0xc7
 8005118:	dc02      	bgt.n	8005120 <HAL_TIM_PeriodElapsedCallback+0xcc>
						arr = 200;
 800511a:	4b6a      	ldr	r3, [pc, #424]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800511c:	22c8      	movs	r2, #200	; 0xc8
 800511e:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_AUTORELOAD(&htim6, arr);
 8005120:	4b68      	ldr	r3, [pc, #416]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4b68      	ldr	r3, [pc, #416]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	62da      	str	r2, [r3, #44]	; 0x2c
 800512a:	4b66      	ldr	r3, [pc, #408]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	4b65      	ldr	r3, [pc, #404]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8005132:	60da      	str	r2, [r3, #12]
					temp = 0;
 8005134:	4b5f      	ldr	r3, [pc, #380]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
				}

				if (step <= 300) {
 800513a:	4b5b      	ldr	r3, [pc, #364]	; (80052a8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005142:	dc11      	bgt.n	8005168 <HAL_TIM_PeriodElapsedCallback+0x114>
					arr = arr + 4;
 8005144:	4b5f      	ldr	r3, [pc, #380]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3304      	adds	r3, #4
 800514a:	4a5e      	ldr	r2, [pc, #376]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800514c:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_AUTORELOAD(&htim6, arr);
 800514e:	4b5d      	ldr	r3, [pc, #372]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	4b5d      	ldr	r3, [pc, #372]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	62da      	str	r2, [r3, #44]	; 0x2c
 8005158:	4b5a      	ldr	r3, [pc, #360]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	461a      	mov	r2, r3
 800515e:	4b5a      	ldr	r3, [pc, #360]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8005160:	60da      	str	r2, [r3, #12]
					temp = 0;
 8005162:	4b54      	ldr	r3, [pc, #336]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]

				}
			}
			if (flag == 0 && rotate_temp >= 444) {
 8005168:	4b58      	ldr	r3, [pc, #352]	; (80052cc <HAL_TIM_PeriodElapsedCallback+0x278>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d110      	bne.n	8005192 <HAL_TIM_PeriodElapsedCallback+0x13e>
 8005170:	4b53      	ldr	r3, [pc, #332]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 8005178:	db0b      	blt.n	8005192 <HAL_TIM_PeriodElapsedCallback+0x13e>
				flag = 1;
 800517a:	4b54      	ldr	r3, [pc, #336]	; (80052cc <HAL_TIM_PeriodElapsedCallback+0x278>)
 800517c:	2201      	movs	r2, #1
 800517e:	601a      	str	r2, [r3, #0]
				rotate_state[0] = 0;
 8005180:	4b53      	ldr	r3, [pc, #332]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8005182:	2200      	movs	r2, #0
 8005184:	801a      	strh	r2, [r3, #0]
				rotate_state[1] = 0;
 8005186:	4b52      	ldr	r3, [pc, #328]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8005188:	2200      	movs	r2, #0
 800518a:	805a      	strh	r2, [r3, #2]
				rotate_state[2] = 0;
 800518c:	4b50      	ldr	r3, [pc, #320]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800518e:	2200      	movs	r2, #0
 8005190:	809a      	strh	r2, [r3, #4]
			}
			if (rotate_state[0] + rotate_state[1] + rotate_state[2] == 3
 8005192:	4b4f      	ldr	r3, [pc, #316]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8005194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005198:	461a      	mov	r2, r3
 800519a:	4b4d      	ldr	r3, [pc, #308]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800519c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80051a0:	4413      	add	r3, r2
 80051a2:	4a4b      	ldr	r2, [pc, #300]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80051a4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80051a8:	4413      	add	r3, r2
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d115      	bne.n	80051da <HAL_TIM_PeriodElapsedCallback+0x186>
					&& rotate_temp >= 444) {
 80051ae:	4b44      	ldr	r3, [pc, #272]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 80051b6:	db10      	blt.n	80051da <HAL_TIM_PeriodElapsedCallback+0x186>
				rotate_state[0] = 0;
 80051b8:	4b45      	ldr	r3, [pc, #276]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	801a      	strh	r2, [r3, #0]
				rotate_state[1] = 0;
 80051be:	4b44      	ldr	r3, [pc, #272]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	805a      	strh	r2, [r3, #2]
				rotate_state[2] = 0;
 80051c4:	4b42      	ldr	r3, [pc, #264]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	809a      	strh	r2, [r3, #4]
				rotate_temp = 0;
 80051ca:	4b3d      	ldr	r3, [pc, #244]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
				flag = 0;
 80051d0:	4b3e      	ldr	r3, [pc, #248]	; (80052cc <HAL_TIM_PeriodElapsedCallback+0x278>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
				pub_the_gate();
 80051d6:	f7fe ff21 	bl	800401c <pub_the_gate>
			}
			if (rotate_temp >= 444 && flag == 1) {
 80051da:	4b39      	ldr	r3, [pc, #228]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 80051e2:	f2c0 80d8 	blt.w	8005396 <HAL_TIM_PeriodElapsedCallback+0x342>
 80051e6:	4b39      	ldr	r3, [pc, #228]	; (80052cc <HAL_TIM_PeriodElapsedCallback+0x278>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	f040 80d3 	bne.w	8005396 <HAL_TIM_PeriodElapsedCallback+0x342>
				if (rotate_state[0] == 0 && rotate_state[1] == 1
 80051f0:	4b37      	ldr	r3, [pc, #220]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80051f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d126      	bne.n	8005248 <HAL_TIM_PeriodElapsedCallback+0x1f4>
 80051fa:	4b35      	ldr	r3, [pc, #212]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80051fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d121      	bne.n	8005248 <HAL_TIM_PeriodElapsedCallback+0x1f4>
						&& rotate_state[2] == 1
 8005204:	4b32      	ldr	r3, [pc, #200]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8005206:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d11c      	bne.n	8005248 <HAL_TIM_PeriodElapsedCallback+0x1f4>
						&& (rotate_dir == 2 || rotate_dir == 4)) {
 800520e:	4b31      	ldr	r3, [pc, #196]	; (80052d4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b02      	cmp	r3, #2
 8005214:	d003      	beq.n	800521e <HAL_TIM_PeriodElapsedCallback+0x1ca>
 8005216:	4b2f      	ldr	r3, [pc, #188]	; (80052d4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b04      	cmp	r3, #4
 800521c:	d114      	bne.n	8005248 <HAL_TIM_PeriodElapsedCallback+0x1f4>
//						step1 = 2.86 * 5 * 8 / 1.8;
					rotate_dir = 1;
 800521e:	4b2d      	ldr	r3, [pc, #180]	; (80052d4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8005220:	2201      	movs	r2, #1
 8005222:	601a      	str	r2, [r3, #0]
					rotate_state[0] = 0;
 8005224:	4b2a      	ldr	r3, [pc, #168]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8005226:	2200      	movs	r2, #0
 8005228:	801a      	strh	r2, [r3, #0]
					rotate_state[1] = 0;
 800522a:	4b29      	ldr	r3, [pc, #164]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800522c:	2200      	movs	r2, #0
 800522e:	805a      	strh	r2, [r3, #2]
					rotate_state[2] = 0;
 8005230:	4b27      	ldr	r3, [pc, #156]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8005232:	2200      	movs	r2, #0
 8005234:	809a      	strh	r2, [r3, #4]
					rotate_temp = 0;
 8005236:	4b22      	ldr	r3, [pc, #136]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
					flag = 0;
 800523c:	4b23      	ldr	r3, [pc, #140]	; (80052cc <HAL_TIM_PeriodElapsedCallback+0x278>)
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
					pub_the_gate();
 8005242:	f7fe feeb 	bl	800401c <pub_the_gate>
 8005246:	e0a6      	b.n	8005396 <HAL_TIM_PeriodElapsedCallback+0x342>
				}
				else if (rotate_state[0] == 1 && rotate_state[1] == 1
 8005248:	4b21      	ldr	r3, [pc, #132]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800524a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d142      	bne.n	80052d8 <HAL_TIM_PeriodElapsedCallback+0x284>
 8005252:	4b1f      	ldr	r3, [pc, #124]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8005254:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d13d      	bne.n	80052d8 <HAL_TIM_PeriodElapsedCallback+0x284>
						&& rotate_state[2] == 0
 800525c:	4b1c      	ldr	r3, [pc, #112]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800525e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d138      	bne.n	80052d8 <HAL_TIM_PeriodElapsedCallback+0x284>
						&& (rotate_dir == 1 || rotate_dir == 3)) {
 8005266:	4b1b      	ldr	r3, [pc, #108]	; (80052d4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d003      	beq.n	8005276 <HAL_TIM_PeriodElapsedCallback+0x222>
 800526e:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b03      	cmp	r3, #3
 8005274:	d130      	bne.n	80052d8 <HAL_TIM_PeriodElapsedCallback+0x284>
//						step1 = 2.86 * 5 * 8 / 1.8;
					rotate_dir = 2;
 8005276:	4b17      	ldr	r3, [pc, #92]	; (80052d4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8005278:	2202      	movs	r2, #2
 800527a:	601a      	str	r2, [r3, #0]
					rotate_state[0] = 0;
 800527c:	4b14      	ldr	r3, [pc, #80]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800527e:	2200      	movs	r2, #0
 8005280:	801a      	strh	r2, [r3, #0]
					rotate_state[1] = 0;
 8005282:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8005284:	2200      	movs	r2, #0
 8005286:	805a      	strh	r2, [r3, #2]
					rotate_state[2] = 0;
 8005288:	4b11      	ldr	r3, [pc, #68]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800528a:	2200      	movs	r2, #0
 800528c:	809a      	strh	r2, [r3, #4]
					rotate_temp = 0;
 800528e:	4b0c      	ldr	r3, [pc, #48]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
					flag = 0;
 8005294:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
					pub_the_gate();
 800529a:	f7fe febf 	bl	800401c <pub_the_gate>
 800529e:	e07a      	b.n	8005396 <HAL_TIM_PeriodElapsedCallback+0x342>
 80052a0:	40001000 	.word	0x40001000
 80052a4:	20000ba8 	.word	0x20000ba8
 80052a8:	20000bfc 	.word	0x20000bfc
 80052ac:	20000b98 	.word	0x20000b98
 80052b0:	40020800 	.word	0x40020800
 80052b4:	20000c04 	.word	0x20000c04
 80052b8:	20000ba4 	.word	0x20000ba4
 80052bc:	40020c00 	.word	0x40020c00
 80052c0:	20000c58 	.word	0x20000c58
 80052c4:	20000000 	.word	0x20000000
 80052c8:	20000cf4 	.word	0x20000cf4
 80052cc:	20000c5c 	.word	0x20000c5c
 80052d0:	20000c50 	.word	0x20000c50
 80052d4:	2000000c 	.word	0x2000000c
				}
				else if (rotate_state[0] == 1 && rotate_state[1] == 0
 80052d8:	4b15      	ldr	r3, [pc, #84]	; (8005330 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80052da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d12e      	bne.n	8005340 <HAL_TIM_PeriodElapsedCallback+0x2ec>
 80052e2:	4b13      	ldr	r3, [pc, #76]	; (8005330 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80052e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d129      	bne.n	8005340 <HAL_TIM_PeriodElapsedCallback+0x2ec>
						&& rotate_state[2] == 0
 80052ec:	4b10      	ldr	r3, [pc, #64]	; (8005330 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80052ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d124      	bne.n	8005340 <HAL_TIM_PeriodElapsedCallback+0x2ec>
						&& (rotate_dir == 2 || rotate_dir == 4)) {
 80052f6:	4b0f      	ldr	r3, [pc, #60]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d003      	beq.n	8005306 <HAL_TIM_PeriodElapsedCallback+0x2b2>
 80052fe:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b04      	cmp	r3, #4
 8005304:	d11c      	bne.n	8005340 <HAL_TIM_PeriodElapsedCallback+0x2ec>
//						step1 = 2.86 * 5 * 8 / 1.8;
					rotate_dir = 3;
 8005306:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005308:	2203      	movs	r2, #3
 800530a:	601a      	str	r2, [r3, #0]
					rotate_state[0] = 0;
 800530c:	4b08      	ldr	r3, [pc, #32]	; (8005330 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800530e:	2200      	movs	r2, #0
 8005310:	801a      	strh	r2, [r3, #0]
					rotate_state[1] = 0;
 8005312:	4b07      	ldr	r3, [pc, #28]	; (8005330 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005314:	2200      	movs	r2, #0
 8005316:	805a      	strh	r2, [r3, #2]
					rotate_state[2] = 0;
 8005318:	4b05      	ldr	r3, [pc, #20]	; (8005330 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800531a:	2200      	movs	r2, #0
 800531c:	809a      	strh	r2, [r3, #4]
					rotate_temp = 0;
 800531e:	4b06      	ldr	r3, [pc, #24]	; (8005338 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
					flag = 0;
 8005324:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]
					pub_the_gate();
 800532a:	f7fe fe77 	bl	800401c <pub_the_gate>
 800532e:	e032      	b.n	8005396 <HAL_TIM_PeriodElapsedCallback+0x342>
 8005330:	20000c50 	.word	0x20000c50
 8005334:	2000000c 	.word	0x2000000c
 8005338:	20000c58 	.word	0x20000c58
 800533c:	20000c5c 	.word	0x20000c5c
				}
				else if (rotate_state[0] == 0 && rotate_state[1] == 0
 8005340:	4b99      	ldr	r3, [pc, #612]	; (80055a8 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8005342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d125      	bne.n	8005396 <HAL_TIM_PeriodElapsedCallback+0x342>
 800534a:	4b97      	ldr	r3, [pc, #604]	; (80055a8 <HAL_TIM_PeriodElapsedCallback+0x554>)
 800534c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d120      	bne.n	8005396 <HAL_TIM_PeriodElapsedCallback+0x342>
						&& rotate_state[2] == 1
 8005354:	4b94      	ldr	r3, [pc, #592]	; (80055a8 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8005356:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d11b      	bne.n	8005396 <HAL_TIM_PeriodElapsedCallback+0x342>
						&& (rotate_dir == 1 || rotate_dir == 3)) {
 800535e:	4b93      	ldr	r3, [pc, #588]	; (80055ac <HAL_TIM_PeriodElapsedCallback+0x558>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d003      	beq.n	800536e <HAL_TIM_PeriodElapsedCallback+0x31a>
 8005366:	4b91      	ldr	r3, [pc, #580]	; (80055ac <HAL_TIM_PeriodElapsedCallback+0x558>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b03      	cmp	r3, #3
 800536c:	d113      	bne.n	8005396 <HAL_TIM_PeriodElapsedCallback+0x342>
//						step1 = 2.86 * 5 * 8 / 1.8;
					rotate_dir = 4;
 800536e:	4b8f      	ldr	r3, [pc, #572]	; (80055ac <HAL_TIM_PeriodElapsedCallback+0x558>)
 8005370:	2204      	movs	r2, #4
 8005372:	601a      	str	r2, [r3, #0]
					rotate_state[0] = 0;
 8005374:	4b8c      	ldr	r3, [pc, #560]	; (80055a8 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8005376:	2200      	movs	r2, #0
 8005378:	801a      	strh	r2, [r3, #0]
					rotate_state[1] = 0;
 800537a:	4b8b      	ldr	r3, [pc, #556]	; (80055a8 <HAL_TIM_PeriodElapsedCallback+0x554>)
 800537c:	2200      	movs	r2, #0
 800537e:	805a      	strh	r2, [r3, #2]
					rotate_state[2] = 0;
 8005380:	4b89      	ldr	r3, [pc, #548]	; (80055a8 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8005382:	2200      	movs	r2, #0
 8005384:	809a      	strh	r2, [r3, #4]
					rotate_temp = 0;
 8005386:	4b8a      	ldr	r3, [pc, #552]	; (80055b0 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
					flag = 0;
 800538c:	4b89      	ldr	r3, [pc, #548]	; (80055b4 <HAL_TIM_PeriodElapsedCallback+0x560>)
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]
					pub_the_gate();
 8005392:	f7fe fe43 	bl	800401c <pub_the_gate>
//				}
			}

		}
	}
	if (htim->Instance == TIM7) {
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a87      	ldr	r2, [pc, #540]	; (80055b8 <HAL_TIM_PeriodElapsedCallback+0x564>)
 800539c:	4293      	cmp	r3, r2
 800539e:	f040 80d5 	bne.w	800554c <HAL_TIM_PeriodElapsedCallback+0x4f8>

		if (suck1 == 1) {           //press_sensor1 feedback(suck)
 80053a2:	4b86      	ldr	r3, [pc, #536]	; (80055bc <HAL_TIM_PeriodElapsedCallback+0x568>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d11e      	bne.n	80053e8 <HAL_TIM_PeriodElapsedCallback+0x394>
			i1++;
 80053aa:	4b85      	ldr	r3, [pc, #532]	; (80055c0 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3301      	adds	r3, #1
 80053b0:	4a83      	ldr	r2, [pc, #524]	; (80055c0 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80053b2:	6013      	str	r3, [r2, #0]
//			if (ADC_cake[0] < 200) {        //PA5
			if (i1 == 500) {
 80053b4:	4b82      	ldr	r3, [pc, #520]	; (80055c0 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80053bc:	d114      	bne.n	80053e8 <HAL_TIM_PeriodElapsedCallback+0x394>
				suck_success1 = 1;
 80053be:	4b81      	ldr	r3, [pc, #516]	; (80055c4 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80053c0:	2201      	movs	r2, #1
 80053c2:	601a      	str	r2, [r3, #0]
				suck1 = 0;
 80053c4:	4b7d      	ldr	r3, [pc, #500]	; (80055bc <HAL_TIM_PeriodElapsedCallback+0x568>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(1, 1200, 300);
 80053ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80053ce:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80053d2:	2001      	movs	r0, #1
 80053d4:	f7fb fce0 	bl	8000d98 <UART_Send_SetMotorPosition>
				i1 = 0;
 80053d8:	4b79      	ldr	r3, [pc, #484]	; (80055c0 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
				suck_temp--;
 80053de:	4b7a      	ldr	r3, [pc, #488]	; (80055c8 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	4a78      	ldr	r2, [pc, #480]	; (80055c8 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80053e6:	6013      	str	r3, [r2, #0]
				//			}
			}
		}
		if (suck4 == 1) {             //press_sensor4 feedback(suck)
 80053e8:	4b78      	ldr	r3, [pc, #480]	; (80055cc <HAL_TIM_PeriodElapsedCallback+0x578>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d11e      	bne.n	800542e <HAL_TIM_PeriodElapsedCallback+0x3da>
			i2++;
 80053f0:	4b77      	ldr	r3, [pc, #476]	; (80055d0 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3301      	adds	r3, #1
 80053f6:	4a76      	ldr	r2, [pc, #472]	; (80055d0 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80053f8:	6013      	str	r3, [r2, #0]
//			if (ADC_cake[1] < 200) {     //PA6
			if (i2 == 500) {
 80053fa:	4b75      	ldr	r3, [pc, #468]	; (80055d0 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005402:	d114      	bne.n	800542e <HAL_TIM_PeriodElapsedCallback+0x3da>
				suck_success4 = 1;
 8005404:	4b73      	ldr	r3, [pc, #460]	; (80055d4 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8005406:	2201      	movs	r2, #1
 8005408:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(4, 1200, 300);
 800540a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800540e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8005412:	2004      	movs	r0, #4
 8005414:	f7fb fcc0 	bl	8000d98 <UART_Send_SetMotorPosition>
				i2 = 0;
 8005418:	4b6d      	ldr	r3, [pc, #436]	; (80055d0 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]
				suck_temp--;
 800541e:	4b6a      	ldr	r3, [pc, #424]	; (80055c8 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3b01      	subs	r3, #1
 8005424:	4a68      	ldr	r2, [pc, #416]	; (80055c8 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8005426:	6013      	str	r3, [r2, #0]
				suck4 = 0;
 8005428:	4b68      	ldr	r3, [pc, #416]	; (80055cc <HAL_TIM_PeriodElapsedCallback+0x578>)
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
				//			}
			}
		}
		if (suck3 == 1) {             //press_sensor3 feedback(suck)
 800542e:	4b6a      	ldr	r3, [pc, #424]	; (80055d8 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d121      	bne.n	800547a <HAL_TIM_PeriodElapsedCallback+0x426>
			i3++;
 8005436:	4b69      	ldr	r3, [pc, #420]	; (80055dc <HAL_TIM_PeriodElapsedCallback+0x588>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3301      	adds	r3, #1
 800543c:	4a67      	ldr	r2, [pc, #412]	; (80055dc <HAL_TIM_PeriodElapsedCallback+0x588>)
 800543e:	6013      	str	r3, [r2, #0]
//			if (ADC_cake[2] < 200) {      //PA7
			if (i3 == 500) {
 8005440:	4b66      	ldr	r3, [pc, #408]	; (80055dc <HAL_TIM_PeriodElapsedCallback+0x588>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005448:	d117      	bne.n	800547a <HAL_TIM_PeriodElapsedCallback+0x426>
				suck_success3 = 1;
 800544a:	4b65      	ldr	r3, [pc, #404]	; (80055e0 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800544c:	2201      	movs	r2, #1
 800544e:	601a      	str	r2, [r3, #0]
				suck3 = 0;
 8005450:	4b61      	ldr	r3, [pc, #388]	; (80055d8 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(3, 1200, 300);
 8005456:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800545a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800545e:	2003      	movs	r0, #3
 8005460:	f7fb fc9a 	bl	8000d98 <UART_Send_SetMotorPosition>
				i3 = 0;
 8005464:	4b5d      	ldr	r3, [pc, #372]	; (80055dc <HAL_TIM_PeriodElapsedCallback+0x588>)
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]
				suck_temp--;
 800546a:	4b57      	ldr	r3, [pc, #348]	; (80055c8 <HAL_TIM_PeriodElapsedCallback+0x574>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3b01      	subs	r3, #1
 8005470:	4a55      	ldr	r2, [pc, #340]	; (80055c8 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8005472:	6013      	str	r3, [r2, #0]
				suck3 = 0;
 8005474:	4b58      	ldr	r3, [pc, #352]	; (80055d8 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8005476:	2200      	movs	r2, #0
 8005478:	601a      	str	r2, [r3, #0]
				//			}
			}
		}
		if (unsuck1 == 1) {         //press_sensor1 feedback(unsuck)
 800547a:	4b5a      	ldr	r3, [pc, #360]	; (80055e4 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d11e      	bne.n	80054c0 <HAL_TIM_PeriodElapsedCallback+0x46c>
			i4++;
 8005482:	4b59      	ldr	r3, [pc, #356]	; (80055e8 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3301      	adds	r3, #1
 8005488:	4a57      	ldr	r2, [pc, #348]	; (80055e8 <HAL_TIM_PeriodElapsedCallback+0x594>)
 800548a:	6013      	str	r3, [r2, #0]

//			if (ADC_cake[0] > 1900) {       //PA5
			if (i4 == 500) {
 800548c:	4b56      	ldr	r3, [pc, #344]	; (80055e8 <HAL_TIM_PeriodElapsedCallback+0x594>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005494:	d114      	bne.n	80054c0 <HAL_TIM_PeriodElapsedCallback+0x46c>
				unsuck_success1 = 1;
 8005496:	4b55      	ldr	r3, [pc, #340]	; (80055ec <HAL_TIM_PeriodElapsedCallback+0x598>)
 8005498:	2201      	movs	r2, #1
 800549a:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(1, 1200, 300);
 800549c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054a0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80054a4:	2001      	movs	r0, #1
 80054a6:	f7fb fc77 	bl	8000d98 <UART_Send_SetMotorPosition>
				i4 = 0;
 80054aa:	4b4f      	ldr	r3, [pc, #316]	; (80055e8 <HAL_TIM_PeriodElapsedCallback+0x594>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]
				unsuck_temp--;
 80054b0:	4b4f      	ldr	r3, [pc, #316]	; (80055f0 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3b01      	subs	r3, #1
 80054b6:	4a4e      	ldr	r2, [pc, #312]	; (80055f0 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80054b8:	6013      	str	r3, [r2, #0]
				unsuck1 = 0;
 80054ba:	4b4a      	ldr	r3, [pc, #296]	; (80055e4 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]
				//			}
			}
		}
		if (unsuck4 == 1) {        // press_sensor4 feedback(unsuck)
 80054c0:	4b4c      	ldr	r3, [pc, #304]	; (80055f4 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d11e      	bne.n	8005506 <HAL_TIM_PeriodElapsedCallback+0x4b2>
			i5++;
 80054c8:	4b4b      	ldr	r3, [pc, #300]	; (80055f8 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3301      	adds	r3, #1
 80054ce:	4a4a      	ldr	r2, [pc, #296]	; (80055f8 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80054d0:	6013      	str	r3, [r2, #0]
//			if (ADC_cake[1] > 1900) {               //PA6
			if (i5 == 500) {
 80054d2:	4b49      	ldr	r3, [pc, #292]	; (80055f8 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80054da:	d114      	bne.n	8005506 <HAL_TIM_PeriodElapsedCallback+0x4b2>
				unsuck_success4 = 1;
 80054dc:	4b47      	ldr	r3, [pc, #284]	; (80055fc <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80054de:	2201      	movs	r2, #1
 80054e0:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(4, 1200, 300);
 80054e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054e6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80054ea:	2004      	movs	r0, #4
 80054ec:	f7fb fc54 	bl	8000d98 <UART_Send_SetMotorPosition>
				i5 = 0;
 80054f0:	4b41      	ldr	r3, [pc, #260]	; (80055f8 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
				unsuck_temp--;
 80054f6:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	4a3c      	ldr	r2, [pc, #240]	; (80055f0 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80054fe:	6013      	str	r3, [r2, #0]
				unsuck4 = 0;
 8005500:	4b3c      	ldr	r3, [pc, #240]	; (80055f4 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
				//			}
			}
		}
		if (unsuck3 == 1) {      //press_sensor3 feedback(unsuck)
 8005506:	4b3e      	ldr	r3, [pc, #248]	; (8005600 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d11e      	bne.n	800554c <HAL_TIM_PeriodElapsedCallback+0x4f8>
			i6++;
 800550e:	4b3d      	ldr	r3, [pc, #244]	; (8005604 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3301      	adds	r3, #1
 8005514:	4a3b      	ldr	r2, [pc, #236]	; (8005604 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8005516:	6013      	str	r3, [r2, #0]
//			if (ADC_cake[2] > 1900) {          //PA7
			if (i6 == 500) {
 8005518:	4b3a      	ldr	r3, [pc, #232]	; (8005604 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005520:	d114      	bne.n	800554c <HAL_TIM_PeriodElapsedCallback+0x4f8>
				unsuck_success3 = 1;
 8005522:	4b39      	ldr	r3, [pc, #228]	; (8005608 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8005524:	2201      	movs	r2, #1
 8005526:	601a      	str	r2, [r3, #0]
				UART_Send_SetMotorPosition(3, 1200, 300);
 8005528:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800552c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8005530:	2003      	movs	r0, #3
 8005532:	f7fb fc31 	bl	8000d98 <UART_Send_SetMotorPosition>
				i6 = 0;
 8005536:	4b33      	ldr	r3, [pc, #204]	; (8005604 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
				unsuck_temp--;
 800553c:	4b2c      	ldr	r3, [pc, #176]	; (80055f0 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3b01      	subs	r3, #1
 8005542:	4a2b      	ldr	r2, [pc, #172]	; (80055f0 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8005544:	6013      	str	r3, [r2, #0]
				unsuck3 = 0;
 8005546:	4b2e      	ldr	r3, [pc, #184]	; (8005600 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
				//			}
			}
		}
	}
	if (htim->Instance == TIM10) {
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a2e      	ldr	r2, [pc, #184]	; (800560c <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	f040 80a3 	bne.w	800569e <HAL_TIM_PeriodElapsedCallback+0x64a>
		loop();
 8005558:	f7fe fd90 	bl	800407c <loop>
		counttry++;
 800555c:	4b2c      	ldr	r3, [pc, #176]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3301      	adds	r3, #1
 8005562:	4a2b      	ldr	r2, [pc, #172]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8005564:	6013      	str	r3, [r2, #0]
		if (suck_delay_temp == 1) {
 8005566:	4b2b      	ldr	r3, [pc, #172]	; (8005614 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d10e      	bne.n	800558c <HAL_TIM_PeriodElapsedCallback+0x538>
			suck_delay++;
 800556e:	4b2a      	ldr	r3, [pc, #168]	; (8005618 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3301      	adds	r3, #1
 8005574:	4a28      	ldr	r2, [pc, #160]	; (8005618 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8005576:	6013      	str	r3, [r2, #0]
			if (suck_delay == 30) {
 8005578:	4b27      	ldr	r3, [pc, #156]	; (8005618 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b1e      	cmp	r3, #30
 800557e:	d105      	bne.n	800558c <HAL_TIM_PeriodElapsedCallback+0x538>
				suck_delay = 0;
 8005580:	4b25      	ldr	r3, [pc, #148]	; (8005618 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
				suck_delay_temp = 0;
 8005586:	4b23      	ldr	r3, [pc, #140]	; (8005614 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
			}
		}
		if (unsuck_delay_temp == 1) {
 800558c:	4b23      	ldr	r3, [pc, #140]	; (800561c <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d14e      	bne.n	8005632 <HAL_TIM_PeriodElapsedCallback+0x5de>
			unsuck_delay++;
 8005594:	4b22      	ldr	r3, [pc, #136]	; (8005620 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3301      	adds	r3, #1
 800559a:	4a21      	ldr	r2, [pc, #132]	; (8005620 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800559c:	6013      	str	r3, [r2, #0]
			if (unsuck_delay == 30) {
 800559e:	4b20      	ldr	r3, [pc, #128]	; (8005620 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b1e      	cmp	r3, #30
 80055a4:	e03e      	b.n	8005624 <HAL_TIM_PeriodElapsedCallback+0x5d0>
 80055a6:	bf00      	nop
 80055a8:	20000c50 	.word	0x20000c50
 80055ac:	2000000c 	.word	0x2000000c
 80055b0:	20000c58 	.word	0x20000c58
 80055b4:	20000c5c 	.word	0x20000c5c
 80055b8:	40001400 	.word	0x40001400
 80055bc:	20000bac 	.word	0x20000bac
 80055c0:	20000be4 	.word	0x20000be4
 80055c4:	20000bcc 	.word	0x20000bcc
 80055c8:	20000bc4 	.word	0x20000bc4
 80055cc:	20000bb0 	.word	0x20000bb0
 80055d0:	20000be8 	.word	0x20000be8
 80055d4:	20000bd0 	.word	0x20000bd0
 80055d8:	20000bb4 	.word	0x20000bb4
 80055dc:	20000bec 	.word	0x20000bec
 80055e0:	20000bd4 	.word	0x20000bd4
 80055e4:	20000bb8 	.word	0x20000bb8
 80055e8:	20000bf0 	.word	0x20000bf0
 80055ec:	20000bd8 	.word	0x20000bd8
 80055f0:	20000bc8 	.word	0x20000bc8
 80055f4:	20000bbc 	.word	0x20000bbc
 80055f8:	20000bf4 	.word	0x20000bf4
 80055fc:	20000bdc 	.word	0x20000bdc
 8005600:	20000bc0 	.word	0x20000bc0
 8005604:	20000bf8 	.word	0x20000bf8
 8005608:	20000be0 	.word	0x20000be0
 800560c:	40014400 	.word	0x40014400
 8005610:	20000c08 	.word	0x20000c08
 8005614:	20000c34 	.word	0x20000c34
 8005618:	20000c24 	.word	0x20000c24
 800561c:	20000c30 	.word	0x20000c30
 8005620:	20000c20 	.word	0x20000c20
 8005624:	d105      	bne.n	8005632 <HAL_TIM_PeriodElapsedCallback+0x5de>
				unsuck_delay = 0;
 8005626:	4b20      	ldr	r3, [pc, #128]	; (80056a8 <HAL_TIM_PeriodElapsedCallback+0x654>)
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]
				unsuck_delay_temp = 0;
 800562c:	4b1f      	ldr	r3, [pc, #124]	; (80056ac <HAL_TIM_PeriodElapsedCallback+0x658>)
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]
			}
		}
		if (servo_delay_temp == 1) {
 8005632:	4b1f      	ldr	r3, [pc, #124]	; (80056b0 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d10e      	bne.n	8005658 <HAL_TIM_PeriodElapsedCallback+0x604>
			servo_delay++;
 800563a:	4b1e      	ldr	r3, [pc, #120]	; (80056b4 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3301      	adds	r3, #1
 8005640:	4a1c      	ldr	r2, [pc, #112]	; (80056b4 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8005642:	6013      	str	r3, [r2, #0]
			if (servo_delay == 50) {
 8005644:	4b1b      	ldr	r3, [pc, #108]	; (80056b4 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b32      	cmp	r3, #50	; 0x32
 800564a:	d105      	bne.n	8005658 <HAL_TIM_PeriodElapsedCallback+0x604>
				servo_delay = 0;
 800564c:	4b19      	ldr	r3, [pc, #100]	; (80056b4 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
				servo_delay_temp = 0;
 8005652:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
			}
		}
		if (cherry_delay_temp == 1) {
 8005658:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <HAL_TIM_PeriodElapsedCallback+0x664>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d10e      	bne.n	800567e <HAL_TIM_PeriodElapsedCallback+0x62a>
			cherry_delay++;
 8005660:	4b16      	ldr	r3, [pc, #88]	; (80056bc <HAL_TIM_PeriodElapsedCallback+0x668>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3301      	adds	r3, #1
 8005666:	4a15      	ldr	r2, [pc, #84]	; (80056bc <HAL_TIM_PeriodElapsedCallback+0x668>)
 8005668:	6013      	str	r3, [r2, #0]
			if (cherry_delay == 50) {
 800566a:	4b14      	ldr	r3, [pc, #80]	; (80056bc <HAL_TIM_PeriodElapsedCallback+0x668>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b32      	cmp	r3, #50	; 0x32
 8005670:	d105      	bne.n	800567e <HAL_TIM_PeriodElapsedCallback+0x62a>
				cherry_delay = 0;
 8005672:	4b12      	ldr	r3, [pc, #72]	; (80056bc <HAL_TIM_PeriodElapsedCallback+0x668>)
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]
				cherry_delay_temp = 0;
 8005678:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <HAL_TIM_PeriodElapsedCallback+0x664>)
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]
			}
		}
		if (mission_array[0] >= 1 && temp_pub < 10) {
 800567e:	4b10      	ldr	r3, [pc, #64]	; (80056c0 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 8005680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005684:	2b00      	cmp	r3, #0
 8005686:	dd0a      	ble.n	800569e <HAL_TIM_PeriodElapsedCallback+0x64a>
 8005688:	4b0e      	ldr	r3, [pc, #56]	; (80056c4 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b09      	cmp	r3, #9
 800568e:	dc06      	bgt.n	800569e <HAL_TIM_PeriodElapsedCallback+0x64a>
			pub_to_ros();
 8005690:	f7fe fcb0 	bl	8003ff4 <pub_to_ros>
			temp_pub++;
 8005694:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	4a0a      	ldr	r2, [pc, #40]	; (80056c4 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800569c:	6013      	str	r3, [r2, #0]
		}

	}
}
 800569e:	bf00      	nop
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20000c20 	.word	0x20000c20
 80056ac:	20000c30 	.word	0x20000c30
 80056b0:	20000c38 	.word	0x20000c38
 80056b4:	20000c28 	.word	0x20000c28
 80056b8:	20000c40 	.word	0x20000c40
 80056bc:	20000c2c 	.word	0x20000c2c
 80056c0:	20000c44 	.word	0x20000c44
 80056c4:	20000c3c 	.word	0x20000c3c

080056c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056ce:	2300      	movs	r3, #0
 80056d0:	607b      	str	r3, [r7, #4]
 80056d2:	4b18      	ldr	r3, [pc, #96]	; (8005734 <HAL_MspInit+0x6c>)
 80056d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d6:	4a17      	ldr	r2, [pc, #92]	; (8005734 <HAL_MspInit+0x6c>)
 80056d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056dc:	6453      	str	r3, [r2, #68]	; 0x44
 80056de:	4b15      	ldr	r3, [pc, #84]	; (8005734 <HAL_MspInit+0x6c>)
 80056e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056e6:	607b      	str	r3, [r7, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80056ea:	2300      	movs	r3, #0
 80056ec:	603b      	str	r3, [r7, #0]
 80056ee:	4b11      	ldr	r3, [pc, #68]	; (8005734 <HAL_MspInit+0x6c>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	4a10      	ldr	r2, [pc, #64]	; (8005734 <HAL_MspInit+0x6c>)
 80056f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f8:	6413      	str	r3, [r2, #64]	; 0x40
 80056fa:	4b0e      	ldr	r3, [pc, #56]	; (8005734 <HAL_MspInit+0x6c>)
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005706:	2007      	movs	r0, #7
 8005708:	f001 fa8c 	bl	8006c24 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800570c:	2200      	movs	r2, #0
 800570e:	2100      	movs	r1, #0
 8005710:	2005      	movs	r0, #5
 8005712:	f001 fa92 	bl	8006c3a <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005716:	2005      	movs	r0, #5
 8005718:	f001 faab 	bl	8006c72 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800571c:	2200      	movs	r2, #0
 800571e:	2100      	movs	r1, #0
 8005720:	2005      	movs	r0, #5
 8005722:	f001 fa8a 	bl	8006c3a <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005726:	2005      	movs	r0, #5
 8005728:	f001 faa3 	bl	8006c72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800572c:	bf00      	nop
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40023800 	.word	0x40023800

08005738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800573c:	e7fe      	b.n	800573c <NMI_Handler+0x4>

0800573e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800573e:	b480      	push	{r7}
 8005740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005742:	e7fe      	b.n	8005742 <HardFault_Handler+0x4>

08005744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005748:	e7fe      	b.n	8005748 <MemManage_Handler+0x4>

0800574a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800574a:	b480      	push	{r7}
 800574c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800574e:	e7fe      	b.n	800574e <BusFault_Handler+0x4>

08005750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005754:	e7fe      	b.n	8005754 <UsageFault_Handler+0x4>

08005756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005756:	b480      	push	{r7}
 8005758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800575a:	bf00      	nop
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005768:	bf00      	nop
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005772:	b480      	push	{r7}
 8005774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005776:	bf00      	nop
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005784:	f000 fea4 	bl	80064d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005788:	bf00      	nop
 800578a:	bd80      	pop	{r7, pc}

0800578c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005790:	bf00      	nop
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800579e:	2010      	movs	r0, #16
 80057a0:	f002 f992 	bl	8007ac8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80057a4:	bf00      	nop
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80057ac:	4802      	ldr	r0, [pc, #8]	; (80057b8 <DMA1_Stream5_IRQHandler+0x10>)
 80057ae:	f001 fc7f 	bl	80070b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80057b2:	bf00      	nop
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20001000 	.word	0x20001000

080057bc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80057c0:	4802      	ldr	r0, [pc, #8]	; (80057cc <DMA1_Stream6_IRQHandler+0x10>)
 80057c2:	f001 fc75 	bl	80070b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80057c6:	bf00      	nop
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20000fa0 	.word	0x20000fa0

080057d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80057d4:	4802      	ldr	r0, [pc, #8]	; (80057e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80057d6:	f003 fa93 	bl	8008d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80057da:	bf00      	nop
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	20000d84 	.word	0x20000d84

080057e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80057e8:	4802      	ldr	r0, [pc, #8]	; (80057f4 <USART1_IRQHandler+0x10>)
 80057ea:	f004 f93d 	bl	8009a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80057ee:	bf00      	nop
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000e14 	.word	0x20000e14

080057f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80057fc:	4802      	ldr	r0, [pc, #8]	; (8005808 <USART2_IRQHandler+0x10>)
 80057fe:	f004 f933 	bl	8009a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005802:	bf00      	nop
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20000e58 	.word	0x20000e58

0800580c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005810:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005814:	f002 f958 	bl	8007ac8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8005818:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800581c:	f002 f954 	bl	8007ac8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005820:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005824:	f002 f950 	bl	8007ac8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005828:	bf00      	nop
 800582a:	bd80      	pop	{r7, pc}

0800582c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005830:	4802      	ldr	r0, [pc, #8]	; (800583c <TIM6_DAC_IRQHandler+0x10>)
 8005832:	f003 fa65 	bl	8008d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005836:	bf00      	nop
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20000cf4 	.word	0x20000cf4

08005840 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005844:	4802      	ldr	r0, [pc, #8]	; (8005850 <TIM7_IRQHandler+0x10>)
 8005846:	f003 fa5b 	bl	8008d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800584a:	bf00      	nop
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000d3c 	.word	0x20000d3c

08005854 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005858:	4802      	ldr	r0, [pc, #8]	; (8005864 <DMA2_Stream0_IRQHandler+0x10>)
 800585a:	f001 fc29 	bl	80070b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800585e:	bf00      	nop
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	200000ec 	.word	0x200000ec

08005868 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800586c:	4802      	ldr	r0, [pc, #8]	; (8005878 <DMA2_Stream2_IRQHandler+0x10>)
 800586e:	f001 fc1f 	bl	80070b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005872:	bf00      	nop
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000ee0 	.word	0x20000ee0

0800587c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005880:	4802      	ldr	r0, [pc, #8]	; (800588c <DMA2_Stream7_IRQHandler+0x10>)
 8005882:	f001 fc15 	bl	80070b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8005886:	bf00      	nop
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20000f40 	.word	0x20000f40

08005890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005890:	b480      	push	{r7}
 8005892:	af00      	add	r7, sp, #0
	return 1;
 8005894:	2301      	movs	r3, #1
}
 8005896:	4618      	mov	r0, r3
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <_kill>:

int _kill(int pid, int sig)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80058aa:	f005 fa47 	bl	800ad3c <__errno>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2216      	movs	r2, #22
 80058b2:	601a      	str	r2, [r3, #0]
	return -1;
 80058b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <_exit>:

void _exit (int status)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80058c8:	f04f 31ff 	mov.w	r1, #4294967295
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff ffe7 	bl	80058a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80058d2:	e7fe      	b.n	80058d2 <_exit+0x12>

080058d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80058dc:	4a14      	ldr	r2, [pc, #80]	; (8005930 <_sbrk+0x5c>)
 80058de:	4b15      	ldr	r3, [pc, #84]	; (8005934 <_sbrk+0x60>)
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058e8:	4b13      	ldr	r3, [pc, #76]	; (8005938 <_sbrk+0x64>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d102      	bne.n	80058f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80058f0:	4b11      	ldr	r3, [pc, #68]	; (8005938 <_sbrk+0x64>)
 80058f2:	4a12      	ldr	r2, [pc, #72]	; (800593c <_sbrk+0x68>)
 80058f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058f6:	4b10      	ldr	r3, [pc, #64]	; (8005938 <_sbrk+0x64>)
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4413      	add	r3, r2
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	429a      	cmp	r2, r3
 8005902:	d207      	bcs.n	8005914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005904:	f005 fa1a 	bl	800ad3c <__errno>
 8005908:	4603      	mov	r3, r0
 800590a:	220c      	movs	r2, #12
 800590c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800590e:	f04f 33ff 	mov.w	r3, #4294967295
 8005912:	e009      	b.n	8005928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005914:	4b08      	ldr	r3, [pc, #32]	; (8005938 <_sbrk+0x64>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800591a:	4b07      	ldr	r3, [pc, #28]	; (8005938 <_sbrk+0x64>)
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4413      	add	r3, r2
 8005922:	4a05      	ldr	r2, [pc, #20]	; (8005938 <_sbrk+0x64>)
 8005924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005926:	68fb      	ldr	r3, [r7, #12]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	20020000 	.word	0x20020000
 8005934:	00000400 	.word	0x00000400
 8005938:	20000c60 	.word	0x20000c60
 800593c:	20001078 	.word	0x20001078

08005940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005944:	4b06      	ldr	r3, [pc, #24]	; (8005960 <SystemInit+0x20>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594a:	4a05      	ldr	r2, [pc, #20]	; (8005960 <SystemInit+0x20>)
 800594c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005954:	bf00      	nop
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	e000ed00 	.word	0xe000ed00

08005964 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08a      	sub	sp, #40	; 0x28
 8005968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800596a:	f107 0320 	add.w	r3, r7, #32
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005974:	1d3b      	adds	r3, r7, #4
 8005976:	2200      	movs	r2, #0
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	605a      	str	r2, [r3, #4]
 800597c:	609a      	str	r2, [r3, #8]
 800597e:	60da      	str	r2, [r3, #12]
 8005980:	611a      	str	r2, [r3, #16]
 8005982:	615a      	str	r2, [r3, #20]
 8005984:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005986:	4b28      	ldr	r3, [pc, #160]	; (8005a28 <MX_TIM2_Init+0xc4>)
 8005988:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800598c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 179;
 800598e:	4b26      	ldr	r3, [pc, #152]	; (8005a28 <MX_TIM2_Init+0xc4>)
 8005990:	22b3      	movs	r2, #179	; 0xb3
 8005992:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005994:	4b24      	ldr	r3, [pc, #144]	; (8005a28 <MX_TIM2_Init+0xc4>)
 8005996:	2200      	movs	r2, #0
 8005998:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800599a:	4b23      	ldr	r3, [pc, #140]	; (8005a28 <MX_TIM2_Init+0xc4>)
 800599c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80059a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059a2:	4b21      	ldr	r3, [pc, #132]	; (8005a28 <MX_TIM2_Init+0xc4>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059a8:	4b1f      	ldr	r3, [pc, #124]	; (8005a28 <MX_TIM2_Init+0xc4>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80059ae:	481e      	ldr	r0, [pc, #120]	; (8005a28 <MX_TIM2_Init+0xc4>)
 80059b0:	f003 f88e 	bl	8008ad0 <HAL_TIM_PWM_Init>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80059ba:	f7fc fe93 	bl	80026e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059be:	2300      	movs	r3, #0
 80059c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059c2:	2300      	movs	r3, #0
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80059c6:	f107 0320 	add.w	r3, r7, #32
 80059ca:	4619      	mov	r1, r3
 80059cc:	4816      	ldr	r0, [pc, #88]	; (8005a28 <MX_TIM2_Init+0xc4>)
 80059ce:	f003 fdff 	bl	80095d0 <HAL_TIMEx_MasterConfigSynchronization>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80059d8:	f7fc fe84 	bl	80026e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80059dc:	2360      	movs	r3, #96	; 0x60
 80059de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80059ec:	1d3b      	adds	r3, r7, #4
 80059ee:	2200      	movs	r2, #0
 80059f0:	4619      	mov	r1, r3
 80059f2:	480d      	ldr	r0, [pc, #52]	; (8005a28 <MX_TIM2_Init+0xc4>)
 80059f4:	f003 fa8c 	bl	8008f10 <HAL_TIM_PWM_ConfigChannel>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80059fe:	f7fc fe71 	bl	80026e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005a02:	1d3b      	adds	r3, r7, #4
 8005a04:	2204      	movs	r2, #4
 8005a06:	4619      	mov	r1, r3
 8005a08:	4807      	ldr	r0, [pc, #28]	; (8005a28 <MX_TIM2_Init+0xc4>)
 8005a0a:	f003 fa81 	bl	8008f10 <HAL_TIM_PWM_ConfigChannel>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005a14:	f7fc fe66 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005a18:	4803      	ldr	r0, [pc, #12]	; (8005a28 <MX_TIM2_Init+0xc4>)
 8005a1a:	f000 f9e3 	bl	8005de4 <HAL_TIM_MspPostInit>

}
 8005a1e:	bf00      	nop
 8005a20:	3728      	adds	r7, #40	; 0x28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	20000c64 	.word	0x20000c64

08005a2c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08a      	sub	sp, #40	; 0x28
 8005a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a32:	f107 0320 	add.w	r3, r7, #32
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a3c:	1d3b      	adds	r3, r7, #4
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	605a      	str	r2, [r3, #4]
 8005a44:	609a      	str	r2, [r3, #8]
 8005a46:	60da      	str	r2, [r3, #12]
 8005a48:	611a      	str	r2, [r3, #16]
 8005a4a:	615a      	str	r2, [r3, #20]
 8005a4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005a4e:	4b32      	ldr	r3, [pc, #200]	; (8005b18 <MX_TIM3_Init+0xec>)
 8005a50:	4a32      	ldr	r2, [pc, #200]	; (8005b1c <MX_TIM3_Init+0xf0>)
 8005a52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 179;
 8005a54:	4b30      	ldr	r3, [pc, #192]	; (8005b18 <MX_TIM3_Init+0xec>)
 8005a56:	22b3      	movs	r2, #179	; 0xb3
 8005a58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a5a:	4b2f      	ldr	r3, [pc, #188]	; (8005b18 <MX_TIM3_Init+0xec>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8005a60:	4b2d      	ldr	r3, [pc, #180]	; (8005b18 <MX_TIM3_Init+0xec>)
 8005a62:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005a66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a68:	4b2b      	ldr	r3, [pc, #172]	; (8005b18 <MX_TIM3_Init+0xec>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a6e:	4b2a      	ldr	r3, [pc, #168]	; (8005b18 <MX_TIM3_Init+0xec>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005a74:	4828      	ldr	r0, [pc, #160]	; (8005b18 <MX_TIM3_Init+0xec>)
 8005a76:	f003 f82b 	bl	8008ad0 <HAL_TIM_PWM_Init>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005a80:	f7fc fe30 	bl	80026e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a84:	2300      	movs	r3, #0
 8005a86:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005a8c:	f107 0320 	add.w	r3, r7, #32
 8005a90:	4619      	mov	r1, r3
 8005a92:	4821      	ldr	r0, [pc, #132]	; (8005b18 <MX_TIM3_Init+0xec>)
 8005a94:	f003 fd9c 	bl	80095d0 <HAL_TIMEx_MasterConfigSynchronization>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005a9e:	f7fc fe21 	bl	80026e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005aa2:	2360      	movs	r3, #96	; 0x60
 8005aa4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ab2:	1d3b      	adds	r3, r7, #4
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4817      	ldr	r0, [pc, #92]	; (8005b18 <MX_TIM3_Init+0xec>)
 8005aba:	f003 fa29 	bl	8008f10 <HAL_TIM_PWM_ConfigChannel>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005ac4:	f7fc fe0e 	bl	80026e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005ac8:	1d3b      	adds	r3, r7, #4
 8005aca:	2204      	movs	r2, #4
 8005acc:	4619      	mov	r1, r3
 8005ace:	4812      	ldr	r0, [pc, #72]	; (8005b18 <MX_TIM3_Init+0xec>)
 8005ad0:	f003 fa1e 	bl	8008f10 <HAL_TIM_PWM_ConfigChannel>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005ada:	f7fc fe03 	bl	80026e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005ade:	1d3b      	adds	r3, r7, #4
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	480c      	ldr	r0, [pc, #48]	; (8005b18 <MX_TIM3_Init+0xec>)
 8005ae6:	f003 fa13 	bl	8008f10 <HAL_TIM_PWM_ConfigChannel>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8005af0:	f7fc fdf8 	bl	80026e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005af4:	1d3b      	adds	r3, r7, #4
 8005af6:	220c      	movs	r2, #12
 8005af8:	4619      	mov	r1, r3
 8005afa:	4807      	ldr	r0, [pc, #28]	; (8005b18 <MX_TIM3_Init+0xec>)
 8005afc:	f003 fa08 	bl	8008f10 <HAL_TIM_PWM_ConfigChannel>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8005b06:	f7fc fded 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005b0a:	4803      	ldr	r0, [pc, #12]	; (8005b18 <MX_TIM3_Init+0xec>)
 8005b0c:	f000 f96a 	bl	8005de4 <HAL_TIM_MspPostInit>

}
 8005b10:	bf00      	nop
 8005b12:	3728      	adds	r7, #40	; 0x28
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20000cac 	.word	0x20000cac
 8005b1c:	40000400 	.word	0x40000400

08005b20 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b26:	463b      	mov	r3, r7
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005b2e:	4b15      	ldr	r3, [pc, #84]	; (8005b84 <MX_TIM6_Init+0x64>)
 8005b30:	4a15      	ldr	r2, [pc, #84]	; (8005b88 <MX_TIM6_Init+0x68>)
 8005b32:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 120;
 8005b34:	4b13      	ldr	r3, [pc, #76]	; (8005b84 <MX_TIM6_Init+0x64>)
 8005b36:	2278      	movs	r2, #120	; 0x78
 8005b38:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b3a:	4b12      	ldr	r3, [pc, #72]	; (8005b84 <MX_TIM6_Init+0x64>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8005b40:	4b10      	ldr	r3, [pc, #64]	; (8005b84 <MX_TIM6_Init+0x64>)
 8005b42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b46:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b48:	4b0e      	ldr	r3, [pc, #56]	; (8005b84 <MX_TIM6_Init+0x64>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005b4e:	480d      	ldr	r0, [pc, #52]	; (8005b84 <MX_TIM6_Init+0x64>)
 8005b50:	f002 fefe 	bl	8008950 <HAL_TIM_Base_Init>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005b5a:	f7fc fdc3 	bl	80026e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b62:	2300      	movs	r3, #0
 8005b64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005b66:	463b      	mov	r3, r7
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4806      	ldr	r0, [pc, #24]	; (8005b84 <MX_TIM6_Init+0x64>)
 8005b6c:	f003 fd30 	bl	80095d0 <HAL_TIMEx_MasterConfigSynchronization>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005b76:	f7fc fdb5 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005b7a:	bf00      	nop
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000cf4 	.word	0x20000cf4
 8005b88:	40001000 	.word	0x40001000

08005b8c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b92:	463b      	mov	r3, r7
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005b9a:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <MX_TIM7_Init+0x64>)
 8005b9c:	4a15      	ldr	r2, [pc, #84]	; (8005bf4 <MX_TIM7_Init+0x68>)
 8005b9e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 167;
 8005ba0:	4b13      	ldr	r3, [pc, #76]	; (8005bf0 <MX_TIM7_Init+0x64>)
 8005ba2:	22a7      	movs	r2, #167	; 0xa7
 8005ba4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ba6:	4b12      	ldr	r3, [pc, #72]	; (8005bf0 <MX_TIM7_Init+0x64>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 8005bac:	4b10      	ldr	r3, [pc, #64]	; (8005bf0 <MX_TIM7_Init+0x64>)
 8005bae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005bb2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bb4:	4b0e      	ldr	r3, [pc, #56]	; (8005bf0 <MX_TIM7_Init+0x64>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005bba:	480d      	ldr	r0, [pc, #52]	; (8005bf0 <MX_TIM7_Init+0x64>)
 8005bbc:	f002 fec8 	bl	8008950 <HAL_TIM_Base_Init>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8005bc6:	f7fc fd8d 	bl	80026e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005bd2:	463b      	mov	r3, r7
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4806      	ldr	r0, [pc, #24]	; (8005bf0 <MX_TIM7_Init+0x64>)
 8005bd8:	f003 fcfa 	bl	80095d0 <HAL_TIMEx_MasterConfigSynchronization>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8005be2:	f7fc fd7f 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005be6:	bf00      	nop
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000d3c 	.word	0x20000d3c
 8005bf4:	40001400 	.word	0x40001400

08005bf8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005bfc:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <MX_TIM10_Init+0x40>)
 8005bfe:	4a0f      	ldr	r2, [pc, #60]	; (8005c3c <MX_TIM10_Init+0x44>)
 8005c00:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 167;
 8005c02:	4b0d      	ldr	r3, [pc, #52]	; (8005c38 <MX_TIM10_Init+0x40>)
 8005c04:	22a7      	movs	r2, #167	; 0xa7
 8005c06:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c08:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <MX_TIM10_Init+0x40>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <MX_TIM10_Init+0x40>)
 8005c10:	f242 720f 	movw	r2, #9999	; 0x270f
 8005c14:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c16:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <MX_TIM10_Init+0x40>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c1c:	4b06      	ldr	r3, [pc, #24]	; (8005c38 <MX_TIM10_Init+0x40>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005c22:	4805      	ldr	r0, [pc, #20]	; (8005c38 <MX_TIM10_Init+0x40>)
 8005c24:	f002 fe94 	bl	8008950 <HAL_TIM_Base_Init>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8005c2e:	f7fc fd59 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005c32:	bf00      	nop
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20000d84 	.word	0x20000d84
 8005c3c:	40014400 	.word	0x40014400

08005c40 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005c44:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <MX_TIM11_Init+0x3c>)
 8005c46:	4a0e      	ldr	r2, [pc, #56]	; (8005c80 <MX_TIM11_Init+0x40>)
 8005c48:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 63;
 8005c4a:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <MX_TIM11_Init+0x3c>)
 8005c4c:	223f      	movs	r2, #63	; 0x3f
 8005c4e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c50:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <MX_TIM11_Init+0x3c>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8005c56:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <MX_TIM11_Init+0x3c>)
 8005c58:	2263      	movs	r2, #99	; 0x63
 8005c5a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c5c:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <MX_TIM11_Init+0x3c>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c62:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <MX_TIM11_Init+0x3c>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005c68:	4804      	ldr	r0, [pc, #16]	; (8005c7c <MX_TIM11_Init+0x3c>)
 8005c6a:	f002 fe71 	bl	8008950 <HAL_TIM_Base_Init>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8005c74:	f7fc fd36 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8005c78:	bf00      	nop
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000dcc 	.word	0x20000dcc
 8005c80:	40014800 	.word	0x40014800

08005c84 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c94:	d10e      	bne.n	8005cb4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	4b13      	ldr	r3, [pc, #76]	; (8005ce8 <HAL_TIM_PWM_MspInit+0x64>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	4a12      	ldr	r2, [pc, #72]	; (8005ce8 <HAL_TIM_PWM_MspInit+0x64>)
 8005ca0:	f043 0301 	orr.w	r3, r3, #1
 8005ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ca6:	4b10      	ldr	r3, [pc, #64]	; (8005ce8 <HAL_TIM_PWM_MspInit+0x64>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005cb2:	e012      	b.n	8005cda <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a0c      	ldr	r2, [pc, #48]	; (8005cec <HAL_TIM_PWM_MspInit+0x68>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d10d      	bne.n	8005cda <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60bb      	str	r3, [r7, #8]
 8005cc2:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <HAL_TIM_PWM_MspInit+0x64>)
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	4a08      	ldr	r2, [pc, #32]	; (8005ce8 <HAL_TIM_PWM_MspInit+0x64>)
 8005cc8:	f043 0302 	orr.w	r3, r3, #2
 8005ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8005cce:	4b06      	ldr	r3, [pc, #24]	; (8005ce8 <HAL_TIM_PWM_MspInit+0x64>)
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	60bb      	str	r3, [r7, #8]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
}
 8005cda:	bf00      	nop
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	40000400 	.word	0x40000400

08005cf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a34      	ldr	r2, [pc, #208]	; (8005dd0 <HAL_TIM_Base_MspInit+0xe0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d116      	bne.n	8005d30 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	4b33      	ldr	r3, [pc, #204]	; (8005dd4 <HAL_TIM_Base_MspInit+0xe4>)
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	4a32      	ldr	r2, [pc, #200]	; (8005dd4 <HAL_TIM_Base_MspInit+0xe4>)
 8005d0c:	f043 0310 	orr.w	r3, r3, #16
 8005d10:	6413      	str	r3, [r2, #64]	; 0x40
 8005d12:	4b30      	ldr	r3, [pc, #192]	; (8005dd4 <HAL_TIM_Base_MspInit+0xe4>)
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	f003 0310 	and.w	r3, r3, #16
 8005d1a:	617b      	str	r3, [r7, #20]
 8005d1c:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2100      	movs	r1, #0
 8005d22:	2036      	movs	r0, #54	; 0x36
 8005d24:	f000 ff89 	bl	8006c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005d28:	2036      	movs	r0, #54	; 0x36
 8005d2a:	f000 ffa2 	bl	8006c72 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8005d2e:	e04a      	b.n	8005dc6 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM7)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a28      	ldr	r2, [pc, #160]	; (8005dd8 <HAL_TIM_Base_MspInit+0xe8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d116      	bne.n	8005d68 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	4b25      	ldr	r3, [pc, #148]	; (8005dd4 <HAL_TIM_Base_MspInit+0xe4>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	4a24      	ldr	r2, [pc, #144]	; (8005dd4 <HAL_TIM_Base_MspInit+0xe4>)
 8005d44:	f043 0320 	orr.w	r3, r3, #32
 8005d48:	6413      	str	r3, [r2, #64]	; 0x40
 8005d4a:	4b22      	ldr	r3, [pc, #136]	; (8005dd4 <HAL_TIM_Base_MspInit+0xe4>)
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	f003 0320 	and.w	r3, r3, #32
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005d56:	2200      	movs	r2, #0
 8005d58:	2100      	movs	r1, #0
 8005d5a:	2037      	movs	r0, #55	; 0x37
 8005d5c:	f000 ff6d 	bl	8006c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005d60:	2037      	movs	r0, #55	; 0x37
 8005d62:	f000 ff86 	bl	8006c72 <HAL_NVIC_EnableIRQ>
}
 8005d66:	e02e      	b.n	8005dc6 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM10)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1b      	ldr	r2, [pc, #108]	; (8005ddc <HAL_TIM_Base_MspInit+0xec>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d116      	bne.n	8005da0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	4b17      	ldr	r3, [pc, #92]	; (8005dd4 <HAL_TIM_Base_MspInit+0xe4>)
 8005d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7a:	4a16      	ldr	r2, [pc, #88]	; (8005dd4 <HAL_TIM_Base_MspInit+0xe4>)
 8005d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d80:	6453      	str	r3, [r2, #68]	; 0x44
 8005d82:	4b14      	ldr	r3, [pc, #80]	; (8005dd4 <HAL_TIM_Base_MspInit+0xe4>)
 8005d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005d8e:	2200      	movs	r2, #0
 8005d90:	2100      	movs	r1, #0
 8005d92:	2019      	movs	r0, #25
 8005d94:	f000 ff51 	bl	8006c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005d98:	2019      	movs	r0, #25
 8005d9a:	f000 ff6a 	bl	8006c72 <HAL_NVIC_EnableIRQ>
}
 8005d9e:	e012      	b.n	8005dc6 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM11)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a0e      	ldr	r2, [pc, #56]	; (8005de0 <HAL_TIM_Base_MspInit+0xf0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d10d      	bne.n	8005dc6 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005daa:	2300      	movs	r3, #0
 8005dac:	60bb      	str	r3, [r7, #8]
 8005dae:	4b09      	ldr	r3, [pc, #36]	; (8005dd4 <HAL_TIM_Base_MspInit+0xe4>)
 8005db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db2:	4a08      	ldr	r2, [pc, #32]	; (8005dd4 <HAL_TIM_Base_MspInit+0xe4>)
 8005db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005db8:	6453      	str	r3, [r2, #68]	; 0x44
 8005dba:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <HAL_TIM_Base_MspInit+0xe4>)
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dc2:	60bb      	str	r3, [r7, #8]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
}
 8005dc6:	bf00      	nop
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40001000 	.word	0x40001000
 8005dd4:	40023800 	.word	0x40023800
 8005dd8:	40001400 	.word	0x40001400
 8005ddc:	40014400 	.word	0x40014400
 8005de0:	40014800 	.word	0x40014800

08005de4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08a      	sub	sp, #40	; 0x28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dec:	f107 0314 	add.w	r3, r7, #20
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	605a      	str	r2, [r3, #4]
 8005df6:	609a      	str	r2, [r3, #8]
 8005df8:	60da      	str	r2, [r3, #12]
 8005dfa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e04:	d11e      	bne.n	8005e44 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e06:	2300      	movs	r3, #0
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	4b22      	ldr	r3, [pc, #136]	; (8005e94 <HAL_TIM_MspPostInit+0xb0>)
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0e:	4a21      	ldr	r2, [pc, #132]	; (8005e94 <HAL_TIM_MspPostInit+0xb0>)
 8005e10:	f043 0301 	orr.w	r3, r3, #1
 8005e14:	6313      	str	r3, [r2, #48]	; 0x30
 8005e16:	4b1f      	ldr	r3, [pc, #124]	; (8005e94 <HAL_TIM_MspPostInit+0xb0>)
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	613b      	str	r3, [r7, #16]
 8005e20:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005e22:	2303      	movs	r3, #3
 8005e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e26:	2302      	movs	r3, #2
 8005e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005e32:	2301      	movs	r3, #1
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e36:	f107 0314 	add.w	r3, r7, #20
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4816      	ldr	r0, [pc, #88]	; (8005e98 <HAL_TIM_MspPostInit+0xb4>)
 8005e3e:	f001 fba1 	bl	8007584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005e42:	e023      	b.n	8005e8c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a14      	ldr	r2, [pc, #80]	; (8005e9c <HAL_TIM_MspPostInit+0xb8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d11e      	bne.n	8005e8c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <HAL_TIM_MspPostInit+0xb0>)
 8005e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e56:	4a0f      	ldr	r2, [pc, #60]	; (8005e94 <HAL_TIM_MspPostInit+0xb0>)
 8005e58:	f043 0304 	orr.w	r3, r3, #4
 8005e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e5e:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <HAL_TIM_MspPostInit+0xb0>)
 8005e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005e6a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e70:	2302      	movs	r3, #2
 8005e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e80:	f107 0314 	add.w	r3, r7, #20
 8005e84:	4619      	mov	r1, r3
 8005e86:	4806      	ldr	r0, [pc, #24]	; (8005ea0 <HAL_TIM_MspPostInit+0xbc>)
 8005e88:	f001 fb7c 	bl	8007584 <HAL_GPIO_Init>
}
 8005e8c:	bf00      	nop
 8005e8e:	3728      	adds	r7, #40	; 0x28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	40023800 	.word	0x40023800
 8005e98:	40020000 	.word	0x40020000
 8005e9c:	40000400 	.word	0x40000400
 8005ea0:	40020800 	.word	0x40020800

08005ea4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005ea8:	4b11      	ldr	r3, [pc, #68]	; (8005ef0 <MX_USART1_UART_Init+0x4c>)
 8005eaa:	4a12      	ldr	r2, [pc, #72]	; (8005ef4 <MX_USART1_UART_Init+0x50>)
 8005eac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8005eae:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <MX_USART1_UART_Init+0x4c>)
 8005eb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005eb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005eb6:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <MX_USART1_UART_Init+0x4c>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005ebc:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <MX_USART1_UART_Init+0x4c>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005ec2:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <MX_USART1_UART_Init+0x4c>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005ec8:	4b09      	ldr	r3, [pc, #36]	; (8005ef0 <MX_USART1_UART_Init+0x4c>)
 8005eca:	220c      	movs	r2, #12
 8005ecc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ece:	4b08      	ldr	r3, [pc, #32]	; (8005ef0 <MX_USART1_UART_Init+0x4c>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ed4:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <MX_USART1_UART_Init+0x4c>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005eda:	4805      	ldr	r0, [pc, #20]	; (8005ef0 <MX_USART1_UART_Init+0x4c>)
 8005edc:	f003 fc08 	bl	80096f0 <HAL_UART_Init>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005ee6:	f7fc fbfd 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005eea:	bf00      	nop
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000e14 	.word	0x20000e14
 8005ef4:	40011000 	.word	0x40011000

08005ef8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005efc:	4b11      	ldr	r3, [pc, #68]	; (8005f44 <MX_USART2_UART_Init+0x4c>)
 8005efe:	4a12      	ldr	r2, [pc, #72]	; (8005f48 <MX_USART2_UART_Init+0x50>)
 8005f00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005f02:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <MX_USART2_UART_Init+0x4c>)
 8005f04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005f08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005f0a:	4b0e      	ldr	r3, [pc, #56]	; (8005f44 <MX_USART2_UART_Init+0x4c>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005f10:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <MX_USART2_UART_Init+0x4c>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005f16:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <MX_USART2_UART_Init+0x4c>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005f1c:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <MX_USART2_UART_Init+0x4c>)
 8005f1e:	220c      	movs	r2, #12
 8005f20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f22:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <MX_USART2_UART_Init+0x4c>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f28:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <MX_USART2_UART_Init+0x4c>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005f2e:	4805      	ldr	r0, [pc, #20]	; (8005f44 <MX_USART2_UART_Init+0x4c>)
 8005f30:	f003 fbde 	bl	80096f0 <HAL_UART_Init>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005f3a:	f7fc fbd3 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005f3e:	bf00      	nop
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000e58 	.word	0x20000e58
 8005f48:	40004400 	.word	0x40004400

08005f4c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005f50:	4b10      	ldr	r3, [pc, #64]	; (8005f94 <MX_USART3_UART_Init+0x48>)
 8005f52:	4a11      	ldr	r2, [pc, #68]	; (8005f98 <MX_USART3_UART_Init+0x4c>)
 8005f54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 8005f56:	4b0f      	ldr	r3, [pc, #60]	; (8005f94 <MX_USART3_UART_Init+0x48>)
 8005f58:	4a10      	ldr	r2, [pc, #64]	; (8005f9c <MX_USART3_UART_Init+0x50>)
 8005f5a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005f5c:	4b0d      	ldr	r3, [pc, #52]	; (8005f94 <MX_USART3_UART_Init+0x48>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005f62:	4b0c      	ldr	r3, [pc, #48]	; (8005f94 <MX_USART3_UART_Init+0x48>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005f68:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <MX_USART3_UART_Init+0x48>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005f6e:	4b09      	ldr	r3, [pc, #36]	; (8005f94 <MX_USART3_UART_Init+0x48>)
 8005f70:	220c      	movs	r2, #12
 8005f72:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f74:	4b07      	ldr	r3, [pc, #28]	; (8005f94 <MX_USART3_UART_Init+0x48>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f7a:	4b06      	ldr	r3, [pc, #24]	; (8005f94 <MX_USART3_UART_Init+0x48>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005f80:	4804      	ldr	r0, [pc, #16]	; (8005f94 <MX_USART3_UART_Init+0x48>)
 8005f82:	f003 fbb5 	bl	80096f0 <HAL_UART_Init>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8005f8c:	f7fc fbaa 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005f90:	bf00      	nop
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20000e9c 	.word	0x20000e9c
 8005f98:	40004800 	.word	0x40004800
 8005f9c:	0007a120 	.word	0x0007a120

08005fa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08e      	sub	sp, #56	; 0x38
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	605a      	str	r2, [r3, #4]
 8005fb2:	609a      	str	r2, [r3, #8]
 8005fb4:	60da      	str	r2, [r3, #12]
 8005fb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a99      	ldr	r2, [pc, #612]	; (8006224 <HAL_UART_MspInit+0x284>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	f040 8096 	bne.w	80060f0 <HAL_UART_MspInit+0x150>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	623b      	str	r3, [r7, #32]
 8005fc8:	4b97      	ldr	r3, [pc, #604]	; (8006228 <HAL_UART_MspInit+0x288>)
 8005fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fcc:	4a96      	ldr	r2, [pc, #600]	; (8006228 <HAL_UART_MspInit+0x288>)
 8005fce:	f043 0310 	orr.w	r3, r3, #16
 8005fd2:	6453      	str	r3, [r2, #68]	; 0x44
 8005fd4:	4b94      	ldr	r3, [pc, #592]	; (8006228 <HAL_UART_MspInit+0x288>)
 8005fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd8:	f003 0310 	and.w	r3, r3, #16
 8005fdc:	623b      	str	r3, [r7, #32]
 8005fde:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	61fb      	str	r3, [r7, #28]
 8005fe4:	4b90      	ldr	r3, [pc, #576]	; (8006228 <HAL_UART_MspInit+0x288>)
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe8:	4a8f      	ldr	r2, [pc, #572]	; (8006228 <HAL_UART_MspInit+0x288>)
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	6313      	str	r3, [r2, #48]	; 0x30
 8005ff0:	4b8d      	ldr	r3, [pc, #564]	; (8006228 <HAL_UART_MspInit+0x288>)
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	61fb      	str	r3, [r7, #28]
 8005ffa:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005ffc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006002:	2302      	movs	r3, #2
 8006004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006006:	2300      	movs	r3, #0
 8006008:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800600a:	2303      	movs	r3, #3
 800600c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800600e:	2307      	movs	r3, #7
 8006010:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006016:	4619      	mov	r1, r3
 8006018:	4884      	ldr	r0, [pc, #528]	; (800622c <HAL_UART_MspInit+0x28c>)
 800601a:	f001 fab3 	bl	8007584 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800601e:	4b84      	ldr	r3, [pc, #528]	; (8006230 <HAL_UART_MspInit+0x290>)
 8006020:	4a84      	ldr	r2, [pc, #528]	; (8006234 <HAL_UART_MspInit+0x294>)
 8006022:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006024:	4b82      	ldr	r3, [pc, #520]	; (8006230 <HAL_UART_MspInit+0x290>)
 8006026:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800602a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800602c:	4b80      	ldr	r3, [pc, #512]	; (8006230 <HAL_UART_MspInit+0x290>)
 800602e:	2200      	movs	r2, #0
 8006030:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006032:	4b7f      	ldr	r3, [pc, #508]	; (8006230 <HAL_UART_MspInit+0x290>)
 8006034:	2200      	movs	r2, #0
 8006036:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006038:	4b7d      	ldr	r3, [pc, #500]	; (8006230 <HAL_UART_MspInit+0x290>)
 800603a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800603e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006040:	4b7b      	ldr	r3, [pc, #492]	; (8006230 <HAL_UART_MspInit+0x290>)
 8006042:	2200      	movs	r2, #0
 8006044:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006046:	4b7a      	ldr	r3, [pc, #488]	; (8006230 <HAL_UART_MspInit+0x290>)
 8006048:	2200      	movs	r2, #0
 800604a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800604c:	4b78      	ldr	r3, [pc, #480]	; (8006230 <HAL_UART_MspInit+0x290>)
 800604e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006052:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006054:	4b76      	ldr	r3, [pc, #472]	; (8006230 <HAL_UART_MspInit+0x290>)
 8006056:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800605a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800605c:	4b74      	ldr	r3, [pc, #464]	; (8006230 <HAL_UART_MspInit+0x290>)
 800605e:	2200      	movs	r2, #0
 8006060:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006062:	4873      	ldr	r0, [pc, #460]	; (8006230 <HAL_UART_MspInit+0x290>)
 8006064:	f000 fe2e 	bl	8006cc4 <HAL_DMA_Init>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800606e:	f7fc fb39 	bl	80026e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a6e      	ldr	r2, [pc, #440]	; (8006230 <HAL_UART_MspInit+0x290>)
 8006076:	639a      	str	r2, [r3, #56]	; 0x38
 8006078:	4a6d      	ldr	r2, [pc, #436]	; (8006230 <HAL_UART_MspInit+0x290>)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800607e:	4b6e      	ldr	r3, [pc, #440]	; (8006238 <HAL_UART_MspInit+0x298>)
 8006080:	4a6e      	ldr	r2, [pc, #440]	; (800623c <HAL_UART_MspInit+0x29c>)
 8006082:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8006084:	4b6c      	ldr	r3, [pc, #432]	; (8006238 <HAL_UART_MspInit+0x298>)
 8006086:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800608a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800608c:	4b6a      	ldr	r3, [pc, #424]	; (8006238 <HAL_UART_MspInit+0x298>)
 800608e:	2240      	movs	r2, #64	; 0x40
 8006090:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006092:	4b69      	ldr	r3, [pc, #420]	; (8006238 <HAL_UART_MspInit+0x298>)
 8006094:	2200      	movs	r2, #0
 8006096:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006098:	4b67      	ldr	r3, [pc, #412]	; (8006238 <HAL_UART_MspInit+0x298>)
 800609a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800609e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060a0:	4b65      	ldr	r3, [pc, #404]	; (8006238 <HAL_UART_MspInit+0x298>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060a6:	4b64      	ldr	r3, [pc, #400]	; (8006238 <HAL_UART_MspInit+0x298>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80060ac:	4b62      	ldr	r3, [pc, #392]	; (8006238 <HAL_UART_MspInit+0x298>)
 80060ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060b2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80060b4:	4b60      	ldr	r3, [pc, #384]	; (8006238 <HAL_UART_MspInit+0x298>)
 80060b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060ba:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80060bc:	4b5e      	ldr	r3, [pc, #376]	; (8006238 <HAL_UART_MspInit+0x298>)
 80060be:	2200      	movs	r2, #0
 80060c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80060c2:	485d      	ldr	r0, [pc, #372]	; (8006238 <HAL_UART_MspInit+0x298>)
 80060c4:	f000 fdfe 	bl	8006cc4 <HAL_DMA_Init>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 80060ce:	f7fc fb09 	bl	80026e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a58      	ldr	r2, [pc, #352]	; (8006238 <HAL_UART_MspInit+0x298>)
 80060d6:	635a      	str	r2, [r3, #52]	; 0x34
 80060d8:	4a57      	ldr	r2, [pc, #348]	; (8006238 <HAL_UART_MspInit+0x298>)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80060de:	2200      	movs	r2, #0
 80060e0:	2100      	movs	r1, #0
 80060e2:	2025      	movs	r0, #37	; 0x25
 80060e4:	f000 fda9 	bl	8006c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80060e8:	2025      	movs	r0, #37	; 0x25
 80060ea:	f000 fdc2 	bl	8006c72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80060ee:	e101      	b.n	80062f4 <HAL_UART_MspInit+0x354>
  else if(uartHandle->Instance==USART2)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a52      	ldr	r2, [pc, #328]	; (8006240 <HAL_UART_MspInit+0x2a0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	f040 80ac 	bne.w	8006254 <HAL_UART_MspInit+0x2b4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80060fc:	2300      	movs	r3, #0
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	4b49      	ldr	r3, [pc, #292]	; (8006228 <HAL_UART_MspInit+0x288>)
 8006102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006104:	4a48      	ldr	r2, [pc, #288]	; (8006228 <HAL_UART_MspInit+0x288>)
 8006106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800610a:	6413      	str	r3, [r2, #64]	; 0x40
 800610c:	4b46      	ldr	r3, [pc, #280]	; (8006228 <HAL_UART_MspInit+0x288>)
 800610e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006114:	61bb      	str	r3, [r7, #24]
 8006116:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006118:	2300      	movs	r3, #0
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	4b42      	ldr	r3, [pc, #264]	; (8006228 <HAL_UART_MspInit+0x288>)
 800611e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006120:	4a41      	ldr	r2, [pc, #260]	; (8006228 <HAL_UART_MspInit+0x288>)
 8006122:	f043 0301 	orr.w	r3, r3, #1
 8006126:	6313      	str	r3, [r2, #48]	; 0x30
 8006128:	4b3f      	ldr	r3, [pc, #252]	; (8006228 <HAL_UART_MspInit+0x288>)
 800612a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006134:	230c      	movs	r3, #12
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006138:	2302      	movs	r3, #2
 800613a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800613c:	2300      	movs	r3, #0
 800613e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006140:	2303      	movs	r3, #3
 8006142:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006144:	2307      	movs	r3, #7
 8006146:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800614c:	4619      	mov	r1, r3
 800614e:	4837      	ldr	r0, [pc, #220]	; (800622c <HAL_UART_MspInit+0x28c>)
 8006150:	f001 fa18 	bl	8007584 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006154:	4b3b      	ldr	r3, [pc, #236]	; (8006244 <HAL_UART_MspInit+0x2a4>)
 8006156:	4a3c      	ldr	r2, [pc, #240]	; (8006248 <HAL_UART_MspInit+0x2a8>)
 8006158:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800615a:	4b3a      	ldr	r3, [pc, #232]	; (8006244 <HAL_UART_MspInit+0x2a4>)
 800615c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006160:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006162:	4b38      	ldr	r3, [pc, #224]	; (8006244 <HAL_UART_MspInit+0x2a4>)
 8006164:	2240      	movs	r2, #64	; 0x40
 8006166:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006168:	4b36      	ldr	r3, [pc, #216]	; (8006244 <HAL_UART_MspInit+0x2a4>)
 800616a:	2200      	movs	r2, #0
 800616c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800616e:	4b35      	ldr	r3, [pc, #212]	; (8006244 <HAL_UART_MspInit+0x2a4>)
 8006170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006174:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006176:	4b33      	ldr	r3, [pc, #204]	; (8006244 <HAL_UART_MspInit+0x2a4>)
 8006178:	2200      	movs	r2, #0
 800617a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800617c:	4b31      	ldr	r3, [pc, #196]	; (8006244 <HAL_UART_MspInit+0x2a4>)
 800617e:	2200      	movs	r2, #0
 8006180:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006182:	4b30      	ldr	r3, [pc, #192]	; (8006244 <HAL_UART_MspInit+0x2a4>)
 8006184:	2200      	movs	r2, #0
 8006186:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006188:	4b2e      	ldr	r3, [pc, #184]	; (8006244 <HAL_UART_MspInit+0x2a4>)
 800618a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800618e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006190:	4b2c      	ldr	r3, [pc, #176]	; (8006244 <HAL_UART_MspInit+0x2a4>)
 8006192:	2200      	movs	r2, #0
 8006194:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006196:	482b      	ldr	r0, [pc, #172]	; (8006244 <HAL_UART_MspInit+0x2a4>)
 8006198:	f000 fd94 	bl	8006cc4 <HAL_DMA_Init>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <HAL_UART_MspInit+0x206>
      Error_Handler();
 80061a2:	f7fc fa9f 	bl	80026e4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a26      	ldr	r2, [pc, #152]	; (8006244 <HAL_UART_MspInit+0x2a4>)
 80061aa:	635a      	str	r2, [r3, #52]	; 0x34
 80061ac:	4a25      	ldr	r2, [pc, #148]	; (8006244 <HAL_UART_MspInit+0x2a4>)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80061b2:	4b26      	ldr	r3, [pc, #152]	; (800624c <HAL_UART_MspInit+0x2ac>)
 80061b4:	4a26      	ldr	r2, [pc, #152]	; (8006250 <HAL_UART_MspInit+0x2b0>)
 80061b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80061b8:	4b24      	ldr	r3, [pc, #144]	; (800624c <HAL_UART_MspInit+0x2ac>)
 80061ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80061be:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80061c0:	4b22      	ldr	r3, [pc, #136]	; (800624c <HAL_UART_MspInit+0x2ac>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061c6:	4b21      	ldr	r3, [pc, #132]	; (800624c <HAL_UART_MspInit+0x2ac>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80061cc:	4b1f      	ldr	r3, [pc, #124]	; (800624c <HAL_UART_MspInit+0x2ac>)
 80061ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061d4:	4b1d      	ldr	r3, [pc, #116]	; (800624c <HAL_UART_MspInit+0x2ac>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061da:	4b1c      	ldr	r3, [pc, #112]	; (800624c <HAL_UART_MspInit+0x2ac>)
 80061dc:	2200      	movs	r2, #0
 80061de:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80061e0:	4b1a      	ldr	r3, [pc, #104]	; (800624c <HAL_UART_MspInit+0x2ac>)
 80061e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061e6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80061e8:	4b18      	ldr	r3, [pc, #96]	; (800624c <HAL_UART_MspInit+0x2ac>)
 80061ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80061ee:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80061f0:	4b16      	ldr	r3, [pc, #88]	; (800624c <HAL_UART_MspInit+0x2ac>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80061f6:	4815      	ldr	r0, [pc, #84]	; (800624c <HAL_UART_MspInit+0x2ac>)
 80061f8:	f000 fd64 	bl	8006cc4 <HAL_DMA_Init>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <HAL_UART_MspInit+0x266>
      Error_Handler();
 8006202:	f7fc fa6f 	bl	80026e4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a10      	ldr	r2, [pc, #64]	; (800624c <HAL_UART_MspInit+0x2ac>)
 800620a:	639a      	str	r2, [r3, #56]	; 0x38
 800620c:	4a0f      	ldr	r2, [pc, #60]	; (800624c <HAL_UART_MspInit+0x2ac>)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006212:	2200      	movs	r2, #0
 8006214:	2100      	movs	r1, #0
 8006216:	2026      	movs	r0, #38	; 0x26
 8006218:	f000 fd0f 	bl	8006c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800621c:	2026      	movs	r0, #38	; 0x26
 800621e:	f000 fd28 	bl	8006c72 <HAL_NVIC_EnableIRQ>
}
 8006222:	e067      	b.n	80062f4 <HAL_UART_MspInit+0x354>
 8006224:	40011000 	.word	0x40011000
 8006228:	40023800 	.word	0x40023800
 800622c:	40020000 	.word	0x40020000
 8006230:	20000ee0 	.word	0x20000ee0
 8006234:	40026440 	.word	0x40026440
 8006238:	20000f40 	.word	0x20000f40
 800623c:	400264b8 	.word	0x400264b8
 8006240:	40004400 	.word	0x40004400
 8006244:	20000fa0 	.word	0x20000fa0
 8006248:	400260a0 	.word	0x400260a0
 800624c:	20001000 	.word	0x20001000
 8006250:	40026088 	.word	0x40026088
  else if(uartHandle->Instance==USART3)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a28      	ldr	r2, [pc, #160]	; (80062fc <HAL_UART_MspInit+0x35c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d14a      	bne.n	80062f4 <HAL_UART_MspInit+0x354>
    __HAL_RCC_USART3_CLK_ENABLE();
 800625e:	2300      	movs	r3, #0
 8006260:	613b      	str	r3, [r7, #16]
 8006262:	4b27      	ldr	r3, [pc, #156]	; (8006300 <HAL_UART_MspInit+0x360>)
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	4a26      	ldr	r2, [pc, #152]	; (8006300 <HAL_UART_MspInit+0x360>)
 8006268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800626c:	6413      	str	r3, [r2, #64]	; 0x40
 800626e:	4b24      	ldr	r3, [pc, #144]	; (8006300 <HAL_UART_MspInit+0x360>)
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006276:	613b      	str	r3, [r7, #16]
 8006278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	4b20      	ldr	r3, [pc, #128]	; (8006300 <HAL_UART_MspInit+0x360>)
 8006280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006282:	4a1f      	ldr	r2, [pc, #124]	; (8006300 <HAL_UART_MspInit+0x360>)
 8006284:	f043 0304 	orr.w	r3, r3, #4
 8006288:	6313      	str	r3, [r2, #48]	; 0x30
 800628a:	4b1d      	ldr	r3, [pc, #116]	; (8006300 <HAL_UART_MspInit+0x360>)
 800628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628e:	f003 0304 	and.w	r3, r3, #4
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006296:	2300      	movs	r3, #0
 8006298:	60bb      	str	r3, [r7, #8]
 800629a:	4b19      	ldr	r3, [pc, #100]	; (8006300 <HAL_UART_MspInit+0x360>)
 800629c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629e:	4a18      	ldr	r2, [pc, #96]	; (8006300 <HAL_UART_MspInit+0x360>)
 80062a0:	f043 0302 	orr.w	r3, r3, #2
 80062a4:	6313      	str	r3, [r2, #48]	; 0x30
 80062a6:	4b16      	ldr	r3, [pc, #88]	; (8006300 <HAL_UART_MspInit+0x360>)
 80062a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	60bb      	str	r3, [r7, #8]
 80062b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80062b2:	2320      	movs	r3, #32
 80062b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b6:	2302      	movs	r3, #2
 80062b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ba:	2300      	movs	r3, #0
 80062bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062be:	2303      	movs	r3, #3
 80062c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80062c2:	2307      	movs	r3, #7
 80062c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062ca:	4619      	mov	r1, r3
 80062cc:	480d      	ldr	r0, [pc, #52]	; (8006304 <HAL_UART_MspInit+0x364>)
 80062ce:	f001 f959 	bl	8007584 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80062d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062d8:	2302      	movs	r3, #2
 80062da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062dc:	2300      	movs	r3, #0
 80062de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062e0:	2303      	movs	r3, #3
 80062e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80062e4:	2307      	movs	r3, #7
 80062e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062ec:	4619      	mov	r1, r3
 80062ee:	4806      	ldr	r0, [pc, #24]	; (8006308 <HAL_UART_MspInit+0x368>)
 80062f0:	f001 f948 	bl	8007584 <HAL_GPIO_Init>
}
 80062f4:	bf00      	nop
 80062f6:	3738      	adds	r7, #56	; 0x38
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	40004800 	.word	0x40004800
 8006300:	40023800 	.word	0x40023800
 8006304:	40020800 	.word	0x40020800
 8006308:	40020400 	.word	0x40020400

0800630c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a28      	ldr	r2, [pc, #160]	; (80063bc <HAL_UART_MspDeInit+0xb0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d118      	bne.n	8006350 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800631e:	4b28      	ldr	r3, [pc, #160]	; (80063c0 <HAL_UART_MspDeInit+0xb4>)
 8006320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006322:	4a27      	ldr	r2, [pc, #156]	; (80063c0 <HAL_UART_MspDeInit+0xb4>)
 8006324:	f023 0310 	bic.w	r3, r3, #16
 8006328:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800632a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800632e:	4825      	ldr	r0, [pc, #148]	; (80063c4 <HAL_UART_MspDeInit+0xb8>)
 8006330:	f001 fabc 	bl	80078ac <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	4618      	mov	r0, r3
 800633a:	f000 fd71 	bl	8006e20 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006342:	4618      	mov	r0, r3
 8006344:	f000 fd6c 	bl	8006e20 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8006348:	2025      	movs	r0, #37	; 0x25
 800634a:	f000 fca0 	bl	8006c8e <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 800634e:	e030      	b.n	80063b2 <HAL_UART_MspDeInit+0xa6>
  else if(uartHandle->Instance==USART2)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a1c      	ldr	r2, [pc, #112]	; (80063c8 <HAL_UART_MspDeInit+0xbc>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d117      	bne.n	800638a <HAL_UART_MspDeInit+0x7e>
    __HAL_RCC_USART2_CLK_DISABLE();
 800635a:	4b19      	ldr	r3, [pc, #100]	; (80063c0 <HAL_UART_MspDeInit+0xb4>)
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	4a18      	ldr	r2, [pc, #96]	; (80063c0 <HAL_UART_MspDeInit+0xb4>)
 8006360:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006364:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8006366:	210c      	movs	r1, #12
 8006368:	4816      	ldr	r0, [pc, #88]	; (80063c4 <HAL_UART_MspDeInit+0xb8>)
 800636a:	f001 fa9f 	bl	80078ac <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006372:	4618      	mov	r0, r3
 8006374:	f000 fd54 	bl	8006e20 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	4618      	mov	r0, r3
 800637e:	f000 fd4f 	bl	8006e20 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8006382:	2026      	movs	r0, #38	; 0x26
 8006384:	f000 fc83 	bl	8006c8e <HAL_NVIC_DisableIRQ>
}
 8006388:	e013      	b.n	80063b2 <HAL_UART_MspDeInit+0xa6>
  else if(uartHandle->Instance==USART3)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a0f      	ldr	r2, [pc, #60]	; (80063cc <HAL_UART_MspDeInit+0xc0>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d10e      	bne.n	80063b2 <HAL_UART_MspDeInit+0xa6>
    __HAL_RCC_USART3_CLK_DISABLE();
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <HAL_UART_MspDeInit+0xb4>)
 8006396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006398:	4a09      	ldr	r2, [pc, #36]	; (80063c0 <HAL_UART_MspDeInit+0xb4>)
 800639a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800639e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_5);
 80063a0:	2120      	movs	r1, #32
 80063a2:	480b      	ldr	r0, [pc, #44]	; (80063d0 <HAL_UART_MspDeInit+0xc4>)
 80063a4:	f001 fa82 	bl	80078ac <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80063a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063ac:	4809      	ldr	r0, [pc, #36]	; (80063d4 <HAL_UART_MspDeInit+0xc8>)
 80063ae:	f001 fa7d 	bl	80078ac <HAL_GPIO_DeInit>
}
 80063b2:	bf00      	nop
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	40011000 	.word	0x40011000
 80063c0:	40023800 	.word	0x40023800
 80063c4:	40020000 	.word	0x40020000
 80063c8:	40004400 	.word	0x40004400
 80063cc:	40004800 	.word	0x40004800
 80063d0:	40020800 	.word	0x40020800
 80063d4:	40020400 	.word	0x40020400

080063d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80063d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006410 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80063dc:	480d      	ldr	r0, [pc, #52]	; (8006414 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80063de:	490e      	ldr	r1, [pc, #56]	; (8006418 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80063e0:	4a0e      	ldr	r2, [pc, #56]	; (800641c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80063e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80063e4:	e002      	b.n	80063ec <LoopCopyDataInit>

080063e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80063e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80063e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80063ea:	3304      	adds	r3, #4

080063ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80063ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80063ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80063f0:	d3f9      	bcc.n	80063e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80063f2:	4a0b      	ldr	r2, [pc, #44]	; (8006420 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80063f4:	4c0b      	ldr	r4, [pc, #44]	; (8006424 <LoopFillZerobss+0x26>)
  movs r3, #0
 80063f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80063f8:	e001      	b.n	80063fe <LoopFillZerobss>

080063fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80063fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80063fc:	3204      	adds	r2, #4

080063fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80063fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006400:	d3fb      	bcc.n	80063fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006402:	f7ff fa9d 	bl	8005940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006406:	f004 fc9f 	bl	800ad48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800640a:	f7fc f8d9 	bl	80025c0 <main>
  bx  lr    
 800640e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006410:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006418:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800641c:	0800b488 	.word	0x0800b488
  ldr r2, =_sbss
 8006420:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8006424:	20001074 	.word	0x20001074

08006428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006428:	e7fe      	b.n	8006428 <ADC_IRQHandler>
	...

0800642c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006430:	4b0e      	ldr	r3, [pc, #56]	; (800646c <HAL_Init+0x40>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a0d      	ldr	r2, [pc, #52]	; (800646c <HAL_Init+0x40>)
 8006436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800643a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800643c:	4b0b      	ldr	r3, [pc, #44]	; (800646c <HAL_Init+0x40>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a0a      	ldr	r2, [pc, #40]	; (800646c <HAL_Init+0x40>)
 8006442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006446:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006448:	4b08      	ldr	r3, [pc, #32]	; (800646c <HAL_Init+0x40>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a07      	ldr	r2, [pc, #28]	; (800646c <HAL_Init+0x40>)
 800644e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006454:	2003      	movs	r0, #3
 8006456:	f000 fbe5 	bl	8006c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800645a:	2000      	movs	r0, #0
 800645c:	f000 f808 	bl	8006470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006460:	f7ff f932 	bl	80056c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	40023c00 	.word	0x40023c00

08006470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006478:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <HAL_InitTick+0x54>)
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	4b12      	ldr	r3, [pc, #72]	; (80064c8 <HAL_InitTick+0x58>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	4619      	mov	r1, r3
 8006482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006486:	fbb3 f3f1 	udiv	r3, r3, r1
 800648a:	fbb2 f3f3 	udiv	r3, r2, r3
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fc0b 	bl	8006caa <HAL_SYSTICK_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e00e      	b.n	80064bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b0f      	cmp	r3, #15
 80064a2:	d80a      	bhi.n	80064ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064a4:	2200      	movs	r2, #0
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	f000 fbc5 	bl	8006c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80064b0:	4a06      	ldr	r2, [pc, #24]	; (80064cc <HAL_InitTick+0x5c>)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e000      	b.n	80064bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20000010 	.word	0x20000010
 80064c8:	20000018 	.word	0x20000018
 80064cc:	20000014 	.word	0x20000014

080064d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064d4:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <HAL_IncTick+0x20>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <HAL_IncTick+0x24>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4413      	add	r3, r2
 80064e0:	4a04      	ldr	r2, [pc, #16]	; (80064f4 <HAL_IncTick+0x24>)
 80064e2:	6013      	str	r3, [r2, #0]
}
 80064e4:	bf00      	nop
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	20000018 	.word	0x20000018
 80064f4:	20001060 	.word	0x20001060

080064f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
  return uwTick;
 80064fc:	4b03      	ldr	r3, [pc, #12]	; (800650c <HAL_GetTick+0x14>)
 80064fe:	681b      	ldr	r3, [r3, #0]
}
 8006500:	4618      	mov	r0, r3
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	20001060 	.word	0x20001060

08006510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006518:	f7ff ffee 	bl	80064f8 <HAL_GetTick>
 800651c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d005      	beq.n	8006536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800652a:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <HAL_Delay+0x44>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4413      	add	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006536:	bf00      	nop
 8006538:	f7ff ffde 	bl	80064f8 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	429a      	cmp	r2, r3
 8006546:	d8f7      	bhi.n	8006538 <HAL_Delay+0x28>
  {
  }
}
 8006548:	bf00      	nop
 800654a:	bf00      	nop
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20000018 	.word	0x20000018

08006558 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e033      	b.n	80065d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	2b00      	cmp	r3, #0
 8006574:	d109      	bne.n	800658a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fa fcc0 	bl	8000efc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f003 0310 	and.w	r3, r3, #16
 8006592:	2b00      	cmp	r3, #0
 8006594:	d118      	bne.n	80065c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800659e:	f023 0302 	bic.w	r3, r3, #2
 80065a2:	f043 0202 	orr.w	r2, r3, #2
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f94a 	bl	8006844 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	f023 0303 	bic.w	r3, r3, #3
 80065be:	f043 0201 	orr.w	r2, r3, #1
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	641a      	str	r2, [r3, #64]	; 0x40
 80065c6:	e001      	b.n	80065cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d101      	bne.n	80065fc <HAL_ADC_ConfigChannel+0x1c>
 80065f8:	2302      	movs	r3, #2
 80065fa:	e113      	b.n	8006824 <HAL_ADC_ConfigChannel+0x244>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b09      	cmp	r3, #9
 800660a:	d925      	bls.n	8006658 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68d9      	ldr	r1, [r3, #12]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	b29b      	uxth	r3, r3
 8006618:	461a      	mov	r2, r3
 800661a:	4613      	mov	r3, r2
 800661c:	005b      	lsls	r3, r3, #1
 800661e:	4413      	add	r3, r2
 8006620:	3b1e      	subs	r3, #30
 8006622:	2207      	movs	r2, #7
 8006624:	fa02 f303 	lsl.w	r3, r2, r3
 8006628:	43da      	mvns	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	400a      	ands	r2, r1
 8006630:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68d9      	ldr	r1, [r3, #12]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	b29b      	uxth	r3, r3
 8006642:	4618      	mov	r0, r3
 8006644:	4603      	mov	r3, r0
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	4403      	add	r3, r0
 800664a:	3b1e      	subs	r3, #30
 800664c:	409a      	lsls	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	60da      	str	r2, [r3, #12]
 8006656:	e022      	b.n	800669e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6919      	ldr	r1, [r3, #16]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	b29b      	uxth	r3, r3
 8006664:	461a      	mov	r2, r3
 8006666:	4613      	mov	r3, r2
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	4413      	add	r3, r2
 800666c:	2207      	movs	r2, #7
 800666e:	fa02 f303 	lsl.w	r3, r2, r3
 8006672:	43da      	mvns	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	400a      	ands	r2, r1
 800667a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6919      	ldr	r1, [r3, #16]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	4618      	mov	r0, r3
 800668e:	4603      	mov	r3, r0
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	4403      	add	r3, r0
 8006694:	409a      	lsls	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b06      	cmp	r3, #6
 80066a4:	d824      	bhi.n	80066f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	4613      	mov	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	3b05      	subs	r3, #5
 80066b8:	221f      	movs	r2, #31
 80066ba:	fa02 f303 	lsl.w	r3, r2, r3
 80066be:	43da      	mvns	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	400a      	ands	r2, r1
 80066c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	4618      	mov	r0, r3
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	3b05      	subs	r3, #5
 80066e2:	fa00 f203 	lsl.w	r2, r0, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	635a      	str	r2, [r3, #52]	; 0x34
 80066ee:	e04c      	b.n	800678a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2b0c      	cmp	r3, #12
 80066f6:	d824      	bhi.n	8006742 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	4613      	mov	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	3b23      	subs	r3, #35	; 0x23
 800670a:	221f      	movs	r2, #31
 800670c:	fa02 f303 	lsl.w	r3, r2, r3
 8006710:	43da      	mvns	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	400a      	ands	r2, r1
 8006718:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	b29b      	uxth	r3, r3
 8006726:	4618      	mov	r0, r3
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	3b23      	subs	r3, #35	; 0x23
 8006734:	fa00 f203 	lsl.w	r2, r0, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	631a      	str	r2, [r3, #48]	; 0x30
 8006740:	e023      	b.n	800678a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	4613      	mov	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	3b41      	subs	r3, #65	; 0x41
 8006754:	221f      	movs	r2, #31
 8006756:	fa02 f303 	lsl.w	r3, r2, r3
 800675a:	43da      	mvns	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	400a      	ands	r2, r1
 8006762:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	b29b      	uxth	r3, r3
 8006770:	4618      	mov	r0, r3
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	3b41      	subs	r3, #65	; 0x41
 800677e:	fa00 f203 	lsl.w	r2, r0, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800678a:	4b29      	ldr	r3, [pc, #164]	; (8006830 <HAL_ADC_ConfigChannel+0x250>)
 800678c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a28      	ldr	r2, [pc, #160]	; (8006834 <HAL_ADC_ConfigChannel+0x254>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d10f      	bne.n	80067b8 <HAL_ADC_ConfigChannel+0x1d8>
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b12      	cmp	r3, #18
 800679e:	d10b      	bne.n	80067b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1d      	ldr	r2, [pc, #116]	; (8006834 <HAL_ADC_ConfigChannel+0x254>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d12b      	bne.n	800681a <HAL_ADC_ConfigChannel+0x23a>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1c      	ldr	r2, [pc, #112]	; (8006838 <HAL_ADC_ConfigChannel+0x258>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d003      	beq.n	80067d4 <HAL_ADC_ConfigChannel+0x1f4>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b11      	cmp	r3, #17
 80067d2:	d122      	bne.n	800681a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a11      	ldr	r2, [pc, #68]	; (8006838 <HAL_ADC_ConfigChannel+0x258>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d111      	bne.n	800681a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80067f6:	4b11      	ldr	r3, [pc, #68]	; (800683c <HAL_ADC_ConfigChannel+0x25c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a11      	ldr	r2, [pc, #68]	; (8006840 <HAL_ADC_ConfigChannel+0x260>)
 80067fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006800:	0c9a      	lsrs	r2, r3, #18
 8006802:	4613      	mov	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800680c:	e002      	b.n	8006814 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	3b01      	subs	r3, #1
 8006812:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1f9      	bne.n	800680e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	40012300 	.word	0x40012300
 8006834:	40012000 	.word	0x40012000
 8006838:	10000012 	.word	0x10000012
 800683c:	20000010 	.word	0x20000010
 8006840:	431bde83 	.word	0x431bde83

08006844 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800684c:	4b79      	ldr	r3, [pc, #484]	; (8006a34 <ADC_Init+0x1f0>)
 800684e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	431a      	orrs	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006878:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6859      	ldr	r1, [r3, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	021a      	lsls	r2, r3, #8
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800689c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6859      	ldr	r1, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6899      	ldr	r1, [r3, #8]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d6:	4a58      	ldr	r2, [pc, #352]	; (8006a38 <ADC_Init+0x1f4>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d022      	beq.n	8006922 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80068ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6899      	ldr	r1, [r3, #8]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800690c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6899      	ldr	r1, [r3, #8]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	609a      	str	r2, [r3, #8]
 8006920:	e00f      	b.n	8006942 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006930:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689a      	ldr	r2, [r3, #8]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006940:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689a      	ldr	r2, [r3, #8]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0202 	bic.w	r2, r2, #2
 8006950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6899      	ldr	r1, [r3, #8]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	7e1b      	ldrb	r3, [r3, #24]
 800695c:	005a      	lsls	r2, r3, #1
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01b      	beq.n	80069a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800697e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800698e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6859      	ldr	r1, [r3, #4]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	3b01      	subs	r3, #1
 800699c:	035a      	lsls	r2, r3, #13
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	605a      	str	r2, [r3, #4]
 80069a6:	e007      	b.n	80069b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80069c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	051a      	lsls	r2, r3, #20
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80069ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6899      	ldr	r1, [r3, #8]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069fa:	025a      	lsls	r2, r3, #9
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6899      	ldr	r1, [r3, #8]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	029a      	lsls	r2, r3, #10
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	609a      	str	r2, [r3, #8]
}
 8006a28:	bf00      	nop
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	40012300 	.word	0x40012300
 8006a38:	0f000001 	.word	0x0f000001

08006a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a4c:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <__NVIC_SetPriorityGrouping+0x44>)
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a58:	4013      	ands	r3, r2
 8006a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a6e:	4a04      	ldr	r2, [pc, #16]	; (8006a80 <__NVIC_SetPriorityGrouping+0x44>)
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	60d3      	str	r3, [r2, #12]
}
 8006a74:	bf00      	nop
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	e000ed00 	.word	0xe000ed00

08006a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a88:	4b04      	ldr	r3, [pc, #16]	; (8006a9c <__NVIC_GetPriorityGrouping+0x18>)
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	0a1b      	lsrs	r3, r3, #8
 8006a8e:	f003 0307 	and.w	r3, r3, #7
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	e000ed00 	.word	0xe000ed00

08006aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	db0b      	blt.n	8006aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ab2:	79fb      	ldrb	r3, [r7, #7]
 8006ab4:	f003 021f 	and.w	r2, r3, #31
 8006ab8:	4907      	ldr	r1, [pc, #28]	; (8006ad8 <__NVIC_EnableIRQ+0x38>)
 8006aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	2001      	movs	r0, #1
 8006ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8006ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	e000e100 	.word	0xe000e100

08006adc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	db12      	blt.n	8006b14 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006aee:	79fb      	ldrb	r3, [r7, #7]
 8006af0:	f003 021f 	and.w	r2, r3, #31
 8006af4:	490a      	ldr	r1, [pc, #40]	; (8006b20 <__NVIC_DisableIRQ+0x44>)
 8006af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006afa:	095b      	lsrs	r3, r3, #5
 8006afc:	2001      	movs	r0, #1
 8006afe:	fa00 f202 	lsl.w	r2, r0, r2
 8006b02:	3320      	adds	r3, #32
 8006b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006b08:	f3bf 8f4f 	dsb	sy
}
 8006b0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006b0e:	f3bf 8f6f 	isb	sy
}
 8006b12:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	e000e100 	.word	0xe000e100

08006b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	6039      	str	r1, [r7, #0]
 8006b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	db0a      	blt.n	8006b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	490c      	ldr	r1, [pc, #48]	; (8006b70 <__NVIC_SetPriority+0x4c>)
 8006b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b42:	0112      	lsls	r2, r2, #4
 8006b44:	b2d2      	uxtb	r2, r2
 8006b46:	440b      	add	r3, r1
 8006b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b4c:	e00a      	b.n	8006b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	4908      	ldr	r1, [pc, #32]	; (8006b74 <__NVIC_SetPriority+0x50>)
 8006b54:	79fb      	ldrb	r3, [r7, #7]
 8006b56:	f003 030f 	and.w	r3, r3, #15
 8006b5a:	3b04      	subs	r3, #4
 8006b5c:	0112      	lsls	r2, r2, #4
 8006b5e:	b2d2      	uxtb	r2, r2
 8006b60:	440b      	add	r3, r1
 8006b62:	761a      	strb	r2, [r3, #24]
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	e000e100 	.word	0xe000e100
 8006b74:	e000ed00 	.word	0xe000ed00

08006b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b089      	sub	sp, #36	; 0x24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	f1c3 0307 	rsb	r3, r3, #7
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	bf28      	it	cs
 8006b96:	2304      	movcs	r3, #4
 8006b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	2b06      	cmp	r3, #6
 8006ba0:	d902      	bls.n	8006ba8 <NVIC_EncodePriority+0x30>
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	3b03      	subs	r3, #3
 8006ba6:	e000      	b.n	8006baa <NVIC_EncodePriority+0x32>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bac:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb6:	43da      	mvns	r2, r3
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	401a      	ands	r2, r3
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bca:	43d9      	mvns	r1, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bd0:	4313      	orrs	r3, r2
         );
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3724      	adds	r7, #36	; 0x24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
	...

08006be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bf0:	d301      	bcc.n	8006bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e00f      	b.n	8006c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006bf6:	4a0a      	ldr	r2, [pc, #40]	; (8006c20 <SysTick_Config+0x40>)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006bfe:	210f      	movs	r1, #15
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295
 8006c04:	f7ff ff8e 	bl	8006b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c08:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <SysTick_Config+0x40>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c0e:	4b04      	ldr	r3, [pc, #16]	; (8006c20 <SysTick_Config+0x40>)
 8006c10:	2207      	movs	r2, #7
 8006c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	e000e010 	.word	0xe000e010

08006c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff ff05 	bl	8006a3c <__NVIC_SetPriorityGrouping>
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b086      	sub	sp, #24
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	4603      	mov	r3, r0
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	607a      	str	r2, [r7, #4]
 8006c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006c4c:	f7ff ff1a 	bl	8006a84 <__NVIC_GetPriorityGrouping>
 8006c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	6978      	ldr	r0, [r7, #20]
 8006c58:	f7ff ff8e 	bl	8006b78 <NVIC_EncodePriority>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c62:	4611      	mov	r1, r2
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff ff5d 	bl	8006b24 <__NVIC_SetPriority>
}
 8006c6a:	bf00      	nop
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b082      	sub	sp, #8
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	4603      	mov	r3, r0
 8006c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff ff0d 	bl	8006aa0 <__NVIC_EnableIRQ>
}
 8006c86:	bf00      	nop
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b082      	sub	sp, #8
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	4603      	mov	r3, r0
 8006c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7ff ff1d 	bl	8006adc <__NVIC_DisableIRQ>
}
 8006ca2:	bf00      	nop
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b082      	sub	sp, #8
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7ff ff94 	bl	8006be0 <SysTick_Config>
 8006cb8:	4603      	mov	r3, r0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006cd0:	f7ff fc12 	bl	80064f8 <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e099      	b.n	8006e14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0201 	bic.w	r2, r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d00:	e00f      	b.n	8006d22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d02:	f7ff fbf9 	bl	80064f8 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	2b05      	cmp	r3, #5
 8006d0e:	d908      	bls.n	8006d22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2220      	movs	r2, #32
 8006d14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2203      	movs	r2, #3
 8006d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e078      	b.n	8006e14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e8      	bne.n	8006d02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	4b38      	ldr	r3, [pc, #224]	; (8006e1c <HAL_DMA_Init+0x158>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	d107      	bne.n	8006d8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d84:	4313      	orrs	r3, r2
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f023 0307 	bic.w	r3, r3, #7
 8006da2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d117      	bne.n	8006de6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00e      	beq.n	8006de6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fb5f 	bl	800748c <DMA_CheckFifoParam>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d008      	beq.n	8006de6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2240      	movs	r2, #64	; 0x40
 8006dd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006de2:	2301      	movs	r3, #1
 8006de4:	e016      	b.n	8006e14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fb16 	bl	8007420 <DMA_CalcBaseAndBitshift>
 8006df4:	4603      	mov	r3, r0
 8006df6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfc:	223f      	movs	r2, #63	; 0x3f
 8006dfe:	409a      	lsls	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	f010803f 	.word	0xf010803f

08006e20 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e050      	b.n	8006ed4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d101      	bne.n	8006e42 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006e3e:	2302      	movs	r3, #2
 8006e40:	e048      	b.n	8006ed4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0201 	bic.w	r2, r2, #1
 8006e50:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2200      	movs	r2, #0
 8006e68:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2200      	movs	r2, #0
 8006e78:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2221      	movs	r2, #33	; 0x21
 8006e80:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 facc 	bl	8007420 <DMA_CalcBaseAndBitshift>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb4:	223f      	movs	r2, #63	; 0x3f
 8006eb6:	409a      	lsls	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d101      	bne.n	8006f02 <HAL_DMA_Start_IT+0x26>
 8006efe:	2302      	movs	r3, #2
 8006f00:	e040      	b.n	8006f84 <HAL_DMA_Start_IT+0xa8>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d12f      	bne.n	8006f76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2202      	movs	r2, #2
 8006f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	68b9      	ldr	r1, [r7, #8]
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 fa4a 	bl	80073c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f34:	223f      	movs	r2, #63	; 0x3f
 8006f36:	409a      	lsls	r2, r3
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f042 0216 	orr.w	r2, r2, #22
 8006f4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0208 	orr.w	r2, r2, #8
 8006f62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0201 	orr.w	r2, r2, #1
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	e005      	b.n	8006f82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006f7e:	2302      	movs	r3, #2
 8006f80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006f9a:	f7ff faad 	bl	80064f8 <HAL_GetTick>
 8006f9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d008      	beq.n	8006fbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2280      	movs	r2, #128	; 0x80
 8006fb0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e052      	b.n	8007064 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 0216 	bic.w	r2, r2, #22
 8006fcc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	695a      	ldr	r2, [r3, #20]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fdc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d103      	bne.n	8006fee <HAL_DMA_Abort+0x62>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d007      	beq.n	8006ffe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0208 	bic.w	r2, r2, #8
 8006ffc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 0201 	bic.w	r2, r2, #1
 800700c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800700e:	e013      	b.n	8007038 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007010:	f7ff fa72 	bl	80064f8 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b05      	cmp	r3, #5
 800701c:	d90c      	bls.n	8007038 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2203      	movs	r2, #3
 8007028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e015      	b.n	8007064 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e4      	bne.n	8007010 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800704a:	223f      	movs	r2, #63	; 0x3f
 800704c:	409a      	lsls	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b02      	cmp	r3, #2
 800707e:	d004      	beq.n	800708a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2280      	movs	r2, #128	; 0x80
 8007084:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e00c      	b.n	80070a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2205      	movs	r2, #5
 800708e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 0201 	bic.w	r2, r2, #1
 80070a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80070bc:	4b8e      	ldr	r3, [pc, #568]	; (80072f8 <HAL_DMA_IRQHandler+0x248>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a8e      	ldr	r2, [pc, #568]	; (80072fc <HAL_DMA_IRQHandler+0x24c>)
 80070c2:	fba2 2303 	umull	r2, r3, r2, r3
 80070c6:	0a9b      	lsrs	r3, r3, #10
 80070c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070da:	2208      	movs	r2, #8
 80070dc:	409a      	lsls	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4013      	ands	r3, r2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d01a      	beq.n	800711c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d013      	beq.n	800711c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0204 	bic.w	r2, r2, #4
 8007102:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007108:	2208      	movs	r2, #8
 800710a:	409a      	lsls	r2, r3
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007114:	f043 0201 	orr.w	r2, r3, #1
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007120:	2201      	movs	r2, #1
 8007122:	409a      	lsls	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4013      	ands	r3, r2
 8007128:	2b00      	cmp	r3, #0
 800712a:	d012      	beq.n	8007152 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00b      	beq.n	8007152 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800713e:	2201      	movs	r2, #1
 8007140:	409a      	lsls	r2, r3
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714a:	f043 0202 	orr.w	r2, r3, #2
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007156:	2204      	movs	r2, #4
 8007158:	409a      	lsls	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	4013      	ands	r3, r2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d012      	beq.n	8007188 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00b      	beq.n	8007188 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007174:	2204      	movs	r2, #4
 8007176:	409a      	lsls	r2, r3
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007180:	f043 0204 	orr.w	r2, r3, #4
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800718c:	2210      	movs	r2, #16
 800718e:	409a      	lsls	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4013      	ands	r3, r2
 8007194:	2b00      	cmp	r3, #0
 8007196:	d043      	beq.n	8007220 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0308 	and.w	r3, r3, #8
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d03c      	beq.n	8007220 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071aa:	2210      	movs	r2, #16
 80071ac:	409a      	lsls	r2, r3
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d018      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d108      	bne.n	80071e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d024      	beq.n	8007220 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	4798      	blx	r3
 80071de:	e01f      	b.n	8007220 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d01b      	beq.n	8007220 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	4798      	blx	r3
 80071f0:	e016      	b.n	8007220 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d107      	bne.n	8007210 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 0208 	bic.w	r2, r2, #8
 800720e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007224:	2220      	movs	r2, #32
 8007226:	409a      	lsls	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4013      	ands	r3, r2
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 808f 	beq.w	8007350 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0310 	and.w	r3, r3, #16
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 8087 	beq.w	8007350 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007246:	2220      	movs	r2, #32
 8007248:	409a      	lsls	r2, r3
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b05      	cmp	r3, #5
 8007258:	d136      	bne.n	80072c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f022 0216 	bic.w	r2, r2, #22
 8007268:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	695a      	ldr	r2, [r3, #20]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007278:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	2b00      	cmp	r3, #0
 8007280:	d103      	bne.n	800728a <HAL_DMA_IRQHandler+0x1da>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007286:	2b00      	cmp	r3, #0
 8007288:	d007      	beq.n	800729a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0208 	bic.w	r2, r2, #8
 8007298:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800729e:	223f      	movs	r2, #63	; 0x3f
 80072a0:	409a      	lsls	r2, r3
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d07e      	beq.n	80073bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
        }
        return;
 80072c6:	e079      	b.n	80073bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d01d      	beq.n	8007312 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10d      	bne.n	8007300 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d031      	beq.n	8007350 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	4798      	blx	r3
 80072f4:	e02c      	b.n	8007350 <HAL_DMA_IRQHandler+0x2a0>
 80072f6:	bf00      	nop
 80072f8:	20000010 	.word	0x20000010
 80072fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007304:	2b00      	cmp	r3, #0
 8007306:	d023      	beq.n	8007350 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	4798      	blx	r3
 8007310:	e01e      	b.n	8007350 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10f      	bne.n	8007340 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0210 	bic.w	r2, r2, #16
 800732e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007354:	2b00      	cmp	r3, #0
 8007356:	d032      	beq.n	80073be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d022      	beq.n	80073aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2205      	movs	r2, #5
 8007368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0201 	bic.w	r2, r2, #1
 800737a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	3301      	adds	r3, #1
 8007380:	60bb      	str	r3, [r7, #8]
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	429a      	cmp	r2, r3
 8007386:	d307      	bcc.n	8007398 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1f2      	bne.n	800737c <HAL_DMA_IRQHandler+0x2cc>
 8007396:	e000      	b.n	800739a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007398:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d005      	beq.n	80073be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	4798      	blx	r3
 80073ba:	e000      	b.n	80073be <HAL_DMA_IRQHandler+0x30e>
        return;
 80073bc:	bf00      	nop
    }
  }
}
 80073be:	3718      	adds	r7, #24
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	2b40      	cmp	r3, #64	; 0x40
 80073f0:	d108      	bne.n	8007404 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007402:	e007      	b.n	8007414 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	60da      	str	r2, [r3, #12]
}
 8007414:	bf00      	nop
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	b2db      	uxtb	r3, r3
 800742e:	3b10      	subs	r3, #16
 8007430:	4a14      	ldr	r2, [pc, #80]	; (8007484 <DMA_CalcBaseAndBitshift+0x64>)
 8007432:	fba2 2303 	umull	r2, r3, r2, r3
 8007436:	091b      	lsrs	r3, r3, #4
 8007438:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800743a:	4a13      	ldr	r2, [pc, #76]	; (8007488 <DMA_CalcBaseAndBitshift+0x68>)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4413      	add	r3, r2
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b03      	cmp	r3, #3
 800744c:	d909      	bls.n	8007462 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007456:	f023 0303 	bic.w	r3, r3, #3
 800745a:	1d1a      	adds	r2, r3, #4
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	659a      	str	r2, [r3, #88]	; 0x58
 8007460:	e007      	b.n	8007472 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800746a:	f023 0303 	bic.w	r3, r3, #3
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	aaaaaaab 	.word	0xaaaaaaab
 8007488:	0800b46c 	.word	0x0800b46c

0800748c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d11f      	bne.n	80074e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2b03      	cmp	r3, #3
 80074aa:	d856      	bhi.n	800755a <DMA_CheckFifoParam+0xce>
 80074ac:	a201      	add	r2, pc, #4	; (adr r2, 80074b4 <DMA_CheckFifoParam+0x28>)
 80074ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b2:	bf00      	nop
 80074b4:	080074c5 	.word	0x080074c5
 80074b8:	080074d7 	.word	0x080074d7
 80074bc:	080074c5 	.word	0x080074c5
 80074c0:	0800755b 	.word	0x0800755b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d046      	beq.n	800755e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074d4:	e043      	b.n	800755e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074de:	d140      	bne.n	8007562 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074e4:	e03d      	b.n	8007562 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ee:	d121      	bne.n	8007534 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d837      	bhi.n	8007566 <DMA_CheckFifoParam+0xda>
 80074f6:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <DMA_CheckFifoParam+0x70>)
 80074f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fc:	0800750d 	.word	0x0800750d
 8007500:	08007513 	.word	0x08007513
 8007504:	0800750d 	.word	0x0800750d
 8007508:	08007525 	.word	0x08007525
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	73fb      	strb	r3, [r7, #15]
      break;
 8007510:	e030      	b.n	8007574 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d025      	beq.n	800756a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007522:	e022      	b.n	800756a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800752c:	d11f      	bne.n	800756e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007532:	e01c      	b.n	800756e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2b02      	cmp	r3, #2
 8007538:	d903      	bls.n	8007542 <DMA_CheckFifoParam+0xb6>
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2b03      	cmp	r3, #3
 800753e:	d003      	beq.n	8007548 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007540:	e018      	b.n	8007574 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	73fb      	strb	r3, [r7, #15]
      break;
 8007546:	e015      	b.n	8007574 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00e      	beq.n	8007572 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	73fb      	strb	r3, [r7, #15]
      break;
 8007558:	e00b      	b.n	8007572 <DMA_CheckFifoParam+0xe6>
      break;
 800755a:	bf00      	nop
 800755c:	e00a      	b.n	8007574 <DMA_CheckFifoParam+0xe8>
      break;
 800755e:	bf00      	nop
 8007560:	e008      	b.n	8007574 <DMA_CheckFifoParam+0xe8>
      break;
 8007562:	bf00      	nop
 8007564:	e006      	b.n	8007574 <DMA_CheckFifoParam+0xe8>
      break;
 8007566:	bf00      	nop
 8007568:	e004      	b.n	8007574 <DMA_CheckFifoParam+0xe8>
      break;
 800756a:	bf00      	nop
 800756c:	e002      	b.n	8007574 <DMA_CheckFifoParam+0xe8>
      break;   
 800756e:	bf00      	nop
 8007570:	e000      	b.n	8007574 <DMA_CheckFifoParam+0xe8>
      break;
 8007572:	bf00      	nop
    }
  } 
  
  return status; 
 8007574:	7bfb      	ldrb	r3, [r7, #15]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop

08007584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007584:	b480      	push	{r7}
 8007586:	b089      	sub	sp, #36	; 0x24
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800758e:	2300      	movs	r3, #0
 8007590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007592:	2300      	movs	r3, #0
 8007594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007596:	2300      	movs	r3, #0
 8007598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800759a:	2300      	movs	r3, #0
 800759c:	61fb      	str	r3, [r7, #28]
 800759e:	e165      	b.n	800786c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80075a0:	2201      	movs	r2, #1
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	fa02 f303 	lsl.w	r3, r2, r3
 80075a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	4013      	ands	r3, r2
 80075b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	f040 8154 	bne.w	8007866 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f003 0303 	and.w	r3, r3, #3
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d005      	beq.n	80075d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d130      	bne.n	8007638 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	2203      	movs	r2, #3
 80075e2:	fa02 f303 	lsl.w	r3, r2, r3
 80075e6:	43db      	mvns	r3, r3
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	4013      	ands	r3, r2
 80075ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	fa02 f303 	lsl.w	r3, r2, r3
 80075fa:	69ba      	ldr	r2, [r7, #24]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800760c:	2201      	movs	r2, #1
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	fa02 f303 	lsl.w	r3, r2, r3
 8007614:	43db      	mvns	r3, r3
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	4013      	ands	r3, r2
 800761a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	091b      	lsrs	r3, r3, #4
 8007622:	f003 0201 	and.w	r2, r3, #1
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	fa02 f303 	lsl.w	r3, r2, r3
 800762c:	69ba      	ldr	r2, [r7, #24]
 800762e:	4313      	orrs	r3, r2
 8007630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f003 0303 	and.w	r3, r3, #3
 8007640:	2b03      	cmp	r3, #3
 8007642:	d017      	beq.n	8007674 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	2203      	movs	r2, #3
 8007650:	fa02 f303 	lsl.w	r3, r2, r3
 8007654:	43db      	mvns	r3, r3
 8007656:	69ba      	ldr	r2, [r7, #24]
 8007658:	4013      	ands	r3, r2
 800765a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	69ba      	ldr	r2, [r7, #24]
 800766a:	4313      	orrs	r3, r2
 800766c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f003 0303 	and.w	r3, r3, #3
 800767c:	2b02      	cmp	r3, #2
 800767e:	d123      	bne.n	80076c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	08da      	lsrs	r2, r3, #3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3208      	adds	r2, #8
 8007688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800768c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	f003 0307 	and.w	r3, r3, #7
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	220f      	movs	r2, #15
 8007698:	fa02 f303 	lsl.w	r3, r2, r3
 800769c:	43db      	mvns	r3, r3
 800769e:	69ba      	ldr	r2, [r7, #24]
 80076a0:	4013      	ands	r3, r2
 80076a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	691a      	ldr	r2, [r3, #16]
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	f003 0307 	and.w	r3, r3, #7
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	fa02 f303 	lsl.w	r3, r2, r3
 80076b4:	69ba      	ldr	r2, [r7, #24]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	08da      	lsrs	r2, r3, #3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	3208      	adds	r2, #8
 80076c2:	69b9      	ldr	r1, [r7, #24]
 80076c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	2203      	movs	r2, #3
 80076d4:	fa02 f303 	lsl.w	r3, r2, r3
 80076d8:	43db      	mvns	r3, r3
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	4013      	ands	r3, r2
 80076de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f003 0203 	and.w	r2, r3, #3
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	fa02 f303 	lsl.w	r3, r2, r3
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 80ae 	beq.w	8007866 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800770a:	2300      	movs	r3, #0
 800770c:	60fb      	str	r3, [r7, #12]
 800770e:	4b5d      	ldr	r3, [pc, #372]	; (8007884 <HAL_GPIO_Init+0x300>)
 8007710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007712:	4a5c      	ldr	r2, [pc, #368]	; (8007884 <HAL_GPIO_Init+0x300>)
 8007714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007718:	6453      	str	r3, [r2, #68]	; 0x44
 800771a:	4b5a      	ldr	r3, [pc, #360]	; (8007884 <HAL_GPIO_Init+0x300>)
 800771c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007726:	4a58      	ldr	r2, [pc, #352]	; (8007888 <HAL_GPIO_Init+0x304>)
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	089b      	lsrs	r3, r3, #2
 800772c:	3302      	adds	r3, #2
 800772e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	220f      	movs	r2, #15
 800773e:	fa02 f303 	lsl.w	r3, r2, r3
 8007742:	43db      	mvns	r3, r3
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	4013      	ands	r3, r2
 8007748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a4f      	ldr	r2, [pc, #316]	; (800788c <HAL_GPIO_Init+0x308>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d025      	beq.n	800779e <HAL_GPIO_Init+0x21a>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a4e      	ldr	r2, [pc, #312]	; (8007890 <HAL_GPIO_Init+0x30c>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d01f      	beq.n	800779a <HAL_GPIO_Init+0x216>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a4d      	ldr	r2, [pc, #308]	; (8007894 <HAL_GPIO_Init+0x310>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d019      	beq.n	8007796 <HAL_GPIO_Init+0x212>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a4c      	ldr	r2, [pc, #304]	; (8007898 <HAL_GPIO_Init+0x314>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d013      	beq.n	8007792 <HAL_GPIO_Init+0x20e>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a4b      	ldr	r2, [pc, #300]	; (800789c <HAL_GPIO_Init+0x318>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00d      	beq.n	800778e <HAL_GPIO_Init+0x20a>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a4a      	ldr	r2, [pc, #296]	; (80078a0 <HAL_GPIO_Init+0x31c>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d007      	beq.n	800778a <HAL_GPIO_Init+0x206>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a49      	ldr	r2, [pc, #292]	; (80078a4 <HAL_GPIO_Init+0x320>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d101      	bne.n	8007786 <HAL_GPIO_Init+0x202>
 8007782:	2306      	movs	r3, #6
 8007784:	e00c      	b.n	80077a0 <HAL_GPIO_Init+0x21c>
 8007786:	2307      	movs	r3, #7
 8007788:	e00a      	b.n	80077a0 <HAL_GPIO_Init+0x21c>
 800778a:	2305      	movs	r3, #5
 800778c:	e008      	b.n	80077a0 <HAL_GPIO_Init+0x21c>
 800778e:	2304      	movs	r3, #4
 8007790:	e006      	b.n	80077a0 <HAL_GPIO_Init+0x21c>
 8007792:	2303      	movs	r3, #3
 8007794:	e004      	b.n	80077a0 <HAL_GPIO_Init+0x21c>
 8007796:	2302      	movs	r3, #2
 8007798:	e002      	b.n	80077a0 <HAL_GPIO_Init+0x21c>
 800779a:	2301      	movs	r3, #1
 800779c:	e000      	b.n	80077a0 <HAL_GPIO_Init+0x21c>
 800779e:	2300      	movs	r3, #0
 80077a0:	69fa      	ldr	r2, [r7, #28]
 80077a2:	f002 0203 	and.w	r2, r2, #3
 80077a6:	0092      	lsls	r2, r2, #2
 80077a8:	4093      	lsls	r3, r2
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80077b0:	4935      	ldr	r1, [pc, #212]	; (8007888 <HAL_GPIO_Init+0x304>)
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	089b      	lsrs	r3, r3, #2
 80077b6:	3302      	adds	r3, #2
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80077be:	4b3a      	ldr	r3, [pc, #232]	; (80078a8 <HAL_GPIO_Init+0x324>)
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	43db      	mvns	r3, r3
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	4013      	ands	r3, r2
 80077cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	4313      	orrs	r3, r2
 80077e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80077e2:	4a31      	ldr	r2, [pc, #196]	; (80078a8 <HAL_GPIO_Init+0x324>)
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80077e8:	4b2f      	ldr	r3, [pc, #188]	; (80078a8 <HAL_GPIO_Init+0x324>)
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	43db      	mvns	r3, r3
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	4013      	ands	r3, r2
 80077f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	4313      	orrs	r3, r2
 800780a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800780c:	4a26      	ldr	r2, [pc, #152]	; (80078a8 <HAL_GPIO_Init+0x324>)
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007812:	4b25      	ldr	r3, [pc, #148]	; (80078a8 <HAL_GPIO_Init+0x324>)
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	43db      	mvns	r3, r3
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	4013      	ands	r3, r2
 8007820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	4313      	orrs	r3, r2
 8007834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007836:	4a1c      	ldr	r2, [pc, #112]	; (80078a8 <HAL_GPIO_Init+0x324>)
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800783c:	4b1a      	ldr	r3, [pc, #104]	; (80078a8 <HAL_GPIO_Init+0x324>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	43db      	mvns	r3, r3
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	4013      	ands	r3, r2
 800784a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d003      	beq.n	8007860 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	4313      	orrs	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007860:	4a11      	ldr	r2, [pc, #68]	; (80078a8 <HAL_GPIO_Init+0x324>)
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	3301      	adds	r3, #1
 800786a:	61fb      	str	r3, [r7, #28]
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	2b0f      	cmp	r3, #15
 8007870:	f67f ae96 	bls.w	80075a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop
 8007878:	3724      	adds	r7, #36	; 0x24
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	40023800 	.word	0x40023800
 8007888:	40013800 	.word	0x40013800
 800788c:	40020000 	.word	0x40020000
 8007890:	40020400 	.word	0x40020400
 8007894:	40020800 	.word	0x40020800
 8007898:	40020c00 	.word	0x40020c00
 800789c:	40021000 	.word	0x40021000
 80078a0:	40021400 	.word	0x40021400
 80078a4:	40021800 	.word	0x40021800
 80078a8:	40013c00 	.word	0x40013c00

080078ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b087      	sub	sp, #28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80078be:	2300      	movs	r3, #0
 80078c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80078c2:	2300      	movs	r3, #0
 80078c4:	617b      	str	r3, [r7, #20]
 80078c6:	e0c7      	b.n	8007a58 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80078c8:	2201      	movs	r2, #1
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	fa02 f303 	lsl.w	r3, r2, r3
 80078d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	4013      	ands	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	429a      	cmp	r2, r3
 80078e0:	f040 80b7 	bne.w	8007a52 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80078e4:	4a62      	ldr	r2, [pc, #392]	; (8007a70 <HAL_GPIO_DeInit+0x1c4>)
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	089b      	lsrs	r3, r3, #2
 80078ea:	3302      	adds	r3, #2
 80078ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078f0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	220f      	movs	r2, #15
 80078fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	4013      	ands	r3, r2
 8007904:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a5a      	ldr	r2, [pc, #360]	; (8007a74 <HAL_GPIO_DeInit+0x1c8>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d025      	beq.n	800795a <HAL_GPIO_DeInit+0xae>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a59      	ldr	r2, [pc, #356]	; (8007a78 <HAL_GPIO_DeInit+0x1cc>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d01f      	beq.n	8007956 <HAL_GPIO_DeInit+0xaa>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a58      	ldr	r2, [pc, #352]	; (8007a7c <HAL_GPIO_DeInit+0x1d0>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d019      	beq.n	8007952 <HAL_GPIO_DeInit+0xa6>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a57      	ldr	r2, [pc, #348]	; (8007a80 <HAL_GPIO_DeInit+0x1d4>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d013      	beq.n	800794e <HAL_GPIO_DeInit+0xa2>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a56      	ldr	r2, [pc, #344]	; (8007a84 <HAL_GPIO_DeInit+0x1d8>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d00d      	beq.n	800794a <HAL_GPIO_DeInit+0x9e>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a55      	ldr	r2, [pc, #340]	; (8007a88 <HAL_GPIO_DeInit+0x1dc>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d007      	beq.n	8007946 <HAL_GPIO_DeInit+0x9a>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a54      	ldr	r2, [pc, #336]	; (8007a8c <HAL_GPIO_DeInit+0x1e0>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d101      	bne.n	8007942 <HAL_GPIO_DeInit+0x96>
 800793e:	2306      	movs	r3, #6
 8007940:	e00c      	b.n	800795c <HAL_GPIO_DeInit+0xb0>
 8007942:	2307      	movs	r3, #7
 8007944:	e00a      	b.n	800795c <HAL_GPIO_DeInit+0xb0>
 8007946:	2305      	movs	r3, #5
 8007948:	e008      	b.n	800795c <HAL_GPIO_DeInit+0xb0>
 800794a:	2304      	movs	r3, #4
 800794c:	e006      	b.n	800795c <HAL_GPIO_DeInit+0xb0>
 800794e:	2303      	movs	r3, #3
 8007950:	e004      	b.n	800795c <HAL_GPIO_DeInit+0xb0>
 8007952:	2302      	movs	r3, #2
 8007954:	e002      	b.n	800795c <HAL_GPIO_DeInit+0xb0>
 8007956:	2301      	movs	r3, #1
 8007958:	e000      	b.n	800795c <HAL_GPIO_DeInit+0xb0>
 800795a:	2300      	movs	r3, #0
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	f002 0203 	and.w	r2, r2, #3
 8007962:	0092      	lsls	r2, r2, #2
 8007964:	4093      	lsls	r3, r2
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	429a      	cmp	r2, r3
 800796a:	d132      	bne.n	80079d2 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800796c:	4b48      	ldr	r3, [pc, #288]	; (8007a90 <HAL_GPIO_DeInit+0x1e4>)
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	43db      	mvns	r3, r3
 8007974:	4946      	ldr	r1, [pc, #280]	; (8007a90 <HAL_GPIO_DeInit+0x1e4>)
 8007976:	4013      	ands	r3, r2
 8007978:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800797a:	4b45      	ldr	r3, [pc, #276]	; (8007a90 <HAL_GPIO_DeInit+0x1e4>)
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	43db      	mvns	r3, r3
 8007982:	4943      	ldr	r1, [pc, #268]	; (8007a90 <HAL_GPIO_DeInit+0x1e4>)
 8007984:	4013      	ands	r3, r2
 8007986:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007988:	4b41      	ldr	r3, [pc, #260]	; (8007a90 <HAL_GPIO_DeInit+0x1e4>)
 800798a:	68da      	ldr	r2, [r3, #12]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	43db      	mvns	r3, r3
 8007990:	493f      	ldr	r1, [pc, #252]	; (8007a90 <HAL_GPIO_DeInit+0x1e4>)
 8007992:	4013      	ands	r3, r2
 8007994:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007996:	4b3e      	ldr	r3, [pc, #248]	; (8007a90 <HAL_GPIO_DeInit+0x1e4>)
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	43db      	mvns	r3, r3
 800799e:	493c      	ldr	r1, [pc, #240]	; (8007a90 <HAL_GPIO_DeInit+0x1e4>)
 80079a0:	4013      	ands	r3, r2
 80079a2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f003 0303 	and.w	r3, r3, #3
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	220f      	movs	r2, #15
 80079ae:	fa02 f303 	lsl.w	r3, r2, r3
 80079b2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80079b4:	4a2e      	ldr	r2, [pc, #184]	; (8007a70 <HAL_GPIO_DeInit+0x1c4>)
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	089b      	lsrs	r3, r3, #2
 80079ba:	3302      	adds	r3, #2
 80079bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	43da      	mvns	r2, r3
 80079c4:	482a      	ldr	r0, [pc, #168]	; (8007a70 <HAL_GPIO_DeInit+0x1c4>)
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	089b      	lsrs	r3, r3, #2
 80079ca:	400a      	ands	r2, r1
 80079cc:	3302      	adds	r3, #2
 80079ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	2103      	movs	r1, #3
 80079dc:	fa01 f303 	lsl.w	r3, r1, r3
 80079e0:	43db      	mvns	r3, r3
 80079e2:	401a      	ands	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	08da      	lsrs	r2, r3, #3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	3208      	adds	r2, #8
 80079f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f003 0307 	and.w	r3, r3, #7
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	220f      	movs	r2, #15
 80079fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007a02:	43db      	mvns	r3, r3
 8007a04:	697a      	ldr	r2, [r7, #20]
 8007a06:	08d2      	lsrs	r2, r2, #3
 8007a08:	4019      	ands	r1, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	3208      	adds	r2, #8
 8007a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	2103      	movs	r1, #3
 8007a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a20:	43db      	mvns	r3, r3
 8007a22:	401a      	ands	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	fa01 f303 	lsl.w	r3, r1, r3
 8007a34:	43db      	mvns	r3, r3
 8007a36:	401a      	ands	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	2103      	movs	r1, #3
 8007a46:	fa01 f303 	lsl.w	r3, r1, r3
 8007a4a:	43db      	mvns	r3, r3
 8007a4c:	401a      	ands	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	3301      	adds	r3, #1
 8007a56:	617b      	str	r3, [r7, #20]
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2b0f      	cmp	r3, #15
 8007a5c:	f67f af34 	bls.w	80078c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007a60:	bf00      	nop
 8007a62:	bf00      	nop
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	40013800 	.word	0x40013800
 8007a74:	40020000 	.word	0x40020000
 8007a78:	40020400 	.word	0x40020400
 8007a7c:	40020800 	.word	0x40020800
 8007a80:	40020c00 	.word	0x40020c00
 8007a84:	40021000 	.word	0x40021000
 8007a88:	40021400 	.word	0x40021400
 8007a8c:	40021800 	.word	0x40021800
 8007a90:	40013c00 	.word	0x40013c00

08007a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	807b      	strh	r3, [r7, #2]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007aa4:	787b      	ldrb	r3, [r7, #1]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007aaa:	887a      	ldrh	r2, [r7, #2]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007ab0:	e003      	b.n	8007aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007ab2:	887b      	ldrh	r3, [r7, #2]
 8007ab4:	041a      	lsls	r2, r3, #16
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	619a      	str	r2, [r3, #24]
}
 8007aba:	bf00      	nop
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
	...

08007ac8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007ad2:	4b08      	ldr	r3, [pc, #32]	; (8007af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ad4:	695a      	ldr	r2, [r3, #20]
 8007ad6:	88fb      	ldrh	r3, [r7, #6]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d006      	beq.n	8007aec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007ade:	4a05      	ldr	r2, [pc, #20]	; (8007af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ae0:	88fb      	ldrh	r3, [r7, #6]
 8007ae2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007ae4:	88fb      	ldrh	r3, [r7, #6]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fd fa92 	bl	8005010 <HAL_GPIO_EXTI_Callback>
  }
}
 8007aec:	bf00      	nop
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	40013c00 	.word	0x40013c00

08007af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e12b      	b.n	8007d62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d106      	bne.n	8007b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7fa fd06 	bl	8002530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2224      	movs	r2, #36	; 0x24
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f022 0201 	bic.w	r2, r2, #1
 8007b3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007b5c:	f000 fa02 	bl	8007f64 <HAL_RCC_GetPCLK1Freq>
 8007b60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	4a81      	ldr	r2, [pc, #516]	; (8007d6c <HAL_I2C_Init+0x274>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d807      	bhi.n	8007b7c <HAL_I2C_Init+0x84>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4a80      	ldr	r2, [pc, #512]	; (8007d70 <HAL_I2C_Init+0x278>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	bf94      	ite	ls
 8007b74:	2301      	movls	r3, #1
 8007b76:	2300      	movhi	r3, #0
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	e006      	b.n	8007b8a <HAL_I2C_Init+0x92>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4a7d      	ldr	r2, [pc, #500]	; (8007d74 <HAL_I2C_Init+0x27c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	bf94      	ite	ls
 8007b84:	2301      	movls	r3, #1
 8007b86:	2300      	movhi	r3, #0
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e0e7      	b.n	8007d62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4a78      	ldr	r2, [pc, #480]	; (8007d78 <HAL_I2C_Init+0x280>)
 8007b96:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9a:	0c9b      	lsrs	r3, r3, #18
 8007b9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	4a6a      	ldr	r2, [pc, #424]	; (8007d6c <HAL_I2C_Init+0x274>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d802      	bhi.n	8007bcc <HAL_I2C_Init+0xd4>
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	e009      	b.n	8007be0 <HAL_I2C_Init+0xe8>
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007bd2:	fb02 f303 	mul.w	r3, r2, r3
 8007bd6:	4a69      	ldr	r2, [pc, #420]	; (8007d7c <HAL_I2C_Init+0x284>)
 8007bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bdc:	099b      	lsrs	r3, r3, #6
 8007bde:	3301      	adds	r3, #1
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	6812      	ldr	r2, [r2, #0]
 8007be4:	430b      	orrs	r3, r1
 8007be6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007bf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	495c      	ldr	r1, [pc, #368]	; (8007d6c <HAL_I2C_Init+0x274>)
 8007bfc:	428b      	cmp	r3, r1
 8007bfe:	d819      	bhi.n	8007c34 <HAL_I2C_Init+0x13c>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	1e59      	subs	r1, r3, #1
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	005b      	lsls	r3, r3, #1
 8007c0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c0e:	1c59      	adds	r1, r3, #1
 8007c10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007c14:	400b      	ands	r3, r1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <HAL_I2C_Init+0x138>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	1e59      	subs	r1, r3, #1
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c28:	3301      	adds	r3, #1
 8007c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c2e:	e051      	b.n	8007cd4 <HAL_I2C_Init+0x1dc>
 8007c30:	2304      	movs	r3, #4
 8007c32:	e04f      	b.n	8007cd4 <HAL_I2C_Init+0x1dc>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d111      	bne.n	8007c60 <HAL_I2C_Init+0x168>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	1e58      	subs	r0, r3, #1
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6859      	ldr	r1, [r3, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	005b      	lsls	r3, r3, #1
 8007c48:	440b      	add	r3, r1
 8007c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c4e:	3301      	adds	r3, #1
 8007c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	bf0c      	ite	eq
 8007c58:	2301      	moveq	r3, #1
 8007c5a:	2300      	movne	r3, #0
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	e012      	b.n	8007c86 <HAL_I2C_Init+0x18e>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	1e58      	subs	r0, r3, #1
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6859      	ldr	r1, [r3, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	440b      	add	r3, r1
 8007c6e:	0099      	lsls	r1, r3, #2
 8007c70:	440b      	add	r3, r1
 8007c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c76:	3301      	adds	r3, #1
 8007c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	bf0c      	ite	eq
 8007c80:	2301      	moveq	r3, #1
 8007c82:	2300      	movne	r3, #0
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <HAL_I2C_Init+0x196>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e022      	b.n	8007cd4 <HAL_I2C_Init+0x1dc>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10e      	bne.n	8007cb4 <HAL_I2C_Init+0x1bc>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	1e58      	subs	r0, r3, #1
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6859      	ldr	r1, [r3, #4]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	005b      	lsls	r3, r3, #1
 8007ca2:	440b      	add	r3, r1
 8007ca4:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ca8:	3301      	adds	r3, #1
 8007caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb2:	e00f      	b.n	8007cd4 <HAL_I2C_Init+0x1dc>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	1e58      	subs	r0, r3, #1
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6859      	ldr	r1, [r3, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	440b      	add	r3, r1
 8007cc2:	0099      	lsls	r1, r3, #2
 8007cc4:	440b      	add	r3, r1
 8007cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cca:	3301      	adds	r3, #1
 8007ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cd4:	6879      	ldr	r1, [r7, #4]
 8007cd6:	6809      	ldr	r1, [r1, #0]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	69da      	ldr	r2, [r3, #28]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007d02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	6911      	ldr	r1, [r2, #16]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	68d2      	ldr	r2, [r2, #12]
 8007d0e:	4311      	orrs	r1, r2
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6812      	ldr	r2, [r2, #0]
 8007d14:	430b      	orrs	r3, r1
 8007d16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	695a      	ldr	r2, [r3, #20]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	430a      	orrs	r2, r1
 8007d32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0201 	orr.w	r2, r2, #1
 8007d42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	000186a0 	.word	0x000186a0
 8007d70:	001e847f 	.word	0x001e847f
 8007d74:	003d08ff 	.word	0x003d08ff
 8007d78:	431bde83 	.word	0x431bde83
 8007d7c:	10624dd3 	.word	0x10624dd3

08007d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e0cc      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d94:	4b68      	ldr	r3, [pc, #416]	; (8007f38 <HAL_RCC_ClockConfig+0x1b8>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 030f 	and.w	r3, r3, #15
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d90c      	bls.n	8007dbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007da2:	4b65      	ldr	r3, [pc, #404]	; (8007f38 <HAL_RCC_ClockConfig+0x1b8>)
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	b2d2      	uxtb	r2, r2
 8007da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007daa:	4b63      	ldr	r3, [pc, #396]	; (8007f38 <HAL_RCC_ClockConfig+0x1b8>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 030f 	and.w	r3, r3, #15
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d001      	beq.n	8007dbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e0b8      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0302 	and.w	r3, r3, #2
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d020      	beq.n	8007e0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d005      	beq.n	8007de0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007dd4:	4b59      	ldr	r3, [pc, #356]	; (8007f3c <HAL_RCC_ClockConfig+0x1bc>)
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	4a58      	ldr	r2, [pc, #352]	; (8007f3c <HAL_RCC_ClockConfig+0x1bc>)
 8007dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007dde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0308 	and.w	r3, r3, #8
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d005      	beq.n	8007df8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007dec:	4b53      	ldr	r3, [pc, #332]	; (8007f3c <HAL_RCC_ClockConfig+0x1bc>)
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	4a52      	ldr	r2, [pc, #328]	; (8007f3c <HAL_RCC_ClockConfig+0x1bc>)
 8007df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007df6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007df8:	4b50      	ldr	r3, [pc, #320]	; (8007f3c <HAL_RCC_ClockConfig+0x1bc>)
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	494d      	ldr	r1, [pc, #308]	; (8007f3c <HAL_RCC_ClockConfig+0x1bc>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d044      	beq.n	8007ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d107      	bne.n	8007e2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e1e:	4b47      	ldr	r3, [pc, #284]	; (8007f3c <HAL_RCC_ClockConfig+0x1bc>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d119      	bne.n	8007e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e07f      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d003      	beq.n	8007e3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d107      	bne.n	8007e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e3e:	4b3f      	ldr	r3, [pc, #252]	; (8007f3c <HAL_RCC_ClockConfig+0x1bc>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d109      	bne.n	8007e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e06f      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e4e:	4b3b      	ldr	r3, [pc, #236]	; (8007f3c <HAL_RCC_ClockConfig+0x1bc>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e067      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e5e:	4b37      	ldr	r3, [pc, #220]	; (8007f3c <HAL_RCC_ClockConfig+0x1bc>)
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f023 0203 	bic.w	r2, r3, #3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	4934      	ldr	r1, [pc, #208]	; (8007f3c <HAL_RCC_ClockConfig+0x1bc>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e70:	f7fe fb42 	bl	80064f8 <HAL_GetTick>
 8007e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e76:	e00a      	b.n	8007e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e78:	f7fe fb3e 	bl	80064f8 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d901      	bls.n	8007e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e04f      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e8e:	4b2b      	ldr	r3, [pc, #172]	; (8007f3c <HAL_RCC_ClockConfig+0x1bc>)
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f003 020c 	and.w	r2, r3, #12
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d1eb      	bne.n	8007e78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ea0:	4b25      	ldr	r3, [pc, #148]	; (8007f38 <HAL_RCC_ClockConfig+0x1b8>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 030f 	and.w	r3, r3, #15
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d20c      	bcs.n	8007ec8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eae:	4b22      	ldr	r3, [pc, #136]	; (8007f38 <HAL_RCC_ClockConfig+0x1b8>)
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	b2d2      	uxtb	r2, r2
 8007eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eb6:	4b20      	ldr	r3, [pc, #128]	; (8007f38 <HAL_RCC_ClockConfig+0x1b8>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 030f 	and.w	r3, r3, #15
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d001      	beq.n	8007ec8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e032      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d008      	beq.n	8007ee6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ed4:	4b19      	ldr	r3, [pc, #100]	; (8007f3c <HAL_RCC_ClockConfig+0x1bc>)
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	4916      	ldr	r1, [pc, #88]	; (8007f3c <HAL_RCC_ClockConfig+0x1bc>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0308 	and.w	r3, r3, #8
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d009      	beq.n	8007f06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ef2:	4b12      	ldr	r3, [pc, #72]	; (8007f3c <HAL_RCC_ClockConfig+0x1bc>)
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	00db      	lsls	r3, r3, #3
 8007f00:	490e      	ldr	r1, [pc, #56]	; (8007f3c <HAL_RCC_ClockConfig+0x1bc>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f06:	f000 f855 	bl	8007fb4 <HAL_RCC_GetSysClockFreq>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	4b0b      	ldr	r3, [pc, #44]	; (8007f3c <HAL_RCC_ClockConfig+0x1bc>)
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	091b      	lsrs	r3, r3, #4
 8007f12:	f003 030f 	and.w	r3, r3, #15
 8007f16:	490a      	ldr	r1, [pc, #40]	; (8007f40 <HAL_RCC_ClockConfig+0x1c0>)
 8007f18:	5ccb      	ldrb	r3, [r1, r3]
 8007f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f1e:	4a09      	ldr	r2, [pc, #36]	; (8007f44 <HAL_RCC_ClockConfig+0x1c4>)
 8007f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007f22:	4b09      	ldr	r3, [pc, #36]	; (8007f48 <HAL_RCC_ClockConfig+0x1c8>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fe faa2 	bl	8006470 <HAL_InitTick>

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	40023c00 	.word	0x40023c00
 8007f3c:	40023800 	.word	0x40023800
 8007f40:	0800b454 	.word	0x0800b454
 8007f44:	20000010 	.word	0x20000010
 8007f48:	20000014 	.word	0x20000014

08007f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f50:	4b03      	ldr	r3, [pc, #12]	; (8007f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f52:	681b      	ldr	r3, [r3, #0]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	20000010 	.word	0x20000010

08007f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f68:	f7ff fff0 	bl	8007f4c <HAL_RCC_GetHCLKFreq>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	0a9b      	lsrs	r3, r3, #10
 8007f74:	f003 0307 	and.w	r3, r3, #7
 8007f78:	4903      	ldr	r1, [pc, #12]	; (8007f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f7a:	5ccb      	ldrb	r3, [r1, r3]
 8007f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	40023800 	.word	0x40023800
 8007f88:	0800b464 	.word	0x0800b464

08007f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f90:	f7ff ffdc 	bl	8007f4c <HAL_RCC_GetHCLKFreq>
 8007f94:	4602      	mov	r2, r0
 8007f96:	4b05      	ldr	r3, [pc, #20]	; (8007fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	0b5b      	lsrs	r3, r3, #13
 8007f9c:	f003 0307 	and.w	r3, r3, #7
 8007fa0:	4903      	ldr	r1, [pc, #12]	; (8007fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fa2:	5ccb      	ldrb	r3, [r1, r3]
 8007fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	40023800 	.word	0x40023800
 8007fb0:	0800b464 	.word	0x0800b464

08007fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fb8:	b0ae      	sub	sp, #184	; 0xb8
 8007fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fda:	4bcb      	ldr	r3, [pc, #812]	; (8008308 <HAL_RCC_GetSysClockFreq+0x354>)
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f003 030c 	and.w	r3, r3, #12
 8007fe2:	2b0c      	cmp	r3, #12
 8007fe4:	f200 8206 	bhi.w	80083f4 <HAL_RCC_GetSysClockFreq+0x440>
 8007fe8:	a201      	add	r2, pc, #4	; (adr r2, 8007ff0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fee:	bf00      	nop
 8007ff0:	08008025 	.word	0x08008025
 8007ff4:	080083f5 	.word	0x080083f5
 8007ff8:	080083f5 	.word	0x080083f5
 8007ffc:	080083f5 	.word	0x080083f5
 8008000:	0800802d 	.word	0x0800802d
 8008004:	080083f5 	.word	0x080083f5
 8008008:	080083f5 	.word	0x080083f5
 800800c:	080083f5 	.word	0x080083f5
 8008010:	08008035 	.word	0x08008035
 8008014:	080083f5 	.word	0x080083f5
 8008018:	080083f5 	.word	0x080083f5
 800801c:	080083f5 	.word	0x080083f5
 8008020:	08008225 	.word	0x08008225
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008024:	4bb9      	ldr	r3, [pc, #740]	; (800830c <HAL_RCC_GetSysClockFreq+0x358>)
 8008026:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800802a:	e1e7      	b.n	80083fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800802c:	4bb8      	ldr	r3, [pc, #736]	; (8008310 <HAL_RCC_GetSysClockFreq+0x35c>)
 800802e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008032:	e1e3      	b.n	80083fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008034:	4bb4      	ldr	r3, [pc, #720]	; (8008308 <HAL_RCC_GetSysClockFreq+0x354>)
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800803c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008040:	4bb1      	ldr	r3, [pc, #708]	; (8008308 <HAL_RCC_GetSysClockFreq+0x354>)
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d071      	beq.n	8008130 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800804c:	4bae      	ldr	r3, [pc, #696]	; (8008308 <HAL_RCC_GetSysClockFreq+0x354>)
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	099b      	lsrs	r3, r3, #6
 8008052:	2200      	movs	r2, #0
 8008054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008058:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800805c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008064:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008068:	2300      	movs	r3, #0
 800806a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800806e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008072:	4622      	mov	r2, r4
 8008074:	462b      	mov	r3, r5
 8008076:	f04f 0000 	mov.w	r0, #0
 800807a:	f04f 0100 	mov.w	r1, #0
 800807e:	0159      	lsls	r1, r3, #5
 8008080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008084:	0150      	lsls	r0, r2, #5
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	4621      	mov	r1, r4
 800808c:	1a51      	subs	r1, r2, r1
 800808e:	6439      	str	r1, [r7, #64]	; 0x40
 8008090:	4629      	mov	r1, r5
 8008092:	eb63 0301 	sbc.w	r3, r3, r1
 8008096:	647b      	str	r3, [r7, #68]	; 0x44
 8008098:	f04f 0200 	mov.w	r2, #0
 800809c:	f04f 0300 	mov.w	r3, #0
 80080a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80080a4:	4649      	mov	r1, r9
 80080a6:	018b      	lsls	r3, r1, #6
 80080a8:	4641      	mov	r1, r8
 80080aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80080ae:	4641      	mov	r1, r8
 80080b0:	018a      	lsls	r2, r1, #6
 80080b2:	4641      	mov	r1, r8
 80080b4:	1a51      	subs	r1, r2, r1
 80080b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80080b8:	4649      	mov	r1, r9
 80080ba:	eb63 0301 	sbc.w	r3, r3, r1
 80080be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080c0:	f04f 0200 	mov.w	r2, #0
 80080c4:	f04f 0300 	mov.w	r3, #0
 80080c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80080cc:	4649      	mov	r1, r9
 80080ce:	00cb      	lsls	r3, r1, #3
 80080d0:	4641      	mov	r1, r8
 80080d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080d6:	4641      	mov	r1, r8
 80080d8:	00ca      	lsls	r2, r1, #3
 80080da:	4610      	mov	r0, r2
 80080dc:	4619      	mov	r1, r3
 80080de:	4603      	mov	r3, r0
 80080e0:	4622      	mov	r2, r4
 80080e2:	189b      	adds	r3, r3, r2
 80080e4:	633b      	str	r3, [r7, #48]	; 0x30
 80080e6:	462b      	mov	r3, r5
 80080e8:	460a      	mov	r2, r1
 80080ea:	eb42 0303 	adc.w	r3, r2, r3
 80080ee:	637b      	str	r3, [r7, #52]	; 0x34
 80080f0:	f04f 0200 	mov.w	r2, #0
 80080f4:	f04f 0300 	mov.w	r3, #0
 80080f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80080fc:	4629      	mov	r1, r5
 80080fe:	024b      	lsls	r3, r1, #9
 8008100:	4621      	mov	r1, r4
 8008102:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008106:	4621      	mov	r1, r4
 8008108:	024a      	lsls	r2, r1, #9
 800810a:	4610      	mov	r0, r2
 800810c:	4619      	mov	r1, r3
 800810e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008112:	2200      	movs	r2, #0
 8008114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008118:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800811c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008120:	f7f8 fc70 	bl	8000a04 <__aeabi_uldivmod>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	4613      	mov	r3, r2
 800812a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800812e:	e067      	b.n	8008200 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008130:	4b75      	ldr	r3, [pc, #468]	; (8008308 <HAL_RCC_GetSysClockFreq+0x354>)
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	099b      	lsrs	r3, r3, #6
 8008136:	2200      	movs	r2, #0
 8008138:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800813c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008140:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008148:	67bb      	str	r3, [r7, #120]	; 0x78
 800814a:	2300      	movs	r3, #0
 800814c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800814e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008152:	4622      	mov	r2, r4
 8008154:	462b      	mov	r3, r5
 8008156:	f04f 0000 	mov.w	r0, #0
 800815a:	f04f 0100 	mov.w	r1, #0
 800815e:	0159      	lsls	r1, r3, #5
 8008160:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008164:	0150      	lsls	r0, r2, #5
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4621      	mov	r1, r4
 800816c:	1a51      	subs	r1, r2, r1
 800816e:	62b9      	str	r1, [r7, #40]	; 0x28
 8008170:	4629      	mov	r1, r5
 8008172:	eb63 0301 	sbc.w	r3, r3, r1
 8008176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008178:	f04f 0200 	mov.w	r2, #0
 800817c:	f04f 0300 	mov.w	r3, #0
 8008180:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008184:	4649      	mov	r1, r9
 8008186:	018b      	lsls	r3, r1, #6
 8008188:	4641      	mov	r1, r8
 800818a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800818e:	4641      	mov	r1, r8
 8008190:	018a      	lsls	r2, r1, #6
 8008192:	4641      	mov	r1, r8
 8008194:	ebb2 0a01 	subs.w	sl, r2, r1
 8008198:	4649      	mov	r1, r9
 800819a:	eb63 0b01 	sbc.w	fp, r3, r1
 800819e:	f04f 0200 	mov.w	r2, #0
 80081a2:	f04f 0300 	mov.w	r3, #0
 80081a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80081aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80081ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081b2:	4692      	mov	sl, r2
 80081b4:	469b      	mov	fp, r3
 80081b6:	4623      	mov	r3, r4
 80081b8:	eb1a 0303 	adds.w	r3, sl, r3
 80081bc:	623b      	str	r3, [r7, #32]
 80081be:	462b      	mov	r3, r5
 80081c0:	eb4b 0303 	adc.w	r3, fp, r3
 80081c4:	627b      	str	r3, [r7, #36]	; 0x24
 80081c6:	f04f 0200 	mov.w	r2, #0
 80081ca:	f04f 0300 	mov.w	r3, #0
 80081ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80081d2:	4629      	mov	r1, r5
 80081d4:	028b      	lsls	r3, r1, #10
 80081d6:	4621      	mov	r1, r4
 80081d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80081dc:	4621      	mov	r1, r4
 80081de:	028a      	lsls	r2, r1, #10
 80081e0:	4610      	mov	r0, r2
 80081e2:	4619      	mov	r1, r3
 80081e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081e8:	2200      	movs	r2, #0
 80081ea:	673b      	str	r3, [r7, #112]	; 0x70
 80081ec:	677a      	str	r2, [r7, #116]	; 0x74
 80081ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80081f2:	f7f8 fc07 	bl	8000a04 <__aeabi_uldivmod>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	4613      	mov	r3, r2
 80081fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008200:	4b41      	ldr	r3, [pc, #260]	; (8008308 <HAL_RCC_GetSysClockFreq+0x354>)
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	0c1b      	lsrs	r3, r3, #16
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	3301      	adds	r3, #1
 800820c:	005b      	lsls	r3, r3, #1
 800820e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8008212:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008216:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800821a:	fbb2 f3f3 	udiv	r3, r2, r3
 800821e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008222:	e0eb      	b.n	80083fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008224:	4b38      	ldr	r3, [pc, #224]	; (8008308 <HAL_RCC_GetSysClockFreq+0x354>)
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800822c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008230:	4b35      	ldr	r3, [pc, #212]	; (8008308 <HAL_RCC_GetSysClockFreq+0x354>)
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d06b      	beq.n	8008314 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800823c:	4b32      	ldr	r3, [pc, #200]	; (8008308 <HAL_RCC_GetSysClockFreq+0x354>)
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	099b      	lsrs	r3, r3, #6
 8008242:	2200      	movs	r2, #0
 8008244:	66bb      	str	r3, [r7, #104]	; 0x68
 8008246:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800824a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800824e:	663b      	str	r3, [r7, #96]	; 0x60
 8008250:	2300      	movs	r3, #0
 8008252:	667b      	str	r3, [r7, #100]	; 0x64
 8008254:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008258:	4622      	mov	r2, r4
 800825a:	462b      	mov	r3, r5
 800825c:	f04f 0000 	mov.w	r0, #0
 8008260:	f04f 0100 	mov.w	r1, #0
 8008264:	0159      	lsls	r1, r3, #5
 8008266:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800826a:	0150      	lsls	r0, r2, #5
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4621      	mov	r1, r4
 8008272:	1a51      	subs	r1, r2, r1
 8008274:	61b9      	str	r1, [r7, #24]
 8008276:	4629      	mov	r1, r5
 8008278:	eb63 0301 	sbc.w	r3, r3, r1
 800827c:	61fb      	str	r3, [r7, #28]
 800827e:	f04f 0200 	mov.w	r2, #0
 8008282:	f04f 0300 	mov.w	r3, #0
 8008286:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800828a:	4659      	mov	r1, fp
 800828c:	018b      	lsls	r3, r1, #6
 800828e:	4651      	mov	r1, sl
 8008290:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008294:	4651      	mov	r1, sl
 8008296:	018a      	lsls	r2, r1, #6
 8008298:	4651      	mov	r1, sl
 800829a:	ebb2 0801 	subs.w	r8, r2, r1
 800829e:	4659      	mov	r1, fp
 80082a0:	eb63 0901 	sbc.w	r9, r3, r1
 80082a4:	f04f 0200 	mov.w	r2, #0
 80082a8:	f04f 0300 	mov.w	r3, #0
 80082ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082b8:	4690      	mov	r8, r2
 80082ba:	4699      	mov	r9, r3
 80082bc:	4623      	mov	r3, r4
 80082be:	eb18 0303 	adds.w	r3, r8, r3
 80082c2:	613b      	str	r3, [r7, #16]
 80082c4:	462b      	mov	r3, r5
 80082c6:	eb49 0303 	adc.w	r3, r9, r3
 80082ca:	617b      	str	r3, [r7, #20]
 80082cc:	f04f 0200 	mov.w	r2, #0
 80082d0:	f04f 0300 	mov.w	r3, #0
 80082d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80082d8:	4629      	mov	r1, r5
 80082da:	024b      	lsls	r3, r1, #9
 80082dc:	4621      	mov	r1, r4
 80082de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80082e2:	4621      	mov	r1, r4
 80082e4:	024a      	lsls	r2, r1, #9
 80082e6:	4610      	mov	r0, r2
 80082e8:	4619      	mov	r1, r3
 80082ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082ee:	2200      	movs	r2, #0
 80082f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80082f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80082f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082f8:	f7f8 fb84 	bl	8000a04 <__aeabi_uldivmod>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4613      	mov	r3, r2
 8008302:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008306:	e065      	b.n	80083d4 <HAL_RCC_GetSysClockFreq+0x420>
 8008308:	40023800 	.word	0x40023800
 800830c:	00f42400 	.word	0x00f42400
 8008310:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008314:	4b3d      	ldr	r3, [pc, #244]	; (800840c <HAL_RCC_GetSysClockFreq+0x458>)
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	099b      	lsrs	r3, r3, #6
 800831a:	2200      	movs	r2, #0
 800831c:	4618      	mov	r0, r3
 800831e:	4611      	mov	r1, r2
 8008320:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008324:	653b      	str	r3, [r7, #80]	; 0x50
 8008326:	2300      	movs	r3, #0
 8008328:	657b      	str	r3, [r7, #84]	; 0x54
 800832a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800832e:	4642      	mov	r2, r8
 8008330:	464b      	mov	r3, r9
 8008332:	f04f 0000 	mov.w	r0, #0
 8008336:	f04f 0100 	mov.w	r1, #0
 800833a:	0159      	lsls	r1, r3, #5
 800833c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008340:	0150      	lsls	r0, r2, #5
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	4641      	mov	r1, r8
 8008348:	1a51      	subs	r1, r2, r1
 800834a:	60b9      	str	r1, [r7, #8]
 800834c:	4649      	mov	r1, r9
 800834e:	eb63 0301 	sbc.w	r3, r3, r1
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	f04f 0200 	mov.w	r2, #0
 8008358:	f04f 0300 	mov.w	r3, #0
 800835c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008360:	4659      	mov	r1, fp
 8008362:	018b      	lsls	r3, r1, #6
 8008364:	4651      	mov	r1, sl
 8008366:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800836a:	4651      	mov	r1, sl
 800836c:	018a      	lsls	r2, r1, #6
 800836e:	4651      	mov	r1, sl
 8008370:	1a54      	subs	r4, r2, r1
 8008372:	4659      	mov	r1, fp
 8008374:	eb63 0501 	sbc.w	r5, r3, r1
 8008378:	f04f 0200 	mov.w	r2, #0
 800837c:	f04f 0300 	mov.w	r3, #0
 8008380:	00eb      	lsls	r3, r5, #3
 8008382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008386:	00e2      	lsls	r2, r4, #3
 8008388:	4614      	mov	r4, r2
 800838a:	461d      	mov	r5, r3
 800838c:	4643      	mov	r3, r8
 800838e:	18e3      	adds	r3, r4, r3
 8008390:	603b      	str	r3, [r7, #0]
 8008392:	464b      	mov	r3, r9
 8008394:	eb45 0303 	adc.w	r3, r5, r3
 8008398:	607b      	str	r3, [r7, #4]
 800839a:	f04f 0200 	mov.w	r2, #0
 800839e:	f04f 0300 	mov.w	r3, #0
 80083a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80083a6:	4629      	mov	r1, r5
 80083a8:	028b      	lsls	r3, r1, #10
 80083aa:	4621      	mov	r1, r4
 80083ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80083b0:	4621      	mov	r1, r4
 80083b2:	028a      	lsls	r2, r1, #10
 80083b4:	4610      	mov	r0, r2
 80083b6:	4619      	mov	r1, r3
 80083b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083bc:	2200      	movs	r2, #0
 80083be:	64bb      	str	r3, [r7, #72]	; 0x48
 80083c0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80083c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80083c6:	f7f8 fb1d 	bl	8000a04 <__aeabi_uldivmod>
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	4613      	mov	r3, r2
 80083d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80083d4:	4b0d      	ldr	r3, [pc, #52]	; (800840c <HAL_RCC_GetSysClockFreq+0x458>)
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	0f1b      	lsrs	r3, r3, #28
 80083da:	f003 0307 	and.w	r3, r3, #7
 80083de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80083e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80083ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80083f2:	e003      	b.n	80083fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80083f4:	4b06      	ldr	r3, [pc, #24]	; (8008410 <HAL_RCC_GetSysClockFreq+0x45c>)
 80083f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80083fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80083fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008400:	4618      	mov	r0, r3
 8008402:	37b8      	adds	r7, #184	; 0xb8
 8008404:	46bd      	mov	sp, r7
 8008406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800840a:	bf00      	nop
 800840c:	40023800 	.word	0x40023800
 8008410:	00f42400 	.word	0x00f42400

08008414 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e28d      	b.n	8008942 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 8083 	beq.w	800853a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008434:	4b94      	ldr	r3, [pc, #592]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	f003 030c 	and.w	r3, r3, #12
 800843c:	2b04      	cmp	r3, #4
 800843e:	d019      	beq.n	8008474 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008440:	4b91      	ldr	r3, [pc, #580]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008448:	2b08      	cmp	r3, #8
 800844a:	d106      	bne.n	800845a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800844c:	4b8e      	ldr	r3, [pc, #568]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008458:	d00c      	beq.n	8008474 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800845a:	4b8b      	ldr	r3, [pc, #556]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008462:	2b0c      	cmp	r3, #12
 8008464:	d112      	bne.n	800848c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008466:	4b88      	ldr	r3, [pc, #544]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800846e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008472:	d10b      	bne.n	800848c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008474:	4b84      	ldr	r3, [pc, #528]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d05b      	beq.n	8008538 <HAL_RCC_OscConfig+0x124>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d157      	bne.n	8008538 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e25a      	b.n	8008942 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008494:	d106      	bne.n	80084a4 <HAL_RCC_OscConfig+0x90>
 8008496:	4b7c      	ldr	r3, [pc, #496]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a7b      	ldr	r2, [pc, #492]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 800849c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	e01d      	b.n	80084e0 <HAL_RCC_OscConfig+0xcc>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084ac:	d10c      	bne.n	80084c8 <HAL_RCC_OscConfig+0xb4>
 80084ae:	4b76      	ldr	r3, [pc, #472]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a75      	ldr	r2, [pc, #468]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 80084b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	4b73      	ldr	r3, [pc, #460]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a72      	ldr	r2, [pc, #456]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 80084c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084c4:	6013      	str	r3, [r2, #0]
 80084c6:	e00b      	b.n	80084e0 <HAL_RCC_OscConfig+0xcc>
 80084c8:	4b6f      	ldr	r3, [pc, #444]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a6e      	ldr	r2, [pc, #440]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 80084ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	4b6c      	ldr	r3, [pc, #432]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a6b      	ldr	r2, [pc, #428]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 80084da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d013      	beq.n	8008510 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e8:	f7fe f806 	bl	80064f8 <HAL_GetTick>
 80084ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084ee:	e008      	b.n	8008502 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084f0:	f7fe f802 	bl	80064f8 <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	2b64      	cmp	r3, #100	; 0x64
 80084fc:	d901      	bls.n	8008502 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e21f      	b.n	8008942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008502:	4b61      	ldr	r3, [pc, #388]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0f0      	beq.n	80084f0 <HAL_RCC_OscConfig+0xdc>
 800850e:	e014      	b.n	800853a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008510:	f7fd fff2 	bl	80064f8 <HAL_GetTick>
 8008514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008516:	e008      	b.n	800852a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008518:	f7fd ffee 	bl	80064f8 <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	2b64      	cmp	r3, #100	; 0x64
 8008524:	d901      	bls.n	800852a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e20b      	b.n	8008942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800852a:	4b57      	ldr	r3, [pc, #348]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1f0      	bne.n	8008518 <HAL_RCC_OscConfig+0x104>
 8008536:	e000      	b.n	800853a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0302 	and.w	r3, r3, #2
 8008542:	2b00      	cmp	r3, #0
 8008544:	d06f      	beq.n	8008626 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008546:	4b50      	ldr	r3, [pc, #320]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f003 030c 	and.w	r3, r3, #12
 800854e:	2b00      	cmp	r3, #0
 8008550:	d017      	beq.n	8008582 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008552:	4b4d      	ldr	r3, [pc, #308]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800855a:	2b08      	cmp	r3, #8
 800855c:	d105      	bne.n	800856a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800855e:	4b4a      	ldr	r3, [pc, #296]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00b      	beq.n	8008582 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800856a:	4b47      	ldr	r3, [pc, #284]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008572:	2b0c      	cmp	r3, #12
 8008574:	d11c      	bne.n	80085b0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008576:	4b44      	ldr	r3, [pc, #272]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d116      	bne.n	80085b0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008582:	4b41      	ldr	r3, [pc, #260]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d005      	beq.n	800859a <HAL_RCC_OscConfig+0x186>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d001      	beq.n	800859a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e1d3      	b.n	8008942 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800859a:	4b3b      	ldr	r3, [pc, #236]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	00db      	lsls	r3, r3, #3
 80085a8:	4937      	ldr	r1, [pc, #220]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085ae:	e03a      	b.n	8008626 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d020      	beq.n	80085fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085b8:	4b34      	ldr	r3, [pc, #208]	; (800868c <HAL_RCC_OscConfig+0x278>)
 80085ba:	2201      	movs	r2, #1
 80085bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085be:	f7fd ff9b 	bl	80064f8 <HAL_GetTick>
 80085c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085c4:	e008      	b.n	80085d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085c6:	f7fd ff97 	bl	80064f8 <HAL_GetTick>
 80085ca:	4602      	mov	r2, r0
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d901      	bls.n	80085d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e1b4      	b.n	8008942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085d8:	4b2b      	ldr	r3, [pc, #172]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0302 	and.w	r3, r3, #2
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d0f0      	beq.n	80085c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085e4:	4b28      	ldr	r3, [pc, #160]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	00db      	lsls	r3, r3, #3
 80085f2:	4925      	ldr	r1, [pc, #148]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 80085f4:	4313      	orrs	r3, r2
 80085f6:	600b      	str	r3, [r1, #0]
 80085f8:	e015      	b.n	8008626 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085fa:	4b24      	ldr	r3, [pc, #144]	; (800868c <HAL_RCC_OscConfig+0x278>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008600:	f7fd ff7a 	bl	80064f8 <HAL_GetTick>
 8008604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008606:	e008      	b.n	800861a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008608:	f7fd ff76 	bl	80064f8 <HAL_GetTick>
 800860c:	4602      	mov	r2, r0
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	2b02      	cmp	r3, #2
 8008614:	d901      	bls.n	800861a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e193      	b.n	8008942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800861a:	4b1b      	ldr	r3, [pc, #108]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0302 	and.w	r3, r3, #2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1f0      	bne.n	8008608 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0308 	and.w	r3, r3, #8
 800862e:	2b00      	cmp	r3, #0
 8008630:	d036      	beq.n	80086a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d016      	beq.n	8008668 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800863a:	4b15      	ldr	r3, [pc, #84]	; (8008690 <HAL_RCC_OscConfig+0x27c>)
 800863c:	2201      	movs	r2, #1
 800863e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008640:	f7fd ff5a 	bl	80064f8 <HAL_GetTick>
 8008644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008646:	e008      	b.n	800865a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008648:	f7fd ff56 	bl	80064f8 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	2b02      	cmp	r3, #2
 8008654:	d901      	bls.n	800865a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e173      	b.n	8008942 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800865a:	4b0b      	ldr	r3, [pc, #44]	; (8008688 <HAL_RCC_OscConfig+0x274>)
 800865c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d0f0      	beq.n	8008648 <HAL_RCC_OscConfig+0x234>
 8008666:	e01b      	b.n	80086a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008668:	4b09      	ldr	r3, [pc, #36]	; (8008690 <HAL_RCC_OscConfig+0x27c>)
 800866a:	2200      	movs	r2, #0
 800866c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800866e:	f7fd ff43 	bl	80064f8 <HAL_GetTick>
 8008672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008674:	e00e      	b.n	8008694 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008676:	f7fd ff3f 	bl	80064f8 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	2b02      	cmp	r3, #2
 8008682:	d907      	bls.n	8008694 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e15c      	b.n	8008942 <HAL_RCC_OscConfig+0x52e>
 8008688:	40023800 	.word	0x40023800
 800868c:	42470000 	.word	0x42470000
 8008690:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008694:	4b8a      	ldr	r3, [pc, #552]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 8008696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1ea      	bne.n	8008676 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0304 	and.w	r3, r3, #4
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 8097 	beq.w	80087dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086ae:	2300      	movs	r3, #0
 80086b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086b2:	4b83      	ldr	r3, [pc, #524]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10f      	bne.n	80086de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086be:	2300      	movs	r3, #0
 80086c0:	60bb      	str	r3, [r7, #8]
 80086c2:	4b7f      	ldr	r3, [pc, #508]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 80086c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c6:	4a7e      	ldr	r2, [pc, #504]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 80086c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086cc:	6413      	str	r3, [r2, #64]	; 0x40
 80086ce:	4b7c      	ldr	r3, [pc, #496]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 80086d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086d6:	60bb      	str	r3, [r7, #8]
 80086d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086da:	2301      	movs	r3, #1
 80086dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086de:	4b79      	ldr	r3, [pc, #484]	; (80088c4 <HAL_RCC_OscConfig+0x4b0>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d118      	bne.n	800871c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80086ea:	4b76      	ldr	r3, [pc, #472]	; (80088c4 <HAL_RCC_OscConfig+0x4b0>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a75      	ldr	r2, [pc, #468]	; (80088c4 <HAL_RCC_OscConfig+0x4b0>)
 80086f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086f6:	f7fd feff 	bl	80064f8 <HAL_GetTick>
 80086fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086fc:	e008      	b.n	8008710 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086fe:	f7fd fefb 	bl	80064f8 <HAL_GetTick>
 8008702:	4602      	mov	r2, r0
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	2b02      	cmp	r3, #2
 800870a:	d901      	bls.n	8008710 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e118      	b.n	8008942 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008710:	4b6c      	ldr	r3, [pc, #432]	; (80088c4 <HAL_RCC_OscConfig+0x4b0>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008718:	2b00      	cmp	r3, #0
 800871a:	d0f0      	beq.n	80086fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d106      	bne.n	8008732 <HAL_RCC_OscConfig+0x31e>
 8008724:	4b66      	ldr	r3, [pc, #408]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 8008726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008728:	4a65      	ldr	r2, [pc, #404]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 800872a:	f043 0301 	orr.w	r3, r3, #1
 800872e:	6713      	str	r3, [r2, #112]	; 0x70
 8008730:	e01c      	b.n	800876c <HAL_RCC_OscConfig+0x358>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	2b05      	cmp	r3, #5
 8008738:	d10c      	bne.n	8008754 <HAL_RCC_OscConfig+0x340>
 800873a:	4b61      	ldr	r3, [pc, #388]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 800873c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800873e:	4a60      	ldr	r2, [pc, #384]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 8008740:	f043 0304 	orr.w	r3, r3, #4
 8008744:	6713      	str	r3, [r2, #112]	; 0x70
 8008746:	4b5e      	ldr	r3, [pc, #376]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 8008748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800874a:	4a5d      	ldr	r2, [pc, #372]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 800874c:	f043 0301 	orr.w	r3, r3, #1
 8008750:	6713      	str	r3, [r2, #112]	; 0x70
 8008752:	e00b      	b.n	800876c <HAL_RCC_OscConfig+0x358>
 8008754:	4b5a      	ldr	r3, [pc, #360]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 8008756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008758:	4a59      	ldr	r2, [pc, #356]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 800875a:	f023 0301 	bic.w	r3, r3, #1
 800875e:	6713      	str	r3, [r2, #112]	; 0x70
 8008760:	4b57      	ldr	r3, [pc, #348]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 8008762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008764:	4a56      	ldr	r2, [pc, #344]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 8008766:	f023 0304 	bic.w	r3, r3, #4
 800876a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d015      	beq.n	80087a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008774:	f7fd fec0 	bl	80064f8 <HAL_GetTick>
 8008778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800877a:	e00a      	b.n	8008792 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800877c:	f7fd febc 	bl	80064f8 <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	f241 3288 	movw	r2, #5000	; 0x1388
 800878a:	4293      	cmp	r3, r2
 800878c:	d901      	bls.n	8008792 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800878e:	2303      	movs	r3, #3
 8008790:	e0d7      	b.n	8008942 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008792:	4b4b      	ldr	r3, [pc, #300]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 8008794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008796:	f003 0302 	and.w	r3, r3, #2
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0ee      	beq.n	800877c <HAL_RCC_OscConfig+0x368>
 800879e:	e014      	b.n	80087ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087a0:	f7fd feaa 	bl	80064f8 <HAL_GetTick>
 80087a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087a6:	e00a      	b.n	80087be <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087a8:	f7fd fea6 	bl	80064f8 <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d901      	bls.n	80087be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e0c1      	b.n	8008942 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087be:	4b40      	ldr	r3, [pc, #256]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 80087c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c2:	f003 0302 	and.w	r3, r3, #2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1ee      	bne.n	80087a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d105      	bne.n	80087dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087d0:	4b3b      	ldr	r3, [pc, #236]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 80087d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d4:	4a3a      	ldr	r2, [pc, #232]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 80087d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 80ad 	beq.w	8008940 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80087e6:	4b36      	ldr	r3, [pc, #216]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	f003 030c 	and.w	r3, r3, #12
 80087ee:	2b08      	cmp	r3, #8
 80087f0:	d060      	beq.n	80088b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d145      	bne.n	8008886 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087fa:	4b33      	ldr	r3, [pc, #204]	; (80088c8 <HAL_RCC_OscConfig+0x4b4>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008800:	f7fd fe7a 	bl	80064f8 <HAL_GetTick>
 8008804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008806:	e008      	b.n	800881a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008808:	f7fd fe76 	bl	80064f8 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b02      	cmp	r3, #2
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e093      	b.n	8008942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800881a:	4b29      	ldr	r3, [pc, #164]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1f0      	bne.n	8008808 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69da      	ldr	r2, [r3, #28]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	431a      	orrs	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008834:	019b      	lsls	r3, r3, #6
 8008836:	431a      	orrs	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883c:	085b      	lsrs	r3, r3, #1
 800883e:	3b01      	subs	r3, #1
 8008840:	041b      	lsls	r3, r3, #16
 8008842:	431a      	orrs	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008848:	061b      	lsls	r3, r3, #24
 800884a:	431a      	orrs	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008850:	071b      	lsls	r3, r3, #28
 8008852:	491b      	ldr	r1, [pc, #108]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 8008854:	4313      	orrs	r3, r2
 8008856:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008858:	4b1b      	ldr	r3, [pc, #108]	; (80088c8 <HAL_RCC_OscConfig+0x4b4>)
 800885a:	2201      	movs	r2, #1
 800885c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800885e:	f7fd fe4b 	bl	80064f8 <HAL_GetTick>
 8008862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008864:	e008      	b.n	8008878 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008866:	f7fd fe47 	bl	80064f8 <HAL_GetTick>
 800886a:	4602      	mov	r2, r0
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	2b02      	cmp	r3, #2
 8008872:	d901      	bls.n	8008878 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008874:	2303      	movs	r3, #3
 8008876:	e064      	b.n	8008942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008878:	4b11      	ldr	r3, [pc, #68]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d0f0      	beq.n	8008866 <HAL_RCC_OscConfig+0x452>
 8008884:	e05c      	b.n	8008940 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008886:	4b10      	ldr	r3, [pc, #64]	; (80088c8 <HAL_RCC_OscConfig+0x4b4>)
 8008888:	2200      	movs	r2, #0
 800888a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800888c:	f7fd fe34 	bl	80064f8 <HAL_GetTick>
 8008890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008892:	e008      	b.n	80088a6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008894:	f7fd fe30 	bl	80064f8 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e04d      	b.n	8008942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088a6:	4b06      	ldr	r3, [pc, #24]	; (80088c0 <HAL_RCC_OscConfig+0x4ac>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1f0      	bne.n	8008894 <HAL_RCC_OscConfig+0x480>
 80088b2:	e045      	b.n	8008940 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d107      	bne.n	80088cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e040      	b.n	8008942 <HAL_RCC_OscConfig+0x52e>
 80088c0:	40023800 	.word	0x40023800
 80088c4:	40007000 	.word	0x40007000
 80088c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80088cc:	4b1f      	ldr	r3, [pc, #124]	; (800894c <HAL_RCC_OscConfig+0x538>)
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d030      	beq.n	800893c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d129      	bne.n	800893c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d122      	bne.n	800893c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80088fc:	4013      	ands	r3, r2
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008902:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008904:	4293      	cmp	r3, r2
 8008906:	d119      	bne.n	800893c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008912:	085b      	lsrs	r3, r3, #1
 8008914:	3b01      	subs	r3, #1
 8008916:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008918:	429a      	cmp	r2, r3
 800891a:	d10f      	bne.n	800893c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008926:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008928:	429a      	cmp	r2, r3
 800892a:	d107      	bne.n	800893c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008936:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008938:	429a      	cmp	r2, r3
 800893a:	d001      	beq.n	8008940 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e000      	b.n	8008942 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	40023800 	.word	0x40023800

08008950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e041      	b.n	80089e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	d106      	bne.n	800897c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7fd f9ba 	bl	8005cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2202      	movs	r2, #2
 8008980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	3304      	adds	r3, #4
 800898c:	4619      	mov	r1, r3
 800898e:	4610      	mov	r0, r2
 8008990:	f000 fba8 	bl	80090e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
	...

080089f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d001      	beq.n	8008a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e04e      	b.n	8008aa6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68da      	ldr	r2, [r3, #12]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f042 0201 	orr.w	r2, r2, #1
 8008a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a23      	ldr	r2, [pc, #140]	; (8008ab4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d022      	beq.n	8008a70 <HAL_TIM_Base_Start_IT+0x80>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a32:	d01d      	beq.n	8008a70 <HAL_TIM_Base_Start_IT+0x80>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a1f      	ldr	r2, [pc, #124]	; (8008ab8 <HAL_TIM_Base_Start_IT+0xc8>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d018      	beq.n	8008a70 <HAL_TIM_Base_Start_IT+0x80>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a1e      	ldr	r2, [pc, #120]	; (8008abc <HAL_TIM_Base_Start_IT+0xcc>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d013      	beq.n	8008a70 <HAL_TIM_Base_Start_IT+0x80>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a1c      	ldr	r2, [pc, #112]	; (8008ac0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d00e      	beq.n	8008a70 <HAL_TIM_Base_Start_IT+0x80>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a1b      	ldr	r2, [pc, #108]	; (8008ac4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d009      	beq.n	8008a70 <HAL_TIM_Base_Start_IT+0x80>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a19      	ldr	r2, [pc, #100]	; (8008ac8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d004      	beq.n	8008a70 <HAL_TIM_Base_Start_IT+0x80>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a18      	ldr	r2, [pc, #96]	; (8008acc <HAL_TIM_Base_Start_IT+0xdc>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d111      	bne.n	8008a94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f003 0307 	and.w	r3, r3, #7
 8008a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2b06      	cmp	r3, #6
 8008a80:	d010      	beq.n	8008aa4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f042 0201 	orr.w	r2, r2, #1
 8008a90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a92:	e007      	b.n	8008aa4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f042 0201 	orr.w	r2, r2, #1
 8008aa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	40010000 	.word	0x40010000
 8008ab8:	40000400 	.word	0x40000400
 8008abc:	40000800 	.word	0x40000800
 8008ac0:	40000c00 	.word	0x40000c00
 8008ac4:	40010400 	.word	0x40010400
 8008ac8:	40014000 	.word	0x40014000
 8008acc:	40001800 	.word	0x40001800

08008ad0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d101      	bne.n	8008ae2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e041      	b.n	8008b66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d106      	bne.n	8008afc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7fd f8c4 	bl	8005c84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2202      	movs	r2, #2
 8008b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4610      	mov	r0, r2
 8008b10:	f000 fae8 	bl	80090e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
	...

08008b70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d109      	bne.n	8008b94 <HAL_TIM_PWM_Start+0x24>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	bf14      	ite	ne
 8008b8c:	2301      	movne	r3, #1
 8008b8e:	2300      	moveq	r3, #0
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	e022      	b.n	8008bda <HAL_TIM_PWM_Start+0x6a>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2b04      	cmp	r3, #4
 8008b98:	d109      	bne.n	8008bae <HAL_TIM_PWM_Start+0x3e>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	bf14      	ite	ne
 8008ba6:	2301      	movne	r3, #1
 8008ba8:	2300      	moveq	r3, #0
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	e015      	b.n	8008bda <HAL_TIM_PWM_Start+0x6a>
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	2b08      	cmp	r3, #8
 8008bb2:	d109      	bne.n	8008bc8 <HAL_TIM_PWM_Start+0x58>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	bf14      	ite	ne
 8008bc0:	2301      	movne	r3, #1
 8008bc2:	2300      	moveq	r3, #0
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	e008      	b.n	8008bda <HAL_TIM_PWM_Start+0x6a>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	bf14      	ite	ne
 8008bd4:	2301      	movne	r3, #1
 8008bd6:	2300      	moveq	r3, #0
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d001      	beq.n	8008be2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e07c      	b.n	8008cdc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d104      	bne.n	8008bf2 <HAL_TIM_PWM_Start+0x82>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2202      	movs	r2, #2
 8008bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bf0:	e013      	b.n	8008c1a <HAL_TIM_PWM_Start+0xaa>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2b04      	cmp	r3, #4
 8008bf6:	d104      	bne.n	8008c02 <HAL_TIM_PWM_Start+0x92>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c00:	e00b      	b.n	8008c1a <HAL_TIM_PWM_Start+0xaa>
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	2b08      	cmp	r3, #8
 8008c06:	d104      	bne.n	8008c12 <HAL_TIM_PWM_Start+0xa2>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c10:	e003      	b.n	8008c1a <HAL_TIM_PWM_Start+0xaa>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2202      	movs	r2, #2
 8008c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 fcae 	bl	8009584 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a2d      	ldr	r2, [pc, #180]	; (8008ce4 <HAL_TIM_PWM_Start+0x174>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d004      	beq.n	8008c3c <HAL_TIM_PWM_Start+0xcc>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a2c      	ldr	r2, [pc, #176]	; (8008ce8 <HAL_TIM_PWM_Start+0x178>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d101      	bne.n	8008c40 <HAL_TIM_PWM_Start+0xd0>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e000      	b.n	8008c42 <HAL_TIM_PWM_Start+0xd2>
 8008c40:	2300      	movs	r3, #0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d007      	beq.n	8008c56 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a22      	ldr	r2, [pc, #136]	; (8008ce4 <HAL_TIM_PWM_Start+0x174>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d022      	beq.n	8008ca6 <HAL_TIM_PWM_Start+0x136>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c68:	d01d      	beq.n	8008ca6 <HAL_TIM_PWM_Start+0x136>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a1f      	ldr	r2, [pc, #124]	; (8008cec <HAL_TIM_PWM_Start+0x17c>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d018      	beq.n	8008ca6 <HAL_TIM_PWM_Start+0x136>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a1d      	ldr	r2, [pc, #116]	; (8008cf0 <HAL_TIM_PWM_Start+0x180>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d013      	beq.n	8008ca6 <HAL_TIM_PWM_Start+0x136>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a1c      	ldr	r2, [pc, #112]	; (8008cf4 <HAL_TIM_PWM_Start+0x184>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d00e      	beq.n	8008ca6 <HAL_TIM_PWM_Start+0x136>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a16      	ldr	r2, [pc, #88]	; (8008ce8 <HAL_TIM_PWM_Start+0x178>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d009      	beq.n	8008ca6 <HAL_TIM_PWM_Start+0x136>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a18      	ldr	r2, [pc, #96]	; (8008cf8 <HAL_TIM_PWM_Start+0x188>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d004      	beq.n	8008ca6 <HAL_TIM_PWM_Start+0x136>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a16      	ldr	r2, [pc, #88]	; (8008cfc <HAL_TIM_PWM_Start+0x18c>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d111      	bne.n	8008cca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	f003 0307 	and.w	r3, r3, #7
 8008cb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2b06      	cmp	r3, #6
 8008cb6:	d010      	beq.n	8008cda <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f042 0201 	orr.w	r2, r2, #1
 8008cc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cc8:	e007      	b.n	8008cda <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f042 0201 	orr.w	r2, r2, #1
 8008cd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	40010000 	.word	0x40010000
 8008ce8:	40010400 	.word	0x40010400
 8008cec:	40000400 	.word	0x40000400
 8008cf0:	40000800 	.word	0x40000800
 8008cf4:	40000c00 	.word	0x40000c00
 8008cf8:	40014000 	.word	0x40014000
 8008cfc:	40001800 	.word	0x40001800

08008d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	f003 0302 	and.w	r3, r3, #2
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d122      	bne.n	8008d5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	f003 0302 	and.w	r3, r3, #2
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d11b      	bne.n	8008d5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f06f 0202 	mvn.w	r2, #2
 8008d2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	f003 0303 	and.w	r3, r3, #3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f9b0 	bl	80090a8 <HAL_TIM_IC_CaptureCallback>
 8008d48:	e005      	b.n	8008d56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f9a2 	bl	8009094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f9b3 	bl	80090bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	f003 0304 	and.w	r3, r3, #4
 8008d66:	2b04      	cmp	r3, #4
 8008d68:	d122      	bne.n	8008db0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	f003 0304 	and.w	r3, r3, #4
 8008d74:	2b04      	cmp	r3, #4
 8008d76:	d11b      	bne.n	8008db0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f06f 0204 	mvn.w	r2, #4
 8008d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2202      	movs	r2, #2
 8008d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f986 	bl	80090a8 <HAL_TIM_IC_CaptureCallback>
 8008d9c:	e005      	b.n	8008daa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f978 	bl	8009094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f989 	bl	80090bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	f003 0308 	and.w	r3, r3, #8
 8008dba:	2b08      	cmp	r3, #8
 8008dbc:	d122      	bne.n	8008e04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f003 0308 	and.w	r3, r3, #8
 8008dc8:	2b08      	cmp	r3, #8
 8008dca:	d11b      	bne.n	8008e04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f06f 0208 	mvn.w	r2, #8
 8008dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2204      	movs	r2, #4
 8008dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	69db      	ldr	r3, [r3, #28]
 8008de2:	f003 0303 	and.w	r3, r3, #3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d003      	beq.n	8008df2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f95c 	bl	80090a8 <HAL_TIM_IC_CaptureCallback>
 8008df0:	e005      	b.n	8008dfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f94e 	bl	8009094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f95f 	bl	80090bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	f003 0310 	and.w	r3, r3, #16
 8008e0e:	2b10      	cmp	r3, #16
 8008e10:	d122      	bne.n	8008e58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f003 0310 	and.w	r3, r3, #16
 8008e1c:	2b10      	cmp	r3, #16
 8008e1e:	d11b      	bne.n	8008e58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f06f 0210 	mvn.w	r2, #16
 8008e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2208      	movs	r2, #8
 8008e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f932 	bl	80090a8 <HAL_TIM_IC_CaptureCallback>
 8008e44:	e005      	b.n	8008e52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f924 	bl	8009094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f935 	bl	80090bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	f003 0301 	and.w	r3, r3, #1
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d10e      	bne.n	8008e84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d107      	bne.n	8008e84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f06f 0201 	mvn.w	r2, #1
 8008e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7fc f8e8 	bl	8005054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e8e:	2b80      	cmp	r3, #128	; 0x80
 8008e90:	d10e      	bne.n	8008eb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e9c:	2b80      	cmp	r3, #128	; 0x80
 8008e9e:	d107      	bne.n	8008eb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fc16 	bl	80096dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eba:	2b40      	cmp	r3, #64	; 0x40
 8008ebc:	d10e      	bne.n	8008edc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec8:	2b40      	cmp	r3, #64	; 0x40
 8008eca:	d107      	bne.n	8008edc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f8fa 	bl	80090d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	f003 0320 	and.w	r3, r3, #32
 8008ee6:	2b20      	cmp	r3, #32
 8008ee8:	d10e      	bne.n	8008f08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	f003 0320 	and.w	r3, r3, #32
 8008ef4:	2b20      	cmp	r3, #32
 8008ef6:	d107      	bne.n	8008f08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f06f 0220 	mvn.w	r2, #32
 8008f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fbe0 	bl	80096c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f08:	bf00      	nop
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d101      	bne.n	8008f2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	e0ae      	b.n	800908c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b0c      	cmp	r3, #12
 8008f3a:	f200 809f 	bhi.w	800907c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008f3e:	a201      	add	r2, pc, #4	; (adr r2, 8008f44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f44:	08008f79 	.word	0x08008f79
 8008f48:	0800907d 	.word	0x0800907d
 8008f4c:	0800907d 	.word	0x0800907d
 8008f50:	0800907d 	.word	0x0800907d
 8008f54:	08008fb9 	.word	0x08008fb9
 8008f58:	0800907d 	.word	0x0800907d
 8008f5c:	0800907d 	.word	0x0800907d
 8008f60:	0800907d 	.word	0x0800907d
 8008f64:	08008ffb 	.word	0x08008ffb
 8008f68:	0800907d 	.word	0x0800907d
 8008f6c:	0800907d 	.word	0x0800907d
 8008f70:	0800907d 	.word	0x0800907d
 8008f74:	0800903b 	.word	0x0800903b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68b9      	ldr	r1, [r7, #8]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f000 f950 	bl	8009224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	699a      	ldr	r2, [r3, #24]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f042 0208 	orr.w	r2, r2, #8
 8008f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	699a      	ldr	r2, [r3, #24]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f022 0204 	bic.w	r2, r2, #4
 8008fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6999      	ldr	r1, [r3, #24]
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	691a      	ldr	r2, [r3, #16]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	619a      	str	r2, [r3, #24]
      break;
 8008fb6:	e064      	b.n	8009082 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68b9      	ldr	r1, [r7, #8]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 f9a0 	bl	8009304 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	699a      	ldr	r2, [r3, #24]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	699a      	ldr	r2, [r3, #24]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	6999      	ldr	r1, [r3, #24]
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	021a      	lsls	r2, r3, #8
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	619a      	str	r2, [r3, #24]
      break;
 8008ff8:	e043      	b.n	8009082 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68b9      	ldr	r1, [r7, #8]
 8009000:	4618      	mov	r0, r3
 8009002:	f000 f9f5 	bl	80093f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	69da      	ldr	r2, [r3, #28]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f042 0208 	orr.w	r2, r2, #8
 8009014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	69da      	ldr	r2, [r3, #28]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f022 0204 	bic.w	r2, r2, #4
 8009024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	69d9      	ldr	r1, [r3, #28]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	691a      	ldr	r2, [r3, #16]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	430a      	orrs	r2, r1
 8009036:	61da      	str	r2, [r3, #28]
      break;
 8009038:	e023      	b.n	8009082 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68b9      	ldr	r1, [r7, #8]
 8009040:	4618      	mov	r0, r3
 8009042:	f000 fa49 	bl	80094d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	69da      	ldr	r2, [r3, #28]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	69da      	ldr	r2, [r3, #28]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	69d9      	ldr	r1, [r3, #28]
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	021a      	lsls	r2, r3, #8
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	61da      	str	r2, [r3, #28]
      break;
 800907a:	e002      	b.n	8009082 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	75fb      	strb	r3, [r7, #23]
      break;
 8009080:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800908a:	7dfb      	ldrb	r3, [r7, #23]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3718      	adds	r7, #24
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a40      	ldr	r2, [pc, #256]	; (80091f8 <TIM_Base_SetConfig+0x114>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d013      	beq.n	8009124 <TIM_Base_SetConfig+0x40>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009102:	d00f      	beq.n	8009124 <TIM_Base_SetConfig+0x40>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a3d      	ldr	r2, [pc, #244]	; (80091fc <TIM_Base_SetConfig+0x118>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d00b      	beq.n	8009124 <TIM_Base_SetConfig+0x40>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a3c      	ldr	r2, [pc, #240]	; (8009200 <TIM_Base_SetConfig+0x11c>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d007      	beq.n	8009124 <TIM_Base_SetConfig+0x40>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a3b      	ldr	r2, [pc, #236]	; (8009204 <TIM_Base_SetConfig+0x120>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d003      	beq.n	8009124 <TIM_Base_SetConfig+0x40>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a3a      	ldr	r2, [pc, #232]	; (8009208 <TIM_Base_SetConfig+0x124>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d108      	bne.n	8009136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800912a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	4313      	orrs	r3, r2
 8009134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a2f      	ldr	r2, [pc, #188]	; (80091f8 <TIM_Base_SetConfig+0x114>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d02b      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009144:	d027      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a2c      	ldr	r2, [pc, #176]	; (80091fc <TIM_Base_SetConfig+0x118>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d023      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a2b      	ldr	r2, [pc, #172]	; (8009200 <TIM_Base_SetConfig+0x11c>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d01f      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a2a      	ldr	r2, [pc, #168]	; (8009204 <TIM_Base_SetConfig+0x120>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d01b      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a29      	ldr	r2, [pc, #164]	; (8009208 <TIM_Base_SetConfig+0x124>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d017      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a28      	ldr	r2, [pc, #160]	; (800920c <TIM_Base_SetConfig+0x128>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d013      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a27      	ldr	r2, [pc, #156]	; (8009210 <TIM_Base_SetConfig+0x12c>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d00f      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a26      	ldr	r2, [pc, #152]	; (8009214 <TIM_Base_SetConfig+0x130>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d00b      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a25      	ldr	r2, [pc, #148]	; (8009218 <TIM_Base_SetConfig+0x134>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d007      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a24      	ldr	r2, [pc, #144]	; (800921c <TIM_Base_SetConfig+0x138>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d003      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a23      	ldr	r2, [pc, #140]	; (8009220 <TIM_Base_SetConfig+0x13c>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d108      	bne.n	80091a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800919c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	689a      	ldr	r2, [r3, #8]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a0a      	ldr	r2, [pc, #40]	; (80091f8 <TIM_Base_SetConfig+0x114>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d003      	beq.n	80091dc <TIM_Base_SetConfig+0xf8>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a0c      	ldr	r2, [pc, #48]	; (8009208 <TIM_Base_SetConfig+0x124>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d103      	bne.n	80091e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	691a      	ldr	r2, [r3, #16]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	615a      	str	r2, [r3, #20]
}
 80091ea:	bf00      	nop
 80091ec:	3714      	adds	r7, #20
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	40010000 	.word	0x40010000
 80091fc:	40000400 	.word	0x40000400
 8009200:	40000800 	.word	0x40000800
 8009204:	40000c00 	.word	0x40000c00
 8009208:	40010400 	.word	0x40010400
 800920c:	40014000 	.word	0x40014000
 8009210:	40014400 	.word	0x40014400
 8009214:	40014800 	.word	0x40014800
 8009218:	40001800 	.word	0x40001800
 800921c:	40001c00 	.word	0x40001c00
 8009220:	40002000 	.word	0x40002000

08009224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	f023 0201 	bic.w	r2, r3, #1
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a1b      	ldr	r3, [r3, #32]
 800923e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f023 0303 	bic.w	r3, r3, #3
 800925a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	4313      	orrs	r3, r2
 8009264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f023 0302 	bic.w	r3, r3, #2
 800926c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	4313      	orrs	r3, r2
 8009276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a20      	ldr	r2, [pc, #128]	; (80092fc <TIM_OC1_SetConfig+0xd8>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d003      	beq.n	8009288 <TIM_OC1_SetConfig+0x64>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a1f      	ldr	r2, [pc, #124]	; (8009300 <TIM_OC1_SetConfig+0xdc>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d10c      	bne.n	80092a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	f023 0308 	bic.w	r3, r3, #8
 800928e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	4313      	orrs	r3, r2
 8009298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	f023 0304 	bic.w	r3, r3, #4
 80092a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a15      	ldr	r2, [pc, #84]	; (80092fc <TIM_OC1_SetConfig+0xd8>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d003      	beq.n	80092b2 <TIM_OC1_SetConfig+0x8e>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a14      	ldr	r2, [pc, #80]	; (8009300 <TIM_OC1_SetConfig+0xdc>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d111      	bne.n	80092d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	693a      	ldr	r2, [r7, #16]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	693a      	ldr	r2, [r7, #16]
 80092da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	697a      	ldr	r2, [r7, #20]
 80092ee:	621a      	str	r2, [r3, #32]
}
 80092f0:	bf00      	nop
 80092f2:	371c      	adds	r7, #28
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	40010000 	.word	0x40010000
 8009300:	40010400 	.word	0x40010400

08009304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009304:	b480      	push	{r7}
 8009306:	b087      	sub	sp, #28
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a1b      	ldr	r3, [r3, #32]
 8009312:	f023 0210 	bic.w	r2, r3, #16
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	699b      	ldr	r3, [r3, #24]
 800932a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800933a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	021b      	lsls	r3, r3, #8
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	4313      	orrs	r3, r2
 8009346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	f023 0320 	bic.w	r3, r3, #32
 800934e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	011b      	lsls	r3, r3, #4
 8009356:	697a      	ldr	r2, [r7, #20]
 8009358:	4313      	orrs	r3, r2
 800935a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a22      	ldr	r2, [pc, #136]	; (80093e8 <TIM_OC2_SetConfig+0xe4>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d003      	beq.n	800936c <TIM_OC2_SetConfig+0x68>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a21      	ldr	r2, [pc, #132]	; (80093ec <TIM_OC2_SetConfig+0xe8>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d10d      	bne.n	8009388 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	011b      	lsls	r3, r3, #4
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	4313      	orrs	r3, r2
 800937e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009386:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a17      	ldr	r2, [pc, #92]	; (80093e8 <TIM_OC2_SetConfig+0xe4>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d003      	beq.n	8009398 <TIM_OC2_SetConfig+0x94>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a16      	ldr	r2, [pc, #88]	; (80093ec <TIM_OC2_SetConfig+0xe8>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d113      	bne.n	80093c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800939e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	4313      	orrs	r3, r2
 80093be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	685a      	ldr	r2, [r3, #4]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	621a      	str	r2, [r3, #32]
}
 80093da:	bf00      	nop
 80093dc:	371c      	adds	r7, #28
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	40010000 	.word	0x40010000
 80093ec:	40010400 	.word	0x40010400

080093f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b087      	sub	sp, #28
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a1b      	ldr	r3, [r3, #32]
 800940a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800941e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f023 0303 	bic.w	r3, r3, #3
 8009426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	4313      	orrs	r3, r2
 8009430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	021b      	lsls	r3, r3, #8
 8009440:	697a      	ldr	r2, [r7, #20]
 8009442:	4313      	orrs	r3, r2
 8009444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a21      	ldr	r2, [pc, #132]	; (80094d0 <TIM_OC3_SetConfig+0xe0>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d003      	beq.n	8009456 <TIM_OC3_SetConfig+0x66>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a20      	ldr	r2, [pc, #128]	; (80094d4 <TIM_OC3_SetConfig+0xe4>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d10d      	bne.n	8009472 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800945c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	021b      	lsls	r3, r3, #8
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	4313      	orrs	r3, r2
 8009468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a16      	ldr	r2, [pc, #88]	; (80094d0 <TIM_OC3_SetConfig+0xe0>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d003      	beq.n	8009482 <TIM_OC3_SetConfig+0x92>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a15      	ldr	r2, [pc, #84]	; (80094d4 <TIM_OC3_SetConfig+0xe4>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d113      	bne.n	80094aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	011b      	lsls	r3, r3, #4
 8009498:	693a      	ldr	r2, [r7, #16]
 800949a:	4313      	orrs	r3, r2
 800949c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	011b      	lsls	r3, r3, #4
 80094a4:	693a      	ldr	r2, [r7, #16]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	685a      	ldr	r2, [r3, #4]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	621a      	str	r2, [r3, #32]
}
 80094c4:	bf00      	nop
 80094c6:	371c      	adds	r7, #28
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	40010000 	.word	0x40010000
 80094d4:	40010400 	.word	0x40010400

080094d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094d8:	b480      	push	{r7}
 80094da:	b087      	sub	sp, #28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a1b      	ldr	r3, [r3, #32]
 80094f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	69db      	ldr	r3, [r3, #28]
 80094fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800950e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	021b      	lsls	r3, r3, #8
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	4313      	orrs	r3, r2
 800951a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	031b      	lsls	r3, r3, #12
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	4313      	orrs	r3, r2
 800952e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a12      	ldr	r2, [pc, #72]	; (800957c <TIM_OC4_SetConfig+0xa4>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d003      	beq.n	8009540 <TIM_OC4_SetConfig+0x68>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a11      	ldr	r2, [pc, #68]	; (8009580 <TIM_OC4_SetConfig+0xa8>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d109      	bne.n	8009554 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	019b      	lsls	r3, r3, #6
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	4313      	orrs	r3, r2
 8009552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	621a      	str	r2, [r3, #32]
}
 800956e:	bf00      	nop
 8009570:	371c      	adds	r7, #28
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	40010000 	.word	0x40010000
 8009580:	40010400 	.word	0x40010400

08009584 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	f003 031f 	and.w	r3, r3, #31
 8009596:	2201      	movs	r2, #1
 8009598:	fa02 f303 	lsl.w	r3, r2, r3
 800959c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6a1a      	ldr	r2, [r3, #32]
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	43db      	mvns	r3, r3
 80095a6:	401a      	ands	r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6a1a      	ldr	r2, [r3, #32]
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	f003 031f 	and.w	r3, r3, #31
 80095b6:	6879      	ldr	r1, [r7, #4]
 80095b8:	fa01 f303 	lsl.w	r3, r1, r3
 80095bc:	431a      	orrs	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	621a      	str	r2, [r3, #32]
}
 80095c2:	bf00      	nop
 80095c4:	371c      	adds	r7, #28
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
	...

080095d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d101      	bne.n	80095e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095e4:	2302      	movs	r3, #2
 80095e6:	e05a      	b.n	800969e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2202      	movs	r2, #2
 80095f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800960e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	4313      	orrs	r3, r2
 8009618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a21      	ldr	r2, [pc, #132]	; (80096ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d022      	beq.n	8009672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009634:	d01d      	beq.n	8009672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a1d      	ldr	r2, [pc, #116]	; (80096b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d018      	beq.n	8009672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a1b      	ldr	r2, [pc, #108]	; (80096b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d013      	beq.n	8009672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a1a      	ldr	r2, [pc, #104]	; (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d00e      	beq.n	8009672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a18      	ldr	r2, [pc, #96]	; (80096bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d009      	beq.n	8009672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a17      	ldr	r2, [pc, #92]	; (80096c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d004      	beq.n	8009672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a15      	ldr	r2, [pc, #84]	; (80096c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d10c      	bne.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009678:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	4313      	orrs	r3, r2
 8009682:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3714      	adds	r7, #20
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	40010000 	.word	0x40010000
 80096b0:	40000400 	.word	0x40000400
 80096b4:	40000800 	.word	0x40000800
 80096b8:	40000c00 	.word	0x40000c00
 80096bc:	40010400 	.word	0x40010400
 80096c0:	40014000 	.word	0x40014000
 80096c4:	40001800 	.word	0x40001800

080096c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d101      	bne.n	8009702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	e03f      	b.n	8009782 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b00      	cmp	r3, #0
 800970c:	d106      	bne.n	800971c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7fc fc42 	bl	8005fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2224      	movs	r2, #36	; 0x24
 8009720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68da      	ldr	r2, [r3, #12]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f001 f871 	bl	800a81c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	691a      	ldr	r2, [r3, #16]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	695a      	ldr	r2, [r3, #20]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68da      	ldr	r2, [r3, #12]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2220      	movs	r2, #32
 8009774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2220      	movs	r2, #32
 800977c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b082      	sub	sp, #8
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d101      	bne.n	800979c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	e021      	b.n	80097e0 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2224      	movs	r2, #36	; 0x24
 80097a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80097b2:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7fc fda9 	bl	800630c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08a      	sub	sp, #40	; 0x28
 80097ec:	af02      	add	r7, sp, #8
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	4613      	mov	r3, r2
 80097f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80097f8:	2300      	movs	r3, #0
 80097fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b20      	cmp	r3, #32
 8009806:	d17c      	bne.n	8009902 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d002      	beq.n	8009814 <HAL_UART_Transmit+0x2c>
 800980e:	88fb      	ldrh	r3, [r7, #6]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d101      	bne.n	8009818 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e075      	b.n	8009904 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800981e:	2b01      	cmp	r3, #1
 8009820:	d101      	bne.n	8009826 <HAL_UART_Transmit+0x3e>
 8009822:	2302      	movs	r3, #2
 8009824:	e06e      	b.n	8009904 <HAL_UART_Transmit+0x11c>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2221      	movs	r2, #33	; 0x21
 8009838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800983c:	f7fc fe5c 	bl	80064f8 <HAL_GetTick>
 8009840:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	88fa      	ldrh	r2, [r7, #6]
 8009846:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	88fa      	ldrh	r2, [r7, #6]
 800984c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009856:	d108      	bne.n	800986a <HAL_UART_Transmit+0x82>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d104      	bne.n	800986a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009860:	2300      	movs	r3, #0
 8009862:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	61bb      	str	r3, [r7, #24]
 8009868:	e003      	b.n	8009872 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800986e:	2300      	movs	r3, #0
 8009870:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800987a:	e02a      	b.n	80098d2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	2200      	movs	r2, #0
 8009884:	2180      	movs	r1, #128	; 0x80
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 fcf9 	bl	800a27e <UART_WaitOnFlagUntilTimeout>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009892:	2303      	movs	r3, #3
 8009894:	e036      	b.n	8009904 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d10b      	bne.n	80098b4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	881b      	ldrh	r3, [r3, #0]
 80098a0:	461a      	mov	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098aa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	3302      	adds	r3, #2
 80098b0:	61bb      	str	r3, [r7, #24]
 80098b2:	e007      	b.n	80098c4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	781a      	ldrb	r2, [r3, #0]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	3301      	adds	r3, #1
 80098c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	3b01      	subs	r3, #1
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1cf      	bne.n	800987c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	2200      	movs	r2, #0
 80098e4:	2140      	movs	r1, #64	; 0x40
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f000 fcc9 	bl	800a27e <UART_WaitOnFlagUntilTimeout>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80098f2:	2303      	movs	r3, #3
 80098f4:	e006      	b.n	8009904 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2220      	movs	r2, #32
 80098fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	e000      	b.n	8009904 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009902:	2302      	movs	r3, #2
  }
}
 8009904:	4618      	mov	r0, r3
 8009906:	3720      	adds	r7, #32
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08c      	sub	sp, #48	; 0x30
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	4613      	mov	r3, r2
 8009918:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b20      	cmp	r3, #32
 8009924:	d165      	bne.n	80099f2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d002      	beq.n	8009932 <HAL_UART_Transmit_DMA+0x26>
 800992c:	88fb      	ldrh	r3, [r7, #6]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d101      	bne.n	8009936 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e05e      	b.n	80099f4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800993c:	2b01      	cmp	r3, #1
 800993e:	d101      	bne.n	8009944 <HAL_UART_Transmit_DMA+0x38>
 8009940:	2302      	movs	r3, #2
 8009942:	e057      	b.n	80099f4 <HAL_UART_Transmit_DMA+0xe8>
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800994c:	68ba      	ldr	r2, [r7, #8]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	88fa      	ldrh	r2, [r7, #6]
 8009956:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	88fa      	ldrh	r2, [r7, #6]
 800995c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2221      	movs	r2, #33	; 0x21
 8009968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009970:	4a22      	ldr	r2, [pc, #136]	; (80099fc <HAL_UART_Transmit_DMA+0xf0>)
 8009972:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009978:	4a21      	ldr	r2, [pc, #132]	; (8009a00 <HAL_UART_Transmit_DMA+0xf4>)
 800997a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009980:	4a20      	ldr	r2, [pc, #128]	; (8009a04 <HAL_UART_Transmit_DMA+0xf8>)
 8009982:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009988:	2200      	movs	r2, #0
 800998a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800998c:	f107 0308 	add.w	r3, r7, #8
 8009990:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009998:	6819      	ldr	r1, [r3, #0]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	3304      	adds	r3, #4
 80099a0:	461a      	mov	r2, r3
 80099a2:	88fb      	ldrh	r3, [r7, #6]
 80099a4:	f7fd fa9a 	bl	8006edc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80099b0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	3314      	adds	r3, #20
 80099c0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	e853 3f00 	ldrex	r3, [r3]
 80099c8:	617b      	str	r3, [r7, #20]
   return(result);
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3314      	adds	r3, #20
 80099d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099da:	627a      	str	r2, [r7, #36]	; 0x24
 80099dc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099de:	6a39      	ldr	r1, [r7, #32]
 80099e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099e2:	e841 2300 	strex	r3, r2, [r1]
 80099e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1e5      	bne.n	80099ba <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	e000      	b.n	80099f4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80099f2:	2302      	movs	r3, #2
  }
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3730      	adds	r7, #48	; 0x30
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	08009fd9 	.word	0x08009fd9
 8009a00:	0800a073 	.word	0x0800a073
 8009a04:	0800a1eb 	.word	0x0800a1eb

08009a08 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	4613      	mov	r3, r2
 8009a14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b20      	cmp	r3, #32
 8009a20:	d11d      	bne.n	8009a5e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <HAL_UART_Receive_DMA+0x26>
 8009a28:	88fb      	ldrh	r3, [r7, #6]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d101      	bne.n	8009a32 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e016      	b.n	8009a60 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d101      	bne.n	8009a40 <HAL_UART_Receive_DMA+0x38>
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	e00f      	b.n	8009a60 <HAL_UART_Receive_DMA+0x58>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009a4e:	88fb      	ldrh	r3, [r7, #6]
 8009a50:	461a      	mov	r2, r3
 8009a52:	68b9      	ldr	r1, [r7, #8]
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f000 fc81 	bl	800a35c <UART_Start_Receive_DMA>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	e000      	b.n	8009a60 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009a5e:	2302      	movs	r3, #2
  }
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b0ba      	sub	sp, #232	; 0xe8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	695b      	ldr	r3, [r3, #20]
 8009a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009a94:	2300      	movs	r3, #0
 8009a96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a9e:	f003 030f 	and.w	r3, r3, #15
 8009aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009aa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10f      	bne.n	8009ace <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ab2:	f003 0320 	and.w	r3, r3, #32
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d009      	beq.n	8009ace <HAL_UART_IRQHandler+0x66>
 8009aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009abe:	f003 0320 	and.w	r3, r3, #32
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d003      	beq.n	8009ace <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fded 	bl	800a6a6 <UART_Receive_IT>
      return;
 8009acc:	e256      	b.n	8009f7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009ace:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f000 80de 	beq.w	8009c94 <HAL_UART_IRQHandler+0x22c>
 8009ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d106      	bne.n	8009af2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ae8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 80d1 	beq.w	8009c94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009af6:	f003 0301 	and.w	r3, r3, #1
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00b      	beq.n	8009b16 <HAL_UART_IRQHandler+0xae>
 8009afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d005      	beq.n	8009b16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0e:	f043 0201 	orr.w	r2, r3, #1
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b1a:	f003 0304 	and.w	r3, r3, #4
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00b      	beq.n	8009b3a <HAL_UART_IRQHandler+0xd2>
 8009b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b26:	f003 0301 	and.w	r3, r3, #1
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d005      	beq.n	8009b3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b32:	f043 0202 	orr.w	r2, r3, #2
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b3e:	f003 0302 	and.w	r3, r3, #2
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00b      	beq.n	8009b5e <HAL_UART_IRQHandler+0xf6>
 8009b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d005      	beq.n	8009b5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b56:	f043 0204 	orr.w	r2, r3, #4
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b62:	f003 0308 	and.w	r3, r3, #8
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d011      	beq.n	8009b8e <HAL_UART_IRQHandler+0x126>
 8009b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b6e:	f003 0320 	and.w	r3, r3, #32
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d105      	bne.n	8009b82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d005      	beq.n	8009b8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b86:	f043 0208 	orr.w	r2, r3, #8
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 81ed 	beq.w	8009f72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b9c:	f003 0320 	and.w	r3, r3, #32
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d008      	beq.n	8009bb6 <HAL_UART_IRQHandler+0x14e>
 8009ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ba8:	f003 0320 	and.w	r3, r3, #32
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d002      	beq.n	8009bb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fd78 	bl	800a6a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	695b      	ldr	r3, [r3, #20]
 8009bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc0:	2b40      	cmp	r3, #64	; 0x40
 8009bc2:	bf0c      	ite	eq
 8009bc4:	2301      	moveq	r3, #1
 8009bc6:	2300      	movne	r3, #0
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd2:	f003 0308 	and.w	r3, r3, #8
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d103      	bne.n	8009be2 <HAL_UART_IRQHandler+0x17a>
 8009bda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d04f      	beq.n	8009c82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fc80 	bl	800a4e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	695b      	ldr	r3, [r3, #20]
 8009bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bf2:	2b40      	cmp	r3, #64	; 0x40
 8009bf4:	d141      	bne.n	8009c7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	3314      	adds	r3, #20
 8009bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c04:	e853 3f00 	ldrex	r3, [r3]
 8009c08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009c0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3314      	adds	r3, #20
 8009c1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009c22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009c26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009c2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009c32:	e841 2300 	strex	r3, r2, [r1]
 8009c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1d9      	bne.n	8009bf6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d013      	beq.n	8009c72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c4e:	4a7d      	ldr	r2, [pc, #500]	; (8009e44 <HAL_UART_IRQHandler+0x3dc>)
 8009c50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fd fa08 	bl	800706c <HAL_DMA_Abort_IT>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d016      	beq.n	8009c90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c70:	e00e      	b.n	8009c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7fa f9a2 	bl	8003fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c78:	e00a      	b.n	8009c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7fa f99e 	bl	8003fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c80:	e006      	b.n	8009c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f7fa f99a 	bl	8003fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009c8e:	e170      	b.n	8009f72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c90:	bf00      	nop
    return;
 8009c92:	e16e      	b.n	8009f72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	f040 814a 	bne.w	8009f32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ca2:	f003 0310 	and.w	r3, r3, #16
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f000 8143 	beq.w	8009f32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cb0:	f003 0310 	and.w	r3, r3, #16
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 813c 	beq.w	8009f32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60bb      	str	r3, [r7, #8]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	60bb      	str	r3, [r7, #8]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	60bb      	str	r3, [r7, #8]
 8009cce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	695b      	ldr	r3, [r3, #20]
 8009cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cda:	2b40      	cmp	r3, #64	; 0x40
 8009cdc:	f040 80b4 	bne.w	8009e48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009cec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f000 8140 	beq.w	8009f76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	f080 8139 	bcs.w	8009f76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009d0a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d16:	f000 8088 	beq.w	8009e2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	330c      	adds	r3, #12
 8009d20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d28:	e853 3f00 	ldrex	r3, [r3]
 8009d2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	330c      	adds	r3, #12
 8009d42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009d46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009d4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009d52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009d56:	e841 2300 	strex	r3, r2, [r1]
 8009d5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1d9      	bne.n	8009d1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	3314      	adds	r3, #20
 8009d6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d70:	e853 3f00 	ldrex	r3, [r3]
 8009d74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d78:	f023 0301 	bic.w	r3, r3, #1
 8009d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	3314      	adds	r3, #20
 8009d86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009d8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009d92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d96:	e841 2300 	strex	r3, r2, [r1]
 8009d9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1e1      	bne.n	8009d66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	3314      	adds	r3, #20
 8009da8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dac:	e853 3f00 	ldrex	r3, [r3]
 8009db0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009db8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	3314      	adds	r3, #20
 8009dc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009dc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009dc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009dcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009dce:	e841 2300 	strex	r3, r2, [r1]
 8009dd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1e3      	bne.n	8009da2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2220      	movs	r2, #32
 8009dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	330c      	adds	r3, #12
 8009dee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009df2:	e853 3f00 	ldrex	r3, [r3]
 8009df6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dfa:	f023 0310 	bic.w	r3, r3, #16
 8009dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	330c      	adds	r3, #12
 8009e08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009e0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8009e0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e14:	e841 2300 	strex	r3, r2, [r1]
 8009e18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1e3      	bne.n	8009de8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fd f8b1 	bl	8006f8c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f8c0 	bl	8009fc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e40:	e099      	b.n	8009f76 <HAL_UART_IRQHandler+0x50e>
 8009e42:	bf00      	nop
 8009e44:	0800a5af 	.word	0x0800a5af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 808b 	beq.w	8009f7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009e64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f000 8086 	beq.w	8009f7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	330c      	adds	r3, #12
 8009e74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e78:	e853 3f00 	ldrex	r3, [r3]
 8009e7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	330c      	adds	r3, #12
 8009e8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009e92:	647a      	str	r2, [r7, #68]	; 0x44
 8009e94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e9a:	e841 2300 	strex	r3, r2, [r1]
 8009e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1e3      	bne.n	8009e6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	3314      	adds	r3, #20
 8009eac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb0:	e853 3f00 	ldrex	r3, [r3]
 8009eb4:	623b      	str	r3, [r7, #32]
   return(result);
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	f023 0301 	bic.w	r3, r3, #1
 8009ebc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	3314      	adds	r3, #20
 8009ec6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009eca:	633a      	str	r2, [r7, #48]	; 0x30
 8009ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ece:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ed2:	e841 2300 	strex	r3, r2, [r1]
 8009ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1e3      	bne.n	8009ea6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2220      	movs	r2, #32
 8009ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	330c      	adds	r3, #12
 8009ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	e853 3f00 	ldrex	r3, [r3]
 8009efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f023 0310 	bic.w	r3, r3, #16
 8009f02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	330c      	adds	r3, #12
 8009f0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009f10:	61fa      	str	r2, [r7, #28]
 8009f12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f14:	69b9      	ldr	r1, [r7, #24]
 8009f16:	69fa      	ldr	r2, [r7, #28]
 8009f18:	e841 2300 	strex	r3, r2, [r1]
 8009f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1e3      	bne.n	8009eec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f28:	4619      	mov	r1, r3
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f848 	bl	8009fc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f30:	e023      	b.n	8009f7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d009      	beq.n	8009f52 <HAL_UART_IRQHandler+0x4ea>
 8009f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d003      	beq.n	8009f52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fb43 	bl	800a5d6 <UART_Transmit_IT>
    return;
 8009f50:	e014      	b.n	8009f7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00e      	beq.n	8009f7c <HAL_UART_IRQHandler+0x514>
 8009f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d008      	beq.n	8009f7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fb83 	bl	800a676 <UART_EndTransmit_IT>
    return;
 8009f70:	e004      	b.n	8009f7c <HAL_UART_IRQHandler+0x514>
    return;
 8009f72:	bf00      	nop
 8009f74:	e002      	b.n	8009f7c <HAL_UART_IRQHandler+0x514>
      return;
 8009f76:	bf00      	nop
 8009f78:	e000      	b.n	8009f7c <HAL_UART_IRQHandler+0x514>
      return;
 8009f7a:	bf00      	nop
  }
}
 8009f7c:	37e8      	adds	r7, #232	; 0xe8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop

08009f84 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009f8c:	bf00      	nop
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b090      	sub	sp, #64	; 0x40
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d137      	bne.n	800a064 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	3314      	adds	r3, #20
 800a000:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a004:	e853 3f00 	ldrex	r3, [r3]
 800a008:	623b      	str	r3, [r7, #32]
   return(result);
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a010:	63bb      	str	r3, [r7, #56]	; 0x38
 800a012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3314      	adds	r3, #20
 800a018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a01a:	633a      	str	r2, [r7, #48]	; 0x30
 800a01c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a022:	e841 2300 	strex	r3, r2, [r1]
 800a026:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1e5      	bne.n	8009ffa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	330c      	adds	r3, #12
 800a034:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	e853 3f00 	ldrex	r3, [r3]
 800a03c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a044:	637b      	str	r3, [r7, #52]	; 0x34
 800a046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	330c      	adds	r3, #12
 800a04c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a04e:	61fa      	str	r2, [r7, #28]
 800a050:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a052:	69b9      	ldr	r1, [r7, #24]
 800a054:	69fa      	ldr	r2, [r7, #28]
 800a056:	e841 2300 	strex	r3, r2, [r1]
 800a05a:	617b      	str	r3, [r7, #20]
   return(result);
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1e5      	bne.n	800a02e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a062:	e002      	b.n	800a06a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a064:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a066:	f7f9 ff97 	bl	8003f98 <HAL_UART_TxCpltCallback>
}
 800a06a:	bf00      	nop
 800a06c:	3740      	adds	r7, #64	; 0x40
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b084      	sub	sp, #16
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f7ff ff7f 	bl	8009f84 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a086:	bf00      	nop
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b09c      	sub	sp, #112	; 0x70
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a09a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d172      	bne.n	800a190 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a0aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	330c      	adds	r3, #12
 800a0b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ba:	e853 3f00 	ldrex	r3, [r3]
 800a0be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a0c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	330c      	adds	r3, #12
 800a0ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a0d0:	65ba      	str	r2, [r7, #88]	; 0x58
 800a0d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0d8:	e841 2300 	strex	r3, r2, [r1]
 800a0dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a0de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1e5      	bne.n	800a0b0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	3314      	adds	r3, #20
 800a0ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ee:	e853 3f00 	ldrex	r3, [r3]
 800a0f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f6:	f023 0301 	bic.w	r3, r3, #1
 800a0fa:	667b      	str	r3, [r7, #100]	; 0x64
 800a0fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	3314      	adds	r3, #20
 800a102:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a104:	647a      	str	r2, [r7, #68]	; 0x44
 800a106:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a108:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a10a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a10c:	e841 2300 	strex	r3, r2, [r1]
 800a110:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1e5      	bne.n	800a0e4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	3314      	adds	r3, #20
 800a11e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a122:	e853 3f00 	ldrex	r3, [r3]
 800a126:	623b      	str	r3, [r7, #32]
   return(result);
 800a128:	6a3b      	ldr	r3, [r7, #32]
 800a12a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a12e:	663b      	str	r3, [r7, #96]	; 0x60
 800a130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	3314      	adds	r3, #20
 800a136:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a138:	633a      	str	r2, [r7, #48]	; 0x30
 800a13a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a13e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a140:	e841 2300 	strex	r3, r2, [r1]
 800a144:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1e5      	bne.n	800a118 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a14c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a14e:	2220      	movs	r2, #32
 800a150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d119      	bne.n	800a190 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a15c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	330c      	adds	r3, #12
 800a162:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	e853 3f00 	ldrex	r3, [r3]
 800a16a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f023 0310 	bic.w	r3, r3, #16
 800a172:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	330c      	adds	r3, #12
 800a17a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a17c:	61fa      	str	r2, [r7, #28]
 800a17e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a180:	69b9      	ldr	r1, [r7, #24]
 800a182:	69fa      	ldr	r2, [r7, #28]
 800a184:	e841 2300 	strex	r3, r2, [r1]
 800a188:	617b      	str	r3, [r7, #20]
   return(result);
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1e5      	bne.n	800a15c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a194:	2b01      	cmp	r3, #1
 800a196:	d106      	bne.n	800a1a6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a19a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a19c:	4619      	mov	r1, r3
 800a19e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a1a0:	f7ff ff0e 	bl	8009fc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1a4:	e002      	b.n	800a1ac <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a1a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a1a8:	f7ff fef6 	bl	8009f98 <HAL_UART_RxCpltCallback>
}
 800a1ac:	bf00      	nop
 800a1ae:	3770      	adds	r7, #112	; 0x70
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d108      	bne.n	800a1dc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a1ce:	085b      	lsrs	r3, r3, #1
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f7ff fef3 	bl	8009fc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1da:	e002      	b.n	800a1e2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f7ff fee5 	bl	8009fac <HAL_UART_RxHalfCpltCallback>
}
 800a1e2:	bf00      	nop
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b084      	sub	sp, #16
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	695b      	ldr	r3, [r3, #20]
 800a202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a206:	2b80      	cmp	r3, #128	; 0x80
 800a208:	bf0c      	ite	eq
 800a20a:	2301      	moveq	r3, #1
 800a20c:	2300      	movne	r3, #0
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	2b21      	cmp	r3, #33	; 0x21
 800a21c:	d108      	bne.n	800a230 <UART_DMAError+0x46>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d005      	beq.n	800a230 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	2200      	movs	r2, #0
 800a228:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a22a:	68b8      	ldr	r0, [r7, #8]
 800a22c:	f000 f934 	bl	800a498 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	695b      	ldr	r3, [r3, #20]
 800a236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a23a:	2b40      	cmp	r3, #64	; 0x40
 800a23c:	bf0c      	ite	eq
 800a23e:	2301      	moveq	r3, #1
 800a240:	2300      	movne	r3, #0
 800a242:	b2db      	uxtb	r3, r3
 800a244:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	2b22      	cmp	r3, #34	; 0x22
 800a250:	d108      	bne.n	800a264 <UART_DMAError+0x7a>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d005      	beq.n	800a264 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	2200      	movs	r2, #0
 800a25c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a25e:	68b8      	ldr	r0, [r7, #8]
 800a260:	f000 f942 	bl	800a4e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a268:	f043 0210 	orr.w	r2, r3, #16
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a270:	68b8      	ldr	r0, [r7, #8]
 800a272:	f7f9 fea3 	bl	8003fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a276:	bf00      	nop
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b090      	sub	sp, #64	; 0x40
 800a282:	af00      	add	r7, sp, #0
 800a284:	60f8      	str	r0, [r7, #12]
 800a286:	60b9      	str	r1, [r7, #8]
 800a288:	603b      	str	r3, [r7, #0]
 800a28a:	4613      	mov	r3, r2
 800a28c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a28e:	e050      	b.n	800a332 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a296:	d04c      	beq.n	800a332 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d007      	beq.n	800a2ae <UART_WaitOnFlagUntilTimeout+0x30>
 800a29e:	f7fc f92b 	bl	80064f8 <HAL_GetTick>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d241      	bcs.n	800a332 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	330c      	adds	r3, #12
 800a2b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b8:	e853 3f00 	ldrex	r3, [r3]
 800a2bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	330c      	adds	r3, #12
 800a2cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2ce:	637a      	str	r2, [r7, #52]	; 0x34
 800a2d0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2d6:	e841 2300 	strex	r3, r2, [r1]
 800a2da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1e5      	bne.n	800a2ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	3314      	adds	r3, #20
 800a2e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	e853 3f00 	ldrex	r3, [r3]
 800a2f0:	613b      	str	r3, [r7, #16]
   return(result);
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	f023 0301 	bic.w	r3, r3, #1
 800a2f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	3314      	adds	r3, #20
 800a300:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a302:	623a      	str	r2, [r7, #32]
 800a304:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a306:	69f9      	ldr	r1, [r7, #28]
 800a308:	6a3a      	ldr	r2, [r7, #32]
 800a30a:	e841 2300 	strex	r3, r2, [r1]
 800a30e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1e5      	bne.n	800a2e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2220      	movs	r2, #32
 800a31a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2220      	movs	r2, #32
 800a322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e00f      	b.n	800a352 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	4013      	ands	r3, r2
 800a33c:	68ba      	ldr	r2, [r7, #8]
 800a33e:	429a      	cmp	r2, r3
 800a340:	bf0c      	ite	eq
 800a342:	2301      	moveq	r3, #1
 800a344:	2300      	movne	r3, #0
 800a346:	b2db      	uxtb	r3, r3
 800a348:	461a      	mov	r2, r3
 800a34a:	79fb      	ldrb	r3, [r7, #7]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d09f      	beq.n	800a290 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3740      	adds	r7, #64	; 0x40
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
	...

0800a35c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b098      	sub	sp, #96	; 0x60
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	4613      	mov	r3, r2
 800a368:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a36a:	68ba      	ldr	r2, [r7, #8]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	88fa      	ldrh	r2, [r7, #6]
 800a374:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2222      	movs	r2, #34	; 0x22
 800a380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a388:	4a40      	ldr	r2, [pc, #256]	; (800a48c <UART_Start_Receive_DMA+0x130>)
 800a38a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a390:	4a3f      	ldr	r2, [pc, #252]	; (800a490 <UART_Start_Receive_DMA+0x134>)
 800a392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a398:	4a3e      	ldr	r2, [pc, #248]	; (800a494 <UART_Start_Receive_DMA+0x138>)
 800a39a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a3a4:	f107 0308 	add.w	r3, r7, #8
 800a3a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	88fb      	ldrh	r3, [r7, #6]
 800a3bc:	f7fc fd8e 	bl	8006edc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	613b      	str	r3, [r7, #16]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	613b      	str	r3, [r7, #16]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	613b      	str	r3, [r7, #16]
 800a3d4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d019      	beq.n	800a41a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	330c      	adds	r3, #12
 800a3ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3f0:	e853 3f00 	ldrex	r3, [r3]
 800a3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	330c      	adds	r3, #12
 800a404:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a406:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a408:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a40c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a40e:	e841 2300 	strex	r3, r2, [r1]
 800a412:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1e5      	bne.n	800a3e6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	3314      	adds	r3, #20
 800a420:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a424:	e853 3f00 	ldrex	r3, [r3]
 800a428:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42c:	f043 0301 	orr.w	r3, r3, #1
 800a430:	657b      	str	r3, [r7, #84]	; 0x54
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3314      	adds	r3, #20
 800a438:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a43a:	63ba      	str	r2, [r7, #56]	; 0x38
 800a43c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a440:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a442:	e841 2300 	strex	r3, r2, [r1]
 800a446:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1e5      	bne.n	800a41a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	3314      	adds	r3, #20
 800a454:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	e853 3f00 	ldrex	r3, [r3]
 800a45c:	617b      	str	r3, [r7, #20]
   return(result);
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a464:	653b      	str	r3, [r7, #80]	; 0x50
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	3314      	adds	r3, #20
 800a46c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a46e:	627a      	str	r2, [r7, #36]	; 0x24
 800a470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a472:	6a39      	ldr	r1, [r7, #32]
 800a474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a476:	e841 2300 	strex	r3, r2, [r1]
 800a47a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1e5      	bne.n	800a44e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3760      	adds	r7, #96	; 0x60
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	0800a08f 	.word	0x0800a08f
 800a490:	0800a1b5 	.word	0x0800a1b5
 800a494:	0800a1eb 	.word	0x0800a1eb

0800a498 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a498:	b480      	push	{r7}
 800a49a:	b089      	sub	sp, #36	; 0x24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	330c      	adds	r3, #12
 800a4a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	e853 3f00 	ldrex	r3, [r3]
 800a4ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a4b6:	61fb      	str	r3, [r7, #28]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	330c      	adds	r3, #12
 800a4be:	69fa      	ldr	r2, [r7, #28]
 800a4c0:	61ba      	str	r2, [r7, #24]
 800a4c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c4:	6979      	ldr	r1, [r7, #20]
 800a4c6:	69ba      	ldr	r2, [r7, #24]
 800a4c8:	e841 2300 	strex	r3, r2, [r1]
 800a4cc:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1e5      	bne.n	800a4a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2220      	movs	r2, #32
 800a4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a4dc:	bf00      	nop
 800a4de:	3724      	adds	r7, #36	; 0x24
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b095      	sub	sp, #84	; 0x54
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	330c      	adds	r3, #12
 800a4f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4fa:	e853 3f00 	ldrex	r3, [r3]
 800a4fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a502:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a506:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	330c      	adds	r3, #12
 800a50e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a510:	643a      	str	r2, [r7, #64]	; 0x40
 800a512:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a514:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a516:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a518:	e841 2300 	strex	r3, r2, [r1]
 800a51c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1e5      	bne.n	800a4f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	3314      	adds	r3, #20
 800a52a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52c:	6a3b      	ldr	r3, [r7, #32]
 800a52e:	e853 3f00 	ldrex	r3, [r3]
 800a532:	61fb      	str	r3, [r7, #28]
   return(result);
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	f023 0301 	bic.w	r3, r3, #1
 800a53a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	3314      	adds	r3, #20
 800a542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a544:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a54a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a54c:	e841 2300 	strex	r3, r2, [r1]
 800a550:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a554:	2b00      	cmp	r3, #0
 800a556:	d1e5      	bne.n	800a524 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d119      	bne.n	800a594 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	330c      	adds	r3, #12
 800a566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	e853 3f00 	ldrex	r3, [r3]
 800a56e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	f023 0310 	bic.w	r3, r3, #16
 800a576:	647b      	str	r3, [r7, #68]	; 0x44
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	330c      	adds	r3, #12
 800a57e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a580:	61ba      	str	r2, [r7, #24]
 800a582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a584:	6979      	ldr	r1, [r7, #20]
 800a586:	69ba      	ldr	r2, [r7, #24]
 800a588:	e841 2300 	strex	r3, r2, [r1]
 800a58c:	613b      	str	r3, [r7, #16]
   return(result);
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d1e5      	bne.n	800a560 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2220      	movs	r2, #32
 800a598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a5a2:	bf00      	nop
 800a5a4:	3754      	adds	r7, #84	; 0x54
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f7f9 fcf7 	bl	8003fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5ce:	bf00      	nop
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	b085      	sub	sp, #20
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	2b21      	cmp	r3, #33	; 0x21
 800a5e8:	d13e      	bne.n	800a668 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5f2:	d114      	bne.n	800a61e <UART_Transmit_IT+0x48>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	691b      	ldr	r3, [r3, #16]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d110      	bne.n	800a61e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a1b      	ldr	r3, [r3, #32]
 800a600:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	881b      	ldrh	r3, [r3, #0]
 800a606:	461a      	mov	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a610:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a1b      	ldr	r3, [r3, #32]
 800a616:	1c9a      	adds	r2, r3, #2
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	621a      	str	r2, [r3, #32]
 800a61c:	e008      	b.n	800a630 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	1c59      	adds	r1, r3, #1
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	6211      	str	r1, [r2, #32]
 800a628:	781a      	ldrb	r2, [r3, #0]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a634:	b29b      	uxth	r3, r3
 800a636:	3b01      	subs	r3, #1
 800a638:	b29b      	uxth	r3, r3
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	4619      	mov	r1, r3
 800a63e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10f      	bne.n	800a664 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68da      	ldr	r2, [r3, #12]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a652:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	68da      	ldr	r2, [r3, #12]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a662:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	e000      	b.n	800a66a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a668:	2302      	movs	r3, #2
  }
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3714      	adds	r7, #20
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b082      	sub	sp, #8
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	68da      	ldr	r2, [r3, #12]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a68c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2220      	movs	r2, #32
 800a692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7f9 fc7e 	bl	8003f98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b08c      	sub	sp, #48	; 0x30
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	2b22      	cmp	r3, #34	; 0x22
 800a6b8:	f040 80ab 	bne.w	800a812 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6c4:	d117      	bne.n	800a6f6 <UART_Receive_IT+0x50>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d113      	bne.n	800a6f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ee:	1c9a      	adds	r2, r3, #2
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	629a      	str	r2, [r3, #40]	; 0x28
 800a6f4:	e026      	b.n	800a744 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a708:	d007      	beq.n	800a71a <UART_Receive_IT+0x74>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10a      	bne.n	800a728 <UART_Receive_IT+0x82>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d106      	bne.n	800a728 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	b2da      	uxtb	r2, r3
 800a722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a724:	701a      	strb	r2, [r3, #0]
 800a726:	e008      	b.n	800a73a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a734:	b2da      	uxtb	r2, r3
 800a736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a738:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a73e:	1c5a      	adds	r2, r3, #1
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a748:	b29b      	uxth	r3, r3
 800a74a:	3b01      	subs	r3, #1
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	4619      	mov	r1, r3
 800a752:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a754:	2b00      	cmp	r3, #0
 800a756:	d15a      	bne.n	800a80e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68da      	ldr	r2, [r3, #12]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f022 0220 	bic.w	r2, r2, #32
 800a766:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68da      	ldr	r2, [r3, #12]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a776:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	695a      	ldr	r2, [r3, #20]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f022 0201 	bic.w	r2, r2, #1
 800a786:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2220      	movs	r2, #32
 800a78c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a794:	2b01      	cmp	r3, #1
 800a796:	d135      	bne.n	800a804 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	330c      	adds	r3, #12
 800a7a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	e853 3f00 	ldrex	r3, [r3]
 800a7ac:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	f023 0310 	bic.w	r3, r3, #16
 800a7b4:	627b      	str	r3, [r7, #36]	; 0x24
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	330c      	adds	r3, #12
 800a7bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7be:	623a      	str	r2, [r7, #32]
 800a7c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c2:	69f9      	ldr	r1, [r7, #28]
 800a7c4:	6a3a      	ldr	r2, [r7, #32]
 800a7c6:	e841 2300 	strex	r3, r2, [r1]
 800a7ca:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1e5      	bne.n	800a79e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f003 0310 	and.w	r3, r3, #16
 800a7dc:	2b10      	cmp	r3, #16
 800a7de:	d10a      	bne.n	800a7f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	60fb      	str	r3, [r7, #12]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	60fb      	str	r3, [r7, #12]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	60fb      	str	r3, [r7, #12]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f7ff fbdf 	bl	8009fc0 <HAL_UARTEx_RxEventCallback>
 800a802:	e002      	b.n	800a80a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f7ff fbc7 	bl	8009f98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a80a:	2300      	movs	r3, #0
 800a80c:	e002      	b.n	800a814 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a80e:	2300      	movs	r3, #0
 800a810:	e000      	b.n	800a814 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a812:	2302      	movs	r3, #2
  }
}
 800a814:	4618      	mov	r0, r3
 800a816:	3730      	adds	r7, #48	; 0x30
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a81c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a820:	b0c0      	sub	sp, #256	; 0x100
 800a822:	af00      	add	r7, sp, #0
 800a824:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	691b      	ldr	r3, [r3, #16]
 800a830:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a838:	68d9      	ldr	r1, [r3, #12]
 800a83a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	ea40 0301 	orr.w	r3, r0, r1
 800a844:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a84a:	689a      	ldr	r2, [r3, #8]
 800a84c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	431a      	orrs	r2, r3
 800a854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a858:	695b      	ldr	r3, [r3, #20]
 800a85a:	431a      	orrs	r2, r3
 800a85c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a860:	69db      	ldr	r3, [r3, #28]
 800a862:	4313      	orrs	r3, r2
 800a864:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a874:	f021 010c 	bic.w	r1, r1, #12
 800a878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a882:	430b      	orrs	r3, r1
 800a884:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a896:	6999      	ldr	r1, [r3, #24]
 800a898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	ea40 0301 	orr.w	r3, r0, r1
 800a8a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a8a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	4b8f      	ldr	r3, [pc, #572]	; (800aae8 <UART_SetConfig+0x2cc>)
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d005      	beq.n	800a8bc <UART_SetConfig+0xa0>
 800a8b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	4b8d      	ldr	r3, [pc, #564]	; (800aaec <UART_SetConfig+0x2d0>)
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d104      	bne.n	800a8c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a8bc:	f7fd fb66 	bl	8007f8c <HAL_RCC_GetPCLK2Freq>
 800a8c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a8c4:	e003      	b.n	800a8ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a8c6:	f7fd fb4d 	bl	8007f64 <HAL_RCC_GetPCLK1Freq>
 800a8ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8d2:	69db      	ldr	r3, [r3, #28]
 800a8d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8d8:	f040 810c 	bne.w	800aaf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a8dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a8e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a8ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a8ee:	4622      	mov	r2, r4
 800a8f0:	462b      	mov	r3, r5
 800a8f2:	1891      	adds	r1, r2, r2
 800a8f4:	65b9      	str	r1, [r7, #88]	; 0x58
 800a8f6:	415b      	adcs	r3, r3
 800a8f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a8fe:	4621      	mov	r1, r4
 800a900:	eb12 0801 	adds.w	r8, r2, r1
 800a904:	4629      	mov	r1, r5
 800a906:	eb43 0901 	adc.w	r9, r3, r1
 800a90a:	f04f 0200 	mov.w	r2, #0
 800a90e:	f04f 0300 	mov.w	r3, #0
 800a912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a91a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a91e:	4690      	mov	r8, r2
 800a920:	4699      	mov	r9, r3
 800a922:	4623      	mov	r3, r4
 800a924:	eb18 0303 	adds.w	r3, r8, r3
 800a928:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a92c:	462b      	mov	r3, r5
 800a92e:	eb49 0303 	adc.w	r3, r9, r3
 800a932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a942:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a946:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a94a:	460b      	mov	r3, r1
 800a94c:	18db      	adds	r3, r3, r3
 800a94e:	653b      	str	r3, [r7, #80]	; 0x50
 800a950:	4613      	mov	r3, r2
 800a952:	eb42 0303 	adc.w	r3, r2, r3
 800a956:	657b      	str	r3, [r7, #84]	; 0x54
 800a958:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a95c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a960:	f7f6 f850 	bl	8000a04 <__aeabi_uldivmod>
 800a964:	4602      	mov	r2, r0
 800a966:	460b      	mov	r3, r1
 800a968:	4b61      	ldr	r3, [pc, #388]	; (800aaf0 <UART_SetConfig+0x2d4>)
 800a96a:	fba3 2302 	umull	r2, r3, r3, r2
 800a96e:	095b      	lsrs	r3, r3, #5
 800a970:	011c      	lsls	r4, r3, #4
 800a972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a976:	2200      	movs	r2, #0
 800a978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a97c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a980:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a984:	4642      	mov	r2, r8
 800a986:	464b      	mov	r3, r9
 800a988:	1891      	adds	r1, r2, r2
 800a98a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a98c:	415b      	adcs	r3, r3
 800a98e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a990:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a994:	4641      	mov	r1, r8
 800a996:	eb12 0a01 	adds.w	sl, r2, r1
 800a99a:	4649      	mov	r1, r9
 800a99c:	eb43 0b01 	adc.w	fp, r3, r1
 800a9a0:	f04f 0200 	mov.w	r2, #0
 800a9a4:	f04f 0300 	mov.w	r3, #0
 800a9a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a9ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a9b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9b4:	4692      	mov	sl, r2
 800a9b6:	469b      	mov	fp, r3
 800a9b8:	4643      	mov	r3, r8
 800a9ba:	eb1a 0303 	adds.w	r3, sl, r3
 800a9be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a9c2:	464b      	mov	r3, r9
 800a9c4:	eb4b 0303 	adc.w	r3, fp, r3
 800a9c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a9cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a9d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a9dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	18db      	adds	r3, r3, r3
 800a9e4:	643b      	str	r3, [r7, #64]	; 0x40
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	eb42 0303 	adc.w	r3, r2, r3
 800a9ec:	647b      	str	r3, [r7, #68]	; 0x44
 800a9ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a9f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a9f6:	f7f6 f805 	bl	8000a04 <__aeabi_uldivmod>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4611      	mov	r1, r2
 800aa00:	4b3b      	ldr	r3, [pc, #236]	; (800aaf0 <UART_SetConfig+0x2d4>)
 800aa02:	fba3 2301 	umull	r2, r3, r3, r1
 800aa06:	095b      	lsrs	r3, r3, #5
 800aa08:	2264      	movs	r2, #100	; 0x64
 800aa0a:	fb02 f303 	mul.w	r3, r2, r3
 800aa0e:	1acb      	subs	r3, r1, r3
 800aa10:	00db      	lsls	r3, r3, #3
 800aa12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800aa16:	4b36      	ldr	r3, [pc, #216]	; (800aaf0 <UART_SetConfig+0x2d4>)
 800aa18:	fba3 2302 	umull	r2, r3, r3, r2
 800aa1c:	095b      	lsrs	r3, r3, #5
 800aa1e:	005b      	lsls	r3, r3, #1
 800aa20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aa24:	441c      	add	r4, r3
 800aa26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800aa34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800aa38:	4642      	mov	r2, r8
 800aa3a:	464b      	mov	r3, r9
 800aa3c:	1891      	adds	r1, r2, r2
 800aa3e:	63b9      	str	r1, [r7, #56]	; 0x38
 800aa40:	415b      	adcs	r3, r3
 800aa42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aa48:	4641      	mov	r1, r8
 800aa4a:	1851      	adds	r1, r2, r1
 800aa4c:	6339      	str	r1, [r7, #48]	; 0x30
 800aa4e:	4649      	mov	r1, r9
 800aa50:	414b      	adcs	r3, r1
 800aa52:	637b      	str	r3, [r7, #52]	; 0x34
 800aa54:	f04f 0200 	mov.w	r2, #0
 800aa58:	f04f 0300 	mov.w	r3, #0
 800aa5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800aa60:	4659      	mov	r1, fp
 800aa62:	00cb      	lsls	r3, r1, #3
 800aa64:	4651      	mov	r1, sl
 800aa66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa6a:	4651      	mov	r1, sl
 800aa6c:	00ca      	lsls	r2, r1, #3
 800aa6e:	4610      	mov	r0, r2
 800aa70:	4619      	mov	r1, r3
 800aa72:	4603      	mov	r3, r0
 800aa74:	4642      	mov	r2, r8
 800aa76:	189b      	adds	r3, r3, r2
 800aa78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa7c:	464b      	mov	r3, r9
 800aa7e:	460a      	mov	r2, r1
 800aa80:	eb42 0303 	adc.w	r3, r2, r3
 800aa84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aa94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aa98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	18db      	adds	r3, r3, r3
 800aaa0:	62bb      	str	r3, [r7, #40]	; 0x28
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	eb42 0303 	adc.w	r3, r2, r3
 800aaa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aaaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aaae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aab2:	f7f5 ffa7 	bl	8000a04 <__aeabi_uldivmod>
 800aab6:	4602      	mov	r2, r0
 800aab8:	460b      	mov	r3, r1
 800aaba:	4b0d      	ldr	r3, [pc, #52]	; (800aaf0 <UART_SetConfig+0x2d4>)
 800aabc:	fba3 1302 	umull	r1, r3, r3, r2
 800aac0:	095b      	lsrs	r3, r3, #5
 800aac2:	2164      	movs	r1, #100	; 0x64
 800aac4:	fb01 f303 	mul.w	r3, r1, r3
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	00db      	lsls	r3, r3, #3
 800aacc:	3332      	adds	r3, #50	; 0x32
 800aace:	4a08      	ldr	r2, [pc, #32]	; (800aaf0 <UART_SetConfig+0x2d4>)
 800aad0:	fba2 2303 	umull	r2, r3, r2, r3
 800aad4:	095b      	lsrs	r3, r3, #5
 800aad6:	f003 0207 	and.w	r2, r3, #7
 800aada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4422      	add	r2, r4
 800aae2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aae4:	e105      	b.n	800acf2 <UART_SetConfig+0x4d6>
 800aae6:	bf00      	nop
 800aae8:	40011000 	.word	0x40011000
 800aaec:	40011400 	.word	0x40011400
 800aaf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aaf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aafe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ab02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ab06:	4642      	mov	r2, r8
 800ab08:	464b      	mov	r3, r9
 800ab0a:	1891      	adds	r1, r2, r2
 800ab0c:	6239      	str	r1, [r7, #32]
 800ab0e:	415b      	adcs	r3, r3
 800ab10:	627b      	str	r3, [r7, #36]	; 0x24
 800ab12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ab16:	4641      	mov	r1, r8
 800ab18:	1854      	adds	r4, r2, r1
 800ab1a:	4649      	mov	r1, r9
 800ab1c:	eb43 0501 	adc.w	r5, r3, r1
 800ab20:	f04f 0200 	mov.w	r2, #0
 800ab24:	f04f 0300 	mov.w	r3, #0
 800ab28:	00eb      	lsls	r3, r5, #3
 800ab2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ab2e:	00e2      	lsls	r2, r4, #3
 800ab30:	4614      	mov	r4, r2
 800ab32:	461d      	mov	r5, r3
 800ab34:	4643      	mov	r3, r8
 800ab36:	18e3      	adds	r3, r4, r3
 800ab38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ab3c:	464b      	mov	r3, r9
 800ab3e:	eb45 0303 	adc.w	r3, r5, r3
 800ab42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ab46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ab52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ab56:	f04f 0200 	mov.w	r2, #0
 800ab5a:	f04f 0300 	mov.w	r3, #0
 800ab5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ab62:	4629      	mov	r1, r5
 800ab64:	008b      	lsls	r3, r1, #2
 800ab66:	4621      	mov	r1, r4
 800ab68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	008a      	lsls	r2, r1, #2
 800ab70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ab74:	f7f5 ff46 	bl	8000a04 <__aeabi_uldivmod>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	4b60      	ldr	r3, [pc, #384]	; (800ad00 <UART_SetConfig+0x4e4>)
 800ab7e:	fba3 2302 	umull	r2, r3, r3, r2
 800ab82:	095b      	lsrs	r3, r3, #5
 800ab84:	011c      	lsls	r4, r3, #4
 800ab86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ab90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ab94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ab98:	4642      	mov	r2, r8
 800ab9a:	464b      	mov	r3, r9
 800ab9c:	1891      	adds	r1, r2, r2
 800ab9e:	61b9      	str	r1, [r7, #24]
 800aba0:	415b      	adcs	r3, r3
 800aba2:	61fb      	str	r3, [r7, #28]
 800aba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aba8:	4641      	mov	r1, r8
 800abaa:	1851      	adds	r1, r2, r1
 800abac:	6139      	str	r1, [r7, #16]
 800abae:	4649      	mov	r1, r9
 800abb0:	414b      	adcs	r3, r1
 800abb2:	617b      	str	r3, [r7, #20]
 800abb4:	f04f 0200 	mov.w	r2, #0
 800abb8:	f04f 0300 	mov.w	r3, #0
 800abbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800abc0:	4659      	mov	r1, fp
 800abc2:	00cb      	lsls	r3, r1, #3
 800abc4:	4651      	mov	r1, sl
 800abc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abca:	4651      	mov	r1, sl
 800abcc:	00ca      	lsls	r2, r1, #3
 800abce:	4610      	mov	r0, r2
 800abd0:	4619      	mov	r1, r3
 800abd2:	4603      	mov	r3, r0
 800abd4:	4642      	mov	r2, r8
 800abd6:	189b      	adds	r3, r3, r2
 800abd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800abdc:	464b      	mov	r3, r9
 800abde:	460a      	mov	r2, r1
 800abe0:	eb42 0303 	adc.w	r3, r2, r3
 800abe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800abe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	67bb      	str	r3, [r7, #120]	; 0x78
 800abf2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800abf4:	f04f 0200 	mov.w	r2, #0
 800abf8:	f04f 0300 	mov.w	r3, #0
 800abfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ac00:	4649      	mov	r1, r9
 800ac02:	008b      	lsls	r3, r1, #2
 800ac04:	4641      	mov	r1, r8
 800ac06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac0a:	4641      	mov	r1, r8
 800ac0c:	008a      	lsls	r2, r1, #2
 800ac0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ac12:	f7f5 fef7 	bl	8000a04 <__aeabi_uldivmod>
 800ac16:	4602      	mov	r2, r0
 800ac18:	460b      	mov	r3, r1
 800ac1a:	4b39      	ldr	r3, [pc, #228]	; (800ad00 <UART_SetConfig+0x4e4>)
 800ac1c:	fba3 1302 	umull	r1, r3, r3, r2
 800ac20:	095b      	lsrs	r3, r3, #5
 800ac22:	2164      	movs	r1, #100	; 0x64
 800ac24:	fb01 f303 	mul.w	r3, r1, r3
 800ac28:	1ad3      	subs	r3, r2, r3
 800ac2a:	011b      	lsls	r3, r3, #4
 800ac2c:	3332      	adds	r3, #50	; 0x32
 800ac2e:	4a34      	ldr	r2, [pc, #208]	; (800ad00 <UART_SetConfig+0x4e4>)
 800ac30:	fba2 2303 	umull	r2, r3, r2, r3
 800ac34:	095b      	lsrs	r3, r3, #5
 800ac36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac3a:	441c      	add	r4, r3
 800ac3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac40:	2200      	movs	r2, #0
 800ac42:	673b      	str	r3, [r7, #112]	; 0x70
 800ac44:	677a      	str	r2, [r7, #116]	; 0x74
 800ac46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ac4a:	4642      	mov	r2, r8
 800ac4c:	464b      	mov	r3, r9
 800ac4e:	1891      	adds	r1, r2, r2
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	415b      	adcs	r3, r3
 800ac54:	60fb      	str	r3, [r7, #12]
 800ac56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac5a:	4641      	mov	r1, r8
 800ac5c:	1851      	adds	r1, r2, r1
 800ac5e:	6039      	str	r1, [r7, #0]
 800ac60:	4649      	mov	r1, r9
 800ac62:	414b      	adcs	r3, r1
 800ac64:	607b      	str	r3, [r7, #4]
 800ac66:	f04f 0200 	mov.w	r2, #0
 800ac6a:	f04f 0300 	mov.w	r3, #0
 800ac6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ac72:	4659      	mov	r1, fp
 800ac74:	00cb      	lsls	r3, r1, #3
 800ac76:	4651      	mov	r1, sl
 800ac78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac7c:	4651      	mov	r1, sl
 800ac7e:	00ca      	lsls	r2, r1, #3
 800ac80:	4610      	mov	r0, r2
 800ac82:	4619      	mov	r1, r3
 800ac84:	4603      	mov	r3, r0
 800ac86:	4642      	mov	r2, r8
 800ac88:	189b      	adds	r3, r3, r2
 800ac8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac8c:	464b      	mov	r3, r9
 800ac8e:	460a      	mov	r2, r1
 800ac90:	eb42 0303 	adc.w	r3, r2, r3
 800ac94:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	663b      	str	r3, [r7, #96]	; 0x60
 800aca0:	667a      	str	r2, [r7, #100]	; 0x64
 800aca2:	f04f 0200 	mov.w	r2, #0
 800aca6:	f04f 0300 	mov.w	r3, #0
 800acaa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800acae:	4649      	mov	r1, r9
 800acb0:	008b      	lsls	r3, r1, #2
 800acb2:	4641      	mov	r1, r8
 800acb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800acb8:	4641      	mov	r1, r8
 800acba:	008a      	lsls	r2, r1, #2
 800acbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800acc0:	f7f5 fea0 	bl	8000a04 <__aeabi_uldivmod>
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	4b0d      	ldr	r3, [pc, #52]	; (800ad00 <UART_SetConfig+0x4e4>)
 800acca:	fba3 1302 	umull	r1, r3, r3, r2
 800acce:	095b      	lsrs	r3, r3, #5
 800acd0:	2164      	movs	r1, #100	; 0x64
 800acd2:	fb01 f303 	mul.w	r3, r1, r3
 800acd6:	1ad3      	subs	r3, r2, r3
 800acd8:	011b      	lsls	r3, r3, #4
 800acda:	3332      	adds	r3, #50	; 0x32
 800acdc:	4a08      	ldr	r2, [pc, #32]	; (800ad00 <UART_SetConfig+0x4e4>)
 800acde:	fba2 2303 	umull	r2, r3, r2, r3
 800ace2:	095b      	lsrs	r3, r3, #5
 800ace4:	f003 020f 	and.w	r2, r3, #15
 800ace8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4422      	add	r2, r4
 800acf0:	609a      	str	r2, [r3, #8]
}
 800acf2:	bf00      	nop
 800acf4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800acf8:	46bd      	mov	sp, r7
 800acfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acfe:	bf00      	nop
 800ad00:	51eb851f 	.word	0x51eb851f

0800ad04 <__cxa_pure_virtual>:
 800ad04:	b508      	push	{r3, lr}
 800ad06:	f000 f80d 	bl	800ad24 <_ZSt9terminatev>

0800ad0a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ad0a:	b508      	push	{r3, lr}
 800ad0c:	4780      	blx	r0
 800ad0e:	f000 f80e 	bl	800ad2e <abort>
	...

0800ad14 <_ZSt13get_terminatev>:
 800ad14:	4b02      	ldr	r3, [pc, #8]	; (800ad20 <_ZSt13get_terminatev+0xc>)
 800ad16:	6818      	ldr	r0, [r3, #0]
 800ad18:	f3bf 8f5b 	dmb	ish
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	2000001c 	.word	0x2000001c

0800ad24 <_ZSt9terminatev>:
 800ad24:	b508      	push	{r3, lr}
 800ad26:	f7ff fff5 	bl	800ad14 <_ZSt13get_terminatev>
 800ad2a:	f7ff ffee 	bl	800ad0a <_ZN10__cxxabiv111__terminateEPFvvE>

0800ad2e <abort>:
 800ad2e:	b508      	push	{r3, lr}
 800ad30:	2006      	movs	r0, #6
 800ad32:	f000 f873 	bl	800ae1c <raise>
 800ad36:	2001      	movs	r0, #1
 800ad38:	f7fa fdc2 	bl	80058c0 <_exit>

0800ad3c <__errno>:
 800ad3c:	4b01      	ldr	r3, [pc, #4]	; (800ad44 <__errno+0x8>)
 800ad3e:	6818      	ldr	r0, [r3, #0]
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	20000020 	.word	0x20000020

0800ad48 <__libc_init_array>:
 800ad48:	b570      	push	{r4, r5, r6, lr}
 800ad4a:	4d0d      	ldr	r5, [pc, #52]	; (800ad80 <__libc_init_array+0x38>)
 800ad4c:	4c0d      	ldr	r4, [pc, #52]	; (800ad84 <__libc_init_array+0x3c>)
 800ad4e:	1b64      	subs	r4, r4, r5
 800ad50:	10a4      	asrs	r4, r4, #2
 800ad52:	2600      	movs	r6, #0
 800ad54:	42a6      	cmp	r6, r4
 800ad56:	d109      	bne.n	800ad6c <__libc_init_array+0x24>
 800ad58:	4d0b      	ldr	r5, [pc, #44]	; (800ad88 <__libc_init_array+0x40>)
 800ad5a:	4c0c      	ldr	r4, [pc, #48]	; (800ad8c <__libc_init_array+0x44>)
 800ad5c:	f000 f9b0 	bl	800b0c0 <_init>
 800ad60:	1b64      	subs	r4, r4, r5
 800ad62:	10a4      	asrs	r4, r4, #2
 800ad64:	2600      	movs	r6, #0
 800ad66:	42a6      	cmp	r6, r4
 800ad68:	d105      	bne.n	800ad76 <__libc_init_array+0x2e>
 800ad6a:	bd70      	pop	{r4, r5, r6, pc}
 800ad6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad70:	4798      	blx	r3
 800ad72:	3601      	adds	r6, #1
 800ad74:	e7ee      	b.n	800ad54 <__libc_init_array+0xc>
 800ad76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad7a:	4798      	blx	r3
 800ad7c:	3601      	adds	r6, #1
 800ad7e:	e7f2      	b.n	800ad66 <__libc_init_array+0x1e>
 800ad80:	0800b47c 	.word	0x0800b47c
 800ad84:	0800b47c 	.word	0x0800b47c
 800ad88:	0800b47c 	.word	0x0800b47c
 800ad8c:	0800b484 	.word	0x0800b484

0800ad90 <memcpy>:
 800ad90:	440a      	add	r2, r1
 800ad92:	4291      	cmp	r1, r2
 800ad94:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad98:	d100      	bne.n	800ad9c <memcpy+0xc>
 800ad9a:	4770      	bx	lr
 800ad9c:	b510      	push	{r4, lr}
 800ad9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ada2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ada6:	4291      	cmp	r1, r2
 800ada8:	d1f9      	bne.n	800ad9e <memcpy+0xe>
 800adaa:	bd10      	pop	{r4, pc}

0800adac <memset>:
 800adac:	4402      	add	r2, r0
 800adae:	4603      	mov	r3, r0
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d100      	bne.n	800adb6 <memset+0xa>
 800adb4:	4770      	bx	lr
 800adb6:	f803 1b01 	strb.w	r1, [r3], #1
 800adba:	e7f9      	b.n	800adb0 <memset+0x4>

0800adbc <realloc>:
 800adbc:	4b02      	ldr	r3, [pc, #8]	; (800adc8 <realloc+0xc>)
 800adbe:	460a      	mov	r2, r1
 800adc0:	4601      	mov	r1, r0
 800adc2:	6818      	ldr	r0, [r3, #0]
 800adc4:	f000 b8da 	b.w	800af7c <_realloc_r>
 800adc8:	20000020 	.word	0x20000020

0800adcc <_raise_r>:
 800adcc:	291f      	cmp	r1, #31
 800adce:	b538      	push	{r3, r4, r5, lr}
 800add0:	4604      	mov	r4, r0
 800add2:	460d      	mov	r5, r1
 800add4:	d904      	bls.n	800ade0 <_raise_r+0x14>
 800add6:	2316      	movs	r3, #22
 800add8:	6003      	str	r3, [r0, #0]
 800adda:	f04f 30ff 	mov.w	r0, #4294967295
 800adde:	bd38      	pop	{r3, r4, r5, pc}
 800ade0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ade2:	b112      	cbz	r2, 800adea <_raise_r+0x1e>
 800ade4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ade8:	b94b      	cbnz	r3, 800adfe <_raise_r+0x32>
 800adea:	4620      	mov	r0, r4
 800adec:	f000 f830 	bl	800ae50 <_getpid_r>
 800adf0:	462a      	mov	r2, r5
 800adf2:	4601      	mov	r1, r0
 800adf4:	4620      	mov	r0, r4
 800adf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adfa:	f000 b817 	b.w	800ae2c <_kill_r>
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d00a      	beq.n	800ae18 <_raise_r+0x4c>
 800ae02:	1c59      	adds	r1, r3, #1
 800ae04:	d103      	bne.n	800ae0e <_raise_r+0x42>
 800ae06:	2316      	movs	r3, #22
 800ae08:	6003      	str	r3, [r0, #0]
 800ae0a:	2001      	movs	r0, #1
 800ae0c:	e7e7      	b.n	800adde <_raise_r+0x12>
 800ae0e:	2400      	movs	r4, #0
 800ae10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae14:	4628      	mov	r0, r5
 800ae16:	4798      	blx	r3
 800ae18:	2000      	movs	r0, #0
 800ae1a:	e7e0      	b.n	800adde <_raise_r+0x12>

0800ae1c <raise>:
 800ae1c:	4b02      	ldr	r3, [pc, #8]	; (800ae28 <raise+0xc>)
 800ae1e:	4601      	mov	r1, r0
 800ae20:	6818      	ldr	r0, [r3, #0]
 800ae22:	f7ff bfd3 	b.w	800adcc <_raise_r>
 800ae26:	bf00      	nop
 800ae28:	20000020 	.word	0x20000020

0800ae2c <_kill_r>:
 800ae2c:	b538      	push	{r3, r4, r5, lr}
 800ae2e:	4d07      	ldr	r5, [pc, #28]	; (800ae4c <_kill_r+0x20>)
 800ae30:	2300      	movs	r3, #0
 800ae32:	4604      	mov	r4, r0
 800ae34:	4608      	mov	r0, r1
 800ae36:	4611      	mov	r1, r2
 800ae38:	602b      	str	r3, [r5, #0]
 800ae3a:	f7fa fd31 	bl	80058a0 <_kill>
 800ae3e:	1c43      	adds	r3, r0, #1
 800ae40:	d102      	bne.n	800ae48 <_kill_r+0x1c>
 800ae42:	682b      	ldr	r3, [r5, #0]
 800ae44:	b103      	cbz	r3, 800ae48 <_kill_r+0x1c>
 800ae46:	6023      	str	r3, [r4, #0]
 800ae48:	bd38      	pop	{r3, r4, r5, pc}
 800ae4a:	bf00      	nop
 800ae4c:	2000106c 	.word	0x2000106c

0800ae50 <_getpid_r>:
 800ae50:	f7fa bd1e 	b.w	8005890 <_getpid>

0800ae54 <sbrk_aligned>:
 800ae54:	b570      	push	{r4, r5, r6, lr}
 800ae56:	4e0e      	ldr	r6, [pc, #56]	; (800ae90 <sbrk_aligned+0x3c>)
 800ae58:	460c      	mov	r4, r1
 800ae5a:	6831      	ldr	r1, [r6, #0]
 800ae5c:	4605      	mov	r5, r0
 800ae5e:	b911      	cbnz	r1, 800ae66 <sbrk_aligned+0x12>
 800ae60:	f000 f8bc 	bl	800afdc <_sbrk_r>
 800ae64:	6030      	str	r0, [r6, #0]
 800ae66:	4621      	mov	r1, r4
 800ae68:	4628      	mov	r0, r5
 800ae6a:	f000 f8b7 	bl	800afdc <_sbrk_r>
 800ae6e:	1c43      	adds	r3, r0, #1
 800ae70:	d00a      	beq.n	800ae88 <sbrk_aligned+0x34>
 800ae72:	1cc4      	adds	r4, r0, #3
 800ae74:	f024 0403 	bic.w	r4, r4, #3
 800ae78:	42a0      	cmp	r0, r4
 800ae7a:	d007      	beq.n	800ae8c <sbrk_aligned+0x38>
 800ae7c:	1a21      	subs	r1, r4, r0
 800ae7e:	4628      	mov	r0, r5
 800ae80:	f000 f8ac 	bl	800afdc <_sbrk_r>
 800ae84:	3001      	adds	r0, #1
 800ae86:	d101      	bne.n	800ae8c <sbrk_aligned+0x38>
 800ae88:	f04f 34ff 	mov.w	r4, #4294967295
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	bd70      	pop	{r4, r5, r6, pc}
 800ae90:	20001068 	.word	0x20001068

0800ae94 <_malloc_r>:
 800ae94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae98:	1ccd      	adds	r5, r1, #3
 800ae9a:	f025 0503 	bic.w	r5, r5, #3
 800ae9e:	3508      	adds	r5, #8
 800aea0:	2d0c      	cmp	r5, #12
 800aea2:	bf38      	it	cc
 800aea4:	250c      	movcc	r5, #12
 800aea6:	2d00      	cmp	r5, #0
 800aea8:	4607      	mov	r7, r0
 800aeaa:	db01      	blt.n	800aeb0 <_malloc_r+0x1c>
 800aeac:	42a9      	cmp	r1, r5
 800aeae:	d905      	bls.n	800aebc <_malloc_r+0x28>
 800aeb0:	230c      	movs	r3, #12
 800aeb2:	603b      	str	r3, [r7, #0]
 800aeb4:	2600      	movs	r6, #0
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aebc:	4e2e      	ldr	r6, [pc, #184]	; (800af78 <_malloc_r+0xe4>)
 800aebe:	f000 f89d 	bl	800affc <__malloc_lock>
 800aec2:	6833      	ldr	r3, [r6, #0]
 800aec4:	461c      	mov	r4, r3
 800aec6:	bb34      	cbnz	r4, 800af16 <_malloc_r+0x82>
 800aec8:	4629      	mov	r1, r5
 800aeca:	4638      	mov	r0, r7
 800aecc:	f7ff ffc2 	bl	800ae54 <sbrk_aligned>
 800aed0:	1c43      	adds	r3, r0, #1
 800aed2:	4604      	mov	r4, r0
 800aed4:	d14d      	bne.n	800af72 <_malloc_r+0xde>
 800aed6:	6834      	ldr	r4, [r6, #0]
 800aed8:	4626      	mov	r6, r4
 800aeda:	2e00      	cmp	r6, #0
 800aedc:	d140      	bne.n	800af60 <_malloc_r+0xcc>
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	4631      	mov	r1, r6
 800aee2:	4638      	mov	r0, r7
 800aee4:	eb04 0803 	add.w	r8, r4, r3
 800aee8:	f000 f878 	bl	800afdc <_sbrk_r>
 800aeec:	4580      	cmp	r8, r0
 800aeee:	d13a      	bne.n	800af66 <_malloc_r+0xd2>
 800aef0:	6821      	ldr	r1, [r4, #0]
 800aef2:	3503      	adds	r5, #3
 800aef4:	1a6d      	subs	r5, r5, r1
 800aef6:	f025 0503 	bic.w	r5, r5, #3
 800aefa:	3508      	adds	r5, #8
 800aefc:	2d0c      	cmp	r5, #12
 800aefe:	bf38      	it	cc
 800af00:	250c      	movcc	r5, #12
 800af02:	4629      	mov	r1, r5
 800af04:	4638      	mov	r0, r7
 800af06:	f7ff ffa5 	bl	800ae54 <sbrk_aligned>
 800af0a:	3001      	adds	r0, #1
 800af0c:	d02b      	beq.n	800af66 <_malloc_r+0xd2>
 800af0e:	6823      	ldr	r3, [r4, #0]
 800af10:	442b      	add	r3, r5
 800af12:	6023      	str	r3, [r4, #0]
 800af14:	e00e      	b.n	800af34 <_malloc_r+0xa0>
 800af16:	6822      	ldr	r2, [r4, #0]
 800af18:	1b52      	subs	r2, r2, r5
 800af1a:	d41e      	bmi.n	800af5a <_malloc_r+0xc6>
 800af1c:	2a0b      	cmp	r2, #11
 800af1e:	d916      	bls.n	800af4e <_malloc_r+0xba>
 800af20:	1961      	adds	r1, r4, r5
 800af22:	42a3      	cmp	r3, r4
 800af24:	6025      	str	r5, [r4, #0]
 800af26:	bf18      	it	ne
 800af28:	6059      	strne	r1, [r3, #4]
 800af2a:	6863      	ldr	r3, [r4, #4]
 800af2c:	bf08      	it	eq
 800af2e:	6031      	streq	r1, [r6, #0]
 800af30:	5162      	str	r2, [r4, r5]
 800af32:	604b      	str	r3, [r1, #4]
 800af34:	4638      	mov	r0, r7
 800af36:	f104 060b 	add.w	r6, r4, #11
 800af3a:	f000 f865 	bl	800b008 <__malloc_unlock>
 800af3e:	f026 0607 	bic.w	r6, r6, #7
 800af42:	1d23      	adds	r3, r4, #4
 800af44:	1af2      	subs	r2, r6, r3
 800af46:	d0b6      	beq.n	800aeb6 <_malloc_r+0x22>
 800af48:	1b9b      	subs	r3, r3, r6
 800af4a:	50a3      	str	r3, [r4, r2]
 800af4c:	e7b3      	b.n	800aeb6 <_malloc_r+0x22>
 800af4e:	6862      	ldr	r2, [r4, #4]
 800af50:	42a3      	cmp	r3, r4
 800af52:	bf0c      	ite	eq
 800af54:	6032      	streq	r2, [r6, #0]
 800af56:	605a      	strne	r2, [r3, #4]
 800af58:	e7ec      	b.n	800af34 <_malloc_r+0xa0>
 800af5a:	4623      	mov	r3, r4
 800af5c:	6864      	ldr	r4, [r4, #4]
 800af5e:	e7b2      	b.n	800aec6 <_malloc_r+0x32>
 800af60:	4634      	mov	r4, r6
 800af62:	6876      	ldr	r6, [r6, #4]
 800af64:	e7b9      	b.n	800aeda <_malloc_r+0x46>
 800af66:	230c      	movs	r3, #12
 800af68:	603b      	str	r3, [r7, #0]
 800af6a:	4638      	mov	r0, r7
 800af6c:	f000 f84c 	bl	800b008 <__malloc_unlock>
 800af70:	e7a1      	b.n	800aeb6 <_malloc_r+0x22>
 800af72:	6025      	str	r5, [r4, #0]
 800af74:	e7de      	b.n	800af34 <_malloc_r+0xa0>
 800af76:	bf00      	nop
 800af78:	20001064 	.word	0x20001064

0800af7c <_realloc_r>:
 800af7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af80:	4680      	mov	r8, r0
 800af82:	4614      	mov	r4, r2
 800af84:	460e      	mov	r6, r1
 800af86:	b921      	cbnz	r1, 800af92 <_realloc_r+0x16>
 800af88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af8c:	4611      	mov	r1, r2
 800af8e:	f7ff bf81 	b.w	800ae94 <_malloc_r>
 800af92:	b92a      	cbnz	r2, 800afa0 <_realloc_r+0x24>
 800af94:	f000 f83e 	bl	800b014 <_free_r>
 800af98:	4625      	mov	r5, r4
 800af9a:	4628      	mov	r0, r5
 800af9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afa0:	f000 f884 	bl	800b0ac <_malloc_usable_size_r>
 800afa4:	4284      	cmp	r4, r0
 800afa6:	4607      	mov	r7, r0
 800afa8:	d802      	bhi.n	800afb0 <_realloc_r+0x34>
 800afaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800afae:	d812      	bhi.n	800afd6 <_realloc_r+0x5a>
 800afb0:	4621      	mov	r1, r4
 800afb2:	4640      	mov	r0, r8
 800afb4:	f7ff ff6e 	bl	800ae94 <_malloc_r>
 800afb8:	4605      	mov	r5, r0
 800afba:	2800      	cmp	r0, #0
 800afbc:	d0ed      	beq.n	800af9a <_realloc_r+0x1e>
 800afbe:	42bc      	cmp	r4, r7
 800afc0:	4622      	mov	r2, r4
 800afc2:	4631      	mov	r1, r6
 800afc4:	bf28      	it	cs
 800afc6:	463a      	movcs	r2, r7
 800afc8:	f7ff fee2 	bl	800ad90 <memcpy>
 800afcc:	4631      	mov	r1, r6
 800afce:	4640      	mov	r0, r8
 800afd0:	f000 f820 	bl	800b014 <_free_r>
 800afd4:	e7e1      	b.n	800af9a <_realloc_r+0x1e>
 800afd6:	4635      	mov	r5, r6
 800afd8:	e7df      	b.n	800af9a <_realloc_r+0x1e>
	...

0800afdc <_sbrk_r>:
 800afdc:	b538      	push	{r3, r4, r5, lr}
 800afde:	4d06      	ldr	r5, [pc, #24]	; (800aff8 <_sbrk_r+0x1c>)
 800afe0:	2300      	movs	r3, #0
 800afe2:	4604      	mov	r4, r0
 800afe4:	4608      	mov	r0, r1
 800afe6:	602b      	str	r3, [r5, #0]
 800afe8:	f7fa fc74 	bl	80058d4 <_sbrk>
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	d102      	bne.n	800aff6 <_sbrk_r+0x1a>
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	b103      	cbz	r3, 800aff6 <_sbrk_r+0x1a>
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	bd38      	pop	{r3, r4, r5, pc}
 800aff8:	2000106c 	.word	0x2000106c

0800affc <__malloc_lock>:
 800affc:	4801      	ldr	r0, [pc, #4]	; (800b004 <__malloc_lock+0x8>)
 800affe:	f000 b85d 	b.w	800b0bc <__retarget_lock_acquire_recursive>
 800b002:	bf00      	nop
 800b004:	20001070 	.word	0x20001070

0800b008 <__malloc_unlock>:
 800b008:	4801      	ldr	r0, [pc, #4]	; (800b010 <__malloc_unlock+0x8>)
 800b00a:	f000 b858 	b.w	800b0be <__retarget_lock_release_recursive>
 800b00e:	bf00      	nop
 800b010:	20001070 	.word	0x20001070

0800b014 <_free_r>:
 800b014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b016:	2900      	cmp	r1, #0
 800b018:	d044      	beq.n	800b0a4 <_free_r+0x90>
 800b01a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b01e:	9001      	str	r0, [sp, #4]
 800b020:	2b00      	cmp	r3, #0
 800b022:	f1a1 0404 	sub.w	r4, r1, #4
 800b026:	bfb8      	it	lt
 800b028:	18e4      	addlt	r4, r4, r3
 800b02a:	f7ff ffe7 	bl	800affc <__malloc_lock>
 800b02e:	4a1e      	ldr	r2, [pc, #120]	; (800b0a8 <_free_r+0x94>)
 800b030:	9801      	ldr	r0, [sp, #4]
 800b032:	6813      	ldr	r3, [r2, #0]
 800b034:	b933      	cbnz	r3, 800b044 <_free_r+0x30>
 800b036:	6063      	str	r3, [r4, #4]
 800b038:	6014      	str	r4, [r2, #0]
 800b03a:	b003      	add	sp, #12
 800b03c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b040:	f7ff bfe2 	b.w	800b008 <__malloc_unlock>
 800b044:	42a3      	cmp	r3, r4
 800b046:	d908      	bls.n	800b05a <_free_r+0x46>
 800b048:	6825      	ldr	r5, [r4, #0]
 800b04a:	1961      	adds	r1, r4, r5
 800b04c:	428b      	cmp	r3, r1
 800b04e:	bf01      	itttt	eq
 800b050:	6819      	ldreq	r1, [r3, #0]
 800b052:	685b      	ldreq	r3, [r3, #4]
 800b054:	1949      	addeq	r1, r1, r5
 800b056:	6021      	streq	r1, [r4, #0]
 800b058:	e7ed      	b.n	800b036 <_free_r+0x22>
 800b05a:	461a      	mov	r2, r3
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	b10b      	cbz	r3, 800b064 <_free_r+0x50>
 800b060:	42a3      	cmp	r3, r4
 800b062:	d9fa      	bls.n	800b05a <_free_r+0x46>
 800b064:	6811      	ldr	r1, [r2, #0]
 800b066:	1855      	adds	r5, r2, r1
 800b068:	42a5      	cmp	r5, r4
 800b06a:	d10b      	bne.n	800b084 <_free_r+0x70>
 800b06c:	6824      	ldr	r4, [r4, #0]
 800b06e:	4421      	add	r1, r4
 800b070:	1854      	adds	r4, r2, r1
 800b072:	42a3      	cmp	r3, r4
 800b074:	6011      	str	r1, [r2, #0]
 800b076:	d1e0      	bne.n	800b03a <_free_r+0x26>
 800b078:	681c      	ldr	r4, [r3, #0]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	6053      	str	r3, [r2, #4]
 800b07e:	4421      	add	r1, r4
 800b080:	6011      	str	r1, [r2, #0]
 800b082:	e7da      	b.n	800b03a <_free_r+0x26>
 800b084:	d902      	bls.n	800b08c <_free_r+0x78>
 800b086:	230c      	movs	r3, #12
 800b088:	6003      	str	r3, [r0, #0]
 800b08a:	e7d6      	b.n	800b03a <_free_r+0x26>
 800b08c:	6825      	ldr	r5, [r4, #0]
 800b08e:	1961      	adds	r1, r4, r5
 800b090:	428b      	cmp	r3, r1
 800b092:	bf04      	itt	eq
 800b094:	6819      	ldreq	r1, [r3, #0]
 800b096:	685b      	ldreq	r3, [r3, #4]
 800b098:	6063      	str	r3, [r4, #4]
 800b09a:	bf04      	itt	eq
 800b09c:	1949      	addeq	r1, r1, r5
 800b09e:	6021      	streq	r1, [r4, #0]
 800b0a0:	6054      	str	r4, [r2, #4]
 800b0a2:	e7ca      	b.n	800b03a <_free_r+0x26>
 800b0a4:	b003      	add	sp, #12
 800b0a6:	bd30      	pop	{r4, r5, pc}
 800b0a8:	20001064 	.word	0x20001064

0800b0ac <_malloc_usable_size_r>:
 800b0ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0b0:	1f18      	subs	r0, r3, #4
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	bfbc      	itt	lt
 800b0b6:	580b      	ldrlt	r3, [r1, r0]
 800b0b8:	18c0      	addlt	r0, r0, r3
 800b0ba:	4770      	bx	lr

0800b0bc <__retarget_lock_acquire_recursive>:
 800b0bc:	4770      	bx	lr

0800b0be <__retarget_lock_release_recursive>:
 800b0be:	4770      	bx	lr

0800b0c0 <_init>:
 800b0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c2:	bf00      	nop
 800b0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0c6:	bc08      	pop	{r3}
 800b0c8:	469e      	mov	lr, r3
 800b0ca:	4770      	bx	lr

0800b0cc <_fini>:
 800b0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ce:	bf00      	nop
 800b0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0d2:	bc08      	pop	{r3}
 800b0d4:	469e      	mov	lr, r3
 800b0d6:	4770      	bx	lr
